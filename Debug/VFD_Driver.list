
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efb0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  0800f0c0  0800f0c0  0001f0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8e0  0800f8e0  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800f8e0  0800f8e0  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f8e0  0800f8e0  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8e0  0800f8e0  0001f8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8e4  0800f8e4  0001f8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800f8e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003508  20000190  0800fa78  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003698  0800fa78  00023698  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d7fb  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f04  00000000  00000000  0004d9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e88  00000000  00000000  000538b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c58  00000000  00000000  00055740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eaa3  00000000  00000000  00057398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026548  00000000  00000000  00075e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c725  00000000  00000000  0009c383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00138aa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ecc  00000000  00000000  00138afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000190 	.word	0x20000190
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f0a8 	.word	0x0800f0a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000194 	.word	0x20000194
 800014c:	0800f0a8 	.word	0x0800f0a8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <d3231_get_time>:

#define D3231_ADDRESS (0b1101000 << 1)
uint8_t d3231_mem[19];

uint8_t * d3231_get_time(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b084      	sub	sp, #16
 8000178:	af04      	add	r7, sp, #16
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 800017a:	4b0f      	ldr	r3, [pc, #60]	; (80001b8 <d3231_get_time+0x44>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	f04f 31ff 	mov.w	r1, #4294967295
 8000182:	4618      	mov	r0, r3
 8000184:	f00c f842 	bl	800c20c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(&hi2c1, D3231_ADDRESS, 0, 1, d3231_mem, 3, 10);
 8000188:	230a      	movs	r3, #10
 800018a:	9302      	str	r3, [sp, #8]
 800018c:	2303      	movs	r3, #3
 800018e:	9301      	str	r3, [sp, #4]
 8000190:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <d3231_get_time+0x48>)
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2301      	movs	r3, #1
 8000196:	2200      	movs	r2, #0
 8000198:	21d0      	movs	r1, #208	; 0xd0
 800019a:	4809      	ldr	r0, [pc, #36]	; (80001c0 <d3231_get_time+0x4c>)
 800019c:	f003 febc 	bl	8003f18 <HAL_I2C_Mem_Read>
	xSemaphoreGive(muI2CHandle);
 80001a0:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <d3231_get_time+0x44>)
 80001a2:	6818      	ldr	r0, [r3, #0]
 80001a4:	2300      	movs	r3, #0
 80001a6:	2200      	movs	r2, #0
 80001a8:	2100      	movs	r1, #0
 80001aa:	f00b fdb9 	bl	800bd20 <xQueueGenericSend>
	return d3231_mem;
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <d3231_get_time+0x48>)
}
 80001b0:	4618      	mov	r0, r3
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	2000248c 	.word	0x2000248c
 80001bc:	20002478 	.word	0x20002478
 80001c0:	200024d0 	.word	0x200024d0

080001c4 <d3231_get_temp>:

uint8_t * d3231_get_temp(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af04      	add	r7, sp, #16
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 80001ca:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <d3231_get_temp+0x44>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f04f 31ff 	mov.w	r1, #4294967295
 80001d2:	4618      	mov	r0, r3
 80001d4:	f00c f81a 	bl	800c20c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(&hi2c1, D3231_ADDRESS, 0x11, 1, d3231_mem+0x11, 2, 10);
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <d3231_get_temp+0x48>)
 80001da:	220a      	movs	r2, #10
 80001dc:	9202      	str	r2, [sp, #8]
 80001de:	2202      	movs	r2, #2
 80001e0:	9201      	str	r2, [sp, #4]
 80001e2:	9300      	str	r3, [sp, #0]
 80001e4:	2301      	movs	r3, #1
 80001e6:	2211      	movs	r2, #17
 80001e8:	21d0      	movs	r1, #208	; 0xd0
 80001ea:	4809      	ldr	r0, [pc, #36]	; (8000210 <d3231_get_temp+0x4c>)
 80001ec:	f003 fe94 	bl	8003f18 <HAL_I2C_Mem_Read>
	xSemaphoreGive(muI2CHandle);
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <d3231_get_temp+0x44>)
 80001f2:	6818      	ldr	r0, [r3, #0]
 80001f4:	2300      	movs	r3, #0
 80001f6:	2200      	movs	r2, #0
 80001f8:	2100      	movs	r1, #0
 80001fa:	f00b fd91 	bl	800bd20 <xQueueGenericSend>
	return d3231_mem+0x11;
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <d3231_get_temp+0x48>)
}
 8000200:	4618      	mov	r0, r3
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	2000248c 	.word	0x2000248c
 800020c:	20002489 	.word	0x20002489
 8000210:	200024d0 	.word	0x200024d0

08000214 <d3231_get_all>:

uint8_t * d3231_get_all(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af04      	add	r7, sp, #16
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 800021a:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <d3231_get_all+0x44>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f04f 31ff 	mov.w	r1, #4294967295
 8000222:	4618      	mov	r0, r3
 8000224:	f00b fff2 	bl	800c20c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(&hi2c1, D3231_ADDRESS, 0, 1, d3231_mem, 19, 100);
 8000228:	2364      	movs	r3, #100	; 0x64
 800022a:	9302      	str	r3, [sp, #8]
 800022c:	2313      	movs	r3, #19
 800022e:	9301      	str	r3, [sp, #4]
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <d3231_get_all+0x48>)
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	2301      	movs	r3, #1
 8000236:	2200      	movs	r2, #0
 8000238:	21d0      	movs	r1, #208	; 0xd0
 800023a:	4809      	ldr	r0, [pc, #36]	; (8000260 <d3231_get_all+0x4c>)
 800023c:	f003 fe6c 	bl	8003f18 <HAL_I2C_Mem_Read>
	xSemaphoreGive(muI2CHandle);
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <d3231_get_all+0x44>)
 8000242:	6818      	ldr	r0, [r3, #0]
 8000244:	2300      	movs	r3, #0
 8000246:	2200      	movs	r2, #0
 8000248:	2100      	movs	r1, #0
 800024a:	f00b fd69 	bl	800bd20 <xQueueGenericSend>
	return d3231_mem;
 800024e:	4b03      	ldr	r3, [pc, #12]	; (800025c <d3231_get_all+0x48>)
}
 8000250:	4618      	mov	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	2000248c 	.word	0x2000248c
 800025c:	20002478 	.word	0x20002478
 8000260:	200024d0 	.word	0x200024d0

08000264 <d3231_get_A2M2>:

uint8_t d3231_get_A2M2(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	return d3231_get_all()[0xB];
 8000268:	f7ff ffd4 	bl	8000214 <d3231_get_all>
 800026c:	4603      	mov	r3, r0
 800026e:	7adb      	ldrb	r3, [r3, #11]
}
 8000270:	4618      	mov	r0, r3
 8000272:	bd80      	pop	{r7, pc}

08000274 <d3231_set_A2M2>:

void d3231_set_A2M2(uint8_t data)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af04      	add	r7, sp, #16
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 800027e:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <d3231_set_A2M2+0x48>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f04f 31ff 	mov.w	r1, #4294967295
 8000286:	4618      	mov	r0, r3
 8000288:	f00b ffc0 	bl	800c20c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Write(&hi2c1, D3231_ADDRESS, 0xB, 1, &data, 1, 100);
 800028c:	2364      	movs	r3, #100	; 0x64
 800028e:	9302      	str	r3, [sp, #8]
 8000290:	2301      	movs	r3, #1
 8000292:	9301      	str	r3, [sp, #4]
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	2301      	movs	r3, #1
 800029a:	220b      	movs	r2, #11
 800029c:	21d0      	movs	r1, #208	; 0xd0
 800029e:	4808      	ldr	r0, [pc, #32]	; (80002c0 <d3231_set_A2M2+0x4c>)
 80002a0:	f003 fd40 	bl	8003d24 <HAL_I2C_Mem_Write>
	xSemaphoreGive(muI2CHandle);
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <d3231_set_A2M2+0x48>)
 80002a6:	6818      	ldr	r0, [r3, #0]
 80002a8:	2300      	movs	r3, #0
 80002aa:	2200      	movs	r2, #0
 80002ac:	2100      	movs	r1, #0
 80002ae:	f00b fd37 	bl	800bd20 <xQueueGenericSend>
}
 80002b2:	bf00      	nop
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000248c 	.word	0x2000248c
 80002c0:	200024d0 	.word	0x200024d0

080002c4 <d3231_set>:

void d3231_set(uint8_t * arr, bool date)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af04      	add	r7, sp, #16
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	70fb      	strb	r3, [r7, #3]
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <d3231_set+0x50>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f04f 31ff 	mov.w	r1, #4294967295
 80002d8:	4618      	mov	r0, r3
 80002da:	f00b ff97 	bl	800c20c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Write(&hi2c1, D3231_ADDRESS, date<<2, 1, arr, 3, 100);
 80002de:	78fb      	ldrb	r3, [r7, #3]
 80002e0:	b29b      	uxth	r3, r3
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	b29a      	uxth	r2, r3
 80002e6:	2364      	movs	r3, #100	; 0x64
 80002e8:	9302      	str	r3, [sp, #8]
 80002ea:	2303      	movs	r3, #3
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	2301      	movs	r3, #1
 80002f4:	21d0      	movs	r1, #208	; 0xd0
 80002f6:	4808      	ldr	r0, [pc, #32]	; (8000318 <d3231_set+0x54>)
 80002f8:	f003 fd14 	bl	8003d24 <HAL_I2C_Mem_Write>
	xSemaphoreGive(muI2CHandle);
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <d3231_set+0x50>)
 80002fe:	6818      	ldr	r0, [r3, #0]
 8000300:	2300      	movs	r3, #0
 8000302:	2200      	movs	r2, #0
 8000304:	2100      	movs	r1, #0
 8000306:	f00b fd0b 	bl	800bd20 <xQueueGenericSend>
}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	2000248c 	.word	0x2000248c
 8000318:	200024d0 	.word	0x200024d0

0800031c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of muI2C */
  muI2CHandle = osMutexNew(&muI2C_attributes);
 8000320:	481d      	ldr	r0, [pc, #116]	; (8000398 <MX_FREERTOS_Init+0x7c>)
 8000322:	f00b f96d 	bl	800b600 <osMutexNew>
 8000326:	4603      	mov	r3, r0
 8000328:	4a1c      	ldr	r2, [pc, #112]	; (800039c <MX_FREERTOS_Init+0x80>)
 800032a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (32, sizeof(uint8_t), &qUSB_rcv_attributes);
 800032c:	4a1c      	ldr	r2, [pc, #112]	; (80003a0 <MX_FREERTOS_Init+0x84>)
 800032e:	2101      	movs	r1, #1
 8000330:	2020      	movs	r0, #32
 8000332:	f00b f9ff 	bl	800b734 <osMessageQueueNew>
 8000336:	4603      	mov	r3, r0
 8000338:	4a1a      	ldr	r2, [pc, #104]	; (80003a4 <MX_FREERTOS_Init+0x88>)
 800033a:	6013      	str	r3, [r2, #0]

  /* creation of qVFD */
  qVFDHandle = osMessageQueueNew (16, sizeof(uint16_t), &qVFD_attributes);
 800033c:	4a1a      	ldr	r2, [pc, #104]	; (80003a8 <MX_FREERTOS_Init+0x8c>)
 800033e:	2102      	movs	r1, #2
 8000340:	2010      	movs	r0, #16
 8000342:	f00b f9f7 	bl	800b734 <osMessageQueueNew>
 8000346:	4603      	mov	r3, r0
 8000348:	4a18      	ldr	r2, [pc, #96]	; (80003ac <MX_FREERTOS_Init+0x90>)
 800034a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800034c:	4a18      	ldr	r2, [pc, #96]	; (80003b0 <MX_FREERTOS_Init+0x94>)
 800034e:	2100      	movs	r1, #0
 8000350:	4818      	ldr	r0, [pc, #96]	; (80003b4 <MX_FREERTOS_Init+0x98>)
 8000352:	f00b f87d 	bl	800b450 <osThreadNew>
 8000356:	4603      	mov	r3, r0
 8000358:	4a17      	ldr	r2, [pc, #92]	; (80003b8 <MX_FREERTOS_Init+0x9c>)
 800035a:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 800035c:	4a17      	ldr	r2, [pc, #92]	; (80003bc <MX_FREERTOS_Init+0xa0>)
 800035e:	2100      	movs	r1, #0
 8000360:	4817      	ldr	r0, [pc, #92]	; (80003c0 <MX_FREERTOS_Init+0xa4>)
 8000362:	f00b f875 	bl	800b450 <osThreadNew>
 8000366:	4603      	mov	r3, r0
 8000368:	4a16      	ldr	r2, [pc, #88]	; (80003c4 <MX_FREERTOS_Init+0xa8>)
 800036a:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 800036c:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <MX_FREERTOS_Init+0xac>)
 800036e:	2100      	movs	r1, #0
 8000370:	4816      	ldr	r0, [pc, #88]	; (80003cc <MX_FREERTOS_Init+0xb0>)
 8000372:	f00b f86d 	bl	800b450 <osThreadNew>
 8000376:	4603      	mov	r3, r0
 8000378:	4a15      	ldr	r2, [pc, #84]	; (80003d0 <MX_FREERTOS_Init+0xb4>)
 800037a:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(StartEncoder, NULL, &Encoder_attributes);
 800037c:	4a15      	ldr	r2, [pc, #84]	; (80003d4 <MX_FREERTOS_Init+0xb8>)
 800037e:	2100      	movs	r1, #0
 8000380:	4815      	ldr	r0, [pc, #84]	; (80003d8 <MX_FREERTOS_Init+0xbc>)
 8000382:	f00b f865 	bl	800b450 <osThreadNew>
 8000386:	4603      	mov	r3, r0
 8000388:	4a14      	ldr	r2, [pc, #80]	; (80003dc <MX_FREERTOS_Init+0xc0>)
 800038a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <MX_FREERTOS_Init+0x88>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a13      	ldr	r2, [pc, #76]	; (80003e0 <MX_FREERTOS_Init+0xc4>)
 8000392:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	0800f3e0 	.word	0x0800f3e0
 800039c:	2000248c 	.word	0x2000248c
 80003a0:	0800f3b0 	.word	0x0800f3b0
 80003a4:	200024c8 	.word	0x200024c8
 80003a8:	0800f3c8 	.word	0x0800f3c8
 80003ac:	20002490 	.word	0x20002490
 80003b0:	0800f320 	.word	0x0800f320
 80003b4:	080003e5 	.word	0x080003e5
 80003b8:	20002498 	.word	0x20002498
 80003bc:	0800f344 	.word	0x0800f344
 80003c0:	08000419 	.word	0x08000419
 80003c4:	2000249c 	.word	0x2000249c
 80003c8:	0800f368 	.word	0x0800f368
 80003cc:	08000475 	.word	0x08000475
 80003d0:	200024c4 	.word	0x200024c4
 80003d4:	0800f38c 	.word	0x0800f38c
 80003d8:	08000515 	.word	0x08000515
 80003dc:	200024cc 	.word	0x200024cc
 80003e0:	20002494 	.word	0x20002494

080003e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80003ec:	f00e f92e 	bl	800e64c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f6:	4807      	ldr	r0, [pc, #28]	; (8000414 <StartDefaultTask+0x30>)
 80003f8:	f003 fafd 	bl	80039f6 <HAL_GPIO_WritePin>
  osDelay(10);
 80003fc:	200a      	movs	r0, #10
 80003fe:	f00b f8d1 	bl	800b5a4 <osDelay>
  init_microrl();
 8000402:	f002 fa7b 	bl	80028fc <init_microrl>
  set_CDC_ready(); // allow to send
 8000406:	f002 fab3 	bl	8002970 <set_CDC_ready>
  for(;;)
  {
#if USE_ENCODER
    process_encoder();
#endif
    osDelay(1);
 800040a:	2001      	movs	r0, #1
 800040c:	f00b f8ca 	bl	800b5a4 <osDelay>
 8000410:	e7fb      	b.n	800040a <StartDefaultTask+0x26>
 8000412:	bf00      	nop
 8000414:	40010800 	.word	0x40010800

08000418 <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 8000420:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000424:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 8000426:	f00c fcdd 	bl	800cde4 <xTaskGetTickCount>
 800042a:	4603      	mov	r3, r0
 800042c:	60bb      	str	r3, [r7, #8]

		if (use_leds)
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <StartLEDheartbeat+0x50>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d005      	beq.n	8000442 <StartLEDheartbeat+0x2a>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043a:	480c      	ldr	r0, [pc, #48]	; (800046c <StartLEDheartbeat+0x54>)
 800043c:	f003 faf3 	bl	8003a26 <HAL_GPIO_TogglePin>
 8000440:	e005      	b.n	800044e <StartLEDheartbeat+0x36>
		else
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000442:	2201      	movs	r2, #1
 8000444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000448:	4808      	ldr	r0, [pc, #32]	; (800046c <StartLEDheartbeat+0x54>)
 800044a:	f003 fad4 	bl	80039f6 <HAL_GPIO_WritePin>

		tick_counter++;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <StartLEDheartbeat+0x58>)
 8000450:	881b      	ldrh	r3, [r3, #0]
 8000452:	3301      	adds	r3, #1
 8000454:	b29a      	uxth	r2, r3
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <StartLEDheartbeat+0x58>)
 8000458:	801a      	strh	r2, [r3, #0]

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800045a:	f107 0308 	add.w	r3, r7, #8
 800045e:	68f9      	ldr	r1, [r7, #12]
 8000460:	4618      	mov	r0, r3
 8000462:	f00c fafb 	bl	800ca5c <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000466:	e7de      	b.n	8000426 <StartLEDheartbeat+0xe>
 8000468:	200001b0 	.word	0x200001b0
 800046c:	40011000 	.word	0x40011000
 8000470:	200001ac 	.word	0x200001ac

08000474 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 800047c:	2000      	movs	r0, #0
 800047e:	f00c ffb3 	bl	800d3e8 <uxTaskGetStackHighWaterMark>
 8000482:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000488:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <StartUSB_rcv+0x44>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f107 010f 	add.w	r1, r7, #15
 8000490:	f04f 32ff 	mov.w	r2, #4294967295
 8000494:	4618      	mov	r0, r3
 8000496:	f00b fdd9 	bl	800c04c <xQueueReceive>
	  microrl_print_char(buf);
 800049a:	7bfb      	ldrb	r3, [r7, #15]
 800049c:	4618      	mov	r0, r3
 800049e:	f001 feb9 	bl	8002214 <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80004a2:	2000      	movs	r0, #0
 80004a4:	f00c ffa0 	bl	800d3e8 <uxTaskGetStackHighWaterMark>
 80004a8:	6138      	str	r0, [r7, #16]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 80004aa:	693a      	ldr	r2, [r7, #16]
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	d2ea      	bcs.n	8000488 <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	617b      	str	r3, [r7, #20]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80004b6:	e7e7      	b.n	8000488 <StartUSB_rcv+0x14>
 80004b8:	20002494 	.word	0x20002494

080004bc <vfd_update.7748>:
	static bool invert = true;
	static bool released = true;


	void vfd_update(void)
	{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t data = 0b11000000; // command 3, set address to 0
 80004c6:	23c0      	movs	r3, #192	; 0xc0
 80004c8:	73fb      	strb	r3, [r7, #15]
	    HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d0:	480d      	ldr	r0, [pc, #52]	; (8000508 <vfd_update.7748+0x4c>)
 80004d2:	f003 fa90 	bl	80039f6 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004d6:	f107 010f 	add.w	r1, r7, #15
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	2201      	movs	r2, #1
 80004e0:	480a      	ldr	r0, [pc, #40]	; (800050c <vfd_update.7748+0x50>)
 80004e2:	f006 fd27 	bl	8006f34 <HAL_SPI_Transmit>
	    HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ea:	2221      	movs	r2, #33	; 0x21
 80004ec:	4908      	ldr	r1, [pc, #32]	; (8000510 <vfd_update.7748+0x54>)
 80004ee:	4807      	ldr	r0, [pc, #28]	; (800050c <vfd_update.7748+0x50>)
 80004f0:	f006 fd20 	bl	8006f34 <HAL_SPI_Transmit>
	    HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fa:	4803      	ldr	r0, [pc, #12]	; (8000508 <vfd_update.7748+0x4c>)
 80004fc:	f003 fa7b 	bl	80039f6 <HAL_GPIO_WritePin>
	}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40010c00 	.word	0x40010c00
 800050c:	20002610 	.word	0x20002610
 8000510:	200024a0 	.word	0x200024a0

08000514 <StartEncoder>:
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b0a8      	sub	sp, #160	; 0xa0
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
void StartEncoder(void *argument)
 800051c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000520:	61fb      	str	r3, [r7, #28]


  osDelay(500);
 8000522:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000526:	f00b f83d 	bl	800b5a4 <osDelay>
  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 800052a:	2201      	movs	r2, #1
 800052c:	2120      	movs	r1, #32
 800052e:	48d3      	ldr	r0, [pc, #844]	; (800087c <StartEncoder+0x368>)
 8000530:	f003 fa61 	bl	80039f6 <HAL_GPIO_WritePin>



  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000534:	2300      	movs	r3, #0
 8000536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800053a:	e00a      	b.n	8000552 <StartEncoder+0x3e>
  {
	  vfd.arr1[i] = 0xFF;
 800053c:	4ad0      	ldr	r2, [pc, #832]	; (8000880 <StartEncoder+0x36c>)
 800053e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000542:	4413      	add	r3, r2
 8000544:	22ff      	movs	r2, #255	; 0xff
 8000546:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000548:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800054c:	3301      	adds	r3, #1
 800054e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000552:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000556:	2b20      	cmp	r3, #32
 8000558:	d9f0      	bls.n	800053c <StartEncoder+0x28>
  }
  uint8_t data;

  data = 0b01000001; // command 2, write to LED port
 800055a:	2341      	movs	r3, #65	; 0x41
 800055c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000566:	48c5      	ldr	r0, [pc, #788]	; (800087c <StartEncoder+0x368>)
 8000568:	f003 fa45 	bl	80039f6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800056c:	f107 0153 	add.w	r1, r7, #83	; 0x53
 8000570:	f04f 33ff 	mov.w	r3, #4294967295
 8000574:	2201      	movs	r2, #1
 8000576:	48c3      	ldr	r0, [pc, #780]	; (8000884 <StartEncoder+0x370>)
 8000578:	f006 fcdc 	bl	8006f34 <HAL_SPI_Transmit>
  osDelay(10);
 800057c:	200a      	movs	r0, #10
 800057e:	f00b f811 	bl	800b5a4 <osDelay>

  data = 0b1111; // disable LEDs
 8000582:	230f      	movs	r3, #15
 8000584:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000588:	f107 0153 	add.w	r1, r7, #83	; 0x53
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	2201      	movs	r2, #1
 8000592:	48bc      	ldr	r0, [pc, #752]	; (8000884 <StartEncoder+0x370>)
 8000594:	f006 fcce 	bl	8006f34 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800059e:	48b7      	ldr	r0, [pc, #732]	; (800087c <StartEncoder+0x368>)
 80005a0:	f003 fa29 	bl	80039f6 <HAL_GPIO_WritePin>


  data = 0b01000000; // command 2, write to Display port
 80005a4:	2340      	movs	r3, #64	; 0x40
 80005a6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b0:	48b2      	ldr	r0, [pc, #712]	; (800087c <StartEncoder+0x368>)
 80005b2:	f003 fa20 	bl	80039f6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80005b6:	f107 0153 	add.w	r1, r7, #83	; 0x53
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	2201      	movs	r2, #1
 80005c0:	48b0      	ldr	r0, [pc, #704]	; (8000884 <StartEncoder+0x370>)
 80005c2:	f006 fcb7 	bl	8006f34 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005cc:	48ab      	ldr	r0, [pc, #684]	; (800087c <StartEncoder+0x368>)
 80005ce:	f003 fa12 	bl	80039f6 <HAL_GPIO_WritePin>
  osDelay(10);
 80005d2:	200a      	movs	r0, #10
 80005d4:	f00a ffe6 	bl	800b5a4 <osDelay>
  vfd_update();
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	469c      	mov	ip, r3
 80005de:	f7ff ff6d 	bl	80004bc <vfd_update.7748>
  osDelay(10);
 80005e2:	200a      	movs	r0, #10
 80005e4:	f00a ffde 	bl	800b5a4 <osDelay>
  // init display, 11 digits 17 segments
  data = 0b00000111; // command 1, 11 digits 17 segments
 80005e8:	2307      	movs	r3, #7
 80005ea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f4:	48a1      	ldr	r0, [pc, #644]	; (800087c <StartEncoder+0x368>)
 80005f6:	f003 f9fe 	bl	80039f6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80005fa:	f107 0153 	add.w	r1, r7, #83	; 0x53
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	2201      	movs	r2, #1
 8000604:	489f      	ldr	r0, [pc, #636]	; (8000884 <StartEncoder+0x370>)
 8000606:	f006 fc95 	bl	8006f34 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000610:	489a      	ldr	r0, [pc, #616]	; (800087c <StartEncoder+0x368>)
 8000612:	f003 f9f0 	bl	80039f6 <HAL_GPIO_WritePin>
  osDelay(10);
 8000616:	200a      	movs	r0, #10
 8000618:	f00a ffc4 	bl	800b5a4 <osDelay>

  for (uint8_t i = 0; i <= 0b111; i++)
 800061c:	2300      	movs	r3, #0
 800061e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000622:	e02d      	b.n	8000680 <StartEncoder+0x16c>
  {
	  data = 0b10000000; // command 4
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  data |= 1<<3; // enable/disable display
 800062a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800062e:	f043 0308 	orr.w	r3, r3, #8
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  data |= i; // set brightness
 8000638:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800063c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000640:	4313      	orrs	r3, r2
 8000642:	b2db      	uxtb	r3, r3
 8000644:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064e:	488b      	ldr	r0, [pc, #556]	; (800087c <StartEncoder+0x368>)
 8000650:	f003 f9d1 	bl	80039f6 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000654:	f107 0153 	add.w	r1, r7, #83	; 0x53
 8000658:	f04f 33ff 	mov.w	r3, #4294967295
 800065c:	2201      	movs	r2, #1
 800065e:	4889      	ldr	r0, [pc, #548]	; (8000884 <StartEncoder+0x370>)
 8000660:	f006 fc68 	bl	8006f34 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066a:	4884      	ldr	r0, [pc, #528]	; (800087c <StartEncoder+0x368>)
 800066c:	f003 f9c3 	bl	80039f6 <HAL_GPIO_WritePin>
	  osDelay(250);
 8000670:	20fa      	movs	r0, #250	; 0xfa
 8000672:	f00a ff97 	bl	800b5a4 <osDelay>
  for (uint8_t i = 0; i <= 0b111; i++)
 8000676:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800067a:	3301      	adds	r3, #1
 800067c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000680:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000684:	2b07      	cmp	r3, #7
 8000686:	d9cd      	bls.n	8000624 <StartEncoder+0x110>
  }



  for (int i = 0; i < 11; i++)
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800068e:	e025      	b.n	80006dc <StartEncoder+0x1c8>
  {
	  for (int b = 0; b < 3; b++) // erasing from right to left
 8000690:	2300      	movs	r3, #0
 8000692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000696:	e010      	b.n	80006ba <StartEncoder+0x1a6>
	  {
		  vfd.arr2[i][b] = 0;
 8000698:	4979      	ldr	r1, [pc, #484]	; (8000880 <StartEncoder+0x36c>)
 800069a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800069e:	4613      	mov	r3, r2
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	4413      	add	r3, r2
 80006a4:	18ca      	adds	r2, r1, r3
 80006a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006aa:	4413      	add	r3, r2
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
	  for (int b = 0; b < 3; b++) // erasing from right to left
 80006b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006b4:	3301      	adds	r3, #1
 80006b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80006ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006be:	2b02      	cmp	r3, #2
 80006c0:	ddea      	ble.n	8000698 <StartEncoder+0x184>
	  }
	  vfd_update();
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	469c      	mov	ip, r3
 80006c8:	f7ff fef8 	bl	80004bc <vfd_update.7748>
	  osDelay(150);
 80006cc:	2096      	movs	r0, #150	; 0x96
 80006ce:	f00a ff69 	bl	800b5a4 <osDelay>
  for (int i = 0; i < 11; i++)
 80006d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006d6:	3301      	adds	r3, #1
 80006d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80006dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006e0:	2b0a      	cmp	r3, #10
 80006e2:	ddd5      	ble.n	8000690 <StartEncoder+0x17c>
  }
  osDelay (500);
 80006e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e8:	f00a ff5c 	bl	800b5a4 <osDelay>

  //erase everything... just in case
  clr_vfd();
 80006ec:	f002 fe56 	bl	800339c <clr_vfd>


  // fill everything
    for (int j = 1; j < 15; j++)
 80006f0:	2301      	movs	r3, #1
 80006f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80006f6:	e04c      	b.n	8000792 <StartEncoder+0x27e>
    {
  	  uint32_t temp = 1<<j;
 80006f8:	2201      	movs	r2, #1
 80006fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	657b      	str	r3, [r7, #84]	; 0x54
  	  for (int i = 1; i < 11; i++)
 8000704:	2301      	movs	r3, #1
 8000706:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800070a:	e031      	b.n	8000770 <StartEncoder+0x25c>
  	  {
  		  for (int b = 0; b < 3; b++)
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000712:	e024      	b.n	800075e <StartEncoder+0x24a>
  		  {
  			  vfd.arr2[i][b] |= (temp>>(b<<3))&0xFF;
 8000714:	495a      	ldr	r1, [pc, #360]	; (8000880 <StartEncoder+0x36c>)
 8000716:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800071a:	4613      	mov	r3, r2
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	4413      	add	r3, r2
 8000720:	18ca      	adds	r2, r1, r3
 8000722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000726:	4413      	add	r3, r2
 8000728:	781a      	ldrb	r2, [r3, #0]
 800072a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800072e:	00db      	lsls	r3, r3, #3
 8000730:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000732:	fa21 f303 	lsr.w	r3, r1, r3
 8000736:	b2db      	uxtb	r3, r3
 8000738:	4313      	orrs	r3, r2
 800073a:	b2d8      	uxtb	r0, r3
 800073c:	4950      	ldr	r1, [pc, #320]	; (8000880 <StartEncoder+0x36c>)
 800073e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000742:	4613      	mov	r3, r2
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	4413      	add	r3, r2
 8000748:	18ca      	adds	r2, r1, r3
 800074a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800074e:	4413      	add	r3, r2
 8000750:	4602      	mov	r2, r0
 8000752:	701a      	strb	r2, [r3, #0]
  		  for (int b = 0; b < 3; b++)
 8000754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000758:	3301      	adds	r3, #1
 800075a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800075e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000762:	2b02      	cmp	r3, #2
 8000764:	ddd6      	ble.n	8000714 <StartEncoder+0x200>
  	  for (int i = 1; i < 11; i++)
 8000766:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800076a:	3301      	adds	r3, #1
 800076c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000770:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000774:	2b0a      	cmp	r3, #10
 8000776:	ddc9      	ble.n	800070c <StartEncoder+0x1f8>
  		  }
  	  }
  	  vfd_update();
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	469c      	mov	ip, r3
 800077e:	f7ff fe9d 	bl	80004bc <vfd_update.7748>
  	  osDelay(100);
 8000782:	2064      	movs	r0, #100	; 0x64
 8000784:	f00a ff0e 	bl	800b5a4 <osDelay>
    for (int j = 1; j < 15; j++)
 8000788:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800078c:	3301      	adds	r3, #1
 800078e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000796:	2b0e      	cmp	r3, #14
 8000798:	ddae      	ble.n	80006f8 <StartEncoder+0x1e4>
    }

    const uint8_t arr[][2] = {{6, 0},
 800079a:	4b3b      	ldr	r3, [pc, #236]	; (8000888 <StartEncoder+0x374>)
 800079c:	f107 0420 	add.w	r4, r7, #32
 80007a0:	461d      	mov	r5, r3
 80007a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ae:	682b      	ldr	r3, [r5, #0]
 80007b0:	8023      	strh	r3, [r4, #0]
					   {9, 16},
					   {10, 16},
					   {10, 15},
    };

    for (int j = 0; j < sizeof(arr)/2; j++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80007b8:	e04d      	b.n	8000856 <StartEncoder+0x342>
    {
		for (int b = 0; b < 3; b++)
 80007ba:	2300      	movs	r3, #0
 80007bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80007be:	e03a      	b.n	8000836 <StartEncoder+0x322>
		  vfd.arr2[arr[j][0]][b] |= ((1<<arr[j][1])>>(b<<3))&0xFF;
 80007c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80007ca:	4413      	add	r3, r2
 80007cc:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 80007d0:	4619      	mov	r1, r3
 80007d2:	4a2b      	ldr	r2, [pc, #172]	; (8000880 <StartEncoder+0x36c>)
 80007d4:	460b      	mov	r3, r1
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	440b      	add	r3, r1
 80007da:	441a      	add	r2, r3
 80007dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	b25a      	sxtb	r2, r3
 80007e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80007ee:	440b      	add	r3, r1
 80007f0:	f813 3c7f 	ldrb.w	r3, [r3, #-127]
 80007f4:	4619      	mov	r1, r3
 80007f6:	2301      	movs	r3, #1
 80007f8:	fa03 f101 	lsl.w	r1, r3, r1
 80007fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	fa41 f303 	asr.w	r3, r1, r3
 8000804:	b25b      	sxtb	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b25a      	sxtb	r2, r3
 800080a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000814:	440b      	add	r3, r1
 8000816:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 800081a:	4619      	mov	r1, r3
 800081c:	b2d0      	uxtb	r0, r2
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <StartEncoder+0x36c>)
 8000820:	460b      	mov	r3, r1
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	440b      	add	r3, r1
 8000826:	441a      	add	r2, r3
 8000828:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800082a:	4413      	add	r3, r2
 800082c:	4602      	mov	r2, r0
 800082e:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++)
 8000830:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000832:	3301      	adds	r3, #1
 8000834:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000838:	2b02      	cmp	r3, #2
 800083a:	ddc1      	ble.n	80007c0 <StartEncoder+0x2ac>
		vfd_update();
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	469c      	mov	ip, r3
 8000842:	f7ff fe3b 	bl	80004bc <vfd_update.7748>
		osDelay(70);
 8000846:	2046      	movs	r0, #70	; 0x46
 8000848:	f00a feac 	bl	800b5a4 <osDelay>
    for (int j = 0; j < sizeof(arr)/2; j++)
 800084c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000850:	3301      	adds	r3, #1
 8000852:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000856:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800085a:	2b18      	cmp	r3, #24
 800085c:	d9ad      	bls.n	80007ba <StartEncoder+0x2a6>
    }

    osDelay(500);
 800085e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000862:	f00a fe9f 	bl	800b5a4 <osDelay>

    //erase everything... just in case
    clr_vfd();
 8000866:	f002 fd99 	bl	800339c <clr_vfd>

    vfd_update();
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	469c      	mov	ip, r3
 8000870:	f7ff fe24 	bl	80004bc <vfd_update.7748>


	const char * demo = "VFD FV651G";
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <StartEncoder+0x378>)
 8000876:	67bb      	str	r3, [r7, #120]	; 0x78
	while (*demo)
 8000878:	e01b      	b.n	80008b2 <StartEncoder+0x39e>
 800087a:	bf00      	nop
 800087c:	40010c00 	.word	0x40010c00
 8000880:	200024a0 	.word	0x200024a0
 8000884:	20002610 	.word	0x20002610
 8000888:	0800f124 	.word	0x0800f124
 800088c:	0800f10c 	.word	0x0800f10c
	{
		uint16_t temp = get_char(*(demo++));
 8000890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	67ba      	str	r2, [r7, #120]	; 0x78
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f002 fbfd 	bl	8003098 <get_char>
 800089e:	4603      	mov	r3, r0
 80008a0:	837b      	strh	r3, [r7, #26]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 80008a2:	4bb9      	ldr	r3, [pc, #740]	; (8000b88 <StartEncoder+0x674>)
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	f107 011a 	add.w	r1, r7, #26
 80008aa:	2300      	movs	r3, #0
 80008ac:	2264      	movs	r2, #100	; 0x64
 80008ae:	f00b fa37 	bl	800bd20 <xQueueGenericSend>
	while (*demo)
 80008b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1ea      	bne.n	8000890 <StartEncoder+0x37c>
	}


  d3231_get_all();
 80008ba:	f7ff fcab 	bl	8000214 <d3231_get_all>

  uint8_t brightness = 0b111-d3231_get_A2M2(); // alarm2 minutes as EEPROM, default max
 80008be:	f7ff fcd1 	bl	8000264 <d3231_get_A2M2>
 80008c2:	4603      	mov	r3, r0
 80008c4:	f1c3 0307 	rsb	r3, r3, #7
 80008c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  data = 0b10000000; // command 4
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  data |= 1<<3; // enable/disable display
 80008d2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80008d6:	f043 0308 	orr.w	r3, r3, #8
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  data |= brightness&0b111; // set brightness
 80008e0:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80008e4:	f003 0307 	and.w	r3, r3, #7
 80008e8:	b25a      	sxtb	r2, r3
 80008ea:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000900:	48a2      	ldr	r0, [pc, #648]	; (8000b8c <StartEncoder+0x678>)
 8000902:	f003 f878 	bl	80039f6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000906:	f107 0153 	add.w	r1, r7, #83	; 0x53
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	2201      	movs	r2, #1
 8000910:	489f      	ldr	r0, [pc, #636]	; (8000b90 <StartEncoder+0x67c>)
 8000912:	f006 fb0f 	bl	8006f34 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091c:	489b      	ldr	r0, [pc, #620]	; (8000b8c <StartEncoder+0x678>)
 800091e:	f003 f86a 	bl	80039f6 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  uint16_t buf;
	  // show temperature
	  if (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin))
 8000922:	2102      	movs	r1, #2
 8000924:	4899      	ldr	r0, [pc, #612]	; (8000b8c <StartEncoder+0x678>)
 8000926:	f003 f84f 	bl	80039c8 <HAL_GPIO_ReadPin>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	f000 8088 	beq.w	8000a42 <StartEncoder+0x52e>
	  {
		  //erase everything...
		  clr_vfd();
 8000932:	f002 fd33 	bl	800339c <clr_vfd>

		  uint8_t td3231 = *d3231_get_temp();
 8000936:	f7ff fc45 	bl	80001c4 <d3231_get_temp>
 800093a:	4603      	mov	r3, r0
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		  uint8_t td [6];
		  td[0] = 'C';
 8000942:	2343      	movs	r3, #67	; 0x43
 8000944:	743b      	strb	r3, [r7, #16]
		  td[1] = 176; //°
 8000946:	23b0      	movs	r3, #176	; 0xb0
 8000948:	747b      	strb	r3, [r7, #17]
		  uint8_t i = 2;
 800094a:	2302      	movs	r3, #2
 800094c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		  while (td3231)
 8000950:	e01e      	b.n	8000990 <StartEncoder+0x47c>
		  {
			  td[i++] = td3231 %10;
 8000952:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	f887 2075 	strb.w	r2, [r7, #117]	; 0x75
 800095c:	4618      	mov	r0, r3
 800095e:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8000962:	4b8c      	ldr	r3, [pc, #560]	; (8000b94 <StartEncoder+0x680>)
 8000964:	fba3 1302 	umull	r1, r3, r3, r2
 8000968:	08d9      	lsrs	r1, r3, #3
 800096a:	460b      	mov	r3, r1
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	440b      	add	r3, r1
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	b2da      	uxtb	r2, r3
 8000976:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800097a:	4403      	add	r3, r0
 800097c:	f803 2c90 	strb.w	r2, [r3, #-144]
			  td3231 /= 10;
 8000980:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000984:	4a83      	ldr	r2, [pc, #524]	; (8000b94 <StartEncoder+0x680>)
 8000986:	fba2 2303 	umull	r2, r3, r2, r3
 800098a:	08db      	lsrs	r3, r3, #3
 800098c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		  while (td3231)
 8000990:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1dc      	bne.n	8000952 <StartEncoder+0x43e>
		  }
		  if (i>2)
 8000998:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800099c:	2b02      	cmp	r3, #2
 800099e:	d90d      	bls.n	80009bc <StartEncoder+0x4a8>
			  td[i] = td3231&(1<<7)?'-':'+';
 80009a0:	f997 3076 	ldrsb.w	r3, [r7, #118]	; 0x76
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	da01      	bge.n	80009ac <StartEncoder+0x498>
 80009a8:	222d      	movs	r2, #45	; 0x2d
 80009aa:	e000      	b.n	80009ae <StartEncoder+0x49a>
 80009ac:	222b      	movs	r2, #43	; 0x2b
 80009ae:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80009b2:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80009b6:	440b      	add	r3, r1
 80009b8:	f803 2c90 	strb.w	r2, [r3, #-144]

		  for (int i = 0; i < 6; i++)
 80009bc:	2300      	movs	r3, #0
 80009be:	673b      	str	r3, [r7, #112]	; 0x70
 80009c0:	e025      	b.n	8000a0e <StartEncoder+0x4fa>
		  {
			  buf = get_char(td[i]);
 80009c2:	f107 0210 	add.w	r2, r7, #16
 80009c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80009c8:	4413      	add	r3, r2
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 fb63 	bl	8003098 <get_char>
 80009d2:	4603      	mov	r3, r0
 80009d4:	833b      	strh	r3, [r7, #24]

			  vfd.arr2[i+1][0] = buf & 0xFF;
 80009d6:	8b39      	ldrh	r1, [r7, #24]
 80009d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	b2c8      	uxtb	r0, r1
 80009de:	496e      	ldr	r1, [pc, #440]	; (8000b98 <StartEncoder+0x684>)
 80009e0:	4613      	mov	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	440b      	add	r3, r1
 80009e8:	4602      	mov	r2, r0
 80009ea:	701a      	strb	r2, [r3, #0]
			  vfd.arr2[i+1][1] = (buf>>8)&0xFF;
 80009ec:	8b3b      	ldrh	r3, [r7, #24]
 80009ee:	0a1b      	lsrs	r3, r3, #8
 80009f0:	b299      	uxth	r1, r3
 80009f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	b2c8      	uxtb	r0, r1
 80009f8:	4967      	ldr	r1, [pc, #412]	; (8000b98 <StartEncoder+0x684>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	440b      	add	r3, r1
 8000a02:	3301      	adds	r3, #1
 8000a04:	4602      	mov	r2, r0
 8000a06:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 6; i++)
 8000a08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	673b      	str	r3, [r7, #112]	; 0x70
 8000a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a10:	2b05      	cmp	r3, #5
 8000a12:	ddd6      	ble.n	80009c2 <StartEncoder+0x4ae>
		  }

		  vfd_update();
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	469c      	mov	ip, r3
 8000a1a:	f7ff fd4f 	bl	80004bc <vfd_update.7748>
		  osDelay(20);
 8000a1e:	2014      	movs	r0, #20
 8000a20:	f00a fdc0 	bl	800b5a4 <osDelay>
		  while(HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin)); // wait release
 8000a24:	bf00      	nop
 8000a26:	2102      	movs	r1, #2
 8000a28:	4858      	ldr	r0, [pc, #352]	; (8000b8c <StartEncoder+0x678>)
 8000a2a:	f002 ffcd 	bl	80039c8 <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1f8      	bne.n	8000a26 <StartEncoder+0x512>
		  osDelay(1000);
 8000a34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a38:	f00a fdb4 	bl	800b5a4 <osDelay>
		  show_clock = true;
 8000a3c:	4b57      	ldr	r3, [pc, #348]	; (8000b9c <StartEncoder+0x688>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
	  }

	  // tune brightness
	  if (HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin))
 8000a42:	2104      	movs	r1, #4
 8000a44:	4851      	ldr	r0, [pc, #324]	; (8000b8c <StartEncoder+0x678>)
 8000a46:	f002 ffbf 	bl	80039c8 <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d074      	beq.n	8000b3a <StartEncoder+0x626>
	  {
		  brightness = (brightness - 1)&0b111;
 8000a50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000a54:	3b01      	subs	r3, #1
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	f003 0307 	and.w	r3, r3, #7
 8000a5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  d3231_set_A2M2(0b111-brightness);
 8000a60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000a64:	f1c3 0307 	rsb	r3, r3, #7
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fc02 	bl	8000274 <d3231_set_A2M2>

		  save_vfd();
 8000a70:	f002 fcae 	bl	80033d0 <save_vfd>
		  clr_vfd();
 8000a74:	f002 fc92 	bl	800339c <clr_vfd>
		  uint32_t bits = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
		  for (int i = 2; i < 1 + 2 + brightness; i++)
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000a80:	e00a      	b.n	8000a98 <StartEncoder+0x584>
			  bits |= 1<<i;
 8000a82:	2201      	movs	r2, #1
 8000a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	66fb      	str	r3, [r7, #108]	; 0x6c
		  for (int i = 2; i < 1 + 2 + brightness; i++)
 8000a92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a94:	3301      	adds	r3, #1
 8000a96:	66bb      	str	r3, [r7, #104]	; 0x68
 8000a98:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	ddee      	ble.n	8000a82 <StartEncoder+0x56e>
		  symbols_vfd(bits);
 8000aa4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000aa6:	f002 fbe9 	bl	800327c <symbols_vfd>
		  str2vfd("brightness");
 8000aaa:	483d      	ldr	r0, [pc, #244]	; (8000ba0 <StartEncoder+0x68c>)
 8000aac:	f002 fb60 	bl	8003170 <str2vfd>
		  vfd_update();
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	469c      	mov	ip, r3
 8000ab6:	f7ff fd01 	bl	80004bc <vfd_update.7748>

		  data = 0b10000000; // command 4
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		  data |= 1<<3; // enable/disable display
 8000ac0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		  data |= brightness&0b111; // set brightness
 8000ace:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	b25a      	sxtb	r2, r3
 8000ad8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	b25b      	sxtb	r3, r3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aee:	4827      	ldr	r0, [pc, #156]	; (8000b8c <StartEncoder+0x678>)
 8000af0:	f002 ff81 	bl	80039f6 <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000af4:	f107 0153 	add.w	r1, r7, #83	; 0x53
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295
 8000afc:	2201      	movs	r2, #1
 8000afe:	4824      	ldr	r0, [pc, #144]	; (8000b90 <StartEncoder+0x67c>)
 8000b00:	f006 fa18 	bl	8006f34 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0a:	4820      	ldr	r0, [pc, #128]	; (8000b8c <StartEncoder+0x678>)
 8000b0c:	f002 ff73 	bl	80039f6 <HAL_GPIO_WritePin>
		  // todo display BRIGHTNESS and scale
		  osDelay(20);
 8000b10:	2014      	movs	r0, #20
 8000b12:	f00a fd47 	bl	800b5a4 <osDelay>
		  while(HAL_GPIO_ReadPin(PB2_GPIO_Port, PB2_Pin)); // wait release
 8000b16:	bf00      	nop
 8000b18:	2104      	movs	r1, #4
 8000b1a:	481c      	ldr	r0, [pc, #112]	; (8000b8c <StartEncoder+0x678>)
 8000b1c:	f002 ff54 	bl	80039c8 <HAL_GPIO_ReadPin>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1f8      	bne.n	8000b18 <StartEncoder+0x604>
		  osDelay(100);
 8000b26:	2064      	movs	r0, #100	; 0x64
 8000b28:	f00a fd3c 	bl	800b5a4 <osDelay>
		  restore_vfd();
 8000b2c:	f002 fc70 	bl	8003410 <restore_vfd>
		  vfd_update();
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	469c      	mov	ip, r3
 8000b36:	f7ff fcc1 	bl	80004bc <vfd_update.7748>
	  }

	  if (show_clock)
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <StartEncoder+0x688>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 8083 	beq.w	8000c4a <StartEncoder+0x736>
	  {
		  uint8_t * time = d3231_get_time();
 8000b44:	f7ff fb16 	bl	8000174 <d3231_get_time>
 8000b48:	65b8      	str	r0, [r7, #88]	; 0x58
		  uint8_t clock [4];
		  clock[0] = time[1] & 0xF;
 8000b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	f003 030f 	and.w	r3, r3, #15
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	733b      	strb	r3, [r7, #12]
		  clock[1] = (time[1] >> 4) & 0xF;
 8000b58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	091b      	lsrs	r3, r3, #4
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	737b      	strb	r3, [r7, #13]
		  clock[2] = time[2] & 0xF;
 8000b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b66:	3302      	adds	r3, #2
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	73bb      	strb	r3, [r7, #14]
		  clock[3] = (time[2] >> 4) & 0xF;
 8000b72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b74:	3302      	adds	r3, #2
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	091b      	lsrs	r3, r3, #4
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	73fb      	strb	r3, [r7, #15]

		  //erase everything...
		  clr_vfd();
 8000b7e:	f002 fc0d 	bl	800339c <clr_vfd>


		  for (int i = 0; i < 4; i++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	667b      	str	r3, [r7, #100]	; 0x64
 8000b86:	e033      	b.n	8000bf0 <StartEncoder+0x6dc>
 8000b88:	20002490 	.word	0x20002490
 8000b8c:	40010c00 	.word	0x40010c00
 8000b90:	20002610 	.word	0x20002610
 8000b94:	cccccccd 	.word	0xcccccccd
 8000b98:	200024a0 	.word	0x200024a0
 8000b9c:	2000000d 	.word	0x2000000d
 8000ba0:	0800f118 	.word	0x0800f118
		  {
			  buf = get_char(clock[i]);
 8000ba4:	f107 020c 	add.w	r2, r7, #12
 8000ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000baa:	4413      	add	r3, r2
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 fa72 	bl	8003098 <get_char>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	833b      	strh	r3, [r7, #24]

			  vfd.arr2[4+i][0] = buf & 0xFF;
 8000bb8:	8b39      	ldrh	r1, [r7, #24]
 8000bba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000bbc:	1d1a      	adds	r2, r3, #4
 8000bbe:	b2c8      	uxtb	r0, r1
 8000bc0:	4977      	ldr	r1, [pc, #476]	; (8000da0 <StartEncoder+0x88c>)
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	4602      	mov	r2, r0
 8000bcc:	701a      	strb	r2, [r3, #0]
			  vfd.arr2[4+i][1] = (buf>>8)&0xFF;
 8000bce:	8b3b      	ldrh	r3, [r7, #24]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	b299      	uxth	r1, r3
 8000bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000bd6:	1d1a      	adds	r2, r3, #4
 8000bd8:	b2c8      	uxtb	r0, r1
 8000bda:	4971      	ldr	r1, [pc, #452]	; (8000da0 <StartEncoder+0x88c>)
 8000bdc:	4613      	mov	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4413      	add	r3, r2
 8000be2:	440b      	add	r3, r1
 8000be4:	3301      	adds	r3, #1
 8000be6:	4602      	mov	r2, r0
 8000be8:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 4; i++)
 8000bea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000bec:	3301      	adds	r3, #1
 8000bee:	667b      	str	r3, [r7, #100]	; 0x64
 8000bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	ddd6      	ble.n	8000ba4 <StartEncoder+0x690>
		  }

		  if ((time[0]&0b1) == 0)
 8000bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d11d      	bne.n	8000c3e <StartEncoder+0x72a>
		  {
				for (int b = 0; b < 3; b++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	663b      	str	r3, [r7, #96]	; 0x60
 8000c06:	e017      	b.n	8000c38 <StartEncoder+0x724>
				  vfd.arr2[6][b] |= ((1<<0)>>(b<<3))&0xFF;
 8000c08:	4a65      	ldr	r2, [pc, #404]	; (8000da0 <StartEncoder+0x88c>)
 8000c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c0c:	4413      	add	r3, r2
 8000c0e:	3312      	adds	r3, #18
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b25a      	sxtb	r2, r3
 8000c14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	2101      	movs	r1, #1
 8000c1a:	fa41 f303 	asr.w	r3, r1, r3
 8000c1e:	b25b      	sxtb	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b25b      	sxtb	r3, r3
 8000c24:	b2d9      	uxtb	r1, r3
 8000c26:	4a5e      	ldr	r2, [pc, #376]	; (8000da0 <StartEncoder+0x88c>)
 8000c28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c2a:	4413      	add	r3, r2
 8000c2c:	3312      	adds	r3, #18
 8000c2e:	460a      	mov	r2, r1
 8000c30:	701a      	strb	r2, [r3, #0]
				for (int b = 0; b < 3; b++)
 8000c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c34:	3301      	adds	r3, #1
 8000c36:	663b      	str	r3, [r7, #96]	; 0x60
 8000c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	dde4      	ble.n	8000c08 <StartEncoder+0x6f4>
		  }

		  vfd_update();
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	469c      	mov	ip, r3
 8000c44:	f7ff fc3a 	bl	80004bc <vfd_update.7748>
 8000c48:	e048      	b.n	8000cdc <StartEncoder+0x7c8>


	  }
	  else
	  {
		  if(qVFDHandle && xQueueReceive(qVFDHandle, &buf, 1))
 8000c4a:	4b56      	ldr	r3, [pc, #344]	; (8000da4 <StartEncoder+0x890>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d044      	beq.n	8000cdc <StartEncoder+0x7c8>
 8000c52:	4b54      	ldr	r3, [pc, #336]	; (8000da4 <StartEncoder+0x890>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f107 0118 	add.w	r1, r7, #24
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f00b f9f5 	bl	800c04c <xQueueReceive>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d039      	beq.n	8000cdc <StartEncoder+0x7c8>
		  {
				for (int i = 10; i > 1; i--)
 8000c68:	230a      	movs	r3, #10
 8000c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c6c:	e024      	b.n	8000cb8 <StartEncoder+0x7a4>
				{
					vfd.arr2[i][0] = vfd.arr2[i-1][0];
 8000c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c70:	1e5a      	subs	r2, r3, #1
 8000c72:	494b      	ldr	r1, [pc, #300]	; (8000da0 <StartEncoder+0x88c>)
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	7818      	ldrb	r0, [r3, #0]
 8000c7e:	4948      	ldr	r1, [pc, #288]	; (8000da0 <StartEncoder+0x88c>)
 8000c80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c82:	4613      	mov	r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	4413      	add	r3, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	701a      	strb	r2, [r3, #0]
					vfd.arr2[i][1] = vfd.arr2[i-1][1];
 8000c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c90:	1e5a      	subs	r2, r3, #1
 8000c92:	4943      	ldr	r1, [pc, #268]	; (8000da0 <StartEncoder+0x88c>)
 8000c94:	4613      	mov	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	7818      	ldrb	r0, [r3, #0]
 8000ca0:	493f      	ldr	r1, [pc, #252]	; (8000da0 <StartEncoder+0x88c>)
 8000ca2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	3301      	adds	r3, #1
 8000cae:	4602      	mov	r2, r0
 8000cb0:	701a      	strb	r2, [r3, #0]
				for (int i = 10; i > 1; i--)
 8000cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	dcd7      	bgt.n	8000c6e <StartEncoder+0x75a>
				}
				vfd.arr2[1][0] = buf & 0xFF;
 8000cbe:	8b3b      	ldrh	r3, [r7, #24]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b37      	ldr	r3, [pc, #220]	; (8000da0 <StartEncoder+0x88c>)
 8000cc4:	70da      	strb	r2, [r3, #3]
				vfd.arr2[1][1] = (buf>>8)&0xFF;
 8000cc6:	8b3b      	ldrh	r3, [r7, #24]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <StartEncoder+0x88c>)
 8000cd0:	711a      	strb	r2, [r3, #4]
				vfd_update();
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	469c      	mov	ip, r3
 8000cd8:	f7ff fbf0 	bl	80004bc <vfd_update.7748>
		  }
	  }

	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 8000cdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce0:	4831      	ldr	r0, [pc, #196]	; (8000da8 <StartEncoder+0x894>)
 8000ce2:	f002 fe71 	bl	80039c8 <HAL_GPIO_ReadPin>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <StartEncoder+0x7e0>
	  {
		  released = true;
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <StartEncoder+0x898>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	e015      	b.n	8000d20 <StartEncoder+0x80c>
	  } else if (released)
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <StartEncoder+0x898>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d011      	beq.n	8000d20 <StartEncoder+0x80c>
	  {
		  released = false;
 8000cfc:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <StartEncoder+0x898>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
		  invert = !invert;
 8000d02:	4b2b      	ldr	r3, [pc, #172]	; (8000db0 <StartEncoder+0x89c>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	bf14      	ite	ne
 8000d0a:	2301      	movne	r3, #1
 8000d0c:	2300      	moveq	r3, #0
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	f083 0301 	eor.w	r3, r3, #1
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <StartEncoder+0x89c>)
 8000d1e:	701a      	strb	r2, [r3, #0]
	  }

	if(use_leds)
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <StartEncoder+0x8a0>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d036      	beq.n	8000d96 <StartEncoder+0x882>
	{
		  data = 0b01000001; // command 2, write to LED port
 8000d28:	2341      	movs	r3, #65	; 0x41
 8000d2a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d34:	481c      	ldr	r0, [pc, #112]	; (8000da8 <StartEncoder+0x894>)
 8000d36:	f002 fe5e 	bl	80039f6 <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000d3a:	f107 0153 	add.w	r1, r7, #83	; 0x53
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	2201      	movs	r2, #1
 8000d44:	481c      	ldr	r0, [pc, #112]	; (8000db8 <StartEncoder+0x8a4>)
 8000d46:	f006 f8f5 	bl	8006f34 <HAL_SPI_Transmit>
		  osDelay(10);
 8000d4a:	200a      	movs	r0, #10
 8000d4c:	f00a fc2a 	bl	800b5a4 <osDelay>

		  data = ~(1<<((tick_counter >> 1)&0b11));
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <StartEncoder+0x8a8>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	085b      	lsrs	r3, r3, #1
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	//	  if (invert)
	//		  data =~data;
		  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, invert);
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <StartEncoder+0x89c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	2120      	movs	r1, #32
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <StartEncoder+0x894>)
 8000d76:	f002 fe3e 	bl	80039f6 <HAL_GPIO_WritePin>

		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000d7a:	f107 0153 	add.w	r1, r7, #83	; 0x53
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	2201      	movs	r2, #1
 8000d84:	480c      	ldr	r0, [pc, #48]	; (8000db8 <StartEncoder+0x8a4>)
 8000d86:	f006 f8d5 	bl	8006f34 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <StartEncoder+0x894>)
 8000d92:	f002 fe30 	bl	80039f6 <HAL_GPIO_WritePin>
	  data |= ((encoder_value >> 2) - 1)&0b111; // set brightness
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
#endif
	  osDelay(10);
 8000d96:	200a      	movs	r0, #10
 8000d98:	f00a fc04 	bl	800b5a4 <osDelay>
  {
 8000d9c:	e5c1      	b.n	8000922 <StartEncoder+0x40e>
 8000d9e:	bf00      	nop
 8000da0:	200024a0 	.word	0x200024a0
 8000da4:	20002490 	.word	0x20002490
 8000da8:	40010c00 	.word	0x40010c00
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000001 	.word	0x20000001
 8000db4:	200001b0 	.word	0x200001b0
 8000db8:	20002610 	.word	0x20002610
 8000dbc:	200001ac 	.word	0x200001ac

08000dc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd4:	4b4f      	ldr	r3, [pc, #316]	; (8000f14 <MX_GPIO_Init+0x154>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a4e      	ldr	r2, [pc, #312]	; (8000f14 <MX_GPIO_Init+0x154>)
 8000dda:	f043 0310 	orr.w	r3, r3, #16
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b4c      	ldr	r3, [pc, #304]	; (8000f14 <MX_GPIO_Init+0x154>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0310 	and.w	r3, r3, #16
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dec:	4b49      	ldr	r3, [pc, #292]	; (8000f14 <MX_GPIO_Init+0x154>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a48      	ldr	r2, [pc, #288]	; (8000f14 <MX_GPIO_Init+0x154>)
 8000df2:	f043 0320 	orr.w	r3, r3, #32
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b46      	ldr	r3, [pc, #280]	; (8000f14 <MX_GPIO_Init+0x154>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f003 0320 	and.w	r3, r3, #32
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	4b43      	ldr	r3, [pc, #268]	; (8000f14 <MX_GPIO_Init+0x154>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a42      	ldr	r2, [pc, #264]	; (8000f14 <MX_GPIO_Init+0x154>)
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b40      	ldr	r3, [pc, #256]	; (8000f14 <MX_GPIO_Init+0x154>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4b3d      	ldr	r3, [pc, #244]	; (8000f14 <MX_GPIO_Init+0x154>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a3c      	ldr	r2, [pc, #240]	; (8000f14 <MX_GPIO_Init+0x154>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b3a      	ldr	r3, [pc, #232]	; (8000f14 <MX_GPIO_Init+0x154>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0308 	and.w	r3, r3, #8
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3a:	4837      	ldr	r0, [pc, #220]	; (8000f18 <MX_GPIO_Init+0x158>)
 8000e3c:	f002 fddb 	bl	80039f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 8000e46:	4835      	ldr	r0, [pc, #212]	; (8000f1c <MX_GPIO_Init+0x15c>)
 8000e48:	f002 fdd5 	bl	80039f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e52:	4833      	ldr	r0, [pc, #204]	; (8000f20 <MX_GPIO_Init+0x160>)
 8000e54:	f002 fdcf 	bl	80039f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4829      	ldr	r0, [pc, #164]	; (8000f18 <MX_GPIO_Init+0x158>)
 8000e72:	f002 fc25 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e76:	2301      	movs	r3, #1
 8000e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <MX_GPIO_Init+0x164>)
 8000e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0310 	add.w	r3, r7, #16
 8000e86:	4619      	mov	r1, r3
 8000e88:	4825      	ldr	r0, [pc, #148]	; (8000f20 <MX_GPIO_Init+0x160>)
 8000e8a:	f002 fc19 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PB1_Pin|PB2_Pin;
 8000e8e:	2306      	movs	r3, #6
 8000e90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	481e      	ldr	r0, [pc, #120]	; (8000f1c <MX_GPIO_Init+0x15c>)
 8000ea2:	f002 fc0d 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin|enc_s_Pin;
 8000ea6:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4818      	ldr	r0, [pc, #96]	; (8000f1c <MX_GPIO_Init+0x15c>)
 8000ebc:	f002 fc00 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000ec0:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 8000ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4810      	ldr	r0, [pc, #64]	; (8000f1c <MX_GPIO_Init+0x15c>)
 8000eda:	f002 fbf1 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2302      	movs	r3, #2
 8000eee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480a      	ldr	r0, [pc, #40]	; (8000f20 <MX_GPIO_Init+0x160>)
 8000ef8:	f002 fbe2 	bl	80036c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2105      	movs	r1, #5
 8000f00:	2006      	movs	r0, #6
 8000f02:	f002 fbb2 	bl	800366a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f06:	2006      	movs	r0, #6
 8000f08:	f002 fbcb 	bl	80036a2 <HAL_NVIC_EnableIRQ>

}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40011000 	.word	0x40011000
 8000f1c:	40010c00 	.word	0x40010c00
 8000f20:	40010800 	.word	0x40010800
 8000f24:	10110000 	.word	0x10110000

08000f28 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f2e:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <MX_I2C1_Init+0x54>)
 8000f30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f34:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <MX_I2C1_Init+0x58>)
 8000f36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f66:	f002 fd99 	bl	8003a9c <HAL_I2C_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f70:	f000 f8c6 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200024d0 	.word	0x200024d0
 8000f7c:	40005400 	.word	0x40005400
 8000f80:	000186a0 	.word	0x000186a0

08000f84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a15      	ldr	r2, [pc, #84]	; (8000ff4 <HAL_I2C_MspInit+0x70>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d123      	bne.n	8000fec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <HAL_I2C_MspInit+0x74>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a13      	ldr	r2, [pc, #76]	; (8000ff8 <HAL_I2C_MspInit+0x74>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_I2C_MspInit+0x74>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fbc:	23c0      	movs	r3, #192	; 0xc0
 8000fbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc0:	2312      	movs	r3, #18
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480b      	ldr	r0, [pc, #44]	; (8000ffc <HAL_I2C_MspInit+0x78>)
 8000fd0:	f002 fb76 	bl	80036c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_I2C_MspInit+0x74>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_I2C_MspInit+0x74>)
 8000fda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fde:	61d3      	str	r3, [r2, #28]
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_I2C_MspInit+0x74>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fec:	bf00      	nop
 8000fee:	3720      	adds	r7, #32
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40005400 	.word	0x40005400
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010c00 	.word	0x40010c00

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001004:	f002 fa4a 	bl	800349c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001008:	f000 f80d 	bl	8001026 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100c:	f7ff fed8 	bl	8000dc0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001010:	f001 fefc 	bl	8002e0c <MX_SPI2_Init>
  MX_I2C1_Init();
 8001014:	f7ff ff88 	bl	8000f28 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001018:	f00a f9b4 	bl	800b384 <osKernelInitialize>
  MX_FREERTOS_Init();
 800101c:	f7ff f97e 	bl	800031c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001020:	f00a f9e2 	bl	800b3e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001024:	e7fe      	b.n	8001024 <main+0x24>

08001026 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b094      	sub	sp, #80	; 0x50
 800102a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001030:	2228      	movs	r2, #40	; 0x28
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f00e f817 	bl	800f068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001056:	2301      	movs	r3, #1
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800105a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001066:	2301      	movs	r3, #1
 8001068:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800106e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001074:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001078:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800107e:	4618      	mov	r0, r3
 8001080:	f005 f9d2 	bl	8006428 <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x68>
  {
    Error_Handler();
 800108a:	f000 f839 	bl	8001100 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	230f      	movs	r3, #15
 8001090:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800109a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2102      	movs	r1, #2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 fc3c 	bl	8006928 <HAL_RCC_ClockConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010b6:	f000 f823 	bl	8001100 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010ba:	2310      	movs	r3, #16
 80010bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4618      	mov	r0, r3
 80010c6:	f005 fdfb 	bl	8006cc0 <HAL_RCCEx_PeriphCLKConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010d0:	f000 f816 	bl	8001100 <Error_Handler>
  }
}
 80010d4:	bf00      	nop
 80010d6:	3750      	adds	r7, #80	; 0x50
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ee:	f002 f9eb 	bl	80034c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40012c00 	.word	0x40012c00

08001100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
}
 8001106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001108:	e7fe      	b.n	8001108 <Error_Handler+0x8>

0800110a <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 800110a:	b480      	push	{r7}
 800110c:	b085      	sub	sp, #20
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	5c8a      	ldrb	r2, [r1, r2]
 800111e:	4413      	add	r3, r2
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b3f      	cmp	r3, #63	; 0x3f
 8001128:	dd02      	ble.n	8001130 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3b40      	subs	r3, #64	; 0x40
 800112e:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	5cd3      	ldrb	r3, [r2, r3]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <hist_is_space_for_new+0x1a>
		return true;
 8001156:	2301      	movs	r3, #1
 8001158:	e01e      	b.n	8001198 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	429a      	cmp	r2, r3
 8001164:	db0c      	blt.n	8001180 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4413      	add	r3, r2
 8001174:	3b01      	subs	r3, #1
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	da0c      	bge.n	8001196 <hist_is_space_for_new+0x56>
			return true;
 800117c:	2301      	movs	r3, #1
 800117e:	e00b      	b.n	8001198 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	3b01      	subs	r3, #1
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	da01      	bge.n	8001196 <hist_is_space_for_new+0x56>
			return true;
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <hist_is_space_for_new+0x58>
	}
	return false;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	60f8      	str	r0, [r7, #12]
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b3e      	cmp	r3, #62	; 0x3e
 80011b2:	dc61      	bgt.n	8001278 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 80011b4:	e002      	b.n	80011bc <hist_save_line+0x1a>
		hist_erase_older (pThis);
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f7ff ffa7 	bl	800110a <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f7ff ffbe 	bl	8001140 <hist_is_space_for_new>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f5      	beq.n	80011b6 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	5cd3      	ldrb	r3, [r2, r3]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d105      	bne.n	80011e2 <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	b2d1      	uxtb	r1, r2
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	da0a      	bge.n	8001206 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	3301      	adds	r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	4618      	mov	r0, r3
 8001200:	f00d ff0a 	bl	800f018 <memcpy>
 8001204:	e018      	b.n	8001238 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800120e:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	3301      	adds	r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	4618      	mov	r0, r3
 8001220:	f00d fefa 	bl	800f018 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	18d1      	adds	r1, r2, r3
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	461a      	mov	r2, r3
 8001234:	f00d fef0 	bl	800f018 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	b2d1      	uxtb	r1, r2
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	2b3f      	cmp	r3, #63	; 0x3f
 8001258:	dd05      	ble.n	8001266 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	2100      	movs	r1, #0
 800126e:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2200      	movs	r2, #0
 8001274:	649a      	str	r2, [r3, #72]	; 0x48
 8001276:	e000      	b.n	800127a <hist_save_line+0xd8>
		return;
 8001278:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8001296:	e010      	b.n	80012ba <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012a4:	4413      	add	r3, r2
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 80012a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012aa:	2b3f      	cmp	r3, #63	; 0x3f
 80012ac:	dd02      	ble.n	80012b4 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 80012ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b0:	3b40      	subs	r3, #64	; 0x40
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 80012b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b6:	3301      	adds	r3, #1
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1e8      	bne.n	8001298 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d176      	bne.n	80013ba <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012d2:	429a      	cmp	r2, r3
 80012d4:	f2c0 80d6 	blt.w	8001484 <hist_restore_line+0x204>
			int header = pThis->begin;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 80012e2:	e010      	b.n	8001306 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	4413      	add	r3, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f0:	4413      	add	r3, r2
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	2b3f      	cmp	r3, #63	; 0x3f
 80012f8:	dd02      	ble.n	8001300 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	3b40      	subs	r3, #64	; 0x40
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	3301      	adds	r3, #1
 8001304:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <hist_restore_line+0xa2>
 8001312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	1e5a      	subs	r2, r3, #1
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800131e:	429a      	cmp	r2, r3
 8001320:	d1e0      	bne.n	80012e4 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	4413      	add	r3, r2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 80aa 	beq.w	8001484 <hist_restore_line+0x204>
					pThis->cur++;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	4413      	add	r3, r2
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	4413      	add	r3, r2
 8001348:	2b3f      	cmp	r3, #63	; 0x3f
 800134a:	dc11      	bgt.n	8001370 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 800134c:	2233      	movs	r2, #51	; 0x33
 800134e:	2100      	movs	r1, #0
 8001350:	68b8      	ldr	r0, [r7, #8]
 8001352:	f00d fe89 	bl	800f068 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	3301      	adds	r3, #1
 800135c:	18d1      	adds	r1, r2, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	4413      	add	r3, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	68b8      	ldr	r0, [r7, #8]
 800136a:	f00d fe55 	bl	800f018 <memcpy>
 800136e:	e01f      	b.n	80013b0 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001376:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8001378:	2233      	movs	r2, #51	; 0x33
 800137a:	2100      	movs	r1, #0
 800137c:	68b8      	ldr	r0, [r7, #8]
 800137e:	f00d fe73 	bl	800f068 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	3301      	adds	r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4619      	mov	r1, r3
 800138e:	68b8      	ldr	r0, [r7, #8]
 8001390:	f00d fe42 	bl	800f018 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	18d0      	adds	r0, r2, r3
 800139a:	68f9      	ldr	r1, [r7, #12]
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	4413      	add	r3, r2
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	f00d fe34 	bl	800f018 <memcpy>
				}
				return pThis->ring_buf[header];
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	4413      	add	r3, r2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	e066      	b.n	8001488 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013be:	2b00      	cmp	r3, #0
 80013c0:	dd5e      	ble.n	8001480 <hist_restore_line+0x200>
				pThis->cur--;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c6:	1e5a      	subs	r2, r3, #1
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	61fb      	str	r3, [r7, #28]
			int j = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 80013d6:	e010      	b.n	80013fa <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	4413      	add	r3, r2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	4413      	add	r3, r2
 80013e6:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	2b3f      	cmp	r3, #63	; 0x3f
 80013ec:	dd02      	ble.n	80013f4 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b40      	subs	r3, #64	; 0x40
 80013f2:	61fb      	str	r3, [r7, #28]
				j++;
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	3301      	adds	r3, #1
 80013f8:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	4413      	add	r3, r2
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <hist_restore_line+0x194>
 8001406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	1ad2      	subs	r2, r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001410:	429a      	cmp	r2, r3
 8001412:	d1e1      	bne.n	80013d8 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	4413      	add	r3, r2
 8001422:	2b3f      	cmp	r3, #63	; 0x3f
 8001424:	dc0c      	bgt.n	8001440 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	3301      	adds	r3, #1
 800142c:	18d1      	adds	r1, r2, r3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	4413      	add	r3, r2
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	68b8      	ldr	r0, [r7, #8]
 800143a:	f00d fded 	bl	800f018 <memcpy>
 800143e:	e01a      	b.n	8001476 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001446:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	4619      	mov	r1, r3
 8001454:	68b8      	ldr	r0, [r7, #8]
 8001456:	f00d fddf 	bl	800f018 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	18d0      	adds	r0, r2, r3
 8001460:	68f9      	ldr	r1, [r7, #12]
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	4413      	add	r3, r2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	461a      	mov	r2, r3
 8001472:	f00d fdd1 	bl	800f018 <memcpy>
			}
			return pThis->ring_buf[header];
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	4413      	add	r3, r2
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	e003      	b.n	8001488 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8001480:	2300      	movs	r3, #0
 8001482:	e001      	b.n	8001488 <hist_restore_line+0x208>
		}
	}
	return -1;
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001488:	4618      	mov	r0, r3
 800148a:	3730      	adds	r7, #48	; 0x30
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
	int i = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
	int ind = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 80014a4:	e002      	b.n	80014ac <split+0x1c>
			ind++;
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	3301      	adds	r3, #1
 80014aa:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4413      	add	r3, r2
 80014b2:	3354      	adds	r3, #84	; 0x54
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d103      	bne.n	80014c2 <split+0x32>
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dbf1      	blt.n	80014a6 <split+0x16>
		}
		if (!(ind < limit)) return i;
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	db01      	blt.n	80014ce <split+0x3e>
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	e024      	b.n	8001518 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	1c58      	adds	r0, r3, #1
 80014da:	6178      	str	r0, [r7, #20]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	4403      	add	r3, r0
 80014e2:	440a      	add	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	dd05      	ble.n	80014f8 <split+0x68>
			return -1;
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
 80014f0:	e012      	b.n	8001518 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	3301      	adds	r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4413      	add	r3, r2
 80014fe:	3354      	adds	r3, #84	; 0x54
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <split+0x7e>
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	429a      	cmp	r2, r3
 800150c:	dbf1      	blt.n	80014f2 <split+0x62>
		}
		if (!(ind < limit)) return i;
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	429a      	cmp	r2, r3
 8001514:	dbca      	blt.n	80014ac <split+0x1c>
 8001516:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8001518:	4618      	mov	r0, r3
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001534:	4610      	mov	r0, r2
 8001536:	4798      	blx	r3
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800154e:	4803      	ldr	r0, [pc, #12]	; (800155c <terminal_backspace+0x1c>)
 8001550:	4798      	blx	r3
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	0800f168 	.word	0x0800f168

08001560 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <terminal_newline+0x1c>)
 8001570:	4798      	blx	r3
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	0800f170 	.word	0x0800f170

08001580 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	2300      	movs	r3, #0
 8001590:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159c:	d235      	bcs.n	800160a <u16bit_to_str+0x8a>
		while (nmb > 0) {
 800159e:	e01a      	b.n	80015d6 <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <u16bit_to_str+0x9c>)
 80015a4:	fba3 2301 	umull	r2, r3, r3, r1
 80015a8:	08da      	lsrs	r2, r3, #3
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	1aca      	subs	r2, r1, r3
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	1c59      	adds	r1, r3, #1
 80015ba:	6179      	str	r1, [r7, #20]
 80015bc:	3230      	adds	r2, #48	; 0x30
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	f107 0118 	add.w	r1, r7, #24
 80015c4:	440b      	add	r3, r1
 80015c6:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a13      	ldr	r2, [pc, #76]	; (800161c <u16bit_to_str+0x9c>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	08db      	lsrs	r3, r3, #3
 80015d4:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1e1      	bne.n	80015a0 <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	e00f      	b.n	8001602 <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	1c59      	adds	r1, r3, #1
 80015ee:	6039      	str	r1, [r7, #0]
 80015f0:	f107 0118 	add.w	r1, r7, #24
 80015f4:	440a      	add	r2, r1
 80015f6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80015fa:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	3301      	adds	r3, #1
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	429a      	cmp	r2, r3
 8001608:	dbeb      	blt.n	80015e2 <u16bit_to_str+0x62>
	}
	*buf = '\0';
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
	return buf;
 8001610:	683b      	ldr	r3, [r7, #0]
}
 8001612:	4618      	mov	r0, r3
 8001614:	371c      	adds	r7, #28
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	cccccccd 	.word	0xcccccccd

08001620 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	f107 0310 	add.w	r3, r7, #16
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	4a1d      	ldr	r2, [pc, #116]	; (80016b4 <terminal_move_cursor+0x94>)
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	4611      	mov	r1, r2
 8001644:	8019      	strh	r1, [r3, #0]
 8001646:	3302      	adds	r3, #2
 8001648:	0c12      	lsrs	r2, r2, #16
 800164a:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	dd0f      	ble.n	8001672 <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	3302      	adds	r3, #2
 800165a:	4619      	mov	r1, r3
 800165c:	4610      	mov	r0, r2
 800165e:	f7ff ff8f 	bl	8001580 <u16bit_to_str>
 8001662:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4914      	ldr	r1, [pc, #80]	; (80016b8 <terminal_move_cursor+0x98>)
 8001668:	461a      	mov	r2, r3
 800166a:	460b      	mov	r3, r1
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	8013      	strh	r3, [r2, #0]
 8001670:	e013      	b.n	800169a <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	da18      	bge.n	80016aa <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	425b      	negs	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	3302      	adds	r3, #2
 8001684:	4619      	mov	r1, r3
 8001686:	4610      	mov	r0, r2
 8001688:	f7ff ff7a 	bl	8001580 <u16bit_to_str>
 800168c:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	490a      	ldr	r1, [pc, #40]	; (80016bc <terminal_move_cursor+0x9c>)
 8001692:	461a      	mov	r2, r3
 8001694:	460b      	mov	r3, r1
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016a0:	f107 020c 	add.w	r2, r7, #12
 80016a4:	4610      	mov	r0, r2
 80016a6:	4798      	blx	r3
 80016a8:	e000      	b.n	80016ac <terminal_move_cursor+0x8c>
		return;
 80016aa:	bf00      	nop
}
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	0800f174 	.word	0x0800f174
 80016b8:	0800f178 	.word	0x0800f178
 80016bc:	0800f17c 	.word	0x0800f17c

080016c0 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	4a15      	ldr	r2, [pc, #84]	; (8001724 <terminal_reset_cursor+0x64>)
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	4611      	mov	r1, r2
 80016d2:	8019      	strh	r1, [r3, #0]
 80016d4:	3302      	adds	r3, #2
 80016d6:	0c12      	lsrs	r2, r2, #16
 80016d8:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	3302      	adds	r3, #2
 80016e0:	4619      	mov	r1, r3
 80016e2:	203a      	movs	r0, #58	; 0x3a
 80016e4:	f7ff ff4c 	bl	8001580 <u16bit_to_str>
 80016e8:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <terminal_reset_cursor+0x68>)
 80016ee:	6810      	ldr	r0, [r2, #0]
 80016f0:	6018      	str	r0, [r3, #0]
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3303      	adds	r3, #3
 80016f6:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 80016f8:	69f9      	ldr	r1, [r7, #28]
 80016fa:	2005      	movs	r0, #5
 80016fc:	f7ff ff40 	bl	8001580 <u16bit_to_str>
 8001700:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	4909      	ldr	r1, [pc, #36]	; (800172c <terminal_reset_cursor+0x6c>)
 8001706:	461a      	mov	r2, r3
 8001708:	460b      	mov	r3, r1
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001714:	f107 020c 	add.w	r2, r7, #12
 8001718:	4610      	mov	r0, r2
 800171a:	4798      	blx	r3
}
 800171c:	bf00      	nop
 800171e:	3720      	adds	r7, #32
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	0800f174 	.word	0x0800f174
 8001728:	0800f180 	.word	0x0800f180
 800172c:	0800f178 	.word	0x0800f178

08001730 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001742:	4816      	ldr	r0, [pc, #88]	; (800179c <terminal_print_line+0x6c>)
 8001744:	4798      	blx	r3

	char nch [] = {0,0};
 8001746:	2300      	movs	r3, #0
 8001748:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	e014      	b.n	800177a <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	4413      	add	r3, r2
 8001756:	3354      	adds	r3, #84	; 0x54
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 800175c:	7c3b      	ldrb	r3, [r7, #16]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <terminal_print_line+0x36>
			nch[0] = ' ';
 8001762:	2320      	movs	r3, #32
 8001764:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800176c:	f107 0210 	add.w	r2, r7, #16
 8001770:	4610      	mov	r0, r2
 8001772:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3301      	adds	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	429a      	cmp	r2, r3
 8001784:	dbe4      	blt.n	8001750 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f7ff ff9a 	bl	80016c0 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f7ff ff46 	bl	8001620 <terminal_move_cursor>
}
 8001794:	bf00      	nop
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	0800f184 	.word	0x0800f184

080017a0 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3354      	adds	r3, #84	; 0x54
 80017ae:	2233      	movs	r2, #51	; 0x33
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f00d fc58 	bl	800f068 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3304      	adds	r3, #4
 80017bc:	2240      	movs	r2, #64	; 0x40
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f00d fc51 	bl	800f068 <memset>
	pThis->ring_hist.begin = 0;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pThis->execute = NULL;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	pThis->get_completion = NULL;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
	pThis->prompt_str = prompt_default;
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <microrl_init+0x78>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000004 	.word	0x20000004

0800181c <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	1d18      	adds	r0, r3, #4
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3354      	adds	r3, #84	; 0x54
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f7ff fcfb 	bl	8001280 <hist_restore_line>
 800188a:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db1a      	blt.n	80018c8 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	3354      	adds	r3, #84	; 0x54
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		terminal_reset_cursor (pThis);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ff04 	bl	80016c0 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018be:	461a      	mov	r2, r3
 80018c0:	2100      	movs	r1, #0
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ff34 	bl	8001730 <terminal_print_line>
	}
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	2b5b      	cmp	r3, #91	; 0x5b
 80018e0:	d104      	bne.n	80018ec <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
		return 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	e07b      	b.n	80019e4 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d14f      	bne.n	8001994 <escape_process+0xc4>
		if (ch == 'A') {
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	2b41      	cmp	r3, #65	; 0x41
 80018f8:	d105      	bne.n	8001906 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 80018fa:	2100      	movs	r1, #0
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ffb7 	bl	8001870 <hist_search>
#endif
			return 1;
 8001902:	2301      	movs	r3, #1
 8001904:	e06e      	b.n	80019e4 <escape_process+0x114>
		} else if (ch == 'B') {
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	2b42      	cmp	r3, #66	; 0x42
 800190a:	d105      	bne.n	8001918 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 800190c:	2101      	movs	r1, #1
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffae 	bl	8001870 <hist_search>
#endif
			return 1;
 8001914:	2301      	movs	r3, #1
 8001916:	e065      	b.n	80019e4 <escape_process+0x114>
		} else if (ch == 'C') {
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	2b43      	cmp	r3, #67	; 0x43
 800191c:	d114      	bne.n	8001948 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	429a      	cmp	r2, r3
 800192c:	da0a      	bge.n	8001944 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 800192e:	2101      	movs	r1, #1
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fe75 	bl	8001620 <terminal_move_cursor>
				pThis->cursor++;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8001944:	2301      	movs	r3, #1
 8001946:	e04d      	b.n	80019e4 <escape_process+0x114>
		} else if (ch == 'D') {
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	2b44      	cmp	r3, #68	; 0x44
 800194c:	d112      	bne.n	8001974 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001954:	2b00      	cmp	r3, #0
 8001956:	dd0b      	ble.n	8001970 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff fe5f 	bl	8001620 <terminal_move_cursor>
				pThis->cursor--;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001968:	1e5a      	subs	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8001970:	2301      	movs	r3, #1
 8001972:	e037      	b.n	80019e4 <escape_process+0x114>
		} else if (ch == '7') {
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	2b37      	cmp	r3, #55	; 0x37
 8001978:	d104      	bne.n	8001984 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2202      	movs	r2, #2
 800197e:	701a      	strb	r2, [r3, #0]
			return 0;
 8001980:	2300      	movs	r3, #0
 8001982:	e02f      	b.n	80019e4 <escape_process+0x114>
		} else if (ch == '8') {
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	2b38      	cmp	r3, #56	; 0x38
 8001988:	d12b      	bne.n	80019e2 <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2203      	movs	r2, #3
 800198e:	701a      	strb	r2, [r3, #0]
			return 0;
 8001990:	2300      	movs	r3, #0
 8001992:	e027      	b.n	80019e4 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	2b7e      	cmp	r3, #126	; 0x7e
 8001998:	d123      	bne.n	80019e2 <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d108      	bne.n	80019b4 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff fe8c 	bl	80016c0 <terminal_reset_cursor>
			pThis->cursor = 0;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e017      	b.n	80019e4 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d112      	bne.n	80019e2 <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	4619      	mov	r1, r3
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff fe27 	bl	8001620 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	2b32      	cmp	r3, #50	; 0x32
 8001a04:	dc60      	bgt.n	8001ac8 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a12:	4619      	mov	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	440b      	add	r3, r1
 8001a18:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	3354      	adds	r3, #84	; 0x54
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor + len,
 8001a24:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a32:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8001a34:	461a      	mov	r2, r3
 8001a36:	f00d fafd 	bl	800f034 <memmove>
		for (i = 0; i < len; i++) {
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e025      	b.n	8001a8c <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	441a      	add	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	440b      	add	r3, r1
 8001a50:	7811      	ldrb	r1, [r2, #0]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4413      	add	r3, r2
 8001a56:	460a      	mov	r2, r1
 8001a58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	4413      	add	r3, r2
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4413      	add	r3, r2
 8001a6a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a6e:	2b20      	cmp	r3, #32
 8001a70:	d109      	bne.n	8001a86 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbd5      	blt.n	8001a40 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	441a      	add	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdlen += len;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	441a      	add	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	4413      	add	r3, r2
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <microrl_insert_text+0xde>
	}
	return false;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	dd31      	ble.n	8001b48 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fd2b 	bl	8001540 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001af6:	3b01      	subs	r3, #1
 8001af8:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3354      	adds	r3, #84	; 0x54
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor-1,
 8001b04:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8001b16:	461a      	mov	r2, r3
 8001b18:	f00d fa8c 	bl	800f034 <memmove>
		pThis->cursor--;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b22:	1e5a      	subs	r2, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	4413      	add	r3, r2
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b40:	1e5a      	subs	r2, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7fe fb00 	bl	8000164 <strlen>
 8001b64:	4603      	mov	r3, r0
 8001b66:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e019      	b.n	8001ba2 <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe faf3 	bl	8000164 <strlen>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d20a      	bcs.n	8001b9c <common_len+0x4c>
			shortest = arr[i];
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f7fe fae6 	bl	8000164 <strlen>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1de      	bne.n	8001b6e <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	e01f      	b.n	8001bf6 <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	e012      	b.n	8001be2 <common_len+0x92>
			if (shortest[i] != arr[j][i])
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	781a      	ldrb	r2, [r3, #0]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	440b      	add	r3, r1
 8001bcc:	6819      	ldr	r1, [r3, #0]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	440b      	add	r3, r1
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <common_len+0x8c>
				return i;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	e011      	b.n	8001c00 <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	3301      	adds	r3, #1
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1e5      	bne.n	8001bbc <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	dbdb      	blt.n	8001bb6 <common_len+0x66>

	return i;
 8001bfe:	697b      	ldr	r3, [r7, #20]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8001c08:	b5b0      	push	{r4, r5, r7, lr}
 8001c0a:	b08c      	sub	sp, #48	; 0x30
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 809c 	beq.w	8001d54 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c22:	f107 020c 	add.w	r2, r7, #12
 8001c26:	4619      	mov	r1, r3
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff fc31 	bl	8001490 <split>
 8001c2e:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c36:	3b01      	subs	r3, #1
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d109      	bne.n	8001c58 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8001c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c50:	4413      	add	r3, r2
 8001c52:	4a42      	ldr	r2, [pc, #264]	; (8001d5c <microrl_get_complite+0x154>)
 8001c54:	f843 2c24 	str.w	r2, [r3, #-36]
	compl_token = pThis->get_completion (status, tkn_arr);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5e:	f107 020c 	add.w	r2, r7, #12
 8001c62:	4611      	mov	r1, r2
 8001c64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c66:	4798      	blx	r3
 8001c68:	6238      	str	r0, [r7, #32]
	if (compl_token[0] != NULL) {
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d071      	beq.n	8001d56 <microrl_get_complite+0x14e>
		int i = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
		int len;

		if (compl_token[1] == NULL) {
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d107      	bne.n	8001c90 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fa6d 	bl	8000164 <strlen>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8e:	e026      	b.n	8001cde <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8001c90:	6a38      	ldr	r0, [r7, #32]
 8001c92:	f7ff ff5d 	bl	8001b50 <common_len>
 8001c96:	6278      	str	r0, [r7, #36]	; 0x24
			terminal_newline (pThis);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fc61 	bl	8001560 <terminal_newline>
			while (compl_token [i] != NULL) {
 8001c9e:	e011      	b.n	8001cc4 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ca8:	0092      	lsls	r2, r2, #2
 8001caa:	6a39      	ldr	r1, [r7, #32]
 8001cac:	440a      	add	r2, r1
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4798      	blx	r3
				pThis->print (" ");
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cba:	4829      	ldr	r0, [pc, #164]	; (8001d60 <microrl_get_complite+0x158>)
 8001cbc:	4798      	blx	r3
				i++;
 8001cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
			while (compl_token [i] != NULL) {
 8001cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	6a3a      	ldr	r2, [r7, #32]
 8001cca:	4413      	add	r3, r2
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1e6      	bne.n	8001ca0 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff fc44 	bl	8001560 <terminal_newline>
			print_prompt (pThis);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff fc22 	bl	8001522 <print_prompt>
		}
		
		if (len) {
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d02b      	beq.n	8001d3c <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	681c      	ldr	r4, [r3, #0]
 8001ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cea:	3b01      	subs	r3, #1
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fa33 	bl	8000164 <strlen>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 8001d02:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d06:	3b01      	subs	r3, #1
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d0e:	4413      	add	r3, r2
 8001d10:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fa25 	bl	8000164 <strlen>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4629      	mov	r1, r5
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff fe62 	bl	80019ec <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d104      	bne.n	8001d3c <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 8001d32:	2201      	movs	r2, #1
 8001d34:	490a      	ldr	r1, [pc, #40]	; (8001d60 <microrl_get_complite+0x158>)
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fe58 	bl	80019ec <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff fcbf 	bl	80016c0 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff fcef 	bl	8001730 <terminal_print_line>
 8001d52:	e000      	b.n	8001d56 <microrl_get_complite+0x14e>
		return;
 8001d54:	bf00      	nop
	} 
}
 8001d56:	3730      	adds	r7, #48	; 0x30
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d5c:	0800f188 	.word	0x0800f188
 8001d60:	0800f18c 	.word	0x0800f18c

08001d64 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff fbf7 	bl	8001560 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	dd0a      	ble.n	8001d92 <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	1d18      	adds	r0, r3, #4
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f7ff fa08 	bl	80011a2 <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d98:	f107 0208 	add.w	r2, r7, #8
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff fb76 	bl	8001490 <split>
 8001da4:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dac:	d109      	bne.n	8001dc2 <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db4:	4817      	ldr	r0, [pc, #92]	; (8001e14 <new_line_handler+0xb0>)
 8001db6:	4798      	blx	r3
		pThis->print (ENDL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dbe:	4816      	ldr	r0, [pc, #88]	; (8001e18 <new_line_handler+0xb4>)
 8001dc0:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	dd0c      	ble.n	8001de2 <new_line_handler+0x7e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd8:	f107 0208 	add.w	r2, r7, #8
 8001ddc:	4611      	mov	r1, r2
 8001dde:	69f8      	ldr	r0, [r7, #28]
 8001de0:	4798      	blx	r3
	print_prompt (pThis);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff fb9d 	bl	8001522 <print_prompt>
	pThis->cmdlen = 0;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3354      	adds	r3, #84	; 0x54
 8001dfc:	2233      	movs	r2, #51	; 0x33
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f00d f931 	bl	800f068 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8001e0c:	bf00      	nop
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	0800f190 	.word	0x0800f190
 8001e18:	0800f170 	.word	0x0800f170

08001e1c <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	785b      	ldrb	r3, [r3, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00d      	beq.n	8001e4a <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	4619      	mov	r1, r3
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff fd4b 	bl	80018d0 <escape_process>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 81e3 	beq.w	8002208 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8001e48:	e1de      	b.n	8002208 <microrl_insert_char+0x3ec>
		switch (ch) {
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	2b7e      	cmp	r3, #126	; 0x7e
 8001e50:	f200 81af 	bhi.w	80021b2 <microrl_insert_char+0x396>
 8001e54:	a201      	add	r2, pc, #4	; (adr r2, 8001e5c <microrl_insert_char+0x40>)
 8001e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5a:	bf00      	nop
 8001e5c:	080020ef 	.word	0x080020ef
 8001e60:	08002127 	.word	0x08002127
 8001e64:	0800219f 	.word	0x0800219f
 8001e68:	080021b3 	.word	0x080021b3
 8001e6c:	080020cb 	.word	0x080020cb
 8001e70:	080020ff 	.word	0x080020ff
 8001e74:	080021b3 	.word	0x080021b3
 8001e78:	0800215f 	.word	0x0800215f
 8001e7c:	08002081 	.word	0x08002081
 8001e80:	08002059 	.word	0x08002059
 8001e84:	080020b3 	.word	0x080020b3
 8001e88:	080021b3 	.word	0x080021b3
 8001e8c:	08002059 	.word	0x08002059
 8001e90:	08002155 	.word	0x08002155
 8001e94:	080021b3 	.word	0x080021b3
 8001e98:	0800214b 	.word	0x0800214b
 8001e9c:	080021b3 	.word	0x080021b3
 8001ea0:	0800217b 	.word	0x0800217b
 8001ea4:	080021b3 	.word	0x080021b3
 8001ea8:	080021b3 	.word	0x080021b3
 8001eac:	08002097 	.word	0x08002097
 8001eb0:	080021b3 	.word	0x080021b3
 8001eb4:	080021b3 	.word	0x080021b3
 8001eb8:	080021b3 	.word	0x080021b3
 8001ebc:	080021b3 	.word	0x080021b3
 8001ec0:	080021b3 	.word	0x080021b3
 8001ec4:	08002089 	.word	0x08002089
 8001ec8:	080021b3 	.word	0x080021b3
 8001ecc:	080021b3 	.word	0x080021b3
 8001ed0:	080021b3 	.word	0x080021b3
 8001ed4:	080021b3 	.word	0x080021b3
 8001ed8:	080021b3 	.word	0x080021b3
 8001edc:	080021b3 	.word	0x080021b3
 8001ee0:	080021b3 	.word	0x080021b3
 8001ee4:	080021b3 	.word	0x080021b3
 8001ee8:	080021b3 	.word	0x080021b3
 8001eec:	080021b3 	.word	0x080021b3
 8001ef0:	080021b3 	.word	0x080021b3
 8001ef4:	080021b3 	.word	0x080021b3
 8001ef8:	080021b3 	.word	0x080021b3
 8001efc:	080021b3 	.word	0x080021b3
 8001f00:	080021b3 	.word	0x080021b3
 8001f04:	080021b3 	.word	0x080021b3
 8001f08:	080021b3 	.word	0x080021b3
 8001f0c:	080021b3 	.word	0x080021b3
 8001f10:	080021b3 	.word	0x080021b3
 8001f14:	080021b3 	.word	0x080021b3
 8001f18:	080021b3 	.word	0x080021b3
 8001f1c:	080021b3 	.word	0x080021b3
 8001f20:	080021b3 	.word	0x080021b3
 8001f24:	080021b3 	.word	0x080021b3
 8001f28:	080021b3 	.word	0x080021b3
 8001f2c:	080021b3 	.word	0x080021b3
 8001f30:	080021b3 	.word	0x080021b3
 8001f34:	080021b3 	.word	0x080021b3
 8001f38:	080021b3 	.word	0x080021b3
 8001f3c:	080021b3 	.word	0x080021b3
 8001f40:	080021b3 	.word	0x080021b3
 8001f44:	080021b3 	.word	0x080021b3
 8001f48:	080021b3 	.word	0x080021b3
 8001f4c:	080021b3 	.word	0x080021b3
 8001f50:	080021b3 	.word	0x080021b3
 8001f54:	080021b3 	.word	0x080021b3
 8001f58:	080021b3 	.word	0x080021b3
 8001f5c:	080021b3 	.word	0x080021b3
 8001f60:	080021b3 	.word	0x080021b3
 8001f64:	080021b3 	.word	0x080021b3
 8001f68:	080021b3 	.word	0x080021b3
 8001f6c:	080021b3 	.word	0x080021b3
 8001f70:	080021b3 	.word	0x080021b3
 8001f74:	080021b3 	.word	0x080021b3
 8001f78:	080021b3 	.word	0x080021b3
 8001f7c:	080021b3 	.word	0x080021b3
 8001f80:	080021b3 	.word	0x080021b3
 8001f84:	080021b3 	.word	0x080021b3
 8001f88:	080021b3 	.word	0x080021b3
 8001f8c:	080021b3 	.word	0x080021b3
 8001f90:	080021b3 	.word	0x080021b3
 8001f94:	080021b3 	.word	0x080021b3
 8001f98:	080021b3 	.word	0x080021b3
 8001f9c:	080021b3 	.word	0x080021b3
 8001fa0:	080021b3 	.word	0x080021b3
 8001fa4:	080021b3 	.word	0x080021b3
 8001fa8:	080021b3 	.word	0x080021b3
 8001fac:	080021b3 	.word	0x080021b3
 8001fb0:	080021b3 	.word	0x080021b3
 8001fb4:	080021b3 	.word	0x080021b3
 8001fb8:	080021b3 	.word	0x080021b3
 8001fbc:	080021b3 	.word	0x080021b3
 8001fc0:	080021b3 	.word	0x080021b3
 8001fc4:	080021b3 	.word	0x080021b3
 8001fc8:	080021b3 	.word	0x080021b3
 8001fcc:	080021b3 	.word	0x080021b3
 8001fd0:	080021b3 	.word	0x080021b3
 8001fd4:	080021b3 	.word	0x080021b3
 8001fd8:	080021b3 	.word	0x080021b3
 8001fdc:	080021b3 	.word	0x080021b3
 8001fe0:	080021b3 	.word	0x080021b3
 8001fe4:	080021b3 	.word	0x080021b3
 8001fe8:	080021b3 	.word	0x080021b3
 8001fec:	080021b3 	.word	0x080021b3
 8001ff0:	080021b3 	.word	0x080021b3
 8001ff4:	080021b3 	.word	0x080021b3
 8001ff8:	080021b3 	.word	0x080021b3
 8001ffc:	080021b3 	.word	0x080021b3
 8002000:	080021b3 	.word	0x080021b3
 8002004:	080021b3 	.word	0x080021b3
 8002008:	080021b3 	.word	0x080021b3
 800200c:	080021b3 	.word	0x080021b3
 8002010:	080021b3 	.word	0x080021b3
 8002014:	080021b3 	.word	0x080021b3
 8002018:	080021b3 	.word	0x080021b3
 800201c:	080021b3 	.word	0x080021b3
 8002020:	080021b3 	.word	0x080021b3
 8002024:	080021b3 	.word	0x080021b3
 8002028:	080021b3 	.word	0x080021b3
 800202c:	080021b3 	.word	0x080021b3
 8002030:	080021b3 	.word	0x080021b3
 8002034:	080021b3 	.word	0x080021b3
 8002038:	080021b3 	.word	0x080021b3
 800203c:	080021b3 	.word	0x080021b3
 8002040:	080021b3 	.word	0x080021b3
 8002044:	080021b3 	.word	0x080021b3
 8002048:	080021b3 	.word	0x080021b3
 800204c:	080021b3 	.word	0x080021b3
 8002050:	080021b3 	.word	0x080021b3
 8002054:	0800215f 	.word	0x0800215f
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	789b      	ldrb	r3, [r3, #2]
 800205c:	461a      	mov	r2, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b0d      	cmp	r3, #13
 8002062:	d101      	bne.n	8002068 <microrl_insert_char+0x24c>
 8002064:	230a      	movs	r3, #10
 8002066:	e000      	b.n	800206a <microrl_insert_char+0x24e>
 8002068:	230d      	movs	r3, #13
 800206a:	4293      	cmp	r3, r2
 800206c:	f000 80c1 	beq.w	80021f2 <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fe73 	bl	8001d64 <new_line_handler>
				break;
 800207e:	e0c3      	b.n	8002208 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fdc1 	bl	8001c08 <microrl_get_complite>
			break;
 8002086:	e0bf      	b.n	8002208 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	705a      	strb	r2, [r3, #1]
			break;
 800208e:	e0bb      	b.n	8002208 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fd1e 	bl	8001ad2 <microrl_backspace>
					while (pThis->cursor > 0) {
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800209c:	2b00      	cmp	r3, #0
 800209e:	dcf7      	bgt.n	8002090 <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020a6:	461a      	mov	r2, r3
 80020a8:	2100      	movs	r1, #0
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fb40 	bl	8001730 <terminal_print_line>
			break;
 80020b0:	e0aa      	b.n	8002208 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020b8:	4855      	ldr	r0, [pc, #340]	; (8002210 <microrl_insert_char+0x3f4>)
 80020ba:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 80020c8:	e09e      	b.n	8002208 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	4619      	mov	r1, r3
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff faa0 	bl	8001620 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80020ec:	e08c      	b.n	8002208 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff fae6 	bl	80016c0 <terminal_reset_cursor>
				pThis->cursor = 0;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80020fc:	e084      	b.n	8002208 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	429a      	cmp	r2, r3
 800210c:	da73      	bge.n	80021f6 <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 800210e:	2101      	movs	r1, #1
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff fa85 	bl	8001620 <terminal_move_cursor>
				pThis->cursor++;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8002124:	e067      	b.n	80021f6 <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800212c:	2b00      	cmp	r3, #0
 800212e:	d064      	beq.n	80021fa <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 8002130:	f04f 31ff 	mov.w	r1, #4294967295
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff fa73 	bl	8001620 <terminal_move_cursor>
				pThis->cursor--;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002140:	1e5a      	subs	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8002148:	e057      	b.n	80021fa <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 800214a:	2100      	movs	r1, #0
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff fb8f 	bl	8001870 <hist_search>
			break;
 8002152:	e059      	b.n	8002208 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 8002154:	2101      	movs	r1, #1
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fb8a 	bl	8001870 <hist_search>
			break;
 800215c:	e054      	b.n	8002208 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff fcb7 	bl	8001ad2 <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002170:	461a      	mov	r2, r3
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fadc 	bl	8001730 <terminal_print_line>
			break;
 8002178:	e046      	b.n	8002208 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff f9f0 	bl	8001560 <terminal_newline>
				print_prompt (pThis);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff f9ce 	bl	8001522 <print_prompt>
				terminal_reset_cursor (pThis);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fa9a 	bl	80016c0 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002192:	461a      	mov	r2, r3
 8002194:	2100      	movs	r1, #0
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff faca 	bl	8001730 <terminal_print_line>
			break;
 800219c:	e034      	b.n	8002208 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d02a      	beq.n	80021fe <microrl_insert_char+0x3e2>
				pThis->sigint();
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021ae:	4798      	blx	r3
			break;
 80021b0:	e025      	b.n	80021fe <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	d104      	bne.n	80021c2 <microrl_insert_char+0x3a6>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01f      	beq.n	8002202 <microrl_insert_char+0x3e6>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b1f      	cmp	r3, #31
 80021c6:	dd1c      	ble.n	8002202 <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 80021c8:	463b      	mov	r3, r7
 80021ca:	2201      	movs	r2, #1
 80021cc:	4619      	mov	r1, r3
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff fc0c 	bl	80019ec <microrl_insert_text>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d015      	beq.n	8002206 <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021e0:	1e59      	subs	r1, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021e8:	461a      	mov	r2, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff faa0 	bl	8001730 <terminal_print_line>
			break;
 80021f0:	e009      	b.n	8002206 <microrl_insert_char+0x3ea>
					break;
 80021f2:	bf00      	nop
 80021f4:	e008      	b.n	8002208 <microrl_insert_char+0x3ec>
			break;
 80021f6:	bf00      	nop
 80021f8:	e006      	b.n	8002208 <microrl_insert_char+0x3ec>
			break;
 80021fa:	bf00      	nop
 80021fc:	e004      	b.n	8002208 <microrl_insert_char+0x3ec>
			break;
 80021fe:	bf00      	nop
 8002200:	e002      	b.n	8002208 <microrl_insert_char+0x3ec>
	}
 8002202:	bf00      	nop
 8002204:	e000      	b.n	8002208 <microrl_insert_char+0x3ec>
			break;
 8002206:	bf00      	nop
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	0800f184 	.word	0x0800f184

08002214 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <microrl_print_char+0x20>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	79fa      	ldrb	r2, [r7, #7]
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fdf8 	bl	8001e1c <microrl_insert_char>
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000008 	.word	0x20000008

08002238 <print>:

void print (const char * str)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 8002240:	4b1e      	ldr	r3, [pc, #120]	; (80022bc <print+0x84>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	f083 0301 	eor.w	r3, r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <print+0x1e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b1b      	cmp	r3, #27
 8002254:	d02b      	beq.n	80022ae <print+0x76>
		return;
	if (!CDC_is_ready)
 8002256:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <print+0x88>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	f083 0301 	eor.w	r3, r3, #1
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d126      	bne.n	80022b2 <print+0x7a>
		return;
	uint16_t len = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 8002268:	89fb      	ldrh	r3, [r7, #14]
 800226a:	3301      	adds	r3, #1
 800226c:	81fb      	strh	r3, [r7, #14]
 800226e:	89fb      	ldrh	r3, [r7, #14]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f6      	bne.n	8002268 <print+0x30>
	uint32_t timeout = HAL_GetTick();
 800227a:	f001 f937 	bl	80034ec <HAL_GetTick>
 800227e:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8002280:	e006      	b.n	8002290 <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 8002282:	f001 f933 	bl	80034ec <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b04      	cmp	r3, #4
 800228e:	d807      	bhi.n	80022a0 <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <print+0x8c>)
 8002292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002296:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f1      	bne.n	8002282 <print+0x4a>
 800229e:	e000      	b.n	80022a2 <print+0x6a>
			break;
 80022a0:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 80022a2:	89fb      	ldrh	r3, [r7, #14]
 80022a4:	4619      	mov	r1, r3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f00c fab4 	bl	800e814 <CDC_Transmit_FS>
 80022ac:	e002      	b.n	80022b4 <print+0x7c>
		return;
 80022ae:	bf00      	nop
 80022b0:	e000      	b.n	80022b4 <print+0x7c>
		return;
 80022b2:	bf00      	nop
}
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000000c 	.word	0x2000000c
 80022c0:	200001ae 	.word	0x200001ae
 80022c4:	20002718 	.word	0x20002718

080022c8 <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	e010      	b.n	80022fa <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 80022d8:	490c      	ldr	r1, [pc, #48]	; (800230c <find_color_by_name+0x44>)
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4413      	add	r3, r2
 80022e6:	440b      	add	r3, r1
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	79fa      	ldrb	r2, [r7, #7]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d101      	bne.n	80022f4 <find_color_by_name+0x2c>
		{
			return i;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	e006      	b.n	8002302 <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3301      	adds	r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d9eb      	bls.n	80022d8 <find_color_by_name+0x10>
		}
	}
	return 0;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	0800f708 	.word	0x0800f708

08002310 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ffd2 	bl	80022c8 <find_color_by_name>
 8002324:	4602      	mov	r2, r0
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	4a08      	ldr	r2, [pc, #32]	; (8002354 <print_color+0x44>)
 8002332:	4413      	add	r3, r2
 8002334:	3301      	adds	r3, #1
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff7e 	bl	8002238 <print>
	print(str);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff7b 	bl	8002238 <print>
	print(COLOR_NC);
 8002342:	4805      	ldr	r0, [pc, #20]	; (8002358 <print_color+0x48>)
 8002344:	f7ff ff78 	bl	8002238 <print>
	return 0;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	0800f708 	.word	0x0800f708
 8002358:	0800f1a8 	.word	0x0800f1a8

0800235c <str_length>:

int str_length(const char * str)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8002368:	e002      	b.n	8002370 <str_length+0x14>
		i++;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3301      	adds	r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f6      	bne.n	800236a <str_length+0xe>
	return i;
 800237c:	68fb      	ldr	r3, [r7, #12]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <print_help>:


int print_help(int argc, const char * const * argv)
{
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
	print(_VER);
 8002392:	4862      	ldr	r0, [pc, #392]	; (800251c <print_help+0x194>)
 8002394:	f7ff ff50 	bl	8002238 <print>
	print(ENDL);
 8002398:	4861      	ldr	r0, [pc, #388]	; (8002520 <print_help+0x198>)
 800239a:	f7ff ff4d 	bl	8002238 <print>
	print ("Use ");
 800239e:	4861      	ldr	r0, [pc, #388]	; (8002524 <print_help+0x19c>)
 80023a0:	f7ff ff4a 	bl	8002238 <print>
	print_color("TAB", C_GREEN);
 80023a4:	2105      	movs	r1, #5
 80023a6:	4860      	ldr	r0, [pc, #384]	; (8002528 <print_help+0x1a0>)
 80023a8:	f7ff ffb2 	bl	8002310 <print_color>
	print(" key for completion");
 80023ac:	485f      	ldr	r0, [pc, #380]	; (800252c <print_help+0x1a4>)
 80023ae:	f7ff ff43 	bl	8002238 <print>
	print (ENDL);
 80023b2:	485b      	ldr	r0, [pc, #364]	; (8002520 <print_help+0x198>)
 80023b4:	f7ff ff40 	bl	8002238 <print>
	print ("Available commands:");
 80023b8:	485d      	ldr	r0, [pc, #372]	; (8002530 <print_help+0x1a8>)
 80023ba:	f7ff ff3d 	bl	8002238 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e09e      	b.n	8002502 <print_help+0x17a>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 80023c4:	4a5b      	ldr	r2, [pc, #364]	; (8002534 <print_help+0x1ac>)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d6:	d11f      	bne.n	8002418 <print_help+0x90>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3b01      	subs	r3, #1
 80023dc:	4a55      	ldr	r2, [pc, #340]	; (8002534 <print_help+0x1ac>)
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ec:	d004      	beq.n	80023f8 <print_help+0x70>
				print_color(" aka ", C_L_PURPLE);
 80023ee:	210c      	movs	r1, #12
 80023f0:	4851      	ldr	r0, [pc, #324]	; (8002538 <print_help+0x1b0>)
 80023f2:	f7ff ff8d 	bl	8002310 <print_color>
 80023f6:	e003      	b.n	8002400 <print_help+0x78>
			else
				print_color("/", C_L_PURPLE);
 80023f8:	210c      	movs	r1, #12
 80023fa:	4850      	ldr	r0, [pc, #320]	; (800253c <print_help+0x1b4>)
 80023fc:	f7ff ff88 	bl	8002310 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	222c      	movs	r2, #44	; 0x2c
 8002404:	fb02 f303 	mul.w	r3, r2, r3
 8002408:	4a4a      	ldr	r2, [pc, #296]	; (8002534 <print_help+0x1ac>)
 800240a:	4413      	add	r3, r2
 800240c:	3304      	adds	r3, #4
 800240e:	210b      	movs	r1, #11
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff7d 	bl	8002310 <print_color>
 8002416:	e071      	b.n	80024fc <print_help+0x174>
		}
		else
		{
			print(ENDL);
 8002418:	4841      	ldr	r0, [pc, #260]	; (8002520 <print_help+0x198>)
 800241a:	f7ff ff0d 	bl	8002238 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 800241e:	f06f 0303 	mvn.w	r3, #3
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	e005      	b.n	8002432 <print_help+0xaa>
				print(" ");
 8002426:	4846      	ldr	r0, [pc, #280]	; (8002540 <print_help+0x1b8>)
 8002428:	f7ff ff06 	bl	8002238 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	3301      	adds	r3, #1
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	4a40      	ldr	r2, [pc, #256]	; (8002534 <print_help+0x1ac>)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	429a      	cmp	r2, r3
 8002444:	dbef      	blt.n	8002426 <print_help+0x9e>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	222c      	movs	r2, #44	; 0x2c
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	4a39      	ldr	r2, [pc, #228]	; (8002534 <print_help+0x1ac>)
 8002450:	4413      	add	r3, r2
 8002452:	1d1a      	adds	r2, r3, #4
 8002454:	4937      	ldr	r1, [pc, #220]	; (8002534 <print_help+0x1ac>)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	202c      	movs	r0, #44	; 0x2c
 800245a:	fb00 f303 	mul.w	r3, r0, r3
 800245e:	440b      	add	r3, r1
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4938      	ldr	r1, [pc, #224]	; (8002544 <print_help+0x1bc>)
 8002464:	5ccb      	ldrb	r3, [r1, r3]
 8002466:	4619      	mov	r1, r3
 8002468:	4610      	mov	r0, r2
 800246a:	f7ff ff51 	bl	8002310 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	e005      	b.n	8002480 <print_help+0xf8>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 8002474:	4832      	ldr	r0, [pc, #200]	; (8002540 <print_help+0x1b8>)
 8002476:	f7ff fedf 	bl	8002238 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3301      	adds	r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	4a2c      	ldr	r2, [pc, #176]	; (8002534 <print_help+0x1ac>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 800248e:	f1c3 040b 	rsb	r4, r3, #11
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	222c      	movs	r2, #44	; 0x2c
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	4a26      	ldr	r2, [pc, #152]	; (8002534 <print_help+0x1ac>)
 800249c:	4413      	add	r3, r2
 800249e:	3304      	adds	r3, #4
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff5b 	bl	800235c <str_length>
 80024a6:	4603      	mov	r3, r0
 80024a8:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	dbe1      	blt.n	8002474 <print_help+0xec>
			switch (microrl_actions[i].level){
 80024b0:	4a20      	ldr	r2, [pc, #128]	; (8002534 <print_help+0x1ac>)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <print_help+0x140>
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d004      	beq.n	80024d0 <print_help+0x148>
 80024c6:	e007      	b.n	80024d8 <print_help+0x150>
			case 0:
				print ("-");
 80024c8:	481f      	ldr	r0, [pc, #124]	; (8002548 <print_help+0x1c0>)
 80024ca:	f7ff feb5 	bl	8002238 <print>
				break;
 80024ce:	e007      	b.n	80024e0 <print_help+0x158>
			case 1:
				print ("^");
 80024d0:	481e      	ldr	r0, [pc, #120]	; (800254c <print_help+0x1c4>)
 80024d2:	f7ff feb1 	bl	8002238 <print>
				break;
 80024d6:	e003      	b.n	80024e0 <print_help+0x158>
			default:
				print ("#");
 80024d8:	481d      	ldr	r0, [pc, #116]	; (8002550 <print_help+0x1c8>)
 80024da:	f7ff fead 	bl	8002238 <print>
				break;
 80024de:	bf00      	nop
			}
			print (" ");
 80024e0:	4817      	ldr	r0, [pc, #92]	; (8002540 <print_help+0x1b8>)
 80024e2:	f7ff fea9 	bl	8002238 <print>
			print (microrl_actions[i].help_msg);
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	222c      	movs	r2, #44	; 0x2c
 80024ea:	fb02 f303 	mul.w	r3, r2, r3
 80024ee:	3308      	adds	r3, #8
 80024f0:	4a10      	ldr	r2, [pc, #64]	; (8002534 <print_help+0x1ac>)
 80024f2:	4413      	add	r3, r2
 80024f4:	3305      	adds	r3, #5
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fe9e 	bl	8002238 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	3301      	adds	r3, #1
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b11      	cmp	r3, #17
 8002506:	f67f af5d 	bls.w	80023c4 <print_help+0x3c>
		}
	}
	print(ENDL);
 800250a:	4805      	ldr	r0, [pc, #20]	; (8002520 <print_help+0x198>)
 800250c:	f7ff fe94 	bl	8002238 <print>
	return 0;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	371c      	adds	r7, #28
 8002516:	46bd      	mov	sp, r7
 8002518:	bd90      	pop	{r4, r7, pc}
 800251a:	bf00      	nop
 800251c:	0800f1b0 	.word	0x0800f1b0
 8002520:	0800f1c0 	.word	0x0800f1c0
 8002524:	0800f1c4 	.word	0x0800f1c4
 8002528:	0800f1cc 	.word	0x0800f1cc
 800252c:	0800f1d0 	.word	0x0800f1d0
 8002530:	0800f1e4 	.word	0x0800f1e4
 8002534:	0800f3f0 	.word	0x0800f3f0
 8002538:	0800f1f8 	.word	0x0800f1f8
 800253c:	0800f200 	.word	0x0800f200
 8002540:	0800f204 	.word	0x0800f204
 8002544:	0800f7c4 	.word	0x0800f7c4
 8002548:	0800f208 	.word	0x0800f208
 800254c:	0800f20c 	.word	0x0800f20c
 8002550:	0800f210 	.word	0x0800f210

08002554 <execute>:



int execute (int argc, const char * const * argv)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 800255e:	2300      	movs	r3, #0
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 800256a:	2300      	movs	r3, #0
 800256c:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	e056      	b.n	8002622 <execute+0xce>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	e045      	b.n	8002606 <execute+0xb2>
		{
			tokens_found = false;
 800257a:	2300      	movs	r3, #0
 800257c:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 800257e:	4a55      	ldr	r2, [pc, #340]	; (80026d4 <execute+0x180>)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	212c      	movs	r1, #44	; 0x2c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d001      	beq.n	800259a <execute+0x46>
				synonym_level = current_level; // save the synonym level
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d003      	beq.n	80025aa <execute+0x56>
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	db31      	blt.n	800260e <execute+0xba>
				break;
			if (current_level == i)
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d101      	bne.n	80025b6 <execute+0x62>
				last_main_synonym = n;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	4413      	add	r3, r2
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	212c      	movs	r1, #44	; 0x2c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4942      	ldr	r1, [pc, #264]	; (80026d4 <execute+0x180>)
 80025ca:	440b      	add	r3, r1
 80025cc:	3304      	adds	r3, #4
 80025ce:	4619      	mov	r1, r3
 80025d0:	4610      	mov	r0, r2
 80025d2:	f7fd fdbd 	bl	8000150 <strcmp>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d111      	bne.n	8002600 <execute+0xac>
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d10d      	bne.n	8002600 <execute+0xac>
					(i == synonym_level))
			{
				tokens_found = true;
 80025e4:	2301      	movs	r3, #1
 80025e6:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	623a      	str	r2, [r7, #32]
 80025ee:	4a39      	ldr	r2, [pc, #228]	; (80026d4 <execute+0x180>)
 80025f0:	212c      	movs	r1, #44	; 0x2c
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	3328      	adds	r3, #40	; 0x28
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80025fe:	e007      	b.n	8002610 <execute+0xbc>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	3301      	adds	r3, #1
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b11      	cmp	r3, #17
 800260a:	d9b6      	bls.n	800257a <execute+0x26>
 800260c:	e000      	b.n	8002610 <execute+0xbc>
				break;
 800260e:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8002610:	7efb      	ldrb	r3, [r7, #27]
 8002612:	f083 0301 	eor.w	r3, r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <execute+0xd8>
	for (int i = 0; i < argc; i++)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	3301      	adds	r3, #1
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	429a      	cmp	r2, r3
 8002628:	dba4      	blt.n	8002574 <execute+0x20>
 800262a:	e000      	b.n	800262e <execute+0xda>
			break;
 800262c:	bf00      	nop
	}

	if (func != NULL)
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <execute+0xec>
	{
		return func(argc, argv); // function found
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	6839      	ldr	r1, [r7, #0]
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	4798      	blx	r3
 800263c:	4603      	mov	r3, r0
 800263e:	e045      	b.n	80026cc <execute+0x178>
	} else if (tokens_found)
 8002640:	7efb      	ldrb	r3, [r7, #27]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d021      	beq.n	800268a <execute+0x136>
	{
		print_color ("command: '", C_L_RED);
 8002646:	210a      	movs	r1, #10
 8002648:	4823      	ldr	r0, [pc, #140]	; (80026d8 <execute+0x184>)
 800264a:	f7ff fe61 	bl	8002310 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	210a      	movs	r1, #10
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fe5b 	bl	8002310 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 800265a:	210a      	movs	r1, #10
 800265c:	481f      	ldr	r0, [pc, #124]	; (80026dc <execute+0x188>)
 800265e:	f7ff fe57 	bl	8002310 <print_color>
		print(ENDL);
 8002662:	481f      	ldr	r0, [pc, #124]	; (80026e0 <execute+0x18c>)
 8002664:	f7ff fde8 	bl	8002238 <print>
		print_color ("use '", C_NC);
 8002668:	2100      	movs	r1, #0
 800266a:	481e      	ldr	r0, [pc, #120]	; (80026e4 <execute+0x190>)
 800266c:	f7ff fe50 	bl	8002310 <print_color>
		print_color ("?", C_GREEN);
 8002670:	2105      	movs	r1, #5
 8002672:	481d      	ldr	r0, [pc, #116]	; (80026e8 <execute+0x194>)
 8002674:	f7ff fe4c 	bl	8002310 <print_color>
		print_color ("' for help", C_NC);
 8002678:	2100      	movs	r1, #0
 800267a:	481c      	ldr	r0, [pc, #112]	; (80026ec <execute+0x198>)
 800267c:	f7ff fe48 	bl	8002310 <print_color>
		print (ENDL);
 8002680:	4817      	ldr	r0, [pc, #92]	; (80026e0 <execute+0x18c>)
 8002682:	f7ff fdd9 	bl	8002238 <print>
		return 1;
 8002686:	2301      	movs	r3, #1
 8002688:	e020      	b.n	80026cc <execute+0x178>
	}
	else
	{
		print_color ("command: '", C_RED);
 800268a:	2109      	movs	r1, #9
 800268c:	4812      	ldr	r0, [pc, #72]	; (80026d8 <execute+0x184>)
 800268e:	f7ff fe3f 	bl	8002310 <print_color>
		print_color ((char*)argv[0], C_RED);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2109      	movs	r1, #9
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fe39 	bl	8002310 <print_color>
		print_color ("' not found", C_RED);
 800269e:	2109      	movs	r1, #9
 80026a0:	4813      	ldr	r0, [pc, #76]	; (80026f0 <execute+0x19c>)
 80026a2:	f7ff fe35 	bl	8002310 <print_color>
		print(ENDL);
 80026a6:	480e      	ldr	r0, [pc, #56]	; (80026e0 <execute+0x18c>)
 80026a8:	f7ff fdc6 	bl	8002238 <print>
		print_color ("use '", C_NC);
 80026ac:	2100      	movs	r1, #0
 80026ae:	480d      	ldr	r0, [pc, #52]	; (80026e4 <execute+0x190>)
 80026b0:	f7ff fe2e 	bl	8002310 <print_color>
		print_color ("?", C_GREEN);
 80026b4:	2105      	movs	r1, #5
 80026b6:	480c      	ldr	r0, [pc, #48]	; (80026e8 <execute+0x194>)
 80026b8:	f7ff fe2a 	bl	8002310 <print_color>
		print_color ("' for help", C_NC);
 80026bc:	2100      	movs	r1, #0
 80026be:	480b      	ldr	r0, [pc, #44]	; (80026ec <execute+0x198>)
 80026c0:	f7ff fe26 	bl	8002310 <print_color>
		print (ENDL);
 80026c4:	4806      	ldr	r0, [pc, #24]	; (80026e0 <execute+0x18c>)
 80026c6:	f7ff fdb7 	bl	8002238 <print>
		return 1;
 80026ca:	2301      	movs	r3, #1

	}
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3728      	adds	r7, #40	; 0x28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	0800f3f0 	.word	0x0800f3f0
 80026d8:	0800f214 	.word	0x0800f214
 80026dc:	0800f220 	.word	0x0800f220
 80026e0:	0800f1c0 	.word	0x0800f1c0
 80026e4:	0800f240 	.word	0x0800f240
 80026e8:	0800f248 	.word	0x0800f248
 80026ec:	0800f24c 	.word	0x0800f24c
 80026f0:	0800f258 	.word	0x0800f258

080026f4 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08c      	sub	sp, #48	; 0x30
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
	int j = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 8002702:	4b63      	ldr	r3, [pc, #396]	; (8002890 <complet+0x19c>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d11f      	bne.n	800274e <complet+0x5a>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 800270e:	2300      	movs	r3, #0
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
 8002712:	e018      	b.n	8002746 <complet+0x52>
			if (microrl_actions[i].level == 0)
 8002714:	4a5f      	ldr	r2, [pc, #380]	; (8002894 <complet+0x1a0>)
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10c      	bne.n	8002740 <complet+0x4c>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 8002726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800272c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f202 	mul.w	r2, r1, r2
 8002734:	4957      	ldr	r1, [pc, #348]	; (8002894 <complet+0x1a0>)
 8002736:	440a      	add	r2, r1
 8002738:	3204      	adds	r2, #4
 800273a:	4955      	ldr	r1, [pc, #340]	; (8002890 <complet+0x19c>)
 800273c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	3301      	adds	r3, #1
 8002744:	62bb      	str	r3, [r7, #40]	; 0x28
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	2b11      	cmp	r3, #17
 800274a:	d9e3      	bls.n	8002714 <complet+0x20>
 800274c:	e095      	b.n	800287a <complet+0x186>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002754:	3b01      	subs	r3, #1
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	4413      	add	r3, r2
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 8002768:	2300      	movs	r3, #0
 800276a:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 800276c:	2300      	movs	r3, #0
 800276e:	61bb      	str	r3, [r7, #24]
 8002770:	e07c      	b.n	800286c <complet+0x178>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	e06b      	b.n	8002850 <complet+0x15c>
			{
				tokens_found = false;
 8002778:	2300      	movs	r3, #0
 800277a:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 800277c:	4a45      	ldr	r2, [pc, #276]	; (8002894 <complet+0x1a0>)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	212c      	movs	r1, #44	; 0x2c
 8002782:	fb01 f303 	mul.w	r3, r1, r3
 8002786:	4413      	add	r3, r2
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002792:	d001      	beq.n	8002798 <complet+0xa4>
					synonym_level = current_level; // save the synonym level
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279e:	d003      	beq.n	80027a8 <complet+0xb4>
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	db57      	blt.n	8002858 <complet+0x164>
					break;
				if (current_level == i)
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d101      	bne.n	80027b4 <complet+0xc0>
					last_main_synonym = n;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d128      	bne.n	8002810 <complet+0x11c>
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	222c      	movs	r2, #44	; 0x2c
 80027c2:	fb02 f303 	mul.w	r3, r2, r3
 80027c6:	4a33      	ldr	r2, [pc, #204]	; (8002894 <complet+0x1a0>)
 80027c8:	4413      	add	r3, r2
 80027ca:	3304      	adds	r3, #4
 80027cc:	6939      	ldr	r1, [r7, #16]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f00c fc52 	bl	800f078 <strstr>
 80027d4:	4602      	mov	r2, r0
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	492d      	ldr	r1, [pc, #180]	; (8002894 <complet+0x1a0>)
 80027e0:	440b      	add	r3, r1
 80027e2:	3304      	adds	r3, #4
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d113      	bne.n	8002810 <complet+0x11c>
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d10f      	bne.n	8002810 <complet+0x11c>
										(i == synonym_level))
				{
					tokens_found = true;
 80027f0:	2301      	movs	r3, #1
 80027f2:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 80027f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f202 	mul.w	r2, r1, r2
 8002802:	4924      	ldr	r1, [pc, #144]	; (8002894 <complet+0x1a0>)
 8002804:	440a      	add	r2, r1
 8002806:	3204      	adds	r2, #4
 8002808:	4921      	ldr	r1, [pc, #132]	; (8002890 <complet+0x19c>)
 800280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800280e:	e01c      	b.n	800284a <complet+0x156>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	4413      	add	r3, r2
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	491c      	ldr	r1, [pc, #112]	; (8002894 <complet+0x1a0>)
 8002824:	440b      	add	r3, r1
 8002826:	3304      	adds	r3, #4
 8002828:	4619      	mov	r1, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f7fd fc90 	bl	8000150 <strcmp>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <complet+0x156>
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	429a      	cmp	r2, r3
 800283c:	d105      	bne.n	800284a <complet+0x156>
				{
					last_main_synonym++;
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	3301      	adds	r3, #1
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 8002844:	2301      	movs	r3, #1
 8002846:	77fb      	strb	r3, [r7, #31]
					break;
 8002848:	e007      	b.n	800285a <complet+0x166>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3301      	adds	r3, #1
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b11      	cmp	r3, #17
 8002854:	d990      	bls.n	8002778 <complet+0x84>
 8002856:	e000      	b.n	800285a <complet+0x166>
					break;
 8002858:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 800285a:	7ffb      	ldrb	r3, [r7, #31]
 800285c:	f083 0301 	eor.w	r3, r3, #1
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d108      	bne.n	8002878 <complet+0x184>
		for (int i = 0; i < argc; i++)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	3301      	adds	r3, #1
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	429a      	cmp	r2, r3
 8002872:	f6ff af7e 	blt.w	8002772 <complet+0x7e>
 8002876:	e000      	b.n	800287a <complet+0x186>
				break;
 8002878:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 800287a:	4a05      	ldr	r2, [pc, #20]	; (8002890 <complet+0x19c>)
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	2100      	movs	r1, #0
 8002880:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 8002884:	4b02      	ldr	r3, [pc, #8]	; (8002890 <complet+0x19c>)
}
 8002886:	4618      	mov	r0, r3
 8002888:	3730      	adds	r7, #48	; 0x30
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20002524 	.word	0x20002524
 8002894:	0800f3f0 	.word	0x0800f3f0

08002898 <sigint>:
#endif


void sigint (void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <sigint+0x50>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
	show_clock = true;
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <sigint+0x54>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]

	print (ENDL);
 80028aa:	4811      	ldr	r0, [pc, #68]	; (80028f0 <sigint+0x58>)
 80028ac:	f7ff fcc4 	bl	8002238 <print>
	print ("^C catched!");
 80028b0:	4810      	ldr	r0, [pc, #64]	; (80028f4 <sigint+0x5c>)
 80028b2:	f7ff fcc1 	bl	8002238 <print>
	int i = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 80028ba:	e009      	b.n	80028d0 <sigint+0x38>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <sigint+0x60>)
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <sigint+0x58>)
 80028c8:	5cd3      	ldrb	r3, [r2, r3]
 80028ca:	4619      	mov	r1, r3
 80028cc:	f7ff faa6 	bl	8001e1c <microrl_insert_char>
	while (ENTER[i])
 80028d0:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <sigint+0x58>)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1ef      	bne.n	80028bc <sigint+0x24>
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200001af 	.word	0x200001af
 80028ec:	2000000d 	.word	0x2000000d
 80028f0:	0800f1c0 	.word	0x0800f1c0
 80028f4:	0800f264 	.word	0x0800f264
 80028f8:	20000008 	.word	0x20000008

080028fc <init_microrl>:

void init_microrl(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <init_microrl+0x38>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <init_microrl+0x3c>)
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe ff4a 	bl	80017a0 <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <init_microrl+0x38>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	490a      	ldr	r1, [pc, #40]	; (800293c <init_microrl+0x40>)
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe ff90 	bl	8001838 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <init_microrl+0x38>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4908      	ldr	r1, [pc, #32]	; (8002940 <init_microrl+0x44>)
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe ff7c 	bl	800181c <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <init_microrl+0x38>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4906      	ldr	r1, [pc, #24]	; (8002944 <init_microrl+0x48>)
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe ff92 	bl	8001854 <microrl_set_sigint_callback>
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20000008 	.word	0x20000008
 8002938:	08002239 	.word	0x08002239
 800293c:	08002555 	.word	0x08002555
 8002940:	080026f5 	.word	0x080026f5
 8002944:	08002899 	.word	0x08002899

08002948 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 8002952:	4805      	ldr	r0, [pc, #20]	; (8002968 <clear_screen+0x20>)
 8002954:	f7ff fc70 	bl	8002238 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 8002958:	4804      	ldr	r0, [pc, #16]	; (800296c <clear_screen+0x24>)
 800295a:	f7ff fc6d 	bl	8002238 <print>
	return 0;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	0800f270 	.word	0x0800f270
 800296c:	0800f278 	.word	0x0800f278

08002970 <set_CDC_ready>:


void set_CDC_ready(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <set_CDC_ready+0x14>)
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
}
 800297a:	bf00      	nop
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	200001ae 	.word	0x200001ae

08002988 <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <color_toggle+0x30>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	f083 0301 	eor.w	r3, r3, #1
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <color_toggle+0x30>)
 80029a8:	701a      	strb	r2, [r3, #0]
	return 0;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	2000000c 	.word	0x2000000c

080029bc <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
	color_out = 1;
 80029c6:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <color_on+0x28>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 80029cc:	2105      	movs	r1, #5
 80029ce:	4806      	ldr	r0, [pc, #24]	; (80029e8 <color_on+0x2c>)
 80029d0:	f7ff fc9e 	bl	8002310 <print_color>
	print(ENDL);
 80029d4:	4805      	ldr	r0, [pc, #20]	; (80029ec <color_on+0x30>)
 80029d6:	f7ff fc2f 	bl	8002238 <print>
	return 0;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2000000c 	.word	0x2000000c
 80029e8:	0800f27c 	.word	0x0800f27c
 80029ec:	0800f1c0 	.word	0x0800f1c0

080029f0 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
	color_out = 0;
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <color_off+0x28>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8002a00:	4806      	ldr	r0, [pc, #24]	; (8002a1c <color_off+0x2c>)
 8002a02:	f7ff fc19 	bl	8002238 <print>
	print(ENDL);
 8002a06:	4806      	ldr	r0, [pc, #24]	; (8002a20 <color_off+0x30>)
 8002a08:	f7ff fc16 	bl	8002238 <print>
	return 0;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000000c 	.word	0x2000000c
 8002a1c:	0800f290 	.word	0x0800f290
 8002a20:	0800f1c0 	.word	0x0800f1c0

08002a24 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
	if (color_out)
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <color_show+0x34>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8002a36:	2105      	movs	r1, #5
 8002a38:	4808      	ldr	r0, [pc, #32]	; (8002a5c <color_show+0x38>)
 8002a3a:	f7ff fc69 	bl	8002310 <print_color>
 8002a3e:	e002      	b.n	8002a46 <color_show+0x22>
	else
		print ("Color output is OFF");
 8002a40:	4807      	ldr	r0, [pc, #28]	; (8002a60 <color_show+0x3c>)
 8002a42:	f7ff fbf9 	bl	8002238 <print>
	print(ENDL);
 8002a46:	4807      	ldr	r0, [pc, #28]	; (8002a64 <color_show+0x40>)
 8002a48:	f7ff fbf6 	bl	8002238 <print>
	return 0;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	2000000c 	.word	0x2000000c
 8002a5c:	0800f27c 	.word	0x0800f27c
 8002a60:	0800f290 	.word	0x0800f290
 8002a64:	0800f1c0 	.word	0x0800f1c0

08002a68 <vfd_text>:
	print(ENDL);
	return 0;
}

int vfd_text (int argc, const char * const * argv)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
	show_clock = false;
 8002a72:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <vfd_text+0x7c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < argc; i++)
 8002a78:	2301      	movs	r3, #1
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	e028      	b.n	8002ad0 <vfd_text+0x68>
	{
		uint16_t temp = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	81fb      	strh	r3, [r7, #14]
		char * pchar = (char*)argv[i];
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	4413      	add	r3, r2
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	613b      	str	r3, [r7, #16]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 8002a8e:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <vfd_text+0x80>)
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	f107 010e 	add.w	r1, r7, #14
 8002a96:	2300      	movs	r3, #0
 8002a98:	2264      	movs	r2, #100	; 0x64
 8002a9a:	f009 f941 	bl	800bd20 <xQueueGenericSend>
		while (*pchar)
 8002a9e:	e010      	b.n	8002ac2 <vfd_text+0x5a>
		{
			temp = get_char(*(pchar++));
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	613a      	str	r2, [r7, #16]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 faf5 	bl	8003098 <get_char>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	81fb      	strh	r3, [r7, #14]
			xQueueSendToBack(qVFDHandle, &temp, 100);
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <vfd_text+0x80>)
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	f107 010e 	add.w	r1, r7, #14
 8002aba:	2300      	movs	r3, #0
 8002abc:	2264      	movs	r2, #100	; 0x64
 8002abe:	f009 f92f 	bl	800bd20 <xQueueGenericSend>
		while (*pchar)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1ea      	bne.n	8002aa0 <vfd_text+0x38>
	for (int i = 1; i < argc; i++)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	3301      	adds	r3, #1
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	dbd2      	blt.n	8002a7e <vfd_text+0x16>
		}
	}
	return 0;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	2000000d 	.word	0x2000000d
 8002ae8:	20002490 	.word	0x20002490

08002aec <leds_toggle>:
	return nema_out;
}


int leds_toggle		(int argc, const char * const * argv)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
	use_leds ^= 1;
 8002af6:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <leds_toggle+0x3c>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	f083 0301 	eor.w	r3, r3, #1
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <leds_toggle+0x3c>)
 8002b0c:	701a      	strb	r2, [r3, #0]
	print_color("Done", C_GREEN);
 8002b0e:	2105      	movs	r1, #5
 8002b10:	4806      	ldr	r0, [pc, #24]	; (8002b2c <leds_toggle+0x40>)
 8002b12:	f7ff fbfd 	bl	8002310 <print_color>
	print(ENDL);
 8002b16:	4806      	ldr	r0, [pc, #24]	; (8002b30 <leds_toggle+0x44>)
 8002b18:	f7ff fb8e 	bl	8002238 <print>
	return 0;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200001b0 	.word	0x200001b0
 8002b2c:	0800f2a4 	.word	0x0800f2a4
 8002b30:	0800f1c0 	.word	0x0800f1c0

08002b34 <set_td>:



int set_td		(int argc, const char * const * argv)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
	if (argc == 3 && str_length(argv[2]) == 6)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d140      	bne.n	8002bc6 <set_td+0x92>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	3308      	adds	r3, #8
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fc06 	bl	800235c <str_length>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d137      	bne.n	8002bc6 <set_td+0x92>
	{
		uint8_t arr [3];
		for (int i = 0; i < 3; i++)
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	e021      	b.n	8002ba0 <set_td+0x6c>
		{
			arr[2-i] = (argv[2][i*2+1]-'0')+((argv[2][i*2]-'0')<<4);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	3308      	adds	r3, #8
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	3301      	adds	r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	781a      	ldrb	r2, [r3, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	3308      	adds	r3, #8
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68f9      	ldr	r1, [r7, #12]
 8002b74:	0049      	lsls	r1, r1, #1
 8002b76:	440b      	add	r3, r1
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	3b30      	subs	r3, #48	; 0x30
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f1c3 0302 	rsb	r3, r3, #2
 8002b8c:	3a30      	subs	r2, #48	; 0x30
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	f107 0110 	add.w	r1, r7, #16
 8002b94:	440b      	add	r3, r1
 8002b96:	f803 2c08 	strb.w	r2, [r3, #-8]
		for (int i = 0; i < 3; i++)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	ddda      	ble.n	8002b5c <set_td+0x28>
		}
		d3231_set(arr, argv[0][0] == 'd');
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b64      	cmp	r3, #100	; 0x64
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	f107 0308 	add.w	r3, r7, #8
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fb81 	bl	80002c4 <d3231_set>
		return 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e007      	b.n	8002bd6 <set_td+0xa2>
	}
	print_color("wrong format", C_RED);
 8002bc6:	2109      	movs	r1, #9
 8002bc8:	4805      	ldr	r0, [pc, #20]	; (8002be0 <set_td+0xac>)
 8002bca:	f7ff fba1 	bl	8002310 <print_color>
	print(ENDL);
 8002bce:	4805      	ldr	r0, [pc, #20]	; (8002be4 <set_td+0xb0>)
 8002bd0:	f7ff fb32 	bl	8002238 <print>
	return 0;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	0800f2ac 	.word	0x0800f2ac
 8002be4:	0800f1c0 	.word	0x0800f1c0

08002be8 <get_td>:

int get_td		(int argc, const char * const * argv)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
	bool date = argv[0][0] == 'd';
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b64      	cmp	r3, #100	; 0x64
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2301      	moveq	r3, #1
 8002bfe:	2300      	movne	r3, #0
 8002c00:	77fb      	strb	r3, [r7, #31]
	char str[9];
	uint8_t * d3231 = d3231_get_all();
 8002c02:	f7fd fb07 	bl	8000214 <d3231_get_all>
 8002c06:	61b8      	str	r0, [r7, #24]
	uint8_t offset = date*4;
 8002c08:	7ffb      	ldrb	r3, [r7, #31]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	75fb      	strb	r3, [r7, #23]
	str[8] = '\0';
 8002c0e:	2300      	movs	r3, #0
 8002c10:	753b      	strb	r3, [r7, #20]
	str[7] = (d3231[offset + 0]&0xF) + '0';
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4413      	add	r3, r2
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3330      	adds	r3, #48	; 0x30
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	74fb      	strb	r3, [r7, #19]
	str[6] = ((d3231[offset + 0]>>4)&0xF) + '0';
 8002c26:	7dfb      	ldrb	r3, [r7, #23]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	3330      	adds	r3, #48	; 0x30
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	74bb      	strb	r3, [r7, #18]
	str[4] = (d3231[offset + 1]&0xF) + '0';
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4413      	add	r3, r2
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	3330      	adds	r3, #48	; 0x30
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	743b      	strb	r3, [r7, #16]
	str[3] = ((d3231[offset + 1]>>4)&0xF) + '0';
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
 8002c50:	3301      	adds	r3, #1
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4413      	add	r3, r2
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	3330      	adds	r3, #48	; 0x30
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	73fb      	strb	r3, [r7, #15]
	str[1] = (d3231[offset + 2]&0xF) + '0';
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	3302      	adds	r3, #2
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4413      	add	r3, r2
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	3330      	adds	r3, #48	; 0x30
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	737b      	strb	r3, [r7, #13]
	str[0] = ((d3231[offset + 2]>>4)&0xF) + '0';
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4413      	add	r3, r2
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	3330      	adds	r3, #48	; 0x30
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	733b      	strb	r3, [r7, #12]
	str[5] = str[2] = date?'-':':';
 8002c8c:	7ffb      	ldrb	r3, [r7, #31]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <get_td+0xae>
 8002c92:	232d      	movs	r3, #45	; 0x2d
 8002c94:	e000      	b.n	8002c98 <get_td+0xb0>
 8002c96:	233a      	movs	r3, #58	; 0x3a
 8002c98:	73bb      	strb	r3, [r7, #14]
 8002c9a:	7bbb      	ldrb	r3, [r7, #14]
 8002c9c:	747b      	strb	r3, [r7, #17]
	print_color(str, C_L_BLUE);
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	2104      	movs	r1, #4
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fb33 	bl	8002310 <print_color>
	print(ENDL);
 8002caa:	4804      	ldr	r0, [pc, #16]	; (8002cbc <get_td+0xd4>)
 8002cac:	f7ff fac4 	bl	8002238 <print>
	return 0;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3720      	adds	r7, #32
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	0800f1c0 	.word	0x0800f1c0

08002cc0 <get_temp>:

int get_temp		(int argc, const char * const * argv)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	; 0x28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
	uint8_t * d3231 = d3231_get_temp();
 8002cca:	f7fd fa7b 	bl	80001c4 <d3231_get_temp>
 8002cce:	61b8      	str	r0, [r7, #24]

	bool negative = d3231[0]&(1<<7);
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf14      	ite	ne
 8002cdc:	2301      	movne	r3, #1
 8002cde:	2300      	moveq	r3, #0
 8002ce0:	75fb      	strb	r3, [r7, #23]
	uint16_t temp = d3231[0]&(~(1<<7));
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cec:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t dec   = d3231[1]>>6;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	75bb      	strb	r3, [r7, #22]

	dec *= 25; // calculate decimal part
 8002cf8:	7dbb      	ldrb	r3, [r7, #22]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	0092      	lsls	r2, r2, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	461a      	mov	r2, r3
 8002d02:	0091      	lsls	r1, r2, #2
 8002d04:	461a      	mov	r2, r3
 8002d06:	460b      	mov	r3, r1
 8002d08:	4413      	add	r3, r2
 8002d0a:	75bb      	strb	r3, [r7, #22]
	temp *= 1000;
 8002d0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d0e:	461a      	mov	r2, r3
 8002d10:	0152      	lsls	r2, r2, #5
 8002d12:	1ad2      	subs	r2, r2, r3
 8002d14:	0092      	lsls	r2, r2, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	84fb      	strh	r3, [r7, #38]	; 0x26
	temp += dec;
 8002d1c:	7dbb      	ldrb	r3, [r7, #22]
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d22:	4413      	add	r3, r2
 8002d24:	84fb      	strh	r3, [r7, #38]	; 0x26


	char str[8];
	str[7] = '\0';
 8002d26:	2300      	movs	r3, #0
 8002d28:	74fb      	strb	r3, [r7, #19]
	for (int i = 6; i >= 0; i--)
 8002d2a:	2306      	movs	r3, #6
 8002d2c:	623b      	str	r3, [r7, #32]
 8002d2e:	e01c      	b.n	8002d6a <get_temp+0xaa>
	{
		str[i] = (temp % 10) + '0';
 8002d30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d32:	4b2c      	ldr	r3, [pc, #176]	; (8002de4 <get_temp+0x124>)
 8002d34:	fba3 1302 	umull	r1, r3, r3, r2
 8002d38:	08d9      	lsrs	r1, r3, #3
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	3330      	adds	r3, #48	; 0x30
 8002d4a:	b2d9      	uxtb	r1, r3
 8002d4c:	f107 020c 	add.w	r2, r7, #12
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	4413      	add	r3, r2
 8002d54:	460a      	mov	r2, r1
 8002d56:	701a      	strb	r2, [r3, #0]
		temp /= 10;
 8002d58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d5a:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <get_temp+0x124>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 6; i >= 0; i--)
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	623b      	str	r3, [r7, #32]
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	dadf      	bge.n	8002d30 <get_temp+0x70>
	}
	str[4] = '.';
 8002d70:	232e      	movs	r3, #46	; 0x2e
 8002d72:	743b      	strb	r3, [r7, #16]
	for (int i = 0; i < 7; i++)
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	e020      	b.n	8002dbc <get_temp+0xfc>
	{
		if (str[i] != '0')
 8002d7a:	f107 020c 	add.w	r2, r7, #12
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	4413      	add	r3, r2
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b30      	cmp	r3, #48	; 0x30
 8002d86:	d010      	beq.n	8002daa <get_temp+0xea>
		{
			if (i > 0)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	dd1a      	ble.n	8002dc4 <get_temp+0x104>
				str[i-1] = negative?'-':'+';
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <get_temp+0xd8>
 8002d94:	222d      	movs	r2, #45	; 0x2d
 8002d96:	e000      	b.n	8002d9a <get_temp+0xda>
 8002d98:	222b      	movs	r2, #43	; 0x2b
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002da2:	440b      	add	r3, r1
 8002da4:	f803 2c1c 	strb.w	r2, [r3, #-28]
			break;
 8002da8:	e00c      	b.n	8002dc4 <get_temp+0x104>
		}
		str[i] = ' ';
 8002daa:	f107 020c 	add.w	r2, r7, #12
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	4413      	add	r3, r2
 8002db2:	2220      	movs	r2, #32
 8002db4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 7; i++)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3301      	adds	r3, #1
 8002dba:	61fb      	str	r3, [r7, #28]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	dddb      	ble.n	8002d7a <get_temp+0xba>
 8002dc2:	e000      	b.n	8002dc6 <get_temp+0x106>
			break;
 8002dc4:	bf00      	nop
	}
	print_color(str, C_GREEN);
 8002dc6:	f107 030c 	add.w	r3, r7, #12
 8002dca:	2105      	movs	r1, #5
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fa9f 	bl	8002310 <print_color>
	print(ENDL);
 8002dd2:	4805      	ldr	r0, [pc, #20]	; (8002de8 <get_temp+0x128>)
 8002dd4:	f7ff fa30 	bl	8002238 <print>
	return 0;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3728      	adds	r7, #40	; 0x28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	cccccccd 	.word	0xcccccccd
 8002de8:	0800f1c0 	.word	0x0800f1c0

08002dec <clock>:

int clock		(int argc, const char * const * argv)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
	show_clock = true;
 8002df6:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <clock+0x1c>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]
	return 0;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	2000000d 	.word	0x2000000d

08002e0c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002e10:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <MX_SPI2_Init+0x64>)
 8002e12:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <MX_SPI2_Init+0x68>)
 8002e14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e16:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <MX_SPI2_Init+0x64>)
 8002e18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e1e:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <MX_SPI2_Init+0x64>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <MX_SPI2_Init+0x64>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <MX_SPI2_Init+0x64>)
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e30:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <MX_SPI2_Init+0x64>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e36:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <MX_SPI2_Init+0x64>)
 8002e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e3e:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <MX_SPI2_Init+0x64>)
 8002e40:	2218      	movs	r2, #24
 8002e42:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <MX_SPI2_Init+0x64>)
 8002e46:	2280      	movs	r2, #128	; 0x80
 8002e48:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <MX_SPI2_Init+0x64>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e50:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <MX_SPI2_Init+0x64>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <MX_SPI2_Init+0x64>)
 8002e58:	220a      	movs	r2, #10
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e5c:	4804      	ldr	r0, [pc, #16]	; (8002e70 <MX_SPI2_Init+0x64>)
 8002e5e:	f003 ffe5 	bl	8006e2c <HAL_SPI_Init>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002e68:	f7fe f94a 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e6c:	bf00      	nop
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20002610 	.word	0x20002610
 8002e74:	40003800 	.word	0x40003800

08002e78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e80:	f107 0310 	add.w	r3, r7, #16
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1c      	ldr	r2, [pc, #112]	; (8002f04 <HAL_SPI_MspInit+0x8c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d131      	bne.n	8002efc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e98:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <HAL_SPI_MspInit+0x90>)
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	4a1a      	ldr	r2, [pc, #104]	; (8002f08 <HAL_SPI_MspInit+0x90>)
 8002e9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea2:	61d3      	str	r3, [r2, #28]
 8002ea4:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <HAL_SPI_MspInit+0x90>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb0:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <HAL_SPI_MspInit+0x90>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	4a14      	ldr	r2, [pc, #80]	; (8002f08 <HAL_SPI_MspInit+0x90>)
 8002eb6:	f043 0308 	orr.w	r3, r3, #8
 8002eba:	6193      	str	r3, [r2, #24]
 8002ebc:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_SPI_MspInit+0x90>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002ec8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002ecc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed6:	f107 0310 	add.w	r3, r7, #16
 8002eda:	4619      	mov	r1, r3
 8002edc:	480b      	ldr	r0, [pc, #44]	; (8002f0c <HAL_SPI_MspInit+0x94>)
 8002ede:	f000 fbef 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002ee2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ee6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef0:	f107 0310 	add.w	r3, r7, #16
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4805      	ldr	r0, [pc, #20]	; (8002f0c <HAL_SPI_MspInit+0x94>)
 8002ef8:	f000 fbe2 	bl	80036c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002efc:	bf00      	nop
 8002efe:	3720      	adds	r7, #32
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40003800 	.word	0x40003800
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40010c00 	.word	0x40010c00

08002f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f16:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <HAL_MspInit+0x68>)
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	4a17      	ldr	r2, [pc, #92]	; (8002f78 <HAL_MspInit+0x68>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6193      	str	r3, [r2, #24]
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <HAL_MspInit+0x68>)
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <HAL_MspInit+0x68>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	4a11      	ldr	r2, [pc, #68]	; (8002f78 <HAL_MspInit+0x68>)
 8002f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f38:	61d3      	str	r3, [r2, #28]
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <HAL_MspInit+0x68>)
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	210f      	movs	r1, #15
 8002f4a:	f06f 0001 	mvn.w	r0, #1
 8002f4e:	f000 fb8c 	bl	800366a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_MspInit+0x6c>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <HAL_MspInit+0x6c>)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40010000 	.word	0x40010000

08002f80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08c      	sub	sp, #48	; 0x30
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002f90:	2200      	movs	r2, #0
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	2019      	movs	r0, #25
 8002f96:	f000 fb68 	bl	800366a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002f9a:	2019      	movs	r0, #25
 8002f9c:	f000 fb81 	bl	80036a2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002fa0:	4b1e      	ldr	r3, [pc, #120]	; (800301c <HAL_InitTick+0x9c>)
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	4a1d      	ldr	r2, [pc, #116]	; (800301c <HAL_InitTick+0x9c>)
 8002fa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002faa:	6193      	str	r3, [r2, #24]
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <HAL_InitTick+0x9c>)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fb8:	f107 0210 	add.w	r2, r7, #16
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f003 fe2e 	bl	8006c24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002fc8:	f003 fe18 	bl	8006bfc <HAL_RCC_GetPCLK2Freq>
 8002fcc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	4a13      	ldr	r2, [pc, #76]	; (8003020 <HAL_InitTick+0xa0>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	0c9b      	lsrs	r3, r3, #18
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <HAL_InitTick+0xa4>)
 8002fde:	4a12      	ldr	r2, [pc, #72]	; (8003028 <HAL_InitTick+0xa8>)
 8002fe0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <HAL_InitTick+0xa4>)
 8002fe4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fe8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002fea:	4a0e      	ldr	r2, [pc, #56]	; (8003024 <HAL_InitTick+0xa4>)
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <HAL_InitTick+0xa4>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_InitTick+0xa4>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002ffc:	4809      	ldr	r0, [pc, #36]	; (8003024 <HAL_InitTick+0xa4>)
 8002ffe:	f004 f97b 	bl	80072f8 <HAL_TIM_Base_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d104      	bne.n	8003012 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003008:	4806      	ldr	r0, [pc, #24]	; (8003024 <HAL_InitTick+0xa4>)
 800300a:	f004 f9cd 	bl	80073a8 <HAL_TIM_Base_Start_IT>
 800300e:	4603      	mov	r3, r0
 8003010:	e000      	b.n	8003014 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
}
 8003014:	4618      	mov	r0, r3
 8003016:	3730      	adds	r7, #48	; 0x30
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40021000 	.word	0x40021000
 8003020:	431bde83 	.word	0x431bde83
 8003024:	20002668 	.word	0x20002668
 8003028:	40012c00 	.word	0x40012c00

0800302c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003030:	e7fe      	b.n	8003030 <NMI_Handler+0x4>

08003032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003036:	e7fe      	b.n	8003036 <HardFault_Handler+0x4>

08003038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800303c:	e7fe      	b.n	800303c <MemManage_Handler+0x4>

0800303e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003042:	e7fe      	b.n	8003042 <BusFault_Handler+0x4>

08003044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003048:	e7fe      	b.n	8003048 <UsageFault_Handler+0x4>

0800304a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr

08003056 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800305a:	2001      	movs	r0, #1
 800305c:	f000 fcfc 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	bd80      	pop	{r7, pc}

08003064 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003068:	4802      	ldr	r0, [pc, #8]	; (8003074 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800306a:	f001 fe48 	bl	8004cfe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200033ac 	.word	0x200033ac

08003078 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800307c:	4802      	ldr	r0, [pc, #8]	; (8003088 <TIM1_UP_IRQHandler+0x10>)
 800307e:	f004 f9e5 	bl	800744c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20002668 	.word	0x20002668

0800308c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003090:	bf00      	nop
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <get_char>:
const uint8_t ALPHAS = (sizeof(vfd_alpha)/sizeof(vfd_alpha[0]));
const uint8_t ALPHAR = (sizeof(vfd_alpha_ru)/sizeof(vfd_alpha_ru[0]));
const uint8_t SPECIAL = (sizeof(vfd_special)/sizeof(vfd_special[0]));

uint16_t get_char(char input)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
	if ('0' <= input && input <= '9')
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	2b2f      	cmp	r3, #47	; 0x2f
 80030a6:	d908      	bls.n	80030ba <get_char+0x22>
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	2b39      	cmp	r3, #57	; 0x39
 80030ac:	d805      	bhi.n	80030ba <get_char+0x22>
		return vfd_digits[input - '0'];
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	3b30      	subs	r3, #48	; 0x30
 80030b2:	4a2a      	ldr	r2, [pc, #168]	; (800315c <get_char+0xc4>)
 80030b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030b8:	e04a      	b.n	8003150 <get_char+0xb8>
	if (0 <= input && input <= 9)
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	2b09      	cmp	r3, #9
 80030be:	d804      	bhi.n	80030ca <get_char+0x32>
		return vfd_digits[(uint8_t)input];
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	4a26      	ldr	r2, [pc, #152]	; (800315c <get_char+0xc4>)
 80030c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030c8:	e042      	b.n	8003150 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e00e      	b.n	80030ee <get_char+0x56>
		if (vfd_special_char[i] == input)
 80030d0:	4a23      	ldr	r2, [pc, #140]	; (8003160 <get_char+0xc8>)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4413      	add	r3, r2
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	79fa      	ldrb	r2, [r7, #7]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d104      	bne.n	80030e8 <get_char+0x50>
			return vfd_special[i];
 80030de:	4a21      	ldr	r2, [pc, #132]	; (8003164 <get_char+0xcc>)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030e6:	e033      	b.n	8003150 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	3301      	adds	r3, #1
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b15      	cmp	r3, #21
 80030f2:	d9ed      	bls.n	80030d0 <get_char+0x38>
	if ('a' <= input && input <= 'z')
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	2b60      	cmp	r3, #96	; 0x60
 80030f8:	d908      	bls.n	800310c <get_char+0x74>
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	2b7a      	cmp	r3, #122	; 0x7a
 80030fe:	d805      	bhi.n	800310c <get_char+0x74>
		return vfd_alpha[input - 'a'];
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	3b61      	subs	r3, #97	; 0x61
 8003104:	4a18      	ldr	r2, [pc, #96]	; (8003168 <get_char+0xd0>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	e021      	b.n	8003150 <get_char+0xb8>
	if ('A' <= input && input <= 'Z')
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	2b40      	cmp	r3, #64	; 0x40
 8003110:	d908      	bls.n	8003124 <get_char+0x8c>
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	2b5a      	cmp	r3, #90	; 0x5a
 8003116:	d805      	bhi.n	8003124 <get_char+0x8c>
		return vfd_alpha[input - 'A'];
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	3b41      	subs	r3, #65	; 0x41
 800311c:	4a12      	ldr	r2, [pc, #72]	; (8003168 <get_char+0xd0>)
 800311e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003122:	e015      	b.n	8003150 <get_char+0xb8>
	if (192 <= input && input <= 223)
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	2bbf      	cmp	r3, #191	; 0xbf
 8003128:	d908      	bls.n	800313c <get_char+0xa4>
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	2bdf      	cmp	r3, #223	; 0xdf
 800312e:	d805      	bhi.n	800313c <get_char+0xa4>
		return vfd_alpha_ru[input - 192];
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	3bc0      	subs	r3, #192	; 0xc0
 8003134:	4a0d      	ldr	r2, [pc, #52]	; (800316c <get_char+0xd4>)
 8003136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800313a:	e009      	b.n	8003150 <get_char+0xb8>
	if (224 <= input && input <= 255)
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	2bdf      	cmp	r3, #223	; 0xdf
 8003140:	d905      	bls.n	800314e <get_char+0xb6>
		return vfd_alpha_ru[input - 224];
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	3be0      	subs	r3, #224	; 0xe0
 8003146:	4a09      	ldr	r2, [pc, #36]	; (800316c <get_char+0xd4>)
 8003148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800314c:	e000      	b.n	8003150 <get_char+0xb8>
	return 0;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	0800f7e0 	.word	0x0800f7e0
 8003160:	0800f894 	.word	0x0800f894
 8003164:	0800f868 	.word	0x0800f868
 8003168:	0800f7f4 	.word	0x0800f7f4
 800316c:	0800f828 	.word	0x0800f828

08003170 <str2vfd>:

void str2vfd(char * str)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	uint16_t buf;
	// erase letters only
	for (int i = 10; i > 0; i --)
 8003178:	230a      	movs	r3, #10
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e028      	b.n	80031d0 <str2vfd+0x60>
	{
		 vfd.arr2[i][0] &= 1<<0;
 800317e:	493e      	ldr	r1, [pc, #248]	; (8003278 <str2vfd+0x108>)
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4613      	mov	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4413      	add	r3, r2
 8003188:	440b      	add	r3, r1
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	b2d8      	uxtb	r0, r3
 8003192:	4939      	ldr	r1, [pc, #228]	; (8003278 <str2vfd+0x108>)
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	440b      	add	r3, r1
 800319e:	4602      	mov	r2, r0
 80031a0:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] &= 1<<7;
 80031a2:	4935      	ldr	r1, [pc, #212]	; (8003278 <str2vfd+0x108>)
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	440b      	add	r3, r1
 80031ae:	3301      	adds	r3, #1
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80031b6:	b2d8      	uxtb	r0, r3
 80031b8:	492f      	ldr	r1, [pc, #188]	; (8003278 <str2vfd+0x108>)
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4613      	mov	r3, r2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	4413      	add	r3, r2
 80031c2:	440b      	add	r3, r1
 80031c4:	3301      	adds	r3, #1
 80031c6:	4602      	mov	r2, r0
 80031c8:	701a      	strb	r2, [r3, #0]
	for (int i = 10; i > 0; i --)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	dcd3      	bgt.n	800317e <str2vfd+0xe>
	}
	uint8_t i = 10;
 80031d6:	230a      	movs	r3, #10
 80031d8:	72fb      	strb	r3, [r7, #11]
	while (*str)
 80031da:	e042      	b.n	8003262 <str2vfd+0xf2>
	{
		 buf = get_char(*(str++));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff57 	bl	8003098 <get_char>
 80031ea:	4603      	mov	r3, r0
 80031ec:	813b      	strh	r3, [r7, #8]
		 vfd.arr2[i][0] |= buf & (~(1<<0));
 80031ee:	7afa      	ldrb	r2, [r7, #11]
 80031f0:	4921      	ldr	r1, [pc, #132]	; (8003278 <str2vfd+0x108>)
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	440b      	add	r3, r1
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	b25a      	sxtb	r2, r3
 80031fe:	893b      	ldrh	r3, [r7, #8]
 8003200:	b25b      	sxtb	r3, r3
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	b25b      	sxtb	r3, r3
 8003208:	4313      	orrs	r3, r2
 800320a:	b25b      	sxtb	r3, r3
 800320c:	7afa      	ldrb	r2, [r7, #11]
 800320e:	b2d8      	uxtb	r0, r3
 8003210:	4919      	ldr	r1, [pc, #100]	; (8003278 <str2vfd+0x108>)
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	440b      	add	r3, r1
 800321a:	4602      	mov	r2, r0
 800321c:	701a      	strb	r2, [r3, #0]
		 vfd.arr2[i][1] |= (buf>>8)&(~(1<<7));
 800321e:	7afa      	ldrb	r2, [r7, #11]
 8003220:	4915      	ldr	r1, [pc, #84]	; (8003278 <str2vfd+0x108>)
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	440b      	add	r3, r1
 800322a:	3301      	adds	r3, #1
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	b25a      	sxtb	r2, r3
 8003230:	893b      	ldrh	r3, [r7, #8]
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	b29b      	uxth	r3, r3
 8003236:	b25b      	sxtb	r3, r3
 8003238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800323c:	b25b      	sxtb	r3, r3
 800323e:	4313      	orrs	r3, r2
 8003240:	b25b      	sxtb	r3, r3
 8003242:	7afa      	ldrb	r2, [r7, #11]
 8003244:	b2d8      	uxtb	r0, r3
 8003246:	490c      	ldr	r1, [pc, #48]	; (8003278 <str2vfd+0x108>)
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	440b      	add	r3, r1
 8003250:	3301      	adds	r3, #1
 8003252:	4602      	mov	r2, r0
 8003254:	701a      	strb	r2, [r3, #0]
		 if (!--i)
 8003256:	7afb      	ldrb	r3, [r7, #11]
 8003258:	3b01      	subs	r3, #1
 800325a:	72fb      	strb	r3, [r7, #11]
 800325c:	7afb      	ldrb	r3, [r7, #11]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d004      	beq.n	800326c <str2vfd+0xfc>
	while (*str)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1b8      	bne.n	80031dc <str2vfd+0x6c>
			 break;
	}
}
 800326a:	e000      	b.n	800326e <str2vfd+0xfe>
			 break;
 800326c:	bf00      	nop
}
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	200024a0 	.word	0x200024a0

0800327c <symbols_vfd>:

void symbols_vfd(uint32_t symbols)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < sizeof(vfd_symbols)/sizeof(vfd_symbols[0]); i++)
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	e07a      	b.n	8003380 <symbols_vfd+0x104>
	{
		if (symbols & (1<<i))
 800328a:	2201      	movs	r2, #1
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	461a      	mov	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d036      	beq.n	800330a <symbols_vfd+0x8e>
		{
			// set symbol
			for (int b = 0; b < 3; b++)
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	e02f      	b.n	8003302 <symbols_vfd+0x86>
			  vfd.arr2[vfd_symbols[i][0]][b] |= ((1<<vfd_symbols[i][1])>>(b<<3))&0xFF;
 80032a2:	4a3c      	ldr	r2, [pc, #240]	; (8003394 <symbols_vfd+0x118>)
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80032aa:	4619      	mov	r1, r3
 80032ac:	4a3a      	ldr	r2, [pc, #232]	; (8003398 <symbols_vfd+0x11c>)
 80032ae:	460b      	mov	r3, r1
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	440b      	add	r3, r1
 80032b4:	441a      	add	r2, r3
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	b25a      	sxtb	r2, r3
 80032be:	4935      	ldr	r1, [pc, #212]	; (8003394 <symbols_vfd+0x118>)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	440b      	add	r3, r1
 80032c6:	785b      	ldrb	r3, [r3, #1]
 80032c8:	4619      	mov	r1, r3
 80032ca:	2301      	movs	r3, #1
 80032cc:	fa03 f101 	lsl.w	r1, r3, r1
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	fa41 f303 	asr.w	r3, r1, r3
 80032d8:	b25b      	sxtb	r3, r3
 80032da:	4313      	orrs	r3, r2
 80032dc:	b258      	sxtb	r0, r3
 80032de:	4a2d      	ldr	r2, [pc, #180]	; (8003394 <symbols_vfd+0x118>)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80032e6:	4619      	mov	r1, r3
 80032e8:	b2c0      	uxtb	r0, r0
 80032ea:	4a2b      	ldr	r2, [pc, #172]	; (8003398 <symbols_vfd+0x11c>)
 80032ec:	460b      	mov	r3, r1
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	440b      	add	r3, r1
 80032f2:	441a      	add	r2, r3
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4413      	add	r3, r2
 80032f8:	4602      	mov	r2, r0
 80032fa:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	3301      	adds	r3, #1
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b02      	cmp	r3, #2
 8003306:	ddcc      	ble.n	80032a2 <symbols_vfd+0x26>
 8003308:	e037      	b.n	800337a <symbols_vfd+0xfe>
		}
		else
		{
			// reset symbol
			for (int b = 0; b < 3; b++)
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	e031      	b.n	8003374 <symbols_vfd+0xf8>
			  vfd.arr2[vfd_symbols[i][0]][b] &= ~(((1<<vfd_symbols[i][1])>>(b<<3))&0xFF);
 8003310:	4a20      	ldr	r2, [pc, #128]	; (8003394 <symbols_vfd+0x118>)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003318:	4619      	mov	r1, r3
 800331a:	4a1f      	ldr	r2, [pc, #124]	; (8003398 <symbols_vfd+0x11c>)
 800331c:	460b      	mov	r3, r1
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	440b      	add	r3, r1
 8003322:	441a      	add	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	b25a      	sxtb	r2, r3
 800332c:	4919      	ldr	r1, [pc, #100]	; (8003394 <symbols_vfd+0x118>)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	440b      	add	r3, r1
 8003334:	785b      	ldrb	r3, [r3, #1]
 8003336:	4619      	mov	r1, r3
 8003338:	2301      	movs	r3, #1
 800333a:	fa03 f101 	lsl.w	r1, r3, r1
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	fa41 f303 	asr.w	r3, r1, r3
 8003346:	b25b      	sxtb	r3, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	b25b      	sxtb	r3, r3
 800334c:	4013      	ands	r3, r2
 800334e:	b258      	sxtb	r0, r3
 8003350:	4a10      	ldr	r2, [pc, #64]	; (8003394 <symbols_vfd+0x118>)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003358:	4619      	mov	r1, r3
 800335a:	b2c0      	uxtb	r0, r0
 800335c:	4a0e      	ldr	r2, [pc, #56]	; (8003398 <symbols_vfd+0x11c>)
 800335e:	460b      	mov	r3, r1
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	440b      	add	r3, r1
 8003364:	441a      	add	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4413      	add	r3, r2
 800336a:	4602      	mov	r2, r0
 800336c:	701a      	strb	r2, [r3, #0]
			for (int b = 0; b < 3; b++)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3301      	adds	r3, #1
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b02      	cmp	r3, #2
 8003378:	ddca      	ble.n	8003310 <symbols_vfd+0x94>
	for (int i = 0; i < sizeof(vfd_symbols)/sizeof(vfd_symbols[0]); i++)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	3301      	adds	r3, #1
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2b18      	cmp	r3, #24
 8003384:	d981      	bls.n	800328a <symbols_vfd+0xe>
		}
	}
}
 8003386:	bf00      	nop
 8003388:	bf00      	nop
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	0800f8ac 	.word	0x0800f8ac
 8003398:	200024a0 	.word	0x200024a0

0800339c <clr_vfd>:

void clr_vfd(void)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	607b      	str	r3, [r7, #4]
 80033a6:	e007      	b.n	80033b8 <clr_vfd+0x1c>
		  vfd.arr1[a] = 0;
 80033a8:	4a08      	ldr	r2, [pc, #32]	; (80033cc <clr_vfd+0x30>)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < sizeof(vfd.arr1); a++)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3301      	adds	r3, #1
 80033b6:	607b      	str	r3, [r7, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d9f4      	bls.n	80033a8 <clr_vfd+0xc>
}
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	200024a0 	.word	0x200024a0

080033d0 <save_vfd>:

uint8_t backup[11*3];

void save_vfd(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	e00b      	b.n	80033f4 <save_vfd+0x24>
		backup[i] = vfd.arr1[i];
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <save_vfd+0x38>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4413      	add	r3, r2
 80033e2:	7819      	ldrb	r1, [r3, #0]
 80033e4:	4a09      	ldr	r2, [pc, #36]	; (800340c <save_vfd+0x3c>)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	460a      	mov	r2, r1
 80033ec:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3301      	adds	r3, #1
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d9f0      	bls.n	80033dc <save_vfd+0xc>
}
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	200024a0 	.word	0x200024a0
 800340c:	200026b0 	.word	0x200026b0

08003410 <restore_vfd>:

void restore_vfd(void)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	e00b      	b.n	8003434 <restore_vfd+0x24>
		vfd.arr1[i] = backup[i];
 800341c:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <restore_vfd+0x38>)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	7819      	ldrb	r1, [r3, #0]
 8003424:	4a09      	ldr	r2, [pc, #36]	; (800344c <restore_vfd+0x3c>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4413      	add	r3, r2
 800342a:	460a      	mov	r2, r1
 800342c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(backup)/sizeof(backup[0]); i++)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3301      	adds	r3, #1
 8003432:	607b      	str	r3, [r7, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b20      	cmp	r3, #32
 8003438:	d9f0      	bls.n	800341c <restore_vfd+0xc>
}
 800343a:	bf00      	nop
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	200026b0 	.word	0x200026b0
 800344c:	200024a0 	.word	0x200024a0

08003450 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003450:	480c      	ldr	r0, [pc, #48]	; (8003484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003452:	490d      	ldr	r1, [pc, #52]	; (8003488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003454:	4a0d      	ldr	r2, [pc, #52]	; (800348c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003458:	e002      	b.n	8003460 <LoopCopyDataInit>

0800345a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800345a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800345c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800345e:	3304      	adds	r3, #4

08003460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003464:	d3f9      	bcc.n	800345a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003466:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003468:	4c0a      	ldr	r4, [pc, #40]	; (8003494 <LoopFillZerobss+0x22>)
  movs r3, #0
 800346a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800346c:	e001      	b.n	8003472 <LoopFillZerobss>

0800346e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800346e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003470:	3204      	adds	r2, #4

08003472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003474:	d3fb      	bcc.n	800346e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003476:	f7ff fe09 	bl	800308c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800347a:	f00b fda9 	bl	800efd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800347e:	f7fd fdbf 	bl	8001000 <main>
  bx lr
 8003482:	4770      	bx	lr
  ldr r0, =_sdata
 8003484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003488:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800348c:	0800f8e8 	.word	0x0800f8e8
  ldr r2, =_sbss
 8003490:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8003494:	20003698 	.word	0x20003698

08003498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003498:	e7fe      	b.n	8003498 <ADC1_2_IRQHandler>
	...

0800349c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034a0:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <HAL_Init+0x28>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a07      	ldr	r2, [pc, #28]	; (80034c4 <HAL_Init+0x28>)
 80034a6:	f043 0310 	orr.w	r3, r3, #16
 80034aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034ac:	2003      	movs	r0, #3
 80034ae:	f000 f8d1 	bl	8003654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034b2:	2000      	movs	r0, #0
 80034b4:	f7ff fd64 	bl	8002f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034b8:	f7ff fd2a 	bl	8002f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40022000 	.word	0x40022000

080034c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_IncTick+0x1c>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_IncTick+0x20>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4413      	add	r3, r2
 80034d8:	4a03      	ldr	r2, [pc, #12]	; (80034e8 <HAL_IncTick+0x20>)
 80034da:	6013      	str	r3, [r2, #0]
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	20000018 	.word	0x20000018
 80034e8:	200026d4 	.word	0x200026d4

080034ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return uwTick;
 80034f0:	4b02      	ldr	r3, [pc, #8]	; (80034fc <HAL_GetTick+0x10>)
 80034f2:	681b      	ldr	r3, [r3, #0]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	200026d4 	.word	0x200026d4

08003500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <__NVIC_SetPriorityGrouping+0x44>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800351c:	4013      	ands	r3, r2
 800351e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800352c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003532:	4a04      	ldr	r2, [pc, #16]	; (8003544 <__NVIC_SetPriorityGrouping+0x44>)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	60d3      	str	r3, [r2, #12]
}
 8003538:	bf00      	nop
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <__NVIC_GetPriorityGrouping+0x18>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	0a1b      	lsrs	r3, r3, #8
 8003552:	f003 0307 	and.w	r3, r3, #7
}
 8003556:	4618      	mov	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	e000ed00 	.word	0xe000ed00

08003564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	2b00      	cmp	r3, #0
 8003574:	db0b      	blt.n	800358e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	f003 021f 	and.w	r2, r3, #31
 800357c:	4906      	ldr	r1, [pc, #24]	; (8003598 <__NVIC_EnableIRQ+0x34>)
 800357e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	2001      	movs	r0, #1
 8003586:	fa00 f202 	lsl.w	r2, r0, r2
 800358a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	e000e100 	.word	0xe000e100

0800359c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	6039      	str	r1, [r7, #0]
 80035a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	db0a      	blt.n	80035c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	490c      	ldr	r1, [pc, #48]	; (80035e8 <__NVIC_SetPriority+0x4c>)
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	0112      	lsls	r2, r2, #4
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	440b      	add	r3, r1
 80035c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c4:	e00a      	b.n	80035dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	4908      	ldr	r1, [pc, #32]	; (80035ec <__NVIC_SetPriority+0x50>)
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	3b04      	subs	r3, #4
 80035d4:	0112      	lsls	r2, r2, #4
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	440b      	add	r3, r1
 80035da:	761a      	strb	r2, [r3, #24]
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	e000e100 	.word	0xe000e100
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b089      	sub	sp, #36	; 0x24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f1c3 0307 	rsb	r3, r3, #7
 800360a:	2b04      	cmp	r3, #4
 800360c:	bf28      	it	cs
 800360e:	2304      	movcs	r3, #4
 8003610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3304      	adds	r3, #4
 8003616:	2b06      	cmp	r3, #6
 8003618:	d902      	bls.n	8003620 <NVIC_EncodePriority+0x30>
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3b03      	subs	r3, #3
 800361e:	e000      	b.n	8003622 <NVIC_EncodePriority+0x32>
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003624:	f04f 32ff 	mov.w	r2, #4294967295
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43da      	mvns	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	401a      	ands	r2, r3
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003638:	f04f 31ff 	mov.w	r1, #4294967295
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	43d9      	mvns	r1, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003648:	4313      	orrs	r3, r2
         );
}
 800364a:	4618      	mov	r0, r3
 800364c:	3724      	adds	r7, #36	; 0x24
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff ff4f 	bl	8003500 <__NVIC_SetPriorityGrouping>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800366a:	b580      	push	{r7, lr}
 800366c:	b086      	sub	sp, #24
 800366e:	af00      	add	r7, sp, #0
 8003670:	4603      	mov	r3, r0
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
 8003676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800367c:	f7ff ff64 	bl	8003548 <__NVIC_GetPriorityGrouping>
 8003680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	6978      	ldr	r0, [r7, #20]
 8003688:	f7ff ffb2 	bl	80035f0 <NVIC_EncodePriority>
 800368c:	4602      	mov	r2, r0
 800368e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003692:	4611      	mov	r1, r2
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff ff81 	bl	800359c <__NVIC_SetPriority>
}
 800369a:	bf00      	nop
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	4603      	mov	r3, r0
 80036aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ff57 	bl	8003564 <__NVIC_EnableIRQ>
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b08b      	sub	sp, #44	; 0x2c
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036ce:	2300      	movs	r3, #0
 80036d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036d2:	e169      	b.n	80039a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036d4:	2201      	movs	r2, #1
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	f040 8158 	bne.w	80039a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4a9a      	ldr	r2, [pc, #616]	; (8003960 <HAL_GPIO_Init+0x2a0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d05e      	beq.n	80037ba <HAL_GPIO_Init+0xfa>
 80036fc:	4a98      	ldr	r2, [pc, #608]	; (8003960 <HAL_GPIO_Init+0x2a0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d875      	bhi.n	80037ee <HAL_GPIO_Init+0x12e>
 8003702:	4a98      	ldr	r2, [pc, #608]	; (8003964 <HAL_GPIO_Init+0x2a4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d058      	beq.n	80037ba <HAL_GPIO_Init+0xfa>
 8003708:	4a96      	ldr	r2, [pc, #600]	; (8003964 <HAL_GPIO_Init+0x2a4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d86f      	bhi.n	80037ee <HAL_GPIO_Init+0x12e>
 800370e:	4a96      	ldr	r2, [pc, #600]	; (8003968 <HAL_GPIO_Init+0x2a8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d052      	beq.n	80037ba <HAL_GPIO_Init+0xfa>
 8003714:	4a94      	ldr	r2, [pc, #592]	; (8003968 <HAL_GPIO_Init+0x2a8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d869      	bhi.n	80037ee <HAL_GPIO_Init+0x12e>
 800371a:	4a94      	ldr	r2, [pc, #592]	; (800396c <HAL_GPIO_Init+0x2ac>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d04c      	beq.n	80037ba <HAL_GPIO_Init+0xfa>
 8003720:	4a92      	ldr	r2, [pc, #584]	; (800396c <HAL_GPIO_Init+0x2ac>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d863      	bhi.n	80037ee <HAL_GPIO_Init+0x12e>
 8003726:	4a92      	ldr	r2, [pc, #584]	; (8003970 <HAL_GPIO_Init+0x2b0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d046      	beq.n	80037ba <HAL_GPIO_Init+0xfa>
 800372c:	4a90      	ldr	r2, [pc, #576]	; (8003970 <HAL_GPIO_Init+0x2b0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d85d      	bhi.n	80037ee <HAL_GPIO_Init+0x12e>
 8003732:	2b12      	cmp	r3, #18
 8003734:	d82a      	bhi.n	800378c <HAL_GPIO_Init+0xcc>
 8003736:	2b12      	cmp	r3, #18
 8003738:	d859      	bhi.n	80037ee <HAL_GPIO_Init+0x12e>
 800373a:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <HAL_GPIO_Init+0x80>)
 800373c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003740:	080037bb 	.word	0x080037bb
 8003744:	08003795 	.word	0x08003795
 8003748:	080037a7 	.word	0x080037a7
 800374c:	080037e9 	.word	0x080037e9
 8003750:	080037ef 	.word	0x080037ef
 8003754:	080037ef 	.word	0x080037ef
 8003758:	080037ef 	.word	0x080037ef
 800375c:	080037ef 	.word	0x080037ef
 8003760:	080037ef 	.word	0x080037ef
 8003764:	080037ef 	.word	0x080037ef
 8003768:	080037ef 	.word	0x080037ef
 800376c:	080037ef 	.word	0x080037ef
 8003770:	080037ef 	.word	0x080037ef
 8003774:	080037ef 	.word	0x080037ef
 8003778:	080037ef 	.word	0x080037ef
 800377c:	080037ef 	.word	0x080037ef
 8003780:	080037ef 	.word	0x080037ef
 8003784:	0800379d 	.word	0x0800379d
 8003788:	080037b1 	.word	0x080037b1
 800378c:	4a79      	ldr	r2, [pc, #484]	; (8003974 <HAL_GPIO_Init+0x2b4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d013      	beq.n	80037ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003792:	e02c      	b.n	80037ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	623b      	str	r3, [r7, #32]
          break;
 800379a:	e029      	b.n	80037f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	3304      	adds	r3, #4
 80037a2:	623b      	str	r3, [r7, #32]
          break;
 80037a4:	e024      	b.n	80037f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	3308      	adds	r3, #8
 80037ac:	623b      	str	r3, [r7, #32]
          break;
 80037ae:	e01f      	b.n	80037f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	330c      	adds	r3, #12
 80037b6:	623b      	str	r3, [r7, #32]
          break;
 80037b8:	e01a      	b.n	80037f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037c2:	2304      	movs	r3, #4
 80037c4:	623b      	str	r3, [r7, #32]
          break;
 80037c6:	e013      	b.n	80037f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d105      	bne.n	80037dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037d0:	2308      	movs	r3, #8
 80037d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	611a      	str	r2, [r3, #16]
          break;
 80037da:	e009      	b.n	80037f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037dc:	2308      	movs	r3, #8
 80037de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	615a      	str	r2, [r3, #20]
          break;
 80037e6:	e003      	b.n	80037f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037e8:	2300      	movs	r3, #0
 80037ea:	623b      	str	r3, [r7, #32]
          break;
 80037ec:	e000      	b.n	80037f0 <HAL_GPIO_Init+0x130>
          break;
 80037ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2bff      	cmp	r3, #255	; 0xff
 80037f4:	d801      	bhi.n	80037fa <HAL_GPIO_Init+0x13a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	e001      	b.n	80037fe <HAL_GPIO_Init+0x13e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3304      	adds	r3, #4
 80037fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2bff      	cmp	r3, #255	; 0xff
 8003804:	d802      	bhi.n	800380c <HAL_GPIO_Init+0x14c>
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	e002      	b.n	8003812 <HAL_GPIO_Init+0x152>
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	3b08      	subs	r3, #8
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	210f      	movs	r1, #15
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	fa01 f303 	lsl.w	r3, r1, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	401a      	ands	r2, r3
 8003824:	6a39      	ldr	r1, [r7, #32]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	fa01 f303 	lsl.w	r3, r1, r3
 800382c:	431a      	orrs	r2, r3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 80b1 	beq.w	80039a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003840:	4b4d      	ldr	r3, [pc, #308]	; (8003978 <HAL_GPIO_Init+0x2b8>)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	4a4c      	ldr	r2, [pc, #304]	; (8003978 <HAL_GPIO_Init+0x2b8>)
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	6193      	str	r3, [r2, #24]
 800384c:	4b4a      	ldr	r3, [pc, #296]	; (8003978 <HAL_GPIO_Init+0x2b8>)
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	60bb      	str	r3, [r7, #8]
 8003856:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003858:	4a48      	ldr	r2, [pc, #288]	; (800397c <HAL_GPIO_Init+0x2bc>)
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	089b      	lsrs	r3, r3, #2
 800385e:	3302      	adds	r3, #2
 8003860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003864:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	220f      	movs	r2, #15
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43db      	mvns	r3, r3
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4013      	ands	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a40      	ldr	r2, [pc, #256]	; (8003980 <HAL_GPIO_Init+0x2c0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d013      	beq.n	80038ac <HAL_GPIO_Init+0x1ec>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a3f      	ldr	r2, [pc, #252]	; (8003984 <HAL_GPIO_Init+0x2c4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00d      	beq.n	80038a8 <HAL_GPIO_Init+0x1e8>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a3e      	ldr	r2, [pc, #248]	; (8003988 <HAL_GPIO_Init+0x2c8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d007      	beq.n	80038a4 <HAL_GPIO_Init+0x1e4>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a3d      	ldr	r2, [pc, #244]	; (800398c <HAL_GPIO_Init+0x2cc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d101      	bne.n	80038a0 <HAL_GPIO_Init+0x1e0>
 800389c:	2303      	movs	r3, #3
 800389e:	e006      	b.n	80038ae <HAL_GPIO_Init+0x1ee>
 80038a0:	2304      	movs	r3, #4
 80038a2:	e004      	b.n	80038ae <HAL_GPIO_Init+0x1ee>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e002      	b.n	80038ae <HAL_GPIO_Init+0x1ee>
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <HAL_GPIO_Init+0x1ee>
 80038ac:	2300      	movs	r3, #0
 80038ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b0:	f002 0203 	and.w	r2, r2, #3
 80038b4:	0092      	lsls	r2, r2, #2
 80038b6:	4093      	lsls	r3, r2
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038be:	492f      	ldr	r1, [pc, #188]	; (800397c <HAL_GPIO_Init+0x2bc>)
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	089b      	lsrs	r3, r3, #2
 80038c4:	3302      	adds	r3, #2
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d006      	beq.n	80038e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038d8:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <HAL_GPIO_Init+0x2d0>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	492c      	ldr	r1, [pc, #176]	; (8003990 <HAL_GPIO_Init+0x2d0>)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]
 80038e4:	e006      	b.n	80038f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038e6:	4b2a      	ldr	r3, [pc, #168]	; (8003990 <HAL_GPIO_Init+0x2d0>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	4928      	ldr	r1, [pc, #160]	; (8003990 <HAL_GPIO_Init+0x2d0>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d006      	beq.n	800390e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003900:	4b23      	ldr	r3, [pc, #140]	; (8003990 <HAL_GPIO_Init+0x2d0>)
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	4922      	ldr	r1, [pc, #136]	; (8003990 <HAL_GPIO_Init+0x2d0>)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
 800390c:	e006      	b.n	800391c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800390e:	4b20      	ldr	r3, [pc, #128]	; (8003990 <HAL_GPIO_Init+0x2d0>)
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	43db      	mvns	r3, r3
 8003916:	491e      	ldr	r1, [pc, #120]	; (8003990 <HAL_GPIO_Init+0x2d0>)
 8003918:	4013      	ands	r3, r2
 800391a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d006      	beq.n	8003936 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_GPIO_Init+0x2d0>)
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	4918      	ldr	r1, [pc, #96]	; (8003990 <HAL_GPIO_Init+0x2d0>)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	4313      	orrs	r3, r2
 8003932:	608b      	str	r3, [r1, #8]
 8003934:	e006      	b.n	8003944 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003936:	4b16      	ldr	r3, [pc, #88]	; (8003990 <HAL_GPIO_Init+0x2d0>)
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	43db      	mvns	r3, r3
 800393e:	4914      	ldr	r1, [pc, #80]	; (8003990 <HAL_GPIO_Init+0x2d0>)
 8003940:	4013      	ands	r3, r2
 8003942:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d021      	beq.n	8003994 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003950:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <HAL_GPIO_Init+0x2d0>)
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	490e      	ldr	r1, [pc, #56]	; (8003990 <HAL_GPIO_Init+0x2d0>)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	4313      	orrs	r3, r2
 800395a:	60cb      	str	r3, [r1, #12]
 800395c:	e021      	b.n	80039a2 <HAL_GPIO_Init+0x2e2>
 800395e:	bf00      	nop
 8003960:	10320000 	.word	0x10320000
 8003964:	10310000 	.word	0x10310000
 8003968:	10220000 	.word	0x10220000
 800396c:	10210000 	.word	0x10210000
 8003970:	10120000 	.word	0x10120000
 8003974:	10110000 	.word	0x10110000
 8003978:	40021000 	.word	0x40021000
 800397c:	40010000 	.word	0x40010000
 8003980:	40010800 	.word	0x40010800
 8003984:	40010c00 	.word	0x40010c00
 8003988:	40011000 	.word	0x40011000
 800398c:	40011400 	.word	0x40011400
 8003990:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_GPIO_Init+0x304>)
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	43db      	mvns	r3, r3
 800399c:	4909      	ldr	r1, [pc, #36]	; (80039c4 <HAL_GPIO_Init+0x304>)
 800399e:	4013      	ands	r3, r2
 80039a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	3301      	adds	r3, #1
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	fa22 f303 	lsr.w	r3, r2, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f47f ae8e 	bne.w	80036d4 <HAL_GPIO_Init+0x14>
  }
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop
 80039bc:	372c      	adds	r7, #44	; 0x2c
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr
 80039c4:	40010400 	.word	0x40010400

080039c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	887b      	ldrh	r3, [r7, #2]
 80039da:	4013      	ands	r3, r2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
 80039e4:	e001      	b.n	80039ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039e6:	2300      	movs	r3, #0
 80039e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	807b      	strh	r3, [r7, #2]
 8003a02:	4613      	mov	r3, r2
 8003a04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a06:	787b      	ldrb	r3, [r7, #1]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a0c:	887a      	ldrh	r2, [r7, #2]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a12:	e003      	b.n	8003a1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a14:	887b      	ldrh	r3, [r7, #2]
 8003a16:	041a      	lsls	r2, r3, #16
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	611a      	str	r2, [r3, #16]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b085      	sub	sp, #20
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	460b      	mov	r3, r1
 8003a30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a38:	887a      	ldrh	r2, [r7, #2]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	041a      	lsls	r2, r3, #16
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	43d9      	mvns	r1, r3
 8003a44:	887b      	ldrh	r3, [r7, #2]
 8003a46:	400b      	ands	r3, r1
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	611a      	str	r2, [r3, #16]
}
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a62:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d006      	beq.n	8003a7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a6e:	4a05      	ldr	r2, [pc, #20]	; (8003a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f806 	bl	8003a88 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40010400 	.word	0x40010400

08003a88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e12b      	b.n	8003d06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fd fa5e 	bl	8000f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2224      	movs	r2, #36	; 0x24
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003afe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b00:	f003 f868 	bl	8006bd4 <HAL_RCC_GetPCLK1Freq>
 8003b04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4a81      	ldr	r2, [pc, #516]	; (8003d10 <HAL_I2C_Init+0x274>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d807      	bhi.n	8003b20 <HAL_I2C_Init+0x84>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a80      	ldr	r2, [pc, #512]	; (8003d14 <HAL_I2C_Init+0x278>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	bf94      	ite	ls
 8003b18:	2301      	movls	r3, #1
 8003b1a:	2300      	movhi	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	e006      	b.n	8003b2e <HAL_I2C_Init+0x92>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a7d      	ldr	r2, [pc, #500]	; (8003d18 <HAL_I2C_Init+0x27c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	bf94      	ite	ls
 8003b28:	2301      	movls	r3, #1
 8003b2a:	2300      	movhi	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e0e7      	b.n	8003d06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4a78      	ldr	r2, [pc, #480]	; (8003d1c <HAL_I2C_Init+0x280>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	0c9b      	lsrs	r3, r3, #18
 8003b40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4a6a      	ldr	r2, [pc, #424]	; (8003d10 <HAL_I2C_Init+0x274>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d802      	bhi.n	8003b70 <HAL_I2C_Init+0xd4>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	e009      	b.n	8003b84 <HAL_I2C_Init+0xe8>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	4a69      	ldr	r2, [pc, #420]	; (8003d20 <HAL_I2C_Init+0x284>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	099b      	lsrs	r3, r3, #6
 8003b82:	3301      	adds	r3, #1
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	495c      	ldr	r1, [pc, #368]	; (8003d10 <HAL_I2C_Init+0x274>)
 8003ba0:	428b      	cmp	r3, r1
 8003ba2:	d819      	bhi.n	8003bd8 <HAL_I2C_Init+0x13c>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1e59      	subs	r1, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bb2:	1c59      	adds	r1, r3, #1
 8003bb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bb8:	400b      	ands	r3, r1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_I2C_Init+0x138>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1e59      	subs	r1, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd2:	e051      	b.n	8003c78 <HAL_I2C_Init+0x1dc>
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	e04f      	b.n	8003c78 <HAL_I2C_Init+0x1dc>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d111      	bne.n	8003c04 <HAL_I2C_Init+0x168>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1e58      	subs	r0, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	440b      	add	r3, r1
 8003bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	e012      	b.n	8003c2a <HAL_I2C_Init+0x18e>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1e58      	subs	r0, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	0099      	lsls	r1, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_I2C_Init+0x196>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e022      	b.n	8003c78 <HAL_I2C_Init+0x1dc>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10e      	bne.n	8003c58 <HAL_I2C_Init+0x1bc>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1e58      	subs	r0, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6859      	ldr	r1, [r3, #4]
 8003c42:	460b      	mov	r3, r1
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	440b      	add	r3, r1
 8003c48:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c56:	e00f      	b.n	8003c78 <HAL_I2C_Init+0x1dc>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1e58      	subs	r0, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	0099      	lsls	r1, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	6809      	ldr	r1, [r1, #0]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69da      	ldr	r2, [r3, #28]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ca6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6911      	ldr	r1, [r2, #16]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68d2      	ldr	r2, [r2, #12]
 8003cb2:	4311      	orrs	r1, r2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	000186a0 	.word	0x000186a0
 8003d14:	001e847f 	.word	0x001e847f
 8003d18:	003d08ff 	.word	0x003d08ff
 8003d1c:	431bde83 	.word	0x431bde83
 8003d20:	10624dd3 	.word	0x10624dd3

08003d24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	461a      	mov	r2, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	817b      	strh	r3, [r7, #10]
 8003d36:	460b      	mov	r3, r1
 8003d38:	813b      	strh	r3, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d3e:	f7ff fbd5 	bl	80034ec <HAL_GetTick>
 8003d42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	f040 80d9 	bne.w	8003f04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	2319      	movs	r3, #25
 8003d58:	2201      	movs	r2, #1
 8003d5a:	496d      	ldr	r1, [pc, #436]	; (8003f10 <HAL_I2C_Mem_Write+0x1ec>)
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fcc1 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e0cc      	b.n	8003f06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_I2C_Mem_Write+0x56>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e0c5      	b.n	8003f06 <HAL_I2C_Mem_Write+0x1e2>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d007      	beq.n	8003da0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2221      	movs	r2, #33	; 0x21
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2240      	movs	r2, #64	; 0x40
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a3a      	ldr	r2, [r7, #32]
 8003dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4a4d      	ldr	r2, [pc, #308]	; (8003f14 <HAL_I2C_Mem_Write+0x1f0>)
 8003de0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003de2:	88f8      	ldrh	r0, [r7, #6]
 8003de4:	893a      	ldrh	r2, [r7, #8]
 8003de6:	8979      	ldrh	r1, [r7, #10]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	9301      	str	r3, [sp, #4]
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	4603      	mov	r3, r0
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 faf8 	bl	80043e8 <I2C_RequestMemoryWrite>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d052      	beq.n	8003ea4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e081      	b.n	8003f06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 fd42 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00d      	beq.n	8003e2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d107      	bne.n	8003e2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e06b      	b.n	8003f06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d11b      	bne.n	8003ea4 <HAL_I2C_Mem_Write+0x180>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d017      	beq.n	8003ea4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	781a      	ldrb	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1aa      	bne.n	8003e02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 fd2e 	bl	8004912 <I2C_WaitOnBTFFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00d      	beq.n	8003ed8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d107      	bne.n	8003ed4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e016      	b.n	8003f06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e000      	b.n	8003f06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
  }
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	00100002 	.word	0x00100002
 8003f14:	ffff0000 	.word	0xffff0000

08003f18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08c      	sub	sp, #48	; 0x30
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	4608      	mov	r0, r1
 8003f22:	4611      	mov	r1, r2
 8003f24:	461a      	mov	r2, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	817b      	strh	r3, [r7, #10]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	813b      	strh	r3, [r7, #8]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f36:	f7ff fad9 	bl	80034ec <HAL_GetTick>
 8003f3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	f040 8244 	bne.w	80043d2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	2319      	movs	r3, #25
 8003f50:	2201      	movs	r2, #1
 8003f52:	4982      	ldr	r1, [pc, #520]	; (800415c <HAL_I2C_Mem_Read+0x244>)
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fbc5 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003f60:	2302      	movs	r3, #2
 8003f62:	e237      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_I2C_Mem_Read+0x5a>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e230      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d007      	beq.n	8003f98 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2222      	movs	r2, #34	; 0x22
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2240      	movs	r2, #64	; 0x40
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a62      	ldr	r2, [pc, #392]	; (8004160 <HAL_I2C_Mem_Read+0x248>)
 8003fd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fda:	88f8      	ldrh	r0, [r7, #6]
 8003fdc:	893a      	ldrh	r2, [r7, #8]
 8003fde:	8979      	ldrh	r1, [r7, #10]
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	4603      	mov	r3, r0
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 fa92 	bl	8004514 <I2C_RequestMemoryRead>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e1ec      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d113      	bne.n	800402a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	e1c0      	b.n	80043ac <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	2b01      	cmp	r3, #1
 8004030:	d11e      	bne.n	8004070 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004040:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004042:	b672      	cpsid	i
}
 8004044:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004046:	2300      	movs	r3, #0
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800406c:	b662      	cpsie	i
}
 800406e:	e035      	b.n	80040dc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	2b02      	cmp	r3, #2
 8004076:	d11e      	bne.n	80040b6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004086:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004088:	b672      	cpsid	i
}
 800408a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040b2:	b662      	cpsie	i
}
 80040b4:	e012      	b.n	80040dc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040c4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c6:	2300      	movs	r3, #0
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80040dc:	e166      	b.n	80043ac <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	f200 811f 	bhi.w	8004326 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d123      	bne.n	8004138 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fc4d 	bl	8004994 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e167      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004136:	e139      	b.n	80043ac <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413c:	2b02      	cmp	r3, #2
 800413e:	d152      	bne.n	80041e6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	2200      	movs	r2, #0
 8004148:	4906      	ldr	r1, [pc, #24]	; (8004164 <HAL_I2C_Mem_Read+0x24c>)
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 faca 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e13c      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
 800415a:	bf00      	nop
 800415c:	00100002 	.word	0x00100002
 8004160:	ffff0000 	.word	0xffff0000
 8004164:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004168:	b672      	cpsid	i
}
 800416a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041ae:	b662      	cpsie	i
}
 80041b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041e4:	e0e2      	b.n	80043ac <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	2200      	movs	r2, #0
 80041ee:	497b      	ldr	r1, [pc, #492]	; (80043dc <HAL_I2C_Mem_Read+0x4c4>)
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fa77 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0e9      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004210:	b672      	cpsid	i
}
 8004212:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004246:	4b66      	ldr	r3, [pc, #408]	; (80043e0 <HAL_I2C_Mem_Read+0x4c8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	08db      	lsrs	r3, r3, #3
 800424c:	4a65      	ldr	r2, [pc, #404]	; (80043e4 <HAL_I2C_Mem_Read+0x4cc>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	0a1a      	lsrs	r2, r3, #8
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	00da      	lsls	r2, r3, #3
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	3b01      	subs	r3, #1
 8004264:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d118      	bne.n	800429e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	f043 0220 	orr.w	r2, r3, #32
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800428e:	b662      	cpsie	i
}
 8004290:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e09a      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d1d9      	bne.n	8004260 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042ee:	b662      	cpsie	i
}
 80042f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004324:	e042      	b.n	80043ac <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004328:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 fb32 	bl	8004994 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e04c      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b04      	cmp	r3, #4
 8004378:	d118      	bne.n	80043ac <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f47f ae94 	bne.w	80040de <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e000      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
  }
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3728      	adds	r7, #40	; 0x28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	00010004 	.word	0x00010004
 80043e0:	20000010 	.word	0x20000010
 80043e4:	14f8b589 	.word	0x14f8b589

080043e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	4608      	mov	r0, r1
 80043f2:	4611      	mov	r1, r2
 80043f4:	461a      	mov	r2, r3
 80043f6:	4603      	mov	r3, r0
 80043f8:	817b      	strh	r3, [r7, #10]
 80043fa:	460b      	mov	r3, r1
 80043fc:	813b      	strh	r3, [r7, #8]
 80043fe:	4613      	mov	r3, r2
 8004400:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004410:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	2200      	movs	r2, #0
 800441a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f960 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004438:	d103      	bne.n	8004442 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e05f      	b.n	8004506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004446:	897b      	ldrh	r3, [r7, #10]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004454:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	6a3a      	ldr	r2, [r7, #32]
 800445a:	492d      	ldr	r1, [pc, #180]	; (8004510 <I2C_RequestMemoryWrite+0x128>)
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f998 	bl	8004792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e04c      	b.n	8004506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004484:	6a39      	ldr	r1, [r7, #32]
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fa02 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00d      	beq.n	80044ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	2b04      	cmp	r3, #4
 8004498:	d107      	bne.n	80044aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e02b      	b.n	8004506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d105      	bne.n	80044c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044b4:	893b      	ldrh	r3, [r7, #8]
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	611a      	str	r2, [r3, #16]
 80044be:	e021      	b.n	8004504 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044c0:	893b      	ldrh	r3, [r7, #8]
 80044c2:	0a1b      	lsrs	r3, r3, #8
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d0:	6a39      	ldr	r1, [r7, #32]
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f9dc 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00d      	beq.n	80044fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d107      	bne.n	80044f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e005      	b.n	8004506 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044fa:	893b      	ldrh	r3, [r7, #8]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	00010002 	.word	0x00010002

08004514 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	4608      	mov	r0, r1
 800451e:	4611      	mov	r1, r2
 8004520:	461a      	mov	r2, r3
 8004522:	4603      	mov	r3, r0
 8004524:	817b      	strh	r3, [r7, #10]
 8004526:	460b      	mov	r3, r1
 8004528:	813b      	strh	r3, [r7, #8]
 800452a:	4613      	mov	r3, r2
 800452c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800453c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800454c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	2200      	movs	r2, #0
 8004556:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f8c2 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00d      	beq.n	8004582 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004574:	d103      	bne.n	800457e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e0aa      	b.n	80046d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004582:	897b      	ldrh	r3, [r7, #10]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004590:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	6a3a      	ldr	r2, [r7, #32]
 8004596:	4952      	ldr	r1, [pc, #328]	; (80046e0 <I2C_RequestMemoryRead+0x1cc>)
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f8fa 	bl	8004792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e097      	b.n	80046d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c0:	6a39      	ldr	r1, [r7, #32]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f964 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00d      	beq.n	80045ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d107      	bne.n	80045e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e076      	b.n	80046d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d105      	bne.n	80045fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045f0:	893b      	ldrh	r3, [r7, #8]
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	611a      	str	r2, [r3, #16]
 80045fa:	e021      	b.n	8004640 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045fc:	893b      	ldrh	r3, [r7, #8]
 80045fe:	0a1b      	lsrs	r3, r3, #8
 8004600:	b29b      	uxth	r3, r3
 8004602:	b2da      	uxtb	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800460a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460c:	6a39      	ldr	r1, [r7, #32]
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f93e 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00d      	beq.n	8004636 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2b04      	cmp	r3, #4
 8004620:	d107      	bne.n	8004632 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004630:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e050      	b.n	80046d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004636:	893b      	ldrh	r3, [r7, #8]
 8004638:	b2da      	uxtb	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004642:	6a39      	ldr	r1, [r7, #32]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f923 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00d      	beq.n	800466c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	2b04      	cmp	r3, #4
 8004656:	d107      	bne.n	8004668 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004666:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e035      	b.n	80046d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800467a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	2200      	movs	r2, #0
 8004684:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f82b 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00d      	beq.n	80046b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a2:	d103      	bne.n	80046ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e013      	b.n	80046d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046b0:	897b      	ldrh	r3, [r7, #10]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	6a3a      	ldr	r2, [r7, #32]
 80046c4:	4906      	ldr	r1, [pc, #24]	; (80046e0 <I2C_RequestMemoryRead+0x1cc>)
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f863 	bl	8004792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	00010002 	.word	0x00010002

080046e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046f4:	e025      	b.n	8004742 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fc:	d021      	beq.n	8004742 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fe:	f7fe fef5 	bl	80034ec <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d302      	bcc.n	8004714 <I2C_WaitOnFlagUntilTimeout+0x30>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d116      	bne.n	8004742 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f043 0220 	orr.w	r2, r3, #32
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e023      	b.n	800478a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	0c1b      	lsrs	r3, r3, #16
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d10d      	bne.n	8004768 <I2C_WaitOnFlagUntilTimeout+0x84>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	43da      	mvns	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4013      	ands	r3, r2
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	bf0c      	ite	eq
 800475e:	2301      	moveq	r3, #1
 8004760:	2300      	movne	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	e00c      	b.n	8004782 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	43da      	mvns	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4013      	ands	r3, r2
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	429a      	cmp	r2, r3
 8004786:	d0b6      	beq.n	80046f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047a0:	e051      	b.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b0:	d123      	bne.n	80047fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f043 0204 	orr.w	r2, r3, #4
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e046      	b.n	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d021      	beq.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004802:	f7fe fe73 	bl	80034ec <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	429a      	cmp	r2, r3
 8004810:	d302      	bcc.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d116      	bne.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f043 0220 	orr.w	r2, r3, #32
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e020      	b.n	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d10c      	bne.n	800486a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	43da      	mvns	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4013      	ands	r3, r2
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	bf14      	ite	ne
 8004862:	2301      	movne	r3, #1
 8004864:	2300      	moveq	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	e00b      	b.n	8004882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	43da      	mvns	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4013      	ands	r3, r2
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	bf14      	ite	ne
 800487c:	2301      	movne	r3, #1
 800487e:	2300      	moveq	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d18d      	bne.n	80047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800489c:	e02d      	b.n	80048fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f8ce 	bl	8004a40 <I2C_IsAcknowledgeFailed>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e02d      	b.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d021      	beq.n	80048fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b6:	f7fe fe19 	bl	80034ec <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d116      	bne.n	80048fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e007      	b.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d1ca      	bne.n	800489e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800491e:	e02d      	b.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f88d 	bl	8004a40 <I2C_IsAcknowledgeFailed>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e02d      	b.n	800498c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004936:	d021      	beq.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004938:	f7fe fdd8 	bl	80034ec <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	429a      	cmp	r2, r3
 8004946:	d302      	bcc.n	800494e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d116      	bne.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	f043 0220 	orr.w	r2, r3, #32
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e007      	b.n	800498c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b04      	cmp	r3, #4
 8004988:	d1ca      	bne.n	8004920 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049a0:	e042      	b.n	8004a28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b10      	cmp	r3, #16
 80049ae:	d119      	bne.n	80049e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0210 	mvn.w	r2, #16
 80049b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e029      	b.n	8004a38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e4:	f7fe fd82 	bl	80034ec <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d302      	bcc.n	80049fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d116      	bne.n	8004a28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	f043 0220 	orr.w	r2, r3, #32
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e007      	b.n	8004a38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b40      	cmp	r3, #64	; 0x40
 8004a34:	d1b5      	bne.n	80049a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a56:	d11b      	bne.n	8004a90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	f043 0204 	orr.w	r2, r3, #4
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a9e:	b08b      	sub	sp, #44	; 0x2c
 8004aa0:	af06      	add	r7, sp, #24
 8004aa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e0fd      	b.n	8004caa <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f009 ffda 	bl	800ea7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2203      	movs	r2, #3
 8004acc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f002 fe7f 	bl	80077d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	687e      	ldr	r6, [r7, #4]
 8004ae2:	466d      	mov	r5, sp
 8004ae4:	f106 0410 	add.w	r4, r6, #16
 8004ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	602b      	str	r3, [r5, #0]
 8004af0:	1d33      	adds	r3, r6, #4
 8004af2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004af4:	6838      	ldr	r0, [r7, #0]
 8004af6:	f002 fe49 	bl	800778c <USB_CoreInit>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0ce      	b.n	8004caa <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2100      	movs	r1, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f002 fe7a 	bl	800780c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	73fb      	strb	r3, [r7, #15]
 8004b1c:	e04c      	b.n	8004bb8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	440b      	add	r3, r1
 8004b2e:	3301      	adds	r3, #1
 8004b30:	2201      	movs	r2, #1
 8004b32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	440b      	add	r3, r1
 8004b44:	7bfa      	ldrb	r2, [r7, #15]
 8004b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b48:	7bfa      	ldrb	r2, [r7, #15]
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	b298      	uxth	r0, r3
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	440b      	add	r3, r1
 8004b5a:	3336      	adds	r3, #54	; 0x36
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	440b      	add	r3, r1
 8004b70:	3303      	adds	r3, #3
 8004b72:	2200      	movs	r2, #0
 8004b74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b76:	7bfa      	ldrb	r2, [r7, #15]
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	440b      	add	r3, r1
 8004b84:	3338      	adds	r3, #56	; 0x38
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b8a:	7bfa      	ldrb	r2, [r7, #15]
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	440b      	add	r3, r1
 8004b98:	333c      	adds	r3, #60	; 0x3c
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	440b      	add	r3, r1
 8004bac:	3340      	adds	r3, #64	; 0x40
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
 8004bb8:	7bfa      	ldrb	r2, [r7, #15]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d3ad      	bcc.n	8004b1e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	73fb      	strb	r3, [r7, #15]
 8004bc6:	e044      	b.n	8004c52 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bc8:	7bfa      	ldrb	r2, [r7, #15]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	440b      	add	r3, r1
 8004bd6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bde:	7bfa      	ldrb	r2, [r7, #15]
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	4613      	mov	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	440b      	add	r3, r1
 8004bec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bf0:	7bfa      	ldrb	r2, [r7, #15]
 8004bf2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bf4:	7bfa      	ldrb	r2, [r7, #15]
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	440b      	add	r3, r1
 8004c02:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004c06:	2200      	movs	r2, #0
 8004c08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c0a:	7bfa      	ldrb	r2, [r7, #15]
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	440b      	add	r3, r1
 8004c18:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c20:	7bfa      	ldrb	r2, [r7, #15]
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	440b      	add	r3, r1
 8004c2e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c36:	7bfa      	ldrb	r2, [r7, #15]
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	440b      	add	r3, r1
 8004c44:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	73fb      	strb	r3, [r7, #15]
 8004c52:	7bfa      	ldrb	r2, [r7, #15]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d3b5      	bcc.n	8004bc8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	603b      	str	r3, [r7, #0]
 8004c62:	687e      	ldr	r6, [r7, #4]
 8004c64:	466d      	mov	r5, sp
 8004c66:	f106 0410 	add.w	r4, r6, #16
 8004c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	602b      	str	r3, [r5, #0]
 8004c72:	1d33      	adds	r3, r6, #4
 8004c74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c76:	6838      	ldr	r0, [r7, #0]
 8004c78:	f002 fdd4 	bl	8007824 <USB_DevInit>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2202      	movs	r2, #2
 8004c86:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e00d      	b.n	8004caa <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f004 ff45 	bl	8009b32 <USB_DevDisconnect>

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cb2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_PCD_Start+0x16>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e016      	b.n	8004cf6 <HAL_PCD_Start+0x44>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f002 fd69 	bl	80077ac <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004cda:	2101      	movs	r1, #1
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f00a f940 	bl	800ef62 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f004 ff19 	bl	8009b1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b088      	sub	sp, #32
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f004 ff1b 	bl	8009b46 <USB_ReadInterrupts>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1a:	d102      	bne.n	8004d22 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fb61 	bl	80053e4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f004 ff0d 	bl	8009b46 <USB_ReadInterrupts>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d36:	d112      	bne.n	8004d5e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4a:	b292      	uxth	r2, r2
 8004d4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f009 ff0e 	bl	800eb72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004d56:	2100      	movs	r1, #0
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f925 	bl	8004fa8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f004 feef 	bl	8009b46 <USB_ReadInterrupts>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d72:	d10b      	bne.n	8004d8c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d86:	b292      	uxth	r2, r2
 8004d88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f004 fed8 	bl	8009b46 <USB_ReadInterrupts>
 8004d96:	4603      	mov	r3, r0
 8004d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da0:	d10b      	bne.n	8004dba <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004db4:	b292      	uxth	r2, r2
 8004db6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f004 fec1 	bl	8009b46 <USB_ReadInterrupts>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dce:	d126      	bne.n	8004e1e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0204 	bic.w	r2, r2, #4
 8004de2:	b292      	uxth	r2, r2
 8004de4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0208 	bic.w	r2, r2, #8
 8004dfa:	b292      	uxth	r2, r2
 8004dfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f009 feef 	bl	800ebe4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e18:	b292      	uxth	r2, r2
 8004e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f004 fe8f 	bl	8009b46 <USB_ReadInterrupts>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e32:	f040 8084 	bne.w	8004f3e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004e36:	2300      	movs	r3, #0
 8004e38:	77fb      	strb	r3, [r7, #31]
 8004e3a:	e011      	b.n	8004e60 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	7ffb      	ldrb	r3, [r7, #31]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	7ffb      	ldrb	r3, [r7, #31]
 8004e4a:	8812      	ldrh	r2, [r2, #0]
 8004e4c:	b292      	uxth	r2, r2
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	f107 0120 	add.w	r1, r7, #32
 8004e54:	440b      	add	r3, r1
 8004e56:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004e5a:	7ffb      	ldrb	r3, [r7, #31]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	77fb      	strb	r3, [r7, #31]
 8004e60:	7ffb      	ldrb	r3, [r7, #31]
 8004e62:	2b07      	cmp	r3, #7
 8004e64:	d9ea      	bls.n	8004e3c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0201 	orr.w	r2, r2, #1
 8004e78:	b292      	uxth	r2, r2
 8004e7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	b292      	uxth	r2, r2
 8004e92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004e96:	bf00      	nop
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f6      	beq.n	8004e98 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ebc:	b292      	uxth	r2, r2
 8004ebe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	77fb      	strb	r3, [r7, #31]
 8004ec6:	e010      	b.n	8004eea <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004ec8:	7ffb      	ldrb	r3, [r7, #31]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6812      	ldr	r2, [r2, #0]
 8004ece:	4611      	mov	r1, r2
 8004ed0:	7ffa      	ldrb	r2, [r7, #31]
 8004ed2:	0092      	lsls	r2, r2, #2
 8004ed4:	440a      	add	r2, r1
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	f107 0120 	add.w	r1, r7, #32
 8004edc:	440b      	add	r3, r1
 8004ede:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004ee2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004ee4:	7ffb      	ldrb	r3, [r7, #31]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	7ffb      	ldrb	r3, [r7, #31]
 8004eec:	2b07      	cmp	r3, #7
 8004eee:	d9eb      	bls.n	8004ec8 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0208 	orr.w	r2, r2, #8
 8004f02:	b292      	uxth	r2, r2
 8004f04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f1a:	b292      	uxth	r2, r2
 8004f1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0204 	orr.w	r2, r2, #4
 8004f32:	b292      	uxth	r2, r2
 8004f34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f009 fe39 	bl	800ebb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f004 fdff 	bl	8009b46 <USB_ReadInterrupts>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f52:	d10e      	bne.n	8004f72 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f66:	b292      	uxth	r2, r2
 8004f68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f009 fdf2 	bl	800eb56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f004 fde5 	bl	8009b46 <USB_ReadInterrupts>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f86:	d10b      	bne.n	8004fa0 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f9a:	b292      	uxth	r2, r2
 8004f9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	3720      	adds	r7, #32
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_PCD_SetAddress+0x1a>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e013      	b.n	8004fea <HAL_PCD_SetAddress+0x42>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	78fa      	ldrb	r2, [r7, #3]
 8004fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	78fa      	ldrb	r2, [r7, #3]
 8004fd8:	4611      	mov	r1, r2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f004 fd8c 	bl	8009af8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	4608      	mov	r0, r1
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	461a      	mov	r2, r3
 8005000:	4603      	mov	r3, r0
 8005002:	70fb      	strb	r3, [r7, #3]
 8005004:	460b      	mov	r3, r1
 8005006:	803b      	strh	r3, [r7, #0]
 8005008:	4613      	mov	r3, r2
 800500a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005014:	2b00      	cmp	r3, #0
 8005016:	da0e      	bge.n	8005036 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	4413      	add	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	705a      	strb	r2, [r3, #1]
 8005034:	e00e      	b.n	8005054 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	f003 0207 	and.w	r2, r3, #7
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	4413      	add	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005054:	78fb      	ldrb	r3, [r7, #3]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	b2da      	uxtb	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005060:	883a      	ldrh	r2, [r7, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	78ba      	ldrb	r2, [r7, #2]
 800506a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	785b      	ldrb	r3, [r3, #1]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d004      	beq.n	800507e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800507e:	78bb      	ldrb	r3, [r7, #2]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d102      	bne.n	800508a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_PCD_EP_Open+0xa6>
 8005094:	2302      	movs	r3, #2
 8005096:	e00e      	b.n	80050b6 <HAL_PCD_EP_Open+0xc4>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68f9      	ldr	r1, [r7, #12]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f002 fbdc 	bl	8007864 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80050b4:	7afb      	ldrb	r3, [r7, #11]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	460b      	mov	r3, r1
 80050c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	da0e      	bge.n	80050f0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	4613      	mov	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	4413      	add	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	705a      	strb	r2, [r3, #1]
 80050ee:	e00e      	b.n	800510e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	f003 0207 	and.w	r2, r3, #7
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800510e:	78fb      	ldrb	r3, [r7, #3]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	b2da      	uxtb	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_PCD_EP_Close+0x6a>
 8005124:	2302      	movs	r3, #2
 8005126:	e00e      	b.n	8005146 <HAL_PCD_EP_Close+0x88>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68f9      	ldr	r1, [r7, #12]
 8005136:	4618      	mov	r0, r3
 8005138:	f002 fefe 	bl	8007f38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b086      	sub	sp, #24
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
 800515a:	460b      	mov	r3, r1
 800515c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800515e:	7afb      	ldrb	r3, [r7, #11]
 8005160:	f003 0207 	and.w	r2, r3, #7
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2200      	movs	r2, #0
 8005186:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2200      	movs	r2, #0
 800518c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800518e:	7afb      	ldrb	r3, [r7, #11]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	b2da      	uxtb	r2, r3
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800519a:	7afb      	ldrb	r3, [r7, #11]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6979      	ldr	r1, [r7, #20]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f003 f8b0 	bl	8008310 <USB_EPStartXfer>
 80051b0:	e005      	b.n	80051be <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6979      	ldr	r1, [r7, #20]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f003 f8a9 	bl	8008310 <USB_EPStartXfer>
  }

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	f003 0207 	and.w	r2, r3, #7
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	440b      	add	r3, r1
 80051e6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80051ea:	681b      	ldr	r3, [r3, #0]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b086      	sub	sp, #24
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
 8005202:	460b      	mov	r3, r1
 8005204:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005206:	7afb      	ldrb	r3, [r7, #11]
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2200      	movs	r2, #0
 800523a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2201      	movs	r2, #1
 8005240:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005242:	7afb      	ldrb	r3, [r7, #11]
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	b2da      	uxtb	r2, r3
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800524e:	7afb      	ldrb	r3, [r7, #11]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	2b00      	cmp	r3, #0
 8005256:	d106      	bne.n	8005266 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6979      	ldr	r1, [r7, #20]
 800525e:	4618      	mov	r0, r3
 8005260:	f003 f856 	bl	8008310 <USB_EPStartXfer>
 8005264:	e005      	b.n	8005272 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6979      	ldr	r1, [r7, #20]
 800526c:	4618      	mov	r0, r3
 800526e:	f003 f84f 	bl	8008310 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	f003 0207 	and.w	r2, r3, #7
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	429a      	cmp	r2, r3
 8005294:	d901      	bls.n	800529a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e04c      	b.n	8005334 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800529a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	da0e      	bge.n	80052c0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052a2:	78fb      	ldrb	r3, [r7, #3]
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	4413      	add	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	705a      	strb	r2, [r3, #1]
 80052be:	e00c      	b.n	80052da <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80052c0:	78fa      	ldrb	r2, [r7, #3]
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	4413      	add	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_PCD_EP_SetStall+0x7e>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e01c      	b.n	8005334 <HAL_PCD_EP_SetStall+0xb8>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68f9      	ldr	r1, [r7, #12]
 8005308:	4618      	mov	r0, r3
 800530a:	f004 faf8 	bl	80098fe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800530e:	78fb      	ldrb	r3, [r7, #3]
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	2b00      	cmp	r3, #0
 8005316:	d108      	bne.n	800532a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005322:	4619      	mov	r1, r3
 8005324:	4610      	mov	r0, r2
 8005326:	f004 fc1d 	bl	8009b64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	f003 020f 	and.w	r2, r3, #15
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	429a      	cmp	r2, r3
 8005354:	d901      	bls.n	800535a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e040      	b.n	80053dc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800535a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800535e:	2b00      	cmp	r3, #0
 8005360:	da0e      	bge.n	8005380 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	4413      	add	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2201      	movs	r2, #1
 800537c:	705a      	strb	r2, [r3, #1]
 800537e:	e00e      	b.n	800539e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005380:	78fb      	ldrb	r3, [r7, #3]
 8005382:	f003 0207 	and.w	r2, r3, #7
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	4413      	add	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_PCD_EP_ClrStall+0x82>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e00e      	b.n	80053dc <HAL_PCD_EP_ClrStall+0xa0>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68f9      	ldr	r1, [r7, #12]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f004 fae6 	bl	800999e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08e      	sub	sp, #56	; 0x38
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80053ec:	e2ec      	b.n	80059c8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053f6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80053f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005404:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005408:	2b00      	cmp	r3, #0
 800540a:	f040 8161 	bne.w	80056d0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800540e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b00      	cmp	r3, #0
 8005416:	d152      	bne.n	80054be <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005428:	81fb      	strh	r3, [r7, #14]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	89fb      	ldrh	r3, [r7, #14]
 8005430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005438:	b29b      	uxth	r3, r3
 800543a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3328      	adds	r3, #40	; 0x28
 8005440:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544a:	b29b      	uxth	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	4413      	add	r3, r2
 8005456:	3302      	adds	r3, #2
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	695a      	ldr	r2, [r3, #20]
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	441a      	add	r2, r3
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800547c:	2100      	movs	r1, #0
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f009 fb4f 	bl	800eb22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 829b 	beq.w	80059c8 <PCD_EP_ISR_Handler+0x5e4>
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f040 8296 	bne.w	80059c8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	b292      	uxth	r2, r2
 80054b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80054bc:	e284      	b.n	80059c8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80054ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d034      	beq.n	8005542 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	461a      	mov	r2, r3
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	4413      	add	r3, r2
 80054ec:	3306      	adds	r3, #6
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005516:	b29b      	uxth	r3, r3
 8005518:	f004 fb74 	bl	8009c04 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	b29a      	uxth	r2, r3
 8005524:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005528:	4013      	ands	r3, r2
 800552a:	823b      	strh	r3, [r7, #16]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	8a3a      	ldrh	r2, [r7, #16]
 8005532:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005536:	b292      	uxth	r2, r2
 8005538:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f009 fac4 	bl	800eac8 <HAL_PCD_SetupStageCallback>
 8005540:	e242      	b.n	80059c8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005542:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005546:	2b00      	cmp	r3, #0
 8005548:	f280 823e 	bge.w	80059c8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29a      	uxth	r2, r3
 8005554:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005558:	4013      	ands	r3, r2
 800555a:	83bb      	strh	r3, [r7, #28]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	8bba      	ldrh	r2, [r7, #28]
 8005562:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005566:	b292      	uxth	r2, r2
 8005568:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005572:	b29b      	uxth	r3, r3
 8005574:	461a      	mov	r2, r3
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4413      	add	r3, r2
 800557e:	3306      	adds	r3, #6
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6812      	ldr	r2, [r2, #0]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d019      	beq.n	80055d2 <PCD_EP_ISR_Handler+0x1ee>
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d015      	beq.n	80055d2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	6959      	ldr	r1, [r3, #20]
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f004 fb24 	bl	8009c04 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	695a      	ldr	r2, [r3, #20]
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	441a      	add	r2, r3
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80055ca:	2100      	movs	r1, #0
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f009 fa8d 	bl	800eaec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f040 81f2 	bne.w	80059c8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	4413      	add	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d112      	bne.n	8005632 <PCD_EP_ISR_Handler+0x24e>
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	b29b      	uxth	r3, r3
 8005612:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005616:	b29a      	uxth	r2, r3
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	801a      	strh	r2, [r3, #0]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800562a:	b29a      	uxth	r2, r3
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	801a      	strh	r2, [r3, #0]
 8005630:	e02f      	b.n	8005692 <PCD_EP_ISR_Handler+0x2ae>
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	2b3e      	cmp	r3, #62	; 0x3e
 8005638:	d813      	bhi.n	8005662 <PCD_EP_ISR_Handler+0x27e>
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	085b      	lsrs	r3, r3, #1
 8005640:	633b      	str	r3, [r7, #48]	; 0x30
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <PCD_EP_ISR_Handler+0x270>
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	3301      	adds	r3, #1
 8005652:	633b      	str	r3, [r7, #48]	; 0x30
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	b29b      	uxth	r3, r3
 8005658:	029b      	lsls	r3, r3, #10
 800565a:	b29a      	uxth	r2, r3
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	e017      	b.n	8005692 <PCD_EP_ISR_Handler+0x2ae>
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	633b      	str	r3, [r7, #48]	; 0x30
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 031f 	and.w	r3, r3, #31
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <PCD_EP_ISR_Handler+0x298>
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	3b01      	subs	r3, #1
 800567a:	633b      	str	r3, [r7, #48]	; 0x30
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	b29b      	uxth	r3, r3
 8005680:	029b      	lsls	r3, r3, #10
 8005682:	b29b      	uxth	r3, r3
 8005684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568c:	b29a      	uxth	r2, r3
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	827b      	strh	r3, [r7, #18]
 80056a4:	8a7b      	ldrh	r3, [r7, #18]
 80056a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056aa:	827b      	strh	r3, [r7, #18]
 80056ac:	8a7b      	ldrh	r3, [r7, #18]
 80056ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056b2:	827b      	strh	r3, [r7, #18]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	8a7b      	ldrh	r3, [r7, #18]
 80056ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	8013      	strh	r3, [r2, #0]
 80056ce:	e17b      	b.n	80059c8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80056e2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f280 80ea 	bge.w	80058c0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005702:	4013      	ands	r3, r2
 8005704:	853b      	strh	r3, [r7, #40]	; 0x28
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005716:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800571a:	b292      	uxth	r2, r2
 800571c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800571e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	4413      	add	r3, r2
 8005732:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	7b1b      	ldrb	r3, [r3, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d122      	bne.n	8005782 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005744:	b29b      	uxth	r3, r3
 8005746:	461a      	mov	r2, r3
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	4413      	add	r3, r2
 8005750:	3306      	adds	r3, #6
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005764:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005766:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 8087 	beq.w	800587c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6818      	ldr	r0, [r3, #0]
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	6959      	ldr	r1, [r3, #20]
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	88da      	ldrh	r2, [r3, #6]
 800577a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800577c:	f004 fa42 	bl	8009c04 <USB_ReadPMA>
 8005780:	e07c      	b.n	800587c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	78db      	ldrb	r3, [r3, #3]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d108      	bne.n	800579c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800578a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800578c:	461a      	mov	r2, r3
 800578e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f927 	bl	80059e4 <HAL_PCD_EP_DB_Receive>
 8005796:	4603      	mov	r3, r0
 8005798:	86fb      	strh	r3, [r7, #54]	; 0x36
 800579a:	e06f      	b.n	800587c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	461a      	mov	r2, r3
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	441a      	add	r2, r3
 80057c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057d8:	b29b      	uxth	r3, r3
 80057da:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d021      	beq.n	800583a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057fe:	b29b      	uxth	r3, r3
 8005800:	461a      	mov	r2, r3
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	4413      	add	r3, r2
 800580a:	3302      	adds	r3, #2
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6812      	ldr	r2, [r2, #0]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800581e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005820:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005822:	2b00      	cmp	r3, #0
 8005824:	d02a      	beq.n	800587c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	6959      	ldr	r1, [r3, #20]
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	891a      	ldrh	r2, [r3, #8]
 8005832:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005834:	f004 f9e6 	bl	8009c04 <USB_ReadPMA>
 8005838:	e020      	b.n	800587c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005842:	b29b      	uxth	r3, r3
 8005844:	461a      	mov	r2, r3
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	4413      	add	r3, r2
 800584e:	3306      	adds	r3, #6
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005862:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005864:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005866:	2b00      	cmp	r3, #0
 8005868:	d008      	beq.n	800587c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	6959      	ldr	r1, [r3, #20]
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	895a      	ldrh	r2, [r3, #10]
 8005876:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005878:	f004 f9c4 	bl	8009c04 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005882:	441a      	add	r2, r3
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	695a      	ldr	r2, [r3, #20]
 800588c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800588e:	441a      	add	r2, r3
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d004      	beq.n	80058a6 <PCD_EP_ISR_Handler+0x4c2>
 800589c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d206      	bcs.n	80058b4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f009 f91d 	bl	800eaec <HAL_PCD_DataOutStageCallback>
 80058b2:	e005      	b.n	80058c0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058ba:	4618      	mov	r0, r3
 80058bc:	f002 fd28 	bl	8008310 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80058c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80058c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d07e      	beq.n	80059c8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80058ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	4613      	mov	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	4413      	add	r3, r2
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80058f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f8:	843b      	strh	r3, [r7, #32]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	441a      	add	r2, r3
 8005908:	8c3b      	ldrh	r3, [r7, #32]
 800590a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005912:	b29b      	uxth	r3, r3
 8005914:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	78db      	ldrb	r3, [r3, #3]
 800591a:	2b03      	cmp	r3, #3
 800591c:	d00c      	beq.n	8005938 <PCD_EP_ISR_Handler+0x554>
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	78db      	ldrb	r3, [r3, #3]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d008      	beq.n	8005938 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800592a:	2b02      	cmp	r3, #2
 800592c:	d146      	bne.n	80059bc <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800592e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005934:	2b00      	cmp	r3, #0
 8005936:	d141      	bne.n	80059bc <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005940:	b29b      	uxth	r3, r3
 8005942:	461a      	mov	r2, r3
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	4413      	add	r3, r2
 800594c:	3302      	adds	r3, #2
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6812      	ldr	r2, [r2, #0]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005960:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	8bfb      	ldrh	r3, [r7, #30]
 8005968:	429a      	cmp	r2, r3
 800596a:	d906      	bls.n	800597a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	699a      	ldr	r2, [r3, #24]
 8005970:	8bfb      	ldrh	r3, [r7, #30]
 8005972:	1ad2      	subs	r2, r2, r3
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	619a      	str	r2, [r3, #24]
 8005978:	e002      	b.n	8005980 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	2200      	movs	r2, #0
 800597e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f009 f8c7 	bl	800eb22 <HAL_PCD_DataInStageCallback>
 8005994:	e018      	b.n	80059c8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	695a      	ldr	r2, [r3, #20]
 800599a:	8bfb      	ldrh	r3, [r7, #30]
 800599c:	441a      	add	r2, r3
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	69da      	ldr	r2, [r3, #28]
 80059a6:	8bfb      	ldrh	r3, [r7, #30]
 80059a8:	441a      	add	r2, r3
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059b4:	4618      	mov	r0, r3
 80059b6:	f002 fcab 	bl	8008310 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80059ba:	e005      	b.n	80059c8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80059bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80059be:	461a      	mov	r2, r3
 80059c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f91b 	bl	8005bfe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	b21b      	sxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f6ff ad0a 	blt.w	80053ee <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3738      	adds	r7, #56	; 0x38
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	4613      	mov	r3, r2
 80059f0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80059f2:	88fb      	ldrh	r3, [r7, #6]
 80059f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d07e      	beq.n	8005afa <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	4413      	add	r3, r2
 8005a10:	3302      	adds	r3, #2
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	6812      	ldr	r2, [r2, #0]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a24:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	699a      	ldr	r2, [r3, #24]
 8005a2a:	8b7b      	ldrh	r3, [r7, #26]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d306      	bcc.n	8005a3e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	699a      	ldr	r2, [r3, #24]
 8005a34:	8b7b      	ldrh	r3, [r7, #26]
 8005a36:	1ad2      	subs	r2, r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	619a      	str	r2, [r3, #24]
 8005a3c:	e002      	b.n	8005a44 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2200      	movs	r2, #0
 8005a42:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d123      	bne.n	8005a94 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	833b      	strh	r3, [r7, #24]
 8005a68:	8b3b      	ldrh	r3, [r7, #24]
 8005a6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a6e:	833b      	strh	r3, [r7, #24]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	441a      	add	r2, r3
 8005a7e:	8b3b      	ldrh	r3, [r7, #24]
 8005a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a94:	88fb      	ldrh	r3, [r7, #6]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01f      	beq.n	8005ade <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab8:	82fb      	strh	r3, [r7, #22]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	441a      	add	r2, r3
 8005ac8:	8afb      	ldrh	r3, [r7, #22]
 8005aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005ade:	8b7b      	ldrh	r3, [r7, #26]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 8087 	beq.w	8005bf4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6818      	ldr	r0, [r3, #0]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6959      	ldr	r1, [r3, #20]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	891a      	ldrh	r2, [r3, #8]
 8005af2:	8b7b      	ldrh	r3, [r7, #26]
 8005af4:	f004 f886 	bl	8009c04 <USB_ReadPMA>
 8005af8:	e07c      	b.n	8005bf4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	4413      	add	r3, r2
 8005b0e:	3306      	adds	r3, #6
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	6812      	ldr	r2, [r2, #0]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	699a      	ldr	r2, [r3, #24]
 8005b28:	8b7b      	ldrh	r3, [r7, #26]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d306      	bcc.n	8005b3c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	8b7b      	ldrh	r3, [r7, #26]
 8005b34:	1ad2      	subs	r2, r2, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	619a      	str	r2, [r3, #24]
 8005b3a:	e002      	b.n	8005b42 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d123      	bne.n	8005b92 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b64:	83fb      	strh	r3, [r7, #30]
 8005b66:	8bfb      	ldrh	r3, [r7, #30]
 8005b68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b6c:	83fb      	strh	r3, [r7, #30]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	441a      	add	r2, r3
 8005b7c:	8bfb      	ldrh	r3, [r7, #30]
 8005b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005b92:	88fb      	ldrh	r3, [r7, #6]
 8005b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d11f      	bne.n	8005bdc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	83bb      	strh	r3, [r7, #28]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	441a      	add	r2, r3
 8005bc6:	8bbb      	ldrh	r3, [r7, #28]
 8005bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005bdc:	8b7b      	ldrh	r3, [r7, #26]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d008      	beq.n	8005bf4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6959      	ldr	r1, [r3, #20]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	895a      	ldrh	r2, [r3, #10]
 8005bee:	8b7b      	ldrh	r3, [r7, #26]
 8005bf0:	f004 f808 	bl	8009c04 <USB_ReadPMA>
    }
  }

  return count;
 8005bf4:	8b7b      	ldrh	r3, [r7, #26]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3720      	adds	r7, #32
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b0a2      	sub	sp, #136	; 0x88
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005c0c:	88fb      	ldrh	r3, [r7, #6]
 8005c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 81c7 	beq.w	8005fa6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	4413      	add	r3, r2
 8005c2c:	3302      	adds	r3, #2
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	699a      	ldr	r2, [r3, #24]
 8005c48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d907      	bls.n	8005c60 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	699a      	ldr	r2, [r3, #24]
 8005c54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c58:	1ad2      	subs	r2, r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	619a      	str	r2, [r3, #24]
 8005c5e:	e002      	b.n	8005c66 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2200      	movs	r2, #0
 8005c64:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f040 80b9 	bne.w	8005de2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	785b      	ldrb	r3, [r3, #1]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d126      	bne.n	8005cc6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	4413      	add	r3, r2
 8005c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	011a      	lsls	r2, r3, #4
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	4413      	add	r3, r2
 8005c9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	801a      	strh	r2, [r3, #0]
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	801a      	strh	r2, [r3, #0]
 8005cc4:	e01a      	b.n	8005cfc <HAL_PCD_EP_DB_Transmit+0xfe>
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	785b      	ldrb	r3, [r3, #1]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d116      	bne.n	8005cfc <HAL_PCD_EP_DB_Transmit+0xfe>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	461a      	mov	r2, r3
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	4413      	add	r3, r2
 8005ce4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	011a      	lsls	r2, r3, #4
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	4413      	add	r3, r2
 8005cf0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	623b      	str	r3, [r7, #32]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	785b      	ldrb	r3, [r3, #1]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d126      	bne.n	8005d58 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	61bb      	str	r3, [r7, #24]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	4413      	add	r3, r2
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	011a      	lsls	r2, r3, #4
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	801a      	strh	r2, [r3, #0]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	e017      	b.n	8005d88 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	785b      	ldrb	r3, [r3, #1]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d113      	bne.n	8005d88 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	4413      	add	r3, r2
 8005d70:	623b      	str	r3, [r7, #32]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	011a      	lsls	r2, r3, #4
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	2200      	movs	r2, #0
 8005d86:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f008 fec7 	bl	800eb22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d94:	88fb      	ldrh	r3, [r7, #6]
 8005d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 82d4 	beq.w	8006348 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	827b      	strh	r3, [r7, #18]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	441a      	add	r2, r3
 8005dca:	8a7b      	ldrh	r3, [r7, #18]
 8005dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	8013      	strh	r3, [r2, #0]
 8005de0:	e2b2      	b.n	8006348 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d021      	beq.n	8005e30 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e06:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	441a      	add	r2, r3
 8005e18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	f040 8286 	bne.w	8006348 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	695a      	ldr	r2, [r3, #20]
 8005e40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e44:	441a      	add	r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	69da      	ldr	r2, [r3, #28]
 8005e4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e52:	441a      	add	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	6a1a      	ldr	r2, [r3, #32]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d309      	bcc.n	8005e78 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6a1a      	ldr	r2, [r3, #32]
 8005e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e70:	1ad2      	subs	r2, r2, r3
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	621a      	str	r2, [r3, #32]
 8005e76:	e015      	b.n	8005ea4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d107      	bne.n	8005e90 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005e80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005e8e:	e009      	b.n	8005ea4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d155      	bne.n	8005f58 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	4413      	add	r3, r2
 8005ec2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	011a      	lsls	r2, r3, #4
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ecc:	4413      	add	r3, r2
 8005ece:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d112      	bne.n	8005f00 <HAL_PCD_EP_DB_Transmit+0x302>
 8005eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee8:	801a      	strh	r2, [r3, #0]
 8005eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efc:	801a      	strh	r2, [r3, #0]
 8005efe:	e047      	b.n	8005f90 <HAL_PCD_EP_DB_Transmit+0x392>
 8005f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f02:	2b3e      	cmp	r3, #62	; 0x3e
 8005f04:	d811      	bhi.n	8005f2a <HAL_PCD_EP_DB_Transmit+0x32c>
 8005f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f08:	085b      	lsrs	r3, r3, #1
 8005f0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <HAL_PCD_EP_DB_Transmit+0x31e>
 8005f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f18:	3301      	adds	r3, #1
 8005f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	029b      	lsls	r3, r3, #10
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f26:	801a      	strh	r2, [r3, #0]
 8005f28:	e032      	b.n	8005f90 <HAL_PCD_EP_DB_Transmit+0x392>
 8005f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f32:	f003 031f 	and.w	r3, r3, #31
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d102      	bne.n	8005f40 <HAL_PCD_EP_DB_Transmit+0x342>
 8005f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	029b      	lsls	r3, r3, #10
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f54:	801a      	strh	r2, [r3, #0]
 8005f56:	e01b      	b.n	8005f90 <HAL_PCD_EP_DB_Transmit+0x392>
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	785b      	ldrb	r3, [r3, #1]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d117      	bne.n	8005f90 <HAL_PCD_EP_DB_Transmit+0x392>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	643b      	str	r3, [r7, #64]	; 0x40
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	461a      	mov	r2, r3
 8005f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f74:	4413      	add	r3, r2
 8005f76:	643b      	str	r3, [r7, #64]	; 0x40
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	011a      	lsls	r2, r3, #4
 8005f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f80:	4413      	add	r3, r2
 8005f82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	6959      	ldr	r1, [r3, #20]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	891a      	ldrh	r2, [r3, #8]
 8005f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	f003 fdeb 	bl	8009b7a <USB_WritePMA>
 8005fa4:	e1d0      	b.n	8006348 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	4413      	add	r3, r2
 8005fba:	3306      	adds	r3, #6
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	699a      	ldr	r2, [r3, #24]
 8005fd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d307      	bcc.n	8005fee <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005fe6:	1ad2      	subs	r2, r2, r3
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	619a      	str	r2, [r3, #24]
 8005fec:	e002      	b.n	8005ff4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f040 80c4 	bne.w	8006186 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	785b      	ldrb	r3, [r3, #1]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d126      	bne.n	8006054 <HAL_PCD_EP_DB_Transmit+0x456>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006014:	b29b      	uxth	r3, r3
 8006016:	461a      	mov	r2, r3
 8006018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601a:	4413      	add	r3, r2
 800601c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	011a      	lsls	r2, r3, #4
 8006024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006026:	4413      	add	r3, r2
 8006028:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800602c:	66bb      	str	r3, [r7, #104]	; 0x68
 800602e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006038:	b29a      	uxth	r2, r3
 800603a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800603c:	801a      	strh	r2, [r3, #0]
 800603e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604c:	b29a      	uxth	r2, r3
 800604e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006050:	801a      	strh	r2, [r3, #0]
 8006052:	e01a      	b.n	800608a <HAL_PCD_EP_DB_Transmit+0x48c>
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	785b      	ldrb	r3, [r3, #1]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d116      	bne.n	800608a <HAL_PCD_EP_DB_Transmit+0x48c>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	677b      	str	r3, [r7, #116]	; 0x74
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800606a:	b29b      	uxth	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006070:	4413      	add	r3, r2
 8006072:	677b      	str	r3, [r7, #116]	; 0x74
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	011a      	lsls	r2, r3, #4
 800607a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800607c:	4413      	add	r3, r2
 800607e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006082:	673b      	str	r3, [r7, #112]	; 0x70
 8006084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006086:	2200      	movs	r2, #0
 8006088:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d12f      	bne.n	80060f8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	461a      	mov	r2, r3
 80060ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060b0:	4413      	add	r3, r2
 80060b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	011a      	lsls	r2, r3, #4
 80060bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060c0:	4413      	add	r3, r2
 80060c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060dc:	801a      	strh	r2, [r3, #0]
 80060de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060f4:	801a      	strh	r2, [r3, #0]
 80060f6:	e017      	b.n	8006128 <HAL_PCD_EP_DB_Transmit+0x52a>
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	785b      	ldrb	r3, [r3, #1]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d113      	bne.n	8006128 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006108:	b29b      	uxth	r3, r3
 800610a:	461a      	mov	r2, r3
 800610c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800610e:	4413      	add	r3, r2
 8006110:	67bb      	str	r3, [r7, #120]	; 0x78
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	011a      	lsls	r2, r3, #4
 8006118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800611a:	4413      	add	r3, r2
 800611c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006120:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006122:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006124:	2200      	movs	r2, #0
 8006126:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	4619      	mov	r1, r3
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f008 fcf7 	bl	800eb22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006134:	88fb      	ldrh	r3, [r7, #6]
 8006136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800613a:	2b00      	cmp	r3, #0
 800613c:	f040 8104 	bne.w	8006348 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	461a      	mov	r2, r3
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	441a      	add	r2, r3
 800616c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800617c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006180:	b29b      	uxth	r3, r3
 8006182:	8013      	strh	r3, [r2, #0]
 8006184:	e0e0      	b.n	8006348 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006186:	88fb      	ldrh	r3, [r7, #6]
 8006188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d121      	bne.n	80061d4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	461a      	mov	r2, r3
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061aa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	441a      	add	r2, r3
 80061bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80061c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061da:	2b01      	cmp	r3, #1
 80061dc:	f040 80b4 	bne.w	8006348 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	695a      	ldr	r2, [r3, #20]
 80061e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80061e8:	441a      	add	r2, r3
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	69da      	ldr	r2, [r3, #28]
 80061f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80061f6:	441a      	add	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	6a1a      	ldr	r2, [r3, #32]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	429a      	cmp	r2, r3
 8006206:	d309      	bcc.n	800621c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	6a1a      	ldr	r2, [r3, #32]
 8006212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006214:	1ad2      	subs	r2, r2, r3
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	621a      	str	r2, [r3, #32]
 800621a:	e015      	b.n	8006248 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d107      	bne.n	8006234 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8006224:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006228:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006232:	e009      	b.n	8006248 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2200      	movs	r2, #0
 800623e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	667b      	str	r3, [r7, #100]	; 0x64
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	785b      	ldrb	r3, [r3, #1]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d155      	bne.n	8006302 <HAL_PCD_EP_DB_Transmit+0x704>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006264:	b29b      	uxth	r3, r3
 8006266:	461a      	mov	r2, r3
 8006268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800626a:	4413      	add	r3, r2
 800626c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	011a      	lsls	r2, r3, #4
 8006274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006276:	4413      	add	r3, r2
 8006278:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800627c:	65bb      	str	r3, [r7, #88]	; 0x58
 800627e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006280:	2b00      	cmp	r3, #0
 8006282:	d112      	bne.n	80062aa <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	b29b      	uxth	r3, r3
 800628a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800628e:	b29a      	uxth	r2, r3
 8006290:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006292:	801a      	strh	r2, [r3, #0]
 8006294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062a6:	801a      	strh	r2, [r3, #0]
 80062a8:	e044      	b.n	8006334 <HAL_PCD_EP_DB_Transmit+0x736>
 80062aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ac:	2b3e      	cmp	r3, #62	; 0x3e
 80062ae:	d811      	bhi.n	80062d4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80062b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b2:	085b      	lsrs	r3, r3, #1
 80062b4:	657b      	str	r3, [r7, #84]	; 0x54
 80062b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80062c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c2:	3301      	adds	r3, #1
 80062c4:	657b      	str	r3, [r7, #84]	; 0x54
 80062c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	029b      	lsls	r3, r3, #10
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062d0:	801a      	strh	r2, [r3, #0]
 80062d2:	e02f      	b.n	8006334 <HAL_PCD_EP_DB_Transmit+0x736>
 80062d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d6:	095b      	lsrs	r3, r3, #5
 80062d8:	657b      	str	r3, [r7, #84]	; 0x54
 80062da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062dc:	f003 031f 	and.w	r3, r3, #31
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d102      	bne.n	80062ea <HAL_PCD_EP_DB_Transmit+0x6ec>
 80062e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062e6:	3b01      	subs	r3, #1
 80062e8:	657b      	str	r3, [r7, #84]	; 0x54
 80062ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	029b      	lsls	r3, r3, #10
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062fe:	801a      	strh	r2, [r3, #0]
 8006300:	e018      	b.n	8006334 <HAL_PCD_EP_DB_Transmit+0x736>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	785b      	ldrb	r3, [r3, #1]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d114      	bne.n	8006334 <HAL_PCD_EP_DB_Transmit+0x736>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006312:	b29b      	uxth	r3, r3
 8006314:	461a      	mov	r2, r3
 8006316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006318:	4413      	add	r3, r2
 800631a:	667b      	str	r3, [r7, #100]	; 0x64
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	011a      	lsls	r2, r3, #4
 8006322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006324:	4413      	add	r3, r2
 8006326:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800632a:	663b      	str	r3, [r7, #96]	; 0x60
 800632c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800632e:	b29a      	uxth	r2, r3
 8006330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006332:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6818      	ldr	r0, [r3, #0]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	6959      	ldr	r1, [r3, #20]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	895a      	ldrh	r2, [r3, #10]
 8006340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006342:	b29b      	uxth	r3, r3
 8006344:	f003 fc19 	bl	8009b7a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006362:	823b      	strh	r3, [r7, #16]
 8006364:	8a3b      	ldrh	r3, [r7, #16]
 8006366:	f083 0310 	eor.w	r3, r3, #16
 800636a:	823b      	strh	r3, [r7, #16]
 800636c:	8a3b      	ldrh	r3, [r7, #16]
 800636e:	f083 0320 	eor.w	r3, r3, #32
 8006372:	823b      	strh	r3, [r7, #16]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	441a      	add	r2, r3
 8006382:	8a3b      	ldrh	r3, [r7, #16]
 8006384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800638c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006394:	b29b      	uxth	r3, r3
 8006396:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3788      	adds	r7, #136	; 0x88
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b087      	sub	sp, #28
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	607b      	str	r3, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	817b      	strh	r3, [r7, #10]
 80063b0:	4613      	mov	r3, r2
 80063b2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80063b4:	897b      	ldrh	r3, [r7, #10]
 80063b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00b      	beq.n	80063d8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063c0:	897b      	ldrh	r3, [r7, #10]
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	4613      	mov	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	e009      	b.n	80063ec <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80063d8:	897a      	ldrh	r2, [r7, #10]
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4413      	add	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80063ec:	893b      	ldrh	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d107      	bne.n	8006402 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2200      	movs	r2, #0
 80063f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	80da      	strh	r2, [r3, #6]
 8006400:	e00b      	b.n	800641a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2201      	movs	r2, #1
 8006406:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	b29a      	uxth	r2, r3
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	0c1b      	lsrs	r3, r3, #16
 8006414:	b29a      	uxth	r2, r3
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	bc80      	pop	{r7}
 8006424:	4770      	bx	lr
	...

08006428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e26c      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 8087 	beq.w	8006556 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006448:	4b92      	ldr	r3, [pc, #584]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f003 030c 	and.w	r3, r3, #12
 8006450:	2b04      	cmp	r3, #4
 8006452:	d00c      	beq.n	800646e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006454:	4b8f      	ldr	r3, [pc, #572]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f003 030c 	and.w	r3, r3, #12
 800645c:	2b08      	cmp	r3, #8
 800645e:	d112      	bne.n	8006486 <HAL_RCC_OscConfig+0x5e>
 8006460:	4b8c      	ldr	r3, [pc, #560]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800646c:	d10b      	bne.n	8006486 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800646e:	4b89      	ldr	r3, [pc, #548]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d06c      	beq.n	8006554 <HAL_RCC_OscConfig+0x12c>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d168      	bne.n	8006554 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e246      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800648e:	d106      	bne.n	800649e <HAL_RCC_OscConfig+0x76>
 8006490:	4b80      	ldr	r3, [pc, #512]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a7f      	ldr	r2, [pc, #508]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 8006496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	e02e      	b.n	80064fc <HAL_RCC_OscConfig+0xd4>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10c      	bne.n	80064c0 <HAL_RCC_OscConfig+0x98>
 80064a6:	4b7b      	ldr	r3, [pc, #492]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a7a      	ldr	r2, [pc, #488]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80064ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	4b78      	ldr	r3, [pc, #480]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a77      	ldr	r2, [pc, #476]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80064b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	e01d      	b.n	80064fc <HAL_RCC_OscConfig+0xd4>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064c8:	d10c      	bne.n	80064e4 <HAL_RCC_OscConfig+0xbc>
 80064ca:	4b72      	ldr	r3, [pc, #456]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a71      	ldr	r2, [pc, #452]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80064d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	4b6f      	ldr	r3, [pc, #444]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a6e      	ldr	r2, [pc, #440]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80064dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	e00b      	b.n	80064fc <HAL_RCC_OscConfig+0xd4>
 80064e4:	4b6b      	ldr	r3, [pc, #428]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a6a      	ldr	r2, [pc, #424]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80064ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	4b68      	ldr	r3, [pc, #416]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a67      	ldr	r2, [pc, #412]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80064f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d013      	beq.n	800652c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006504:	f7fc fff2 	bl	80034ec <HAL_GetTick>
 8006508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800650a:	e008      	b.n	800651e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800650c:	f7fc ffee 	bl	80034ec <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b64      	cmp	r3, #100	; 0x64
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e1fa      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800651e:	4b5d      	ldr	r3, [pc, #372]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0f0      	beq.n	800650c <HAL_RCC_OscConfig+0xe4>
 800652a:	e014      	b.n	8006556 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652c:	f7fc ffde 	bl	80034ec <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006534:	f7fc ffda 	bl	80034ec <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b64      	cmp	r3, #100	; 0x64
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e1e6      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006546:	4b53      	ldr	r3, [pc, #332]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f0      	bne.n	8006534 <HAL_RCC_OscConfig+0x10c>
 8006552:	e000      	b.n	8006556 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d063      	beq.n	800662a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006562:	4b4c      	ldr	r3, [pc, #304]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f003 030c 	and.w	r3, r3, #12
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00b      	beq.n	8006586 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800656e:	4b49      	ldr	r3, [pc, #292]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f003 030c 	and.w	r3, r3, #12
 8006576:	2b08      	cmp	r3, #8
 8006578:	d11c      	bne.n	80065b4 <HAL_RCC_OscConfig+0x18c>
 800657a:	4b46      	ldr	r3, [pc, #280]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d116      	bne.n	80065b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006586:	4b43      	ldr	r3, [pc, #268]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <HAL_RCC_OscConfig+0x176>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d001      	beq.n	800659e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e1ba      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800659e:	4b3d      	ldr	r3, [pc, #244]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	4939      	ldr	r1, [pc, #228]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065b2:	e03a      	b.n	800662a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d020      	beq.n	80065fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065bc:	4b36      	ldr	r3, [pc, #216]	; (8006698 <HAL_RCC_OscConfig+0x270>)
 80065be:	2201      	movs	r2, #1
 80065c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c2:	f7fc ff93 	bl	80034ec <HAL_GetTick>
 80065c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065ca:	f7fc ff8f 	bl	80034ec <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e19b      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065dc:	4b2d      	ldr	r3, [pc, #180]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0f0      	beq.n	80065ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e8:	4b2a      	ldr	r3, [pc, #168]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	4927      	ldr	r1, [pc, #156]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	600b      	str	r3, [r1, #0]
 80065fc:	e015      	b.n	800662a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065fe:	4b26      	ldr	r3, [pc, #152]	; (8006698 <HAL_RCC_OscConfig+0x270>)
 8006600:	2200      	movs	r2, #0
 8006602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006604:	f7fc ff72 	bl	80034ec <HAL_GetTick>
 8006608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800660a:	e008      	b.n	800661e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800660c:	f7fc ff6e 	bl	80034ec <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d901      	bls.n	800661e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e17a      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800661e:	4b1d      	ldr	r3, [pc, #116]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1f0      	bne.n	800660c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0308 	and.w	r3, r3, #8
 8006632:	2b00      	cmp	r3, #0
 8006634:	d03a      	beq.n	80066ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d019      	beq.n	8006672 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800663e:	4b17      	ldr	r3, [pc, #92]	; (800669c <HAL_RCC_OscConfig+0x274>)
 8006640:	2201      	movs	r2, #1
 8006642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006644:	f7fc ff52 	bl	80034ec <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800664c:	f7fc ff4e 	bl	80034ec <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e15a      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800665e:	4b0d      	ldr	r3, [pc, #52]	; (8006694 <HAL_RCC_OscConfig+0x26c>)
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0f0      	beq.n	800664c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800666a:	2001      	movs	r0, #1
 800666c:	f000 fb0a 	bl	8006c84 <RCC_Delay>
 8006670:	e01c      	b.n	80066ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006672:	4b0a      	ldr	r3, [pc, #40]	; (800669c <HAL_RCC_OscConfig+0x274>)
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006678:	f7fc ff38 	bl	80034ec <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800667e:	e00f      	b.n	80066a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006680:	f7fc ff34 	bl	80034ec <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d908      	bls.n	80066a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e140      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>
 8006692:	bf00      	nop
 8006694:	40021000 	.word	0x40021000
 8006698:	42420000 	.word	0x42420000
 800669c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066a0:	4b9e      	ldr	r3, [pc, #632]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e9      	bne.n	8006680 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 80a6 	beq.w	8006806 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066ba:	2300      	movs	r3, #0
 80066bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066be:	4b97      	ldr	r3, [pc, #604]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10d      	bne.n	80066e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066ca:	4b94      	ldr	r3, [pc, #592]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	4a93      	ldr	r2, [pc, #588]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 80066d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d4:	61d3      	str	r3, [r2, #28]
 80066d6:	4b91      	ldr	r3, [pc, #580]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066de:	60bb      	str	r3, [r7, #8]
 80066e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066e2:	2301      	movs	r3, #1
 80066e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066e6:	4b8e      	ldr	r3, [pc, #568]	; (8006920 <HAL_RCC_OscConfig+0x4f8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d118      	bne.n	8006724 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066f2:	4b8b      	ldr	r3, [pc, #556]	; (8006920 <HAL_RCC_OscConfig+0x4f8>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a8a      	ldr	r2, [pc, #552]	; (8006920 <HAL_RCC_OscConfig+0x4f8>)
 80066f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066fe:	f7fc fef5 	bl	80034ec <HAL_GetTick>
 8006702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006704:	e008      	b.n	8006718 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006706:	f7fc fef1 	bl	80034ec <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	2b64      	cmp	r3, #100	; 0x64
 8006712:	d901      	bls.n	8006718 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e0fd      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006718:	4b81      	ldr	r3, [pc, #516]	; (8006920 <HAL_RCC_OscConfig+0x4f8>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006720:	2b00      	cmp	r3, #0
 8006722:	d0f0      	beq.n	8006706 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d106      	bne.n	800673a <HAL_RCC_OscConfig+0x312>
 800672c:	4b7b      	ldr	r3, [pc, #492]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	4a7a      	ldr	r2, [pc, #488]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 8006732:	f043 0301 	orr.w	r3, r3, #1
 8006736:	6213      	str	r3, [r2, #32]
 8006738:	e02d      	b.n	8006796 <HAL_RCC_OscConfig+0x36e>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10c      	bne.n	800675c <HAL_RCC_OscConfig+0x334>
 8006742:	4b76      	ldr	r3, [pc, #472]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	4a75      	ldr	r2, [pc, #468]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 8006748:	f023 0301 	bic.w	r3, r3, #1
 800674c:	6213      	str	r3, [r2, #32]
 800674e:	4b73      	ldr	r3, [pc, #460]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	4a72      	ldr	r2, [pc, #456]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 8006754:	f023 0304 	bic.w	r3, r3, #4
 8006758:	6213      	str	r3, [r2, #32]
 800675a:	e01c      	b.n	8006796 <HAL_RCC_OscConfig+0x36e>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	2b05      	cmp	r3, #5
 8006762:	d10c      	bne.n	800677e <HAL_RCC_OscConfig+0x356>
 8006764:	4b6d      	ldr	r3, [pc, #436]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	4a6c      	ldr	r2, [pc, #432]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 800676a:	f043 0304 	orr.w	r3, r3, #4
 800676e:	6213      	str	r3, [r2, #32]
 8006770:	4b6a      	ldr	r3, [pc, #424]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	4a69      	ldr	r2, [pc, #420]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 8006776:	f043 0301 	orr.w	r3, r3, #1
 800677a:	6213      	str	r3, [r2, #32]
 800677c:	e00b      	b.n	8006796 <HAL_RCC_OscConfig+0x36e>
 800677e:	4b67      	ldr	r3, [pc, #412]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	4a66      	ldr	r2, [pc, #408]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 8006784:	f023 0301 	bic.w	r3, r3, #1
 8006788:	6213      	str	r3, [r2, #32]
 800678a:	4b64      	ldr	r3, [pc, #400]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	4a63      	ldr	r2, [pc, #396]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 8006790:	f023 0304 	bic.w	r3, r3, #4
 8006794:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d015      	beq.n	80067ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800679e:	f7fc fea5 	bl	80034ec <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067a4:	e00a      	b.n	80067bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a6:	f7fc fea1 	bl	80034ec <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e0ab      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067bc:	4b57      	ldr	r3, [pc, #348]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0ee      	beq.n	80067a6 <HAL_RCC_OscConfig+0x37e>
 80067c8:	e014      	b.n	80067f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067ca:	f7fc fe8f 	bl	80034ec <HAL_GetTick>
 80067ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067d0:	e00a      	b.n	80067e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067d2:	f7fc fe8b 	bl	80034ec <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d901      	bls.n	80067e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e095      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067e8:	4b4c      	ldr	r3, [pc, #304]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1ee      	bne.n	80067d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d105      	bne.n	8006806 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067fa:	4b48      	ldr	r3, [pc, #288]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	4a47      	ldr	r2, [pc, #284]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 8006800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006804:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 8081 	beq.w	8006912 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006810:	4b42      	ldr	r3, [pc, #264]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f003 030c 	and.w	r3, r3, #12
 8006818:	2b08      	cmp	r3, #8
 800681a:	d061      	beq.n	80068e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	2b02      	cmp	r3, #2
 8006822:	d146      	bne.n	80068b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006824:	4b3f      	ldr	r3, [pc, #252]	; (8006924 <HAL_RCC_OscConfig+0x4fc>)
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800682a:	f7fc fe5f 	bl	80034ec <HAL_GetTick>
 800682e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006830:	e008      	b.n	8006844 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006832:	f7fc fe5b 	bl	80034ec <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d901      	bls.n	8006844 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e067      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006844:	4b35      	ldr	r3, [pc, #212]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1f0      	bne.n	8006832 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006858:	d108      	bne.n	800686c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800685a:	4b30      	ldr	r3, [pc, #192]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	492d      	ldr	r1, [pc, #180]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 8006868:	4313      	orrs	r3, r2
 800686a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800686c:	4b2b      	ldr	r3, [pc, #172]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a19      	ldr	r1, [r3, #32]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	430b      	orrs	r3, r1
 800687e:	4927      	ldr	r1, [pc, #156]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 8006880:	4313      	orrs	r3, r2
 8006882:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006884:	4b27      	ldr	r3, [pc, #156]	; (8006924 <HAL_RCC_OscConfig+0x4fc>)
 8006886:	2201      	movs	r2, #1
 8006888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800688a:	f7fc fe2f 	bl	80034ec <HAL_GetTick>
 800688e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006890:	e008      	b.n	80068a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006892:	f7fc fe2b 	bl	80034ec <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d901      	bls.n	80068a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e037      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068a4:	4b1d      	ldr	r3, [pc, #116]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0f0      	beq.n	8006892 <HAL_RCC_OscConfig+0x46a>
 80068b0:	e02f      	b.n	8006912 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068b2:	4b1c      	ldr	r3, [pc, #112]	; (8006924 <HAL_RCC_OscConfig+0x4fc>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b8:	f7fc fe18 	bl	80034ec <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c0:	f7fc fe14 	bl	80034ec <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e020      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068d2:	4b12      	ldr	r3, [pc, #72]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1f0      	bne.n	80068c0 <HAL_RCC_OscConfig+0x498>
 80068de:	e018      	b.n	8006912 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d101      	bne.n	80068ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e013      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80068ec:	4b0b      	ldr	r3, [pc, #44]	; (800691c <HAL_RCC_OscConfig+0x4f4>)
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d106      	bne.n	800690e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800690a:	429a      	cmp	r2, r3
 800690c:	d001      	beq.n	8006912 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e000      	b.n	8006914 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3718      	adds	r7, #24
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40021000 	.word	0x40021000
 8006920:	40007000 	.word	0x40007000
 8006924:	42420060 	.word	0x42420060

08006928 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e0d0      	b.n	8006ade <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800693c:	4b6a      	ldr	r3, [pc, #424]	; (8006ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0307 	and.w	r3, r3, #7
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d910      	bls.n	800696c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800694a:	4b67      	ldr	r3, [pc, #412]	; (8006ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f023 0207 	bic.w	r2, r3, #7
 8006952:	4965      	ldr	r1, [pc, #404]	; (8006ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	4313      	orrs	r3, r2
 8006958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800695a:	4b63      	ldr	r3, [pc, #396]	; (8006ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	429a      	cmp	r2, r3
 8006966:	d001      	beq.n	800696c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e0b8      	b.n	8006ade <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d020      	beq.n	80069ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0304 	and.w	r3, r3, #4
 8006980:	2b00      	cmp	r3, #0
 8006982:	d005      	beq.n	8006990 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006984:	4b59      	ldr	r3, [pc, #356]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	4a58      	ldr	r2, [pc, #352]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 800698a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800698e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800699c:	4b53      	ldr	r3, [pc, #332]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	4a52      	ldr	r2, [pc, #328]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 80069a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80069a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069a8:	4b50      	ldr	r3, [pc, #320]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	494d      	ldr	r1, [pc, #308]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d040      	beq.n	8006a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d107      	bne.n	80069de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ce:	4b47      	ldr	r3, [pc, #284]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d115      	bne.n	8006a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e07f      	b.n	8006ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d107      	bne.n	80069f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069e6:	4b41      	ldr	r3, [pc, #260]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d109      	bne.n	8006a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e073      	b.n	8006ade <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069f6:	4b3d      	ldr	r3, [pc, #244]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e06b      	b.n	8006ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a06:	4b39      	ldr	r3, [pc, #228]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f023 0203 	bic.w	r2, r3, #3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	4936      	ldr	r1, [pc, #216]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a18:	f7fc fd68 	bl	80034ec <HAL_GetTick>
 8006a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a1e:	e00a      	b.n	8006a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a20:	f7fc fd64 	bl	80034ec <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e053      	b.n	8006ade <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a36:	4b2d      	ldr	r3, [pc, #180]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f003 020c 	and.w	r2, r3, #12
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d1eb      	bne.n	8006a20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a48:	4b27      	ldr	r3, [pc, #156]	; (8006ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d210      	bcs.n	8006a78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a56:	4b24      	ldr	r3, [pc, #144]	; (8006ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f023 0207 	bic.w	r2, r3, #7
 8006a5e:	4922      	ldr	r1, [pc, #136]	; (8006ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a66:	4b20      	ldr	r3, [pc, #128]	; (8006ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0307 	and.w	r3, r3, #7
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d001      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e032      	b.n	8006ade <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d008      	beq.n	8006a96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a84:	4b19      	ldr	r3, [pc, #100]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	4916      	ldr	r1, [pc, #88]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0308 	and.w	r3, r3, #8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d009      	beq.n	8006ab6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006aa2:	4b12      	ldr	r3, [pc, #72]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	00db      	lsls	r3, r3, #3
 8006ab0:	490e      	ldr	r1, [pc, #56]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ab6:	f000 f821 	bl	8006afc <HAL_RCC_GetSysClockFreq>
 8006aba:	4602      	mov	r2, r0
 8006abc:	4b0b      	ldr	r3, [pc, #44]	; (8006aec <HAL_RCC_ClockConfig+0x1c4>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	091b      	lsrs	r3, r3, #4
 8006ac2:	f003 030f 	and.w	r3, r3, #15
 8006ac6:	490a      	ldr	r1, [pc, #40]	; (8006af0 <HAL_RCC_ClockConfig+0x1c8>)
 8006ac8:	5ccb      	ldrb	r3, [r1, r3]
 8006aca:	fa22 f303 	lsr.w	r3, r2, r3
 8006ace:	4a09      	ldr	r2, [pc, #36]	; (8006af4 <HAL_RCC_ClockConfig+0x1cc>)
 8006ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006ad2:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <HAL_RCC_ClockConfig+0x1d0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fc fa52 	bl	8002f80 <HAL_InitTick>

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	40022000 	.word	0x40022000
 8006aec:	40021000 	.word	0x40021000
 8006af0:	0800f7c8 	.word	0x0800f7c8
 8006af4:	20000010 	.word	0x20000010
 8006af8:	20000014 	.word	0x20000014

08006afc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006afc:	b490      	push	{r4, r7}
 8006afe:	b08a      	sub	sp, #40	; 0x28
 8006b00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006b02:	4b2a      	ldr	r3, [pc, #168]	; (8006bac <HAL_RCC_GetSysClockFreq+0xb0>)
 8006b04:	1d3c      	adds	r4, r7, #4
 8006b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006b0c:	f240 2301 	movw	r3, #513	; 0x201
 8006b10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	61fb      	str	r3, [r7, #28]
 8006b16:	2300      	movs	r3, #0
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1e:	2300      	movs	r3, #0
 8006b20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006b26:	4b22      	ldr	r3, [pc, #136]	; (8006bb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f003 030c 	and.w	r3, r3, #12
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d002      	beq.n	8006b3c <HAL_RCC_GetSysClockFreq+0x40>
 8006b36:	2b08      	cmp	r3, #8
 8006b38:	d003      	beq.n	8006b42 <HAL_RCC_GetSysClockFreq+0x46>
 8006b3a:	e02d      	b.n	8006b98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b3c:	4b1d      	ldr	r3, [pc, #116]	; (8006bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b3e:	623b      	str	r3, [r7, #32]
      break;
 8006b40:	e02d      	b.n	8006b9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	0c9b      	lsrs	r3, r3, #18
 8006b46:	f003 030f 	and.w	r3, r3, #15
 8006b4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006b4e:	4413      	add	r3, r2
 8006b50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006b54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d013      	beq.n	8006b88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b60:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	0c5b      	lsrs	r3, r3, #17
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006b6e:	4413      	add	r3, r2
 8006b70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006b74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	4a0e      	ldr	r2, [pc, #56]	; (8006bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b7a:	fb02 f203 	mul.w	r2, r2, r3
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
 8006b86:	e004      	b.n	8006b92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	4a0b      	ldr	r2, [pc, #44]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b8c:	fb02 f303 	mul.w	r3, r2, r3
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	623b      	str	r3, [r7, #32]
      break;
 8006b96:	e002      	b.n	8006b9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b98:	4b08      	ldr	r3, [pc, #32]	; (8006bbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b9a:	623b      	str	r3, [r7, #32]
      break;
 8006b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3728      	adds	r7, #40	; 0x28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bc90      	pop	{r4, r7}
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	0800f2bc 	.word	0x0800f2bc
 8006bb0:	40021000 	.word	0x40021000
 8006bb4:	00f42400 	.word	0x00f42400
 8006bb8:	003d0900 	.word	0x003d0900
 8006bbc:	007a1200 	.word	0x007a1200

08006bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bc4:	4b02      	ldr	r3, [pc, #8]	; (8006bd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bc80      	pop	{r7}
 8006bce:	4770      	bx	lr
 8006bd0:	20000010 	.word	0x20000010

08006bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006bd8:	f7ff fff2 	bl	8006bc0 <HAL_RCC_GetHCLKFreq>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	0a1b      	lsrs	r3, r3, #8
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	4903      	ldr	r1, [pc, #12]	; (8006bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bea:	5ccb      	ldrb	r3, [r1, r3]
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	0800f7d8 	.word	0x0800f7d8

08006bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c00:	f7ff ffde 	bl	8006bc0 <HAL_RCC_GetHCLKFreq>
 8006c04:	4602      	mov	r2, r0
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	0adb      	lsrs	r3, r3, #11
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	4903      	ldr	r1, [pc, #12]	; (8006c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c12:	5ccb      	ldrb	r3, [r1, r3]
 8006c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40021000 	.word	0x40021000
 8006c20:	0800f7d8 	.word	0x0800f7d8

08006c24 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	220f      	movs	r2, #15
 8006c32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c34:	4b11      	ldr	r3, [pc, #68]	; (8006c7c <HAL_RCC_GetClockConfig+0x58>)
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f003 0203 	and.w	r2, r3, #3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c40:	4b0e      	ldr	r3, [pc, #56]	; (8006c7c <HAL_RCC_GetClockConfig+0x58>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c4c:	4b0b      	ldr	r3, [pc, #44]	; (8006c7c <HAL_RCC_GetClockConfig+0x58>)
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006c58:	4b08      	ldr	r3, [pc, #32]	; (8006c7c <HAL_RCC_GetClockConfig+0x58>)
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	08db      	lsrs	r3, r3, #3
 8006c5e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c66:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <HAL_RCC_GetClockConfig+0x5c>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0207 	and.w	r2, r3, #7
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bc80      	pop	{r7}
 8006c7a:	4770      	bx	lr
 8006c7c:	40021000 	.word	0x40021000
 8006c80:	40022000 	.word	0x40022000

08006c84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <RCC_Delay+0x34>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a0a      	ldr	r2, [pc, #40]	; (8006cbc <RCC_Delay+0x38>)
 8006c92:	fba2 2303 	umull	r2, r3, r2, r3
 8006c96:	0a5b      	lsrs	r3, r3, #9
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	fb02 f303 	mul.w	r3, r2, r3
 8006c9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006ca0:	bf00      	nop
  }
  while (Delay --);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	1e5a      	subs	r2, r3, #1
 8006ca6:	60fa      	str	r2, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f9      	bne.n	8006ca0 <RCC_Delay+0x1c>
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr
 8006cb8:	20000010 	.word	0x20000010
 8006cbc:	10624dd3 	.word	0x10624dd3

08006cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d07d      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ce0:	4b4f      	ldr	r3, [pc, #316]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10d      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cec:	4b4c      	ldr	r3, [pc, #304]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	4a4b      	ldr	r2, [pc, #300]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	61d3      	str	r3, [r2, #28]
 8006cf8:	4b49      	ldr	r3, [pc, #292]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d00:	60bb      	str	r3, [r7, #8]
 8006d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d04:	2301      	movs	r3, #1
 8006d06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d08:	4b46      	ldr	r3, [pc, #280]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d118      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d14:	4b43      	ldr	r3, [pc, #268]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a42      	ldr	r2, [pc, #264]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d20:	f7fc fbe4 	bl	80034ec <HAL_GetTick>
 8006d24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d26:	e008      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d28:	f7fc fbe0 	bl	80034ec <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b64      	cmp	r3, #100	; 0x64
 8006d34:	d901      	bls.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e06d      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d3a:	4b3a      	ldr	r3, [pc, #232]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0f0      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d46:	4b36      	ldr	r3, [pc, #216]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d02e      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d027      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d64:	4b2e      	ldr	r3, [pc, #184]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d6e:	4b2e      	ldr	r3, [pc, #184]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006d70:	2201      	movs	r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d74:	4b2c      	ldr	r3, [pc, #176]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006d7a:	4a29      	ldr	r2, [pc, #164]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d014      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d8a:	f7fc fbaf 	bl	80034ec <HAL_GetTick>
 8006d8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d90:	e00a      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d92:	f7fc fbab 	bl	80034ec <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d901      	bls.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e036      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006da8:	4b1d      	ldr	r3, [pc, #116]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0ee      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006db4:	4b1a      	ldr	r3, [pc, #104]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	4917      	ldr	r1, [pc, #92]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d105      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dcc:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	4a13      	ldr	r2, [pc, #76]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d008      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006de4:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	490b      	ldr	r1, [pc, #44]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0310 	and.w	r3, r3, #16
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d008      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e02:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	4904      	ldr	r1, [pc, #16]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	40021000 	.word	0x40021000
 8006e24:	40007000 	.word	0x40007000
 8006e28:	42420440 	.word	0x42420440

08006e2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e076      	b.n	8006f2c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d108      	bne.n	8006e58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e4e:	d009      	beq.n	8006e64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	61da      	str	r2, [r3, #28]
 8006e56:	e005      	b.n	8006e64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d106      	bne.n	8006e84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7fb fffa 	bl	8002e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006eac:	431a      	orrs	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	431a      	orrs	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee8:	ea42 0103 	orr.w	r1, r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	0c1a      	lsrs	r2, r3, #16
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f002 0204 	and.w	r2, r2, #4
 8006f0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	69da      	ldr	r2, [r3, #28]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	4613      	mov	r3, r2
 8006f42:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d101      	bne.n	8006f56 <HAL_SPI_Transmit+0x22>
 8006f52:	2302      	movs	r3, #2
 8006f54:	e126      	b.n	80071a4 <HAL_SPI_Transmit+0x270>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f5e:	f7fc fac5 	bl	80034ec <HAL_GetTick>
 8006f62:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f64:	88fb      	ldrh	r3, [r7, #6]
 8006f66:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d002      	beq.n	8006f7a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f74:	2302      	movs	r3, #2
 8006f76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f78:	e10b      	b.n	8007192 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <HAL_SPI_Transmit+0x52>
 8006f80:	88fb      	ldrh	r3, [r7, #6]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d102      	bne.n	8006f8c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f8a:	e102      	b.n	8007192 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2203      	movs	r2, #3
 8006f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	88fa      	ldrh	r2, [r7, #6]
 8006fa4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	88fa      	ldrh	r2, [r7, #6]
 8006faa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fd2:	d10f      	bne.n	8006ff4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fe2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ff2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffe:	2b40      	cmp	r3, #64	; 0x40
 8007000:	d007      	beq.n	8007012 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007010:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800701a:	d14b      	bne.n	80070b4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <HAL_SPI_Transmit+0xf6>
 8007024:	8afb      	ldrh	r3, [r7, #22]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d13e      	bne.n	80070a8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702e:	881a      	ldrh	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703a:	1c9a      	adds	r2, r3, #2
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007044:	b29b      	uxth	r3, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800704e:	e02b      	b.n	80070a8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b02      	cmp	r3, #2
 800705c:	d112      	bne.n	8007084 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007062:	881a      	ldrh	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706e:	1c9a      	adds	r2, r3, #2
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007078:	b29b      	uxth	r3, r3
 800707a:	3b01      	subs	r3, #1
 800707c:	b29a      	uxth	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	86da      	strh	r2, [r3, #54]	; 0x36
 8007082:	e011      	b.n	80070a8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007084:	f7fc fa32 	bl	80034ec <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d803      	bhi.n	800709c <HAL_SPI_Transmit+0x168>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709a:	d102      	bne.n	80070a2 <HAL_SPI_Transmit+0x16e>
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d102      	bne.n	80070a8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070a6:	e074      	b.n	8007192 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1ce      	bne.n	8007050 <HAL_SPI_Transmit+0x11c>
 80070b2:	e04c      	b.n	800714e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <HAL_SPI_Transmit+0x18e>
 80070bc:	8afb      	ldrh	r3, [r7, #22]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d140      	bne.n	8007144 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	330c      	adds	r3, #12
 80070cc:	7812      	ldrb	r2, [r2, #0]
 80070ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070de:	b29b      	uxth	r3, r3
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80070e8:	e02c      	b.n	8007144 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f003 0302 	and.w	r3, r3, #2
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d113      	bne.n	8007120 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	330c      	adds	r3, #12
 8007102:	7812      	ldrb	r2, [r2, #0]
 8007104:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007114:	b29b      	uxth	r3, r3
 8007116:	3b01      	subs	r3, #1
 8007118:	b29a      	uxth	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	86da      	strh	r2, [r3, #54]	; 0x36
 800711e:	e011      	b.n	8007144 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007120:	f7fc f9e4 	bl	80034ec <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d803      	bhi.n	8007138 <HAL_SPI_Transmit+0x204>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007136:	d102      	bne.n	800713e <HAL_SPI_Transmit+0x20a>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d102      	bne.n	8007144 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007142:	e026      	b.n	8007192 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007148:	b29b      	uxth	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1cd      	bne.n	80070ea <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f000 f8b2 	bl	80072bc <SPI_EndRxTxTransaction>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2220      	movs	r2, #32
 8007162:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10a      	bne.n	8007182 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800716c:	2300      	movs	r3, #0
 800716e:	613b      	str	r3, [r7, #16]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	613b      	str	r3, [r7, #16]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	77fb      	strb	r3, [r7, #31]
 800718e:	e000      	b.n	8007192 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007190:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3720      	adds	r7, #32
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	4613      	mov	r3, r2
 80071ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071bc:	f7fc f996 	bl	80034ec <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c4:	1a9b      	subs	r3, r3, r2
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	4413      	add	r3, r2
 80071ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071cc:	f7fc f98e 	bl	80034ec <HAL_GetTick>
 80071d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071d2:	4b39      	ldr	r3, [pc, #228]	; (80072b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	015b      	lsls	r3, r3, #5
 80071d8:	0d1b      	lsrs	r3, r3, #20
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	fb02 f303 	mul.w	r3, r2, r3
 80071e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071e2:	e054      	b.n	800728e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ea:	d050      	beq.n	800728e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071ec:	f7fc f97e 	bl	80034ec <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d902      	bls.n	8007202 <SPI_WaitFlagStateUntilTimeout+0x56>
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d13d      	bne.n	800727e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007210:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800721a:	d111      	bne.n	8007240 <SPI_WaitFlagStateUntilTimeout+0x94>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007224:	d004      	beq.n	8007230 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800722e:	d107      	bne.n	8007240 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800723e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007248:	d10f      	bne.n	800726a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007268:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e017      	b.n	80072ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	3b01      	subs	r3, #1
 800728c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4013      	ands	r3, r2
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	429a      	cmp	r2, r3
 800729c:	bf0c      	ite	eq
 800729e:	2301      	moveq	r3, #1
 80072a0:	2300      	movne	r3, #0
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d19b      	bne.n	80071e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3720      	adds	r7, #32
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000010 	.word	0x20000010

080072bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af02      	add	r7, sp, #8
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2200      	movs	r2, #0
 80072d0:	2180      	movs	r1, #128	; 0x80
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f7ff ff6a 	bl	80071ac <SPI_WaitFlagStateUntilTimeout>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d007      	beq.n	80072ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	f043 0220 	orr.w	r2, r3, #32
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e000      	b.n	80072f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e041      	b.n	800738e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d106      	bne.n	8007324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f839 	bl	8007396 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3304      	adds	r3, #4
 8007334:	4619      	mov	r1, r3
 8007336:	4610      	mov	r0, r2
 8007338:	f000 f9b4 	bl	80076a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800739e:	bf00      	nop
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bc80      	pop	{r7}
 80073a6:	4770      	bx	lr

080073a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d001      	beq.n	80073c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e03a      	b.n	8007436 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2202      	movs	r2, #2
 80073c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0201 	orr.w	r2, r2, #1
 80073d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a18      	ldr	r2, [pc, #96]	; (8007440 <HAL_TIM_Base_Start_IT+0x98>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00e      	beq.n	8007400 <HAL_TIM_Base_Start_IT+0x58>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ea:	d009      	beq.n	8007400 <HAL_TIM_Base_Start_IT+0x58>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a14      	ldr	r2, [pc, #80]	; (8007444 <HAL_TIM_Base_Start_IT+0x9c>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d004      	beq.n	8007400 <HAL_TIM_Base_Start_IT+0x58>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a13      	ldr	r2, [pc, #76]	; (8007448 <HAL_TIM_Base_Start_IT+0xa0>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d111      	bne.n	8007424 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2b06      	cmp	r3, #6
 8007410:	d010      	beq.n	8007434 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f042 0201 	orr.w	r2, r2, #1
 8007420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007422:	e007      	b.n	8007434 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	bc80      	pop	{r7}
 800743e:	4770      	bx	lr
 8007440:	40012c00 	.word	0x40012c00
 8007444:	40000400 	.word	0x40000400
 8007448:	40000800 	.word	0x40000800

0800744c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b02      	cmp	r3, #2
 8007460:	d122      	bne.n	80074a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b02      	cmp	r3, #2
 800746e:	d11b      	bne.n	80074a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f06f 0202 	mvn.w	r2, #2
 8007478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	f003 0303 	and.w	r3, r3, #3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f8ed 	bl	800766e <HAL_TIM_IC_CaptureCallback>
 8007494:	e005      	b.n	80074a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f8e0 	bl	800765c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f8ef 	bl	8007680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	d122      	bne.n	80074fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f003 0304 	and.w	r3, r3, #4
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d11b      	bne.n	80074fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f06f 0204 	mvn.w	r2, #4
 80074cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2202      	movs	r2, #2
 80074d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f8c3 	bl	800766e <HAL_TIM_IC_CaptureCallback>
 80074e8:	e005      	b.n	80074f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f8b6 	bl	800765c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f8c5 	bl	8007680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 0308 	and.w	r3, r3, #8
 8007506:	2b08      	cmp	r3, #8
 8007508:	d122      	bne.n	8007550 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f003 0308 	and.w	r3, r3, #8
 8007514:	2b08      	cmp	r3, #8
 8007516:	d11b      	bne.n	8007550 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f06f 0208 	mvn.w	r2, #8
 8007520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2204      	movs	r2, #4
 8007526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	f003 0303 	and.w	r3, r3, #3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f899 	bl	800766e <HAL_TIM_IC_CaptureCallback>
 800753c:	e005      	b.n	800754a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f88c 	bl	800765c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f89b 	bl	8007680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f003 0310 	and.w	r3, r3, #16
 800755a:	2b10      	cmp	r3, #16
 800755c:	d122      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f003 0310 	and.w	r3, r3, #16
 8007568:	2b10      	cmp	r3, #16
 800756a:	d11b      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f06f 0210 	mvn.w	r2, #16
 8007574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2208      	movs	r2, #8
 800757a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f86f 	bl	800766e <HAL_TIM_IC_CaptureCallback>
 8007590:	e005      	b.n	800759e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f862 	bl	800765c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f871 	bl	8007680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d10e      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d107      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f06f 0201 	mvn.w	r2, #1
 80075c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7f9 fd86 	bl	80010dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075da:	2b80      	cmp	r3, #128	; 0x80
 80075dc:	d10e      	bne.n	80075fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e8:	2b80      	cmp	r3, #128	; 0x80
 80075ea:	d107      	bne.n	80075fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f8bf 	bl	800777a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007606:	2b40      	cmp	r3, #64	; 0x40
 8007608:	d10e      	bne.n	8007628 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007614:	2b40      	cmp	r3, #64	; 0x40
 8007616:	d107      	bne.n	8007628 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f835 	bl	8007692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b20      	cmp	r3, #32
 8007634:	d10e      	bne.n	8007654 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f003 0320 	and.w	r3, r3, #32
 8007640:	2b20      	cmp	r3, #32
 8007642:	d107      	bne.n	8007654 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f06f 0220 	mvn.w	r2, #32
 800764c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f88a 	bl	8007768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007654:	bf00      	nop
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	bc80      	pop	{r7}
 800766c:	4770      	bx	lr

0800766e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr

08007680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	bc80      	pop	{r7}
 8007690:	4770      	bx	lr

08007692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800769a:	bf00      	nop
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	bc80      	pop	{r7}
 80076a2:	4770      	bx	lr

080076a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a29      	ldr	r2, [pc, #164]	; (800775c <TIM_Base_SetConfig+0xb8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d00b      	beq.n	80076d4 <TIM_Base_SetConfig+0x30>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c2:	d007      	beq.n	80076d4 <TIM_Base_SetConfig+0x30>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a26      	ldr	r2, [pc, #152]	; (8007760 <TIM_Base_SetConfig+0xbc>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d003      	beq.n	80076d4 <TIM_Base_SetConfig+0x30>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a25      	ldr	r2, [pc, #148]	; (8007764 <TIM_Base_SetConfig+0xc0>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d108      	bne.n	80076e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a1c      	ldr	r2, [pc, #112]	; (800775c <TIM_Base_SetConfig+0xb8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00b      	beq.n	8007706 <TIM_Base_SetConfig+0x62>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f4:	d007      	beq.n	8007706 <TIM_Base_SetConfig+0x62>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a19      	ldr	r2, [pc, #100]	; (8007760 <TIM_Base_SetConfig+0xbc>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d003      	beq.n	8007706 <TIM_Base_SetConfig+0x62>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a18      	ldr	r2, [pc, #96]	; (8007764 <TIM_Base_SetConfig+0xc0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d108      	bne.n	8007718 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800770c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	4313      	orrs	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a07      	ldr	r2, [pc, #28]	; (800775c <TIM_Base_SetConfig+0xb8>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d103      	bne.n	800774c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	691a      	ldr	r2, [r3, #16]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	615a      	str	r2, [r3, #20]
}
 8007752:	bf00      	nop
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	bc80      	pop	{r7}
 800775a:	4770      	bx	lr
 800775c:	40012c00 	.word	0x40012c00
 8007760:	40000400 	.word	0x40000400
 8007764:	40000800 	.word	0x40000800

08007768 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	bc80      	pop	{r7}
 8007778:	4770      	bx	lr

0800777a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	bc80      	pop	{r7}
 800778a:	4770      	bx	lr

0800778c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800778c:	b084      	sub	sp, #16
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	f107 0014 	add.w	r0, r7, #20
 800779a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bc80      	pop	{r7}
 80077a8:	b004      	add	sp, #16
 80077aa:	4770      	bx	lr

080077ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80077bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80077c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc80      	pop	{r7}
 80077d6:	4770      	bx	lr

080077d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80077e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80077e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	43db      	mvns	r3, r3
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	4013      	ands	r3, r2
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	bc80      	pop	{r7}
 800780a:	4770      	bx	lr

0800780c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	bc80      	pop	{r7}
 8007822:	4770      	bx	lr

08007824 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007824:	b084      	sub	sp, #16
 8007826:	b480      	push	{r7}
 8007828:	b083      	sub	sp, #12
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	f107 0014 	add.w	r0, r7, #20
 8007832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	bc80      	pop	{r7}
 8007860:	b004      	add	sp, #16
 8007862:	4770      	bx	lr

08007864 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007864:	b480      	push	{r7}
 8007866:	b09b      	sub	sp, #108	; 0x6c
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29b      	uxth	r3, r3
 8007882:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	78db      	ldrb	r3, [r3, #3]
 8007892:	2b03      	cmp	r3, #3
 8007894:	d81f      	bhi.n	80078d6 <USB_ActivateEndpoint+0x72>
 8007896:	a201      	add	r2, pc, #4	; (adr r2, 800789c <USB_ActivateEndpoint+0x38>)
 8007898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789c:	080078ad 	.word	0x080078ad
 80078a0:	080078c9 	.word	0x080078c9
 80078a4:	080078df 	.word	0x080078df
 80078a8:	080078bb 	.word	0x080078bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80078ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80078b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80078b8:	e012      	b.n	80078e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80078ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80078be:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80078c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80078c6:	e00b      	b.n	80078e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80078c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80078cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80078d4:	e004      	b.n	80078e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80078dc:	e000      	b.n	80078e0 <USB_ActivateEndpoint+0x7c>
      break;
 80078de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	441a      	add	r2, r3
 80078ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80078ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078fe:	b29b      	uxth	r3, r3
 8007900:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4413      	add	r3, r2
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	b29b      	uxth	r3, r3
 8007910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007918:	b29a      	uxth	r2, r3
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	b29b      	uxth	r3, r3
 8007920:	4313      	orrs	r3, r2
 8007922:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	441a      	add	r2, r3
 8007930:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800793c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007944:	b29b      	uxth	r3, r3
 8007946:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	7b1b      	ldrb	r3, [r3, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	f040 8149 	bne.w	8007be4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	785b      	ldrb	r3, [r3, #1]
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 8084 	beq.w	8007a64 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007966:	b29b      	uxth	r3, r3
 8007968:	461a      	mov	r2, r3
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	4413      	add	r3, r2
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	011a      	lsls	r2, r3, #4
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800797e:	613b      	str	r3, [r7, #16]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	88db      	ldrh	r3, [r3, #6]
 8007984:	085b      	lsrs	r3, r3, #1
 8007986:	b29b      	uxth	r3, r3
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	b29a      	uxth	r2, r3
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	81fb      	strh	r3, [r7, #14]
 800799e:	89fb      	ldrh	r3, [r7, #14]
 80079a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d01b      	beq.n	80079e0 <USB_ActivateEndpoint+0x17c>
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079be:	81bb      	strh	r3, [r7, #12]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	441a      	add	r2, r3
 80079ca:	89bb      	ldrh	r3, [r7, #12]
 80079cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079dc:	b29b      	uxth	r3, r3
 80079de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	78db      	ldrb	r3, [r3, #3]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d020      	beq.n	8007a2a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079fe:	813b      	strh	r3, [r7, #8]
 8007a00:	893b      	ldrh	r3, [r7, #8]
 8007a02:	f083 0320 	eor.w	r3, r3, #32
 8007a06:	813b      	strh	r3, [r7, #8]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	441a      	add	r2, r3
 8007a12:	893b      	ldrh	r3, [r7, #8]
 8007a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	8013      	strh	r3, [r2, #0]
 8007a28:	e27f      	b.n	8007f2a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a40:	817b      	strh	r3, [r7, #10]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	441a      	add	r2, r3
 8007a4c:	897b      	ldrh	r3, [r7, #10]
 8007a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	8013      	strh	r3, [r2, #0]
 8007a62:	e262      	b.n	8007f2a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	461a      	mov	r2, r3
 8007a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a74:	4413      	add	r3, r2
 8007a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	011a      	lsls	r2, r3, #4
 8007a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	88db      	ldrh	r3, [r3, #6]
 8007a8c:	085b      	lsrs	r3, r3, #1
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	4413      	add	r3, r2
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	011a      	lsls	r2, r3, #4
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007aba:	623b      	str	r3, [r7, #32]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d112      	bne.n	8007aea <USB_ActivateEndpoint+0x286>
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	801a      	strh	r2, [r3, #0]
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	881b      	ldrh	r3, [r3, #0]
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	801a      	strh	r2, [r3, #0]
 8007ae8:	e02f      	b.n	8007b4a <USB_ActivateEndpoint+0x2e6>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	2b3e      	cmp	r3, #62	; 0x3e
 8007af0:	d813      	bhi.n	8007b1a <USB_ActivateEndpoint+0x2b6>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	085b      	lsrs	r3, r3, #1
 8007af8:	663b      	str	r3, [r7, #96]	; 0x60
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d002      	beq.n	8007b0c <USB_ActivateEndpoint+0x2a8>
 8007b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b08:	3301      	adds	r3, #1
 8007b0a:	663b      	str	r3, [r7, #96]	; 0x60
 8007b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	029b      	lsls	r3, r3, #10
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	801a      	strh	r2, [r3, #0]
 8007b18:	e017      	b.n	8007b4a <USB_ActivateEndpoint+0x2e6>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	095b      	lsrs	r3, r3, #5
 8007b20:	663b      	str	r3, [r7, #96]	; 0x60
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f003 031f 	and.w	r3, r3, #31
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d102      	bne.n	8007b34 <USB_ActivateEndpoint+0x2d0>
 8007b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b30:	3b01      	subs	r3, #1
 8007b32:	663b      	str	r3, [r7, #96]	; 0x60
 8007b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	029b      	lsls	r3, r3, #10
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	83fb      	strh	r3, [r7, #30]
 8007b58:	8bfb      	ldrh	r3, [r7, #30]
 8007b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d01b      	beq.n	8007b9a <USB_ActivateEndpoint+0x336>
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b78:	83bb      	strh	r3, [r7, #28]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	441a      	add	r2, r3
 8007b84:	8bbb      	ldrh	r3, [r7, #28]
 8007b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb0:	837b      	strh	r3, [r7, #26]
 8007bb2:	8b7b      	ldrh	r3, [r7, #26]
 8007bb4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bb8:	837b      	strh	r3, [r7, #26]
 8007bba:	8b7b      	ldrh	r3, [r7, #26]
 8007bbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007bc0:	837b      	strh	r3, [r7, #26]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	441a      	add	r2, r3
 8007bcc:	8b7b      	ldrh	r3, [r7, #26]
 8007bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	8013      	strh	r3, [r2, #0]
 8007be2:	e1a2      	b.n	8007f2a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	441a      	add	r2, r3
 8007c08:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c14:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c30:	4413      	add	r3, r2
 8007c32:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	011a      	lsls	r2, r3, #4
 8007c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c42:	657b      	str	r3, [r7, #84]	; 0x54
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	891b      	ldrh	r3, [r3, #8]
 8007c48:	085b      	lsrs	r3, r3, #1
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c52:	801a      	strh	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	653b      	str	r3, [r7, #80]	; 0x50
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	461a      	mov	r2, r3
 8007c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c64:	4413      	add	r3, r2
 8007c66:	653b      	str	r3, [r7, #80]	; 0x50
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	011a      	lsls	r2, r3, #4
 8007c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	895b      	ldrh	r3, [r3, #10]
 8007c7c:	085b      	lsrs	r3, r3, #1
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c86:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	785b      	ldrb	r3, [r3, #1]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f040 8091 	bne.w	8007db4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007ca0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d01b      	beq.n	8007ce2 <USB_ActivateEndpoint+0x47e>
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	441a      	add	r2, r3
 8007ccc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	873b      	strh	r3, [r7, #56]	; 0x38
 8007cf0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d01b      	beq.n	8007d32 <USB_ActivateEndpoint+0x4ce>
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d10:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	441a      	add	r2, r3
 8007d1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d48:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007d4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007d4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d50:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007d52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007d54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d58:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	441a      	add	r2, r3
 8007d64:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d90:	867b      	strh	r3, [r7, #50]	; 0x32
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	441a      	add	r2, r3
 8007d9c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	8013      	strh	r3, [r2, #0]
 8007db2:	e0ba      	b.n	8007f2a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4413      	add	r3, r2
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007dc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d01d      	beq.n	8007e0c <USB_ActivateEndpoint+0x5a8>
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	441a      	add	r2, r3
 8007df4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007e1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d01d      	beq.n	8007e64 <USB_ActivateEndpoint+0x600>
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	441a      	add	r2, r3
 8007e4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	78db      	ldrb	r3, [r3, #3]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d024      	beq.n	8007eb6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007e86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007e8a:	f083 0320 	eor.w	r3, r3, #32
 8007e8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	441a      	add	r2, r3
 8007e9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	8013      	strh	r3, [r2, #0]
 8007eb4:	e01d      	b.n	8007ef2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ecc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	441a      	add	r2, r3
 8007eda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f08:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	441a      	add	r2, r3
 8007f14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007f2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	376c      	adds	r7, #108	; 0x6c
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bc80      	pop	{r7}
 8007f36:	4770      	bx	lr

08007f38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b08d      	sub	sp, #52	; 0x34
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	7b1b      	ldrb	r3, [r3, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f040 808e 	bne.w	8008068 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	785b      	ldrb	r3, [r3, #1]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d044      	beq.n	8007fde <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	81bb      	strh	r3, [r7, #12]
 8007f62:	89bb      	ldrh	r3, [r7, #12]
 8007f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01b      	beq.n	8007fa4 <USB_DeactivateEndpoint+0x6c>
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f82:	817b      	strh	r3, [r7, #10]
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	441a      	add	r2, r3
 8007f8e:	897b      	ldrh	r3, [r7, #10]
 8007f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fba:	813b      	strh	r3, [r7, #8]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	441a      	add	r2, r3
 8007fc6:	893b      	ldrh	r3, [r7, #8]
 8007fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	8013      	strh	r3, [r2, #0]
 8007fdc:	e192      	b.n	8008304 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	827b      	strh	r3, [r7, #18]
 8007fec:	8a7b      	ldrh	r3, [r7, #18]
 8007fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d01b      	beq.n	800802e <USB_DeactivateEndpoint+0xf6>
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29b      	uxth	r3, r3
 8008004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800c:	823b      	strh	r3, [r7, #16]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	441a      	add	r2, r3
 8008018:	8a3b      	ldrh	r3, [r7, #16]
 800801a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800801e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008022:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800802a:	b29b      	uxth	r3, r3
 800802c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	b29b      	uxth	r3, r3
 800803c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008044:	81fb      	strh	r3, [r7, #14]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	441a      	add	r2, r3
 8008050:	89fb      	ldrh	r3, [r7, #14]
 8008052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800805a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800805e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008062:	b29b      	uxth	r3, r3
 8008064:	8013      	strh	r3, [r2, #0]
 8008066:	e14d      	b.n	8008304 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	785b      	ldrb	r3, [r3, #1]
 800806c:	2b00      	cmp	r3, #0
 800806e:	f040 80a5 	bne.w	80081bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	843b      	strh	r3, [r7, #32]
 8008080:	8c3b      	ldrh	r3, [r7, #32]
 8008082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d01b      	beq.n	80080c2 <USB_DeactivateEndpoint+0x18a>
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	b29b      	uxth	r3, r3
 8008098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800809c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a0:	83fb      	strh	r3, [r7, #30]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	441a      	add	r2, r3
 80080ac:	8bfb      	ldrh	r3, [r7, #30]
 80080ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080be:	b29b      	uxth	r3, r3
 80080c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	83bb      	strh	r3, [r7, #28]
 80080d0:	8bbb      	ldrh	r3, [r7, #28]
 80080d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01b      	beq.n	8008112 <USB_DeactivateEndpoint+0x1da>
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f0:	837b      	strh	r3, [r7, #26]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	441a      	add	r2, r3
 80080fc:	8b7b      	ldrh	r3, [r7, #26]
 80080fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800810a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800810e:	b29b      	uxth	r3, r3
 8008110:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29b      	uxth	r3, r3
 8008120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008128:	833b      	strh	r3, [r7, #24]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	441a      	add	r2, r3
 8008134:	8b3b      	ldrh	r3, [r7, #24]
 8008136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800813a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800813e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008142:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008146:	b29b      	uxth	r3, r3
 8008148:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	b29b      	uxth	r3, r3
 8008158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800815c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008160:	82fb      	strh	r3, [r7, #22]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	441a      	add	r2, r3
 800816c:	8afb      	ldrh	r3, [r7, #22]
 800816e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800817a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817e:	b29b      	uxth	r3, r3
 8008180:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008198:	82bb      	strh	r3, [r7, #20]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	441a      	add	r2, r3
 80081a4:	8abb      	ldrh	r3, [r7, #20]
 80081a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	8013      	strh	r3, [r2, #0]
 80081ba:	e0a3      	b.n	8008304 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4413      	add	r3, r2
 80081c6:	881b      	ldrh	r3, [r3, #0]
 80081c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80081ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80081cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d01b      	beq.n	800820c <USB_DeactivateEndpoint+0x2d4>
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	441a      	add	r2, r3
 80081f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80081f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008208:	b29b      	uxth	r3, r3
 800820a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	857b      	strh	r3, [r7, #42]	; 0x2a
 800821a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800821c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01b      	beq.n	800825c <USB_DeactivateEndpoint+0x324>
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	b29b      	uxth	r3, r3
 8008232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823a:	853b      	strh	r3, [r7, #40]	; 0x28
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	441a      	add	r2, r3
 8008246:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800824c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008254:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008258:	b29b      	uxth	r3, r3
 800825a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	b29b      	uxth	r3, r3
 800826a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800826e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008272:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	441a      	add	r2, r3
 800827e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800828c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008290:	b29b      	uxth	r3, r3
 8008292:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	441a      	add	r2, r3
 80082b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	b29b      	uxth	r3, r3
 80082da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	441a      	add	r2, r3
 80082ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008300:	b29b      	uxth	r3, r3
 8008302:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3734      	adds	r7, #52	; 0x34
 800830a:	46bd      	mov	sp, r7
 800830c:	bc80      	pop	{r7}
 800830e:	4770      	bx	lr

08008310 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b0cc      	sub	sp, #304	; 0x130
 8008314:	af00      	add	r7, sp, #0
 8008316:	1d3b      	adds	r3, r7, #4
 8008318:	6018      	str	r0, [r3, #0]
 800831a:	463b      	mov	r3, r7
 800831c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800831e:	463b      	mov	r3, r7
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	785b      	ldrb	r3, [r3, #1]
 8008324:	2b01      	cmp	r3, #1
 8008326:	f040 872e 	bne.w	8009186 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800832a:	463b      	mov	r3, r7
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	699a      	ldr	r2, [r3, #24]
 8008330:	463b      	mov	r3, r7
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	429a      	cmp	r2, r3
 8008338:	d905      	bls.n	8008346 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800833a:	463b      	mov	r3, r7
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008344:	e004      	b.n	8008350 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008346:	463b      	mov	r3, r7
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008350:	463b      	mov	r3, r7
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	7b1b      	ldrb	r3, [r3, #12]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d134      	bne.n	80083c4 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800835a:	463b      	mov	r3, r7
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6959      	ldr	r1, [r3, #20]
 8008360:	463b      	mov	r3, r7
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	88da      	ldrh	r2, [r3, #6]
 8008366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800836a:	b29b      	uxth	r3, r3
 800836c:	1d38      	adds	r0, r7, #4
 800836e:	6800      	ldr	r0, [r0, #0]
 8008370:	f001 fc03 	bl	8009b7a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008374:	f107 0310 	add.w	r3, r7, #16
 8008378:	1d3a      	adds	r2, r7, #4
 800837a:	6812      	ldr	r2, [r2, #0]
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	1d3b      	adds	r3, r7, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008386:	b29b      	uxth	r3, r3
 8008388:	4619      	mov	r1, r3
 800838a:	f107 0310 	add.w	r3, r7, #16
 800838e:	f107 0210 	add.w	r2, r7, #16
 8008392:	6812      	ldr	r2, [r2, #0]
 8008394:	440a      	add	r2, r1
 8008396:	601a      	str	r2, [r3, #0]
 8008398:	463b      	mov	r3, r7
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	011a      	lsls	r2, r3, #4
 80083a0:	f107 0310 	add.w	r3, r7, #16
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4413      	add	r3, r2
 80083a8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80083ac:	f107 030c 	add.w	r3, r7, #12
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	f107 030c 	add.w	r3, r7, #12
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	801a      	strh	r2, [r3, #0]
 80083c0:	f000 beac 	b.w	800911c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80083c4:	463b      	mov	r3, r7
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	78db      	ldrb	r3, [r3, #3]
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	f040 838c 	bne.w	8008ae8 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80083d0:	463b      	mov	r3, r7
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6a1a      	ldr	r2, [r3, #32]
 80083d6:	463b      	mov	r3, r7
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	429a      	cmp	r2, r3
 80083de:	f240 8330 	bls.w	8008a42 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80083e2:	1d3b      	adds	r3, r7, #4
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	463b      	mov	r3, r7
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	881b      	ldrh	r3, [r3, #0]
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008400:	1d3b      	adds	r3, r7, #4
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	463b      	mov	r3, r7
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	441a      	add	r2, r3
 800840e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800841a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800841e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008422:	b29b      	uxth	r3, r3
 8008424:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008426:	463b      	mov	r3, r7
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6a1a      	ldr	r2, [r3, #32]
 800842c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008430:	1ad2      	subs	r2, r2, r3
 8008432:	463b      	mov	r3, r7
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008438:	1d3b      	adds	r3, r7, #4
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	463b      	mov	r3, r7
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	b29b      	uxth	r3, r3
 800844a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844e:	2b00      	cmp	r3, #0
 8008450:	f000 819e 	beq.w	8008790 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008454:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008458:	1d3a      	adds	r2, r7, #4
 800845a:	6812      	ldr	r2, [r2, #0]
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	463b      	mov	r3, r7
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	785b      	ldrb	r3, [r3, #1]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d17a      	bne.n	800855e <USB_EPStartXfer+0x24e>
 8008468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800846c:	1d3a      	adds	r2, r7, #4
 800846e:	6812      	ldr	r2, [r2, #0]
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	1d3b      	adds	r3, r7, #4
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800847a:	b29b      	uxth	r3, r3
 800847c:	4619      	mov	r1, r3
 800847e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008482:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008486:	6812      	ldr	r2, [r2, #0]
 8008488:	440a      	add	r2, r1
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	463b      	mov	r3, r7
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	011a      	lsls	r2, r3, #4
 8008494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4413      	add	r3, r2
 800849c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80084a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d11a      	bne.n	80084e4 <USB_EPStartXfer+0x1d4>
 80084ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084bc:	b29a      	uxth	r2, r3
 80084be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	801a      	strh	r2, [r3, #0]
 80084c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d8:	b29a      	uxth	r2, r3
 80084da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	801a      	strh	r2, [r3, #0]
 80084e2:	e062      	b.n	80085aa <USB_EPStartXfer+0x29a>
 80084e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084e8:	2b3e      	cmp	r3, #62	; 0x3e
 80084ea:	d819      	bhi.n	8008520 <USB_EPStartXfer+0x210>
 80084ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f0:	085b      	lsrs	r3, r3, #1
 80084f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80084f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d004      	beq.n	800850c <USB_EPStartXfer+0x1fc>
 8008502:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008506:	3301      	adds	r3, #1
 8008508:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800850c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008510:	b29b      	uxth	r3, r3
 8008512:	029b      	lsls	r3, r3, #10
 8008514:	b29a      	uxth	r2, r3
 8008516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	801a      	strh	r2, [r3, #0]
 800851e:	e044      	b.n	80085aa <USB_EPStartXfer+0x29a>
 8008520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008524:	095b      	lsrs	r3, r3, #5
 8008526:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800852a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800852e:	f003 031f 	and.w	r3, r3, #31
 8008532:	2b00      	cmp	r3, #0
 8008534:	d104      	bne.n	8008540 <USB_EPStartXfer+0x230>
 8008536:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800853a:	3b01      	subs	r3, #1
 800853c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008540:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008544:	b29b      	uxth	r3, r3
 8008546:	029b      	lsls	r3, r3, #10
 8008548:	b29b      	uxth	r3, r3
 800854a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800854e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008552:	b29a      	uxth	r2, r3
 8008554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	801a      	strh	r2, [r3, #0]
 800855c:	e025      	b.n	80085aa <USB_EPStartXfer+0x29a>
 800855e:	463b      	mov	r3, r7
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	785b      	ldrb	r3, [r3, #1]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d120      	bne.n	80085aa <USB_EPStartXfer+0x29a>
 8008568:	1d3b      	adds	r3, r7, #4
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008570:	b29b      	uxth	r3, r3
 8008572:	4619      	mov	r1, r3
 8008574:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008578:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800857c:	6812      	ldr	r2, [r2, #0]
 800857e:	440a      	add	r2, r1
 8008580:	601a      	str	r2, [r3, #0]
 8008582:	463b      	mov	r3, r7
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	011a      	lsls	r2, r3, #4
 800858a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4413      	add	r3, r2
 8008592:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80085aa:	463b      	mov	r3, r7
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	895b      	ldrh	r3, [r3, #10]
 80085b0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085b4:	463b      	mov	r3, r7
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6959      	ldr	r1, [r3, #20]
 80085ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085be:	b29b      	uxth	r3, r3
 80085c0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80085c4:	1d38      	adds	r0, r7, #4
 80085c6:	6800      	ldr	r0, [r0, #0]
 80085c8:	f001 fad7 	bl	8009b7a <USB_WritePMA>
            ep->xfer_buff += len;
 80085cc:	463b      	mov	r3, r7
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	695a      	ldr	r2, [r3, #20]
 80085d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085d6:	441a      	add	r2, r3
 80085d8:	463b      	mov	r3, r7
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80085de:	463b      	mov	r3, r7
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6a1a      	ldr	r2, [r3, #32]
 80085e4:	463b      	mov	r3, r7
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d909      	bls.n	8008602 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80085ee:	463b      	mov	r3, r7
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	6a1a      	ldr	r2, [r3, #32]
 80085f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085f8:	1ad2      	subs	r2, r2, r3
 80085fa:	463b      	mov	r3, r7
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	621a      	str	r2, [r3, #32]
 8008600:	e008      	b.n	8008614 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8008602:	463b      	mov	r3, r7
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800860c:	463b      	mov	r3, r7
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2200      	movs	r2, #0
 8008612:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008614:	463b      	mov	r3, r7
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	785b      	ldrb	r3, [r3, #1]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d17a      	bne.n	8008714 <USB_EPStartXfer+0x404>
 800861e:	f107 0318 	add.w	r3, r7, #24
 8008622:	1d3a      	adds	r2, r7, #4
 8008624:	6812      	ldr	r2, [r2, #0]
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	1d3b      	adds	r3, r7, #4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008630:	b29b      	uxth	r3, r3
 8008632:	4619      	mov	r1, r3
 8008634:	f107 0318 	add.w	r3, r7, #24
 8008638:	f107 0218 	add.w	r2, r7, #24
 800863c:	6812      	ldr	r2, [r2, #0]
 800863e:	440a      	add	r2, r1
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	463b      	mov	r3, r7
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	011a      	lsls	r2, r3, #4
 800864a:	f107 0318 	add.w	r3, r7, #24
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4413      	add	r3, r2
 8008652:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008656:	f107 0314 	add.w	r3, r7, #20
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008660:	2b00      	cmp	r3, #0
 8008662:	d11a      	bne.n	800869a <USB_EPStartXfer+0x38a>
 8008664:	f107 0314 	add.w	r3, r7, #20
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	b29b      	uxth	r3, r3
 800866e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008672:	b29a      	uxth	r2, r3
 8008674:	f107 0314 	add.w	r3, r7, #20
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	801a      	strh	r2, [r3, #0]
 800867c:	f107 0314 	add.w	r3, r7, #20
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	b29b      	uxth	r3, r3
 8008686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800868a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800868e:	b29a      	uxth	r2, r3
 8008690:	f107 0314 	add.w	r3, r7, #20
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	801a      	strh	r2, [r3, #0]
 8008698:	e067      	b.n	800876a <USB_EPStartXfer+0x45a>
 800869a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800869e:	2b3e      	cmp	r3, #62	; 0x3e
 80086a0:	d819      	bhi.n	80086d6 <USB_EPStartXfer+0x3c6>
 80086a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086a6:	085b      	lsrs	r3, r3, #1
 80086a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80086ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d004      	beq.n	80086c2 <USB_EPStartXfer+0x3b2>
 80086b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80086bc:	3301      	adds	r3, #1
 80086be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80086c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	029b      	lsls	r3, r3, #10
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	f107 0314 	add.w	r3, r7, #20
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	801a      	strh	r2, [r3, #0]
 80086d4:	e049      	b.n	800876a <USB_EPStartXfer+0x45a>
 80086d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086da:	095b      	lsrs	r3, r3, #5
 80086dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80086e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e4:	f003 031f 	and.w	r3, r3, #31
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d104      	bne.n	80086f6 <USB_EPStartXfer+0x3e6>
 80086ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80086f0:	3b01      	subs	r3, #1
 80086f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80086f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	029b      	lsls	r3, r3, #10
 80086fe:	b29b      	uxth	r3, r3
 8008700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008708:	b29a      	uxth	r2, r3
 800870a:	f107 0314 	add.w	r3, r7, #20
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	801a      	strh	r2, [r3, #0]
 8008712:	e02a      	b.n	800876a <USB_EPStartXfer+0x45a>
 8008714:	463b      	mov	r3, r7
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	785b      	ldrb	r3, [r3, #1]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d125      	bne.n	800876a <USB_EPStartXfer+0x45a>
 800871e:	f107 0320 	add.w	r3, r7, #32
 8008722:	1d3a      	adds	r2, r7, #4
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	1d3b      	adds	r3, r7, #4
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008730:	b29b      	uxth	r3, r3
 8008732:	4619      	mov	r1, r3
 8008734:	f107 0320 	add.w	r3, r7, #32
 8008738:	f107 0220 	add.w	r2, r7, #32
 800873c:	6812      	ldr	r2, [r2, #0]
 800873e:	440a      	add	r2, r1
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	463b      	mov	r3, r7
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	011a      	lsls	r2, r3, #4
 800874a:	f107 0320 	add.w	r3, r7, #32
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4413      	add	r3, r2
 8008752:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008756:	f107 031c 	add.w	r3, r7, #28
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008760:	b29a      	uxth	r2, r3
 8008762:	f107 031c 	add.w	r3, r7, #28
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800876a:	463b      	mov	r3, r7
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	891b      	ldrh	r3, [r3, #8]
 8008770:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008774:	463b      	mov	r3, r7
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6959      	ldr	r1, [r3, #20]
 800877a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800877e:	b29b      	uxth	r3, r3
 8008780:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008784:	1d38      	adds	r0, r7, #4
 8008786:	6800      	ldr	r0, [r0, #0]
 8008788:	f001 f9f7 	bl	8009b7a <USB_WritePMA>
 800878c:	f000 bcc6 	b.w	800911c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008790:	463b      	mov	r3, r7
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	785b      	ldrb	r3, [r3, #1]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d164      	bne.n	8008864 <USB_EPStartXfer+0x554>
 800879a:	1d3b      	adds	r3, r7, #4
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	64bb      	str	r3, [r7, #72]	; 0x48
 80087a0:	1d3b      	adds	r3, r7, #4
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	461a      	mov	r2, r3
 80087ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ae:	4413      	add	r3, r2
 80087b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80087b2:	463b      	mov	r3, r7
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	011a      	lsls	r2, r3, #4
 80087ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087bc:	4413      	add	r3, r2
 80087be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087c2:	647b      	str	r3, [r7, #68]	; 0x44
 80087c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d112      	bne.n	80087f2 <USB_EPStartXfer+0x4e2>
 80087cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087ce:	881b      	ldrh	r3, [r3, #0]
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087da:	801a      	strh	r2, [r3, #0]
 80087dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087ee:	801a      	strh	r2, [r3, #0]
 80087f0:	e057      	b.n	80088a2 <USB_EPStartXfer+0x592>
 80087f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087f6:	2b3e      	cmp	r3, #62	; 0x3e
 80087f8:	d817      	bhi.n	800882a <USB_EPStartXfer+0x51a>
 80087fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087fe:	085b      	lsrs	r3, r3, #1
 8008800:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	d004      	beq.n	800881a <USB_EPStartXfer+0x50a>
 8008810:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008814:	3301      	adds	r3, #1
 8008816:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800881a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800881e:	b29b      	uxth	r3, r3
 8008820:	029b      	lsls	r3, r3, #10
 8008822:	b29a      	uxth	r2, r3
 8008824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008826:	801a      	strh	r2, [r3, #0]
 8008828:	e03b      	b.n	80088a2 <USB_EPStartXfer+0x592>
 800882a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800882e:	095b      	lsrs	r3, r3, #5
 8008830:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008838:	f003 031f 	and.w	r3, r3, #31
 800883c:	2b00      	cmp	r3, #0
 800883e:	d104      	bne.n	800884a <USB_EPStartXfer+0x53a>
 8008840:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008844:	3b01      	subs	r3, #1
 8008846:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800884a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800884e:	b29b      	uxth	r3, r3
 8008850:	029b      	lsls	r3, r3, #10
 8008852:	b29b      	uxth	r3, r3
 8008854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800885c:	b29a      	uxth	r2, r3
 800885e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008860:	801a      	strh	r2, [r3, #0]
 8008862:	e01e      	b.n	80088a2 <USB_EPStartXfer+0x592>
 8008864:	463b      	mov	r3, r7
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	785b      	ldrb	r3, [r3, #1]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d119      	bne.n	80088a2 <USB_EPStartXfer+0x592>
 800886e:	1d3b      	adds	r3, r7, #4
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	653b      	str	r3, [r7, #80]	; 0x50
 8008874:	1d3b      	adds	r3, r7, #4
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800887c:	b29b      	uxth	r3, r3
 800887e:	461a      	mov	r2, r3
 8008880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008882:	4413      	add	r3, r2
 8008884:	653b      	str	r3, [r7, #80]	; 0x50
 8008886:	463b      	mov	r3, r7
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	011a      	lsls	r2, r3, #4
 800888e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008890:	4413      	add	r3, r2
 8008892:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800889c:	b29a      	uxth	r2, r3
 800889e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80088a2:	463b      	mov	r3, r7
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	891b      	ldrh	r3, [r3, #8]
 80088a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088ac:	463b      	mov	r3, r7
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6959      	ldr	r1, [r3, #20]
 80088b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80088bc:	1d38      	adds	r0, r7, #4
 80088be:	6800      	ldr	r0, [r0, #0]
 80088c0:	f001 f95b 	bl	8009b7a <USB_WritePMA>
            ep->xfer_buff += len;
 80088c4:	463b      	mov	r3, r7
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	695a      	ldr	r2, [r3, #20]
 80088ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ce:	441a      	add	r2, r3
 80088d0:	463b      	mov	r3, r7
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80088d6:	463b      	mov	r3, r7
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6a1a      	ldr	r2, [r3, #32]
 80088dc:	463b      	mov	r3, r7
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d909      	bls.n	80088fa <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80088e6:	463b      	mov	r3, r7
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6a1a      	ldr	r2, [r3, #32]
 80088ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f0:	1ad2      	subs	r2, r2, r3
 80088f2:	463b      	mov	r3, r7
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	621a      	str	r2, [r3, #32]
 80088f8:	e008      	b.n	800890c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80088fa:	463b      	mov	r3, r7
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008904:	463b      	mov	r3, r7
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2200      	movs	r2, #0
 800890a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800890c:	1d3b      	adds	r3, r7, #4
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	643b      	str	r3, [r7, #64]	; 0x40
 8008912:	463b      	mov	r3, r7
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	785b      	ldrb	r3, [r3, #1]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d164      	bne.n	80089e6 <USB_EPStartXfer+0x6d6>
 800891c:	1d3b      	adds	r3, r7, #4
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	63bb      	str	r3, [r7, #56]	; 0x38
 8008922:	1d3b      	adds	r3, r7, #4
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800892a:	b29b      	uxth	r3, r3
 800892c:	461a      	mov	r2, r3
 800892e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008930:	4413      	add	r3, r2
 8008932:	63bb      	str	r3, [r7, #56]	; 0x38
 8008934:	463b      	mov	r3, r7
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	011a      	lsls	r2, r3, #4
 800893c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893e:	4413      	add	r3, r2
 8008940:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008944:	637b      	str	r3, [r7, #52]	; 0x34
 8008946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800894a:	2b00      	cmp	r3, #0
 800894c:	d112      	bne.n	8008974 <USB_EPStartXfer+0x664>
 800894e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	b29b      	uxth	r3, r3
 8008954:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008958:	b29a      	uxth	r2, r3
 800895a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895c:	801a      	strh	r2, [r3, #0]
 800895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	b29b      	uxth	r3, r3
 8008964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800896c:	b29a      	uxth	r2, r3
 800896e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008970:	801a      	strh	r2, [r3, #0]
 8008972:	e054      	b.n	8008a1e <USB_EPStartXfer+0x70e>
 8008974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008978:	2b3e      	cmp	r3, #62	; 0x3e
 800897a:	d817      	bhi.n	80089ac <USB_EPStartXfer+0x69c>
 800897c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008980:	085b      	lsrs	r3, r3, #1
 8008982:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d004      	beq.n	800899c <USB_EPStartXfer+0x68c>
 8008992:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008996:	3301      	adds	r3, #1
 8008998:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800899c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	029b      	lsls	r3, r3, #10
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a8:	801a      	strh	r2, [r3, #0]
 80089aa:	e038      	b.n	8008a1e <USB_EPStartXfer+0x70e>
 80089ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089b0:	095b      	lsrs	r3, r3, #5
 80089b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80089b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ba:	f003 031f 	and.w	r3, r3, #31
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d104      	bne.n	80089cc <USB_EPStartXfer+0x6bc>
 80089c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80089c6:	3b01      	subs	r3, #1
 80089c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80089cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	029b      	lsls	r3, r3, #10
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089de:	b29a      	uxth	r2, r3
 80089e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e2:	801a      	strh	r2, [r3, #0]
 80089e4:	e01b      	b.n	8008a1e <USB_EPStartXfer+0x70e>
 80089e6:	463b      	mov	r3, r7
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	785b      	ldrb	r3, [r3, #1]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d116      	bne.n	8008a1e <USB_EPStartXfer+0x70e>
 80089f0:	1d3b      	adds	r3, r7, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	461a      	mov	r2, r3
 80089fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089fe:	4413      	add	r3, r2
 8008a00:	643b      	str	r3, [r7, #64]	; 0x40
 8008a02:	463b      	mov	r3, r7
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	011a      	lsls	r2, r3, #4
 8008a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008a1e:	463b      	mov	r3, r7
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	895b      	ldrh	r3, [r3, #10]
 8008a24:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a28:	463b      	mov	r3, r7
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6959      	ldr	r1, [r3, #20]
 8008a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008a38:	1d38      	adds	r0, r7, #4
 8008a3a:	6800      	ldr	r0, [r0, #0]
 8008a3c:	f001 f89d 	bl	8009b7a <USB_WritePMA>
 8008a40:	e36c      	b.n	800911c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008a42:	463b      	mov	r3, r7
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6a1b      	ldr	r3, [r3, #32]
 8008a48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008a4c:	1d3b      	adds	r3, r7, #4
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	463b      	mov	r3, r7
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a66:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008a6a:	1d3b      	adds	r3, r7, #4
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	463b      	mov	r3, r7
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	441a      	add	r2, r3
 8008a78:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a90:	1d3b      	adds	r3, r7, #4
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a96:	1d3b      	adds	r3, r7, #4
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aa4:	4413      	add	r3, r2
 8008aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008aa8:	463b      	mov	r3, r7
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	011a      	lsls	r2, r3, #4
 8008ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ab8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ac2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ac4:	463b      	mov	r3, r7
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	891b      	ldrh	r3, [r3, #8]
 8008aca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ace:	463b      	mov	r3, r7
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6959      	ldr	r1, [r3, #20]
 8008ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ade:	1d38      	adds	r0, r7, #4
 8008ae0:	6800      	ldr	r0, [r0, #0]
 8008ae2:	f001 f84a 	bl	8009b7a <USB_WritePMA>
 8008ae6:	e319      	b.n	800911c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008ae8:	1d3b      	adds	r3, r7, #4
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	463b      	mov	r3, r7
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	881b      	ldrh	r3, [r3, #0]
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b02:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008b06:	1d3b      	adds	r3, r7, #4
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	463b      	mov	r3, r7
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	441a      	add	r2, r3
 8008b14:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b20:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008b2c:	463b      	mov	r3, r7
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6a1a      	ldr	r2, [r3, #32]
 8008b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b36:	1ad2      	subs	r2, r2, r3
 8008b38:	463b      	mov	r3, r7
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b3e:	1d3b      	adds	r3, r7, #4
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	463b      	mov	r3, r7
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 8162 	beq.w	8008e1e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b5a:	1d3b      	adds	r3, r7, #4
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b62:	463b      	mov	r3, r7
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	785b      	ldrb	r3, [r3, #1]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d164      	bne.n	8008c36 <USB_EPStartXfer+0x926>
 8008b6c:	1d3b      	adds	r3, r7, #4
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b72:	1d3b      	adds	r3, r7, #4
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b80:	4413      	add	r3, r2
 8008b82:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b84:	463b      	mov	r3, r7
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	011a      	lsls	r2, r3, #4
 8008b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b8e:	4413      	add	r3, r2
 8008b90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b94:	677b      	str	r3, [r7, #116]	; 0x74
 8008b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d112      	bne.n	8008bc4 <USB_EPStartXfer+0x8b4>
 8008b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bac:	801a      	strh	r2, [r3, #0]
 8008bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bc0:	801a      	strh	r2, [r3, #0]
 8008bc2:	e057      	b.n	8008c74 <USB_EPStartXfer+0x964>
 8008bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bc8:	2b3e      	cmp	r3, #62	; 0x3e
 8008bca:	d817      	bhi.n	8008bfc <USB_EPStartXfer+0x8ec>
 8008bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bd0:	085b      	lsrs	r3, r3, #1
 8008bd2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d004      	beq.n	8008bec <USB_EPStartXfer+0x8dc>
 8008be2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008be6:	3301      	adds	r3, #1
 8008be8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008bec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	029b      	lsls	r3, r3, #10
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bf8:	801a      	strh	r2, [r3, #0]
 8008bfa:	e03b      	b.n	8008c74 <USB_EPStartXfer+0x964>
 8008bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c00:	095b      	lsrs	r3, r3, #5
 8008c02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c0a:	f003 031f 	and.w	r3, r3, #31
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d104      	bne.n	8008c1c <USB_EPStartXfer+0x90c>
 8008c12:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c16:	3b01      	subs	r3, #1
 8008c18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	029b      	lsls	r3, r3, #10
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c32:	801a      	strh	r2, [r3, #0]
 8008c34:	e01e      	b.n	8008c74 <USB_EPStartXfer+0x964>
 8008c36:	463b      	mov	r3, r7
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	785b      	ldrb	r3, [r3, #1]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d119      	bne.n	8008c74 <USB_EPStartXfer+0x964>
 8008c40:	1d3b      	adds	r3, r7, #4
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c50:	4413      	add	r3, r2
 8008c52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c56:	463b      	mov	r3, r7
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	011a      	lsls	r2, r3, #4
 8008c5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c62:	4413      	add	r3, r2
 8008c64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008c74:	463b      	mov	r3, r7
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	895b      	ldrh	r3, [r3, #10]
 8008c7a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c7e:	463b      	mov	r3, r7
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6959      	ldr	r1, [r3, #20]
 8008c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008c8e:	1d38      	adds	r0, r7, #4
 8008c90:	6800      	ldr	r0, [r0, #0]
 8008c92:	f000 ff72 	bl	8009b7a <USB_WritePMA>
          ep->xfer_buff += len;
 8008c96:	463b      	mov	r3, r7
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	695a      	ldr	r2, [r3, #20]
 8008c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ca0:	441a      	add	r2, r3
 8008ca2:	463b      	mov	r3, r7
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008ca8:	463b      	mov	r3, r7
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6a1a      	ldr	r2, [r3, #32]
 8008cae:	463b      	mov	r3, r7
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d909      	bls.n	8008ccc <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008cb8:	463b      	mov	r3, r7
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6a1a      	ldr	r2, [r3, #32]
 8008cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cc2:	1ad2      	subs	r2, r2, r3
 8008cc4:	463b      	mov	r3, r7
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	621a      	str	r2, [r3, #32]
 8008cca:	e008      	b.n	8008cde <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008ccc:	463b      	mov	r3, r7
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008cd6:	463b      	mov	r3, r7
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f000 821a 	beq.w	800911c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ce8:	463b      	mov	r3, r7
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	785b      	ldrb	r3, [r3, #1]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d164      	bne.n	8008dbc <USB_EPStartXfer+0xaac>
 8008cf2:	1d3b      	adds	r3, r7, #4
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008cf8:	1d3b      	adds	r3, r7, #4
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	461a      	mov	r2, r3
 8008d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d06:	4413      	add	r3, r2
 8008d08:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d0a:	463b      	mov	r3, r7
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	011a      	lsls	r2, r3, #4
 8008d12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d14:	4413      	add	r3, r2
 8008d16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d1a:	667b      	str	r3, [r7, #100]	; 0x64
 8008d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d112      	bne.n	8008d4a <USB_EPStartXfer+0xa3a>
 8008d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d32:	801a      	strh	r2, [r3, #0]
 8008d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d36:	881b      	ldrh	r3, [r3, #0]
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d46:	801a      	strh	r2, [r3, #0]
 8008d48:	e057      	b.n	8008dfa <USB_EPStartXfer+0xaea>
 8008d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d4e:	2b3e      	cmp	r3, #62	; 0x3e
 8008d50:	d817      	bhi.n	8008d82 <USB_EPStartXfer+0xa72>
 8008d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d56:	085b      	lsrs	r3, r3, #1
 8008d58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d004      	beq.n	8008d72 <USB_EPStartXfer+0xa62>
 8008d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	029b      	lsls	r3, r3, #10
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d7e:	801a      	strh	r2, [r3, #0]
 8008d80:	e03b      	b.n	8008dfa <USB_EPStartXfer+0xaea>
 8008d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d86:	095b      	lsrs	r3, r3, #5
 8008d88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d90:	f003 031f 	and.w	r3, r3, #31
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d104      	bne.n	8008da2 <USB_EPStartXfer+0xa92>
 8008d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	029b      	lsls	r3, r3, #10
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008db8:	801a      	strh	r2, [r3, #0]
 8008dba:	e01e      	b.n	8008dfa <USB_EPStartXfer+0xaea>
 8008dbc:	463b      	mov	r3, r7
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	785b      	ldrb	r3, [r3, #1]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d119      	bne.n	8008dfa <USB_EPStartXfer+0xaea>
 8008dc6:	1d3b      	adds	r3, r7, #4
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	673b      	str	r3, [r7, #112]	; 0x70
 8008dcc:	1d3b      	adds	r3, r7, #4
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dda:	4413      	add	r3, r2
 8008ddc:	673b      	str	r3, [r7, #112]	; 0x70
 8008dde:	463b      	mov	r3, r7
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	011a      	lsls	r2, r3, #4
 8008de6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008de8:	4413      	add	r3, r2
 8008dea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008dee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008df8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008dfa:	463b      	mov	r3, r7
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	891b      	ldrh	r3, [r3, #8]
 8008e00:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e04:	463b      	mov	r3, r7
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	6959      	ldr	r1, [r3, #20]
 8008e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008e14:	1d38      	adds	r0, r7, #4
 8008e16:	6800      	ldr	r0, [r0, #0]
 8008e18:	f000 feaf 	bl	8009b7a <USB_WritePMA>
 8008e1c:	e17e      	b.n	800911c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008e1e:	463b      	mov	r3, r7
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	785b      	ldrb	r3, [r3, #1]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d16f      	bne.n	8008f08 <USB_EPStartXfer+0xbf8>
 8008e28:	1d3b      	adds	r3, r7, #4
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e30:	1d3b      	adds	r3, r7, #4
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e40:	4413      	add	r3, r2
 8008e42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e46:	463b      	mov	r3, r7
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	011a      	lsls	r2, r3, #4
 8008e4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e52:	4413      	add	r3, r2
 8008e54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d116      	bne.n	8008e92 <USB_EPStartXfer+0xb82>
 8008e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e76:	801a      	strh	r2, [r3, #0]
 8008e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e8e:	801a      	strh	r2, [r3, #0]
 8008e90:	e05f      	b.n	8008f52 <USB_EPStartXfer+0xc42>
 8008e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e96:	2b3e      	cmp	r3, #62	; 0x3e
 8008e98:	d818      	bhi.n	8008ecc <USB_EPStartXfer+0xbbc>
 8008e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e9e:	085b      	lsrs	r3, r3, #1
 8008ea0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea8:	f003 0301 	and.w	r3, r3, #1
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d004      	beq.n	8008eba <USB_EPStartXfer+0xbaa>
 8008eb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008eba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	029b      	lsls	r3, r3, #10
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ec8:	801a      	strh	r2, [r3, #0]
 8008eca:	e042      	b.n	8008f52 <USB_EPStartXfer+0xc42>
 8008ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ed0:	095b      	lsrs	r3, r3, #5
 8008ed2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eda:	f003 031f 	and.w	r3, r3, #31
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d104      	bne.n	8008eec <USB_EPStartXfer+0xbdc>
 8008ee2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008eec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	029b      	lsls	r3, r3, #10
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f04:	801a      	strh	r2, [r3, #0]
 8008f06:	e024      	b.n	8008f52 <USB_EPStartXfer+0xc42>
 8008f08:	463b      	mov	r3, r7
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d11f      	bne.n	8008f52 <USB_EPStartXfer+0xc42>
 8008f12:	1d3b      	adds	r3, r7, #4
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f1a:	1d3b      	adds	r3, r7, #4
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	461a      	mov	r2, r3
 8008f26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f30:	463b      	mov	r3, r7
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	011a      	lsls	r2, r3, #4
 8008f38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008f3c:	4413      	add	r3, r2
 8008f3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f50:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008f52:	463b      	mov	r3, r7
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	891b      	ldrh	r3, [r3, #8]
 8008f58:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f5c:	463b      	mov	r3, r7
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6959      	ldr	r1, [r3, #20]
 8008f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f6c:	1d38      	adds	r0, r7, #4
 8008f6e:	6800      	ldr	r0, [r0, #0]
 8008f70:	f000 fe03 	bl	8009b7a <USB_WritePMA>
          ep->xfer_buff += len;
 8008f74:	463b      	mov	r3, r7
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	695a      	ldr	r2, [r3, #20]
 8008f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f7e:	441a      	add	r2, r3
 8008f80:	463b      	mov	r3, r7
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008f86:	463b      	mov	r3, r7
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6a1a      	ldr	r2, [r3, #32]
 8008f8c:	463b      	mov	r3, r7
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d909      	bls.n	8008faa <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8008f96:	463b      	mov	r3, r7
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6a1a      	ldr	r2, [r3, #32]
 8008f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa0:	1ad2      	subs	r2, r2, r3
 8008fa2:	463b      	mov	r3, r7
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	621a      	str	r2, [r3, #32]
 8008fa8:	e008      	b.n	8008fbc <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8008faa:	463b      	mov	r3, r7
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6a1b      	ldr	r3, [r3, #32]
 8008fb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008fb4:	463b      	mov	r3, r7
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f000 80ab 	beq.w	800911c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008fc6:	1d3b      	adds	r3, r7, #4
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fce:	463b      	mov	r3, r7
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	785b      	ldrb	r3, [r3, #1]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d16f      	bne.n	80090b8 <USB_EPStartXfer+0xda8>
 8008fd8:	1d3b      	adds	r3, r7, #4
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008fe0:	1d3b      	adds	r3, r7, #4
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	461a      	mov	r2, r3
 8008fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ff6:	463b      	mov	r3, r7
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	011a      	lsls	r2, r3, #4
 8008ffe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009002:	4413      	add	r3, r2
 8009004:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800900c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009010:	2b00      	cmp	r3, #0
 8009012:	d116      	bne.n	8009042 <USB_EPStartXfer+0xd32>
 8009014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	b29b      	uxth	r3, r3
 800901c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009020:	b29a      	uxth	r2, r3
 8009022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009026:	801a      	strh	r2, [r3, #0]
 8009028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	b29b      	uxth	r3, r3
 8009030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009038:	b29a      	uxth	r2, r3
 800903a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800903e:	801a      	strh	r2, [r3, #0]
 8009040:	e05b      	b.n	80090fa <USB_EPStartXfer+0xdea>
 8009042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009046:	2b3e      	cmp	r3, #62	; 0x3e
 8009048:	d818      	bhi.n	800907c <USB_EPStartXfer+0xd6c>
 800904a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800904e:	085b      	lsrs	r3, r3, #1
 8009050:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009058:	f003 0301 	and.w	r3, r3, #1
 800905c:	2b00      	cmp	r3, #0
 800905e:	d004      	beq.n	800906a <USB_EPStartXfer+0xd5a>
 8009060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009064:	3301      	adds	r3, #1
 8009066:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800906a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800906e:	b29b      	uxth	r3, r3
 8009070:	029b      	lsls	r3, r3, #10
 8009072:	b29a      	uxth	r2, r3
 8009074:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009078:	801a      	strh	r2, [r3, #0]
 800907a:	e03e      	b.n	80090fa <USB_EPStartXfer+0xdea>
 800907c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009080:	095b      	lsrs	r3, r3, #5
 8009082:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800908a:	f003 031f 	and.w	r3, r3, #31
 800908e:	2b00      	cmp	r3, #0
 8009090:	d104      	bne.n	800909c <USB_EPStartXfer+0xd8c>
 8009092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009096:	3b01      	subs	r3, #1
 8009098:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800909c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	029b      	lsls	r3, r3, #10
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090b4:	801a      	strh	r2, [r3, #0]
 80090b6:	e020      	b.n	80090fa <USB_EPStartXfer+0xdea>
 80090b8:	463b      	mov	r3, r7
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	785b      	ldrb	r3, [r3, #1]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d11b      	bne.n	80090fa <USB_EPStartXfer+0xdea>
 80090c2:	1d3b      	adds	r3, r7, #4
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	461a      	mov	r2, r3
 80090ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090d2:	4413      	add	r3, r2
 80090d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090d8:	463b      	mov	r3, r7
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	011a      	lsls	r2, r3, #4
 80090e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090e4:	4413      	add	r3, r2
 80090e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80090ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80090ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80090fa:	463b      	mov	r3, r7
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	895b      	ldrh	r3, [r3, #10]
 8009100:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009104:	463b      	mov	r3, r7
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6959      	ldr	r1, [r3, #20]
 800910a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800910e:	b29b      	uxth	r3, r3
 8009110:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009114:	1d38      	adds	r0, r7, #4
 8009116:	6800      	ldr	r0, [r0, #0]
 8009118:	f000 fd2f 	bl	8009b7a <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800911c:	1d3b      	adds	r3, r7, #4
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	463b      	mov	r3, r7
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	b29b      	uxth	r3, r3
 800912e:	f107 020a 	add.w	r2, r7, #10
 8009132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800913a:	8013      	strh	r3, [r2, #0]
 800913c:	f107 030a 	add.w	r3, r7, #10
 8009140:	f107 020a 	add.w	r2, r7, #10
 8009144:	8812      	ldrh	r2, [r2, #0]
 8009146:	f082 0210 	eor.w	r2, r2, #16
 800914a:	801a      	strh	r2, [r3, #0]
 800914c:	f107 030a 	add.w	r3, r7, #10
 8009150:	f107 020a 	add.w	r2, r7, #10
 8009154:	8812      	ldrh	r2, [r2, #0]
 8009156:	f082 0220 	eor.w	r2, r2, #32
 800915a:	801a      	strh	r2, [r3, #0]
 800915c:	1d3b      	adds	r3, r7, #4
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	463b      	mov	r3, r7
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	441a      	add	r2, r3
 800916a:	f107 030a 	add.w	r3, r7, #10
 800916e:	881b      	ldrh	r3, [r3, #0]
 8009170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800917c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009180:	b29b      	uxth	r3, r3
 8009182:	8013      	strh	r3, [r2, #0]
 8009184:	e3b5      	b.n	80098f2 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009186:	463b      	mov	r3, r7
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	7b1b      	ldrb	r3, [r3, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	f040 8090 	bne.w	80092b2 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009192:	463b      	mov	r3, r7
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	699a      	ldr	r2, [r3, #24]
 8009198:	463b      	mov	r3, r7
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d90e      	bls.n	80091c0 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80091a2:	463b      	mov	r3, r7
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80091ac:	463b      	mov	r3, r7
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699a      	ldr	r2, [r3, #24]
 80091b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091b6:	1ad2      	subs	r2, r2, r3
 80091b8:	463b      	mov	r3, r7
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	619a      	str	r2, [r3, #24]
 80091be:	e008      	b.n	80091d2 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80091c0:	463b      	mov	r3, r7
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80091ca:	463b      	mov	r3, r7
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2200      	movs	r2, #0
 80091d0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80091d2:	1d3b      	adds	r3, r7, #4
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091da:	1d3b      	adds	r3, r7, #4
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	461a      	mov	r2, r3
 80091e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80091ea:	4413      	add	r3, r2
 80091ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091f0:	463b      	mov	r3, r7
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	011a      	lsls	r2, r3, #4
 80091f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80091fc:	4413      	add	r3, r2
 80091fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800920a:	2b00      	cmp	r3, #0
 800920c:	d116      	bne.n	800923c <USB_EPStartXfer+0xf2c>
 800920e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	b29b      	uxth	r3, r3
 8009216:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800921a:	b29a      	uxth	r2, r3
 800921c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009220:	801a      	strh	r2, [r3, #0]
 8009222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009226:	881b      	ldrh	r3, [r3, #0]
 8009228:	b29b      	uxth	r3, r3
 800922a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800922e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009232:	b29a      	uxth	r2, r3
 8009234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009238:	801a      	strh	r2, [r3, #0]
 800923a:	e32c      	b.n	8009896 <USB_EPStartXfer+0x1586>
 800923c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009240:	2b3e      	cmp	r3, #62	; 0x3e
 8009242:	d818      	bhi.n	8009276 <USB_EPStartXfer+0xf66>
 8009244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009248:	085b      	lsrs	r3, r3, #1
 800924a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800924e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009252:	f003 0301 	and.w	r3, r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	d004      	beq.n	8009264 <USB_EPStartXfer+0xf54>
 800925a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800925e:	3301      	adds	r3, #1
 8009260:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009264:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009268:	b29b      	uxth	r3, r3
 800926a:	029b      	lsls	r3, r3, #10
 800926c:	b29a      	uxth	r2, r3
 800926e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009272:	801a      	strh	r2, [r3, #0]
 8009274:	e30f      	b.n	8009896 <USB_EPStartXfer+0x1586>
 8009276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800927a:	095b      	lsrs	r3, r3, #5
 800927c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009284:	f003 031f 	and.w	r3, r3, #31
 8009288:	2b00      	cmp	r3, #0
 800928a:	d104      	bne.n	8009296 <USB_EPStartXfer+0xf86>
 800928c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009290:	3b01      	subs	r3, #1
 8009292:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009296:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800929a:	b29b      	uxth	r3, r3
 800929c:	029b      	lsls	r3, r3, #10
 800929e:	b29b      	uxth	r3, r3
 80092a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092ae:	801a      	strh	r2, [r3, #0]
 80092b0:	e2f1      	b.n	8009896 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80092b2:	463b      	mov	r3, r7
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	78db      	ldrb	r3, [r3, #3]
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	f040 818f 	bne.w	80095dc <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80092be:	463b      	mov	r3, r7
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	785b      	ldrb	r3, [r3, #1]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d175      	bne.n	80093b4 <USB_EPStartXfer+0x10a4>
 80092c8:	1d3b      	adds	r3, r7, #4
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80092d0:	1d3b      	adds	r3, r7, #4
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092d8:	b29b      	uxth	r3, r3
 80092da:	461a      	mov	r2, r3
 80092dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80092e0:	4413      	add	r3, r2
 80092e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80092e6:	463b      	mov	r3, r7
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	011a      	lsls	r2, r3, #4
 80092ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80092f2:	4413      	add	r3, r2
 80092f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092fc:	463b      	mov	r3, r7
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d116      	bne.n	8009334 <USB_EPStartXfer+0x1024>
 8009306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	b29b      	uxth	r3, r3
 800930e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009312:	b29a      	uxth	r2, r3
 8009314:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009318:	801a      	strh	r2, [r3, #0]
 800931a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	b29b      	uxth	r3, r3
 8009322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800932a:	b29a      	uxth	r2, r3
 800932c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009330:	801a      	strh	r2, [r3, #0]
 8009332:	e065      	b.n	8009400 <USB_EPStartXfer+0x10f0>
 8009334:	463b      	mov	r3, r7
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	2b3e      	cmp	r3, #62	; 0x3e
 800933c:	d81a      	bhi.n	8009374 <USB_EPStartXfer+0x1064>
 800933e:	463b      	mov	r3, r7
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	085b      	lsrs	r3, r3, #1
 8009346:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800934a:	463b      	mov	r3, r7
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b00      	cmp	r3, #0
 8009356:	d004      	beq.n	8009362 <USB_EPStartXfer+0x1052>
 8009358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800935c:	3301      	adds	r3, #1
 800935e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009366:	b29b      	uxth	r3, r3
 8009368:	029b      	lsls	r3, r3, #10
 800936a:	b29a      	uxth	r2, r3
 800936c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009370:	801a      	strh	r2, [r3, #0]
 8009372:	e045      	b.n	8009400 <USB_EPStartXfer+0x10f0>
 8009374:	463b      	mov	r3, r7
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	095b      	lsrs	r3, r3, #5
 800937c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009380:	463b      	mov	r3, r7
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	f003 031f 	and.w	r3, r3, #31
 800938a:	2b00      	cmp	r3, #0
 800938c:	d104      	bne.n	8009398 <USB_EPStartXfer+0x1088>
 800938e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009392:	3b01      	subs	r3, #1
 8009394:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800939c:	b29b      	uxth	r3, r3
 800939e:	029b      	lsls	r3, r3, #10
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093b0:	801a      	strh	r2, [r3, #0]
 80093b2:	e025      	b.n	8009400 <USB_EPStartXfer+0x10f0>
 80093b4:	463b      	mov	r3, r7
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	785b      	ldrb	r3, [r3, #1]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d120      	bne.n	8009400 <USB_EPStartXfer+0x10f0>
 80093be:	1d3b      	adds	r3, r7, #4
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80093c6:	1d3b      	adds	r3, r7, #4
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	461a      	mov	r2, r3
 80093d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80093d6:	4413      	add	r3, r2
 80093d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80093dc:	463b      	mov	r3, r7
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	011a      	lsls	r2, r3, #4
 80093e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80093e8:	4413      	add	r3, r2
 80093ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80093f2:	463b      	mov	r3, r7
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80093fe:	801a      	strh	r2, [r3, #0]
 8009400:	1d3b      	adds	r3, r7, #4
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009408:	463b      	mov	r3, r7
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	785b      	ldrb	r3, [r3, #1]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d175      	bne.n	80094fe <USB_EPStartXfer+0x11ee>
 8009412:	1d3b      	adds	r3, r7, #4
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800941a:	1d3b      	adds	r3, r7, #4
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009422:	b29b      	uxth	r3, r3
 8009424:	461a      	mov	r2, r3
 8009426:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800942a:	4413      	add	r3, r2
 800942c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009430:	463b      	mov	r3, r7
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	011a      	lsls	r2, r3, #4
 8009438:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800943c:	4413      	add	r3, r2
 800943e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009442:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009446:	463b      	mov	r3, r7
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d116      	bne.n	800947e <USB_EPStartXfer+0x116e>
 8009450:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009454:	881b      	ldrh	r3, [r3, #0]
 8009456:	b29b      	uxth	r3, r3
 8009458:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800945c:	b29a      	uxth	r2, r3
 800945e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009462:	801a      	strh	r2, [r3, #0]
 8009464:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	b29b      	uxth	r3, r3
 800946c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009474:	b29a      	uxth	r2, r3
 8009476:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800947a:	801a      	strh	r2, [r3, #0]
 800947c:	e061      	b.n	8009542 <USB_EPStartXfer+0x1232>
 800947e:	463b      	mov	r3, r7
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	2b3e      	cmp	r3, #62	; 0x3e
 8009486:	d81a      	bhi.n	80094be <USB_EPStartXfer+0x11ae>
 8009488:	463b      	mov	r3, r7
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	085b      	lsrs	r3, r3, #1
 8009490:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009494:	463b      	mov	r3, r7
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	f003 0301 	and.w	r3, r3, #1
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d004      	beq.n	80094ac <USB_EPStartXfer+0x119c>
 80094a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80094a6:	3301      	adds	r3, #1
 80094a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80094ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	029b      	lsls	r3, r3, #10
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094ba:	801a      	strh	r2, [r3, #0]
 80094bc:	e041      	b.n	8009542 <USB_EPStartXfer+0x1232>
 80094be:	463b      	mov	r3, r7
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	095b      	lsrs	r3, r3, #5
 80094c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80094ca:	463b      	mov	r3, r7
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	f003 031f 	and.w	r3, r3, #31
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d104      	bne.n	80094e2 <USB_EPStartXfer+0x11d2>
 80094d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80094dc:	3b01      	subs	r3, #1
 80094de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80094e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	029b      	lsls	r3, r3, #10
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094fa:	801a      	strh	r2, [r3, #0]
 80094fc:	e021      	b.n	8009542 <USB_EPStartXfer+0x1232>
 80094fe:	463b      	mov	r3, r7
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	785b      	ldrb	r3, [r3, #1]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d11c      	bne.n	8009542 <USB_EPStartXfer+0x1232>
 8009508:	1d3b      	adds	r3, r7, #4
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009510:	b29b      	uxth	r3, r3
 8009512:	461a      	mov	r2, r3
 8009514:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009518:	4413      	add	r3, r2
 800951a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800951e:	463b      	mov	r3, r7
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	011a      	lsls	r2, r3, #4
 8009526:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800952a:	4413      	add	r3, r2
 800952c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009530:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009534:	463b      	mov	r3, r7
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	b29a      	uxth	r2, r3
 800953c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009540:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009542:	463b      	mov	r3, r7
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69db      	ldr	r3, [r3, #28]
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 81a4 	beq.w	8009896 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800954e:	1d3b      	adds	r3, r7, #4
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	463b      	mov	r3, r7
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	881b      	ldrh	r3, [r3, #0]
 800955e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009562:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d005      	beq.n	800957a <USB_EPStartXfer+0x126a>
 800956e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10d      	bne.n	8009596 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800957a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800957e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009582:	2b00      	cmp	r3, #0
 8009584:	f040 8187 	bne.w	8009896 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009588:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800958c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009590:	2b00      	cmp	r3, #0
 8009592:	f040 8180 	bne.w	8009896 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009596:	1d3b      	adds	r3, r7, #4
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	463b      	mov	r3, r7
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095b0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80095b4:	1d3b      	adds	r3, r7, #4
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	463b      	mov	r3, r7
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	441a      	add	r2, r3
 80095c2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80095c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	8013      	strh	r3, [r2, #0]
 80095da:	e15c      	b.n	8009896 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80095dc:	463b      	mov	r3, r7
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	78db      	ldrb	r3, [r3, #3]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	f040 8155 	bne.w	8009892 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80095e8:	463b      	mov	r3, r7
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	699a      	ldr	r2, [r3, #24]
 80095ee:	463b      	mov	r3, r7
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d90e      	bls.n	8009616 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80095f8:	463b      	mov	r3, r7
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8009602:	463b      	mov	r3, r7
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	699a      	ldr	r2, [r3, #24]
 8009608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800960c:	1ad2      	subs	r2, r2, r3
 800960e:	463b      	mov	r3, r7
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	619a      	str	r2, [r3, #24]
 8009614:	e008      	b.n	8009628 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8009616:	463b      	mov	r3, r7
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009620:	463b      	mov	r3, r7
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2200      	movs	r2, #0
 8009626:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009628:	463b      	mov	r3, r7
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	785b      	ldrb	r3, [r3, #1]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d16f      	bne.n	8009712 <USB_EPStartXfer+0x1402>
 8009632:	1d3b      	adds	r3, r7, #4
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800963a:	1d3b      	adds	r3, r7, #4
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009642:	b29b      	uxth	r3, r3
 8009644:	461a      	mov	r2, r3
 8009646:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800964a:	4413      	add	r3, r2
 800964c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009650:	463b      	mov	r3, r7
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	011a      	lsls	r2, r3, #4
 8009658:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800965c:	4413      	add	r3, r2
 800965e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009662:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800966a:	2b00      	cmp	r3, #0
 800966c:	d116      	bne.n	800969c <USB_EPStartXfer+0x138c>
 800966e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	b29b      	uxth	r3, r3
 8009676:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800967a:	b29a      	uxth	r2, r3
 800967c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009680:	801a      	strh	r2, [r3, #0]
 8009682:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009686:	881b      	ldrh	r3, [r3, #0]
 8009688:	b29b      	uxth	r3, r3
 800968a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800968e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009692:	b29a      	uxth	r2, r3
 8009694:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009698:	801a      	strh	r2, [r3, #0]
 800969a:	e05f      	b.n	800975c <USB_EPStartXfer+0x144c>
 800969c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a0:	2b3e      	cmp	r3, #62	; 0x3e
 80096a2:	d818      	bhi.n	80096d6 <USB_EPStartXfer+0x13c6>
 80096a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a8:	085b      	lsrs	r3, r3, #1
 80096aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80096ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096b2:	f003 0301 	and.w	r3, r3, #1
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d004      	beq.n	80096c4 <USB_EPStartXfer+0x13b4>
 80096ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096be:	3301      	adds	r3, #1
 80096c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80096c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	029b      	lsls	r3, r3, #10
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096d2:	801a      	strh	r2, [r3, #0]
 80096d4:	e042      	b.n	800975c <USB_EPStartXfer+0x144c>
 80096d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096da:	095b      	lsrs	r3, r3, #5
 80096dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80096e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096e4:	f003 031f 	and.w	r3, r3, #31
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d104      	bne.n	80096f6 <USB_EPStartXfer+0x13e6>
 80096ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096f0:	3b01      	subs	r3, #1
 80096f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80096f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	029b      	lsls	r3, r3, #10
 80096fe:	b29b      	uxth	r3, r3
 8009700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009708:	b29a      	uxth	r2, r3
 800970a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800970e:	801a      	strh	r2, [r3, #0]
 8009710:	e024      	b.n	800975c <USB_EPStartXfer+0x144c>
 8009712:	463b      	mov	r3, r7
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	785b      	ldrb	r3, [r3, #1]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d11f      	bne.n	800975c <USB_EPStartXfer+0x144c>
 800971c:	1d3b      	adds	r3, r7, #4
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009724:	1d3b      	adds	r3, r7, #4
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800972c:	b29b      	uxth	r3, r3
 800972e:	461a      	mov	r2, r3
 8009730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009734:	4413      	add	r3, r2
 8009736:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800973a:	463b      	mov	r3, r7
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	011a      	lsls	r2, r3, #4
 8009742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009746:	4413      	add	r3, r2
 8009748:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800974c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009754:	b29a      	uxth	r2, r3
 8009756:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800975a:	801a      	strh	r2, [r3, #0]
 800975c:	1d3b      	adds	r3, r7, #4
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009764:	463b      	mov	r3, r7
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	785b      	ldrb	r3, [r3, #1]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d16f      	bne.n	800984e <USB_EPStartXfer+0x153e>
 800976e:	1d3b      	adds	r3, r7, #4
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009776:	1d3b      	adds	r3, r7, #4
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800977e:	b29b      	uxth	r3, r3
 8009780:	461a      	mov	r2, r3
 8009782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009786:	4413      	add	r3, r2
 8009788:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800978c:	463b      	mov	r3, r7
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	011a      	lsls	r2, r3, #4
 8009794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009798:	4413      	add	r3, r2
 800979a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800979e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d116      	bne.n	80097d8 <USB_EPStartXfer+0x14c8>
 80097aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097ae:	881b      	ldrh	r3, [r3, #0]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097bc:	801a      	strh	r2, [r3, #0]
 80097be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097c2:	881b      	ldrh	r3, [r3, #0]
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097d4:	801a      	strh	r2, [r3, #0]
 80097d6:	e05e      	b.n	8009896 <USB_EPStartXfer+0x1586>
 80097d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097dc:	2b3e      	cmp	r3, #62	; 0x3e
 80097de:	d818      	bhi.n	8009812 <USB_EPStartXfer+0x1502>
 80097e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097e4:	085b      	lsrs	r3, r3, #1
 80097e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80097ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d004      	beq.n	8009800 <USB_EPStartXfer+0x14f0>
 80097f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80097fa:	3301      	adds	r3, #1
 80097fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009800:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009804:	b29b      	uxth	r3, r3
 8009806:	029b      	lsls	r3, r3, #10
 8009808:	b29a      	uxth	r2, r3
 800980a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800980e:	801a      	strh	r2, [r3, #0]
 8009810:	e041      	b.n	8009896 <USB_EPStartXfer+0x1586>
 8009812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009816:	095b      	lsrs	r3, r3, #5
 8009818:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800981c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009820:	f003 031f 	and.w	r3, r3, #31
 8009824:	2b00      	cmp	r3, #0
 8009826:	d104      	bne.n	8009832 <USB_EPStartXfer+0x1522>
 8009828:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800982c:	3b01      	subs	r3, #1
 800982e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009836:	b29b      	uxth	r3, r3
 8009838:	029b      	lsls	r3, r3, #10
 800983a:	b29b      	uxth	r3, r3
 800983c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009844:	b29a      	uxth	r2, r3
 8009846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800984a:	801a      	strh	r2, [r3, #0]
 800984c:	e023      	b.n	8009896 <USB_EPStartXfer+0x1586>
 800984e:	463b      	mov	r3, r7
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	785b      	ldrb	r3, [r3, #1]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d11e      	bne.n	8009896 <USB_EPStartXfer+0x1586>
 8009858:	1d3b      	adds	r3, r7, #4
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009860:	b29b      	uxth	r3, r3
 8009862:	461a      	mov	r2, r3
 8009864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009868:	4413      	add	r3, r2
 800986a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800986e:	463b      	mov	r3, r7
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	011a      	lsls	r2, r3, #4
 8009876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800987a:	4413      	add	r3, r2
 800987c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009880:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009888:	b29a      	uxth	r2, r3
 800988a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800988e:	801a      	strh	r2, [r3, #0]
 8009890:	e001      	b.n	8009896 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e02e      	b.n	80098f4 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009896:	1d3b      	adds	r3, r7, #4
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	463b      	mov	r3, r7
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	881b      	ldrh	r3, [r3, #0]
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098b0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80098b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80098b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80098bc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80098c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80098c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80098c8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80098cc:	1d3b      	adds	r3, r7, #4
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	463b      	mov	r3, r7
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	441a      	add	r2, r3
 80098da:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80098de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098fe:	b480      	push	{r7}
 8009900:	b085      	sub	sp, #20
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	785b      	ldrb	r3, [r3, #1]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d020      	beq.n	8009952 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	b29b      	uxth	r3, r3
 800991e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009926:	81bb      	strh	r3, [r7, #12]
 8009928:	89bb      	ldrh	r3, [r7, #12]
 800992a:	f083 0310 	eor.w	r3, r3, #16
 800992e:	81bb      	strh	r3, [r7, #12]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	441a      	add	r2, r3
 800993a:	89bb      	ldrh	r3, [r7, #12]
 800993c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800994c:	b29b      	uxth	r3, r3
 800994e:	8013      	strh	r3, [r2, #0]
 8009950:	e01f      	b.n	8009992 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	b29b      	uxth	r3, r3
 8009960:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009968:	81fb      	strh	r3, [r7, #14]
 800996a:	89fb      	ldrh	r3, [r7, #14]
 800996c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009970:	81fb      	strh	r3, [r7, #14]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	441a      	add	r2, r3
 800997c:	89fb      	ldrh	r3, [r7, #14]
 800997e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800998a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800998e:	b29b      	uxth	r3, r3
 8009990:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	bc80      	pop	{r7}
 800999c:	4770      	bx	lr

0800999e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800999e:	b480      	push	{r7}
 80099a0:	b087      	sub	sp, #28
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	7b1b      	ldrb	r3, [r3, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f040 809d 	bne.w	8009aec <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	785b      	ldrb	r3, [r3, #1]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d04c      	beq.n	8009a54 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	823b      	strh	r3, [r7, #16]
 80099c8:	8a3b      	ldrh	r3, [r7, #16]
 80099ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d01b      	beq.n	8009a0a <USB_EPClearStall+0x6c>
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	881b      	ldrh	r3, [r3, #0]
 80099de:	b29b      	uxth	r3, r3
 80099e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e8:	81fb      	strh	r3, [r7, #14]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	441a      	add	r2, r3
 80099f4:	89fb      	ldrh	r3, [r7, #14]
 80099f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	78db      	ldrb	r3, [r3, #3]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d06c      	beq.n	8009aec <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4413      	add	r3, r2
 8009a1c:	881b      	ldrh	r3, [r3, #0]
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a28:	81bb      	strh	r3, [r7, #12]
 8009a2a:	89bb      	ldrh	r3, [r7, #12]
 8009a2c:	f083 0320 	eor.w	r3, r3, #32
 8009a30:	81bb      	strh	r3, [r7, #12]
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	441a      	add	r2, r3
 8009a3c:	89bb      	ldrh	r3, [r7, #12]
 8009a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	8013      	strh	r3, [r2, #0]
 8009a52:	e04b      	b.n	8009aec <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	82fb      	strh	r3, [r7, #22]
 8009a62:	8afb      	ldrh	r3, [r7, #22]
 8009a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d01b      	beq.n	8009aa4 <USB_EPClearStall+0x106>
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4413      	add	r3, r2
 8009a76:	881b      	ldrh	r3, [r3, #0]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a82:	82bb      	strh	r3, [r7, #20]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	441a      	add	r2, r3
 8009a8e:	8abb      	ldrh	r3, [r7, #20]
 8009a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aba:	827b      	strh	r3, [r7, #18]
 8009abc:	8a7b      	ldrh	r3, [r7, #18]
 8009abe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ac2:	827b      	strh	r3, [r7, #18]
 8009ac4:	8a7b      	ldrh	r3, [r7, #18]
 8009ac6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009aca:	827b      	strh	r3, [r7, #18]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	441a      	add	r2, r3
 8009ad6:	8a7b      	ldrh	r3, [r7, #18]
 8009ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	371c      	adds	r7, #28
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bc80      	pop	{r7}
 8009af6:	4770      	bx	lr

08009af8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	460b      	mov	r3, r1
 8009b02:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d103      	bne.n	8009b12 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2280      	movs	r2, #128	; 0x80
 8009b0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bc80      	pop	{r7}
 8009b1c:	4770      	bx	lr

08009b1e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b083      	sub	sp, #12
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bc80      	pop	{r7}
 8009b30:	4770      	bx	lr

08009b32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009b32:	b480      	push	{r7}
 8009b34:	b083      	sub	sp, #12
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bc80      	pop	{r7}
 8009b44:	4770      	bx	lr

08009b46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b085      	sub	sp, #20
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009b58:	68fb      	ldr	r3, [r7, #12]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bc80      	pop	{r7}
 8009b62:	4770      	bx	lr

08009b64 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bc80      	pop	{r7}
 8009b78:	4770      	bx	lr

08009b7a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b7a:	b480      	push	{r7}
 8009b7c:	b08d      	sub	sp, #52	; 0x34
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	60f8      	str	r0, [r7, #12]
 8009b82:	60b9      	str	r1, [r7, #8]
 8009b84:	4611      	mov	r1, r2
 8009b86:	461a      	mov	r2, r3
 8009b88:	460b      	mov	r3, r1
 8009b8a:	80fb      	strh	r3, [r7, #6]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009b90:	88bb      	ldrh	r3, [r7, #4]
 8009b92:	3301      	adds	r3, #1
 8009b94:	085b      	lsrs	r3, r3, #1
 8009b96:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ba0:	88fb      	ldrh	r3, [r7, #6]
 8009ba2:	005a      	lsls	r2, r3, #1
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bac:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bb2:	e01e      	b.n	8009bf2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	021b      	lsls	r3, r3, #8
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	461a      	mov	r2, r3
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bdc:	3302      	adds	r3, #2
 8009bde:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be2:	3302      	adds	r3, #2
 8009be4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	3301      	adds	r3, #1
 8009bea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1dd      	bne.n	8009bb4 <USB_WritePMA+0x3a>
  }
}
 8009bf8:	bf00      	nop
 8009bfa:	bf00      	nop
 8009bfc:	3734      	adds	r7, #52	; 0x34
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bc80      	pop	{r7}
 8009c02:	4770      	bx	lr

08009c04 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b08b      	sub	sp, #44	; 0x2c
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	4611      	mov	r1, r2
 8009c10:	461a      	mov	r2, r3
 8009c12:	460b      	mov	r3, r1
 8009c14:	80fb      	strh	r3, [r7, #6]
 8009c16:	4613      	mov	r3, r2
 8009c18:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009c1a:	88bb      	ldrh	r3, [r7, #4]
 8009c1c:	085b      	lsrs	r3, r3, #1
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c2a:	88fb      	ldrh	r3, [r7, #6]
 8009c2c:	005a      	lsls	r2, r3, #1
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	4413      	add	r3, r2
 8009c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c36:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c3c:	e01b      	b.n	8009c76 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009c3e:	6a3b      	ldr	r3, [r7, #32]
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009c46:	6a3b      	ldr	r3, [r7, #32]
 8009c48:	3302      	adds	r3, #2
 8009c4a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	3301      	adds	r3, #1
 8009c58:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	0a1b      	lsrs	r3, r3, #8
 8009c5e:	b2da      	uxtb	r2, r3
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	3301      	adds	r3, #1
 8009c68:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009c6a:	6a3b      	ldr	r3, [r7, #32]
 8009c6c:	3302      	adds	r3, #2
 8009c6e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	3b01      	subs	r3, #1
 8009c74:	627b      	str	r3, [r7, #36]	; 0x24
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1e0      	bne.n	8009c3e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009c7c:	88bb      	ldrh	r3, [r7, #4]
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d007      	beq.n	8009c98 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009c88:	6a3b      	ldr	r3, [r7, #32]
 8009c8a:	881b      	ldrh	r3, [r3, #0]
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	701a      	strb	r2, [r3, #0]
  }
}
 8009c98:	bf00      	nop
 8009c9a:	372c      	adds	r7, #44	; 0x2c
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bc80      	pop	{r7}
 8009ca0:	4770      	bx	lr

08009ca2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b084      	sub	sp, #16
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
 8009caa:	460b      	mov	r3, r1
 8009cac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	7c1b      	ldrb	r3, [r3, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d115      	bne.n	8009ce6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	2181      	movs	r1, #129	; 0x81
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f005 f811 	bl	800ecea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cd2:	2202      	movs	r2, #2
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f005 f807 	bl	800ecea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009ce4:	e012      	b.n	8009d0c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ce6:	2340      	movs	r3, #64	; 0x40
 8009ce8:	2202      	movs	r2, #2
 8009cea:	2181      	movs	r1, #129	; 0x81
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f004 fffc 	bl	800ecea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009cf8:	2340      	movs	r3, #64	; 0x40
 8009cfa:	2202      	movs	r2, #2
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f004 fff3 	bl	800ecea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d0c:	2308      	movs	r3, #8
 8009d0e:	2203      	movs	r2, #3
 8009d10:	2182      	movs	r1, #130	; 0x82
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f004 ffe9 	bl	800ecea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009d1e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009d22:	f005 f909 	bl	800ef38 <USBD_static_malloc>
 8009d26:	4602      	mov	r2, r0
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d102      	bne.n	8009d3e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	73fb      	strb	r3, [r7, #15]
 8009d3c:	e026      	b.n	8009d8c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d44:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	7c1b      	ldrb	r3, [r3, #16]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d109      	bne.n	8009d7c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d72:	2101      	movs	r1, #1
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f005 f8a9 	bl	800eecc <USBD_LL_PrepareReceive>
 8009d7a:	e007      	b.n	8009d8c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d82:	2340      	movs	r3, #64	; 0x40
 8009d84:	2101      	movs	r1, #1
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f005 f8a0 	bl	800eecc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b084      	sub	sp, #16
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009da2:	2300      	movs	r3, #0
 8009da4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009da6:	2181      	movs	r1, #129	; 0x81
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f004 ffc4 	bl	800ed36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009db4:	2101      	movs	r1, #1
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f004 ffbd 	bl	800ed36 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009dc4:	2182      	movs	r1, #130	; 0x82
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f004 ffb5 	bl	800ed36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00e      	beq.n	8009dfa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dec:	4618      	mov	r0, r3
 8009dee:	f005 f8af 	bl	800ef50 <USBD_static_free>
    pdev->pClassData = NULL;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e14:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d039      	beq.n	8009ea2 <USBD_CDC_Setup+0x9e>
 8009e2e:	2b20      	cmp	r3, #32
 8009e30:	d17f      	bne.n	8009f32 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	88db      	ldrh	r3, [r3, #6]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d029      	beq.n	8009e8e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	b25b      	sxtb	r3, r3
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	da11      	bge.n	8009e68 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009e50:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	88d2      	ldrh	r2, [r2, #6]
 8009e56:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009e58:	6939      	ldr	r1, [r7, #16]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	88db      	ldrh	r3, [r3, #6]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f001 fa0a 	bl	800b27a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009e66:	e06b      	b.n	8009f40 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	785a      	ldrb	r2, [r3, #1]
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	88db      	ldrh	r3, [r3, #6]
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009e7e:	6939      	ldr	r1, [r7, #16]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	88db      	ldrh	r3, [r3, #6]
 8009e84:	461a      	mov	r2, r3
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f001 fa25 	bl	800b2d6 <USBD_CtlPrepareRx>
      break;
 8009e8c:	e058      	b.n	8009f40 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	7850      	ldrb	r0, [r2, #1]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	4798      	blx	r3
      break;
 8009ea0:	e04e      	b.n	8009f40 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	785b      	ldrb	r3, [r3, #1]
 8009ea6:	2b0b      	cmp	r3, #11
 8009ea8:	d02e      	beq.n	8009f08 <USBD_CDC_Setup+0x104>
 8009eaa:	2b0b      	cmp	r3, #11
 8009eac:	dc38      	bgt.n	8009f20 <USBD_CDC_Setup+0x11c>
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d002      	beq.n	8009eb8 <USBD_CDC_Setup+0xb4>
 8009eb2:	2b0a      	cmp	r3, #10
 8009eb4:	d014      	beq.n	8009ee0 <USBD_CDC_Setup+0xdc>
 8009eb6:	e033      	b.n	8009f20 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d107      	bne.n	8009ed2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009ec2:	f107 030c 	add.w	r3, r7, #12
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	4619      	mov	r1, r3
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f001 f9d5 	bl	800b27a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ed0:	e02e      	b.n	8009f30 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009ed2:	6839      	ldr	r1, [r7, #0]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f001 f966 	bl	800b1a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009eda:	2302      	movs	r3, #2
 8009edc:	75fb      	strb	r3, [r7, #23]
          break;
 8009ede:	e027      	b.n	8009f30 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ee6:	2b03      	cmp	r3, #3
 8009ee8:	d107      	bne.n	8009efa <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009eea:	f107 030f 	add.w	r3, r7, #15
 8009eee:	2201      	movs	r2, #1
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f001 f9c1 	bl	800b27a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ef8:	e01a      	b.n	8009f30 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009efa:	6839      	ldr	r1, [r7, #0]
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f001 f952 	bl	800b1a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f02:	2302      	movs	r3, #2
 8009f04:	75fb      	strb	r3, [r7, #23]
          break;
 8009f06:	e013      	b.n	8009f30 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f0e:	2b03      	cmp	r3, #3
 8009f10:	d00d      	beq.n	8009f2e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f001 f946 	bl	800b1a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f1e:	e006      	b.n	8009f2e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009f20:	6839      	ldr	r1, [r7, #0]
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f001 f93f 	bl	800b1a6 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f28:	2302      	movs	r3, #2
 8009f2a:	75fb      	strb	r3, [r7, #23]
          break;
 8009f2c:	e000      	b.n	8009f30 <USBD_CDC_Setup+0x12c>
          break;
 8009f2e:	bf00      	nop
      }
      break;
 8009f30:	e006      	b.n	8009f40 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009f32:	6839      	ldr	r1, [r7, #0]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f001 f936 	bl	800b1a6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009f3a:	2302      	movs	r3, #2
 8009f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f3e:	bf00      	nop
  }

  return ret;
 8009f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3718      	adds	r7, #24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b084      	sub	sp, #16
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
 8009f52:	460b      	mov	r3, r1
 8009f54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f5c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f64:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d03a      	beq.n	8009fe6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009f70:	78fa      	ldrb	r2, [r7, #3]
 8009f72:	6879      	ldr	r1, [r7, #4]
 8009f74:	4613      	mov	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4413      	add	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	440b      	add	r3, r1
 8009f7e:	331c      	adds	r3, #28
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d029      	beq.n	8009fda <USBD_CDC_DataIn+0x90>
 8009f86:	78fa      	ldrb	r2, [r7, #3]
 8009f88:	6879      	ldr	r1, [r7, #4]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	440b      	add	r3, r1
 8009f94:	331c      	adds	r3, #28
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	78f9      	ldrb	r1, [r7, #3]
 8009f9a:	68b8      	ldr	r0, [r7, #8]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	440b      	add	r3, r1
 8009fa2:	00db      	lsls	r3, r3, #3
 8009fa4:	4403      	add	r3, r0
 8009fa6:	3338      	adds	r3, #56	; 0x38
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	fbb2 f1f3 	udiv	r1, r2, r3
 8009fae:	fb03 f301 	mul.w	r3, r3, r1
 8009fb2:	1ad3      	subs	r3, r2, r3
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d110      	bne.n	8009fda <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009fb8:	78fa      	ldrb	r2, [r7, #3]
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	4413      	add	r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	440b      	add	r3, r1
 8009fc6:	331c      	adds	r3, #28
 8009fc8:	2200      	movs	r2, #0
 8009fca:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009fcc:	78f9      	ldrb	r1, [r7, #3]
 8009fce:	2300      	movs	r3, #0
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f004 ff57 	bl	800ee86 <USBD_LL_Transmit>
 8009fd8:	e003      	b.n	8009fe2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	e000      	b.n	8009fe8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009fe6:	2302      	movs	r3, #2
  }
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a002:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a004:	78fb      	ldrb	r3, [r7, #3]
 800a006:	4619      	mov	r1, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f004 ff82 	bl	800ef12 <USBD_LL_GetRxDataSize>
 800a00e:	4602      	mov	r2, r0
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00d      	beq.n	800a03c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a034:	4611      	mov	r1, r2
 800a036:	4798      	blx	r3

    return USBD_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	e000      	b.n	800a03e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a03c:	2302      	movs	r3, #2
  }
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b084      	sub	sp, #16
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a054:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d015      	beq.n	800a08c <USBD_CDC_EP0_RxReady+0x46>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a066:	2bff      	cmp	r3, #255	; 0xff
 800a068:	d010      	beq.n	800a08c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a078:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a080:	b292      	uxth	r2, r2
 800a082:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	22ff      	movs	r2, #255	; 0xff
 800a088:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2243      	movs	r2, #67	; 0x43
 800a0a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a0a6:	4b03      	ldr	r3, [pc, #12]	; (800a0b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bc80      	pop	{r7}
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	200000a4 	.word	0x200000a4

0800a0b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2243      	movs	r2, #67	; 0x43
 800a0c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a0c6:	4b03      	ldr	r3, [pc, #12]	; (800a0d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bc80      	pop	{r7}
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	20000060 	.word	0x20000060

0800a0d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2243      	movs	r2, #67	; 0x43
 800a0e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a0e6:	4b03      	ldr	r3, [pc, #12]	; (800a0f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bc80      	pop	{r7}
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	200000e8 	.word	0x200000e8

0800a0f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	220a      	movs	r2, #10
 800a104:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a106:	4b03      	ldr	r3, [pc, #12]	; (800a114 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a108:	4618      	mov	r0, r3
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bc80      	pop	{r7}
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	2000001c 	.word	0x2000001c

0800a118 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a122:	2302      	movs	r3, #2
 800a124:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d005      	beq.n	800a138 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a138:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3714      	adds	r7, #20
 800a13e:	46bd      	mov	sp, r7
 800a140:	bc80      	pop	{r7}
 800a142:	4770      	bx	lr

0800a144 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a144:	b480      	push	{r7}
 800a146:	b087      	sub	sp, #28
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	4613      	mov	r3, r2
 800a150:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a158:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a162:	88fa      	ldrh	r2, [r7, #6]
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	371c      	adds	r7, #28
 800a170:	46bd      	mov	sp, r7
 800a172:	bc80      	pop	{r7}
 800a174:	4770      	bx	lr

0800a176 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a176:	b480      	push	{r7}
 800a178:	b085      	sub	sp, #20
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a186:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	bc80      	pop	{r7}
 800a19a:	4770      	bx	lr

0800a19c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d01c      	beq.n	800a1f0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d115      	bne.n	800a1ec <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	2181      	movs	r1, #129	; 0x81
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f004 fe4f 	bl	800ee86 <USBD_LL_Transmit>

      return USBD_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	e002      	b.n	800a1f2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e000      	b.n	800a1f2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a1f0:	2302      	movs	r3, #2
  }
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b084      	sub	sp, #16
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a208:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a210:	2b00      	cmp	r3, #0
 800a212:	d017      	beq.n	800a244 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	7c1b      	ldrb	r3, [r3, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d109      	bne.n	800a230 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a222:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a226:	2101      	movs	r1, #1
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f004 fe4f 	bl	800eecc <USBD_LL_PrepareReceive>
 800a22e:	e007      	b.n	800a240 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a236:	2340      	movs	r3, #64	; 0x40
 800a238:	2101      	movs	r1, #1
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f004 fe46 	bl	800eecc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	e000      	b.n	800a246 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a244:	2302      	movs	r3, #2
  }
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	60f8      	str	r0, [r7, #12]
 800a256:	60b9      	str	r1, [r7, #8]
 800a258:	4613      	mov	r3, r2
 800a25a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a262:	2302      	movs	r3, #2
 800a264:	e01a      	b.n	800a29c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2200      	movs	r2, #0
 800a274:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d003      	beq.n	800a286 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	79fa      	ldrb	r2, [r7, #7]
 800a292:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f004 fcb3 	bl	800ec00 <USBD_LL_Init>

  return USBD_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d006      	beq.n	800a2c6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	683a      	ldr	r2, [r7, #0]
 800a2bc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	73fb      	strb	r3, [r7, #15]
 800a2c4:	e001      	b.n	800a2ca <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3714      	adds	r7, #20
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bc80      	pop	{r7}
 800a2d4:	4770      	bx	lr

0800a2d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b082      	sub	sp, #8
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f004 fce8 	bl	800ecb4 <USBD_LL_Start>

  return USBD_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bc80      	pop	{r7}
 800a300:	4770      	bx	lr

0800a302 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b084      	sub	sp, #16
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	460b      	mov	r3, r1
 800a30c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a30e:	2302      	movs	r3, #2
 800a310:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00c      	beq.n	800a336 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	78fa      	ldrb	r2, [r7, #3]
 800a326:	4611      	mov	r1, r2
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	4798      	blx	r3
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d101      	bne.n	800a336 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a336:	7bfb      	ldrb	r3, [r7, #15]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	460b      	mov	r3, r1
 800a34a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	78fa      	ldrb	r2, [r7, #3]
 800a356:	4611      	mov	r1, r2
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	4798      	blx	r3

  return USBD_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b082      	sub	sp, #8
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
 800a36e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	4618      	mov	r0, r3
 800a37a:	f000 fed8 	bl	800b12e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a38c:	461a      	mov	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a39a:	f003 031f 	and.w	r3, r3, #31
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	d016      	beq.n	800a3d0 <USBD_LL_SetupStage+0x6a>
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d81c      	bhi.n	800a3e0 <USBD_LL_SetupStage+0x7a>
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d002      	beq.n	800a3b0 <USBD_LL_SetupStage+0x4a>
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d008      	beq.n	800a3c0 <USBD_LL_SetupStage+0x5a>
 800a3ae:	e017      	b.n	800a3e0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f9cb 	bl	800a754 <USBD_StdDevReq>
      break;
 800a3be:	e01a      	b.n	800a3f6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 fa2d 	bl	800a828 <USBD_StdItfReq>
      break;
 800a3ce:	e012      	b.n	800a3f6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fa6d 	bl	800a8b8 <USBD_StdEPReq>
      break;
 800a3de:	e00a      	b.n	800a3f6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a3e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f004 fcc0 	bl	800ed74 <USBD_LL_StallEP>
      break;
 800a3f4:	bf00      	nop
  }

  return USBD_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	460b      	mov	r3, r1
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a40e:	7afb      	ldrb	r3, [r7, #11]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d14b      	bne.n	800a4ac <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a41a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a422:	2b03      	cmp	r3, #3
 800a424:	d134      	bne.n	800a490 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	68da      	ldr	r2, [r3, #12]
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d919      	bls.n	800a466 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	1ad2      	subs	r2, r2, r3
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	68da      	ldr	r2, [r3, #12]
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a448:	429a      	cmp	r2, r3
 800a44a:	d203      	bcs.n	800a454 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a450:	b29b      	uxth	r3, r3
 800a452:	e002      	b.n	800a45a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a458:	b29b      	uxth	r3, r3
 800a45a:	461a      	mov	r2, r3
 800a45c:	6879      	ldr	r1, [r7, #4]
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	f000 ff57 	bl	800b312 <USBD_CtlContinueRx>
 800a464:	e038      	b.n	800a4d8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00a      	beq.n	800a488 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a478:	2b03      	cmp	r3, #3
 800a47a:	d105      	bne.n	800a488 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f000 ff54 	bl	800b336 <USBD_CtlSendStatus>
 800a48e:	e023      	b.n	800a4d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a496:	2b05      	cmp	r3, #5
 800a498:	d11e      	bne.n	800a4d8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f004 fc65 	bl	800ed74 <USBD_LL_StallEP>
 800a4aa:	e015      	b.n	800a4d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00d      	beq.n	800a4d4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a4be:	2b03      	cmp	r3, #3
 800a4c0:	d108      	bne.n	800a4d4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	7afa      	ldrb	r2, [r7, #11]
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	4798      	blx	r3
 800a4d2:	e001      	b.n	800a4d8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	e000      	b.n	800a4da <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b086      	sub	sp, #24
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	607a      	str	r2, [r7, #4]
 800a4ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a4f0:	7afb      	ldrb	r3, [r7, #11]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d17f      	bne.n	800a5f6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	3314      	adds	r3, #20
 800a4fa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a502:	2b02      	cmp	r3, #2
 800a504:	d15c      	bne.n	800a5c0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	68da      	ldr	r2, [r3, #12]
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d915      	bls.n	800a53e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	68da      	ldr	r2, [r3, #12]
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	1ad2      	subs	r2, r2, r3
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	b29b      	uxth	r3, r3
 800a526:	461a      	mov	r2, r3
 800a528:	6879      	ldr	r1, [r7, #4]
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f000 fec1 	bl	800b2b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a530:	2300      	movs	r3, #0
 800a532:	2200      	movs	r2, #0
 800a534:	2100      	movs	r1, #0
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f004 fcc8 	bl	800eecc <USBD_LL_PrepareReceive>
 800a53c:	e04e      	b.n	800a5dc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	6912      	ldr	r2, [r2, #16]
 800a546:	fbb3 f1f2 	udiv	r1, r3, r2
 800a54a:	fb02 f201 	mul.w	r2, r2, r1
 800a54e:	1a9b      	subs	r3, r3, r2
 800a550:	2b00      	cmp	r3, #0
 800a552:	d11c      	bne.n	800a58e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	689a      	ldr	r2, [r3, #8]
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d316      	bcc.n	800a58e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	689a      	ldr	r2, [r3, #8]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d20f      	bcs.n	800a58e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a56e:	2200      	movs	r2, #0
 800a570:	2100      	movs	r1, #0
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 fe9d 	bl	800b2b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a580:	2300      	movs	r3, #0
 800a582:	2200      	movs	r2, #0
 800a584:	2100      	movs	r1, #0
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f004 fca0 	bl	800eecc <USBD_LL_PrepareReceive>
 800a58c:	e026      	b.n	800a5dc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00a      	beq.n	800a5b0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a5a0:	2b03      	cmp	r3, #3
 800a5a2:	d105      	bne.n	800a5b0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a5b0:	2180      	movs	r1, #128	; 0x80
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f004 fbde 	bl	800ed74 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f000 fecf 	bl	800b35c <USBD_CtlReceiveStatus>
 800a5be:	e00d      	b.n	800a5dc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5c6:	2b04      	cmp	r3, #4
 800a5c8:	d004      	beq.n	800a5d4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d103      	bne.n	800a5dc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a5d4:	2180      	movs	r1, #128	; 0x80
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f004 fbcc 	bl	800ed74 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d11d      	bne.n	800a622 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f7ff fe81 	bl	800a2ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a5f4:	e015      	b.n	800a622 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5fc:	695b      	ldr	r3, [r3, #20]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00d      	beq.n	800a61e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a608:	2b03      	cmp	r3, #3
 800a60a:	d108      	bne.n	800a61e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a612:	695b      	ldr	r3, [r3, #20]
 800a614:	7afa      	ldrb	r2, [r7, #11]
 800a616:	4611      	mov	r1, r2
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	4798      	blx	r3
 800a61c:	e001      	b.n	800a622 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a61e:	2302      	movs	r3, #2
 800a620:	e000      	b.n	800a624 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3718      	adds	r7, #24
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a634:	2340      	movs	r3, #64	; 0x40
 800a636:	2200      	movs	r2, #0
 800a638:	2100      	movs	r1, #0
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f004 fb55 	bl	800ecea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2240      	movs	r2, #64	; 0x40
 800a64c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a650:	2340      	movs	r3, #64	; 0x40
 800a652:	2200      	movs	r2, #0
 800a654:	2180      	movs	r1, #128	; 0x80
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f004 fb47 	bl	800ecea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2240      	movs	r2, #64	; 0x40
 800a666:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d009      	beq.n	800a6a4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	6852      	ldr	r2, [r2, #4]
 800a69c:	b2d2      	uxtb	r2, r2
 800a69e:	4611      	mov	r1, r2
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	4798      	blx	r3
  }

  return USBD_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b083      	sub	sp, #12
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	78fa      	ldrb	r2, [r7, #3]
 800a6be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	370c      	adds	r7, #12
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bc80      	pop	{r7}
 800a6ca:	4770      	bx	lr

0800a6cc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2204      	movs	r2, #4
 800a6e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	370c      	adds	r7, #12
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bc80      	pop	{r7}
 800a6f2:	4770      	bx	lr

0800a6f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a702:	2b04      	cmp	r3, #4
 800a704:	d105      	bne.n	800a712 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a712:	2300      	movs	r3, #0
}
 800a714:	4618      	mov	r0, r3
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	bc80      	pop	{r7}
 800a71c:	4770      	bx	lr

0800a71e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b082      	sub	sp, #8
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a72c:	2b03      	cmp	r3, #3
 800a72e:	d10b      	bne.n	800a748 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a736:	69db      	ldr	r3, [r3, #28]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d005      	beq.n	800a748 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a742:	69db      	ldr	r3, [r3, #28]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
	...

0800a754 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a76a:	2b40      	cmp	r3, #64	; 0x40
 800a76c:	d005      	beq.n	800a77a <USBD_StdDevReq+0x26>
 800a76e:	2b40      	cmp	r3, #64	; 0x40
 800a770:	d84f      	bhi.n	800a812 <USBD_StdDevReq+0xbe>
 800a772:	2b00      	cmp	r3, #0
 800a774:	d009      	beq.n	800a78a <USBD_StdDevReq+0x36>
 800a776:	2b20      	cmp	r3, #32
 800a778:	d14b      	bne.n	800a812 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	4798      	blx	r3
      break;
 800a788:	e048      	b.n	800a81c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	785b      	ldrb	r3, [r3, #1]
 800a78e:	2b09      	cmp	r3, #9
 800a790:	d839      	bhi.n	800a806 <USBD_StdDevReq+0xb2>
 800a792:	a201      	add	r2, pc, #4	; (adr r2, 800a798 <USBD_StdDevReq+0x44>)
 800a794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a798:	0800a7e9 	.word	0x0800a7e9
 800a79c:	0800a7fd 	.word	0x0800a7fd
 800a7a0:	0800a807 	.word	0x0800a807
 800a7a4:	0800a7f3 	.word	0x0800a7f3
 800a7a8:	0800a807 	.word	0x0800a807
 800a7ac:	0800a7cb 	.word	0x0800a7cb
 800a7b0:	0800a7c1 	.word	0x0800a7c1
 800a7b4:	0800a807 	.word	0x0800a807
 800a7b8:	0800a7df 	.word	0x0800a7df
 800a7bc:	0800a7d5 	.word	0x0800a7d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a7c0:	6839      	ldr	r1, [r7, #0]
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f9dc 	bl	800ab80 <USBD_GetDescriptor>
          break;
 800a7c8:	e022      	b.n	800a810 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a7ca:	6839      	ldr	r1, [r7, #0]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fb3f 	bl	800ae50 <USBD_SetAddress>
          break;
 800a7d2:	e01d      	b.n	800a810 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a7d4:	6839      	ldr	r1, [r7, #0]
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fb7e 	bl	800aed8 <USBD_SetConfig>
          break;
 800a7dc:	e018      	b.n	800a810 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a7de:	6839      	ldr	r1, [r7, #0]
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fc07 	bl	800aff4 <USBD_GetConfig>
          break;
 800a7e6:	e013      	b.n	800a810 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fc37 	bl	800b05e <USBD_GetStatus>
          break;
 800a7f0:	e00e      	b.n	800a810 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a7f2:	6839      	ldr	r1, [r7, #0]
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 fc65 	bl	800b0c4 <USBD_SetFeature>
          break;
 800a7fa:	e009      	b.n	800a810 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fc74 	bl	800b0ec <USBD_ClrFeature>
          break;
 800a804:	e004      	b.n	800a810 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a806:	6839      	ldr	r1, [r7, #0]
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fccc 	bl	800b1a6 <USBD_CtlError>
          break;
 800a80e:	bf00      	nop
      }
      break;
 800a810:	e004      	b.n	800a81c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a812:	6839      	ldr	r1, [r7, #0]
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 fcc6 	bl	800b1a6 <USBD_CtlError>
      break;
 800a81a:	bf00      	nop
  }

  return ret;
 800a81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop

0800a828 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a832:	2300      	movs	r3, #0
 800a834:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a83e:	2b40      	cmp	r3, #64	; 0x40
 800a840:	d005      	beq.n	800a84e <USBD_StdItfReq+0x26>
 800a842:	2b40      	cmp	r3, #64	; 0x40
 800a844:	d82e      	bhi.n	800a8a4 <USBD_StdItfReq+0x7c>
 800a846:	2b00      	cmp	r3, #0
 800a848:	d001      	beq.n	800a84e <USBD_StdItfReq+0x26>
 800a84a:	2b20      	cmp	r3, #32
 800a84c:	d12a      	bne.n	800a8a4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a854:	3b01      	subs	r3, #1
 800a856:	2b02      	cmp	r3, #2
 800a858:	d81d      	bhi.n	800a896 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	889b      	ldrh	r3, [r3, #4]
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	2b01      	cmp	r3, #1
 800a862:	d813      	bhi.n	800a88c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	6839      	ldr	r1, [r7, #0]
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	4798      	blx	r3
 800a872:	4603      	mov	r3, r0
 800a874:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	88db      	ldrh	r3, [r3, #6]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d110      	bne.n	800a8a0 <USBD_StdItfReq+0x78>
 800a87e:	7bfb      	ldrb	r3, [r7, #15]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10d      	bne.n	800a8a0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fd56 	bl	800b336 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a88a:	e009      	b.n	800a8a0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a88c:	6839      	ldr	r1, [r7, #0]
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fc89 	bl	800b1a6 <USBD_CtlError>
          break;
 800a894:	e004      	b.n	800a8a0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fc84 	bl	800b1a6 <USBD_CtlError>
          break;
 800a89e:	e000      	b.n	800a8a2 <USBD_StdItfReq+0x7a>
          break;
 800a8a0:	bf00      	nop
      }
      break;
 800a8a2:	e004      	b.n	800a8ae <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fc7d 	bl	800b1a6 <USBD_CtlError>
      break;
 800a8ac:	bf00      	nop
  }

  return USBD_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	889b      	ldrh	r3, [r3, #4]
 800a8ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8d4:	2b40      	cmp	r3, #64	; 0x40
 800a8d6:	d007      	beq.n	800a8e8 <USBD_StdEPReq+0x30>
 800a8d8:	2b40      	cmp	r3, #64	; 0x40
 800a8da:	f200 8146 	bhi.w	800ab6a <USBD_StdEPReq+0x2b2>
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00a      	beq.n	800a8f8 <USBD_StdEPReq+0x40>
 800a8e2:	2b20      	cmp	r3, #32
 800a8e4:	f040 8141 	bne.w	800ab6a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	6839      	ldr	r1, [r7, #0]
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	4798      	blx	r3
      break;
 800a8f6:	e13d      	b.n	800ab74 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a900:	2b20      	cmp	r3, #32
 800a902:	d10a      	bne.n	800a91a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	4798      	blx	r3
 800a912:	4603      	mov	r3, r0
 800a914:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a916:	7bfb      	ldrb	r3, [r7, #15]
 800a918:	e12d      	b.n	800ab76 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	785b      	ldrb	r3, [r3, #1]
 800a91e:	2b03      	cmp	r3, #3
 800a920:	d007      	beq.n	800a932 <USBD_StdEPReq+0x7a>
 800a922:	2b03      	cmp	r3, #3
 800a924:	f300 811b 	bgt.w	800ab5e <USBD_StdEPReq+0x2a6>
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d072      	beq.n	800aa12 <USBD_StdEPReq+0x15a>
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d03a      	beq.n	800a9a6 <USBD_StdEPReq+0xee>
 800a930:	e115      	b.n	800ab5e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d002      	beq.n	800a942 <USBD_StdEPReq+0x8a>
 800a93c:	2b03      	cmp	r3, #3
 800a93e:	d015      	beq.n	800a96c <USBD_StdEPReq+0xb4>
 800a940:	e02b      	b.n	800a99a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a942:	7bbb      	ldrb	r3, [r7, #14]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00c      	beq.n	800a962 <USBD_StdEPReq+0xaa>
 800a948:	7bbb      	ldrb	r3, [r7, #14]
 800a94a:	2b80      	cmp	r3, #128	; 0x80
 800a94c:	d009      	beq.n	800a962 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	4619      	mov	r1, r3
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f004 fa0e 	bl	800ed74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a958:	2180      	movs	r1, #128	; 0x80
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f004 fa0a 	bl	800ed74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a960:	e020      	b.n	800a9a4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a962:	6839      	ldr	r1, [r7, #0]
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fc1e 	bl	800b1a6 <USBD_CtlError>
              break;
 800a96a:	e01b      	b.n	800a9a4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	885b      	ldrh	r3, [r3, #2]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10e      	bne.n	800a992 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00b      	beq.n	800a992 <USBD_StdEPReq+0xda>
 800a97a:	7bbb      	ldrb	r3, [r7, #14]
 800a97c:	2b80      	cmp	r3, #128	; 0x80
 800a97e:	d008      	beq.n	800a992 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	88db      	ldrh	r3, [r3, #6]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d104      	bne.n	800a992 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a988:	7bbb      	ldrb	r3, [r7, #14]
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f004 f9f1 	bl	800ed74 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fccf 	bl	800b336 <USBD_CtlSendStatus>

              break;
 800a998:	e004      	b.n	800a9a4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fc02 	bl	800b1a6 <USBD_CtlError>
              break;
 800a9a2:	bf00      	nop
          }
          break;
 800a9a4:	e0e0      	b.n	800ab68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d002      	beq.n	800a9b6 <USBD_StdEPReq+0xfe>
 800a9b0:	2b03      	cmp	r3, #3
 800a9b2:	d015      	beq.n	800a9e0 <USBD_StdEPReq+0x128>
 800a9b4:	e026      	b.n	800aa04 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9b6:	7bbb      	ldrb	r3, [r7, #14]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00c      	beq.n	800a9d6 <USBD_StdEPReq+0x11e>
 800a9bc:	7bbb      	ldrb	r3, [r7, #14]
 800a9be:	2b80      	cmp	r3, #128	; 0x80
 800a9c0:	d009      	beq.n	800a9d6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a9c2:	7bbb      	ldrb	r3, [r7, #14]
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f004 f9d4 	bl	800ed74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a9cc:	2180      	movs	r1, #128	; 0x80
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f004 f9d0 	bl	800ed74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9d4:	e01c      	b.n	800aa10 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a9d6:	6839      	ldr	r1, [r7, #0]
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fbe4 	bl	800b1a6 <USBD_CtlError>
              break;
 800a9de:	e017      	b.n	800aa10 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	885b      	ldrh	r3, [r3, #2]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d112      	bne.n	800aa0e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a9e8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d004      	beq.n	800a9fc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9f2:	7bbb      	ldrb	r3, [r7, #14]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f004 f9db 	bl	800edb2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fc9a 	bl	800b336 <USBD_CtlSendStatus>
              }
              break;
 800aa02:	e004      	b.n	800aa0e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800aa04:	6839      	ldr	r1, [r7, #0]
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 fbcd 	bl	800b1a6 <USBD_CtlError>
              break;
 800aa0c:	e000      	b.n	800aa10 <USBD_StdEPReq+0x158>
              break;
 800aa0e:	bf00      	nop
          }
          break;
 800aa10:	e0aa      	b.n	800ab68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d002      	beq.n	800aa22 <USBD_StdEPReq+0x16a>
 800aa1c:	2b03      	cmp	r3, #3
 800aa1e:	d032      	beq.n	800aa86 <USBD_StdEPReq+0x1ce>
 800aa20:	e097      	b.n	800ab52 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa22:	7bbb      	ldrb	r3, [r7, #14]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d007      	beq.n	800aa38 <USBD_StdEPReq+0x180>
 800aa28:	7bbb      	ldrb	r3, [r7, #14]
 800aa2a:	2b80      	cmp	r3, #128	; 0x80
 800aa2c:	d004      	beq.n	800aa38 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fbb8 	bl	800b1a6 <USBD_CtlError>
                break;
 800aa36:	e091      	b.n	800ab5c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	da0b      	bge.n	800aa58 <USBD_StdEPReq+0x1a0>
 800aa40:	7bbb      	ldrb	r3, [r7, #14]
 800aa42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa46:	4613      	mov	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4413      	add	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	3310      	adds	r3, #16
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	4413      	add	r3, r2
 800aa54:	3304      	adds	r3, #4
 800aa56:	e00b      	b.n	800aa70 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa58:	7bbb      	ldrb	r3, [r7, #14]
 800aa5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa5e:	4613      	mov	r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	4413      	add	r3, r2
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	3304      	adds	r3, #4
 800aa70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	2200      	movs	r2, #0
 800aa76:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	2202      	movs	r2, #2
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fbfb 	bl	800b27a <USBD_CtlSendData>
              break;
 800aa84:	e06a      	b.n	800ab5c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	da11      	bge.n	800aab2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa8e:	7bbb      	ldrb	r3, [r7, #14]
 800aa90:	f003 020f 	and.w	r2, r3, #15
 800aa94:	6879      	ldr	r1, [r7, #4]
 800aa96:	4613      	mov	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4413      	add	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	440b      	add	r3, r1
 800aaa0:	3318      	adds	r3, #24
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d117      	bne.n	800aad8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aaa8:	6839      	ldr	r1, [r7, #0]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 fb7b 	bl	800b1a6 <USBD_CtlError>
                  break;
 800aab0:	e054      	b.n	800ab5c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aab2:	7bbb      	ldrb	r3, [r7, #14]
 800aab4:	f003 020f 	and.w	r2, r3, #15
 800aab8:	6879      	ldr	r1, [r7, #4]
 800aaba:	4613      	mov	r3, r2
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	4413      	add	r3, r2
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	440b      	add	r3, r1
 800aac4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d104      	bne.n	800aad8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aace:	6839      	ldr	r1, [r7, #0]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 fb68 	bl	800b1a6 <USBD_CtlError>
                  break;
 800aad6:	e041      	b.n	800ab5c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	da0b      	bge.n	800aaf8 <USBD_StdEPReq+0x240>
 800aae0:	7bbb      	ldrb	r3, [r7, #14]
 800aae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aae6:	4613      	mov	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	3310      	adds	r3, #16
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	e00b      	b.n	800ab10 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aaf8:	7bbb      	ldrb	r3, [r7, #14]
 800aafa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aafe:	4613      	mov	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4413      	add	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	3304      	adds	r3, #4
 800ab10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab12:	7bbb      	ldrb	r3, [r7, #14]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <USBD_StdEPReq+0x266>
 800ab18:	7bbb      	ldrb	r3, [r7, #14]
 800ab1a:	2b80      	cmp	r3, #128	; 0x80
 800ab1c:	d103      	bne.n	800ab26 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	2200      	movs	r2, #0
 800ab22:	601a      	str	r2, [r3, #0]
 800ab24:	e00e      	b.n	800ab44 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ab26:	7bbb      	ldrb	r3, [r7, #14]
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f004 f960 	bl	800edf0 <USBD_LL_IsStallEP>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d003      	beq.n	800ab3e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	601a      	str	r2, [r3, #0]
 800ab3c:	e002      	b.n	800ab44 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	2200      	movs	r2, #0
 800ab42:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	2202      	movs	r2, #2
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fb95 	bl	800b27a <USBD_CtlSendData>
              break;
 800ab50:	e004      	b.n	800ab5c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fb26 	bl	800b1a6 <USBD_CtlError>
              break;
 800ab5a:	bf00      	nop
          }
          break;
 800ab5c:	e004      	b.n	800ab68 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 fb20 	bl	800b1a6 <USBD_CtlError>
          break;
 800ab66:	bf00      	nop
      }
      break;
 800ab68:	e004      	b.n	800ab74 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fb1a 	bl	800b1a6 <USBD_CtlError>
      break;
 800ab72:	bf00      	nop
  }

  return ret;
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
	...

0800ab80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab92:	2300      	movs	r3, #0
 800ab94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	885b      	ldrh	r3, [r3, #2]
 800ab9a:	0a1b      	lsrs	r3, r3, #8
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	2b06      	cmp	r3, #6
 800aba2:	f200 8128 	bhi.w	800adf6 <USBD_GetDescriptor+0x276>
 800aba6:	a201      	add	r2, pc, #4	; (adr r2, 800abac <USBD_GetDescriptor+0x2c>)
 800aba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abac:	0800abc9 	.word	0x0800abc9
 800abb0:	0800abe1 	.word	0x0800abe1
 800abb4:	0800ac21 	.word	0x0800ac21
 800abb8:	0800adf7 	.word	0x0800adf7
 800abbc:	0800adf7 	.word	0x0800adf7
 800abc0:	0800ad97 	.word	0x0800ad97
 800abc4:	0800adc3 	.word	0x0800adc3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	7c12      	ldrb	r2, [r2, #16]
 800abd4:	f107 0108 	add.w	r1, r7, #8
 800abd8:	4610      	mov	r0, r2
 800abda:	4798      	blx	r3
 800abdc:	60f8      	str	r0, [r7, #12]
      break;
 800abde:	e112      	b.n	800ae06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	7c1b      	ldrb	r3, [r3, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10d      	bne.n	800ac04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf0:	f107 0208 	add.w	r2, r7, #8
 800abf4:	4610      	mov	r0, r2
 800abf6:	4798      	blx	r3
 800abf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	3301      	adds	r3, #1
 800abfe:	2202      	movs	r2, #2
 800ac00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac02:	e100      	b.n	800ae06 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0c:	f107 0208 	add.w	r2, r7, #8
 800ac10:	4610      	mov	r0, r2
 800ac12:	4798      	blx	r3
 800ac14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	2202      	movs	r2, #2
 800ac1c:	701a      	strb	r2, [r3, #0]
      break;
 800ac1e:	e0f2      	b.n	800ae06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	885b      	ldrh	r3, [r3, #2]
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	2b05      	cmp	r3, #5
 800ac28:	f200 80ac 	bhi.w	800ad84 <USBD_GetDescriptor+0x204>
 800ac2c:	a201      	add	r2, pc, #4	; (adr r2, 800ac34 <USBD_GetDescriptor+0xb4>)
 800ac2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac32:	bf00      	nop
 800ac34:	0800ac4d 	.word	0x0800ac4d
 800ac38:	0800ac81 	.word	0x0800ac81
 800ac3c:	0800acb5 	.word	0x0800acb5
 800ac40:	0800ace9 	.word	0x0800ace9
 800ac44:	0800ad1d 	.word	0x0800ad1d
 800ac48:	0800ad51 	.word	0x0800ad51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00b      	beq.n	800ac70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	7c12      	ldrb	r2, [r2, #16]
 800ac64:	f107 0108 	add.w	r1, r7, #8
 800ac68:	4610      	mov	r0, r2
 800ac6a:	4798      	blx	r3
 800ac6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac6e:	e091      	b.n	800ad94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 fa97 	bl	800b1a6 <USBD_CtlError>
            err++;
 800ac78:	7afb      	ldrb	r3, [r7, #11]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac7e:	e089      	b.n	800ad94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00b      	beq.n	800aca4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	7c12      	ldrb	r2, [r2, #16]
 800ac98:	f107 0108 	add.w	r1, r7, #8
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	4798      	blx	r3
 800aca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aca2:	e077      	b.n	800ad94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fa7d 	bl	800b1a6 <USBD_CtlError>
            err++;
 800acac:	7afb      	ldrb	r3, [r7, #11]
 800acae:	3301      	adds	r3, #1
 800acb0:	72fb      	strb	r3, [r7, #11]
          break;
 800acb2:	e06f      	b.n	800ad94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00b      	beq.n	800acd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	7c12      	ldrb	r2, [r2, #16]
 800accc:	f107 0108 	add.w	r1, r7, #8
 800acd0:	4610      	mov	r0, r2
 800acd2:	4798      	blx	r3
 800acd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acd6:	e05d      	b.n	800ad94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fa63 	bl	800b1a6 <USBD_CtlError>
            err++;
 800ace0:	7afb      	ldrb	r3, [r7, #11]
 800ace2:	3301      	adds	r3, #1
 800ace4:	72fb      	strb	r3, [r7, #11]
          break;
 800ace6:	e055      	b.n	800ad94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00b      	beq.n	800ad0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	7c12      	ldrb	r2, [r2, #16]
 800ad00:	f107 0108 	add.w	r1, r7, #8
 800ad04:	4610      	mov	r0, r2
 800ad06:	4798      	blx	r3
 800ad08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad0a:	e043      	b.n	800ad94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad0c:	6839      	ldr	r1, [r7, #0]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fa49 	bl	800b1a6 <USBD_CtlError>
            err++;
 800ad14:	7afb      	ldrb	r3, [r7, #11]
 800ad16:	3301      	adds	r3, #1
 800ad18:	72fb      	strb	r3, [r7, #11]
          break;
 800ad1a:	e03b      	b.n	800ad94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad22:	695b      	ldr	r3, [r3, #20]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00b      	beq.n	800ad40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad2e:	695b      	ldr	r3, [r3, #20]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	7c12      	ldrb	r2, [r2, #16]
 800ad34:	f107 0108 	add.w	r1, r7, #8
 800ad38:	4610      	mov	r0, r2
 800ad3a:	4798      	blx	r3
 800ad3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad3e:	e029      	b.n	800ad94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fa2f 	bl	800b1a6 <USBD_CtlError>
            err++;
 800ad48:	7afb      	ldrb	r3, [r7, #11]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad4e:	e021      	b.n	800ad94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad56:	699b      	ldr	r3, [r3, #24]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00b      	beq.n	800ad74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad62:	699b      	ldr	r3, [r3, #24]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	7c12      	ldrb	r2, [r2, #16]
 800ad68:	f107 0108 	add.w	r1, r7, #8
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	4798      	blx	r3
 800ad70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad72:	e00f      	b.n	800ad94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fa15 	bl	800b1a6 <USBD_CtlError>
            err++;
 800ad7c:	7afb      	ldrb	r3, [r7, #11]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	72fb      	strb	r3, [r7, #11]
          break;
 800ad82:	e007      	b.n	800ad94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fa0d 	bl	800b1a6 <USBD_CtlError>
          err++;
 800ad8c:	7afb      	ldrb	r3, [r7, #11]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ad92:	e038      	b.n	800ae06 <USBD_GetDescriptor+0x286>
 800ad94:	e037      	b.n	800ae06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	7c1b      	ldrb	r3, [r3, #16]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d109      	bne.n	800adb2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ada4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada6:	f107 0208 	add.w	r2, r7, #8
 800adaa:	4610      	mov	r0, r2
 800adac:	4798      	blx	r3
 800adae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adb0:	e029      	b.n	800ae06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f9f6 	bl	800b1a6 <USBD_CtlError>
        err++;
 800adba:	7afb      	ldrb	r3, [r7, #11]
 800adbc:	3301      	adds	r3, #1
 800adbe:	72fb      	strb	r3, [r7, #11]
      break;
 800adc0:	e021      	b.n	800ae06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	7c1b      	ldrb	r3, [r3, #16]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10d      	bne.n	800ade6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800add0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add2:	f107 0208 	add.w	r2, r7, #8
 800add6:	4610      	mov	r0, r2
 800add8:	4798      	blx	r3
 800adda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	3301      	adds	r3, #1
 800ade0:	2207      	movs	r2, #7
 800ade2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ade4:	e00f      	b.n	800ae06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ade6:	6839      	ldr	r1, [r7, #0]
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 f9dc 	bl	800b1a6 <USBD_CtlError>
        err++;
 800adee:	7afb      	ldrb	r3, [r7, #11]
 800adf0:	3301      	adds	r3, #1
 800adf2:	72fb      	strb	r3, [r7, #11]
      break;
 800adf4:	e007      	b.n	800ae06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 f9d4 	bl	800b1a6 <USBD_CtlError>
      err++;
 800adfe:	7afb      	ldrb	r3, [r7, #11]
 800ae00:	3301      	adds	r3, #1
 800ae02:	72fb      	strb	r3, [r7, #11]
      break;
 800ae04:	bf00      	nop
  }

  if (err != 0U)
 800ae06:	7afb      	ldrb	r3, [r7, #11]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d11c      	bne.n	800ae46 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ae0c:	893b      	ldrh	r3, [r7, #8]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d011      	beq.n	800ae36 <USBD_GetDescriptor+0x2b6>
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	88db      	ldrh	r3, [r3, #6]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00d      	beq.n	800ae36 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	88da      	ldrh	r2, [r3, #6]
 800ae1e:	893b      	ldrh	r3, [r7, #8]
 800ae20:	4293      	cmp	r3, r2
 800ae22:	bf28      	it	cs
 800ae24:	4613      	movcs	r3, r2
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae2a:	893b      	ldrh	r3, [r7, #8]
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	68f9      	ldr	r1, [r7, #12]
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 fa22 	bl	800b27a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	88db      	ldrh	r3, [r3, #6]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d104      	bne.n	800ae48 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 fa79 	bl	800b336 <USBD_CtlSendStatus>
 800ae44:	e000      	b.n	800ae48 <USBD_GetDescriptor+0x2c8>
    return;
 800ae46:	bf00      	nop
    }
  }
}
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop

0800ae50 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	889b      	ldrh	r3, [r3, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d130      	bne.n	800aec4 <USBD_SetAddress+0x74>
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	88db      	ldrh	r3, [r3, #6]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d12c      	bne.n	800aec4 <USBD_SetAddress+0x74>
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	885b      	ldrh	r3, [r3, #2]
 800ae6e:	2b7f      	cmp	r3, #127	; 0x7f
 800ae70:	d828      	bhi.n	800aec4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	885b      	ldrh	r3, [r3, #2]
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae84:	2b03      	cmp	r3, #3
 800ae86:	d104      	bne.n	800ae92 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ae88:	6839      	ldr	r1, [r7, #0]
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f98b 	bl	800b1a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae90:	e01d      	b.n	800aece <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	7bfa      	ldrb	r2, [r7, #15]
 800ae96:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae9a:	7bfb      	ldrb	r3, [r7, #15]
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f003 ffd2 	bl	800ee48 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fa46 	bl	800b336 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aeaa:	7bfb      	ldrb	r3, [r7, #15]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d004      	beq.n	800aeba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeb8:	e009      	b.n	800aece <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aec2:	e004      	b.n	800aece <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aec4:	6839      	ldr	r1, [r7, #0]
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f96d 	bl	800b1a6 <USBD_CtlError>
  }
}
 800aecc:	bf00      	nop
 800aece:	bf00      	nop
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
	...

0800aed8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	885b      	ldrh	r3, [r3, #2]
 800aee6:	b2da      	uxtb	r2, r3
 800aee8:	4b41      	ldr	r3, [pc, #260]	; (800aff0 <USBD_SetConfig+0x118>)
 800aeea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aeec:	4b40      	ldr	r3, [pc, #256]	; (800aff0 <USBD_SetConfig+0x118>)
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d904      	bls.n	800aefe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800aef4:	6839      	ldr	r1, [r7, #0]
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f955 	bl	800b1a6 <USBD_CtlError>
 800aefc:	e075      	b.n	800afea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af04:	2b02      	cmp	r3, #2
 800af06:	d002      	beq.n	800af0e <USBD_SetConfig+0x36>
 800af08:	2b03      	cmp	r3, #3
 800af0a:	d023      	beq.n	800af54 <USBD_SetConfig+0x7c>
 800af0c:	e062      	b.n	800afd4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800af0e:	4b38      	ldr	r3, [pc, #224]	; (800aff0 <USBD_SetConfig+0x118>)
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d01a      	beq.n	800af4c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800af16:	4b36      	ldr	r3, [pc, #216]	; (800aff0 <USBD_SetConfig+0x118>)
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	461a      	mov	r2, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2203      	movs	r2, #3
 800af24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800af28:	4b31      	ldr	r3, [pc, #196]	; (800aff0 <USBD_SetConfig+0x118>)
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7ff f9e7 	bl	800a302 <USBD_SetClassConfig>
 800af34:	4603      	mov	r3, r0
 800af36:	2b02      	cmp	r3, #2
 800af38:	d104      	bne.n	800af44 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 f932 	bl	800b1a6 <USBD_CtlError>
            return;
 800af42:	e052      	b.n	800afea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f9f6 	bl	800b336 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800af4a:	e04e      	b.n	800afea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f9f2 	bl	800b336 <USBD_CtlSendStatus>
        break;
 800af52:	e04a      	b.n	800afea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800af54:	4b26      	ldr	r3, [pc, #152]	; (800aff0 <USBD_SetConfig+0x118>)
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d112      	bne.n	800af82 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2202      	movs	r2, #2
 800af60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800af64:	4b22      	ldr	r3, [pc, #136]	; (800aff0 <USBD_SetConfig+0x118>)
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	461a      	mov	r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800af6e:	4b20      	ldr	r3, [pc, #128]	; (800aff0 <USBD_SetConfig+0x118>)
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	4619      	mov	r1, r3
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f7ff f9e3 	bl	800a340 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 f9db 	bl	800b336 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800af80:	e033      	b.n	800afea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800af82:	4b1b      	ldr	r3, [pc, #108]	; (800aff0 <USBD_SetConfig+0x118>)
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d01d      	beq.n	800afcc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	b2db      	uxtb	r3, r3
 800af96:	4619      	mov	r1, r3
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f7ff f9d1 	bl	800a340 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800af9e:	4b14      	ldr	r3, [pc, #80]	; (800aff0 <USBD_SetConfig+0x118>)
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	461a      	mov	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800afa8:	4b11      	ldr	r3, [pc, #68]	; (800aff0 <USBD_SetConfig+0x118>)
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	4619      	mov	r1, r3
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f7ff f9a7 	bl	800a302 <USBD_SetClassConfig>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	d104      	bne.n	800afc4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f8f2 	bl	800b1a6 <USBD_CtlError>
            return;
 800afc2:	e012      	b.n	800afea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 f9b6 	bl	800b336 <USBD_CtlSendStatus>
        break;
 800afca:	e00e      	b.n	800afea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 f9b2 	bl	800b336 <USBD_CtlSendStatus>
        break;
 800afd2:	e00a      	b.n	800afea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800afd4:	6839      	ldr	r1, [r7, #0]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f8e5 	bl	800b1a6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800afdc:	4b04      	ldr	r3, [pc, #16]	; (800aff0 <USBD_SetConfig+0x118>)
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	4619      	mov	r1, r3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7ff f9ac 	bl	800a340 <USBD_ClrClassConfig>
        break;
 800afe8:	bf00      	nop
    }
  }
}
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	200001b1 	.word	0x200001b1

0800aff4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	88db      	ldrh	r3, [r3, #6]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d004      	beq.n	800b010 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f8cc 	bl	800b1a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b00e:	e022      	b.n	800b056 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b016:	2b02      	cmp	r3, #2
 800b018:	dc02      	bgt.n	800b020 <USBD_GetConfig+0x2c>
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	dc03      	bgt.n	800b026 <USBD_GetConfig+0x32>
 800b01e:	e015      	b.n	800b04c <USBD_GetConfig+0x58>
 800b020:	2b03      	cmp	r3, #3
 800b022:	d00b      	beq.n	800b03c <USBD_GetConfig+0x48>
 800b024:	e012      	b.n	800b04c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	3308      	adds	r3, #8
 800b030:	2201      	movs	r2, #1
 800b032:	4619      	mov	r1, r3
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 f920 	bl	800b27a <USBD_CtlSendData>
        break;
 800b03a:	e00c      	b.n	800b056 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	3304      	adds	r3, #4
 800b040:	2201      	movs	r2, #1
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f918 	bl	800b27a <USBD_CtlSendData>
        break;
 800b04a:	e004      	b.n	800b056 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f8a9 	bl	800b1a6 <USBD_CtlError>
        break;
 800b054:	bf00      	nop
}
 800b056:	bf00      	nop
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b082      	sub	sp, #8
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
 800b066:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b06e:	3b01      	subs	r3, #1
 800b070:	2b02      	cmp	r3, #2
 800b072:	d81e      	bhi.n	800b0b2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	88db      	ldrh	r3, [r3, #6]
 800b078:	2b02      	cmp	r3, #2
 800b07a:	d004      	beq.n	800b086 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 f891 	bl	800b1a6 <USBD_CtlError>
        break;
 800b084:	e01a      	b.n	800b0bc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2201      	movs	r2, #1
 800b08a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b092:	2b00      	cmp	r3, #0
 800b094:	d005      	beq.n	800b0a2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	f043 0202 	orr.w	r2, r3, #2
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	330c      	adds	r3, #12
 800b0a6:	2202      	movs	r2, #2
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f8e5 	bl	800b27a <USBD_CtlSendData>
      break;
 800b0b0:	e004      	b.n	800b0bc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f876 	bl	800b1a6 <USBD_CtlError>
      break;
 800b0ba:	bf00      	nop
  }
}
 800b0bc:	bf00      	nop
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	885b      	ldrh	r3, [r3, #2]
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d106      	bne.n	800b0e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f929 	bl	800b336 <USBD_CtlSendStatus>
  }
}
 800b0e4:	bf00      	nop
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d80b      	bhi.n	800b11a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	885b      	ldrh	r3, [r3, #2]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d10c      	bne.n	800b124 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f90f 	bl	800b336 <USBD_CtlSendStatus>
      }
      break;
 800b118:	e004      	b.n	800b124 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 f842 	bl	800b1a6 <USBD_CtlError>
      break;
 800b122:	e000      	b.n	800b126 <USBD_ClrFeature+0x3a>
      break;
 800b124:	bf00      	nop
  }
}
 800b126:	bf00      	nop
 800b128:	3708      	adds	r7, #8
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b12e:	b480      	push	{r7}
 800b130:	b083      	sub	sp, #12
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781a      	ldrb	r2, [r3, #0]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	785a      	ldrb	r2, [r3, #1]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	3302      	adds	r3, #2
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	b29a      	uxth	r2, r3
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	3303      	adds	r3, #3
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	b29b      	uxth	r3, r3
 800b158:	021b      	lsls	r3, r3, #8
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	4413      	add	r3, r2
 800b15e:	b29a      	uxth	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	3304      	adds	r3, #4
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	b29a      	uxth	r2, r3
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	3305      	adds	r3, #5
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	b29b      	uxth	r3, r3
 800b174:	021b      	lsls	r3, r3, #8
 800b176:	b29b      	uxth	r3, r3
 800b178:	4413      	add	r3, r2
 800b17a:	b29a      	uxth	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	3306      	adds	r3, #6
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	b29a      	uxth	r2, r3
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	3307      	adds	r3, #7
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	b29b      	uxth	r3, r3
 800b190:	021b      	lsls	r3, r3, #8
 800b192:	b29b      	uxth	r3, r3
 800b194:	4413      	add	r3, r2
 800b196:	b29a      	uxth	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	80da      	strh	r2, [r3, #6]

}
 800b19c:	bf00      	nop
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bc80      	pop	{r7}
 800b1a4:	4770      	bx	lr

0800b1a6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b082      	sub	sp, #8
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b1b0:	2180      	movs	r1, #128	; 0x80
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f003 fdde 	bl	800ed74 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f003 fdda 	bl	800ed74 <USBD_LL_StallEP>
}
 800b1c0:	bf00      	nop
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d032      	beq.n	800b244 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f000 f834 	bl	800b24c <USBD_GetLen>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	005b      	lsls	r3, r3, #1
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b1f2:	7dfb      	ldrb	r3, [r7, #23]
 800b1f4:	1c5a      	adds	r2, r3, #1
 800b1f6:	75fa      	strb	r2, [r7, #23]
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	7812      	ldrb	r2, [r2, #0]
 800b202:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b204:	7dfb      	ldrb	r3, [r7, #23]
 800b206:	1c5a      	adds	r2, r3, #1
 800b208:	75fa      	strb	r2, [r7, #23]
 800b20a:	461a      	mov	r2, r3
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	4413      	add	r3, r2
 800b210:	2203      	movs	r2, #3
 800b212:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b214:	e012      	b.n	800b23c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	1c5a      	adds	r2, r3, #1
 800b21a:	60fa      	str	r2, [r7, #12]
 800b21c:	7dfa      	ldrb	r2, [r7, #23]
 800b21e:	1c51      	adds	r1, r2, #1
 800b220:	75f9      	strb	r1, [r7, #23]
 800b222:	4611      	mov	r1, r2
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	440a      	add	r2, r1
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b22c:	7dfb      	ldrb	r3, [r7, #23]
 800b22e:	1c5a      	adds	r2, r3, #1
 800b230:	75fa      	strb	r2, [r7, #23]
 800b232:	461a      	mov	r2, r3
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	4413      	add	r3, r2
 800b238:	2200      	movs	r2, #0
 800b23a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1e8      	bne.n	800b216 <USBD_GetString+0x4e>
    }
  }
}
 800b244:	bf00      	nop
 800b246:	3718      	adds	r7, #24
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b254:	2300      	movs	r3, #0
 800b256:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b258:	e005      	b.n	800b266 <USBD_GetLen+0x1a>
  {
    len++;
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
 800b25c:	3301      	adds	r3, #1
 800b25e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	3301      	adds	r3, #1
 800b264:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1f5      	bne.n	800b25a <USBD_GetLen+0xe>
  }

  return len;
 800b26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3714      	adds	r7, #20
 800b274:	46bd      	mov	sp, r7
 800b276:	bc80      	pop	{r7}
 800b278:	4770      	bx	lr

0800b27a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	60f8      	str	r0, [r7, #12]
 800b282:	60b9      	str	r1, [r7, #8]
 800b284:	4613      	mov	r3, r2
 800b286:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2202      	movs	r2, #2
 800b28c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b290:	88fa      	ldrh	r2, [r7, #6]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b296:	88fa      	ldrh	r2, [r7, #6]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b29c:	88fb      	ldrh	r3, [r7, #6]
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f003 fdef 	bl	800ee86 <USBD_LL_Transmit>

  return USBD_OK;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b084      	sub	sp, #16
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	60f8      	str	r0, [r7, #12]
 800b2ba:	60b9      	str	r1, [r7, #8]
 800b2bc:	4613      	mov	r3, r2
 800b2be:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2c0:	88fb      	ldrh	r3, [r7, #6]
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f003 fddd 	bl	800ee86 <USBD_LL_Transmit>

  return USBD_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b084      	sub	sp, #16
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	60f8      	str	r0, [r7, #12]
 800b2de:	60b9      	str	r1, [r7, #8]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2203      	movs	r2, #3
 800b2e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b2ec:	88fa      	ldrh	r2, [r7, #6]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b2f4:	88fa      	ldrh	r2, [r7, #6]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2fc:	88fb      	ldrh	r3, [r7, #6]
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	2100      	movs	r1, #0
 800b302:	68f8      	ldr	r0, [r7, #12]
 800b304:	f003 fde2 	bl	800eecc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b084      	sub	sp, #16
 800b316:	af00      	add	r7, sp, #0
 800b318:	60f8      	str	r0, [r7, #12]
 800b31a:	60b9      	str	r1, [r7, #8]
 800b31c:	4613      	mov	r3, r2
 800b31e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b320:	88fb      	ldrh	r3, [r7, #6]
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	2100      	movs	r1, #0
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f003 fdd0 	bl	800eecc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b082      	sub	sp, #8
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2204      	movs	r2, #4
 800b342:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b346:	2300      	movs	r3, #0
 800b348:	2200      	movs	r2, #0
 800b34a:	2100      	movs	r1, #0
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f003 fd9a 	bl	800ee86 <USBD_LL_Transmit>

  return USBD_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2205      	movs	r2, #5
 800b368:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b36c:	2300      	movs	r3, #0
 800b36e:	2200      	movs	r2, #0
 800b370:	2100      	movs	r1, #0
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f003 fdaa 	bl	800eecc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
	...

0800b384 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b38a:	f3ef 8305 	mrs	r3, IPSR
 800b38e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b390:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10f      	bne.n	800b3b6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b396:	f3ef 8310 	mrs	r3, PRIMASK
 800b39a:	607b      	str	r3, [r7, #4]
  return(result);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d109      	bne.n	800b3b6 <osKernelInitialize+0x32>
 800b3a2:	4b10      	ldr	r3, [pc, #64]	; (800b3e4 <osKernelInitialize+0x60>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d109      	bne.n	800b3be <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b3aa:	f3ef 8311 	mrs	r3, BASEPRI
 800b3ae:	603b      	str	r3, [r7, #0]
  return(result);
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d003      	beq.n	800b3be <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b3b6:	f06f 0305 	mvn.w	r3, #5
 800b3ba:	60fb      	str	r3, [r7, #12]
 800b3bc:	e00c      	b.n	800b3d8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b3be:	4b09      	ldr	r3, [pc, #36]	; (800b3e4 <osKernelInitialize+0x60>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d105      	bne.n	800b3d2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800b3c6:	4b07      	ldr	r3, [pc, #28]	; (800b3e4 <osKernelInitialize+0x60>)
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	60fb      	str	r3, [r7, #12]
 800b3d0:	e002      	b.n	800b3d8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b3d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bc80      	pop	{r7}
 800b3e2:	4770      	bx	lr
 800b3e4:	200001b4 	.word	0x200001b4

0800b3e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3ee:	f3ef 8305 	mrs	r3, IPSR
 800b3f2:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d10f      	bne.n	800b41a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3fa:	f3ef 8310 	mrs	r3, PRIMASK
 800b3fe:	607b      	str	r3, [r7, #4]
  return(result);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d109      	bne.n	800b41a <osKernelStart+0x32>
 800b406:	4b11      	ldr	r3, [pc, #68]	; (800b44c <osKernelStart+0x64>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2b02      	cmp	r3, #2
 800b40c:	d109      	bne.n	800b422 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b40e:	f3ef 8311 	mrs	r3, BASEPRI
 800b412:	603b      	str	r3, [r7, #0]
  return(result);
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d003      	beq.n	800b422 <osKernelStart+0x3a>
    stat = osErrorISR;
 800b41a:	f06f 0305 	mvn.w	r3, #5
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	e00e      	b.n	800b440 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800b422:	4b0a      	ldr	r3, [pc, #40]	; (800b44c <osKernelStart+0x64>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d107      	bne.n	800b43a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800b42a:	4b08      	ldr	r3, [pc, #32]	; (800b44c <osKernelStart+0x64>)
 800b42c:	2202      	movs	r2, #2
 800b42e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800b430:	f001 fbc6 	bl	800cbc0 <vTaskStartScheduler>
      stat = osOK;
 800b434:	2300      	movs	r3, #0
 800b436:	60fb      	str	r3, [r7, #12]
 800b438:	e002      	b.n	800b440 <osKernelStart+0x58>
    } else {
      stat = osError;
 800b43a:	f04f 33ff 	mov.w	r3, #4294967295
 800b43e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b440:	68fb      	ldr	r3, [r7, #12]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	200001b4 	.word	0x200001b4

0800b450 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b450:	b580      	push	{r7, lr}
 800b452:	b092      	sub	sp, #72	; 0x48
 800b454:	af04      	add	r7, sp, #16
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b45c:	2300      	movs	r3, #0
 800b45e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b460:	f3ef 8305 	mrs	r3, IPSR
 800b464:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b466:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f040 8094 	bne.w	800b596 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b46e:	f3ef 8310 	mrs	r3, PRIMASK
 800b472:	623b      	str	r3, [r7, #32]
  return(result);
 800b474:	6a3b      	ldr	r3, [r7, #32]
 800b476:	2b00      	cmp	r3, #0
 800b478:	f040 808d 	bne.w	800b596 <osThreadNew+0x146>
 800b47c:	4b48      	ldr	r3, [pc, #288]	; (800b5a0 <osThreadNew+0x150>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2b02      	cmp	r3, #2
 800b482:	d106      	bne.n	800b492 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b484:	f3ef 8311 	mrs	r3, BASEPRI
 800b488:	61fb      	str	r3, [r7, #28]
  return(result);
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f040 8082 	bne.w	800b596 <osThreadNew+0x146>
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d07e      	beq.n	800b596 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800b498:	2380      	movs	r3, #128	; 0x80
 800b49a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800b49c:	2318      	movs	r3, #24
 800b49e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800b4a4:	f107 031b 	add.w	r3, r7, #27
 800b4a8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800b4aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ae:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d045      	beq.n	800b542 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d002      	beq.n	800b4c4 <osThreadNew+0x74>
        name = attr->name;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	699b      	ldr	r3, [r3, #24]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d002      	beq.n	800b4d2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	699b      	ldr	r3, [r3, #24]
 800b4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d008      	beq.n	800b4ea <osThreadNew+0x9a>
 800b4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4da:	2b38      	cmp	r3, #56	; 0x38
 800b4dc:	d805      	bhi.n	800b4ea <osThreadNew+0x9a>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	f003 0301 	and.w	r3, r3, #1
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d001      	beq.n	800b4ee <osThreadNew+0x9e>
        return (NULL);
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	e054      	b.n	800b598 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	695b      	ldr	r3, [r3, #20]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d003      	beq.n	800b4fe <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	695b      	ldr	r3, [r3, #20]
 800b4fa:	089b      	lsrs	r3, r3, #2
 800b4fc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00e      	beq.n	800b524 <osThreadNew+0xd4>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	2b5b      	cmp	r3, #91	; 0x5b
 800b50c:	d90a      	bls.n	800b524 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b512:	2b00      	cmp	r3, #0
 800b514:	d006      	beq.n	800b524 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	695b      	ldr	r3, [r3, #20]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d002      	beq.n	800b524 <osThreadNew+0xd4>
        mem = 1;
 800b51e:	2301      	movs	r3, #1
 800b520:	62bb      	str	r3, [r7, #40]	; 0x28
 800b522:	e010      	b.n	800b546 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10c      	bne.n	800b546 <osThreadNew+0xf6>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d108      	bne.n	800b546 <osThreadNew+0xf6>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	691b      	ldr	r3, [r3, #16]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d104      	bne.n	800b546 <osThreadNew+0xf6>
          mem = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b540:	e001      	b.n	800b546 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800b542:	2300      	movs	r3, #0
 800b544:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800b546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d110      	bne.n	800b56e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b554:	9202      	str	r2, [sp, #8]
 800b556:	9301      	str	r3, [sp, #4]
 800b558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b560:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f001 f8e2 	bl	800c72c <xTaskCreateStatic>
 800b568:	4603      	mov	r3, r0
 800b56a:	617b      	str	r3, [r7, #20]
 800b56c:	e013      	b.n	800b596 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800b56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b570:	2b00      	cmp	r3, #0
 800b572:	d110      	bne.n	800b596 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b576:	b29a      	uxth	r2, r3
 800b578:	f107 0314 	add.w	r3, r7, #20
 800b57c:	9301      	str	r3, [sp, #4]
 800b57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f001 f92c 	bl	800c7e4 <xTaskCreate>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d001      	beq.n	800b596 <osThreadNew+0x146>
          hTask = NULL;
 800b592:	2300      	movs	r3, #0
 800b594:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b596:	697b      	ldr	r3, [r7, #20]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3738      	adds	r7, #56	; 0x38
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	200001b4 	.word	0x200001b4

0800b5a4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b086      	sub	sp, #24
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5ac:	f3ef 8305 	mrs	r3, IPSR
 800b5b0:	613b      	str	r3, [r7, #16]
  return(result);
 800b5b2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10f      	bne.n	800b5d8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5b8:	f3ef 8310 	mrs	r3, PRIMASK
 800b5bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d109      	bne.n	800b5d8 <osDelay+0x34>
 800b5c4:	4b0d      	ldr	r3, [pc, #52]	; (800b5fc <osDelay+0x58>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d109      	bne.n	800b5e0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b5cc:	f3ef 8311 	mrs	r3, BASEPRI
 800b5d0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d003      	beq.n	800b5e0 <osDelay+0x3c>
    stat = osErrorISR;
 800b5d8:	f06f 0305 	mvn.w	r3, #5
 800b5dc:	617b      	str	r3, [r7, #20]
 800b5de:	e007      	b.n	800b5f0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d002      	beq.n	800b5f0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f001 fab4 	bl	800cb58 <vTaskDelay>
    }
  }

  return (stat);
 800b5f0:	697b      	ldr	r3, [r7, #20]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3718      	adds	r7, #24
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	200001b4 	.word	0x200001b4

0800b600 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b600:	b580      	push	{r7, lr}
 800b602:	b08a      	sub	sp, #40	; 0x28
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b608:	2300      	movs	r3, #0
 800b60a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b60c:	f3ef 8305 	mrs	r3, IPSR
 800b610:	613b      	str	r3, [r7, #16]
  return(result);
 800b612:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800b614:	2b00      	cmp	r3, #0
 800b616:	f040 8085 	bne.w	800b724 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b61a:	f3ef 8310 	mrs	r3, PRIMASK
 800b61e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d17e      	bne.n	800b724 <osMutexNew+0x124>
 800b626:	4b42      	ldr	r3, [pc, #264]	; (800b730 <osMutexNew+0x130>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	d105      	bne.n	800b63a <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b62e:	f3ef 8311 	mrs	r3, BASEPRI
 800b632:	60bb      	str	r3, [r7, #8]
  return(result);
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d174      	bne.n	800b724 <osMutexNew+0x124>
    if (attr != NULL) {
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d003      	beq.n	800b648 <osMutexNew+0x48>
      type = attr->attr_bits;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	623b      	str	r3, [r7, #32]
 800b646:	e001      	b.n	800b64c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800b648:	2300      	movs	r3, #0
 800b64a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b64c:	6a3b      	ldr	r3, [r7, #32]
 800b64e:	f003 0301 	and.w	r3, r3, #1
 800b652:	2b00      	cmp	r3, #0
 800b654:	d002      	beq.n	800b65c <osMutexNew+0x5c>
      rmtx = 1U;
 800b656:	2301      	movs	r3, #1
 800b658:	61fb      	str	r3, [r7, #28]
 800b65a:	e001      	b.n	800b660 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800b65c:	2300      	movs	r3, #0
 800b65e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b660:	6a3b      	ldr	r3, [r7, #32]
 800b662:	f003 0308 	and.w	r3, r3, #8
 800b666:	2b00      	cmp	r3, #0
 800b668:	d15c      	bne.n	800b724 <osMutexNew+0x124>
      mem = -1;
 800b66a:	f04f 33ff 	mov.w	r3, #4294967295
 800b66e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d015      	beq.n	800b6a2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d006      	beq.n	800b68c <osMutexNew+0x8c>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	2b4f      	cmp	r3, #79	; 0x4f
 800b684:	d902      	bls.n	800b68c <osMutexNew+0x8c>
          mem = 1;
 800b686:	2301      	movs	r3, #1
 800b688:	61bb      	str	r3, [r7, #24]
 800b68a:	e00c      	b.n	800b6a6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d108      	bne.n	800b6a6 <osMutexNew+0xa6>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d104      	bne.n	800b6a6 <osMutexNew+0xa6>
            mem = 0;
 800b69c:	2300      	movs	r3, #0
 800b69e:	61bb      	str	r3, [r7, #24]
 800b6a0:	e001      	b.n	800b6a6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d112      	bne.n	800b6d2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d007      	beq.n	800b6c2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	2004      	movs	r0, #4
 800b6ba:	f000 fb15 	bl	800bce8 <xQueueCreateMutexStatic>
 800b6be:	6278      	str	r0, [r7, #36]	; 0x24
 800b6c0:	e016      	b.n	800b6f0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	2001      	movs	r0, #1
 800b6ca:	f000 fb0d 	bl	800bce8 <xQueueCreateMutexStatic>
 800b6ce:	6278      	str	r0, [r7, #36]	; 0x24
 800b6d0:	e00e      	b.n	800b6f0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800b6d2:	69bb      	ldr	r3, [r7, #24]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d10b      	bne.n	800b6f0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d004      	beq.n	800b6e8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b6de:	2004      	movs	r0, #4
 800b6e0:	f000 faea 	bl	800bcb8 <xQueueCreateMutex>
 800b6e4:	6278      	str	r0, [r7, #36]	; 0x24
 800b6e6:	e003      	b.n	800b6f0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800b6e8:	2001      	movs	r0, #1
 800b6ea:	f000 fae5 	bl	800bcb8 <xQueueCreateMutex>
 800b6ee:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00c      	beq.n	800b710 <osMutexNew+0x110>
        if (attr != NULL) {
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d003      	beq.n	800b704 <osMutexNew+0x104>
          name = attr->name;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	617b      	str	r3, [r7, #20]
 800b702:	e001      	b.n	800b708 <osMutexNew+0x108>
        } else {
          name = NULL;
 800b704:	2300      	movs	r3, #0
 800b706:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800b708:	6979      	ldr	r1, [r7, #20]
 800b70a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b70c:	f000 ffb2 	bl	800c674 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b712:	2b00      	cmp	r3, #0
 800b714:	d006      	beq.n	800b724 <osMutexNew+0x124>
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d003      	beq.n	800b724 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71e:	f043 0301 	orr.w	r3, r3, #1
 800b722:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b726:	4618      	mov	r0, r3
 800b728:	3728      	adds	r7, #40	; 0x28
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	200001b4 	.word	0x200001b4

0800b734 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b734:	b580      	push	{r7, lr}
 800b736:	b08c      	sub	sp, #48	; 0x30
 800b738:	af02      	add	r7, sp, #8
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b740:	2300      	movs	r3, #0
 800b742:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b744:	f3ef 8305 	mrs	r3, IPSR
 800b748:	61bb      	str	r3, [r7, #24]
  return(result);
 800b74a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d16f      	bne.n	800b830 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b750:	f3ef 8310 	mrs	r3, PRIMASK
 800b754:	617b      	str	r3, [r7, #20]
  return(result);
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d169      	bne.n	800b830 <osMessageQueueNew+0xfc>
 800b75c:	4b37      	ldr	r3, [pc, #220]	; (800b83c <osMessageQueueNew+0x108>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2b02      	cmp	r3, #2
 800b762:	d105      	bne.n	800b770 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b764:	f3ef 8311 	mrs	r3, BASEPRI
 800b768:	613b      	str	r3, [r7, #16]
  return(result);
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d15f      	bne.n	800b830 <osMessageQueueNew+0xfc>
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d05c      	beq.n	800b830 <osMessageQueueNew+0xfc>
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d059      	beq.n	800b830 <osMessageQueueNew+0xfc>
    mem = -1;
 800b77c:	f04f 33ff 	mov.w	r3, #4294967295
 800b780:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d029      	beq.n	800b7dc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d012      	beq.n	800b7b6 <osMessageQueueNew+0x82>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	2b4f      	cmp	r3, #79	; 0x4f
 800b796:	d90e      	bls.n	800b7b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00a      	beq.n	800b7b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	695a      	ldr	r2, [r3, #20]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	68b9      	ldr	r1, [r7, #8]
 800b7a8:	fb01 f303 	mul.w	r3, r1, r3
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d302      	bcc.n	800b7b6 <osMessageQueueNew+0x82>
        mem = 1;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	623b      	str	r3, [r7, #32]
 800b7b4:	e014      	b.n	800b7e0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d110      	bne.n	800b7e0 <osMessageQueueNew+0xac>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d10c      	bne.n	800b7e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d108      	bne.n	800b7e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	695b      	ldr	r3, [r3, #20]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d104      	bne.n	800b7e0 <osMessageQueueNew+0xac>
          mem = 0;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	623b      	str	r3, [r7, #32]
 800b7da:	e001      	b.n	800b7e0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b7e0:	6a3b      	ldr	r3, [r7, #32]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d10b      	bne.n	800b7fe <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	691a      	ldr	r2, [r3, #16]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	9100      	str	r1, [sp, #0]
 800b7f2:	68b9      	ldr	r1, [r7, #8]
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f000 f96d 	bl	800bad4 <xQueueGenericCreateStatic>
 800b7fa:	6278      	str	r0, [r7, #36]	; 0x24
 800b7fc:	e008      	b.n	800b810 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800b7fe:	6a3b      	ldr	r3, [r7, #32]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d105      	bne.n	800b810 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b804:	2200      	movs	r2, #0
 800b806:	68b9      	ldr	r1, [r7, #8]
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 f9da 	bl	800bbc2 <xQueueGenericCreate>
 800b80e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00c      	beq.n	800b830 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d003      	beq.n	800b824 <osMessageQueueNew+0xf0>
        name = attr->name;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	61fb      	str	r3, [r7, #28]
 800b822:	e001      	b.n	800b828 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800b824:	2300      	movs	r3, #0
 800b826:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800b828:	69f9      	ldr	r1, [r7, #28]
 800b82a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b82c:	f000 ff22 	bl	800c674 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b832:	4618      	mov	r0, r3
 800b834:	3728      	adds	r7, #40	; 0x28
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	200001b4 	.word	0x200001b4

0800b840 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b840:	b480      	push	{r7}
 800b842:	b085      	sub	sp, #20
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	4a06      	ldr	r2, [pc, #24]	; (800b868 <vApplicationGetIdleTaskMemory+0x28>)
 800b850:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	4a05      	ldr	r2, [pc, #20]	; (800b86c <vApplicationGetIdleTaskMemory+0x2c>)
 800b856:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2280      	movs	r2, #128	; 0x80
 800b85c:	601a      	str	r2, [r3, #0]
}
 800b85e:	bf00      	nop
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	bc80      	pop	{r7}
 800b866:	4770      	bx	lr
 800b868:	200001b8 	.word	0x200001b8
 800b86c:	20000214 	.word	0x20000214

0800b870 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b870:	b480      	push	{r7}
 800b872:	b085      	sub	sp, #20
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	4a07      	ldr	r2, [pc, #28]	; (800b89c <vApplicationGetTimerTaskMemory+0x2c>)
 800b880:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	4a06      	ldr	r2, [pc, #24]	; (800b8a0 <vApplicationGetTimerTaskMemory+0x30>)
 800b886:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b88e:	601a      	str	r2, [r3, #0]
}
 800b890:	bf00      	nop
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	bc80      	pop	{r7}
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	20000414 	.word	0x20000414
 800b8a0:	20000470 	.word	0x20000470

0800b8a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f103 0208 	add.w	r2, r3, #8
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f103 0208 	add.w	r2, r3, #8
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f103 0208 	add.w	r2, r3, #8
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bc80      	pop	{r7}
 800b8e0:	4770      	bx	lr

0800b8e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b8e2:	b480      	push	{r7}
 800b8e4:	b083      	sub	sp, #12
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bc80      	pop	{r7}
 800b8f8:	4770      	bx	lr

0800b8fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8fa:	b480      	push	{r7}
 800b8fc:	b085      	sub	sp, #20
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	689a      	ldr	r2, [r3, #8]
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	1c5a      	adds	r2, r3, #1
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	601a      	str	r2, [r3, #0]
}
 800b936:	bf00      	nop
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bc80      	pop	{r7}
 800b93e:	4770      	bx	lr

0800b940 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b956:	d103      	bne.n	800b960 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	60fb      	str	r3, [r7, #12]
 800b95e:	e00c      	b.n	800b97a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	3308      	adds	r3, #8
 800b964:	60fb      	str	r3, [r7, #12]
 800b966:	e002      	b.n	800b96e <vListInsert+0x2e>
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	60fb      	str	r3, [r7, #12]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	429a      	cmp	r2, r3
 800b978:	d2f6      	bcs.n	800b968 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	685a      	ldr	r2, [r3, #4]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	1c5a      	adds	r2, r3, #1
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	601a      	str	r2, [r3, #0]
}
 800b9a6:	bf00      	nop
 800b9a8:	3714      	adds	r7, #20
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bc80      	pop	{r7}
 800b9ae:	4770      	bx	lr

0800b9b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b085      	sub	sp, #20
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	691b      	ldr	r3, [r3, #16]
 800b9bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	6892      	ldr	r2, [r2, #8]
 800b9c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	6852      	ldr	r2, [r2, #4]
 800b9d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d103      	bne.n	800b9e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	689a      	ldr	r2, [r3, #8]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	1e5a      	subs	r2, r3, #1
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3714      	adds	r7, #20
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bc80      	pop	{r7}
 800ba00:	4770      	bx	lr
	...

0800ba04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10a      	bne.n	800ba2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ba18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1c:	f383 8811 	msr	BASEPRI, r3
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ba2a:	bf00      	nop
 800ba2c:	e7fe      	b.n	800ba2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ba2e:	f002 fb35 	bl	800e09c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba3a:	68f9      	ldr	r1, [r7, #12]
 800ba3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba3e:	fb01 f303 	mul.w	r3, r1, r3
 800ba42:	441a      	add	r2, r3
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	68f9      	ldr	r1, [r7, #12]
 800ba62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba64:	fb01 f303 	mul.w	r3, r1, r3
 800ba68:	441a      	add	r2, r3
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	22ff      	movs	r2, #255	; 0xff
 800ba72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	22ff      	movs	r2, #255	; 0xff
 800ba7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d114      	bne.n	800baae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d01a      	beq.n	800bac2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	3310      	adds	r3, #16
 800ba90:	4618      	mov	r0, r3
 800ba92:	f001 fb1f 	bl	800d0d4 <xTaskRemoveFromEventList>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d012      	beq.n	800bac2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ba9c:	4b0c      	ldr	r3, [pc, #48]	; (800bad0 <xQueueGenericReset+0xcc>)
 800ba9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baa2:	601a      	str	r2, [r3, #0]
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	e009      	b.n	800bac2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	3310      	adds	r3, #16
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7ff fef6 	bl	800b8a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	3324      	adds	r3, #36	; 0x24
 800babc:	4618      	mov	r0, r3
 800babe:	f7ff fef1 	bl	800b8a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bac2:	f002 fb1b 	bl	800e0fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bac6:	2301      	movs	r3, #1
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	e000ed04 	.word	0xe000ed04

0800bad4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b08e      	sub	sp, #56	; 0x38
 800bad8:	af02      	add	r7, sp, #8
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
 800bae0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d10a      	bne.n	800bafe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bafa:	bf00      	nop
 800bafc:	e7fe      	b.n	800bafc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10a      	bne.n	800bb1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb08:	f383 8811 	msr	BASEPRI, r3
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb16:	bf00      	nop
 800bb18:	e7fe      	b.n	800bb18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d002      	beq.n	800bb26 <xQueueGenericCreateStatic+0x52>
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d001      	beq.n	800bb2a <xQueueGenericCreateStatic+0x56>
 800bb26:	2301      	movs	r3, #1
 800bb28:	e000      	b.n	800bb2c <xQueueGenericCreateStatic+0x58>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10a      	bne.n	800bb46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	623b      	str	r3, [r7, #32]
}
 800bb42:	bf00      	nop
 800bb44:	e7fe      	b.n	800bb44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d102      	bne.n	800bb52 <xQueueGenericCreateStatic+0x7e>
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d101      	bne.n	800bb56 <xQueueGenericCreateStatic+0x82>
 800bb52:	2301      	movs	r3, #1
 800bb54:	e000      	b.n	800bb58 <xQueueGenericCreateStatic+0x84>
 800bb56:	2300      	movs	r3, #0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10a      	bne.n	800bb72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	61fb      	str	r3, [r7, #28]
}
 800bb6e:	bf00      	nop
 800bb70:	e7fe      	b.n	800bb70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bb72:	2350      	movs	r3, #80	; 0x50
 800bb74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	2b50      	cmp	r3, #80	; 0x50
 800bb7a:	d00a      	beq.n	800bb92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb80:	f383 8811 	msr	BASEPRI, r3
 800bb84:	f3bf 8f6f 	isb	sy
 800bb88:	f3bf 8f4f 	dsb	sy
 800bb8c:	61bb      	str	r3, [r7, #24]
}
 800bb8e:	bf00      	nop
 800bb90:	e7fe      	b.n	800bb90 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00d      	beq.n	800bbb8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bba4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	4613      	mov	r3, r2
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	68b9      	ldr	r1, [r7, #8]
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f000 f843 	bl	800bc3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800bbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3730      	adds	r7, #48	; 0x30
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b08a      	sub	sp, #40	; 0x28
 800bbc6:	af02      	add	r7, sp, #8
 800bbc8:	60f8      	str	r0, [r7, #12]
 800bbca:	60b9      	str	r1, [r7, #8]
 800bbcc:	4613      	mov	r3, r2
 800bbce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d10a      	bne.n	800bbec <xQueueGenericCreate+0x2a>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	613b      	str	r3, [r7, #16]
}
 800bbe8:	bf00      	nop
 800bbea:	e7fe      	b.n	800bbea <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d102      	bne.n	800bbf8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	61fb      	str	r3, [r7, #28]
 800bbf6:	e004      	b.n	800bc02 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	fb02 f303 	mul.w	r3, r2, r3
 800bc00:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	3350      	adds	r3, #80	; 0x50
 800bc06:	4618      	mov	r0, r3
 800bc08:	f002 fb48 	bl	800e29c <pvPortMalloc>
 800bc0c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00f      	beq.n	800bc34 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	3350      	adds	r3, #80	; 0x50
 800bc18:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc22:	79fa      	ldrb	r2, [r7, #7]
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	68b9      	ldr	r1, [r7, #8]
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f000 f805 	bl	800bc3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800bc34:	69bb      	ldr	r3, [r7, #24]
	}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3720      	adds	r7, #32
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b084      	sub	sp, #16
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	60f8      	str	r0, [r7, #12]
 800bc46:	60b9      	str	r1, [r7, #8]
 800bc48:	607a      	str	r2, [r7, #4]
 800bc4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d103      	bne.n	800bc5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	69ba      	ldr	r2, [r7, #24]
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	e002      	b.n	800bc60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	68ba      	ldr	r2, [r7, #8]
 800bc6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bc6c:	2101      	movs	r1, #1
 800bc6e:	69b8      	ldr	r0, [r7, #24]
 800bc70:	f7ff fec8 	bl	800ba04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	78fa      	ldrb	r2, [r7, #3]
 800bc78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bc7c:	bf00      	nop
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00e      	beq.n	800bcb0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bca4:	2300      	movs	r3, #0
 800bca6:	2200      	movs	r2, #0
 800bca8:	2100      	movs	r1, #0
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 f838 	bl	800bd20 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bcb0:	bf00      	nop
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b086      	sub	sp, #24
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	617b      	str	r3, [r7, #20]
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bcca:	79fb      	ldrb	r3, [r7, #7]
 800bccc:	461a      	mov	r2, r3
 800bcce:	6939      	ldr	r1, [r7, #16]
 800bcd0:	6978      	ldr	r0, [r7, #20]
 800bcd2:	f7ff ff76 	bl	800bbc2 <xQueueGenericCreate>
 800bcd6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f7ff ffd3 	bl	800bc84 <prvInitialiseMutex>

		return pxNewQueue;
 800bcde:	68fb      	ldr	r3, [r7, #12]
	}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3718      	adds	r7, #24
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b088      	sub	sp, #32
 800bcec:	af02      	add	r7, sp, #8
 800bcee:	4603      	mov	r3, r0
 800bcf0:	6039      	str	r1, [r7, #0]
 800bcf2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	617b      	str	r3, [r7, #20]
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bcfc:	79fb      	ldrb	r3, [r7, #7]
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	2200      	movs	r2, #0
 800bd04:	6939      	ldr	r1, [r7, #16]
 800bd06:	6978      	ldr	r0, [r7, #20]
 800bd08:	f7ff fee4 	bl	800bad4 <xQueueGenericCreateStatic>
 800bd0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800bd0e:	68f8      	ldr	r0, [r7, #12]
 800bd10:	f7ff ffb8 	bl	800bc84 <prvInitialiseMutex>

		return pxNewQueue;
 800bd14:	68fb      	ldr	r3, [r7, #12]
	}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3718      	adds	r7, #24
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
	...

0800bd20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b08e      	sub	sp, #56	; 0x38
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	60b9      	str	r1, [r7, #8]
 800bd2a:	607a      	str	r2, [r7, #4]
 800bd2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d10a      	bne.n	800bd52 <xQueueGenericSend+0x32>
	__asm volatile
 800bd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd40:	f383 8811 	msr	BASEPRI, r3
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd4e:	bf00      	nop
 800bd50:	e7fe      	b.n	800bd50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d103      	bne.n	800bd60 <xQueueGenericSend+0x40>
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d101      	bne.n	800bd64 <xQueueGenericSend+0x44>
 800bd60:	2301      	movs	r3, #1
 800bd62:	e000      	b.n	800bd66 <xQueueGenericSend+0x46>
 800bd64:	2300      	movs	r3, #0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10a      	bne.n	800bd80 <xQueueGenericSend+0x60>
	__asm volatile
 800bd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd7c:	bf00      	nop
 800bd7e:	e7fe      	b.n	800bd7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d103      	bne.n	800bd8e <xQueueGenericSend+0x6e>
 800bd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d101      	bne.n	800bd92 <xQueueGenericSend+0x72>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e000      	b.n	800bd94 <xQueueGenericSend+0x74>
 800bd92:	2300      	movs	r3, #0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10a      	bne.n	800bdae <xQueueGenericSend+0x8e>
	__asm volatile
 800bd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9c:	f383 8811 	msr	BASEPRI, r3
 800bda0:	f3bf 8f6f 	isb	sy
 800bda4:	f3bf 8f4f 	dsb	sy
 800bda8:	623b      	str	r3, [r7, #32]
}
 800bdaa:	bf00      	nop
 800bdac:	e7fe      	b.n	800bdac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdae:	f001 fb8b 	bl	800d4c8 <xTaskGetSchedulerState>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d102      	bne.n	800bdbe <xQueueGenericSend+0x9e>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d101      	bne.n	800bdc2 <xQueueGenericSend+0xa2>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e000      	b.n	800bdc4 <xQueueGenericSend+0xa4>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10a      	bne.n	800bdde <xQueueGenericSend+0xbe>
	__asm volatile
 800bdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdcc:	f383 8811 	msr	BASEPRI, r3
 800bdd0:	f3bf 8f6f 	isb	sy
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	61fb      	str	r3, [r7, #28]
}
 800bdda:	bf00      	nop
 800bddc:	e7fe      	b.n	800bddc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdde:	f002 f95d 	bl	800e09c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d302      	bcc.n	800bdf4 <xQueueGenericSend+0xd4>
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	d129      	bne.n	800be48 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bdf4:	683a      	ldr	r2, [r7, #0]
 800bdf6:	68b9      	ldr	r1, [r7, #8]
 800bdf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdfa:	f000 fb2a 	bl	800c452 <prvCopyDataToQueue>
 800bdfe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be04:	2b00      	cmp	r3, #0
 800be06:	d010      	beq.n	800be2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0a:	3324      	adds	r3, #36	; 0x24
 800be0c:	4618      	mov	r0, r3
 800be0e:	f001 f961 	bl	800d0d4 <xTaskRemoveFromEventList>
 800be12:	4603      	mov	r3, r0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d013      	beq.n	800be40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800be18:	4b3f      	ldr	r3, [pc, #252]	; (800bf18 <xQueueGenericSend+0x1f8>)
 800be1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be1e:	601a      	str	r2, [r3, #0]
 800be20:	f3bf 8f4f 	dsb	sy
 800be24:	f3bf 8f6f 	isb	sy
 800be28:	e00a      	b.n	800be40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800be2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d007      	beq.n	800be40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800be30:	4b39      	ldr	r3, [pc, #228]	; (800bf18 <xQueueGenericSend+0x1f8>)
 800be32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be36:	601a      	str	r2, [r3, #0]
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800be40:	f002 f95c 	bl	800e0fc <vPortExitCritical>
				return pdPASS;
 800be44:	2301      	movs	r3, #1
 800be46:	e063      	b.n	800bf10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d103      	bne.n	800be56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be4e:	f002 f955 	bl	800e0fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800be52:	2300      	movs	r3, #0
 800be54:	e05c      	b.n	800bf10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d106      	bne.n	800be6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be5c:	f107 0314 	add.w	r3, r7, #20
 800be60:	4618      	mov	r0, r3
 800be62:	f001 f99b 	bl	800d19c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be66:	2301      	movs	r3, #1
 800be68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be6a:	f002 f947 	bl	800e0fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be6e:	f000 ff0d 	bl	800cc8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be72:	f002 f913 	bl	800e09c <vPortEnterCritical>
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be7c:	b25b      	sxtb	r3, r3
 800be7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be82:	d103      	bne.n	800be8c <xQueueGenericSend+0x16c>
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	2200      	movs	r2, #0
 800be88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be92:	b25b      	sxtb	r3, r3
 800be94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be98:	d103      	bne.n	800bea2 <xQueueGenericSend+0x182>
 800be9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9c:	2200      	movs	r2, #0
 800be9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bea2:	f002 f92b 	bl	800e0fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bea6:	1d3a      	adds	r2, r7, #4
 800bea8:	f107 0314 	add.w	r3, r7, #20
 800beac:	4611      	mov	r1, r2
 800beae:	4618      	mov	r0, r3
 800beb0:	f001 f98a 	bl	800d1c8 <xTaskCheckForTimeOut>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d124      	bne.n	800bf04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800beba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bebc:	f000 fbc1 	bl	800c642 <prvIsQueueFull>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d018      	beq.n	800bef8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec8:	3310      	adds	r3, #16
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	4611      	mov	r1, r2
 800bece:	4618      	mov	r0, r3
 800bed0:	f001 f8b0 	bl	800d034 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bed6:	f000 fb4c 	bl	800c572 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800beda:	f000 fee5 	bl	800cca8 <xTaskResumeAll>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	f47f af7c 	bne.w	800bdde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bee6:	4b0c      	ldr	r3, [pc, #48]	; (800bf18 <xQueueGenericSend+0x1f8>)
 800bee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beec:	601a      	str	r2, [r3, #0]
 800beee:	f3bf 8f4f 	dsb	sy
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	e772      	b.n	800bdde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800befa:	f000 fb3a 	bl	800c572 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800befe:	f000 fed3 	bl	800cca8 <xTaskResumeAll>
 800bf02:	e76c      	b.n	800bdde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bf04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf06:	f000 fb34 	bl	800c572 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf0a:	f000 fecd 	bl	800cca8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bf0e:	2300      	movs	r3, #0
		}
	}
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3738      	adds	r7, #56	; 0x38
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	e000ed04 	.word	0xe000ed04

0800bf1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b08e      	sub	sp, #56	; 0x38
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
 800bf28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d10a      	bne.n	800bf4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf38:	f383 8811 	msr	BASEPRI, r3
 800bf3c:	f3bf 8f6f 	isb	sy
 800bf40:	f3bf 8f4f 	dsb	sy
 800bf44:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf46:	bf00      	nop
 800bf48:	e7fe      	b.n	800bf48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d103      	bne.n	800bf58 <xQueueGenericSendFromISR+0x3c>
 800bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d101      	bne.n	800bf5c <xQueueGenericSendFromISR+0x40>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e000      	b.n	800bf5e <xQueueGenericSendFromISR+0x42>
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10a      	bne.n	800bf78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	623b      	str	r3, [r7, #32]
}
 800bf74:	bf00      	nop
 800bf76:	e7fe      	b.n	800bf76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	d103      	bne.n	800bf86 <xQueueGenericSendFromISR+0x6a>
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d101      	bne.n	800bf8a <xQueueGenericSendFromISR+0x6e>
 800bf86:	2301      	movs	r3, #1
 800bf88:	e000      	b.n	800bf8c <xQueueGenericSendFromISR+0x70>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10a      	bne.n	800bfa6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	61fb      	str	r3, [r7, #28]
}
 800bfa2:	bf00      	nop
 800bfa4:	e7fe      	b.n	800bfa4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfa6:	f002 f93b 	bl	800e220 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bfaa:	f3ef 8211 	mrs	r2, BASEPRI
 800bfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	61ba      	str	r2, [r7, #24]
 800bfc0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bfc2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bfc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d302      	bcc.n	800bfd8 <xQueueGenericSendFromISR+0xbc>
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d12c      	bne.n	800c032 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bfe2:	683a      	ldr	r2, [r7, #0]
 800bfe4:	68b9      	ldr	r1, [r7, #8]
 800bfe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfe8:	f000 fa33 	bl	800c452 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bfec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff4:	d112      	bne.n	800c01c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d016      	beq.n	800c02c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c000:	3324      	adds	r3, #36	; 0x24
 800c002:	4618      	mov	r0, r3
 800c004:	f001 f866 	bl	800d0d4 <xTaskRemoveFromEventList>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00e      	beq.n	800c02c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00b      	beq.n	800c02c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2201      	movs	r2, #1
 800c018:	601a      	str	r2, [r3, #0]
 800c01a:	e007      	b.n	800c02c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c01c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c020:	3301      	adds	r3, #1
 800c022:	b2db      	uxtb	r3, r3
 800c024:	b25a      	sxtb	r2, r3
 800c026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c02c:	2301      	movs	r3, #1
 800c02e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c030:	e001      	b.n	800c036 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c032:	2300      	movs	r3, #0
 800c034:	637b      	str	r3, [r7, #52]	; 0x34
 800c036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c038:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c040:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c044:	4618      	mov	r0, r3
 800c046:	3738      	adds	r7, #56	; 0x38
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b08c      	sub	sp, #48	; 0x30
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c058:	2300      	movs	r3, #0
 800c05a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10a      	bne.n	800c07c <xQueueReceive+0x30>
	__asm volatile
 800c066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06a:	f383 8811 	msr	BASEPRI, r3
 800c06e:	f3bf 8f6f 	isb	sy
 800c072:	f3bf 8f4f 	dsb	sy
 800c076:	623b      	str	r3, [r7, #32]
}
 800c078:	bf00      	nop
 800c07a:	e7fe      	b.n	800c07a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d103      	bne.n	800c08a <xQueueReceive+0x3e>
 800c082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c086:	2b00      	cmp	r3, #0
 800c088:	d101      	bne.n	800c08e <xQueueReceive+0x42>
 800c08a:	2301      	movs	r3, #1
 800c08c:	e000      	b.n	800c090 <xQueueReceive+0x44>
 800c08e:	2300      	movs	r3, #0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10a      	bne.n	800c0aa <xQueueReceive+0x5e>
	__asm volatile
 800c094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	61fb      	str	r3, [r7, #28]
}
 800c0a6:	bf00      	nop
 800c0a8:	e7fe      	b.n	800c0a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0aa:	f001 fa0d 	bl	800d4c8 <xTaskGetSchedulerState>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d102      	bne.n	800c0ba <xQueueReceive+0x6e>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d101      	bne.n	800c0be <xQueueReceive+0x72>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e000      	b.n	800c0c0 <xQueueReceive+0x74>
 800c0be:	2300      	movs	r3, #0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d10a      	bne.n	800c0da <xQueueReceive+0x8e>
	__asm volatile
 800c0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c8:	f383 8811 	msr	BASEPRI, r3
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	61bb      	str	r3, [r7, #24]
}
 800c0d6:	bf00      	nop
 800c0d8:	e7fe      	b.n	800c0d8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0da:	f001 ffdf 	bl	800e09c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d01f      	beq.n	800c12a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c0ea:	68b9      	ldr	r1, [r7, #8]
 800c0ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0ee:	f000 fa1a 	bl	800c526 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f4:	1e5a      	subs	r2, r3, #1
 800c0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fc:	691b      	ldr	r3, [r3, #16]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00f      	beq.n	800c122 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c104:	3310      	adds	r3, #16
 800c106:	4618      	mov	r0, r3
 800c108:	f000 ffe4 	bl	800d0d4 <xTaskRemoveFromEventList>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d007      	beq.n	800c122 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c112:	4b3d      	ldr	r3, [pc, #244]	; (800c208 <xQueueReceive+0x1bc>)
 800c114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c118:	601a      	str	r2, [r3, #0]
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c122:	f001 ffeb 	bl	800e0fc <vPortExitCritical>
				return pdPASS;
 800c126:	2301      	movs	r3, #1
 800c128:	e069      	b.n	800c1fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d103      	bne.n	800c138 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c130:	f001 ffe4 	bl	800e0fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c134:	2300      	movs	r3, #0
 800c136:	e062      	b.n	800c1fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d106      	bne.n	800c14c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c13e:	f107 0310 	add.w	r3, r7, #16
 800c142:	4618      	mov	r0, r3
 800c144:	f001 f82a 	bl	800d19c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c148:	2301      	movs	r3, #1
 800c14a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c14c:	f001 ffd6 	bl	800e0fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c150:	f000 fd9c 	bl	800cc8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c154:	f001 ffa2 	bl	800e09c <vPortEnterCritical>
 800c158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c15e:	b25b      	sxtb	r3, r3
 800c160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c164:	d103      	bne.n	800c16e <xQueueReceive+0x122>
 800c166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c174:	b25b      	sxtb	r3, r3
 800c176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c17a:	d103      	bne.n	800c184 <xQueueReceive+0x138>
 800c17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17e:	2200      	movs	r2, #0
 800c180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c184:	f001 ffba 	bl	800e0fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c188:	1d3a      	adds	r2, r7, #4
 800c18a:	f107 0310 	add.w	r3, r7, #16
 800c18e:	4611      	mov	r1, r2
 800c190:	4618      	mov	r0, r3
 800c192:	f001 f819 	bl	800d1c8 <xTaskCheckForTimeOut>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d123      	bne.n	800c1e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c19c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c19e:	f000 fa3a 	bl	800c616 <prvIsQueueEmpty>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d017      	beq.n	800c1d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1aa:	3324      	adds	r3, #36	; 0x24
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	4611      	mov	r1, r2
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f000 ff3f 	bl	800d034 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c1b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1b8:	f000 f9db 	bl	800c572 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c1bc:	f000 fd74 	bl	800cca8 <xTaskResumeAll>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d189      	bne.n	800c0da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c1c6:	4b10      	ldr	r3, [pc, #64]	; (800c208 <xQueueReceive+0x1bc>)
 800c1c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1cc:	601a      	str	r2, [r3, #0]
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	e780      	b.n	800c0da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c1d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1da:	f000 f9ca 	bl	800c572 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1de:	f000 fd63 	bl	800cca8 <xTaskResumeAll>
 800c1e2:	e77a      	b.n	800c0da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c1e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1e6:	f000 f9c4 	bl	800c572 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1ea:	f000 fd5d 	bl	800cca8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1f0:	f000 fa11 	bl	800c616 <prvIsQueueEmpty>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	f43f af6f 	beq.w	800c0da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c1fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3730      	adds	r7, #48	; 0x30
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	e000ed04 	.word	0xe000ed04

0800c20c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b08e      	sub	sp, #56	; 0x38
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c216:	2300      	movs	r3, #0
 800c218:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c21e:	2300      	movs	r3, #0
 800c220:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10a      	bne.n	800c23e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22c:	f383 8811 	msr	BASEPRI, r3
 800c230:	f3bf 8f6f 	isb	sy
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	623b      	str	r3, [r7, #32]
}
 800c23a:	bf00      	nop
 800c23c:	e7fe      	b.n	800c23c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00a      	beq.n	800c25c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24a:	f383 8811 	msr	BASEPRI, r3
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	61fb      	str	r3, [r7, #28]
}
 800c258:	bf00      	nop
 800c25a:	e7fe      	b.n	800c25a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c25c:	f001 f934 	bl	800d4c8 <xTaskGetSchedulerState>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d102      	bne.n	800c26c <xQueueSemaphoreTake+0x60>
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d101      	bne.n	800c270 <xQueueSemaphoreTake+0x64>
 800c26c:	2301      	movs	r3, #1
 800c26e:	e000      	b.n	800c272 <xQueueSemaphoreTake+0x66>
 800c270:	2300      	movs	r3, #0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10a      	bne.n	800c28c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	61bb      	str	r3, [r7, #24]
}
 800c288:	bf00      	nop
 800c28a:	e7fe      	b.n	800c28a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c28c:	f001 ff06 	bl	800e09c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c294:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d024      	beq.n	800c2e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29e:	1e5a      	subs	r2, r3, #1
 800c2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d104      	bne.n	800c2b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800c2ac:	f001 fa8c 	bl	800d7c8 <pvTaskIncrementMutexHeldCount>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b8:	691b      	ldr	r3, [r3, #16]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00f      	beq.n	800c2de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c0:	3310      	adds	r3, #16
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f000 ff06 	bl	800d0d4 <xTaskRemoveFromEventList>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d007      	beq.n	800c2de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c2ce:	4b54      	ldr	r3, [pc, #336]	; (800c420 <xQueueSemaphoreTake+0x214>)
 800c2d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2d4:	601a      	str	r2, [r3, #0]
 800c2d6:	f3bf 8f4f 	dsb	sy
 800c2da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c2de:	f001 ff0d 	bl	800e0fc <vPortExitCritical>
				return pdPASS;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e097      	b.n	800c416 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d111      	bne.n	800c310 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00a      	beq.n	800c308 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f6:	f383 8811 	msr	BASEPRI, r3
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	617b      	str	r3, [r7, #20]
}
 800c304:	bf00      	nop
 800c306:	e7fe      	b.n	800c306 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c308:	f001 fef8 	bl	800e0fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c30c:	2300      	movs	r3, #0
 800c30e:	e082      	b.n	800c416 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c312:	2b00      	cmp	r3, #0
 800c314:	d106      	bne.n	800c324 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c316:	f107 030c 	add.w	r3, r7, #12
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 ff3e 	bl	800d19c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c320:	2301      	movs	r3, #1
 800c322:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c324:	f001 feea 	bl	800e0fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c328:	f000 fcb0 	bl	800cc8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c32c:	f001 feb6 	bl	800e09c <vPortEnterCritical>
 800c330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c332:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c336:	b25b      	sxtb	r3, r3
 800c338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c33c:	d103      	bne.n	800c346 <xQueueSemaphoreTake+0x13a>
 800c33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c340:	2200      	movs	r2, #0
 800c342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c34c:	b25b      	sxtb	r3, r3
 800c34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c352:	d103      	bne.n	800c35c <xQueueSemaphoreTake+0x150>
 800c354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c356:	2200      	movs	r2, #0
 800c358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c35c:	f001 fece 	bl	800e0fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c360:	463a      	mov	r2, r7
 800c362:	f107 030c 	add.w	r3, r7, #12
 800c366:	4611      	mov	r1, r2
 800c368:	4618      	mov	r0, r3
 800c36a:	f000 ff2d 	bl	800d1c8 <xTaskCheckForTimeOut>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d132      	bne.n	800c3da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c376:	f000 f94e 	bl	800c616 <prvIsQueueEmpty>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d026      	beq.n	800c3ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d109      	bne.n	800c39c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c388:	f001 fe88 	bl	800e09c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800c38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	4618      	mov	r0, r3
 800c392:	f001 f8b7 	bl	800d504 <xTaskPriorityInherit>
 800c396:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c398:	f001 feb0 	bl	800e0fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39e:	3324      	adds	r3, #36	; 0x24
 800c3a0:	683a      	ldr	r2, [r7, #0]
 800c3a2:	4611      	mov	r1, r2
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f000 fe45 	bl	800d034 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c3aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3ac:	f000 f8e1 	bl	800c572 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c3b0:	f000 fc7a 	bl	800cca8 <xTaskResumeAll>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f47f af68 	bne.w	800c28c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c3bc:	4b18      	ldr	r3, [pc, #96]	; (800c420 <xQueueSemaphoreTake+0x214>)
 800c3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3c2:	601a      	str	r2, [r3, #0]
 800c3c4:	f3bf 8f4f 	dsb	sy
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	e75e      	b.n	800c28c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c3ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3d0:	f000 f8cf 	bl	800c572 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3d4:	f000 fc68 	bl	800cca8 <xTaskResumeAll>
 800c3d8:	e758      	b.n	800c28c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c3da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3dc:	f000 f8c9 	bl	800c572 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3e0:	f000 fc62 	bl	800cca8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3e6:	f000 f916 	bl	800c616 <prvIsQueueEmpty>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f43f af4d 	beq.w	800c28c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d00d      	beq.n	800c414 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c3f8:	f001 fe50 	bl	800e09c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c3fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3fe:	f000 f811 	bl	800c424 <prvGetDisinheritPriorityAfterTimeout>
 800c402:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800c404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c40a:	4618      	mov	r0, r3
 800c40c:	f001 f956 	bl	800d6bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c410:	f001 fe74 	bl	800e0fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c414:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c416:	4618      	mov	r0, r3
 800c418:	3738      	adds	r7, #56	; 0x38
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	e000ed04 	.word	0xe000ed04

0800c424 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c430:	2b00      	cmp	r3, #0
 800c432:	d006      	beq.n	800c442 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c43e:	60fb      	str	r3, [r7, #12]
 800c440:	e001      	b.n	800c446 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c442:	2300      	movs	r3, #0
 800c444:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c446:	68fb      	ldr	r3, [r7, #12]
	}
 800c448:	4618      	mov	r0, r3
 800c44a:	3714      	adds	r7, #20
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bc80      	pop	{r7}
 800c450:	4770      	bx	lr

0800c452 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b086      	sub	sp, #24
 800c456:	af00      	add	r7, sp, #0
 800c458:	60f8      	str	r0, [r7, #12]
 800c45a:	60b9      	str	r1, [r7, #8]
 800c45c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c45e:	2300      	movs	r3, #0
 800c460:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c466:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d10d      	bne.n	800c48c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d14d      	bne.n	800c514 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	4618      	mov	r0, r3
 800c47e:	f001 f8af 	bl	800d5e0 <xTaskPriorityDisinherit>
 800c482:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2200      	movs	r2, #0
 800c488:	605a      	str	r2, [r3, #4]
 800c48a:	e043      	b.n	800c514 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d119      	bne.n	800c4c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	6898      	ldr	r0, [r3, #8]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c49a:	461a      	mov	r2, r3
 800c49c:	68b9      	ldr	r1, [r7, #8]
 800c49e:	f002 fdbb 	bl	800f018 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	689a      	ldr	r2, [r3, #8]
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4aa:	441a      	add	r2, r3
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	689a      	ldr	r2, [r3, #8]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d32b      	bcc.n	800c514 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	609a      	str	r2, [r3, #8]
 800c4c4:	e026      	b.n	800c514 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	68d8      	ldr	r0, [r3, #12]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	68b9      	ldr	r1, [r7, #8]
 800c4d2:	f002 fda1 	bl	800f018 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	68da      	ldr	r2, [r3, #12]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4de:	425b      	negs	r3, r3
 800c4e0:	441a      	add	r2, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	68da      	ldr	r2, [r3, #12]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d207      	bcs.n	800c502 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	685a      	ldr	r2, [r3, #4]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4fa:	425b      	negs	r3, r3
 800c4fc:	441a      	add	r2, r3
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b02      	cmp	r3, #2
 800c506:	d105      	bne.n	800c514 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	3b01      	subs	r3, #1
 800c512:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	1c5a      	adds	r2, r3, #1
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c51c:	697b      	ldr	r3, [r7, #20]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3718      	adds	r7, #24
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b082      	sub	sp, #8
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c534:	2b00      	cmp	r3, #0
 800c536:	d018      	beq.n	800c56a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	68da      	ldr	r2, [r3, #12]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c540:	441a      	add	r2, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	68da      	ldr	r2, [r3, #12]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d303      	bcc.n	800c55a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	68d9      	ldr	r1, [r3, #12]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c562:	461a      	mov	r2, r3
 800c564:	6838      	ldr	r0, [r7, #0]
 800c566:	f002 fd57 	bl	800f018 <memcpy>
	}
}
 800c56a:	bf00      	nop
 800c56c:	3708      	adds	r7, #8
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}

0800c572 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c572:	b580      	push	{r7, lr}
 800c574:	b084      	sub	sp, #16
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c57a:	f001 fd8f 	bl	800e09c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c584:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c586:	e011      	b.n	800c5ac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d012      	beq.n	800c5b6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	3324      	adds	r3, #36	; 0x24
 800c594:	4618      	mov	r0, r3
 800c596:	f000 fd9d 	bl	800d0d4 <xTaskRemoveFromEventList>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d001      	beq.n	800c5a4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c5a0:	f000 fe74 	bl	800d28c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
 800c5a6:	3b01      	subs	r3, #1
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c5ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	dce9      	bgt.n	800c588 <prvUnlockQueue+0x16>
 800c5b4:	e000      	b.n	800c5b8 <prvUnlockQueue+0x46>
					break;
 800c5b6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	22ff      	movs	r2, #255	; 0xff
 800c5bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c5c0:	f001 fd9c 	bl	800e0fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c5c4:	f001 fd6a 	bl	800e09c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5ce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c5d0:	e011      	b.n	800c5f6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d012      	beq.n	800c600 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	3310      	adds	r3, #16
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f000 fd78 	bl	800d0d4 <xTaskRemoveFromEventList>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d001      	beq.n	800c5ee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c5ea:	f000 fe4f 	bl	800d28c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c5ee:	7bbb      	ldrb	r3, [r7, #14]
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c5f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	dce9      	bgt.n	800c5d2 <prvUnlockQueue+0x60>
 800c5fe:	e000      	b.n	800c602 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c600:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	22ff      	movs	r2, #255	; 0xff
 800c606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c60a:	f001 fd77 	bl	800e0fc <vPortExitCritical>
}
 800c60e:	bf00      	nop
 800c610:	3710      	adds	r7, #16
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}

0800c616 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c616:	b580      	push	{r7, lr}
 800c618:	b084      	sub	sp, #16
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c61e:	f001 fd3d 	bl	800e09c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c626:	2b00      	cmp	r3, #0
 800c628:	d102      	bne.n	800c630 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c62a:	2301      	movs	r3, #1
 800c62c:	60fb      	str	r3, [r7, #12]
 800c62e:	e001      	b.n	800c634 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c630:	2300      	movs	r3, #0
 800c632:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c634:	f001 fd62 	bl	800e0fc <vPortExitCritical>

	return xReturn;
 800c638:	68fb      	ldr	r3, [r7, #12]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b084      	sub	sp, #16
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c64a:	f001 fd27 	bl	800e09c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c656:	429a      	cmp	r2, r3
 800c658:	d102      	bne.n	800c660 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c65a:	2301      	movs	r3, #1
 800c65c:	60fb      	str	r3, [r7, #12]
 800c65e:	e001      	b.n	800c664 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c660:	2300      	movs	r3, #0
 800c662:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c664:	f001 fd4a 	bl	800e0fc <vPortExitCritical>

	return xReturn;
 800c668:	68fb      	ldr	r3, [r7, #12]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
	...

0800c674 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c674:	b480      	push	{r7}
 800c676:	b085      	sub	sp, #20
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c67e:	2300      	movs	r3, #0
 800c680:	60fb      	str	r3, [r7, #12]
 800c682:	e014      	b.n	800c6ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c684:	4a0e      	ldr	r2, [pc, #56]	; (800c6c0 <vQueueAddToRegistry+0x4c>)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d10b      	bne.n	800c6a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c690:	490b      	ldr	r1, [pc, #44]	; (800c6c0 <vQueueAddToRegistry+0x4c>)
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	683a      	ldr	r2, [r7, #0]
 800c696:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c69a:	4a09      	ldr	r2, [pc, #36]	; (800c6c0 <vQueueAddToRegistry+0x4c>)
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	00db      	lsls	r3, r3, #3
 800c6a0:	4413      	add	r3, r2
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c6a6:	e006      	b.n	800c6b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	60fb      	str	r3, [r7, #12]
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2b07      	cmp	r3, #7
 800c6b2:	d9e7      	bls.n	800c684 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c6b4:	bf00      	nop
 800c6b6:	bf00      	nop
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bc80      	pop	{r7}
 800c6be:	4770      	bx	lr
 800c6c0:	200026d8 	.word	0x200026d8

0800c6c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b086      	sub	sp, #24
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c6d4:	f001 fce2 	bl	800e09c <vPortEnterCritical>
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6de:	b25b      	sxtb	r3, r3
 800c6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e4:	d103      	bne.n	800c6ee <vQueueWaitForMessageRestricted+0x2a>
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6f4:	b25b      	sxtb	r3, r3
 800c6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6fa:	d103      	bne.n	800c704 <vQueueWaitForMessageRestricted+0x40>
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c704:	f001 fcfa 	bl	800e0fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d106      	bne.n	800c71e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	3324      	adds	r3, #36	; 0x24
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	68b9      	ldr	r1, [r7, #8]
 800c718:	4618      	mov	r0, r3
 800c71a:	f000 fcaf 	bl	800d07c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c71e:	6978      	ldr	r0, [r7, #20]
 800c720:	f7ff ff27 	bl	800c572 <prvUnlockQueue>
	}
 800c724:	bf00      	nop
 800c726:	3718      	adds	r7, #24
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b08e      	sub	sp, #56	; 0x38
 800c730:	af04      	add	r7, sp, #16
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
 800c738:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d10a      	bne.n	800c756 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c744:	f383 8811 	msr	BASEPRI, r3
 800c748:	f3bf 8f6f 	isb	sy
 800c74c:	f3bf 8f4f 	dsb	sy
 800c750:	623b      	str	r3, [r7, #32]
}
 800c752:	bf00      	nop
 800c754:	e7fe      	b.n	800c754 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10a      	bne.n	800c772 <xTaskCreateStatic+0x46>
	__asm volatile
 800c75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	61fb      	str	r3, [r7, #28]
}
 800c76e:	bf00      	nop
 800c770:	e7fe      	b.n	800c770 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c772:	235c      	movs	r3, #92	; 0x5c
 800c774:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	2b5c      	cmp	r3, #92	; 0x5c
 800c77a:	d00a      	beq.n	800c792 <xTaskCreateStatic+0x66>
	__asm volatile
 800c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	61bb      	str	r3, [r7, #24]
}
 800c78e:	bf00      	nop
 800c790:	e7fe      	b.n	800c790 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c794:	2b00      	cmp	r3, #0
 800c796:	d01e      	beq.n	800c7d6 <xTaskCreateStatic+0xaa>
 800c798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d01b      	beq.n	800c7d6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7aa:	2202      	movs	r2, #2
 800c7ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	9303      	str	r3, [sp, #12]
 800c7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b6:	9302      	str	r3, [sp, #8]
 800c7b8:	f107 0314 	add.w	r3, r7, #20
 800c7bc:	9301      	str	r3, [sp, #4]
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	9300      	str	r3, [sp, #0]
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	68b9      	ldr	r1, [r7, #8]
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	f000 f850 	bl	800c86e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c7ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7d0:	f000 f8d4 	bl	800c97c <prvAddNewTaskToReadyList>
 800c7d4:	e001      	b.n	800c7da <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c7da:	697b      	ldr	r3, [r7, #20]
	}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3728      	adds	r7, #40	; 0x28
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b08c      	sub	sp, #48	; 0x30
 800c7e8:	af04      	add	r7, sp, #16
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	603b      	str	r3, [r7, #0]
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7f4:	88fb      	ldrh	r3, [r7, #6]
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f001 fd4f 	bl	800e29c <pvPortMalloc>
 800c7fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00e      	beq.n	800c824 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800c806:	205c      	movs	r0, #92	; 0x5c
 800c808:	f001 fd48 	bl	800e29c <pvPortMalloc>
 800c80c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d003      	beq.n	800c81c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	631a      	str	r2, [r3, #48]	; 0x30
 800c81a:	e005      	b.n	800c828 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c81c:	6978      	ldr	r0, [r7, #20]
 800c81e:	f001 fe01 	bl	800e424 <vPortFree>
 800c822:	e001      	b.n	800c828 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c824:	2300      	movs	r3, #0
 800c826:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d017      	beq.n	800c85e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	2200      	movs	r2, #0
 800c832:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c836:	88fa      	ldrh	r2, [r7, #6]
 800c838:	2300      	movs	r3, #0
 800c83a:	9303      	str	r3, [sp, #12]
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	9302      	str	r3, [sp, #8]
 800c840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c842:	9301      	str	r3, [sp, #4]
 800c844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	68b9      	ldr	r1, [r7, #8]
 800c84c:	68f8      	ldr	r0, [r7, #12]
 800c84e:	f000 f80e 	bl	800c86e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c852:	69f8      	ldr	r0, [r7, #28]
 800c854:	f000 f892 	bl	800c97c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c858:	2301      	movs	r3, #1
 800c85a:	61bb      	str	r3, [r7, #24]
 800c85c:	e002      	b.n	800c864 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c85e:	f04f 33ff 	mov.w	r3, #4294967295
 800c862:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c864:	69bb      	ldr	r3, [r7, #24]
	}
 800c866:	4618      	mov	r0, r3
 800c868:	3720      	adds	r7, #32
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b088      	sub	sp, #32
 800c872:	af00      	add	r7, sp, #0
 800c874:	60f8      	str	r0, [r7, #12]
 800c876:	60b9      	str	r1, [r7, #8]
 800c878:	607a      	str	r2, [r7, #4]
 800c87a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	461a      	mov	r2, r3
 800c886:	21a5      	movs	r1, #165	; 0xa5
 800c888:	f002 fbee 	bl	800f068 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800c88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c896:	3b01      	subs	r3, #1
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	4413      	add	r3, r2
 800c89c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	f023 0307 	bic.w	r3, r3, #7
 800c8a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	f003 0307 	and.w	r3, r3, #7
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00a      	beq.n	800c8c6 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	617b      	str	r3, [r7, #20]
}
 800c8c2:	bf00      	nop
 800c8c4:	e7fe      	b.n	800c8c4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	61fb      	str	r3, [r7, #28]
 800c8ca:	e012      	b.n	800c8f2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c8cc:	68ba      	ldr	r2, [r7, #8]
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	7819      	ldrb	r1, [r3, #0]
 800c8d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	4413      	add	r3, r2
 800c8da:	3334      	adds	r3, #52	; 0x34
 800c8dc:	460a      	mov	r2, r1
 800c8de:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d006      	beq.n	800c8fa <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	61fb      	str	r3, [r7, #28]
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	2b0f      	cmp	r3, #15
 800c8f6:	d9e9      	bls.n	800c8cc <prvInitialiseNewTask+0x5e>
 800c8f8:	e000      	b.n	800c8fc <prvInitialiseNewTask+0x8e>
		{
			break;
 800c8fa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fe:	2200      	movs	r2, #0
 800c900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c906:	2b37      	cmp	r3, #55	; 0x37
 800c908:	d901      	bls.n	800c90e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c90a:	2337      	movs	r3, #55	; 0x37
 800c90c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c912:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c918:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91c:	2200      	movs	r2, #0
 800c91e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c922:	3304      	adds	r3, #4
 800c924:	4618      	mov	r0, r3
 800c926:	f7fe ffdc 	bl	800b8e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92c:	3318      	adds	r3, #24
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fe ffd7 	bl	800b8e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c938:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c942:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c948:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94c:	2200      	movs	r2, #0
 800c94e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c952:	2200      	movs	r2, #0
 800c954:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c958:	683a      	ldr	r2, [r7, #0]
 800c95a:	68f9      	ldr	r1, [r7, #12]
 800c95c:	69b8      	ldr	r0, [r7, #24]
 800c95e:	f001 faad 	bl	800debc <pxPortInitialiseStack>
 800c962:	4602      	mov	r2, r0
 800c964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c966:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800c968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d002      	beq.n	800c974 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c972:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c974:	bf00      	nop
 800c976:	3720      	adds	r7, #32
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c984:	f001 fb8a 	bl	800e09c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c988:	4b2d      	ldr	r3, [pc, #180]	; (800ca40 <prvAddNewTaskToReadyList+0xc4>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	3301      	adds	r3, #1
 800c98e:	4a2c      	ldr	r2, [pc, #176]	; (800ca40 <prvAddNewTaskToReadyList+0xc4>)
 800c990:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c992:	4b2c      	ldr	r3, [pc, #176]	; (800ca44 <prvAddNewTaskToReadyList+0xc8>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d109      	bne.n	800c9ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c99a:	4a2a      	ldr	r2, [pc, #168]	; (800ca44 <prvAddNewTaskToReadyList+0xc8>)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c9a0:	4b27      	ldr	r3, [pc, #156]	; (800ca40 <prvAddNewTaskToReadyList+0xc4>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d110      	bne.n	800c9ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c9a8:	f000 fc94 	bl	800d2d4 <prvInitialiseTaskLists>
 800c9ac:	e00d      	b.n	800c9ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c9ae:	4b26      	ldr	r3, [pc, #152]	; (800ca48 <prvAddNewTaskToReadyList+0xcc>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d109      	bne.n	800c9ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c9b6:	4b23      	ldr	r3, [pc, #140]	; (800ca44 <prvAddNewTaskToReadyList+0xc8>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d802      	bhi.n	800c9ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c9c4:	4a1f      	ldr	r2, [pc, #124]	; (800ca44 <prvAddNewTaskToReadyList+0xc8>)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c9ca:	4b20      	ldr	r3, [pc, #128]	; (800ca4c <prvAddNewTaskToReadyList+0xd0>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	4a1e      	ldr	r2, [pc, #120]	; (800ca4c <prvAddNewTaskToReadyList+0xd0>)
 800c9d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c9d4:	4b1d      	ldr	r3, [pc, #116]	; (800ca4c <prvAddNewTaskToReadyList+0xd0>)
 800c9d6:	681a      	ldr	r2, [r3, #0]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9e0:	4b1b      	ldr	r3, [pc, #108]	; (800ca50 <prvAddNewTaskToReadyList+0xd4>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d903      	bls.n	800c9f0 <prvAddNewTaskToReadyList+0x74>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ec:	4a18      	ldr	r2, [pc, #96]	; (800ca50 <prvAddNewTaskToReadyList+0xd4>)
 800c9ee:	6013      	str	r3, [r2, #0]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f4:	4613      	mov	r3, r2
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	4413      	add	r3, r2
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	4a15      	ldr	r2, [pc, #84]	; (800ca54 <prvAddNewTaskToReadyList+0xd8>)
 800c9fe:	441a      	add	r2, r3
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	3304      	adds	r3, #4
 800ca04:	4619      	mov	r1, r3
 800ca06:	4610      	mov	r0, r2
 800ca08:	f7fe ff77 	bl	800b8fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ca0c:	f001 fb76 	bl	800e0fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ca10:	4b0d      	ldr	r3, [pc, #52]	; (800ca48 <prvAddNewTaskToReadyList+0xcc>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d00e      	beq.n	800ca36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ca18:	4b0a      	ldr	r3, [pc, #40]	; (800ca44 <prvAddNewTaskToReadyList+0xc8>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d207      	bcs.n	800ca36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ca26:	4b0c      	ldr	r3, [pc, #48]	; (800ca58 <prvAddNewTaskToReadyList+0xdc>)
 800ca28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca2c:	601a      	str	r2, [r3, #0]
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca36:	bf00      	nop
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	20000d44 	.word	0x20000d44
 800ca44:	20000870 	.word	0x20000870
 800ca48:	20000d50 	.word	0x20000d50
 800ca4c:	20000d60 	.word	0x20000d60
 800ca50:	20000d4c 	.word	0x20000d4c
 800ca54:	20000874 	.word	0x20000874
 800ca58:	e000ed04 	.word	0xe000ed04

0800ca5c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b08a      	sub	sp, #40	; 0x28
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ca66:	2300      	movs	r3, #0
 800ca68:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d10a      	bne.n	800ca86 <vTaskDelayUntil+0x2a>
	__asm volatile
 800ca70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	617b      	str	r3, [r7, #20]
}
 800ca82:	bf00      	nop
 800ca84:	e7fe      	b.n	800ca84 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d10a      	bne.n	800caa2 <vTaskDelayUntil+0x46>
	__asm volatile
 800ca8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca90:	f383 8811 	msr	BASEPRI, r3
 800ca94:	f3bf 8f6f 	isb	sy
 800ca98:	f3bf 8f4f 	dsb	sy
 800ca9c:	613b      	str	r3, [r7, #16]
}
 800ca9e:	bf00      	nop
 800caa0:	e7fe      	b.n	800caa0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800caa2:	4b2a      	ldr	r3, [pc, #168]	; (800cb4c <vTaskDelayUntil+0xf0>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00a      	beq.n	800cac0 <vTaskDelayUntil+0x64>
	__asm volatile
 800caaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caae:	f383 8811 	msr	BASEPRI, r3
 800cab2:	f3bf 8f6f 	isb	sy
 800cab6:	f3bf 8f4f 	dsb	sy
 800caba:	60fb      	str	r3, [r7, #12]
}
 800cabc:	bf00      	nop
 800cabe:	e7fe      	b.n	800cabe <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800cac0:	f000 f8e4 	bl	800cc8c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800cac4:	4b22      	ldr	r3, [pc, #136]	; (800cb50 <vTaskDelayUntil+0xf4>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	683a      	ldr	r2, [r7, #0]
 800cad0:	4413      	add	r3, r2
 800cad2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6a3a      	ldr	r2, [r7, #32]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d20b      	bcs.n	800caf6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	69fa      	ldr	r2, [r7, #28]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d211      	bcs.n	800cb0c <vTaskDelayUntil+0xb0>
 800cae8:	69fa      	ldr	r2, [r7, #28]
 800caea:	6a3b      	ldr	r3, [r7, #32]
 800caec:	429a      	cmp	r2, r3
 800caee:	d90d      	bls.n	800cb0c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800caf0:	2301      	movs	r3, #1
 800caf2:	627b      	str	r3, [r7, #36]	; 0x24
 800caf4:	e00a      	b.n	800cb0c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	69fa      	ldr	r2, [r7, #28]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d303      	bcc.n	800cb08 <vTaskDelayUntil+0xac>
 800cb00:	69fa      	ldr	r2, [r7, #28]
 800cb02:	6a3b      	ldr	r3, [r7, #32]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d901      	bls.n	800cb0c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	69fa      	ldr	r2, [r7, #28]
 800cb10:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d006      	beq.n	800cb26 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800cb18:	69fa      	ldr	r2, [r7, #28]
 800cb1a:	6a3b      	ldr	r3, [r7, #32]
 800cb1c:	1ad3      	subs	r3, r2, r3
 800cb1e:	2100      	movs	r1, #0
 800cb20:	4618      	mov	r0, r3
 800cb22:	f000 fe65 	bl	800d7f0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800cb26:	f000 f8bf 	bl	800cca8 <xTaskResumeAll>
 800cb2a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d107      	bne.n	800cb42 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800cb32:	4b08      	ldr	r3, [pc, #32]	; (800cb54 <vTaskDelayUntil+0xf8>)
 800cb34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb38:	601a      	str	r2, [r3, #0]
 800cb3a:	f3bf 8f4f 	dsb	sy
 800cb3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb42:	bf00      	nop
 800cb44:	3728      	adds	r7, #40	; 0x28
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	20000d6c 	.word	0x20000d6c
 800cb50:	20000d48 	.word	0x20000d48
 800cb54:	e000ed04 	.word	0xe000ed04

0800cb58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cb60:	2300      	movs	r3, #0
 800cb62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d017      	beq.n	800cb9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cb6a:	4b13      	ldr	r3, [pc, #76]	; (800cbb8 <vTaskDelay+0x60>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d00a      	beq.n	800cb88 <vTaskDelay+0x30>
	__asm volatile
 800cb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb76:	f383 8811 	msr	BASEPRI, r3
 800cb7a:	f3bf 8f6f 	isb	sy
 800cb7e:	f3bf 8f4f 	dsb	sy
 800cb82:	60bb      	str	r3, [r7, #8]
}
 800cb84:	bf00      	nop
 800cb86:	e7fe      	b.n	800cb86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cb88:	f000 f880 	bl	800cc8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 fe2e 	bl	800d7f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cb94:	f000 f888 	bl	800cca8 <xTaskResumeAll>
 800cb98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d107      	bne.n	800cbb0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cba0:	4b06      	ldr	r3, [pc, #24]	; (800cbbc <vTaskDelay+0x64>)
 800cba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cba6:	601a      	str	r2, [r3, #0]
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cbb0:	bf00      	nop
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	20000d6c 	.word	0x20000d6c
 800cbbc:	e000ed04 	.word	0xe000ed04

0800cbc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b08a      	sub	sp, #40	; 0x28
 800cbc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cbce:	463a      	mov	r2, r7
 800cbd0:	1d39      	adds	r1, r7, #4
 800cbd2:	f107 0308 	add.w	r3, r7, #8
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7fe fe32 	bl	800b840 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cbdc:	6839      	ldr	r1, [r7, #0]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	68ba      	ldr	r2, [r7, #8]
 800cbe2:	9202      	str	r2, [sp, #8]
 800cbe4:	9301      	str	r3, [sp, #4]
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	9300      	str	r3, [sp, #0]
 800cbea:	2300      	movs	r3, #0
 800cbec:	460a      	mov	r2, r1
 800cbee:	4921      	ldr	r1, [pc, #132]	; (800cc74 <vTaskStartScheduler+0xb4>)
 800cbf0:	4821      	ldr	r0, [pc, #132]	; (800cc78 <vTaskStartScheduler+0xb8>)
 800cbf2:	f7ff fd9b 	bl	800c72c <xTaskCreateStatic>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	4a20      	ldr	r2, [pc, #128]	; (800cc7c <vTaskStartScheduler+0xbc>)
 800cbfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cbfc:	4b1f      	ldr	r3, [pc, #124]	; (800cc7c <vTaskStartScheduler+0xbc>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d002      	beq.n	800cc0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cc04:	2301      	movs	r3, #1
 800cc06:	617b      	str	r3, [r7, #20]
 800cc08:	e001      	b.n	800cc0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d102      	bne.n	800cc1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cc14:	f000 fe40 	bl	800d898 <xTimerCreateTimerTask>
 800cc18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d116      	bne.n	800cc4e <vTaskStartScheduler+0x8e>
	__asm volatile
 800cc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	613b      	str	r3, [r7, #16]
}
 800cc32:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cc34:	4b12      	ldr	r3, [pc, #72]	; (800cc80 <vTaskStartScheduler+0xc0>)
 800cc36:	f04f 32ff 	mov.w	r2, #4294967295
 800cc3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cc3c:	4b11      	ldr	r3, [pc, #68]	; (800cc84 <vTaskStartScheduler+0xc4>)
 800cc3e:	2201      	movs	r2, #1
 800cc40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800cc42:	4b11      	ldr	r3, [pc, #68]	; (800cc88 <vTaskStartScheduler+0xc8>)
 800cc44:	2200      	movs	r2, #0
 800cc46:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cc48:	f001 f9b6 	bl	800dfb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cc4c:	e00e      	b.n	800cc6c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc54:	d10a      	bne.n	800cc6c <vTaskStartScheduler+0xac>
	__asm volatile
 800cc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5a:	f383 8811 	msr	BASEPRI, r3
 800cc5e:	f3bf 8f6f 	isb	sy
 800cc62:	f3bf 8f4f 	dsb	sy
 800cc66:	60fb      	str	r3, [r7, #12]
}
 800cc68:	bf00      	nop
 800cc6a:	e7fe      	b.n	800cc6a <vTaskStartScheduler+0xaa>
}
 800cc6c:	bf00      	nop
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	0800f2cc 	.word	0x0800f2cc
 800cc78:	0800d2a5 	.word	0x0800d2a5
 800cc7c:	20000d68 	.word	0x20000d68
 800cc80:	20000d64 	.word	0x20000d64
 800cc84:	20000d50 	.word	0x20000d50
 800cc88:	20000d48 	.word	0x20000d48

0800cc8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cc90:	4b04      	ldr	r3, [pc, #16]	; (800cca4 <vTaskSuspendAll+0x18>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	3301      	adds	r3, #1
 800cc96:	4a03      	ldr	r2, [pc, #12]	; (800cca4 <vTaskSuspendAll+0x18>)
 800cc98:	6013      	str	r3, [r2, #0]
}
 800cc9a:	bf00      	nop
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bc80      	pop	{r7}
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	20000d6c 	.word	0x20000d6c

0800cca8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ccb6:	4b42      	ldr	r3, [pc, #264]	; (800cdc0 <xTaskResumeAll+0x118>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d10a      	bne.n	800ccd4 <xTaskResumeAll+0x2c>
	__asm volatile
 800ccbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc2:	f383 8811 	msr	BASEPRI, r3
 800ccc6:	f3bf 8f6f 	isb	sy
 800ccca:	f3bf 8f4f 	dsb	sy
 800ccce:	603b      	str	r3, [r7, #0]
}
 800ccd0:	bf00      	nop
 800ccd2:	e7fe      	b.n	800ccd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ccd4:	f001 f9e2 	bl	800e09c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ccd8:	4b39      	ldr	r3, [pc, #228]	; (800cdc0 <xTaskResumeAll+0x118>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	4a38      	ldr	r2, [pc, #224]	; (800cdc0 <xTaskResumeAll+0x118>)
 800cce0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cce2:	4b37      	ldr	r3, [pc, #220]	; (800cdc0 <xTaskResumeAll+0x118>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d162      	bne.n	800cdb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ccea:	4b36      	ldr	r3, [pc, #216]	; (800cdc4 <xTaskResumeAll+0x11c>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d05e      	beq.n	800cdb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ccf2:	e02f      	b.n	800cd54 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ccf4:	4b34      	ldr	r3, [pc, #208]	; (800cdc8 <xTaskResumeAll+0x120>)
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	3318      	adds	r3, #24
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7fe fe55 	bl	800b9b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	3304      	adds	r3, #4
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fe fe50 	bl	800b9b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd14:	4b2d      	ldr	r3, [pc, #180]	; (800cdcc <xTaskResumeAll+0x124>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d903      	bls.n	800cd24 <xTaskResumeAll+0x7c>
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd20:	4a2a      	ldr	r2, [pc, #168]	; (800cdcc <xTaskResumeAll+0x124>)
 800cd22:	6013      	str	r3, [r2, #0]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd28:	4613      	mov	r3, r2
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4413      	add	r3, r2
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	4a27      	ldr	r2, [pc, #156]	; (800cdd0 <xTaskResumeAll+0x128>)
 800cd32:	441a      	add	r2, r3
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	3304      	adds	r3, #4
 800cd38:	4619      	mov	r1, r3
 800cd3a:	4610      	mov	r0, r2
 800cd3c:	f7fe fddd 	bl	800b8fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd44:	4b23      	ldr	r3, [pc, #140]	; (800cdd4 <xTaskResumeAll+0x12c>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d302      	bcc.n	800cd54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cd4e:	4b22      	ldr	r3, [pc, #136]	; (800cdd8 <xTaskResumeAll+0x130>)
 800cd50:	2201      	movs	r2, #1
 800cd52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd54:	4b1c      	ldr	r3, [pc, #112]	; (800cdc8 <xTaskResumeAll+0x120>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d1cb      	bne.n	800ccf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d001      	beq.n	800cd66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cd62:	f000 fb8d 	bl	800d480 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cd66:	4b1d      	ldr	r3, [pc, #116]	; (800cddc <xTaskResumeAll+0x134>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d010      	beq.n	800cd94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cd72:	f000 f845 	bl	800ce00 <xTaskIncrementTick>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d002      	beq.n	800cd82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cd7c:	4b16      	ldr	r3, [pc, #88]	; (800cdd8 <xTaskResumeAll+0x130>)
 800cd7e:	2201      	movs	r2, #1
 800cd80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	3b01      	subs	r3, #1
 800cd86:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d1f1      	bne.n	800cd72 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800cd8e:	4b13      	ldr	r3, [pc, #76]	; (800cddc <xTaskResumeAll+0x134>)
 800cd90:	2200      	movs	r2, #0
 800cd92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cd94:	4b10      	ldr	r3, [pc, #64]	; (800cdd8 <xTaskResumeAll+0x130>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d009      	beq.n	800cdb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cda0:	4b0f      	ldr	r3, [pc, #60]	; (800cde0 <xTaskResumeAll+0x138>)
 800cda2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cda6:	601a      	str	r2, [r3, #0]
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cdb0:	f001 f9a4 	bl	800e0fc <vPortExitCritical>

	return xAlreadyYielded;
 800cdb4:	68bb      	ldr	r3, [r7, #8]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	20000d6c 	.word	0x20000d6c
 800cdc4:	20000d44 	.word	0x20000d44
 800cdc8:	20000d04 	.word	0x20000d04
 800cdcc:	20000d4c 	.word	0x20000d4c
 800cdd0:	20000874 	.word	0x20000874
 800cdd4:	20000870 	.word	0x20000870
 800cdd8:	20000d58 	.word	0x20000d58
 800cddc:	20000d54 	.word	0x20000d54
 800cde0:	e000ed04 	.word	0xe000ed04

0800cde4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cdea:	4b04      	ldr	r3, [pc, #16]	; (800cdfc <xTaskGetTickCount+0x18>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cdf0:	687b      	ldr	r3, [r7, #4]
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	370c      	adds	r7, #12
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bc80      	pop	{r7}
 800cdfa:	4770      	bx	lr
 800cdfc:	20000d48 	.word	0x20000d48

0800ce00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b086      	sub	sp, #24
 800ce04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce06:	2300      	movs	r3, #0
 800ce08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce0a:	4b51      	ldr	r3, [pc, #324]	; (800cf50 <xTaskIncrementTick+0x150>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	f040 808e 	bne.w	800cf30 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ce14:	4b4f      	ldr	r3, [pc, #316]	; (800cf54 <xTaskIncrementTick+0x154>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ce1c:	4a4d      	ldr	r2, [pc, #308]	; (800cf54 <xTaskIncrementTick+0x154>)
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d120      	bne.n	800ce6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ce28:	4b4b      	ldr	r3, [pc, #300]	; (800cf58 <xTaskIncrementTick+0x158>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d00a      	beq.n	800ce48 <xTaskIncrementTick+0x48>
	__asm volatile
 800ce32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce36:	f383 8811 	msr	BASEPRI, r3
 800ce3a:	f3bf 8f6f 	isb	sy
 800ce3e:	f3bf 8f4f 	dsb	sy
 800ce42:	603b      	str	r3, [r7, #0]
}
 800ce44:	bf00      	nop
 800ce46:	e7fe      	b.n	800ce46 <xTaskIncrementTick+0x46>
 800ce48:	4b43      	ldr	r3, [pc, #268]	; (800cf58 <xTaskIncrementTick+0x158>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	60fb      	str	r3, [r7, #12]
 800ce4e:	4b43      	ldr	r3, [pc, #268]	; (800cf5c <xTaskIncrementTick+0x15c>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a41      	ldr	r2, [pc, #260]	; (800cf58 <xTaskIncrementTick+0x158>)
 800ce54:	6013      	str	r3, [r2, #0]
 800ce56:	4a41      	ldr	r2, [pc, #260]	; (800cf5c <xTaskIncrementTick+0x15c>)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6013      	str	r3, [r2, #0]
 800ce5c:	4b40      	ldr	r3, [pc, #256]	; (800cf60 <xTaskIncrementTick+0x160>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	3301      	adds	r3, #1
 800ce62:	4a3f      	ldr	r2, [pc, #252]	; (800cf60 <xTaskIncrementTick+0x160>)
 800ce64:	6013      	str	r3, [r2, #0]
 800ce66:	f000 fb0b 	bl	800d480 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ce6a:	4b3e      	ldr	r3, [pc, #248]	; (800cf64 <xTaskIncrementTick+0x164>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	693a      	ldr	r2, [r7, #16]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d34e      	bcc.n	800cf12 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce74:	4b38      	ldr	r3, [pc, #224]	; (800cf58 <xTaskIncrementTick+0x158>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d101      	bne.n	800ce82 <xTaskIncrementTick+0x82>
 800ce7e:	2301      	movs	r3, #1
 800ce80:	e000      	b.n	800ce84 <xTaskIncrementTick+0x84>
 800ce82:	2300      	movs	r3, #0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d004      	beq.n	800ce92 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce88:	4b36      	ldr	r3, [pc, #216]	; (800cf64 <xTaskIncrementTick+0x164>)
 800ce8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce8e:	601a      	str	r2, [r3, #0]
					break;
 800ce90:	e03f      	b.n	800cf12 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ce92:	4b31      	ldr	r3, [pc, #196]	; (800cf58 <xTaskIncrementTick+0x158>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cea2:	693a      	ldr	r2, [r7, #16]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d203      	bcs.n	800ceb2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ceaa:	4a2e      	ldr	r2, [pc, #184]	; (800cf64 <xTaskIncrementTick+0x164>)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6013      	str	r3, [r2, #0]
						break;
 800ceb0:	e02f      	b.n	800cf12 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	3304      	adds	r3, #4
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7fe fd7a 	bl	800b9b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d004      	beq.n	800cece <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	3318      	adds	r3, #24
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7fe fd71 	bl	800b9b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced2:	4b25      	ldr	r3, [pc, #148]	; (800cf68 <xTaskIncrementTick+0x168>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d903      	bls.n	800cee2 <xTaskIncrementTick+0xe2>
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cede:	4a22      	ldr	r2, [pc, #136]	; (800cf68 <xTaskIncrementTick+0x168>)
 800cee0:	6013      	str	r3, [r2, #0]
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cee6:	4613      	mov	r3, r2
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4413      	add	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4a1f      	ldr	r2, [pc, #124]	; (800cf6c <xTaskIncrementTick+0x16c>)
 800cef0:	441a      	add	r2, r3
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	3304      	adds	r3, #4
 800cef6:	4619      	mov	r1, r3
 800cef8:	4610      	mov	r0, r2
 800cefa:	f7fe fcfe 	bl	800b8fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf02:	4b1b      	ldr	r3, [pc, #108]	; (800cf70 <xTaskIncrementTick+0x170>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d3b3      	bcc.n	800ce74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf10:	e7b0      	b.n	800ce74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cf12:	4b17      	ldr	r3, [pc, #92]	; (800cf70 <xTaskIncrementTick+0x170>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf18:	4914      	ldr	r1, [pc, #80]	; (800cf6c <xTaskIncrementTick+0x16c>)
 800cf1a:	4613      	mov	r3, r2
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	4413      	add	r3, r2
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	440b      	add	r3, r1
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d907      	bls.n	800cf3a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	617b      	str	r3, [r7, #20]
 800cf2e:	e004      	b.n	800cf3a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cf30:	4b10      	ldr	r3, [pc, #64]	; (800cf74 <xTaskIncrementTick+0x174>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	3301      	adds	r3, #1
 800cf36:	4a0f      	ldr	r2, [pc, #60]	; (800cf74 <xTaskIncrementTick+0x174>)
 800cf38:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cf3a:	4b0f      	ldr	r3, [pc, #60]	; (800cf78 <xTaskIncrementTick+0x178>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d001      	beq.n	800cf46 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800cf42:	2301      	movs	r3, #1
 800cf44:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cf46:	697b      	ldr	r3, [r7, #20]
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3718      	adds	r7, #24
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	20000d6c 	.word	0x20000d6c
 800cf54:	20000d48 	.word	0x20000d48
 800cf58:	20000cfc 	.word	0x20000cfc
 800cf5c:	20000d00 	.word	0x20000d00
 800cf60:	20000d5c 	.word	0x20000d5c
 800cf64:	20000d64 	.word	0x20000d64
 800cf68:	20000d4c 	.word	0x20000d4c
 800cf6c:	20000874 	.word	0x20000874
 800cf70:	20000870 	.word	0x20000870
 800cf74:	20000d54 	.word	0x20000d54
 800cf78:	20000d58 	.word	0x20000d58

0800cf7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cf82:	4b27      	ldr	r3, [pc, #156]	; (800d020 <vTaskSwitchContext+0xa4>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d003      	beq.n	800cf92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cf8a:	4b26      	ldr	r3, [pc, #152]	; (800d024 <vTaskSwitchContext+0xa8>)
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cf90:	e041      	b.n	800d016 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800cf92:	4b24      	ldr	r3, [pc, #144]	; (800d024 <vTaskSwitchContext+0xa8>)
 800cf94:	2200      	movs	r2, #0
 800cf96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800cf98:	4b23      	ldr	r3, [pc, #140]	; (800d028 <vTaskSwitchContext+0xac>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	60fb      	str	r3, [r7, #12]
 800cf9e:	e010      	b.n	800cfc2 <vTaskSwitchContext+0x46>
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d10a      	bne.n	800cfbc <vTaskSwitchContext+0x40>
	__asm volatile
 800cfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfaa:	f383 8811 	msr	BASEPRI, r3
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f3bf 8f4f 	dsb	sy
 800cfb6:	607b      	str	r3, [r7, #4]
}
 800cfb8:	bf00      	nop
 800cfba:	e7fe      	b.n	800cfba <vTaskSwitchContext+0x3e>
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	60fb      	str	r3, [r7, #12]
 800cfc2:	491a      	ldr	r1, [pc, #104]	; (800d02c <vTaskSwitchContext+0xb0>)
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	4413      	add	r3, r2
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	440b      	add	r3, r1
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d0e4      	beq.n	800cfa0 <vTaskSwitchContext+0x24>
 800cfd6:	68fa      	ldr	r2, [r7, #12]
 800cfd8:	4613      	mov	r3, r2
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	4413      	add	r3, r2
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	4a12      	ldr	r2, [pc, #72]	; (800d02c <vTaskSwitchContext+0xb0>)
 800cfe2:	4413      	add	r3, r2
 800cfe4:	60bb      	str	r3, [r7, #8]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	685a      	ldr	r2, [r3, #4]
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	605a      	str	r2, [r3, #4]
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	685a      	ldr	r2, [r3, #4]
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	3308      	adds	r3, #8
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d104      	bne.n	800d006 <vTaskSwitchContext+0x8a>
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	685a      	ldr	r2, [r3, #4]
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	605a      	str	r2, [r3, #4]
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	68db      	ldr	r3, [r3, #12]
 800d00c:	4a08      	ldr	r2, [pc, #32]	; (800d030 <vTaskSwitchContext+0xb4>)
 800d00e:	6013      	str	r3, [r2, #0]
 800d010:	4a05      	ldr	r2, [pc, #20]	; (800d028 <vTaskSwitchContext+0xac>)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	6013      	str	r3, [r2, #0]
}
 800d016:	bf00      	nop
 800d018:	3714      	adds	r7, #20
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bc80      	pop	{r7}
 800d01e:	4770      	bx	lr
 800d020:	20000d6c 	.word	0x20000d6c
 800d024:	20000d58 	.word	0x20000d58
 800d028:	20000d4c 	.word	0x20000d4c
 800d02c:	20000874 	.word	0x20000874
 800d030:	20000870 	.word	0x20000870

0800d034 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d10a      	bne.n	800d05a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d048:	f383 8811 	msr	BASEPRI, r3
 800d04c:	f3bf 8f6f 	isb	sy
 800d050:	f3bf 8f4f 	dsb	sy
 800d054:	60fb      	str	r3, [r7, #12]
}
 800d056:	bf00      	nop
 800d058:	e7fe      	b.n	800d058 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d05a:	4b07      	ldr	r3, [pc, #28]	; (800d078 <vTaskPlaceOnEventList+0x44>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	3318      	adds	r3, #24
 800d060:	4619      	mov	r1, r3
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f7fe fc6c 	bl	800b940 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d068:	2101      	movs	r1, #1
 800d06a:	6838      	ldr	r0, [r7, #0]
 800d06c:	f000 fbc0 	bl	800d7f0 <prvAddCurrentTaskToDelayedList>
}
 800d070:	bf00      	nop
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	20000870 	.word	0x20000870

0800d07c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b086      	sub	sp, #24
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d10a      	bne.n	800d0a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d092:	f383 8811 	msr	BASEPRI, r3
 800d096:	f3bf 8f6f 	isb	sy
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	617b      	str	r3, [r7, #20]
}
 800d0a0:	bf00      	nop
 800d0a2:	e7fe      	b.n	800d0a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0a4:	4b0a      	ldr	r3, [pc, #40]	; (800d0d0 <vTaskPlaceOnEventListRestricted+0x54>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	3318      	adds	r3, #24
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	68f8      	ldr	r0, [r7, #12]
 800d0ae:	f7fe fc24 	bl	800b8fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d002      	beq.n	800d0be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d0bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d0be:	6879      	ldr	r1, [r7, #4]
 800d0c0:	68b8      	ldr	r0, [r7, #8]
 800d0c2:	f000 fb95 	bl	800d7f0 <prvAddCurrentTaskToDelayedList>
	}
 800d0c6:	bf00      	nop
 800d0c8:	3718      	adds	r7, #24
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	20000870 	.word	0x20000870

0800d0d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b086      	sub	sp, #24
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	68db      	ldr	r3, [r3, #12]
 800d0e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d10a      	bne.n	800d100 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	60fb      	str	r3, [r7, #12]
}
 800d0fc:	bf00      	nop
 800d0fe:	e7fe      	b.n	800d0fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	3318      	adds	r3, #24
 800d104:	4618      	mov	r0, r3
 800d106:	f7fe fc53 	bl	800b9b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d10a:	4b1e      	ldr	r3, [pc, #120]	; (800d184 <xTaskRemoveFromEventList+0xb0>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d11d      	bne.n	800d14e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	3304      	adds	r3, #4
 800d116:	4618      	mov	r0, r3
 800d118:	f7fe fc4a 	bl	800b9b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d120:	4b19      	ldr	r3, [pc, #100]	; (800d188 <xTaskRemoveFromEventList+0xb4>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	429a      	cmp	r2, r3
 800d126:	d903      	bls.n	800d130 <xTaskRemoveFromEventList+0x5c>
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d12c:	4a16      	ldr	r2, [pc, #88]	; (800d188 <xTaskRemoveFromEventList+0xb4>)
 800d12e:	6013      	str	r3, [r2, #0]
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d134:	4613      	mov	r3, r2
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	4413      	add	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	4a13      	ldr	r2, [pc, #76]	; (800d18c <xTaskRemoveFromEventList+0xb8>)
 800d13e:	441a      	add	r2, r3
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	3304      	adds	r3, #4
 800d144:	4619      	mov	r1, r3
 800d146:	4610      	mov	r0, r2
 800d148:	f7fe fbd7 	bl	800b8fa <vListInsertEnd>
 800d14c:	e005      	b.n	800d15a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	3318      	adds	r3, #24
 800d152:	4619      	mov	r1, r3
 800d154:	480e      	ldr	r0, [pc, #56]	; (800d190 <xTaskRemoveFromEventList+0xbc>)
 800d156:	f7fe fbd0 	bl	800b8fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d15e:	4b0d      	ldr	r3, [pc, #52]	; (800d194 <xTaskRemoveFromEventList+0xc0>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d164:	429a      	cmp	r2, r3
 800d166:	d905      	bls.n	800d174 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d168:	2301      	movs	r3, #1
 800d16a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d16c:	4b0a      	ldr	r3, [pc, #40]	; (800d198 <xTaskRemoveFromEventList+0xc4>)
 800d16e:	2201      	movs	r2, #1
 800d170:	601a      	str	r2, [r3, #0]
 800d172:	e001      	b.n	800d178 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d174:	2300      	movs	r3, #0
 800d176:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800d178:	697b      	ldr	r3, [r7, #20]
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3718      	adds	r7, #24
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	20000d6c 	.word	0x20000d6c
 800d188:	20000d4c 	.word	0x20000d4c
 800d18c:	20000874 	.word	0x20000874
 800d190:	20000d04 	.word	0x20000d04
 800d194:	20000870 	.word	0x20000870
 800d198:	20000d58 	.word	0x20000d58

0800d19c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d1a4:	4b06      	ldr	r3, [pc, #24]	; (800d1c0 <vTaskInternalSetTimeOutState+0x24>)
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d1ac:	4b05      	ldr	r3, [pc, #20]	; (800d1c4 <vTaskInternalSetTimeOutState+0x28>)
 800d1ae:	681a      	ldr	r2, [r3, #0]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	605a      	str	r2, [r3, #4]
}
 800d1b4:	bf00      	nop
 800d1b6:	370c      	adds	r7, #12
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bc80      	pop	{r7}
 800d1bc:	4770      	bx	lr
 800d1be:	bf00      	nop
 800d1c0:	20000d5c 	.word	0x20000d5c
 800d1c4:	20000d48 	.word	0x20000d48

0800d1c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b088      	sub	sp, #32
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d10a      	bne.n	800d1ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1dc:	f383 8811 	msr	BASEPRI, r3
 800d1e0:	f3bf 8f6f 	isb	sy
 800d1e4:	f3bf 8f4f 	dsb	sy
 800d1e8:	613b      	str	r3, [r7, #16]
}
 800d1ea:	bf00      	nop
 800d1ec:	e7fe      	b.n	800d1ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d10a      	bne.n	800d20a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f8:	f383 8811 	msr	BASEPRI, r3
 800d1fc:	f3bf 8f6f 	isb	sy
 800d200:	f3bf 8f4f 	dsb	sy
 800d204:	60fb      	str	r3, [r7, #12]
}
 800d206:	bf00      	nop
 800d208:	e7fe      	b.n	800d208 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d20a:	f000 ff47 	bl	800e09c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d20e:	4b1d      	ldr	r3, [pc, #116]	; (800d284 <xTaskCheckForTimeOut+0xbc>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	69ba      	ldr	r2, [r7, #24]
 800d21a:	1ad3      	subs	r3, r2, r3
 800d21c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d226:	d102      	bne.n	800d22e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d228:	2300      	movs	r3, #0
 800d22a:	61fb      	str	r3, [r7, #28]
 800d22c:	e023      	b.n	800d276 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	4b15      	ldr	r3, [pc, #84]	; (800d288 <xTaskCheckForTimeOut+0xc0>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	429a      	cmp	r2, r3
 800d238:	d007      	beq.n	800d24a <xTaskCheckForTimeOut+0x82>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	69ba      	ldr	r2, [r7, #24]
 800d240:	429a      	cmp	r2, r3
 800d242:	d302      	bcc.n	800d24a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d244:	2301      	movs	r3, #1
 800d246:	61fb      	str	r3, [r7, #28]
 800d248:	e015      	b.n	800d276 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	697a      	ldr	r2, [r7, #20]
 800d250:	429a      	cmp	r2, r3
 800d252:	d20b      	bcs.n	800d26c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	681a      	ldr	r2, [r3, #0]
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	1ad2      	subs	r2, r2, r3
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7ff ff9b 	bl	800d19c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d266:	2300      	movs	r3, #0
 800d268:	61fb      	str	r3, [r7, #28]
 800d26a:	e004      	b.n	800d276 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	2200      	movs	r2, #0
 800d270:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d272:	2301      	movs	r3, #1
 800d274:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d276:	f000 ff41 	bl	800e0fc <vPortExitCritical>

	return xReturn;
 800d27a:	69fb      	ldr	r3, [r7, #28]
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3720      	adds	r7, #32
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	20000d48 	.word	0x20000d48
 800d288:	20000d5c 	.word	0x20000d5c

0800d28c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d28c:	b480      	push	{r7}
 800d28e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d290:	4b03      	ldr	r3, [pc, #12]	; (800d2a0 <vTaskMissedYield+0x14>)
 800d292:	2201      	movs	r2, #1
 800d294:	601a      	str	r2, [r3, #0]
}
 800d296:	bf00      	nop
 800d298:	46bd      	mov	sp, r7
 800d29a:	bc80      	pop	{r7}
 800d29c:	4770      	bx	lr
 800d29e:	bf00      	nop
 800d2a0:	20000d58 	.word	0x20000d58

0800d2a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d2ac:	f000 f852 	bl	800d354 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d2b0:	4b06      	ldr	r3, [pc, #24]	; (800d2cc <prvIdleTask+0x28>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d9f9      	bls.n	800d2ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800d2b8:	4b05      	ldr	r3, [pc, #20]	; (800d2d0 <prvIdleTask+0x2c>)
 800d2ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2be:	601a      	str	r2, [r3, #0]
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d2c8:	e7f0      	b.n	800d2ac <prvIdleTask+0x8>
 800d2ca:	bf00      	nop
 800d2cc:	20000874 	.word	0x20000874
 800d2d0:	e000ed04 	.word	0xe000ed04

0800d2d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d2da:	2300      	movs	r3, #0
 800d2dc:	607b      	str	r3, [r7, #4]
 800d2de:	e00c      	b.n	800d2fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	4613      	mov	r3, r2
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	4413      	add	r3, r2
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	4a12      	ldr	r2, [pc, #72]	; (800d334 <prvInitialiseTaskLists+0x60>)
 800d2ec:	4413      	add	r3, r2
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fe fad8 	bl	800b8a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	607b      	str	r3, [r7, #4]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2b37      	cmp	r3, #55	; 0x37
 800d2fe:	d9ef      	bls.n	800d2e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d300:	480d      	ldr	r0, [pc, #52]	; (800d338 <prvInitialiseTaskLists+0x64>)
 800d302:	f7fe facf 	bl	800b8a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d306:	480d      	ldr	r0, [pc, #52]	; (800d33c <prvInitialiseTaskLists+0x68>)
 800d308:	f7fe facc 	bl	800b8a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d30c:	480c      	ldr	r0, [pc, #48]	; (800d340 <prvInitialiseTaskLists+0x6c>)
 800d30e:	f7fe fac9 	bl	800b8a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d312:	480c      	ldr	r0, [pc, #48]	; (800d344 <prvInitialiseTaskLists+0x70>)
 800d314:	f7fe fac6 	bl	800b8a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d318:	480b      	ldr	r0, [pc, #44]	; (800d348 <prvInitialiseTaskLists+0x74>)
 800d31a:	f7fe fac3 	bl	800b8a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d31e:	4b0b      	ldr	r3, [pc, #44]	; (800d34c <prvInitialiseTaskLists+0x78>)
 800d320:	4a05      	ldr	r2, [pc, #20]	; (800d338 <prvInitialiseTaskLists+0x64>)
 800d322:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d324:	4b0a      	ldr	r3, [pc, #40]	; (800d350 <prvInitialiseTaskLists+0x7c>)
 800d326:	4a05      	ldr	r2, [pc, #20]	; (800d33c <prvInitialiseTaskLists+0x68>)
 800d328:	601a      	str	r2, [r3, #0]
}
 800d32a:	bf00      	nop
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	20000874 	.word	0x20000874
 800d338:	20000cd4 	.word	0x20000cd4
 800d33c:	20000ce8 	.word	0x20000ce8
 800d340:	20000d04 	.word	0x20000d04
 800d344:	20000d18 	.word	0x20000d18
 800d348:	20000d30 	.word	0x20000d30
 800d34c:	20000cfc 	.word	0x20000cfc
 800d350:	20000d00 	.word	0x20000d00

0800d354 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d35a:	e019      	b.n	800d390 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d35c:	f000 fe9e 	bl	800e09c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d360:	4b10      	ldr	r3, [pc, #64]	; (800d3a4 <prvCheckTasksWaitingTermination+0x50>)
 800d362:	68db      	ldr	r3, [r3, #12]
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	3304      	adds	r3, #4
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7fe fb1f 	bl	800b9b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d372:	4b0d      	ldr	r3, [pc, #52]	; (800d3a8 <prvCheckTasksWaitingTermination+0x54>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	3b01      	subs	r3, #1
 800d378:	4a0b      	ldr	r2, [pc, #44]	; (800d3a8 <prvCheckTasksWaitingTermination+0x54>)
 800d37a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d37c:	4b0b      	ldr	r3, [pc, #44]	; (800d3ac <prvCheckTasksWaitingTermination+0x58>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	3b01      	subs	r3, #1
 800d382:	4a0a      	ldr	r2, [pc, #40]	; (800d3ac <prvCheckTasksWaitingTermination+0x58>)
 800d384:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d386:	f000 feb9 	bl	800e0fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 f848 	bl	800d420 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d390:	4b06      	ldr	r3, [pc, #24]	; (800d3ac <prvCheckTasksWaitingTermination+0x58>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1e1      	bne.n	800d35c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d398:	bf00      	nop
 800d39a:	bf00      	nop
 800d39c:	3708      	adds	r7, #8
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	20000d18 	.word	0x20000d18
 800d3a8:	20000d44 	.word	0x20000d44
 800d3ac:	20000d2c 	.word	0x20000d2c

0800d3b0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d3bc:	e005      	b.n	800d3ca <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	2ba5      	cmp	r3, #165	; 0xa5
 800d3d0:	d0f5      	beq.n	800d3be <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	089b      	lsrs	r3, r3, #2
 800d3d6:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	b29b      	uxth	r3, r3
	}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3714      	adds	r7, #20
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bc80      	pop	{r7}
 800d3e4:	4770      	bx	lr
	...

0800d3e8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b086      	sub	sp, #24
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d102      	bne.n	800d3fc <uxTaskGetStackHighWaterMark+0x14>
 800d3f6:	4b09      	ldr	r3, [pc, #36]	; (800d41c <uxTaskGetStackHighWaterMark+0x34>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	e000      	b.n	800d3fe <uxTaskGetStackHighWaterMark+0x16>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d404:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800d406:	6938      	ldr	r0, [r7, #16]
 800d408:	f7ff ffd2 	bl	800d3b0 <prvTaskCheckFreeStackSpace>
 800d40c:	4603      	mov	r3, r0
 800d40e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800d410:	68fb      	ldr	r3, [r7, #12]
	}
 800d412:	4618      	mov	r0, r3
 800d414:	3718      	adds	r7, #24
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	20000870 	.word	0x20000870

0800d420 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d108      	bne.n	800d444 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d436:	4618      	mov	r0, r3
 800d438:	f000 fff4 	bl	800e424 <vPortFree>
				vPortFree( pxTCB );
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 fff1 	bl	800e424 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d442:	e018      	b.n	800d476 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d103      	bne.n	800d456 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 ffe8 	bl	800e424 <vPortFree>
	}
 800d454:	e00f      	b.n	800d476 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d45c:	2b02      	cmp	r3, #2
 800d45e:	d00a      	beq.n	800d476 <prvDeleteTCB+0x56>
	__asm volatile
 800d460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d464:	f383 8811 	msr	BASEPRI, r3
 800d468:	f3bf 8f6f 	isb	sy
 800d46c:	f3bf 8f4f 	dsb	sy
 800d470:	60fb      	str	r3, [r7, #12]
}
 800d472:	bf00      	nop
 800d474:	e7fe      	b.n	800d474 <prvDeleteTCB+0x54>
	}
 800d476:	bf00      	nop
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
	...

0800d480 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d486:	4b0e      	ldr	r3, [pc, #56]	; (800d4c0 <prvResetNextTaskUnblockTime+0x40>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d101      	bne.n	800d494 <prvResetNextTaskUnblockTime+0x14>
 800d490:	2301      	movs	r3, #1
 800d492:	e000      	b.n	800d496 <prvResetNextTaskUnblockTime+0x16>
 800d494:	2300      	movs	r3, #0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d004      	beq.n	800d4a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d49a:	4b0a      	ldr	r3, [pc, #40]	; (800d4c4 <prvResetNextTaskUnblockTime+0x44>)
 800d49c:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d4a2:	e008      	b.n	800d4b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d4a4:	4b06      	ldr	r3, [pc, #24]	; (800d4c0 <prvResetNextTaskUnblockTime+0x40>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	4a04      	ldr	r2, [pc, #16]	; (800d4c4 <prvResetNextTaskUnblockTime+0x44>)
 800d4b4:	6013      	str	r3, [r2, #0]
}
 800d4b6:	bf00      	nop
 800d4b8:	370c      	adds	r7, #12
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bc80      	pop	{r7}
 800d4be:	4770      	bx	lr
 800d4c0:	20000cfc 	.word	0x20000cfc
 800d4c4:	20000d64 	.word	0x20000d64

0800d4c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d4ce:	4b0b      	ldr	r3, [pc, #44]	; (800d4fc <xTaskGetSchedulerState+0x34>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d102      	bne.n	800d4dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	607b      	str	r3, [r7, #4]
 800d4da:	e008      	b.n	800d4ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4dc:	4b08      	ldr	r3, [pc, #32]	; (800d500 <xTaskGetSchedulerState+0x38>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d102      	bne.n	800d4ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d4e4:	2302      	movs	r3, #2
 800d4e6:	607b      	str	r3, [r7, #4]
 800d4e8:	e001      	b.n	800d4ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d4ee:	687b      	ldr	r3, [r7, #4]
	}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	370c      	adds	r7, #12
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bc80      	pop	{r7}
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	20000d50 	.word	0x20000d50
 800d500:	20000d6c 	.word	0x20000d6c

0800d504 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d510:	2300      	movs	r3, #0
 800d512:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d056      	beq.n	800d5c8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d51e:	4b2d      	ldr	r3, [pc, #180]	; (800d5d4 <xTaskPriorityInherit+0xd0>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d524:	429a      	cmp	r2, r3
 800d526:	d246      	bcs.n	800d5b6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	699b      	ldr	r3, [r3, #24]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	db06      	blt.n	800d53e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d530:	4b28      	ldr	r3, [pc, #160]	; (800d5d4 <xTaskPriorityInherit+0xd0>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d536:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	6959      	ldr	r1, [r3, #20]
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d546:	4613      	mov	r3, r2
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	4413      	add	r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	4a22      	ldr	r2, [pc, #136]	; (800d5d8 <xTaskPriorityInherit+0xd4>)
 800d550:	4413      	add	r3, r2
 800d552:	4299      	cmp	r1, r3
 800d554:	d101      	bne.n	800d55a <xTaskPriorityInherit+0x56>
 800d556:	2301      	movs	r3, #1
 800d558:	e000      	b.n	800d55c <xTaskPriorityInherit+0x58>
 800d55a:	2300      	movs	r3, #0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d022      	beq.n	800d5a6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	3304      	adds	r3, #4
 800d564:	4618      	mov	r0, r3
 800d566:	f7fe fa23 	bl	800b9b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d56a:	4b1a      	ldr	r3, [pc, #104]	; (800d5d4 <xTaskPriorityInherit+0xd0>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d578:	4b18      	ldr	r3, [pc, #96]	; (800d5dc <xTaskPriorityInherit+0xd8>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d903      	bls.n	800d588 <xTaskPriorityInherit+0x84>
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d584:	4a15      	ldr	r2, [pc, #84]	; (800d5dc <xTaskPriorityInherit+0xd8>)
 800d586:	6013      	str	r3, [r2, #0]
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d58c:	4613      	mov	r3, r2
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	4413      	add	r3, r2
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	4a10      	ldr	r2, [pc, #64]	; (800d5d8 <xTaskPriorityInherit+0xd4>)
 800d596:	441a      	add	r2, r3
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	3304      	adds	r3, #4
 800d59c:	4619      	mov	r1, r3
 800d59e:	4610      	mov	r0, r2
 800d5a0:	f7fe f9ab 	bl	800b8fa <vListInsertEnd>
 800d5a4:	e004      	b.n	800d5b0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d5a6:	4b0b      	ldr	r3, [pc, #44]	; (800d5d4 <xTaskPriorityInherit+0xd0>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	60fb      	str	r3, [r7, #12]
 800d5b4:	e008      	b.n	800d5c8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d5ba:	4b06      	ldr	r3, [pc, #24]	; (800d5d4 <xTaskPriorityInherit+0xd0>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d201      	bcs.n	800d5c8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
	}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20000870 	.word	0x20000870
 800d5d8:	20000874 	.word	0x20000874
 800d5dc:	20000d4c 	.word	0x20000d4c

0800d5e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b086      	sub	sp, #24
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d056      	beq.n	800d6a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d5f6:	4b2e      	ldr	r3, [pc, #184]	; (800d6b0 <xTaskPriorityDisinherit+0xd0>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	693a      	ldr	r2, [r7, #16]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d00a      	beq.n	800d616 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d604:	f383 8811 	msr	BASEPRI, r3
 800d608:	f3bf 8f6f 	isb	sy
 800d60c:	f3bf 8f4f 	dsb	sy
 800d610:	60fb      	str	r3, [r7, #12]
}
 800d612:	bf00      	nop
 800d614:	e7fe      	b.n	800d614 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d10a      	bne.n	800d634 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d622:	f383 8811 	msr	BASEPRI, r3
 800d626:	f3bf 8f6f 	isb	sy
 800d62a:	f3bf 8f4f 	dsb	sy
 800d62e:	60bb      	str	r3, [r7, #8]
}
 800d630:	bf00      	nop
 800d632:	e7fe      	b.n	800d632 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d638:	1e5a      	subs	r2, r3, #1
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d646:	429a      	cmp	r2, r3
 800d648:	d02c      	beq.n	800d6a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d128      	bne.n	800d6a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	3304      	adds	r3, #4
 800d656:	4618      	mov	r0, r3
 800d658:	f7fe f9aa 	bl	800b9b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d668:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d674:	4b0f      	ldr	r3, [pc, #60]	; (800d6b4 <xTaskPriorityDisinherit+0xd4>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d903      	bls.n	800d684 <xTaskPriorityDisinherit+0xa4>
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d680:	4a0c      	ldr	r2, [pc, #48]	; (800d6b4 <xTaskPriorityDisinherit+0xd4>)
 800d682:	6013      	str	r3, [r2, #0]
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d688:	4613      	mov	r3, r2
 800d68a:	009b      	lsls	r3, r3, #2
 800d68c:	4413      	add	r3, r2
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	4a09      	ldr	r2, [pc, #36]	; (800d6b8 <xTaskPriorityDisinherit+0xd8>)
 800d692:	441a      	add	r2, r3
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	3304      	adds	r3, #4
 800d698:	4619      	mov	r1, r3
 800d69a:	4610      	mov	r0, r2
 800d69c:	f7fe f92d 	bl	800b8fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6a4:	697b      	ldr	r3, [r7, #20]
	}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3718      	adds	r7, #24
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	20000870 	.word	0x20000870
 800d6b4:	20000d4c 	.word	0x20000d4c
 800d6b8:	20000874 	.word	0x20000874

0800d6bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b088      	sub	sp, #32
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d06f      	beq.n	800d7b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d6d4:	69bb      	ldr	r3, [r7, #24]
 800d6d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d10a      	bne.n	800d6f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e0:	f383 8811 	msr	BASEPRI, r3
 800d6e4:	f3bf 8f6f 	isb	sy
 800d6e8:	f3bf 8f4f 	dsb	sy
 800d6ec:	60fb      	str	r3, [r7, #12]
}
 800d6ee:	bf00      	nop
 800d6f0:	e7fe      	b.n	800d6f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d6f2:	69bb      	ldr	r3, [r7, #24]
 800d6f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6f6:	683a      	ldr	r2, [r7, #0]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d902      	bls.n	800d702 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	61fb      	str	r3, [r7, #28]
 800d700:	e002      	b.n	800d708 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d706:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d70c:	69fa      	ldr	r2, [r7, #28]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d050      	beq.n	800d7b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d712:	69bb      	ldr	r3, [r7, #24]
 800d714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d716:	697a      	ldr	r2, [r7, #20]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d14b      	bne.n	800d7b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d71c:	4b27      	ldr	r3, [pc, #156]	; (800d7bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	69ba      	ldr	r2, [r7, #24]
 800d722:	429a      	cmp	r2, r3
 800d724:	d10a      	bne.n	800d73c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d72a:	f383 8811 	msr	BASEPRI, r3
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f3bf 8f4f 	dsb	sy
 800d736:	60bb      	str	r3, [r7, #8]
}
 800d738:	bf00      	nop
 800d73a:	e7fe      	b.n	800d73a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d740:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d742:	69bb      	ldr	r3, [r7, #24]
 800d744:	69fa      	ldr	r2, [r7, #28]
 800d746:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	699b      	ldr	r3, [r3, #24]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	db04      	blt.n	800d75a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d750:	69fb      	ldr	r3, [r7, #28]
 800d752:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	6959      	ldr	r1, [r3, #20]
 800d75e:	693a      	ldr	r2, [r7, #16]
 800d760:	4613      	mov	r3, r2
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	4413      	add	r3, r2
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	4a15      	ldr	r2, [pc, #84]	; (800d7c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d76a:	4413      	add	r3, r2
 800d76c:	4299      	cmp	r1, r3
 800d76e:	d101      	bne.n	800d774 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800d770:	2301      	movs	r3, #1
 800d772:	e000      	b.n	800d776 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800d774:	2300      	movs	r3, #0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d01c      	beq.n	800d7b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	3304      	adds	r3, #4
 800d77e:	4618      	mov	r0, r3
 800d780:	f7fe f916 	bl	800b9b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d784:	69bb      	ldr	r3, [r7, #24]
 800d786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d788:	4b0e      	ldr	r3, [pc, #56]	; (800d7c4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d903      	bls.n	800d798 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d794:	4a0b      	ldr	r2, [pc, #44]	; (800d7c4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d796:	6013      	str	r3, [r2, #0]
 800d798:	69bb      	ldr	r3, [r7, #24]
 800d79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d79c:	4613      	mov	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	4413      	add	r3, r2
 800d7a2:	009b      	lsls	r3, r3, #2
 800d7a4:	4a06      	ldr	r2, [pc, #24]	; (800d7c0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d7a6:	441a      	add	r2, r3
 800d7a8:	69bb      	ldr	r3, [r7, #24]
 800d7aa:	3304      	adds	r3, #4
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	4610      	mov	r0, r2
 800d7b0:	f7fe f8a3 	bl	800b8fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d7b4:	bf00      	nop
 800d7b6:	3720      	adds	r7, #32
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	20000870 	.word	0x20000870
 800d7c0:	20000874 	.word	0x20000874
 800d7c4:	20000d4c 	.word	0x20000d4c

0800d7c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800d7c8:	b480      	push	{r7}
 800d7ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d7cc:	4b07      	ldr	r3, [pc, #28]	; (800d7ec <pvTaskIncrementMutexHeldCount+0x24>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d004      	beq.n	800d7de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d7d4:	4b05      	ldr	r3, [pc, #20]	; (800d7ec <pvTaskIncrementMutexHeldCount+0x24>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d7da:	3201      	adds	r2, #1
 800d7dc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d7de:	4b03      	ldr	r3, [pc, #12]	; (800d7ec <pvTaskIncrementMutexHeldCount+0x24>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
	}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bc80      	pop	{r7}
 800d7e8:	4770      	bx	lr
 800d7ea:	bf00      	nop
 800d7ec:	20000870 	.word	0x20000870

0800d7f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d7fa:	4b21      	ldr	r3, [pc, #132]	; (800d880 <prvAddCurrentTaskToDelayedList+0x90>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d800:	4b20      	ldr	r3, [pc, #128]	; (800d884 <prvAddCurrentTaskToDelayedList+0x94>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	3304      	adds	r3, #4
 800d806:	4618      	mov	r0, r3
 800d808:	f7fe f8d2 	bl	800b9b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d812:	d10a      	bne.n	800d82a <prvAddCurrentTaskToDelayedList+0x3a>
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d007      	beq.n	800d82a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d81a:	4b1a      	ldr	r3, [pc, #104]	; (800d884 <prvAddCurrentTaskToDelayedList+0x94>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	3304      	adds	r3, #4
 800d820:	4619      	mov	r1, r3
 800d822:	4819      	ldr	r0, [pc, #100]	; (800d888 <prvAddCurrentTaskToDelayedList+0x98>)
 800d824:	f7fe f869 	bl	800b8fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d828:	e026      	b.n	800d878 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d82a:	68fa      	ldr	r2, [r7, #12]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	4413      	add	r3, r2
 800d830:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d832:	4b14      	ldr	r3, [pc, #80]	; (800d884 <prvAddCurrentTaskToDelayedList+0x94>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68ba      	ldr	r2, [r7, #8]
 800d838:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d83a:	68ba      	ldr	r2, [r7, #8]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d209      	bcs.n	800d856 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d842:	4b12      	ldr	r3, [pc, #72]	; (800d88c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	4b0f      	ldr	r3, [pc, #60]	; (800d884 <prvAddCurrentTaskToDelayedList+0x94>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	3304      	adds	r3, #4
 800d84c:	4619      	mov	r1, r3
 800d84e:	4610      	mov	r0, r2
 800d850:	f7fe f876 	bl	800b940 <vListInsert>
}
 800d854:	e010      	b.n	800d878 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d856:	4b0e      	ldr	r3, [pc, #56]	; (800d890 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	4b0a      	ldr	r3, [pc, #40]	; (800d884 <prvAddCurrentTaskToDelayedList+0x94>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	3304      	adds	r3, #4
 800d860:	4619      	mov	r1, r3
 800d862:	4610      	mov	r0, r2
 800d864:	f7fe f86c 	bl	800b940 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d868:	4b0a      	ldr	r3, [pc, #40]	; (800d894 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	68ba      	ldr	r2, [r7, #8]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d202      	bcs.n	800d878 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d872:	4a08      	ldr	r2, [pc, #32]	; (800d894 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	6013      	str	r3, [r2, #0]
}
 800d878:	bf00      	nop
 800d87a:	3710      	adds	r7, #16
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	20000d48 	.word	0x20000d48
 800d884:	20000870 	.word	0x20000870
 800d888:	20000d30 	.word	0x20000d30
 800d88c:	20000d00 	.word	0x20000d00
 800d890:	20000cfc 	.word	0x20000cfc
 800d894:	20000d64 	.word	0x20000d64

0800d898 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b08a      	sub	sp, #40	; 0x28
 800d89c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d8a2:	f000 facb 	bl	800de3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d8a6:	4b1c      	ldr	r3, [pc, #112]	; (800d918 <xTimerCreateTimerTask+0x80>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d021      	beq.n	800d8f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d8b6:	1d3a      	adds	r2, r7, #4
 800d8b8:	f107 0108 	add.w	r1, r7, #8
 800d8bc:	f107 030c 	add.w	r3, r7, #12
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7fd ffd5 	bl	800b870 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d8c6:	6879      	ldr	r1, [r7, #4]
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	68fa      	ldr	r2, [r7, #12]
 800d8cc:	9202      	str	r2, [sp, #8]
 800d8ce:	9301      	str	r3, [sp, #4]
 800d8d0:	2302      	movs	r3, #2
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	460a      	mov	r2, r1
 800d8d8:	4910      	ldr	r1, [pc, #64]	; (800d91c <xTimerCreateTimerTask+0x84>)
 800d8da:	4811      	ldr	r0, [pc, #68]	; (800d920 <xTimerCreateTimerTask+0x88>)
 800d8dc:	f7fe ff26 	bl	800c72c <xTaskCreateStatic>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	4a10      	ldr	r2, [pc, #64]	; (800d924 <xTimerCreateTimerTask+0x8c>)
 800d8e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d8e6:	4b0f      	ldr	r3, [pc, #60]	; (800d924 <xTimerCreateTimerTask+0x8c>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d001      	beq.n	800d8f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d10a      	bne.n	800d90e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8fc:	f383 8811 	msr	BASEPRI, r3
 800d900:	f3bf 8f6f 	isb	sy
 800d904:	f3bf 8f4f 	dsb	sy
 800d908:	613b      	str	r3, [r7, #16]
}
 800d90a:	bf00      	nop
 800d90c:	e7fe      	b.n	800d90c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d90e:	697b      	ldr	r3, [r7, #20]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3718      	adds	r7, #24
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	20000da0 	.word	0x20000da0
 800d91c:	0800f2d4 	.word	0x0800f2d4
 800d920:	0800da45 	.word	0x0800da45
 800d924:	20000da4 	.word	0x20000da4

0800d928 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b08a      	sub	sp, #40	; 0x28
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	607a      	str	r2, [r7, #4]
 800d934:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d936:	2300      	movs	r3, #0
 800d938:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d10a      	bne.n	800d956 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d944:	f383 8811 	msr	BASEPRI, r3
 800d948:	f3bf 8f6f 	isb	sy
 800d94c:	f3bf 8f4f 	dsb	sy
 800d950:	623b      	str	r3, [r7, #32]
}
 800d952:	bf00      	nop
 800d954:	e7fe      	b.n	800d954 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d956:	4b1a      	ldr	r3, [pc, #104]	; (800d9c0 <xTimerGenericCommand+0x98>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d02a      	beq.n	800d9b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	2b05      	cmp	r3, #5
 800d96e:	dc18      	bgt.n	800d9a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d970:	f7ff fdaa 	bl	800d4c8 <xTaskGetSchedulerState>
 800d974:	4603      	mov	r3, r0
 800d976:	2b02      	cmp	r3, #2
 800d978:	d109      	bne.n	800d98e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d97a:	4b11      	ldr	r3, [pc, #68]	; (800d9c0 <xTimerGenericCommand+0x98>)
 800d97c:	6818      	ldr	r0, [r3, #0]
 800d97e:	f107 0110 	add.w	r1, r7, #16
 800d982:	2300      	movs	r3, #0
 800d984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d986:	f7fe f9cb 	bl	800bd20 <xQueueGenericSend>
 800d98a:	6278      	str	r0, [r7, #36]	; 0x24
 800d98c:	e012      	b.n	800d9b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d98e:	4b0c      	ldr	r3, [pc, #48]	; (800d9c0 <xTimerGenericCommand+0x98>)
 800d990:	6818      	ldr	r0, [r3, #0]
 800d992:	f107 0110 	add.w	r1, r7, #16
 800d996:	2300      	movs	r3, #0
 800d998:	2200      	movs	r2, #0
 800d99a:	f7fe f9c1 	bl	800bd20 <xQueueGenericSend>
 800d99e:	6278      	str	r0, [r7, #36]	; 0x24
 800d9a0:	e008      	b.n	800d9b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d9a2:	4b07      	ldr	r3, [pc, #28]	; (800d9c0 <xTimerGenericCommand+0x98>)
 800d9a4:	6818      	ldr	r0, [r3, #0]
 800d9a6:	f107 0110 	add.w	r1, r7, #16
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	683a      	ldr	r2, [r7, #0]
 800d9ae:	f7fe fab5 	bl	800bf1c <xQueueGenericSendFromISR>
 800d9b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3728      	adds	r7, #40	; 0x28
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	20000da0 	.word	0x20000da0

0800d9c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b088      	sub	sp, #32
 800d9c8:	af02      	add	r7, sp, #8
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d9ce:	4b1c      	ldr	r3, [pc, #112]	; (800da40 <prvProcessExpiredTimer+0x7c>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	68db      	ldr	r3, [r3, #12]
 800d9d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	3304      	adds	r3, #4
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7fd ffe7 	bl	800b9b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	69db      	ldr	r3, [r3, #28]
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d122      	bne.n	800da30 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	699a      	ldr	r2, [r3, #24]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	18d1      	adds	r1, r2, r3
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	683a      	ldr	r2, [r7, #0]
 800d9f6:	6978      	ldr	r0, [r7, #20]
 800d9f8:	f000 f8c8 	bl	800db8c <prvInsertTimerInActiveList>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d016      	beq.n	800da30 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da02:	2300      	movs	r3, #0
 800da04:	9300      	str	r3, [sp, #0]
 800da06:	2300      	movs	r3, #0
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	2100      	movs	r1, #0
 800da0c:	6978      	ldr	r0, [r7, #20]
 800da0e:	f7ff ff8b 	bl	800d928 <xTimerGenericCommand>
 800da12:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d10a      	bne.n	800da30 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800da1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	60fb      	str	r3, [r7, #12]
}
 800da2c:	bf00      	nop
 800da2e:	e7fe      	b.n	800da2e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da34:	6978      	ldr	r0, [r7, #20]
 800da36:	4798      	blx	r3
}
 800da38:	bf00      	nop
 800da3a:	3718      	adds	r7, #24
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	20000d98 	.word	0x20000d98

0800da44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da4c:	f107 0308 	add.w	r3, r7, #8
 800da50:	4618      	mov	r0, r3
 800da52:	f000 f857 	bl	800db04 <prvGetNextExpireTime>
 800da56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	4619      	mov	r1, r3
 800da5c:	68f8      	ldr	r0, [r7, #12]
 800da5e:	f000 f803 	bl	800da68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800da62:	f000 f8d5 	bl	800dc10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da66:	e7f1      	b.n	800da4c <prvTimerTask+0x8>

0800da68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800da72:	f7ff f90b 	bl	800cc8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da76:	f107 0308 	add.w	r3, r7, #8
 800da7a:	4618      	mov	r0, r3
 800da7c:	f000 f866 	bl	800db4c <prvSampleTimeNow>
 800da80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d130      	bne.n	800daea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d10a      	bne.n	800daa4 <prvProcessTimerOrBlockTask+0x3c>
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	429a      	cmp	r2, r3
 800da94:	d806      	bhi.n	800daa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800da96:	f7ff f907 	bl	800cca8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800da9a:	68f9      	ldr	r1, [r7, #12]
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f7ff ff91 	bl	800d9c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800daa2:	e024      	b.n	800daee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d008      	beq.n	800dabc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800daaa:	4b13      	ldr	r3, [pc, #76]	; (800daf8 <prvProcessTimerOrBlockTask+0x90>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	bf0c      	ite	eq
 800dab4:	2301      	moveq	r3, #1
 800dab6:	2300      	movne	r3, #0
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dabc:	4b0f      	ldr	r3, [pc, #60]	; (800dafc <prvProcessTimerOrBlockTask+0x94>)
 800dabe:	6818      	ldr	r0, [r3, #0]
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	1ad3      	subs	r3, r2, r3
 800dac6:	683a      	ldr	r2, [r7, #0]
 800dac8:	4619      	mov	r1, r3
 800daca:	f7fe fdfb 	bl	800c6c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dace:	f7ff f8eb 	bl	800cca8 <xTaskResumeAll>
 800dad2:	4603      	mov	r3, r0
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d10a      	bne.n	800daee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dad8:	4b09      	ldr	r3, [pc, #36]	; (800db00 <prvProcessTimerOrBlockTask+0x98>)
 800dada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dade:	601a      	str	r2, [r3, #0]
 800dae0:	f3bf 8f4f 	dsb	sy
 800dae4:	f3bf 8f6f 	isb	sy
}
 800dae8:	e001      	b.n	800daee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800daea:	f7ff f8dd 	bl	800cca8 <xTaskResumeAll>
}
 800daee:	bf00      	nop
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	20000d9c 	.word	0x20000d9c
 800dafc:	20000da0 	.word	0x20000da0
 800db00:	e000ed04 	.word	0xe000ed04

0800db04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800db04:	b480      	push	{r7}
 800db06:	b085      	sub	sp, #20
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800db0c:	4b0e      	ldr	r3, [pc, #56]	; (800db48 <prvGetNextExpireTime+0x44>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	bf0c      	ite	eq
 800db16:	2301      	moveq	r3, #1
 800db18:	2300      	movne	r3, #0
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	461a      	mov	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d105      	bne.n	800db36 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db2a:	4b07      	ldr	r3, [pc, #28]	; (800db48 <prvGetNextExpireTime+0x44>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	60fb      	str	r3, [r7, #12]
 800db34:	e001      	b.n	800db3a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800db36:	2300      	movs	r3, #0
 800db38:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800db3a:	68fb      	ldr	r3, [r7, #12]
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3714      	adds	r7, #20
 800db40:	46bd      	mov	sp, r7
 800db42:	bc80      	pop	{r7}
 800db44:	4770      	bx	lr
 800db46:	bf00      	nop
 800db48:	20000d98 	.word	0x20000d98

0800db4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800db54:	f7ff f946 	bl	800cde4 <xTaskGetTickCount>
 800db58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800db5a:	4b0b      	ldr	r3, [pc, #44]	; (800db88 <prvSampleTimeNow+0x3c>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	429a      	cmp	r2, r3
 800db62:	d205      	bcs.n	800db70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800db64:	f000 f908 	bl	800dd78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2201      	movs	r2, #1
 800db6c:	601a      	str	r2, [r3, #0]
 800db6e:	e002      	b.n	800db76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2200      	movs	r2, #0
 800db74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800db76:	4a04      	ldr	r2, [pc, #16]	; (800db88 <prvSampleTimeNow+0x3c>)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800db7c:	68fb      	ldr	r3, [r7, #12]
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	20000da8 	.word	0x20000da8

0800db8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b086      	sub	sp, #24
 800db90:	af00      	add	r7, sp, #0
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	60b9      	str	r1, [r7, #8]
 800db96:	607a      	str	r2, [r7, #4]
 800db98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800db9a:	2300      	movs	r3, #0
 800db9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dbaa:	68ba      	ldr	r2, [r7, #8]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d812      	bhi.n	800dbd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	1ad2      	subs	r2, r2, r3
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	699b      	ldr	r3, [r3, #24]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d302      	bcc.n	800dbc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	617b      	str	r3, [r7, #20]
 800dbc4:	e01b      	b.n	800dbfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dbc6:	4b10      	ldr	r3, [pc, #64]	; (800dc08 <prvInsertTimerInActiveList+0x7c>)
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3304      	adds	r3, #4
 800dbce:	4619      	mov	r1, r3
 800dbd0:	4610      	mov	r0, r2
 800dbd2:	f7fd feb5 	bl	800b940 <vListInsert>
 800dbd6:	e012      	b.n	800dbfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d206      	bcs.n	800dbee <prvInsertTimerInActiveList+0x62>
 800dbe0:	68ba      	ldr	r2, [r7, #8]
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d302      	bcc.n	800dbee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	617b      	str	r3, [r7, #20]
 800dbec:	e007      	b.n	800dbfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbee:	4b07      	ldr	r3, [pc, #28]	; (800dc0c <prvInsertTimerInActiveList+0x80>)
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	3304      	adds	r3, #4
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	4610      	mov	r0, r2
 800dbfa:	f7fd fea1 	bl	800b940 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dbfe:	697b      	ldr	r3, [r7, #20]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3718      	adds	r7, #24
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	20000d9c 	.word	0x20000d9c
 800dc0c:	20000d98 	.word	0x20000d98

0800dc10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b08e      	sub	sp, #56	; 0x38
 800dc14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc16:	e09d      	b.n	800dd54 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	da18      	bge.n	800dc50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dc1e:	1d3b      	adds	r3, r7, #4
 800dc20:	3304      	adds	r3, #4
 800dc22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d10a      	bne.n	800dc40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2e:	f383 8811 	msr	BASEPRI, r3
 800dc32:	f3bf 8f6f 	isb	sy
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	61fb      	str	r3, [r7, #28]
}
 800dc3c:	bf00      	nop
 800dc3e:	e7fe      	b.n	800dc3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc46:	6850      	ldr	r0, [r2, #4]
 800dc48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc4a:	6892      	ldr	r2, [r2, #8]
 800dc4c:	4611      	mov	r1, r2
 800dc4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	db7d      	blt.n	800dd52 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5c:	695b      	ldr	r3, [r3, #20]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d004      	beq.n	800dc6c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc64:	3304      	adds	r3, #4
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fd fea2 	bl	800b9b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc6c:	463b      	mov	r3, r7
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7ff ff6c 	bl	800db4c <prvSampleTimeNow>
 800dc74:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2b09      	cmp	r3, #9
 800dc7a:	d86b      	bhi.n	800dd54 <prvProcessReceivedCommands+0x144>
 800dc7c:	a201      	add	r2, pc, #4	; (adr r2, 800dc84 <prvProcessReceivedCommands+0x74>)
 800dc7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc82:	bf00      	nop
 800dc84:	0800dcad 	.word	0x0800dcad
 800dc88:	0800dcad 	.word	0x0800dcad
 800dc8c:	0800dcad 	.word	0x0800dcad
 800dc90:	0800dd55 	.word	0x0800dd55
 800dc94:	0800dd09 	.word	0x0800dd09
 800dc98:	0800dd41 	.word	0x0800dd41
 800dc9c:	0800dcad 	.word	0x0800dcad
 800dca0:	0800dcad 	.word	0x0800dcad
 800dca4:	0800dd55 	.word	0x0800dd55
 800dca8:	0800dd09 	.word	0x0800dd09
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dcac:	68ba      	ldr	r2, [r7, #8]
 800dcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb0:	699b      	ldr	r3, [r3, #24]
 800dcb2:	18d1      	adds	r1, r2, r3
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcba:	f7ff ff67 	bl	800db8c <prvInsertTimerInActiveList>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d047      	beq.n	800dd54 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800dccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcce:	69db      	ldr	r3, [r3, #28]
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	d13f      	bne.n	800dd54 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dcd4:	68ba      	ldr	r2, [r7, #8]
 800dcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd8:	699b      	ldr	r3, [r3, #24]
 800dcda:	441a      	add	r2, r3
 800dcdc:	2300      	movs	r3, #0
 800dcde:	9300      	str	r3, [sp, #0]
 800dce0:	2300      	movs	r3, #0
 800dce2:	2100      	movs	r1, #0
 800dce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dce6:	f7ff fe1f 	bl	800d928 <xTimerGenericCommand>
 800dcea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dcec:	6a3b      	ldr	r3, [r7, #32]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d130      	bne.n	800dd54 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800dcf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf6:	f383 8811 	msr	BASEPRI, r3
 800dcfa:	f3bf 8f6f 	isb	sy
 800dcfe:	f3bf 8f4f 	dsb	sy
 800dd02:	61bb      	str	r3, [r7, #24]
}
 800dd04:	bf00      	nop
 800dd06:	e7fe      	b.n	800dd06 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dd08:	68ba      	ldr	r2, [r7, #8]
 800dd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd10:	699b      	ldr	r3, [r3, #24]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d10a      	bne.n	800dd2c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800dd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd1a:	f383 8811 	msr	BASEPRI, r3
 800dd1e:	f3bf 8f6f 	isb	sy
 800dd22:	f3bf 8f4f 	dsb	sy
 800dd26:	617b      	str	r3, [r7, #20]
}
 800dd28:	bf00      	nop
 800dd2a:	e7fe      	b.n	800dd2a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2e:	699a      	ldr	r2, [r3, #24]
 800dd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd32:	18d1      	adds	r1, r2, r3
 800dd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd3a:	f7ff ff27 	bl	800db8c <prvInsertTimerInActiveList>
					break;
 800dd3e:	e009      	b.n	800dd54 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800dd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d104      	bne.n	800dd54 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800dd4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd4c:	f000 fb6a 	bl	800e424 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dd50:	e000      	b.n	800dd54 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dd52:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd54:	4b07      	ldr	r3, [pc, #28]	; (800dd74 <prvProcessReceivedCommands+0x164>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	1d39      	adds	r1, r7, #4
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7fe f975 	bl	800c04c <xQueueReceive>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	f47f af57 	bne.w	800dc18 <prvProcessReceivedCommands+0x8>
	}
}
 800dd6a:	bf00      	nop
 800dd6c:	bf00      	nop
 800dd6e:	3730      	adds	r7, #48	; 0x30
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	20000da0 	.word	0x20000da0

0800dd78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b088      	sub	sp, #32
 800dd7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd7e:	e045      	b.n	800de0c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd80:	4b2c      	ldr	r3, [pc, #176]	; (800de34 <prvSwitchTimerLists+0xbc>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd8a:	4b2a      	ldr	r3, [pc, #168]	; (800de34 <prvSwitchTimerLists+0xbc>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	68db      	ldr	r3, [r3, #12]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	3304      	adds	r3, #4
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fd fe09 	bl	800b9b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda2:	68f8      	ldr	r0, [r7, #12]
 800dda4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	69db      	ldr	r3, [r3, #28]
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d12e      	bne.n	800de0c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	699b      	ldr	r3, [r3, #24]
 800ddb2:	693a      	ldr	r2, [r7, #16]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ddb8:	68ba      	ldr	r2, [r7, #8]
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	d90e      	bls.n	800ddde <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	68ba      	ldr	r2, [r7, #8]
 800ddc4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	68fa      	ldr	r2, [r7, #12]
 800ddca:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ddcc:	4b19      	ldr	r3, [pc, #100]	; (800de34 <prvSwitchTimerLists+0xbc>)
 800ddce:	681a      	ldr	r2, [r3, #0]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	3304      	adds	r3, #4
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	4610      	mov	r0, r2
 800ddd8:	f7fd fdb2 	bl	800b940 <vListInsert>
 800dddc:	e016      	b.n	800de0c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ddde:	2300      	movs	r3, #0
 800dde0:	9300      	str	r3, [sp, #0]
 800dde2:	2300      	movs	r3, #0
 800dde4:	693a      	ldr	r2, [r7, #16]
 800dde6:	2100      	movs	r1, #0
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f7ff fd9d 	bl	800d928 <xTimerGenericCommand>
 800ddee:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d10a      	bne.n	800de0c <prvSwitchTimerLists+0x94>
	__asm volatile
 800ddf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddfa:	f383 8811 	msr	BASEPRI, r3
 800ddfe:	f3bf 8f6f 	isb	sy
 800de02:	f3bf 8f4f 	dsb	sy
 800de06:	603b      	str	r3, [r7, #0]
}
 800de08:	bf00      	nop
 800de0a:	e7fe      	b.n	800de0a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de0c:	4b09      	ldr	r3, [pc, #36]	; (800de34 <prvSwitchTimerLists+0xbc>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1b4      	bne.n	800dd80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800de16:	4b07      	ldr	r3, [pc, #28]	; (800de34 <prvSwitchTimerLists+0xbc>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800de1c:	4b06      	ldr	r3, [pc, #24]	; (800de38 <prvSwitchTimerLists+0xc0>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a04      	ldr	r2, [pc, #16]	; (800de34 <prvSwitchTimerLists+0xbc>)
 800de22:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800de24:	4a04      	ldr	r2, [pc, #16]	; (800de38 <prvSwitchTimerLists+0xc0>)
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	6013      	str	r3, [r2, #0]
}
 800de2a:	bf00      	nop
 800de2c:	3718      	adds	r7, #24
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
 800de32:	bf00      	nop
 800de34:	20000d98 	.word	0x20000d98
 800de38:	20000d9c 	.word	0x20000d9c

0800de3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800de42:	f000 f92b 	bl	800e09c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800de46:	4b15      	ldr	r3, [pc, #84]	; (800de9c <prvCheckForValidListAndQueue+0x60>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d120      	bne.n	800de90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800de4e:	4814      	ldr	r0, [pc, #80]	; (800dea0 <prvCheckForValidListAndQueue+0x64>)
 800de50:	f7fd fd28 	bl	800b8a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800de54:	4813      	ldr	r0, [pc, #76]	; (800dea4 <prvCheckForValidListAndQueue+0x68>)
 800de56:	f7fd fd25 	bl	800b8a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800de5a:	4b13      	ldr	r3, [pc, #76]	; (800dea8 <prvCheckForValidListAndQueue+0x6c>)
 800de5c:	4a10      	ldr	r2, [pc, #64]	; (800dea0 <prvCheckForValidListAndQueue+0x64>)
 800de5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800de60:	4b12      	ldr	r3, [pc, #72]	; (800deac <prvCheckForValidListAndQueue+0x70>)
 800de62:	4a10      	ldr	r2, [pc, #64]	; (800dea4 <prvCheckForValidListAndQueue+0x68>)
 800de64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800de66:	2300      	movs	r3, #0
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	4b11      	ldr	r3, [pc, #68]	; (800deb0 <prvCheckForValidListAndQueue+0x74>)
 800de6c:	4a11      	ldr	r2, [pc, #68]	; (800deb4 <prvCheckForValidListAndQueue+0x78>)
 800de6e:	2110      	movs	r1, #16
 800de70:	200a      	movs	r0, #10
 800de72:	f7fd fe2f 	bl	800bad4 <xQueueGenericCreateStatic>
 800de76:	4603      	mov	r3, r0
 800de78:	4a08      	ldr	r2, [pc, #32]	; (800de9c <prvCheckForValidListAndQueue+0x60>)
 800de7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800de7c:	4b07      	ldr	r3, [pc, #28]	; (800de9c <prvCheckForValidListAndQueue+0x60>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d005      	beq.n	800de90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800de84:	4b05      	ldr	r3, [pc, #20]	; (800de9c <prvCheckForValidListAndQueue+0x60>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	490b      	ldr	r1, [pc, #44]	; (800deb8 <prvCheckForValidListAndQueue+0x7c>)
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fe fbf2 	bl	800c674 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de90:	f000 f934 	bl	800e0fc <vPortExitCritical>
}
 800de94:	bf00      	nop
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	20000da0 	.word	0x20000da0
 800dea0:	20000d70 	.word	0x20000d70
 800dea4:	20000d84 	.word	0x20000d84
 800dea8:	20000d98 	.word	0x20000d98
 800deac:	20000d9c 	.word	0x20000d9c
 800deb0:	20000e4c 	.word	0x20000e4c
 800deb4:	20000dac 	.word	0x20000dac
 800deb8:	0800f2dc 	.word	0x0800f2dc

0800debc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800debc:	b480      	push	{r7}
 800debe:	b085      	sub	sp, #20
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	3b04      	subs	r3, #4
 800decc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ded4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	3b04      	subs	r3, #4
 800deda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	f023 0201 	bic.w	r2, r3, #1
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	3b04      	subs	r3, #4
 800deea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800deec:	4a08      	ldr	r2, [pc, #32]	; (800df10 <pxPortInitialiseStack+0x54>)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	3b14      	subs	r3, #20
 800def6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	3b20      	subs	r3, #32
 800df02:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800df04:	68fb      	ldr	r3, [r7, #12]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3714      	adds	r7, #20
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bc80      	pop	{r7}
 800df0e:	4770      	bx	lr
 800df10:	0800df15 	.word	0x0800df15

0800df14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800df1a:	2300      	movs	r3, #0
 800df1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800df1e:	4b12      	ldr	r3, [pc, #72]	; (800df68 <prvTaskExitError+0x54>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df26:	d00a      	beq.n	800df3e <prvTaskExitError+0x2a>
	__asm volatile
 800df28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df2c:	f383 8811 	msr	BASEPRI, r3
 800df30:	f3bf 8f6f 	isb	sy
 800df34:	f3bf 8f4f 	dsb	sy
 800df38:	60fb      	str	r3, [r7, #12]
}
 800df3a:	bf00      	nop
 800df3c:	e7fe      	b.n	800df3c <prvTaskExitError+0x28>
	__asm volatile
 800df3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df42:	f383 8811 	msr	BASEPRI, r3
 800df46:	f3bf 8f6f 	isb	sy
 800df4a:	f3bf 8f4f 	dsb	sy
 800df4e:	60bb      	str	r3, [r7, #8]
}
 800df50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800df52:	bf00      	nop
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d0fc      	beq.n	800df54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800df5a:	bf00      	nop
 800df5c:	bf00      	nop
 800df5e:	3714      	adds	r7, #20
 800df60:	46bd      	mov	sp, r7
 800df62:	bc80      	pop	{r7}
 800df64:	4770      	bx	lr
 800df66:	bf00      	nop
 800df68:	2000012c 	.word	0x2000012c
 800df6c:	00000000 	.word	0x00000000

0800df70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800df70:	4b07      	ldr	r3, [pc, #28]	; (800df90 <pxCurrentTCBConst2>)
 800df72:	6819      	ldr	r1, [r3, #0]
 800df74:	6808      	ldr	r0, [r1, #0]
 800df76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800df7a:	f380 8809 	msr	PSP, r0
 800df7e:	f3bf 8f6f 	isb	sy
 800df82:	f04f 0000 	mov.w	r0, #0
 800df86:	f380 8811 	msr	BASEPRI, r0
 800df8a:	f04e 0e0d 	orr.w	lr, lr, #13
 800df8e:	4770      	bx	lr

0800df90 <pxCurrentTCBConst2>:
 800df90:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800df94:	bf00      	nop
 800df96:	bf00      	nop

0800df98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800df98:	4806      	ldr	r0, [pc, #24]	; (800dfb4 <prvPortStartFirstTask+0x1c>)
 800df9a:	6800      	ldr	r0, [r0, #0]
 800df9c:	6800      	ldr	r0, [r0, #0]
 800df9e:	f380 8808 	msr	MSP, r0
 800dfa2:	b662      	cpsie	i
 800dfa4:	b661      	cpsie	f
 800dfa6:	f3bf 8f4f 	dsb	sy
 800dfaa:	f3bf 8f6f 	isb	sy
 800dfae:	df00      	svc	0
 800dfb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dfb2:	bf00      	nop
 800dfb4:	e000ed08 	.word	0xe000ed08

0800dfb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b084      	sub	sp, #16
 800dfbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dfbe:	4b32      	ldr	r3, [pc, #200]	; (800e088 <xPortStartScheduler+0xd0>)
 800dfc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	22ff      	movs	r2, #255	; 0xff
 800dfce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dfd8:	78fb      	ldrb	r3, [r7, #3]
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dfe0:	b2da      	uxtb	r2, r3
 800dfe2:	4b2a      	ldr	r3, [pc, #168]	; (800e08c <xPortStartScheduler+0xd4>)
 800dfe4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dfe6:	4b2a      	ldr	r3, [pc, #168]	; (800e090 <xPortStartScheduler+0xd8>)
 800dfe8:	2207      	movs	r2, #7
 800dfea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dfec:	e009      	b.n	800e002 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800dfee:	4b28      	ldr	r3, [pc, #160]	; (800e090 <xPortStartScheduler+0xd8>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	3b01      	subs	r3, #1
 800dff4:	4a26      	ldr	r2, [pc, #152]	; (800e090 <xPortStartScheduler+0xd8>)
 800dff6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dff8:	78fb      	ldrb	r3, [r7, #3]
 800dffa:	b2db      	uxtb	r3, r3
 800dffc:	005b      	lsls	r3, r3, #1
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e002:	78fb      	ldrb	r3, [r7, #3]
 800e004:	b2db      	uxtb	r3, r3
 800e006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e00a:	2b80      	cmp	r3, #128	; 0x80
 800e00c:	d0ef      	beq.n	800dfee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e00e:	4b20      	ldr	r3, [pc, #128]	; (800e090 <xPortStartScheduler+0xd8>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f1c3 0307 	rsb	r3, r3, #7
 800e016:	2b04      	cmp	r3, #4
 800e018:	d00a      	beq.n	800e030 <xPortStartScheduler+0x78>
	__asm volatile
 800e01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e01e:	f383 8811 	msr	BASEPRI, r3
 800e022:	f3bf 8f6f 	isb	sy
 800e026:	f3bf 8f4f 	dsb	sy
 800e02a:	60bb      	str	r3, [r7, #8]
}
 800e02c:	bf00      	nop
 800e02e:	e7fe      	b.n	800e02e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e030:	4b17      	ldr	r3, [pc, #92]	; (800e090 <xPortStartScheduler+0xd8>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	021b      	lsls	r3, r3, #8
 800e036:	4a16      	ldr	r2, [pc, #88]	; (800e090 <xPortStartScheduler+0xd8>)
 800e038:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e03a:	4b15      	ldr	r3, [pc, #84]	; (800e090 <xPortStartScheduler+0xd8>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e042:	4a13      	ldr	r2, [pc, #76]	; (800e090 <xPortStartScheduler+0xd8>)
 800e044:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e04e:	4b11      	ldr	r3, [pc, #68]	; (800e094 <xPortStartScheduler+0xdc>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4a10      	ldr	r2, [pc, #64]	; (800e094 <xPortStartScheduler+0xdc>)
 800e054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e058:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e05a:	4b0e      	ldr	r3, [pc, #56]	; (800e094 <xPortStartScheduler+0xdc>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4a0d      	ldr	r2, [pc, #52]	; (800e094 <xPortStartScheduler+0xdc>)
 800e060:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e064:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e066:	f000 f8b9 	bl	800e1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e06a:	4b0b      	ldr	r3, [pc, #44]	; (800e098 <xPortStartScheduler+0xe0>)
 800e06c:	2200      	movs	r2, #0
 800e06e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e070:	f7ff ff92 	bl	800df98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e074:	f7fe ff82 	bl	800cf7c <vTaskSwitchContext>
	prvTaskExitError();
 800e078:	f7ff ff4c 	bl	800df14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e07c:	2300      	movs	r3, #0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3710      	adds	r7, #16
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	e000e400 	.word	0xe000e400
 800e08c:	20000e9c 	.word	0x20000e9c
 800e090:	20000ea0 	.word	0x20000ea0
 800e094:	e000ed20 	.word	0xe000ed20
 800e098:	2000012c 	.word	0x2000012c

0800e09c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e09c:	b480      	push	{r7}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
	__asm volatile
 800e0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a6:	f383 8811 	msr	BASEPRI, r3
 800e0aa:	f3bf 8f6f 	isb	sy
 800e0ae:	f3bf 8f4f 	dsb	sy
 800e0b2:	607b      	str	r3, [r7, #4]
}
 800e0b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e0b6:	4b0f      	ldr	r3, [pc, #60]	; (800e0f4 <vPortEnterCritical+0x58>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	4a0d      	ldr	r2, [pc, #52]	; (800e0f4 <vPortEnterCritical+0x58>)
 800e0be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e0c0:	4b0c      	ldr	r3, [pc, #48]	; (800e0f4 <vPortEnterCritical+0x58>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d10f      	bne.n	800e0e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e0c8:	4b0b      	ldr	r3, [pc, #44]	; (800e0f8 <vPortEnterCritical+0x5c>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d00a      	beq.n	800e0e8 <vPortEnterCritical+0x4c>
	__asm volatile
 800e0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d6:	f383 8811 	msr	BASEPRI, r3
 800e0da:	f3bf 8f6f 	isb	sy
 800e0de:	f3bf 8f4f 	dsb	sy
 800e0e2:	603b      	str	r3, [r7, #0]
}
 800e0e4:	bf00      	nop
 800e0e6:	e7fe      	b.n	800e0e6 <vPortEnterCritical+0x4a>
	}
}
 800e0e8:	bf00      	nop
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bc80      	pop	{r7}
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop
 800e0f4:	2000012c 	.word	0x2000012c
 800e0f8:	e000ed04 	.word	0xe000ed04

0800e0fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e102:	4b11      	ldr	r3, [pc, #68]	; (800e148 <vPortExitCritical+0x4c>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d10a      	bne.n	800e120 <vPortExitCritical+0x24>
	__asm volatile
 800e10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10e:	f383 8811 	msr	BASEPRI, r3
 800e112:	f3bf 8f6f 	isb	sy
 800e116:	f3bf 8f4f 	dsb	sy
 800e11a:	607b      	str	r3, [r7, #4]
}
 800e11c:	bf00      	nop
 800e11e:	e7fe      	b.n	800e11e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e120:	4b09      	ldr	r3, [pc, #36]	; (800e148 <vPortExitCritical+0x4c>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	3b01      	subs	r3, #1
 800e126:	4a08      	ldr	r2, [pc, #32]	; (800e148 <vPortExitCritical+0x4c>)
 800e128:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e12a:	4b07      	ldr	r3, [pc, #28]	; (800e148 <vPortExitCritical+0x4c>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d105      	bne.n	800e13e <vPortExitCritical+0x42>
 800e132:	2300      	movs	r3, #0
 800e134:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	f383 8811 	msr	BASEPRI, r3
}
 800e13c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e13e:	bf00      	nop
 800e140:	370c      	adds	r7, #12
 800e142:	46bd      	mov	sp, r7
 800e144:	bc80      	pop	{r7}
 800e146:	4770      	bx	lr
 800e148:	2000012c 	.word	0x2000012c
 800e14c:	00000000 	.word	0x00000000

0800e150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e150:	f3ef 8009 	mrs	r0, PSP
 800e154:	f3bf 8f6f 	isb	sy
 800e158:	4b0d      	ldr	r3, [pc, #52]	; (800e190 <pxCurrentTCBConst>)
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e160:	6010      	str	r0, [r2, #0]
 800e162:	e92d 4008 	stmdb	sp!, {r3, lr}
 800e166:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e16a:	f380 8811 	msr	BASEPRI, r0
 800e16e:	f7fe ff05 	bl	800cf7c <vTaskSwitchContext>
 800e172:	f04f 0000 	mov.w	r0, #0
 800e176:	f380 8811 	msr	BASEPRI, r0
 800e17a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e17e:	6819      	ldr	r1, [r3, #0]
 800e180:	6808      	ldr	r0, [r1, #0]
 800e182:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e186:	f380 8809 	msr	PSP, r0
 800e18a:	f3bf 8f6f 	isb	sy
 800e18e:	4770      	bx	lr

0800e190 <pxCurrentTCBConst>:
 800e190:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e194:	bf00      	nop
 800e196:	bf00      	nop

0800e198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
	__asm volatile
 800e19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a2:	f383 8811 	msr	BASEPRI, r3
 800e1a6:	f3bf 8f6f 	isb	sy
 800e1aa:	f3bf 8f4f 	dsb	sy
 800e1ae:	607b      	str	r3, [r7, #4]
}
 800e1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e1b2:	f7fe fe25 	bl	800ce00 <xTaskIncrementTick>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d003      	beq.n	800e1c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e1bc:	4b06      	ldr	r3, [pc, #24]	; (800e1d8 <SysTick_Handler+0x40>)
 800e1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1c2:	601a      	str	r2, [r3, #0]
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	f383 8811 	msr	BASEPRI, r3
}
 800e1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e1d0:	bf00      	nop
 800e1d2:	3708      	adds	r7, #8
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}
 800e1d8:	e000ed04 	.word	0xe000ed04

0800e1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e1dc:	b480      	push	{r7}
 800e1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e1e0:	4b0a      	ldr	r3, [pc, #40]	; (800e20c <vPortSetupTimerInterrupt+0x30>)
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e1e6:	4b0a      	ldr	r3, [pc, #40]	; (800e210 <vPortSetupTimerInterrupt+0x34>)
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e1ec:	4b09      	ldr	r3, [pc, #36]	; (800e214 <vPortSetupTimerInterrupt+0x38>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4a09      	ldr	r2, [pc, #36]	; (800e218 <vPortSetupTimerInterrupt+0x3c>)
 800e1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e1f6:	099b      	lsrs	r3, r3, #6
 800e1f8:	4a08      	ldr	r2, [pc, #32]	; (800e21c <vPortSetupTimerInterrupt+0x40>)
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e1fe:	4b03      	ldr	r3, [pc, #12]	; (800e20c <vPortSetupTimerInterrupt+0x30>)
 800e200:	2207      	movs	r2, #7
 800e202:	601a      	str	r2, [r3, #0]
}
 800e204:	bf00      	nop
 800e206:	46bd      	mov	sp, r7
 800e208:	bc80      	pop	{r7}
 800e20a:	4770      	bx	lr
 800e20c:	e000e010 	.word	0xe000e010
 800e210:	e000e018 	.word	0xe000e018
 800e214:	20000010 	.word	0x20000010
 800e218:	10624dd3 	.word	0x10624dd3
 800e21c:	e000e014 	.word	0xe000e014

0800e220 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e220:	b480      	push	{r7}
 800e222:	b085      	sub	sp, #20
 800e224:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e226:	f3ef 8305 	mrs	r3, IPSR
 800e22a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2b0f      	cmp	r3, #15
 800e230:	d914      	bls.n	800e25c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e232:	4a16      	ldr	r2, [pc, #88]	; (800e28c <vPortValidateInterruptPriority+0x6c>)
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	4413      	add	r3, r2
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e23c:	4b14      	ldr	r3, [pc, #80]	; (800e290 <vPortValidateInterruptPriority+0x70>)
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	7afa      	ldrb	r2, [r7, #11]
 800e242:	429a      	cmp	r2, r3
 800e244:	d20a      	bcs.n	800e25c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24a:	f383 8811 	msr	BASEPRI, r3
 800e24e:	f3bf 8f6f 	isb	sy
 800e252:	f3bf 8f4f 	dsb	sy
 800e256:	607b      	str	r3, [r7, #4]
}
 800e258:	bf00      	nop
 800e25a:	e7fe      	b.n	800e25a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e25c:	4b0d      	ldr	r3, [pc, #52]	; (800e294 <vPortValidateInterruptPriority+0x74>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e264:	4b0c      	ldr	r3, [pc, #48]	; (800e298 <vPortValidateInterruptPriority+0x78>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d90a      	bls.n	800e282 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e270:	f383 8811 	msr	BASEPRI, r3
 800e274:	f3bf 8f6f 	isb	sy
 800e278:	f3bf 8f4f 	dsb	sy
 800e27c:	603b      	str	r3, [r7, #0]
}
 800e27e:	bf00      	nop
 800e280:	e7fe      	b.n	800e280 <vPortValidateInterruptPriority+0x60>
	}
 800e282:	bf00      	nop
 800e284:	3714      	adds	r7, #20
 800e286:	46bd      	mov	sp, r7
 800e288:	bc80      	pop	{r7}
 800e28a:	4770      	bx	lr
 800e28c:	e000e3f0 	.word	0xe000e3f0
 800e290:	20000e9c 	.word	0x20000e9c
 800e294:	e000ed0c 	.word	0xe000ed0c
 800e298:	20000ea0 	.word	0x20000ea0

0800e29c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b08a      	sub	sp, #40	; 0x28
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e2a8:	f7fe fcf0 	bl	800cc8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e2ac:	4b58      	ldr	r3, [pc, #352]	; (800e410 <pvPortMalloc+0x174>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d101      	bne.n	800e2b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e2b4:	f000 f910 	bl	800e4d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e2b8:	4b56      	ldr	r3, [pc, #344]	; (800e414 <pvPortMalloc+0x178>)
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	4013      	ands	r3, r2
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	f040 808e 	bne.w	800e3e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d01d      	beq.n	800e308 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e2cc:	2208      	movs	r2, #8
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f003 0307 	and.w	r3, r3, #7
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d014      	beq.n	800e308 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f023 0307 	bic.w	r3, r3, #7
 800e2e4:	3308      	adds	r3, #8
 800e2e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f003 0307 	and.w	r3, r3, #7
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d00a      	beq.n	800e308 <pvPortMalloc+0x6c>
	__asm volatile
 800e2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f6:	f383 8811 	msr	BASEPRI, r3
 800e2fa:	f3bf 8f6f 	isb	sy
 800e2fe:	f3bf 8f4f 	dsb	sy
 800e302:	617b      	str	r3, [r7, #20]
}
 800e304:	bf00      	nop
 800e306:	e7fe      	b.n	800e306 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d069      	beq.n	800e3e2 <pvPortMalloc+0x146>
 800e30e:	4b42      	ldr	r3, [pc, #264]	; (800e418 <pvPortMalloc+0x17c>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	429a      	cmp	r2, r3
 800e316:	d864      	bhi.n	800e3e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e318:	4b40      	ldr	r3, [pc, #256]	; (800e41c <pvPortMalloc+0x180>)
 800e31a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e31c:	4b3f      	ldr	r3, [pc, #252]	; (800e41c <pvPortMalloc+0x180>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e322:	e004      	b.n	800e32e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e326:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	687a      	ldr	r2, [r7, #4]
 800e334:	429a      	cmp	r2, r3
 800e336:	d903      	bls.n	800e340 <pvPortMalloc+0xa4>
 800e338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d1f1      	bne.n	800e324 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e340:	4b33      	ldr	r3, [pc, #204]	; (800e410 <pvPortMalloc+0x174>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e346:	429a      	cmp	r2, r3
 800e348:	d04b      	beq.n	800e3e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e34a:	6a3b      	ldr	r3, [r7, #32]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2208      	movs	r2, #8
 800e350:	4413      	add	r3, r2
 800e352:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	6a3b      	ldr	r3, [r7, #32]
 800e35a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35e:	685a      	ldr	r2, [r3, #4]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	1ad2      	subs	r2, r2, r3
 800e364:	2308      	movs	r3, #8
 800e366:	005b      	lsls	r3, r3, #1
 800e368:	429a      	cmp	r2, r3
 800e36a:	d91f      	bls.n	800e3ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e36c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4413      	add	r3, r2
 800e372:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e374:	69bb      	ldr	r3, [r7, #24]
 800e376:	f003 0307 	and.w	r3, r3, #7
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00a      	beq.n	800e394 <pvPortMalloc+0xf8>
	__asm volatile
 800e37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e382:	f383 8811 	msr	BASEPRI, r3
 800e386:	f3bf 8f6f 	isb	sy
 800e38a:	f3bf 8f4f 	dsb	sy
 800e38e:	613b      	str	r3, [r7, #16]
}
 800e390:	bf00      	nop
 800e392:	e7fe      	b.n	800e392 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e396:	685a      	ldr	r2, [r3, #4]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	1ad2      	subs	r2, r2, r3
 800e39c:	69bb      	ldr	r3, [r7, #24]
 800e39e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e3a6:	69b8      	ldr	r0, [r7, #24]
 800e3a8:	f000 f8f8 	bl	800e59c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e3ac:	4b1a      	ldr	r3, [pc, #104]	; (800e418 <pvPortMalloc+0x17c>)
 800e3ae:	681a      	ldr	r2, [r3, #0]
 800e3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	1ad3      	subs	r3, r2, r3
 800e3b6:	4a18      	ldr	r2, [pc, #96]	; (800e418 <pvPortMalloc+0x17c>)
 800e3b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e3ba:	4b17      	ldr	r3, [pc, #92]	; (800e418 <pvPortMalloc+0x17c>)
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	4b18      	ldr	r3, [pc, #96]	; (800e420 <pvPortMalloc+0x184>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d203      	bcs.n	800e3ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e3c6:	4b14      	ldr	r3, [pc, #80]	; (800e418 <pvPortMalloc+0x17c>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4a15      	ldr	r2, [pc, #84]	; (800e420 <pvPortMalloc+0x184>)
 800e3cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d0:	685a      	ldr	r2, [r3, #4]
 800e3d2:	4b10      	ldr	r3, [pc, #64]	; (800e414 <pvPortMalloc+0x178>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	431a      	orrs	r2, r3
 800e3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3de:	2200      	movs	r2, #0
 800e3e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e3e2:	f7fe fc61 	bl	800cca8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	f003 0307 	and.w	r3, r3, #7
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d00a      	beq.n	800e406 <pvPortMalloc+0x16a>
	__asm volatile
 800e3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f4:	f383 8811 	msr	BASEPRI, r3
 800e3f8:	f3bf 8f6f 	isb	sy
 800e3fc:	f3bf 8f4f 	dsb	sy
 800e400:	60fb      	str	r3, [r7, #12]
}
 800e402:	bf00      	nop
 800e404:	e7fe      	b.n	800e404 <pvPortMalloc+0x168>
	return pvReturn;
 800e406:	69fb      	ldr	r3, [r7, #28]
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3728      	adds	r7, #40	; 0x28
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	20002248 	.word	0x20002248
 800e414:	20002254 	.word	0x20002254
 800e418:	2000224c 	.word	0x2000224c
 800e41c:	20002240 	.word	0x20002240
 800e420:	20002250 	.word	0x20002250

0800e424 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b086      	sub	sp, #24
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d048      	beq.n	800e4c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e436:	2308      	movs	r3, #8
 800e438:	425b      	negs	r3, r3
 800e43a:	697a      	ldr	r2, [r7, #20]
 800e43c:	4413      	add	r3, r2
 800e43e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	685a      	ldr	r2, [r3, #4]
 800e448:	4b21      	ldr	r3, [pc, #132]	; (800e4d0 <vPortFree+0xac>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4013      	ands	r3, r2
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10a      	bne.n	800e468 <vPortFree+0x44>
	__asm volatile
 800e452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e456:	f383 8811 	msr	BASEPRI, r3
 800e45a:	f3bf 8f6f 	isb	sy
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	60fb      	str	r3, [r7, #12]
}
 800e464:	bf00      	nop
 800e466:	e7fe      	b.n	800e466 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d00a      	beq.n	800e486 <vPortFree+0x62>
	__asm volatile
 800e470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e474:	f383 8811 	msr	BASEPRI, r3
 800e478:	f3bf 8f6f 	isb	sy
 800e47c:	f3bf 8f4f 	dsb	sy
 800e480:	60bb      	str	r3, [r7, #8]
}
 800e482:	bf00      	nop
 800e484:	e7fe      	b.n	800e484 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	685a      	ldr	r2, [r3, #4]
 800e48a:	4b11      	ldr	r3, [pc, #68]	; (800e4d0 <vPortFree+0xac>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	4013      	ands	r3, r2
 800e490:	2b00      	cmp	r3, #0
 800e492:	d019      	beq.n	800e4c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d115      	bne.n	800e4c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	685a      	ldr	r2, [r3, #4]
 800e4a0:	4b0b      	ldr	r3, [pc, #44]	; (800e4d0 <vPortFree+0xac>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	43db      	mvns	r3, r3
 800e4a6:	401a      	ands	r2, r3
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e4ac:	f7fe fbee 	bl	800cc8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	685a      	ldr	r2, [r3, #4]
 800e4b4:	4b07      	ldr	r3, [pc, #28]	; (800e4d4 <vPortFree+0xb0>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4413      	add	r3, r2
 800e4ba:	4a06      	ldr	r2, [pc, #24]	; (800e4d4 <vPortFree+0xb0>)
 800e4bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e4be:	6938      	ldr	r0, [r7, #16]
 800e4c0:	f000 f86c 	bl	800e59c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e4c4:	f7fe fbf0 	bl	800cca8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e4c8:	bf00      	nop
 800e4ca:	3718      	adds	r7, #24
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	20002254 	.word	0x20002254
 800e4d4:	2000224c 	.word	0x2000224c

0800e4d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e4de:	f241 339c 	movw	r3, #5020	; 0x139c
 800e4e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e4e4:	4b27      	ldr	r3, [pc, #156]	; (800e584 <prvHeapInit+0xac>)
 800e4e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f003 0307 	and.w	r3, r3, #7
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00c      	beq.n	800e50c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	3307      	adds	r3, #7
 800e4f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f023 0307 	bic.w	r3, r3, #7
 800e4fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e500:	68ba      	ldr	r2, [r7, #8]
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	1ad3      	subs	r3, r2, r3
 800e506:	4a1f      	ldr	r2, [pc, #124]	; (800e584 <prvHeapInit+0xac>)
 800e508:	4413      	add	r3, r2
 800e50a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e510:	4a1d      	ldr	r2, [pc, #116]	; (800e588 <prvHeapInit+0xb0>)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e516:	4b1c      	ldr	r3, [pc, #112]	; (800e588 <prvHeapInit+0xb0>)
 800e518:	2200      	movs	r2, #0
 800e51a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	68ba      	ldr	r2, [r7, #8]
 800e520:	4413      	add	r3, r2
 800e522:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e524:	2208      	movs	r2, #8
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	1a9b      	subs	r3, r3, r2
 800e52a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f023 0307 	bic.w	r3, r3, #7
 800e532:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	4a15      	ldr	r2, [pc, #84]	; (800e58c <prvHeapInit+0xb4>)
 800e538:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e53a:	4b14      	ldr	r3, [pc, #80]	; (800e58c <prvHeapInit+0xb4>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2200      	movs	r2, #0
 800e540:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e542:	4b12      	ldr	r3, [pc, #72]	; (800e58c <prvHeapInit+0xb4>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	2200      	movs	r2, #0
 800e548:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	68fa      	ldr	r2, [r7, #12]
 800e552:	1ad2      	subs	r2, r2, r3
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e558:	4b0c      	ldr	r3, [pc, #48]	; (800e58c <prvHeapInit+0xb4>)
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	4a0a      	ldr	r2, [pc, #40]	; (800e590 <prvHeapInit+0xb8>)
 800e566:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	4a09      	ldr	r2, [pc, #36]	; (800e594 <prvHeapInit+0xbc>)
 800e56e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e570:	4b09      	ldr	r3, [pc, #36]	; (800e598 <prvHeapInit+0xc0>)
 800e572:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e576:	601a      	str	r2, [r3, #0]
}
 800e578:	bf00      	nop
 800e57a:	3714      	adds	r7, #20
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bc80      	pop	{r7}
 800e580:	4770      	bx	lr
 800e582:	bf00      	nop
 800e584:	20000ea4 	.word	0x20000ea4
 800e588:	20002240 	.word	0x20002240
 800e58c:	20002248 	.word	0x20002248
 800e590:	20002250 	.word	0x20002250
 800e594:	2000224c 	.word	0x2000224c
 800e598:	20002254 	.word	0x20002254

0800e59c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e59c:	b480      	push	{r7}
 800e59e:	b085      	sub	sp, #20
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e5a4:	4b27      	ldr	r3, [pc, #156]	; (800e644 <prvInsertBlockIntoFreeList+0xa8>)
 800e5a6:	60fb      	str	r3, [r7, #12]
 800e5a8:	e002      	b.n	800e5b0 <prvInsertBlockIntoFreeList+0x14>
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	60fb      	str	r3, [r7, #12]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d8f7      	bhi.n	800e5aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d108      	bne.n	800e5de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	685a      	ldr	r2, [r3, #4]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	441a      	add	r2, r3
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	68ba      	ldr	r2, [r7, #8]
 800e5e8:	441a      	add	r2, r3
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d118      	bne.n	800e624 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681a      	ldr	r2, [r3, #0]
 800e5f6:	4b14      	ldr	r3, [pc, #80]	; (800e648 <prvInsertBlockIntoFreeList+0xac>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d00d      	beq.n	800e61a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	685a      	ldr	r2, [r3, #4]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	441a      	add	r2, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	601a      	str	r2, [r3, #0]
 800e618:	e008      	b.n	800e62c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e61a:	4b0b      	ldr	r3, [pc, #44]	; (800e648 <prvInsertBlockIntoFreeList+0xac>)
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	601a      	str	r2, [r3, #0]
 800e622:	e003      	b.n	800e62c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e62c:	68fa      	ldr	r2, [r7, #12]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	429a      	cmp	r2, r3
 800e632:	d002      	beq.n	800e63a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e63a:	bf00      	nop
 800e63c:	3714      	adds	r7, #20
 800e63e:	46bd      	mov	sp, r7
 800e640:	bc80      	pop	{r7}
 800e642:	4770      	bx	lr
 800e644:	20002240 	.word	0x20002240
 800e648:	20002248 	.word	0x20002248

0800e64c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e650:	2200      	movs	r2, #0
 800e652:	4912      	ldr	r1, [pc, #72]	; (800e69c <MX_USB_DEVICE_Init+0x50>)
 800e654:	4812      	ldr	r0, [pc, #72]	; (800e6a0 <MX_USB_DEVICE_Init+0x54>)
 800e656:	f7fb fdfa 	bl	800a24e <USBD_Init>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d001      	beq.n	800e664 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e660:	f7f2 fd4e 	bl	8001100 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e664:	490f      	ldr	r1, [pc, #60]	; (800e6a4 <MX_USB_DEVICE_Init+0x58>)
 800e666:	480e      	ldr	r0, [pc, #56]	; (800e6a0 <MX_USB_DEVICE_Init+0x54>)
 800e668:	f7fb fe1c 	bl	800a2a4 <USBD_RegisterClass>
 800e66c:	4603      	mov	r3, r0
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d001      	beq.n	800e676 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e672:	f7f2 fd45 	bl	8001100 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e676:	490c      	ldr	r1, [pc, #48]	; (800e6a8 <MX_USB_DEVICE_Init+0x5c>)
 800e678:	4809      	ldr	r0, [pc, #36]	; (800e6a0 <MX_USB_DEVICE_Init+0x54>)
 800e67a:	f7fb fd4d 	bl	800a118 <USBD_CDC_RegisterInterface>
 800e67e:	4603      	mov	r3, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	d001      	beq.n	800e688 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e684:	f7f2 fd3c 	bl	8001100 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e688:	4805      	ldr	r0, [pc, #20]	; (800e6a0 <MX_USB_DEVICE_Init+0x54>)
 800e68a:	f7fb fe24 	bl	800a2d6 <USBD_Start>
 800e68e:	4603      	mov	r3, r0
 800e690:	2b00      	cmp	r3, #0
 800e692:	d001      	beq.n	800e698 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e694:	f7f2 fd34 	bl	8001100 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e698:	bf00      	nop
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	20000140 	.word	0x20000140
 800e6a0:	20002718 	.word	0x20002718
 800e6a4:	20000028 	.word	0x20000028
 800e6a8:	20000130 	.word	0x20000130

0800e6ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	4905      	ldr	r1, [pc, #20]	; (800e6c8 <CDC_Init_FS+0x1c>)
 800e6b4:	4805      	ldr	r0, [pc, #20]	; (800e6cc <CDC_Init_FS+0x20>)
 800e6b6:	f7fb fd45 	bl	800a144 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e6ba:	4905      	ldr	r1, [pc, #20]	; (800e6d0 <CDC_Init_FS+0x24>)
 800e6bc:	4803      	ldr	r0, [pc, #12]	; (800e6cc <CDC_Init_FS+0x20>)
 800e6be:	f7fb fd5a 	bl	800a176 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e6c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	20002dc4 	.word	0x20002dc4
 800e6cc:	20002718 	.word	0x20002718
 800e6d0:	200029dc 	.word	0x200029dc

0800e6d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e6d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bc80      	pop	{r7}
 800e6e0:	4770      	bx	lr
	...

0800e6e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b083      	sub	sp, #12
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	6039      	str	r1, [r7, #0]
 800e6ee:	71fb      	strb	r3, [r7, #7]
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e6f4:	79fb      	ldrb	r3, [r7, #7]
 800e6f6:	2b23      	cmp	r3, #35	; 0x23
 800e6f8:	d84a      	bhi.n	800e790 <CDC_Control_FS+0xac>
 800e6fa:	a201      	add	r2, pc, #4	; (adr r2, 800e700 <CDC_Control_FS+0x1c>)
 800e6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e700:	0800e791 	.word	0x0800e791
 800e704:	0800e791 	.word	0x0800e791
 800e708:	0800e791 	.word	0x0800e791
 800e70c:	0800e791 	.word	0x0800e791
 800e710:	0800e791 	.word	0x0800e791
 800e714:	0800e791 	.word	0x0800e791
 800e718:	0800e791 	.word	0x0800e791
 800e71c:	0800e791 	.word	0x0800e791
 800e720:	0800e791 	.word	0x0800e791
 800e724:	0800e791 	.word	0x0800e791
 800e728:	0800e791 	.word	0x0800e791
 800e72c:	0800e791 	.word	0x0800e791
 800e730:	0800e791 	.word	0x0800e791
 800e734:	0800e791 	.word	0x0800e791
 800e738:	0800e791 	.word	0x0800e791
 800e73c:	0800e791 	.word	0x0800e791
 800e740:	0800e791 	.word	0x0800e791
 800e744:	0800e791 	.word	0x0800e791
 800e748:	0800e791 	.word	0x0800e791
 800e74c:	0800e791 	.word	0x0800e791
 800e750:	0800e791 	.word	0x0800e791
 800e754:	0800e791 	.word	0x0800e791
 800e758:	0800e791 	.word	0x0800e791
 800e75c:	0800e791 	.word	0x0800e791
 800e760:	0800e791 	.word	0x0800e791
 800e764:	0800e791 	.word	0x0800e791
 800e768:	0800e791 	.word	0x0800e791
 800e76c:	0800e791 	.word	0x0800e791
 800e770:	0800e791 	.word	0x0800e791
 800e774:	0800e791 	.word	0x0800e791
 800e778:	0800e791 	.word	0x0800e791
 800e77c:	0800e791 	.word	0x0800e791
 800e780:	0800e791 	.word	0x0800e791
 800e784:	0800e791 	.word	0x0800e791
 800e788:	0800e791 	.word	0x0800e791
 800e78c:	0800e791 	.word	0x0800e791
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e790:	bf00      	nop
  }

  return (USBD_OK);
 800e792:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e794:	4618      	mov	r0, r3
 800e796:	370c      	adds	r7, #12
 800e798:	46bd      	mov	sp, r7
 800e79a:	bc80      	pop	{r7}
 800e79c:	4770      	bx	lr
 800e79e:	bf00      	nop

0800e7a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	60fb      	str	r3, [r7, #12]
 800e7b2:	e00c      	b.n	800e7ce <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800e7b4:	4b14      	ldr	r3, [pc, #80]	; (800e808 <CDC_Receive_FS+0x68>)
 800e7b6:	6818      	ldr	r0, [r3, #0]
 800e7b8:	687a      	ldr	r2, [r7, #4]
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	18d1      	adds	r1, r2, r3
 800e7be:	f107 0208 	add.w	r2, r7, #8
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	f7fd fbaa 	bl	800bf1c <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	60fb      	str	r3, [r7, #12]
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	68fa      	ldr	r2, [r7, #12]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d3ed      	bcc.n	800e7b4 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e7d8:	6879      	ldr	r1, [r7, #4]
 800e7da:	480c      	ldr	r0, [pc, #48]	; (800e80c <CDC_Receive_FS+0x6c>)
 800e7dc:	f7fb fccb 	bl	800a176 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e7e0:	480a      	ldr	r0, [pc, #40]	; (800e80c <CDC_Receive_FS+0x6c>)
 800e7e2:	f7fb fd0a 	bl	800a1fa <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d007      	beq.n	800e7fc <CDC_Receive_FS+0x5c>
 800e7ec:	4b08      	ldr	r3, [pc, #32]	; (800e810 <CDC_Receive_FS+0x70>)
 800e7ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7f2:	601a      	str	r2, [r3, #0]
 800e7f4:	f3bf 8f4f 	dsb	sy
 800e7f8:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800e7fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3710      	adds	r7, #16
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	20002494 	.word	0x20002494
 800e80c:	20002718 	.word	0x20002718
 800e810:	e000ed04 	.word	0xe000ed04

0800e814 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	460b      	mov	r3, r1
 800e81e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e820:	2300      	movs	r3, #0
 800e822:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e824:	4b0d      	ldr	r3, [pc, #52]	; (800e85c <CDC_Transmit_FS+0x48>)
 800e826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e82a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e832:	2b00      	cmp	r3, #0
 800e834:	d001      	beq.n	800e83a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e836:	2301      	movs	r3, #1
 800e838:	e00b      	b.n	800e852 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e83a:	887b      	ldrh	r3, [r7, #2]
 800e83c:	461a      	mov	r2, r3
 800e83e:	6879      	ldr	r1, [r7, #4]
 800e840:	4806      	ldr	r0, [pc, #24]	; (800e85c <CDC_Transmit_FS+0x48>)
 800e842:	f7fb fc7f 	bl	800a144 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e846:	4805      	ldr	r0, [pc, #20]	; (800e85c <CDC_Transmit_FS+0x48>)
 800e848:	f7fb fca8 	bl	800a19c <USBD_CDC_TransmitPacket>
 800e84c:	4603      	mov	r3, r0
 800e84e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e850:	7bfb      	ldrb	r3, [r7, #15]
}
 800e852:	4618      	mov	r0, r3
 800e854:	3710      	adds	r7, #16
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	20002718 	.word	0x20002718

0800e860 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e860:	b480      	push	{r7}
 800e862:	b083      	sub	sp, #12
 800e864:	af00      	add	r7, sp, #0
 800e866:	4603      	mov	r3, r0
 800e868:	6039      	str	r1, [r7, #0]
 800e86a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	2212      	movs	r2, #18
 800e870:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e872:	4b03      	ldr	r3, [pc, #12]	; (800e880 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e874:	4618      	mov	r0, r3
 800e876:	370c      	adds	r7, #12
 800e878:	46bd      	mov	sp, r7
 800e87a:	bc80      	pop	{r7}
 800e87c:	4770      	bx	lr
 800e87e:	bf00      	nop
 800e880:	2000015c 	.word	0x2000015c

0800e884 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e884:	b480      	push	{r7}
 800e886:	b083      	sub	sp, #12
 800e888:	af00      	add	r7, sp, #0
 800e88a:	4603      	mov	r3, r0
 800e88c:	6039      	str	r1, [r7, #0]
 800e88e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	2204      	movs	r2, #4
 800e894:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e896:	4b03      	ldr	r3, [pc, #12]	; (800e8a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e898:	4618      	mov	r0, r3
 800e89a:	370c      	adds	r7, #12
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bc80      	pop	{r7}
 800e8a0:	4770      	bx	lr
 800e8a2:	bf00      	nop
 800e8a4:	20000170 	.word	0x20000170

0800e8a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	6039      	str	r1, [r7, #0]
 800e8b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e8b4:	79fb      	ldrb	r3, [r7, #7]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d105      	bne.n	800e8c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e8ba:	683a      	ldr	r2, [r7, #0]
 800e8bc:	4907      	ldr	r1, [pc, #28]	; (800e8dc <USBD_FS_ProductStrDescriptor+0x34>)
 800e8be:	4808      	ldr	r0, [pc, #32]	; (800e8e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e8c0:	f7fc fc82 	bl	800b1c8 <USBD_GetString>
 800e8c4:	e004      	b.n	800e8d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e8c6:	683a      	ldr	r2, [r7, #0]
 800e8c8:	4904      	ldr	r1, [pc, #16]	; (800e8dc <USBD_FS_ProductStrDescriptor+0x34>)
 800e8ca:	4805      	ldr	r0, [pc, #20]	; (800e8e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e8cc:	f7fc fc7c 	bl	800b1c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e8d0:	4b02      	ldr	r3, [pc, #8]	; (800e8dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3708      	adds	r7, #8
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
 800e8da:	bf00      	nop
 800e8dc:	200031ac 	.word	0x200031ac
 800e8e0:	0800f2e4 	.word	0x0800f2e4

0800e8e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	6039      	str	r1, [r7, #0]
 800e8ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e8f0:	683a      	ldr	r2, [r7, #0]
 800e8f2:	4904      	ldr	r1, [pc, #16]	; (800e904 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e8f4:	4804      	ldr	r0, [pc, #16]	; (800e908 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e8f6:	f7fc fc67 	bl	800b1c8 <USBD_GetString>
  return USBD_StrDesc;
 800e8fa:	4b02      	ldr	r3, [pc, #8]	; (800e904 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3708      	adds	r7, #8
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}
 800e904:	200031ac 	.word	0x200031ac
 800e908:	0800f2f0 	.word	0x0800f2f0

0800e90c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	4603      	mov	r3, r0
 800e914:	6039      	str	r1, [r7, #0]
 800e916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	221a      	movs	r2, #26
 800e91c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e91e:	f000 f843 	bl	800e9a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e922:	4b02      	ldr	r3, [pc, #8]	; (800e92c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e924:	4618      	mov	r0, r3
 800e926:	3708      	adds	r7, #8
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	20000174 	.word	0x20000174

0800e930 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	4603      	mov	r3, r0
 800e938:	6039      	str	r1, [r7, #0]
 800e93a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e93c:	79fb      	ldrb	r3, [r7, #7]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d105      	bne.n	800e94e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e942:	683a      	ldr	r2, [r7, #0]
 800e944:	4907      	ldr	r1, [pc, #28]	; (800e964 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e946:	4808      	ldr	r0, [pc, #32]	; (800e968 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e948:	f7fc fc3e 	bl	800b1c8 <USBD_GetString>
 800e94c:	e004      	b.n	800e958 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e94e:	683a      	ldr	r2, [r7, #0]
 800e950:	4904      	ldr	r1, [pc, #16]	; (800e964 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e952:	4805      	ldr	r0, [pc, #20]	; (800e968 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e954:	f7fc fc38 	bl	800b1c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e958:	4b02      	ldr	r3, [pc, #8]	; (800e964 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3708      	adds	r7, #8
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	200031ac 	.word	0x200031ac
 800e968:	0800f304 	.word	0x0800f304

0800e96c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	4603      	mov	r3, r0
 800e974:	6039      	str	r1, [r7, #0]
 800e976:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e978:	79fb      	ldrb	r3, [r7, #7]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d105      	bne.n	800e98a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e97e:	683a      	ldr	r2, [r7, #0]
 800e980:	4907      	ldr	r1, [pc, #28]	; (800e9a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e982:	4808      	ldr	r0, [pc, #32]	; (800e9a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e984:	f7fc fc20 	bl	800b1c8 <USBD_GetString>
 800e988:	e004      	b.n	800e994 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e98a:	683a      	ldr	r2, [r7, #0]
 800e98c:	4904      	ldr	r1, [pc, #16]	; (800e9a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e98e:	4805      	ldr	r0, [pc, #20]	; (800e9a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e990:	f7fc fc1a 	bl	800b1c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e994:	4b02      	ldr	r3, [pc, #8]	; (800e9a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e996:	4618      	mov	r0, r3
 800e998:	3708      	adds	r7, #8
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	200031ac 	.word	0x200031ac
 800e9a4:	0800f310 	.word	0x0800f310

0800e9a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e9ae:	4b0f      	ldr	r3, [pc, #60]	; (800e9ec <Get_SerialNum+0x44>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e9b4:	4b0e      	ldr	r3, [pc, #56]	; (800e9f0 <Get_SerialNum+0x48>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e9ba:	4b0e      	ldr	r3, [pc, #56]	; (800e9f4 <Get_SerialNum+0x4c>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e9c0:	68fa      	ldr	r2, [r7, #12]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d009      	beq.n	800e9e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e9ce:	2208      	movs	r2, #8
 800e9d0:	4909      	ldr	r1, [pc, #36]	; (800e9f8 <Get_SerialNum+0x50>)
 800e9d2:	68f8      	ldr	r0, [r7, #12]
 800e9d4:	f000 f814 	bl	800ea00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e9d8:	2204      	movs	r2, #4
 800e9da:	4908      	ldr	r1, [pc, #32]	; (800e9fc <Get_SerialNum+0x54>)
 800e9dc:	68b8      	ldr	r0, [r7, #8]
 800e9de:	f000 f80f 	bl	800ea00 <IntToUnicode>
  }
}
 800e9e2:	bf00      	nop
 800e9e4:	3710      	adds	r7, #16
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	1ffff7e8 	.word	0x1ffff7e8
 800e9f0:	1ffff7ec 	.word	0x1ffff7ec
 800e9f4:	1ffff7f0 	.word	0x1ffff7f0
 800e9f8:	20000176 	.word	0x20000176
 800e9fc:	20000186 	.word	0x20000186

0800ea00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b087      	sub	sp, #28
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ea12:	2300      	movs	r3, #0
 800ea14:	75fb      	strb	r3, [r7, #23]
 800ea16:	e027      	b.n	800ea68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	0f1b      	lsrs	r3, r3, #28
 800ea1c:	2b09      	cmp	r3, #9
 800ea1e:	d80b      	bhi.n	800ea38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	0f1b      	lsrs	r3, r3, #28
 800ea24:	b2da      	uxtb	r2, r3
 800ea26:	7dfb      	ldrb	r3, [r7, #23]
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	440b      	add	r3, r1
 800ea30:	3230      	adds	r2, #48	; 0x30
 800ea32:	b2d2      	uxtb	r2, r2
 800ea34:	701a      	strb	r2, [r3, #0]
 800ea36:	e00a      	b.n	800ea4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	0f1b      	lsrs	r3, r3, #28
 800ea3c:	b2da      	uxtb	r2, r3
 800ea3e:	7dfb      	ldrb	r3, [r7, #23]
 800ea40:	005b      	lsls	r3, r3, #1
 800ea42:	4619      	mov	r1, r3
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	440b      	add	r3, r1
 800ea48:	3237      	adds	r2, #55	; 0x37
 800ea4a:	b2d2      	uxtb	r2, r2
 800ea4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	011b      	lsls	r3, r3, #4
 800ea52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ea54:	7dfb      	ldrb	r3, [r7, #23]
 800ea56:	005b      	lsls	r3, r3, #1
 800ea58:	3301      	adds	r3, #1
 800ea5a:	68ba      	ldr	r2, [r7, #8]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	2200      	movs	r2, #0
 800ea60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ea62:	7dfb      	ldrb	r3, [r7, #23]
 800ea64:	3301      	adds	r3, #1
 800ea66:	75fb      	strb	r3, [r7, #23]
 800ea68:	7dfa      	ldrb	r2, [r7, #23]
 800ea6a:	79fb      	ldrb	r3, [r7, #7]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d3d3      	bcc.n	800ea18 <IntToUnicode+0x18>
  }
}
 800ea70:	bf00      	nop
 800ea72:	bf00      	nop
 800ea74:	371c      	adds	r7, #28
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bc80      	pop	{r7}
 800ea7a:	4770      	bx	lr

0800ea7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4a0d      	ldr	r2, [pc, #52]	; (800eac0 <HAL_PCD_MspInit+0x44>)
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	d113      	bne.n	800eab6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ea8e:	4b0d      	ldr	r3, [pc, #52]	; (800eac4 <HAL_PCD_MspInit+0x48>)
 800ea90:	69db      	ldr	r3, [r3, #28]
 800ea92:	4a0c      	ldr	r2, [pc, #48]	; (800eac4 <HAL_PCD_MspInit+0x48>)
 800ea94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ea98:	61d3      	str	r3, [r2, #28]
 800ea9a:	4b0a      	ldr	r3, [pc, #40]	; (800eac4 <HAL_PCD_MspInit+0x48>)
 800ea9c:	69db      	ldr	r3, [r3, #28]
 800ea9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eaa2:	60fb      	str	r3, [r7, #12]
 800eaa4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	2105      	movs	r1, #5
 800eaaa:	2014      	movs	r0, #20
 800eaac:	f7f4 fddd 	bl	800366a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800eab0:	2014      	movs	r0, #20
 800eab2:	f7f4 fdf6 	bl	80036a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800eab6:	bf00      	nop
 800eab8:	3710      	adds	r7, #16
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	40005c00 	.word	0x40005c00
 800eac4:	40021000 	.word	0x40021000

0800eac8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800eadc:	4619      	mov	r1, r3
 800eade:	4610      	mov	r0, r2
 800eae0:	f7fb fc41 	bl	800a366 <USBD_LL_SetupStage>
}
 800eae4:	bf00      	nop
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800eafe:	78fa      	ldrb	r2, [r7, #3]
 800eb00:	6879      	ldr	r1, [r7, #4]
 800eb02:	4613      	mov	r3, r2
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	4413      	add	r3, r2
 800eb08:	00db      	lsls	r3, r3, #3
 800eb0a:	440b      	add	r3, r1
 800eb0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	78fb      	ldrb	r3, [r7, #3]
 800eb14:	4619      	mov	r1, r3
 800eb16:	f7fb fc73 	bl	800a400 <USBD_LL_DataOutStage>
}
 800eb1a:	bf00      	nop
 800eb1c:	3708      	adds	r7, #8
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b082      	sub	sp, #8
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	6078      	str	r0, [r7, #4]
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800eb34:	78fa      	ldrb	r2, [r7, #3]
 800eb36:	6879      	ldr	r1, [r7, #4]
 800eb38:	4613      	mov	r3, r2
 800eb3a:	009b      	lsls	r3, r3, #2
 800eb3c:	4413      	add	r3, r2
 800eb3e:	00db      	lsls	r3, r3, #3
 800eb40:	440b      	add	r3, r1
 800eb42:	333c      	adds	r3, #60	; 0x3c
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	78fb      	ldrb	r3, [r7, #3]
 800eb48:	4619      	mov	r1, r3
 800eb4a:	f7fb fcca 	bl	800a4e2 <USBD_LL_DataInStage>
}
 800eb4e:	bf00      	nop
 800eb50:	3708      	adds	r7, #8
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}

0800eb56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb56:	b580      	push	{r7, lr}
 800eb58:	b082      	sub	sp, #8
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7fb fdda 	bl	800a71e <USBD_LL_SOF>
}
 800eb6a:	bf00      	nop
 800eb6c:	3708      	adds	r7, #8
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}

0800eb72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb72:	b580      	push	{r7, lr}
 800eb74:	b084      	sub	sp, #16
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	689b      	ldr	r3, [r3, #8]
 800eb82:	2b02      	cmp	r3, #2
 800eb84:	d001      	beq.n	800eb8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800eb86:	f7f2 fabb 	bl	8001100 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800eb90:	7bfa      	ldrb	r2, [r7, #15]
 800eb92:	4611      	mov	r1, r2
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7fb fd8a 	bl	800a6ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800eba0:	4618      	mov	r0, r3
 800eba2:	f7fb fd43 	bl	800a62c <USBD_LL_Reset>
}
 800eba6:	bf00      	nop
 800eba8:	3710      	adds	r7, #16
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
	...

0800ebb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7fb fd84 	bl	800a6cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	699b      	ldr	r3, [r3, #24]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d005      	beq.n	800ebd8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ebcc:	4b04      	ldr	r3, [pc, #16]	; (800ebe0 <HAL_PCD_SuspendCallback+0x30>)
 800ebce:	691b      	ldr	r3, [r3, #16]
 800ebd0:	4a03      	ldr	r2, [pc, #12]	; (800ebe0 <HAL_PCD_SuspendCallback+0x30>)
 800ebd2:	f043 0306 	orr.w	r3, r3, #6
 800ebd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ebd8:	bf00      	nop
 800ebda:	3708      	adds	r7, #8
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	e000ed00 	.word	0xe000ed00

0800ebe4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7fb fd7e 	bl	800a6f4 <USBD_LL_Resume>
}
 800ebf8:	bf00      	nop
 800ebfa:	3708      	adds	r7, #8
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}

0800ec00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ec08:	4a28      	ldr	r2, [pc, #160]	; (800ecac <USBD_LL_Init+0xac>)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	4a26      	ldr	r2, [pc, #152]	; (800ecac <USBD_LL_Init+0xac>)
 800ec14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ec18:	4b24      	ldr	r3, [pc, #144]	; (800ecac <USBD_LL_Init+0xac>)
 800ec1a:	4a25      	ldr	r2, [pc, #148]	; (800ecb0 <USBD_LL_Init+0xb0>)
 800ec1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ec1e:	4b23      	ldr	r3, [pc, #140]	; (800ecac <USBD_LL_Init+0xac>)
 800ec20:	2208      	movs	r2, #8
 800ec22:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ec24:	4b21      	ldr	r3, [pc, #132]	; (800ecac <USBD_LL_Init+0xac>)
 800ec26:	2202      	movs	r2, #2
 800ec28:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ec2a:	4b20      	ldr	r3, [pc, #128]	; (800ecac <USBD_LL_Init+0xac>)
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ec30:	4b1e      	ldr	r3, [pc, #120]	; (800ecac <USBD_LL_Init+0xac>)
 800ec32:	2200      	movs	r2, #0
 800ec34:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ec36:	4b1d      	ldr	r3, [pc, #116]	; (800ecac <USBD_LL_Init+0xac>)
 800ec38:	2200      	movs	r2, #0
 800ec3a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ec3c:	481b      	ldr	r0, [pc, #108]	; (800ecac <USBD_LL_Init+0xac>)
 800ec3e:	f7f5 ff2d 	bl	8004a9c <HAL_PCD_Init>
 800ec42:	4603      	mov	r3, r0
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d001      	beq.n	800ec4c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ec48:	f7f2 fa5a 	bl	8001100 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ec52:	2318      	movs	r3, #24
 800ec54:	2200      	movs	r2, #0
 800ec56:	2100      	movs	r1, #0
 800ec58:	f7f7 fba3 	bl	80063a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ec62:	2358      	movs	r3, #88	; 0x58
 800ec64:	2200      	movs	r2, #0
 800ec66:	2180      	movs	r1, #128	; 0x80
 800ec68:	f7f7 fb9b 	bl	80063a2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ec72:	23c0      	movs	r3, #192	; 0xc0
 800ec74:	2200      	movs	r2, #0
 800ec76:	2181      	movs	r1, #129	; 0x81
 800ec78:	f7f7 fb93 	bl	80063a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ec82:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ec86:	2200      	movs	r2, #0
 800ec88:	2101      	movs	r1, #1
 800ec8a:	f7f7 fb8a 	bl	80063a2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ec94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec98:	2200      	movs	r2, #0
 800ec9a:	2182      	movs	r1, #130	; 0x82
 800ec9c:	f7f7 fb81 	bl	80063a2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800eca0:	2300      	movs	r3, #0
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3708      	adds	r7, #8
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	200033ac 	.word	0x200033ac
 800ecb0:	40005c00 	.word	0x40005c00

0800ecb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b084      	sub	sp, #16
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7f5 fff1 	bl	8004cb2 <HAL_PCD_Start>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecd4:	7bfb      	ldrb	r3, [r7, #15]
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f000 f94e 	bl	800ef78 <USBD_Get_USB_Status>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ece0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3710      	adds	r7, #16
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}

0800ecea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ecea:	b580      	push	{r7, lr}
 800ecec:	b084      	sub	sp, #16
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
 800ecf2:	4608      	mov	r0, r1
 800ecf4:	4611      	mov	r1, r2
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	70fb      	strb	r3, [r7, #3]
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	70bb      	strb	r3, [r7, #2]
 800ed00:	4613      	mov	r3, r2
 800ed02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed04:	2300      	movs	r3, #0
 800ed06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ed12:	78bb      	ldrb	r3, [r7, #2]
 800ed14:	883a      	ldrh	r2, [r7, #0]
 800ed16:	78f9      	ldrb	r1, [r7, #3]
 800ed18:	f7f6 f96b 	bl	8004ff2 <HAL_PCD_EP_Open>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed20:	7bfb      	ldrb	r3, [r7, #15]
 800ed22:	4618      	mov	r0, r3
 800ed24:	f000 f928 	bl	800ef78 <USBD_Get_USB_Status>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3710      	adds	r7, #16
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}

0800ed36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed36:	b580      	push	{r7, lr}
 800ed38:	b084      	sub	sp, #16
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
 800ed3e:	460b      	mov	r3, r1
 800ed40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed42:	2300      	movs	r3, #0
 800ed44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed46:	2300      	movs	r3, #0
 800ed48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed50:	78fa      	ldrb	r2, [r7, #3]
 800ed52:	4611      	mov	r1, r2
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7f6 f9b2 	bl	80050be <HAL_PCD_EP_Close>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed5e:	7bfb      	ldrb	r3, [r7, #15]
 800ed60:	4618      	mov	r0, r3
 800ed62:	f000 f909 	bl	800ef78 <USBD_Get_USB_Status>
 800ed66:	4603      	mov	r3, r0
 800ed68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed80:	2300      	movs	r3, #0
 800ed82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed84:	2300      	movs	r3, #0
 800ed86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed8e:	78fa      	ldrb	r2, [r7, #3]
 800ed90:	4611      	mov	r1, r2
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7f6 fa72 	bl	800527c <HAL_PCD_EP_SetStall>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed9c:	7bfb      	ldrb	r3, [r7, #15]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f000 f8ea 	bl	800ef78 <USBD_Get_USB_Status>
 800eda4:	4603      	mov	r3, r0
 800eda6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eda8:	7bbb      	ldrb	r3, [r7, #14]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3710      	adds	r7, #16
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edb2:	b580      	push	{r7, lr}
 800edb4:	b084      	sub	sp, #16
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
 800edba:	460b      	mov	r3, r1
 800edbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edbe:	2300      	movs	r3, #0
 800edc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edc2:	2300      	movs	r3, #0
 800edc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800edcc:	78fa      	ldrb	r2, [r7, #3]
 800edce:	4611      	mov	r1, r2
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7f6 fab3 	bl	800533c <HAL_PCD_EP_ClrStall>
 800edd6:	4603      	mov	r3, r0
 800edd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edda:	7bfb      	ldrb	r3, [r7, #15]
 800eddc:	4618      	mov	r0, r3
 800edde:	f000 f8cb 	bl	800ef78 <USBD_Get_USB_Status>
 800ede2:	4603      	mov	r3, r0
 800ede4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ede6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3710      	adds	r7, #16
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b085      	sub	sp, #20
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	460b      	mov	r3, r1
 800edfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ee04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	da0c      	bge.n	800ee26 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ee0c:	78fb      	ldrb	r3, [r7, #3]
 800ee0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee12:	68f9      	ldr	r1, [r7, #12]
 800ee14:	1c5a      	adds	r2, r3, #1
 800ee16:	4613      	mov	r3, r2
 800ee18:	009b      	lsls	r3, r3, #2
 800ee1a:	4413      	add	r3, r2
 800ee1c:	00db      	lsls	r3, r3, #3
 800ee1e:	440b      	add	r3, r1
 800ee20:	3302      	adds	r3, #2
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	e00b      	b.n	800ee3e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ee26:	78fb      	ldrb	r3, [r7, #3]
 800ee28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ee2c:	68f9      	ldr	r1, [r7, #12]
 800ee2e:	4613      	mov	r3, r2
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	4413      	add	r3, r2
 800ee34:	00db      	lsls	r3, r3, #3
 800ee36:	440b      	add	r3, r1
 800ee38:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ee3c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3714      	adds	r7, #20
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bc80      	pop	{r7}
 800ee46:	4770      	bx	lr

0800ee48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b084      	sub	sp, #16
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	460b      	mov	r3, r1
 800ee52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee54:	2300      	movs	r3, #0
 800ee56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee62:	78fa      	ldrb	r2, [r7, #3]
 800ee64:	4611      	mov	r1, r2
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7f6 f89e 	bl	8004fa8 <HAL_PCD_SetAddress>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee70:	7bfb      	ldrb	r3, [r7, #15]
 800ee72:	4618      	mov	r0, r3
 800ee74:	f000 f880 	bl	800ef78 <USBD_Get_USB_Status>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3710      	adds	r7, #16
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}

0800ee86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ee86:	b580      	push	{r7, lr}
 800ee88:	b086      	sub	sp, #24
 800ee8a:	af00      	add	r7, sp, #0
 800ee8c:	60f8      	str	r0, [r7, #12]
 800ee8e:	607a      	str	r2, [r7, #4]
 800ee90:	461a      	mov	r2, r3
 800ee92:	460b      	mov	r3, r1
 800ee94:	72fb      	strb	r3, [r7, #11]
 800ee96:	4613      	mov	r3, r2
 800ee98:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800eea8:	893b      	ldrh	r3, [r7, #8]
 800eeaa:	7af9      	ldrb	r1, [r7, #11]
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	f7f6 f9a2 	bl	80051f6 <HAL_PCD_EP_Transmit>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eeb6:	7dfb      	ldrb	r3, [r7, #23]
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f000 f85d 	bl	800ef78 <USBD_Get_USB_Status>
 800eebe:	4603      	mov	r3, r0
 800eec0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eec2:	7dbb      	ldrb	r3, [r7, #22]
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3718      	adds	r7, #24
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b086      	sub	sp, #24
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	607a      	str	r2, [r7, #4]
 800eed6:	461a      	mov	r2, r3
 800eed8:	460b      	mov	r3, r1
 800eeda:	72fb      	strb	r3, [r7, #11]
 800eedc:	4613      	mov	r3, r2
 800eede:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eee0:	2300      	movs	r3, #0
 800eee2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eee4:	2300      	movs	r3, #0
 800eee6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800eeee:	893b      	ldrh	r3, [r7, #8]
 800eef0:	7af9      	ldrb	r1, [r7, #11]
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	f7f6 f92b 	bl	800514e <HAL_PCD_EP_Receive>
 800eef8:	4603      	mov	r3, r0
 800eefa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eefc:	7dfb      	ldrb	r3, [r7, #23]
 800eefe:	4618      	mov	r0, r3
 800ef00:	f000 f83a 	bl	800ef78 <USBD_Get_USB_Status>
 800ef04:	4603      	mov	r3, r0
 800ef06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ef08:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3718      	adds	r7, #24
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef12:	b580      	push	{r7, lr}
 800ef14:	b082      	sub	sp, #8
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef24:	78fa      	ldrb	r2, [r7, #3]
 800ef26:	4611      	mov	r1, r2
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7f6 f94d 	bl	80051c8 <HAL_PCD_EP_GetRxCount>
 800ef2e:	4603      	mov	r3, r0
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3708      	adds	r7, #8
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b083      	sub	sp, #12
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ef40:	4b02      	ldr	r3, [pc, #8]	; (800ef4c <USBD_static_malloc+0x14>)
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	370c      	adds	r7, #12
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bc80      	pop	{r7}
 800ef4a:	4770      	bx	lr
 800ef4c:	20002258 	.word	0x20002258

0800ef50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b083      	sub	sp, #12
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]

}
 800ef58:	bf00      	nop
 800ef5a:	370c      	adds	r7, #12
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bc80      	pop	{r7}
 800ef60:	4770      	bx	lr

0800ef62 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef62:	b480      	push	{r7}
 800ef64:	b083      	sub	sp, #12
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
 800ef6a:	460b      	mov	r3, r1
 800ef6c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ef6e:	bf00      	nop
 800ef70:	370c      	adds	r7, #12
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bc80      	pop	{r7}
 800ef76:	4770      	bx	lr

0800ef78 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b085      	sub	sp, #20
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	4603      	mov	r3, r0
 800ef80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef82:	2300      	movs	r3, #0
 800ef84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ef86:	79fb      	ldrb	r3, [r7, #7]
 800ef88:	2b03      	cmp	r3, #3
 800ef8a:	d817      	bhi.n	800efbc <USBD_Get_USB_Status+0x44>
 800ef8c:	a201      	add	r2, pc, #4	; (adr r2, 800ef94 <USBD_Get_USB_Status+0x1c>)
 800ef8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef92:	bf00      	nop
 800ef94:	0800efa5 	.word	0x0800efa5
 800ef98:	0800efab 	.word	0x0800efab
 800ef9c:	0800efb1 	.word	0x0800efb1
 800efa0:	0800efb7 	.word	0x0800efb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800efa4:	2300      	movs	r3, #0
 800efa6:	73fb      	strb	r3, [r7, #15]
    break;
 800efa8:	e00b      	b.n	800efc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800efaa:	2302      	movs	r3, #2
 800efac:	73fb      	strb	r3, [r7, #15]
    break;
 800efae:	e008      	b.n	800efc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800efb0:	2301      	movs	r3, #1
 800efb2:	73fb      	strb	r3, [r7, #15]
    break;
 800efb4:	e005      	b.n	800efc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800efb6:	2302      	movs	r3, #2
 800efb8:	73fb      	strb	r3, [r7, #15]
    break;
 800efba:	e002      	b.n	800efc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800efbc:	2302      	movs	r3, #2
 800efbe:	73fb      	strb	r3, [r7, #15]
    break;
 800efc0:	bf00      	nop
  }
  return usb_status;
 800efc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3714      	adds	r7, #20
 800efc8:	46bd      	mov	sp, r7
 800efca:	bc80      	pop	{r7}
 800efcc:	4770      	bx	lr
 800efce:	bf00      	nop

0800efd0 <__libc_init_array>:
 800efd0:	b570      	push	{r4, r5, r6, lr}
 800efd2:	2600      	movs	r6, #0
 800efd4:	4d0c      	ldr	r5, [pc, #48]	; (800f008 <__libc_init_array+0x38>)
 800efd6:	4c0d      	ldr	r4, [pc, #52]	; (800f00c <__libc_init_array+0x3c>)
 800efd8:	1b64      	subs	r4, r4, r5
 800efda:	10a4      	asrs	r4, r4, #2
 800efdc:	42a6      	cmp	r6, r4
 800efde:	d109      	bne.n	800eff4 <__libc_init_array+0x24>
 800efe0:	f000 f862 	bl	800f0a8 <_init>
 800efe4:	2600      	movs	r6, #0
 800efe6:	4d0a      	ldr	r5, [pc, #40]	; (800f010 <__libc_init_array+0x40>)
 800efe8:	4c0a      	ldr	r4, [pc, #40]	; (800f014 <__libc_init_array+0x44>)
 800efea:	1b64      	subs	r4, r4, r5
 800efec:	10a4      	asrs	r4, r4, #2
 800efee:	42a6      	cmp	r6, r4
 800eff0:	d105      	bne.n	800effe <__libc_init_array+0x2e>
 800eff2:	bd70      	pop	{r4, r5, r6, pc}
 800eff4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eff8:	4798      	blx	r3
 800effa:	3601      	adds	r6, #1
 800effc:	e7ee      	b.n	800efdc <__libc_init_array+0xc>
 800effe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f002:	4798      	blx	r3
 800f004:	3601      	adds	r6, #1
 800f006:	e7f2      	b.n	800efee <__libc_init_array+0x1e>
 800f008:	0800f8e0 	.word	0x0800f8e0
 800f00c:	0800f8e0 	.word	0x0800f8e0
 800f010:	0800f8e0 	.word	0x0800f8e0
 800f014:	0800f8e4 	.word	0x0800f8e4

0800f018 <memcpy>:
 800f018:	440a      	add	r2, r1
 800f01a:	4291      	cmp	r1, r2
 800f01c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f020:	d100      	bne.n	800f024 <memcpy+0xc>
 800f022:	4770      	bx	lr
 800f024:	b510      	push	{r4, lr}
 800f026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f02a:	4291      	cmp	r1, r2
 800f02c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f030:	d1f9      	bne.n	800f026 <memcpy+0xe>
 800f032:	bd10      	pop	{r4, pc}

0800f034 <memmove>:
 800f034:	4288      	cmp	r0, r1
 800f036:	b510      	push	{r4, lr}
 800f038:	eb01 0402 	add.w	r4, r1, r2
 800f03c:	d902      	bls.n	800f044 <memmove+0x10>
 800f03e:	4284      	cmp	r4, r0
 800f040:	4623      	mov	r3, r4
 800f042:	d807      	bhi.n	800f054 <memmove+0x20>
 800f044:	1e43      	subs	r3, r0, #1
 800f046:	42a1      	cmp	r1, r4
 800f048:	d008      	beq.n	800f05c <memmove+0x28>
 800f04a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f04e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f052:	e7f8      	b.n	800f046 <memmove+0x12>
 800f054:	4601      	mov	r1, r0
 800f056:	4402      	add	r2, r0
 800f058:	428a      	cmp	r2, r1
 800f05a:	d100      	bne.n	800f05e <memmove+0x2a>
 800f05c:	bd10      	pop	{r4, pc}
 800f05e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f066:	e7f7      	b.n	800f058 <memmove+0x24>

0800f068 <memset>:
 800f068:	4603      	mov	r3, r0
 800f06a:	4402      	add	r2, r0
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d100      	bne.n	800f072 <memset+0xa>
 800f070:	4770      	bx	lr
 800f072:	f803 1b01 	strb.w	r1, [r3], #1
 800f076:	e7f9      	b.n	800f06c <memset+0x4>

0800f078 <strstr>:
 800f078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f07a:	780c      	ldrb	r4, [r1, #0]
 800f07c:	b164      	cbz	r4, 800f098 <strstr+0x20>
 800f07e:	4603      	mov	r3, r0
 800f080:	781a      	ldrb	r2, [r3, #0]
 800f082:	4618      	mov	r0, r3
 800f084:	1c5e      	adds	r6, r3, #1
 800f086:	b90a      	cbnz	r2, 800f08c <strstr+0x14>
 800f088:	4610      	mov	r0, r2
 800f08a:	e005      	b.n	800f098 <strstr+0x20>
 800f08c:	4294      	cmp	r4, r2
 800f08e:	d108      	bne.n	800f0a2 <strstr+0x2a>
 800f090:	460d      	mov	r5, r1
 800f092:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800f096:	b902      	cbnz	r2, 800f09a <strstr+0x22>
 800f098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f09a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800f09e:	4297      	cmp	r7, r2
 800f0a0:	d0f7      	beq.n	800f092 <strstr+0x1a>
 800f0a2:	4633      	mov	r3, r6
 800f0a4:	e7ec      	b.n	800f080 <strstr+0x8>
	...

0800f0a8 <_init>:
 800f0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0aa:	bf00      	nop
 800f0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0ae:	bc08      	pop	{r3}
 800f0b0:	469e      	mov	lr, r3
 800f0b2:	4770      	bx	lr

0800f0b4 <_fini>:
 800f0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0b6:	bf00      	nop
 800f0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0ba:	bc08      	pop	{r3}
 800f0bc:	469e      	mov	lr, r3
 800f0be:	4770      	bx	lr
