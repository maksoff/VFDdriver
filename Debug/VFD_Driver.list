
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eca0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  0800edb0  0800edb0  0001edb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f520  0800f520  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800f520  0800f520  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f520  0800f520  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f520  0800f520  0001f520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f524  0800f524  0001f524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800f528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034b0  20000190  0800f6b8  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003640  0800f6b8  00023640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fdbf  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006462  00000000  00000000  0004ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020a8  00000000  00000000  000563e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e60  00000000  00000000  00058488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f3f9  00000000  00000000  0005a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028ff3  00000000  00000000  000796e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eacf  00000000  00000000  000a26d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001411a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008780  00000000  00000000  001411f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000190 	.word	0x20000190
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ed98 	.word	0x0800ed98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000194 	.word	0x20000194
 800014c:	0800ed98 	.word	0x0800ed98

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <d3231_get_time>:

#define D3231_ADDRESS (0b1101000 << 1)
uint8_t d3231_mem[19];

uint8_t * d3231_get_time(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	b084      	sub	sp, #16
 8000168:	af04      	add	r7, sp, #16
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 800016a:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <d3231_get_time+0x44>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	f04f 31ff 	mov.w	r1, #4294967295
 8000172:	4618      	mov	r0, r3
 8000174:	f00b fe00 	bl	800bd78 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(&hi2c1, D3231_ADDRESS, 0, 1, d3231_mem, 3, 10);
 8000178:	230a      	movs	r3, #10
 800017a:	9302      	str	r3, [sp, #8]
 800017c:	2303      	movs	r3, #3
 800017e:	9301      	str	r3, [sp, #4]
 8000180:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <d3231_get_time+0x48>)
 8000182:	9300      	str	r3, [sp, #0]
 8000184:	2301      	movs	r3, #1
 8000186:	2200      	movs	r2, #0
 8000188:	21d0      	movs	r1, #208	; 0xd0
 800018a:	4809      	ldr	r0, [pc, #36]	; (80001b0 <d3231_get_time+0x4c>)
 800018c:	f003 f81e 	bl	80031cc <HAL_I2C_Mem_Read>
	xSemaphoreGive(muI2CHandle);
 8000190:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <d3231_get_time+0x44>)
 8000192:	6818      	ldr	r0, [r3, #0]
 8000194:	2300      	movs	r3, #0
 8000196:	2200      	movs	r2, #0
 8000198:	2100      	movs	r1, #0
 800019a:	f00b fb77 	bl	800b88c <xQueueGenericSend>
	return d3231_mem;
 800019e:	4b03      	ldr	r3, [pc, #12]	; (80001ac <d3231_get_time+0x48>)
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	2000248c 	.word	0x2000248c
 80001ac:	20002478 	.word	0x20002478
 80001b0:	200024b0 	.word	0x200024b0

080001b4 <d3231_set>:
//	xSemaphoreGive(muI2CHandle);
//	return d3231_mem;
//}

void d3231_set(uint8_t * arr, bool date)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af04      	add	r7, sp, #16
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	460b      	mov	r3, r1
 80001be:	70fb      	strb	r3, [r7, #3]
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 80001c0:	4b10      	ldr	r3, [pc, #64]	; (8000204 <d3231_set+0x50>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	f04f 31ff 	mov.w	r1, #4294967295
 80001c8:	4618      	mov	r0, r3
 80001ca:	f00b fdd5 	bl	800bd78 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Write(&hi2c1, D3231_ADDRESS, date<<2, 1, arr, 3, 100);
 80001ce:	78fb      	ldrb	r3, [r7, #3]
 80001d0:	b29b      	uxth	r3, r3
 80001d2:	009b      	lsls	r3, r3, #2
 80001d4:	b29a      	uxth	r2, r3
 80001d6:	2364      	movs	r3, #100	; 0x64
 80001d8:	9302      	str	r3, [sp, #8]
 80001da:	2303      	movs	r3, #3
 80001dc:	9301      	str	r3, [sp, #4]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	9300      	str	r3, [sp, #0]
 80001e2:	2301      	movs	r3, #1
 80001e4:	21d0      	movs	r1, #208	; 0xd0
 80001e6:	4808      	ldr	r0, [pc, #32]	; (8000208 <d3231_set+0x54>)
 80001e8:	f002 fef6 	bl	8002fd8 <HAL_I2C_Mem_Write>
	xSemaphoreGive(muI2CHandle);
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <d3231_set+0x50>)
 80001ee:	6818      	ldr	r0, [r3, #0]
 80001f0:	2300      	movs	r3, #0
 80001f2:	2200      	movs	r2, #0
 80001f4:	2100      	movs	r1, #0
 80001f6:	f00b fb49 	bl	800b88c <xQueueGenericSend>
}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	2000248c 	.word	0x2000248c
 8000208:	200024b0 	.word	0x200024b0

0800020c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of muI2C */
  muI2CHandle = osMutexNew(&muI2C_attributes);
 8000210:	4821      	ldr	r0, [pc, #132]	; (8000298 <MX_FREERTOS_Init+0x8c>)
 8000212:	f00a ffab 	bl	800b16c <osMutexNew>
 8000216:	4603      	mov	r3, r0
 8000218:	4a20      	ldr	r2, [pc, #128]	; (800029c <MX_FREERTOS_Init+0x90>)
 800021a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (32, sizeof(uint8_t), &qUSB_rcv_attributes);
 800021c:	4a20      	ldr	r2, [pc, #128]	; (80002a0 <MX_FREERTOS_Init+0x94>)
 800021e:	2101      	movs	r1, #1
 8000220:	2020      	movs	r0, #32
 8000222:	f00b f83d 	bl	800b2a0 <osMessageQueueNew>
 8000226:	4603      	mov	r3, r0
 8000228:	4a1e      	ldr	r2, [pc, #120]	; (80002a4 <MX_FREERTOS_Init+0x98>)
 800022a:	6013      	str	r3, [r2, #0]

  /* creation of qVFD */
  qVFDHandle = osMessageQueueNew (16, sizeof(uint16_t), &qVFD_attributes);
 800022c:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <MX_FREERTOS_Init+0x9c>)
 800022e:	2102      	movs	r1, #2
 8000230:	2010      	movs	r0, #16
 8000232:	f00b f835 	bl	800b2a0 <osMessageQueueNew>
 8000236:	4603      	mov	r3, r0
 8000238:	4a1c      	ldr	r2, [pc, #112]	; (80002ac <MX_FREERTOS_Init+0xa0>)
 800023a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800023c:	4a1c      	ldr	r2, [pc, #112]	; (80002b0 <MX_FREERTOS_Init+0xa4>)
 800023e:	2100      	movs	r1, #0
 8000240:	481c      	ldr	r0, [pc, #112]	; (80002b4 <MX_FREERTOS_Init+0xa8>)
 8000242:	f00a febb 	bl	800afbc <osThreadNew>
 8000246:	4603      	mov	r3, r0
 8000248:	4a1b      	ldr	r2, [pc, #108]	; (80002b8 <MX_FREERTOS_Init+0xac>)
 800024a:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 800024c:	4a1b      	ldr	r2, [pc, #108]	; (80002bc <MX_FREERTOS_Init+0xb0>)
 800024e:	2100      	movs	r1, #0
 8000250:	481b      	ldr	r0, [pc, #108]	; (80002c0 <MX_FREERTOS_Init+0xb4>)
 8000252:	f00a feb3 	bl	800afbc <osThreadNew>
 8000256:	4603      	mov	r3, r0
 8000258:	4a1a      	ldr	r2, [pc, #104]	; (80002c4 <MX_FREERTOS_Init+0xb8>)
 800025a:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 800025c:	4a1a      	ldr	r2, [pc, #104]	; (80002c8 <MX_FREERTOS_Init+0xbc>)
 800025e:	2100      	movs	r1, #0
 8000260:	481a      	ldr	r0, [pc, #104]	; (80002cc <MX_FREERTOS_Init+0xc0>)
 8000262:	f00a feab 	bl	800afbc <osThreadNew>
 8000266:	4603      	mov	r3, r0
 8000268:	4a19      	ldr	r2, [pc, #100]	; (80002d0 <MX_FREERTOS_Init+0xc4>)
 800026a:	6013      	str	r3, [r2, #0]

  /* creation of UARTtask */
  UARTtaskHandle = osThreadNew(StartUARTtask, NULL, &UARTtask_attributes);
 800026c:	4a19      	ldr	r2, [pc, #100]	; (80002d4 <MX_FREERTOS_Init+0xc8>)
 800026e:	2100      	movs	r1, #0
 8000270:	4819      	ldr	r0, [pc, #100]	; (80002d8 <MX_FREERTOS_Init+0xcc>)
 8000272:	f00a fea3 	bl	800afbc <osThreadNew>
 8000276:	4603      	mov	r3, r0
 8000278:	4a18      	ldr	r2, [pc, #96]	; (80002dc <MX_FREERTOS_Init+0xd0>)
 800027a:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(StartEncoder, NULL, &Encoder_attributes);
 800027c:	4a18      	ldr	r2, [pc, #96]	; (80002e0 <MX_FREERTOS_Init+0xd4>)
 800027e:	2100      	movs	r1, #0
 8000280:	4818      	ldr	r0, [pc, #96]	; (80002e4 <MX_FREERTOS_Init+0xd8>)
 8000282:	f00a fe9b 	bl	800afbc <osThreadNew>
 8000286:	4603      	mov	r3, r0
 8000288:	4a17      	ldr	r2, [pc, #92]	; (80002e8 <MX_FREERTOS_Init+0xdc>)
 800028a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <MX_FREERTOS_Init+0x98>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a16      	ldr	r2, [pc, #88]	; (80002ec <MX_FREERTOS_Init+0xe0>)
 8000292:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	0800f0e4 	.word	0x0800f0e4
 800029c:	2000248c 	.word	0x2000248c
 80002a0:	0800f0b4 	.word	0x0800f0b4
 80002a4:	200024a8 	.word	0x200024a8
 80002a8:	0800f0cc 	.word	0x0800f0cc
 80002ac:	20002490 	.word	0x20002490
 80002b0:	0800f000 	.word	0x0800f000
 80002b4:	080002f1 	.word	0x080002f1
 80002b8:	20002498 	.word	0x20002498
 80002bc:	0800f024 	.word	0x0800f024
 80002c0:	08000329 	.word	0x08000329
 80002c4:	2000249c 	.word	0x2000249c
 80002c8:	0800f048 	.word	0x0800f048
 80002cc:	0800036d 	.word	0x0800036d
 80002d0:	200024a4 	.word	0x200024a4
 80002d4:	0800f06c 	.word	0x0800f06c
 80002d8:	080003b5 	.word	0x080003b5
 80002dc:	200024a0 	.word	0x200024a0
 80002e0:	0800f090 	.word	0x0800f090
 80002e4:	080003f1 	.word	0x080003f1
 80002e8:	200024ac 	.word	0x200024ac
 80002ec:	20002494 	.word	0x20002494

080002f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80002f8:	f00e f838 	bl	800e36c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000302:	4808      	ldr	r0, [pc, #32]	; (8000324 <StartDefaultTask+0x34>)
 8000304:	f002 fcd1 	bl	8002caa <HAL_GPIO_WritePin>
  osDelay(10);
 8000308:	200a      	movs	r0, #10
 800030a:	f00a ff01 	bl	800b110 <osDelay>
  init_microrl();
 800030e:	f001 fd9d 	bl	8001e4c <init_microrl>
  set_CDC_ready(); // allow to send
 8000312:	f001 fdcd 	bl	8001eb0 <set_CDC_ready>

  //vTaskDelete(NULL);
  /* Infinite loop */
  for(;;)
  {
    process_encoder();
 8000316:	f000 fcaf 	bl	8000c78 <process_encoder>
    osDelay(1);
 800031a:	2001      	movs	r0, #1
 800031c:	f00a fef8 	bl	800b110 <osDelay>
    process_encoder();
 8000320:	e7f9      	b.n	8000316 <StartDefaultTask+0x26>
 8000322:	bf00      	nop
 8000324:	40010800 	.word	0x40010800

08000328 <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 8000330:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000334:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 8000336:	f00c fb0b 	bl	800c950 <xTaskGetTickCount>
 800033a:	4603      	mov	r3, r0
 800033c:	60bb      	str	r3, [r7, #8]

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800033e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000342:	4808      	ldr	r0, [pc, #32]	; (8000364 <StartLEDheartbeat+0x3c>)
 8000344:	f002 fcc9 	bl	8002cda <HAL_GPIO_TogglePin>
		tick_counter++;
 8000348:	4b07      	ldr	r3, [pc, #28]	; (8000368 <StartLEDheartbeat+0x40>)
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	3301      	adds	r3, #1
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <StartLEDheartbeat+0x40>)
 8000352:	801a      	strh	r2, [r3, #0]

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000354:	f107 0308 	add.w	r3, r7, #8
 8000358:	68f9      	ldr	r1, [r7, #12]
 800035a:	4618      	mov	r0, r3
 800035c:	f00c f934 	bl	800c5c8 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000360:	e7e9      	b.n	8000336 <StartLEDheartbeat+0xe>
 8000362:	bf00      	nop
 8000364:	40011000 	.word	0x40011000
 8000368:	200001ae 	.word	0x200001ae

0800036c <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 8000374:	2000      	movs	r0, #0
 8000376:	f00c fded 	bl	800cf54 <uxTaskGetStackHighWaterMark>
 800037a:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000380:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <StartUSB_rcv+0x44>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f107 010f 	add.w	r1, r7, #15
 8000388:	f04f 32ff 	mov.w	r2, #4294967295
 800038c:	4618      	mov	r0, r3
 800038e:	f00b fc13 	bl	800bbb8 <xQueueReceive>
	  microrl_print_char(buf);
 8000392:	7bfb      	ldrb	r3, [r7, #15]
 8000394:	4618      	mov	r0, r3
 8000396:	f001 fab7 	bl	8001908 <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 800039a:	2000      	movs	r0, #0
 800039c:	f00c fdda 	bl	800cf54 <uxTaskGetStackHighWaterMark>
 80003a0:	6138      	str	r0, [r7, #16]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 80003a2:	693a      	ldr	r2, [r7, #16]
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d2ea      	bcs.n	8000380 <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 80003aa:	693b      	ldr	r3, [r7, #16]
 80003ac:	617b      	str	r3, [r7, #20]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80003ae:	e7e7      	b.n	8000380 <StartUSB_rcv+0x14>
 80003b0:	20002494 	.word	0x20002494

080003b4 <StartUARTtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTtask */
void StartUARTtask(void *argument)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  uint8_t data;
  for(;;)
  {
	HAL_UART_Receive_IT(&huart2, &data, 1);
 80003bc:	f107 030f 	add.w	r3, r7, #15
 80003c0:	2201      	movs	r2, #1
 80003c2:	4619      	mov	r1, r3
 80003c4:	4809      	ldr	r0, [pc, #36]	; (80003ec <StartUARTtask+0x38>)
 80003c6:	f006 fb88 	bl	8006ada <HAL_UART_Receive_IT>
	/* Wait to be notified of an interrupt. */
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 80003ca:	f04f 31ff 	mov.w	r1, #4294967295
 80003ce:	2001      	movs	r0, #1
 80003d0:	f00c ffc4 	bl	800d35c <ulTaskNotifyTake>
	if (get_nema())
 80003d4:	f001 fe44 	bl	8002060 <get_nema>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0ee      	beq.n	80003bc <StartUARTtask+0x8>
		CDC_Transmit_FS(&data, 1);
 80003de:	f107 030f 	add.w	r3, r7, #15
 80003e2:	2101      	movs	r1, #1
 80003e4:	4618      	mov	r0, r3
 80003e6:	f00e f8a5 	bl	800e534 <CDC_Transmit_FS>
	HAL_UART_Receive_IT(&huart2, &data, 1);
 80003ea:	e7e7      	b.n	80003bc <StartUARTtask+0x8>
 80003ec:	20002638 	.word	0x20002638

080003f0 <StartEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoder */
void StartEncoder(void *argument)
{
 80003f0:	b5b0      	push	{r4, r5, r7, lr}
 80003f2:	b0ac      	sub	sp, #176	; 0xb0
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]

	static bool invert = true;
	static bool released = true;


  osDelay(500);
 80003f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003fc:	f00a fe88 	bl	800b110 <osDelay>
  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 8000400:	2201      	movs	r2, #1
 8000402:	2120      	movs	r1, #32
 8000404:	48c5      	ldr	r0, [pc, #788]	; (800071c <StartEncoder+0x32c>)
 8000406:	f002 fc50 	bl	8002caa <HAL_GPIO_WritePin>
  union VFD {
	  uint8_t arr2[11][3];
	  uint8_t arr1[11*3];
  } vfd;

  for (int i = 0; i < sizeof(vfd.arr1); i++)
 800040a:	2300      	movs	r3, #0
 800040c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000410:	e00b      	b.n	800042a <StartEncoder+0x3a>
  {
	  vfd.arr1[i] = 0xFF;
 8000412:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800041a:	4413      	add	r3, r2
 800041c:	22ff      	movs	r2, #255	; 0xff
 800041e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000424:	3301      	adds	r3, #1
 8000426:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800042a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800042e:	2b20      	cmp	r3, #32
 8000430:	d9ef      	bls.n	8000412 <StartEncoder+0x22>
  }
  uint8_t data;


  data = 0b01000000; // command 2, write to Display port
 8000432:	2340      	movs	r3, #64	; 0x40
 8000434:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000438:	2200      	movs	r2, #0
 800043a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800043e:	48b7      	ldr	r0, [pc, #732]	; (800071c <StartEncoder+0x32c>)
 8000440:	f002 fc33 	bl	8002caa <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000444:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000448:	f04f 33ff 	mov.w	r3, #4294967295
 800044c:	2201      	movs	r2, #1
 800044e:	48b4      	ldr	r0, [pc, #720]	; (8000720 <StartEncoder+0x330>)
 8000450:	f005 feca 	bl	80061e8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000454:	2201      	movs	r2, #1
 8000456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800045a:	48b0      	ldr	r0, [pc, #704]	; (800071c <StartEncoder+0x32c>)
 800045c:	f002 fc25 	bl	8002caa <HAL_GPIO_WritePin>
  osDelay(10);
 8000460:	200a      	movs	r0, #10
 8000462:	f00a fe55 	bl	800b110 <osDelay>
  data = 0b11000000; // command 3, set address to 0
 8000466:	23c0      	movs	r3, #192	; 0xc0
 8000468:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000472:	48aa      	ldr	r0, [pc, #680]	; (800071c <StartEncoder+0x32c>)
 8000474:	f002 fc19 	bl	8002caa <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000478:	f107 0143 	add.w	r1, r7, #67	; 0x43
 800047c:	f04f 33ff 	mov.w	r3, #4294967295
 8000480:	2201      	movs	r2, #1
 8000482:	48a7      	ldr	r0, [pc, #668]	; (8000720 <StartEncoder+0x330>)
 8000484:	f005 feb0 	bl	80061e8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000488:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800048c:	f04f 33ff 	mov.w	r3, #4294967295
 8000490:	2221      	movs	r2, #33	; 0x21
 8000492:	48a3      	ldr	r0, [pc, #652]	; (8000720 <StartEncoder+0x330>)
 8000494:	f005 fea8 	bl	80061e8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049e:	489f      	ldr	r0, [pc, #636]	; (800071c <StartEncoder+0x32c>)
 80004a0:	f002 fc03 	bl	8002caa <HAL_GPIO_WritePin>
  osDelay(10);
 80004a4:	200a      	movs	r0, #10
 80004a6:	f00a fe33 	bl	800b110 <osDelay>
  // init display, 11 digits 17 segments
  data = 0b00000111; // command 1, 11 digits 17 segments
 80004aa:	2307      	movs	r3, #7
 80004ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b6:	4899      	ldr	r0, [pc, #612]	; (800071c <StartEncoder+0x32c>)
 80004b8:	f002 fbf7 	bl	8002caa <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004bc:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80004c0:	f04f 33ff 	mov.w	r3, #4294967295
 80004c4:	2201      	movs	r2, #1
 80004c6:	4896      	ldr	r0, [pc, #600]	; (8000720 <StartEncoder+0x330>)
 80004c8:	f005 fe8e 	bl	80061e8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d2:	4892      	ldr	r0, [pc, #584]	; (800071c <StartEncoder+0x32c>)
 80004d4:	f002 fbe9 	bl	8002caa <HAL_GPIO_WritePin>
  osDelay(10);
 80004d8:	200a      	movs	r0, #10
 80004da:	f00a fe19 	bl	800b110 <osDelay>

  for (uint8_t i = 0; i <= 0b111; i++)
 80004de:	2300      	movs	r3, #0
 80004e0:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 80004e4:	e02d      	b.n	8000542 <StartEncoder+0x152>
  {
	  data = 0b10000000; // command 4
 80004e6:	2380      	movs	r3, #128	; 0x80
 80004e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  data |= 1<<3; // enable/disable display
 80004ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80004f0:	f043 0308 	orr.w	r3, r3, #8
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  data |= i; // set brightness
 80004fa:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80004fe:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000502:	4313      	orrs	r3, r2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000510:	4882      	ldr	r0, [pc, #520]	; (800071c <StartEncoder+0x32c>)
 8000512:	f002 fbca 	bl	8002caa <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000516:	f107 0143 	add.w	r1, r7, #67	; 0x43
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
 800051e:	2201      	movs	r2, #1
 8000520:	487f      	ldr	r0, [pc, #508]	; (8000720 <StartEncoder+0x330>)
 8000522:	f005 fe61 	bl	80061e8 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000526:	2201      	movs	r2, #1
 8000528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800052c:	487b      	ldr	r0, [pc, #492]	; (800071c <StartEncoder+0x32c>)
 800052e:	f002 fbbc 	bl	8002caa <HAL_GPIO_WritePin>
	  osDelay(250);
 8000532:	20fa      	movs	r0, #250	; 0xfa
 8000534:	f00a fdec 	bl	800b110 <osDelay>
  for (uint8_t i = 0; i <= 0b111; i++)
 8000538:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800053c:	3301      	adds	r3, #1
 800053e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8000542:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000546:	2b07      	cmp	r3, #7
 8000548:	d9cd      	bls.n	80004e6 <StartEncoder+0xf6>
  }



  for (int i = 0; i < 11; i++)
 800054a:	2300      	movs	r3, #0
 800054c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000550:	e041      	b.n	80005d6 <StartEncoder+0x1e6>
  {
	  for (int b = 0; b < 3; b++) // erasing from right to left
 8000552:	2300      	movs	r3, #0
 8000554:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000558:	e012      	b.n	8000580 <StartEncoder+0x190>
	  {
		  vfd.arr2[i][b] = 0;
 800055a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800055e:	4613      	mov	r3, r2
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	4413      	add	r3, r2
 8000564:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000568:	441a      	add	r2, r3
 800056a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800056e:	4413      	add	r3, r2
 8000570:	3b6c      	subs	r3, #108	; 0x6c
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
	  for (int b = 0; b < 3; b++) // erasing from right to left
 8000576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800057a:	3301      	adds	r3, #1
 800057c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000580:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000584:	2b02      	cmp	r3, #2
 8000586:	dde8      	ble.n	800055a <StartEncoder+0x16a>
	  }
	  data = 0b11000000; // command 3, set address to 0
 8000588:	23c0      	movs	r3, #192	; 0xc0
 800058a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000594:	4861      	ldr	r0, [pc, #388]	; (800071c <StartEncoder+0x32c>)
 8000596:	f002 fb88 	bl	8002caa <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800059a:	f107 0143 	add.w	r1, r7, #67	; 0x43
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	2201      	movs	r2, #1
 80005a4:	485e      	ldr	r0, [pc, #376]	; (8000720 <StartEncoder+0x330>)
 80005a6:	f005 fe1f 	bl	80061e8 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80005aa:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	2221      	movs	r2, #33	; 0x21
 80005b4:	485a      	ldr	r0, [pc, #360]	; (8000720 <StartEncoder+0x330>)
 80005b6:	f005 fe17 	bl	80061e8 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c0:	4856      	ldr	r0, [pc, #344]	; (800071c <StartEncoder+0x32c>)
 80005c2:	f002 fb72 	bl	8002caa <HAL_GPIO_WritePin>
	  osDelay(150);
 80005c6:	2096      	movs	r0, #150	; 0x96
 80005c8:	f00a fda2 	bl	800b110 <osDelay>
  for (int i = 0; i < 11; i++)
 80005cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80005d0:	3301      	adds	r3, #1
 80005d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80005d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80005da:	2b0a      	cmp	r3, #10
 80005dc:	ddb9      	ble.n	8000552 <StartEncoder+0x162>
  }
  osDelay (500);
 80005de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e2:	f00a fd95 	bl	800b110 <osDelay>

  //erase everything... just in case
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80005ec:	e00b      	b.n	8000606 <StartEncoder+0x216>
	  vfd.arr1[a] = 0;
 80005ee:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80005f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80005f6:	4413      	add	r3, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 80005fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000600:	3301      	adds	r3, #1
 8000602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000606:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800060a:	2b20      	cmp	r3, #32
 800060c:	d9ef      	bls.n	80005ee <StartEncoder+0x1fe>


  // fill everything
    for (int j = 1; j < 15; j++)
 800060e:	2301      	movs	r3, #1
 8000610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000614:	e06a      	b.n	80006ec <StartEncoder+0x2fc>
    {
  	  uint32_t temp = 1<<j;
 8000616:	2201      	movs	r2, #1
 8000618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	66bb      	str	r3, [r7, #104]	; 0x68
  	  for (int i = 1; i < 11; i++)
 8000622:	2301      	movs	r3, #1
 8000624:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000628:	e035      	b.n	8000696 <StartEncoder+0x2a6>
  	  {
  		  for (int b = 0; b < 3; b++)
 800062a:	2300      	movs	r3, #0
 800062c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000630:	e028      	b.n	8000684 <StartEncoder+0x294>
  		  {
  			  vfd.arr2[i][b] |= (temp>>(b<<3))&0xFF;
 8000632:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000636:	4613      	mov	r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4413      	add	r3, r2
 800063c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000640:	441a      	add	r2, r3
 8000642:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000646:	4413      	add	r3, r2
 8000648:	3b6c      	subs	r3, #108	; 0x6c
 800064a:	781a      	ldrb	r2, [r3, #0]
 800064c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000654:	fa21 f303 	lsr.w	r3, r1, r3
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4313      	orrs	r3, r2
 800065c:	b2d9      	uxtb	r1, r3
 800065e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000662:	4613      	mov	r3, r2
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	4413      	add	r3, r2
 8000668:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800066c:	441a      	add	r2, r3
 800066e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000672:	4413      	add	r3, r2
 8000674:	3b6c      	subs	r3, #108	; 0x6c
 8000676:	460a      	mov	r2, r1
 8000678:	701a      	strb	r2, [r3, #0]
  		  for (int b = 0; b < 3; b++)
 800067a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800067e:	3301      	adds	r3, #1
 8000680:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000684:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000688:	2b02      	cmp	r3, #2
 800068a:	ddd2      	ble.n	8000632 <StartEncoder+0x242>
  	  for (int i = 1; i < 11; i++)
 800068c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000690:	3301      	adds	r3, #1
 8000692:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000696:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800069a:	2b0a      	cmp	r3, #10
 800069c:	ddc5      	ble.n	800062a <StartEncoder+0x23a>
  		  }
  	  }
  	  data = 0b11000000; // command 3, set address to 0
 800069e:	23c0      	movs	r3, #192	; 0xc0
 80006a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006aa:	481c      	ldr	r0, [pc, #112]	; (800071c <StartEncoder+0x32c>)
 80006ac:	f002 fafd 	bl	8002caa <HAL_GPIO_WritePin>
  	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80006b0:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	2201      	movs	r2, #1
 80006ba:	4819      	ldr	r0, [pc, #100]	; (8000720 <StartEncoder+0x330>)
 80006bc:	f005 fd94 	bl	80061e8 <HAL_SPI_Transmit>
  	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80006c0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	2221      	movs	r2, #33	; 0x21
 80006ca:	4815      	ldr	r0, [pc, #84]	; (8000720 <StartEncoder+0x330>)
 80006cc:	f005 fd8c 	bl	80061e8 <HAL_SPI_Transmit>
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d6:	4811      	ldr	r0, [pc, #68]	; (800071c <StartEncoder+0x32c>)
 80006d8:	f002 fae7 	bl	8002caa <HAL_GPIO_WritePin>
  	  osDelay(100);
 80006dc:	2064      	movs	r0, #100	; 0x64
 80006de:	f00a fd17 	bl	800b110 <osDelay>
    for (int j = 1; j < 15; j++)
 80006e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006e6:	3301      	adds	r3, #1
 80006e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80006ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006f0:	2b0e      	cmp	r3, #14
 80006f2:	dd90      	ble.n	8000616 <StartEncoder+0x226>
    }

    const uint8_t arr[][2] = {{6, 0},
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <StartEncoder+0x334>)
 80006f6:	f107 0410 	add.w	r4, r7, #16
 80006fa:	461d      	mov	r5, r3
 80006fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000708:	682b      	ldr	r3, [r5, #0]
 800070a:	8023      	strh	r3, [r4, #0]
					   {9, 16},
					   {10, 16},
					   {10, 15},
    };

    for (int j = 0; j < sizeof(arr)/2; j++)
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000712:	e078      	b.n	8000806 <StartEncoder+0x416>
    {
		for (int b = 0; b < 3; b++)
 8000714:	2300      	movs	r3, #0
 8000716:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800071a:	e049      	b.n	80007b0 <StartEncoder+0x3c0>
 800071c:	40010c00 	.word	0x40010c00
 8000720:	20002598 	.word	0x20002598
 8000724:	0800ee14 	.word	0x0800ee14
		  vfd.arr2[arr[j][0]][b] |= ((1<<arr[j][1])>>(b<<3))&0xFF;
 8000728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000732:	4413      	add	r3, r2
 8000734:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 8000738:	461a      	mov	r2, r3
 800073a:	4613      	mov	r3, r2
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	4413      	add	r3, r2
 8000740:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000744:	441a      	add	r2, r3
 8000746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800074a:	4413      	add	r3, r2
 800074c:	3b6c      	subs	r3, #108	; 0x6c
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b25a      	sxtb	r2, r3
 8000752:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800075c:	440b      	add	r3, r1
 800075e:	f813 3c9f 	ldrb.w	r3, [r3, #-159]
 8000762:	4619      	mov	r1, r3
 8000764:	2301      	movs	r3, #1
 8000766:	fa03 f101 	lsl.w	r1, r3, r1
 800076a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	fa41 f303 	asr.w	r3, r1, r3
 8000774:	b25b      	sxtb	r3, r3
 8000776:	4313      	orrs	r3, r2
 8000778:	b259      	sxtb	r1, r3
 800077a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000784:	4413      	add	r3, r2
 8000786:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 800078a:	461a      	mov	r2, r3
 800078c:	b2c9      	uxtb	r1, r1
 800078e:	4613      	mov	r3, r2
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	4413      	add	r3, r2
 8000794:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000798:	441a      	add	r2, r3
 800079a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800079e:	4413      	add	r3, r2
 80007a0:	3b6c      	subs	r3, #108	; 0x6c
 80007a2:	460a      	mov	r2, r1
 80007a4:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++)
 80007a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80007aa:	3301      	adds	r3, #1
 80007ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80007b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	ddb7      	ble.n	8000728 <StartEncoder+0x338>
		data = 0b11000000; // command 3, set address to 0
 80007b8:	23c0      	movs	r3, #192	; 0xc0
 80007ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c4:	4896      	ldr	r0, [pc, #600]	; (8000a20 <StartEncoder+0x630>)
 80007c6:	f002 fa70 	bl	8002caa <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80007ca:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	2201      	movs	r2, #1
 80007d4:	4893      	ldr	r0, [pc, #588]	; (8000a24 <StartEncoder+0x634>)
 80007d6:	f005 fd07 	bl	80061e8 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80007da:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
 80007e2:	2221      	movs	r2, #33	; 0x21
 80007e4:	488f      	ldr	r0, [pc, #572]	; (8000a24 <StartEncoder+0x634>)
 80007e6:	f005 fcff 	bl	80061e8 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f0:	488b      	ldr	r0, [pc, #556]	; (8000a20 <StartEncoder+0x630>)
 80007f2:	f002 fa5a 	bl	8002caa <HAL_GPIO_WritePin>
		osDelay(100);
 80007f6:	2064      	movs	r0, #100	; 0x64
 80007f8:	f00a fc8a 	bl	800b110 <osDelay>
    for (int j = 0; j < sizeof(arr)/2; j++)
 80007fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000800:	3301      	adds	r3, #1
 8000802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000806:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800080a:	2b18      	cmp	r3, #24
 800080c:	d982      	bls.n	8000714 <StartEncoder+0x324>
    }

    osDelay(500);
 800080e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000812:	f00a fc7d 	bl	800b110 <osDelay>

    //erase everything... just in case
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000816:	2300      	movs	r3, #0
 8000818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800081c:	e00b      	b.n	8000836 <StartEncoder+0x446>
  	  vfd.arr1[a] = 0;
 800081e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000822:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000826:	4413      	add	r3, r2
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 800082c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000830:	3301      	adds	r3, #1
 8000832:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000836:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800083a:	2b20      	cmp	r3, #32
 800083c:	d9ef      	bls.n	800081e <StartEncoder+0x42e>
//    {
//        vfd.arr2[i+1][0] = vfd_digits[i]&0xFF;
//        vfd.arr2[i+1][1] = (vfd_digits[i]>>8)&0xFF;
//    }

	data = 0b11000000; // command 3, set address to 0
 800083e:	23c0      	movs	r3, #192	; 0xc0
 8000840:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084a:	4875      	ldr	r0, [pc, #468]	; (8000a20 <StartEncoder+0x630>)
 800084c:	f002 fa2d 	bl	8002caa <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000850:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000854:	f04f 33ff 	mov.w	r3, #4294967295
 8000858:	2201      	movs	r2, #1
 800085a:	4872      	ldr	r0, [pc, #456]	; (8000a24 <StartEncoder+0x634>)
 800085c:	f005 fcc4 	bl	80061e8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000860:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000864:	f04f 33ff 	mov.w	r3, #4294967295
 8000868:	2221      	movs	r2, #33	; 0x21
 800086a:	486e      	ldr	r0, [pc, #440]	; (8000a24 <StartEncoder+0x634>)
 800086c:	f005 fcbc 	bl	80061e8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000876:	486a      	ldr	r0, [pc, #424]	; (8000a20 <StartEncoder+0x630>)
 8000878:	f002 fa17 	bl	8002caa <HAL_GPIO_WritePin>
	//osDelay(100);


	const char * demo = "VFD FV651G";
 800087c:	4b6a      	ldr	r3, [pc, #424]	; (8000a28 <StartEncoder+0x638>)
 800087e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	while (*demo)
 8000882:	e012      	b.n	80008aa <StartEncoder+0x4ba>
	{
		uint16_t temp = get_char(*(demo++));
 8000884:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000888:	1c5a      	adds	r2, r3, #1
 800088a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fe1b 	bl	80024cc <get_char>
 8000896:	4603      	mov	r3, r0
 8000898:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 800089a:	4b64      	ldr	r3, [pc, #400]	; (8000a2c <StartEncoder+0x63c>)
 800089c:	6818      	ldr	r0, [r3, #0]
 800089e:	f107 010e 	add.w	r1, r7, #14
 80008a2:	2300      	movs	r3, #0
 80008a4:	2264      	movs	r2, #100	; 0x64
 80008a6:	f00a fff1 	bl	800b88c <xQueueGenericSend>
	while (*demo)
 80008aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1e7      	bne.n	8000884 <StartEncoder+0x494>
  /* Infinite loop */
 // d3231_get_all();
  for(;;)
  {
	  uint16_t buf;
	  if (show_clock)
 80008b4:	4b5e      	ldr	r3, [pc, #376]	; (8000a30 <StartEncoder+0x640>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	f000 809f 	beq.w	80009fc <StartEncoder+0x60c>
	  {
		  uint8_t * time = d3231_get_time();
 80008be:	f7ff fc51 	bl	8000164 <d3231_get_time>
 80008c2:	66f8      	str	r0, [r7, #108]	; 0x6c
		  uint8_t clock [4];
		  clock[0] = time[1] & 0xF;
 80008c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008c6:	3301      	adds	r3, #1
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	723b      	strb	r3, [r7, #8]
		  clock[1] = (time[1] >> 4) & 0xF;
 80008d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008d4:	3301      	adds	r3, #1
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	091b      	lsrs	r3, r3, #4
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	727b      	strb	r3, [r7, #9]
		  clock[2] = time[2] & 0xF;
 80008de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008e0:	3302      	adds	r3, #2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	f003 030f 	and.w	r3, r3, #15
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	72bb      	strb	r3, [r7, #10]
		  clock[3] = (time[2] >> 4) & 0xF;
 80008ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008ee:	3302      	adds	r3, #2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	091b      	lsrs	r3, r3, #4
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	72fb      	strb	r3, [r7, #11]

		  //erase everything...
		  for (int a = 0; a < sizeof(vfd.arr1); a++)
 80008f8:	2300      	movs	r3, #0
 80008fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80008fc:	e008      	b.n	8000910 <StartEncoder+0x520>
			  vfd.arr1[a] = 0;
 80008fe:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000902:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000904:	4413      	add	r3, r2
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
		  for (int a = 0; a < sizeof(vfd.arr1); a++)
 800090a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800090c:	3301      	adds	r3, #1
 800090e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000910:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000912:	2b20      	cmp	r3, #32
 8000914:	d9f3      	bls.n	80008fe <StartEncoder+0x50e>


		  for (int i = 0; i < 4; i++)
 8000916:	2300      	movs	r3, #0
 8000918:	67bb      	str	r3, [r7, #120]	; 0x78
 800091a:	e028      	b.n	800096e <StartEncoder+0x57e>
		  {
			  buf = get_char(clock[i]);
 800091c:	f107 0208 	add.w	r2, r7, #8
 8000920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000922:	4413      	add	r3, r2
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fdd0 	bl	80024cc <get_char>
 800092c:	4603      	mov	r3, r0
 800092e:	81bb      	strh	r3, [r7, #12]

			  vfd.arr2[4+i][0] = buf & 0xFF;
 8000930:	89b9      	ldrh	r1, [r7, #12]
 8000932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000934:	1d1a      	adds	r2, r3, #4
 8000936:	b2c9      	uxtb	r1, r1
 8000938:	4613      	mov	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	4413      	add	r3, r2
 800093e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000942:	4413      	add	r3, r2
 8000944:	3b6c      	subs	r3, #108	; 0x6c
 8000946:	460a      	mov	r2, r1
 8000948:	701a      	strb	r2, [r3, #0]
			  vfd.arr2[4+i][1] = (buf>>8)&0xFF;
 800094a:	89bb      	ldrh	r3, [r7, #12]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	b299      	uxth	r1, r3
 8000950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000952:	1d1a      	adds	r2, r3, #4
 8000954:	b2c9      	uxtb	r1, r1
 8000956:	4613      	mov	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000960:	4413      	add	r3, r2
 8000962:	3b6b      	subs	r3, #107	; 0x6b
 8000964:	460a      	mov	r2, r1
 8000966:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 4; i++)
 8000968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800096a:	3301      	adds	r3, #1
 800096c:	67bb      	str	r3, [r7, #120]	; 0x78
 800096e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000970:	2b03      	cmp	r3, #3
 8000972:	ddd3      	ble.n	800091c <StartEncoder+0x52c>
		  }

		  if ((time[0]&0b1) == 0)
 8000974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d11d      	bne.n	80009bc <StartEncoder+0x5cc>
		  {
				for (int b = 0; b < 3; b++)
 8000980:	2300      	movs	r3, #0
 8000982:	677b      	str	r3, [r7, #116]	; 0x74
 8000984:	e017      	b.n	80009b6 <StartEncoder+0x5c6>
				  vfd.arr2[6][b] |= ((1<<0)>>(b<<3))&0xFF;
 8000986:	f107 0256 	add.w	r2, r7, #86	; 0x56
 800098a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800098c:	4413      	add	r3, r2
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b25a      	sxtb	r2, r3
 8000992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	2101      	movs	r1, #1
 8000998:	fa41 f303 	asr.w	r3, r1, r3
 800099c:	b25b      	sxtb	r3, r3
 800099e:	4313      	orrs	r3, r2
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	b2d9      	uxtb	r1, r3
 80009a4:	f107 0256 	add.w	r2, r7, #86	; 0x56
 80009a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009aa:	4413      	add	r3, r2
 80009ac:	460a      	mov	r2, r1
 80009ae:	701a      	strb	r2, [r3, #0]
				for (int b = 0; b < 3; b++)
 80009b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009b2:	3301      	adds	r3, #1
 80009b4:	677b      	str	r3, [r7, #116]	; 0x74
 80009b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	dde4      	ble.n	8000986 <StartEncoder+0x596>
		  }

		  data = 0b11000000; // command 3, set address to 0
 80009bc:	23c0      	movs	r3, #192	; 0xc0
 80009be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c8:	4815      	ldr	r0, [pc, #84]	; (8000a20 <StartEncoder+0x630>)
 80009ca:	f002 f96e 	bl	8002caa <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80009ce:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	2201      	movs	r2, #1
 80009d8:	4812      	ldr	r0, [pc, #72]	; (8000a24 <StartEncoder+0x634>)
 80009da:	f005 fc05 	bl	80061e8 <HAL_SPI_Transmit>
		  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80009de:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	2221      	movs	r2, #33	; 0x21
 80009e8:	480e      	ldr	r0, [pc, #56]	; (8000a24 <StartEncoder+0x634>)
 80009ea:	f005 fbfd 	bl	80061e8 <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f4:	480a      	ldr	r0, [pc, #40]	; (8000a20 <StartEncoder+0x630>)
 80009f6:	f002 f958 	bl	8002caa <HAL_GPIO_WritePin>
 80009fa:	e072      	b.n	8000ae2 <StartEncoder+0x6f2>


	  }
	  else
	  {
		  if(qVFDHandle && xQueueReceive(qVFDHandle, &buf, 1))
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <StartEncoder+0x63c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d06e      	beq.n	8000ae2 <StartEncoder+0x6f2>
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <StartEncoder+0x63c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f107 010c 	add.w	r1, r7, #12
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f00b f8d2 	bl	800bbb8 <xQueueReceive>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d063      	beq.n	8000ae2 <StartEncoder+0x6f2>
		  {
				for (int i = 10; i > 1; i--)
 8000a1a:	230a      	movs	r3, #10
 8000a1c:	673b      	str	r3, [r7, #112]	; 0x70
 8000a1e:	e034      	b.n	8000a8a <StartEncoder+0x69a>
 8000a20:	40010c00 	.word	0x40010c00
 8000a24:	20002598 	.word	0x20002598
 8000a28:	0800ee08 	.word	0x0800ee08
 8000a2c:	20002490 	.word	0x20002490
 8000a30:	2000000d 	.word	0x2000000d
				{
					vfd.arr2[i][0] = vfd.arr2[i-1][0];
 8000a34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	4613      	mov	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000a42:	4413      	add	r3, r2
 8000a44:	3b6c      	subs	r3, #108	; 0x6c
 8000a46:	7819      	ldrb	r1, [r3, #0]
 8000a48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	4413      	add	r3, r2
 8000a50:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000a54:	4413      	add	r3, r2
 8000a56:	3b6c      	subs	r3, #108	; 0x6c
 8000a58:	460a      	mov	r2, r1
 8000a5a:	701a      	strb	r2, [r3, #0]
					vfd.arr2[i][1] = vfd.arr2[i-1][1];
 8000a5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	4613      	mov	r3, r2
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	4413      	add	r3, r2
 8000a66:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000a6a:	4413      	add	r3, r2
 8000a6c:	3b6b      	subs	r3, #107	; 0x6b
 8000a6e:	7819      	ldrb	r1, [r3, #0]
 8000a70:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000a72:	4613      	mov	r3, r2
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	4413      	add	r3, r2
 8000a78:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000a7c:	4413      	add	r3, r2
 8000a7e:	3b6b      	subs	r3, #107	; 0x6b
 8000a80:	460a      	mov	r2, r1
 8000a82:	701a      	strb	r2, [r3, #0]
				for (int i = 10; i > 1; i--)
 8000a84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a86:	3b01      	subs	r3, #1
 8000a88:	673b      	str	r3, [r7, #112]	; 0x70
 8000a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	dcd1      	bgt.n	8000a34 <StartEncoder+0x644>
				}
				vfd.arr2[1][0] = buf & 0xFF;
 8000a90:	89bb      	ldrh	r3, [r7, #12]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				vfd.arr2[1][1] = (buf>>8)&0xFF;
 8000a98:	89bb      	ldrh	r3, [r7, #12]
 8000a9a:	0a1b      	lsrs	r3, r3, #8
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				data = 0b11000000; // command 3, set address to 0
 8000aa4:	23c0      	movs	r3, #192	; 0xc0
 8000aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab0:	4857      	ldr	r0, [pc, #348]	; (8000c10 <StartEncoder+0x820>)
 8000ab2:	f002 f8fa 	bl	8002caa <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000ab6:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4854      	ldr	r0, [pc, #336]	; (8000c14 <StartEncoder+0x824>)
 8000ac2:	f005 fb91 	bl	80061e8 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000ac6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	2221      	movs	r2, #33	; 0x21
 8000ad0:	4850      	ldr	r0, [pc, #320]	; (8000c14 <StartEncoder+0x824>)
 8000ad2:	f005 fb89 	bl	80061e8 <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000adc:	484c      	ldr	r0, [pc, #304]	; (8000c10 <StartEncoder+0x820>)
 8000ade:	f002 f8e4 	bl	8002caa <HAL_GPIO_WritePin>
		  }
	  }

	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 8000ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae6:	484a      	ldr	r0, [pc, #296]	; (8000c10 <StartEncoder+0x820>)
 8000ae8:	f002 f8c8 	bl	8002c7c <HAL_GPIO_ReadPin>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <StartEncoder+0x70a>
	  {
		  released = true;
 8000af2:	4b49      	ldr	r3, [pc, #292]	; (8000c18 <StartEncoder+0x828>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e015      	b.n	8000b26 <StartEncoder+0x736>
	  } else if (released)
 8000afa:	4b47      	ldr	r3, [pc, #284]	; (8000c18 <StartEncoder+0x828>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d011      	beq.n	8000b26 <StartEncoder+0x736>
	  {
		  released = false;
 8000b02:	4b45      	ldr	r3, [pc, #276]	; (8000c18 <StartEncoder+0x828>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		  invert = !invert;
 8000b08:	4b44      	ldr	r3, [pc, #272]	; (8000c1c <StartEncoder+0x82c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	bf14      	ite	ne
 8000b10:	2301      	movne	r3, #1
 8000b12:	2300      	moveq	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	f083 0301 	eor.w	r3, r3, #1
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b3e      	ldr	r3, [pc, #248]	; (8000c1c <StartEncoder+0x82c>)
 8000b24:	701a      	strb	r2, [r3, #0]
	  }

	  data = 0b01000001; // command 2, write to LED port
 8000b26:	2341      	movs	r3, #65	; 0x41
 8000b28:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b32:	4837      	ldr	r0, [pc, #220]	; (8000c10 <StartEncoder+0x820>)
 8000b34:	f002 f8b9 	bl	8002caa <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000b38:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b40:	2201      	movs	r2, #1
 8000b42:	4834      	ldr	r0, [pc, #208]	; (8000c14 <StartEncoder+0x824>)
 8000b44:	f005 fb50 	bl	80061e8 <HAL_SPI_Transmit>
	  osDelay(10);
 8000b48:	200a      	movs	r0, #10
 8000b4a:	f00a fae1 	bl	800b110 <osDelay>

	  data = ~(1<<((tick_counter >> 1)&0b11));
 8000b4e:	4b34      	ldr	r3, [pc, #208]	; (8000c20 <StartEncoder+0x830>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	085b      	lsrs	r3, r3, #1
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
//	  if (invert)
//		  data =~data;
	  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, invert);
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <StartEncoder+0x82c>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	2120      	movs	r1, #32
 8000b72:	4827      	ldr	r0, [pc, #156]	; (8000c10 <StartEncoder+0x820>)
 8000b74:	f002 f899 	bl	8002caa <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000b78:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b80:	2201      	movs	r2, #1
 8000b82:	4824      	ldr	r0, [pc, #144]	; (8000c14 <StartEncoder+0x824>)
 8000b84:	f005 fb30 	bl	80061e8 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8e:	4820      	ldr	r0, [pc, #128]	; (8000c10 <StartEncoder+0x820>)
 8000b90:	f002 f88b 	bl	8002caa <HAL_GPIO_WritePin>

	  osDelay(10);
 8000b94:	200a      	movs	r0, #10
 8000b96:	f00a fabb 	bl	800b110 <osDelay>
	  data = 0b10000000; // command 4
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  data |= invert<<3; // enable/disable display
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <StartEncoder+0x82c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	b25a      	sxtb	r2, r3
 8000ba8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  data |= ((encoder_value >> 2) - 1)&0b111; // set brightness
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <StartEncoder+0x834>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	089b      	lsrs	r3, r3, #2
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	b25b      	sxtb	r3, r3
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	b25a      	sxtb	r2, r3
 8000bce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000bd2:	b25b      	sxtb	r3, r3
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	b25b      	sxtb	r3, r3
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be4:	480a      	ldr	r0, [pc, #40]	; (8000c10 <StartEncoder+0x820>)
 8000be6:	f002 f860 	bl	8002caa <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000bea:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4807      	ldr	r0, [pc, #28]	; (8000c14 <StartEncoder+0x824>)
 8000bf6:	f005 faf7 	bl	80061e8 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <StartEncoder+0x820>)
 8000c02:	f002 f852 	bl	8002caa <HAL_GPIO_WritePin>
	  osDelay(10);
 8000c06:	200a      	movs	r0, #10
 8000c08:	f00a fa82 	bl	800b110 <osDelay>
  {
 8000c0c:	e652      	b.n	80008b4 <StartEncoder+0x4c4>
 8000c0e:	bf00      	nop
 8000c10:	40010c00 	.word	0x40010c00
 8000c14:	20002598 	.word	0x20002598
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000001 	.word	0x20000001
 8000c20:	200001ae 	.word	0x200001ae
 8000c24:	200001ac 	.word	0x200001ac

08000c28 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_UART_RxCpltCallback+0x44>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d115      	bne.n	8000c64 <HAL_UART_RxCpltCallback+0x3c>
		return;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]


   /* Notify the task that the transmission is complete by setting the TX_BIT
   in the task's notification value. */
	vTaskNotifyGiveFromISR( UARTtaskHandle,
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_UART_RxCpltCallback+0x48>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f107 020c 	add.w	r2, r7, #12
 8000c44:	4611      	mov	r1, r2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f00c fbd0 	bl	800d3ec <vTaskNotifyGiveFromISR>

   /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
   should be performed to ensure the interrupt returns directly to the highest
   priority task.  The macro used for this purpose is dependent on the port in
   use and may be called portEND_SWITCHING_ISR(). */
   portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d009      	beq.n	8000c66 <HAL_UART_RxCpltCallback+0x3e>
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_UART_RxCpltCallback+0x4c>)
 8000c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	f3bf 8f4f 	dsb	sy
 8000c5e:	f3bf 8f6f 	isb	sy
 8000c62:	e000      	b.n	8000c66 <HAL_UART_RxCpltCallback+0x3e>
		return;
 8000c64:	bf00      	nop
}
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20002638 	.word	0x20002638
 8000c70:	200024a0 	.word	0x200024a0
 8000c74:	e000ed04 	.word	0xe000ed04

08000c78 <process_encoder>:

void process_encoder(void)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000c7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c82:	483c      	ldr	r0, [pc, #240]	; (8000d74 <process_encoder+0xfc>)
 8000c84:	f001 fffa 	bl	8002c7c <HAL_GPIO_ReadPin>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461c      	mov	r4, r3
		   0b10*HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin));
 8000c8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c90:	4838      	ldr	r0, [pc, #224]	; (8000d74 <process_encoder+0xfc>)
 8000c92:	f001 fff3 	bl	8002c7c <HAL_GPIO_ReadPin>
 8000c96:	4603      	mov	r3, r0
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	4423      	add	r3, r4
 8000c9e:	71fb      	strb	r3, [r7, #7]
	switch(old)
 8000ca0:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <process_encoder+0x100>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d85e      	bhi.n	8000d66 <process_encoder+0xee>
 8000ca8:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <process_encoder+0x38>)
 8000caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cae:	bf00      	nop
 8000cb0:	08000ce7 	.word	0x08000ce7
 8000cb4:	08000d0d 	.word	0x08000d0d
 8000cb8:	08000cc1 	.word	0x08000cc1
 8000cbc:	08000d33 	.word	0x08000d33
		{
		case 2:
			{
			if(new == 3) encoder_value++;
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d105      	bne.n	8000cd2 <process_encoder+0x5a>
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <process_encoder+0x104>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <process_encoder+0x104>)
 8000cd0:	801a      	strh	r2, [r3, #0]
			if(new == 0) encoder_value--;
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d13f      	bne.n	8000d58 <process_encoder+0xe0>
 8000cd8:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <process_encoder+0x104>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <process_encoder+0x104>)
 8000ce2:	801a      	strh	r2, [r3, #0]
			break;
 8000ce4:	e038      	b.n	8000d58 <process_encoder+0xe0>
			}

		case 0:
			{
			if(new == 2) encoder_value++;
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d105      	bne.n	8000cf8 <process_encoder+0x80>
 8000cec:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <process_encoder+0x104>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <process_encoder+0x104>)
 8000cf6:	801a      	strh	r2, [r3, #0]
			if(new == 1) encoder_value--;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d12e      	bne.n	8000d5c <process_encoder+0xe4>
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <process_encoder+0x104>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <process_encoder+0x104>)
 8000d08:	801a      	strh	r2, [r3, #0]
			break;
 8000d0a:	e027      	b.n	8000d5c <process_encoder+0xe4>
			}
		case 1:
			{
			if(new == 0) encoder_value++;
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d105      	bne.n	8000d1e <process_encoder+0xa6>
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <process_encoder+0x104>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <process_encoder+0x104>)
 8000d1c:	801a      	strh	r2, [r3, #0]
			if(new == 3) encoder_value--;
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	d11d      	bne.n	8000d60 <process_encoder+0xe8>
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <process_encoder+0x104>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <process_encoder+0x104>)
 8000d2e:	801a      	strh	r2, [r3, #0]
			break;
 8000d30:	e016      	b.n	8000d60 <process_encoder+0xe8>
			}
		case 3:
			{
			if(new == 1) encoder_value++;
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d105      	bne.n	8000d44 <process_encoder+0xcc>
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <process_encoder+0x104>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <process_encoder+0x104>)
 8000d42:	801a      	strh	r2, [r3, #0]
			if(new == 2) encoder_value--;
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d10c      	bne.n	8000d64 <process_encoder+0xec>
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <process_encoder+0x104>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <process_encoder+0x104>)
 8000d54:	801a      	strh	r2, [r3, #0]
			break;
 8000d56:	e005      	b.n	8000d64 <process_encoder+0xec>
			break;
 8000d58:	bf00      	nop
 8000d5a:	e004      	b.n	8000d66 <process_encoder+0xee>
			break;
 8000d5c:	bf00      	nop
 8000d5e:	e002      	b.n	8000d66 <process_encoder+0xee>
			break;
 8000d60:	bf00      	nop
 8000d62:	e000      	b.n	8000d66 <process_encoder+0xee>
			break;
 8000d64:	bf00      	nop
			}
		}
	old = new;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <process_encoder+0x100>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	7013      	strb	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd90      	pop	{r4, r7, pc}
 8000d74:	40010c00 	.word	0x40010c00
 8000d78:	200001b0 	.word	0x200001b0
 8000d7c:	200001ac 	.word	0x200001ac

08000d80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d94:	4b49      	ldr	r3, [pc, #292]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a48      	ldr	r2, [pc, #288]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000d9a:	f043 0310 	orr.w	r3, r3, #16
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b46      	ldr	r3, [pc, #280]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0310 	and.w	r3, r3, #16
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dac:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a42      	ldr	r2, [pc, #264]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000db2:	f043 0320 	orr.w	r3, r3, #32
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b40      	ldr	r3, [pc, #256]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0320 	and.w	r3, r3, #32
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b3d      	ldr	r3, [pc, #244]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a3c      	ldr	r2, [pc, #240]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b3a      	ldr	r3, [pc, #232]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ddc:	4b37      	ldr	r3, [pc, #220]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a36      	ldr	r2, [pc, #216]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000de2:	f043 0308 	orr.w	r3, r3, #8
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b34      	ldr	r3, [pc, #208]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f003 0308 	and.w	r3, r3, #8
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfa:	4831      	ldr	r0, [pc, #196]	; (8000ec0 <MX_GPIO_Init+0x140>)
 8000dfc:	f001 ff55 	bl	8002caa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 8000e06:	482f      	ldr	r0, [pc, #188]	; (8000ec4 <MX_GPIO_Init+0x144>)
 8000e08:	f001 ff4f 	bl	8002caa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e12:	482d      	ldr	r0, [pc, #180]	; (8000ec8 <MX_GPIO_Init+0x148>)
 8000e14:	f001 ff49 	bl	8002caa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4823      	ldr	r0, [pc, #140]	; (8000ec0 <MX_GPIO_Init+0x140>)
 8000e32:	f001 fd9f 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e36:	2301      	movs	r3, #1
 8000e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3a:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <MX_GPIO_Init+0x14c>)
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	4619      	mov	r1, r3
 8000e48:	481f      	ldr	r0, [pc, #124]	; (8000ec8 <MX_GPIO_Init+0x148>)
 8000e4a:	f001 fd93 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin|enc_s_Pin;
 8000e4e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	4619      	mov	r1, r3
 8000e62:	4818      	ldr	r0, [pc, #96]	; (8000ec4 <MX_GPIO_Init+0x144>)
 8000e64:	f001 fd86 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000e68:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 8000e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	f107 0310 	add.w	r3, r7, #16
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4810      	ldr	r0, [pc, #64]	; (8000ec4 <MX_GPIO_Init+0x144>)
 8000e82:	f001 fd77 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <MX_GPIO_Init+0x148>)
 8000ea0:	f001 fd68 	bl	8002974 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2105      	movs	r1, #5
 8000ea8:	2006      	movs	r0, #6
 8000eaa:	f001 fc88 	bl	80027be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000eae:	2006      	movs	r0, #6
 8000eb0:	f001 fca1 	bl	80027f6 <HAL_NVIC_EnableIRQ>

}
 8000eb4:	bf00      	nop
 8000eb6:	3720      	adds	r7, #32
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40011000 	.word	0x40011000
 8000ec4:	40010c00 	.word	0x40010c00
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	10110000 	.word	0x10110000

08000ed0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000ed6:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <MX_I2C1_Init+0x54>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000edc:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <MX_I2C1_Init+0x58>)
 8000ede:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000eee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ef2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000f0e:	f001 ff1f 	bl	8002d50 <HAL_I2C_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f18:	f000 f8c8 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200024b0 	.word	0x200024b0
 8000f24:	40005400 	.word	0x40005400
 8000f28:	000186a0 	.word	0x000186a0

08000f2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <HAL_I2C_MspInit+0x70>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d123      	bne.n	8000f94 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_I2C_MspInit+0x74>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <HAL_I2C_MspInit+0x74>)
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_I2C_MspInit+0x74>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f64:	23c0      	movs	r3, #192	; 0xc0
 8000f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f68:	2312      	movs	r3, #18
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4619      	mov	r1, r3
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <HAL_I2C_MspInit+0x78>)
 8000f78:	f001 fcfc 	bl	8002974 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_I2C_MspInit+0x74>)
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_I2C_MspInit+0x74>)
 8000f82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f86:	61d3      	str	r3, [r2, #28]
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_I2C_MspInit+0x74>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010c00 	.word	0x40010c00

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f001 fb20 	bl	80025f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f80f 	bl	8000fd2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f7ff fee4 	bl	8000d80 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000fb8:	f001 f8bc 	bl	8002134 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000fbc:	f001 fa0a 	bl	80023d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fc0:	f7ff ff86 	bl	8000ed0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000fc4:	f009 ff94 	bl	800aef0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000fc8:	f7ff f920 	bl	800020c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000fcc:	f009 ffc2 	bl	800af54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <main+0x28>

08000fd2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b094      	sub	sp, #80	; 0x50
 8000fd6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fdc:	2228      	movs	r2, #40	; 0x28
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00d fed1 	bl	800ed88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001002:	2301      	movs	r3, #1
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800100c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001010:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001012:	2301      	movs	r3, #1
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001016:	2302      	movs	r3, #2
 8001018:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800101e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001020:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001024:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001026:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800102a:	4618      	mov	r0, r3
 800102c:	f004 fb56 	bl	80056dc <HAL_RCC_OscConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001036:	f000 f839 	bl	80010ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103a:	230f      	movs	r3, #15
 800103c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103e:	2302      	movs	r3, #2
 8001040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2102      	movs	r1, #2
 8001056:	4618      	mov	r0, r3
 8001058:	f004 fdc0 	bl	8005bdc <HAL_RCC_ClockConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001062:	f000 f823 	bl	80010ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001066:	2310      	movs	r3, #16
 8001068:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4618      	mov	r0, r3
 8001072:	f004 ff7f 	bl	8005f74 <HAL_RCCEx_PeriphCLKConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800107c:	f000 f816 	bl	80010ac <Error_Handler>
  }
}
 8001080:	bf00      	nop
 8001082:	3750      	adds	r7, #80	; 0x50
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800109a:	f001 fabf 	bl	800261c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40012c00 	.word	0x40012c00

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <Error_Handler+0x8>

080010b6 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b087      	sub	sp, #28
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
	int i = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
	int ind = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 80010ca:	e002      	b.n	80010d2 <split+0x1c>
			ind++;
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	3301      	adds	r3, #1
 80010d0:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4413      	add	r3, r2
 80010d8:	3308      	adds	r3, #8
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d103      	bne.n	80010e8 <split+0x32>
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbf1      	blt.n	80010cc <split+0x16>
		}
		if (!(ind < limit)) return i;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	db01      	blt.n	80010f4 <split+0x3e>
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	e024      	b.n	800113e <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f103 0108 	add.w	r1, r3, #8
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	1c58      	adds	r0, r3, #1
 8001100:	6178      	str	r0, [r7, #20]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	4403      	add	r3, r0
 8001108:	440a      	add	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	2b04      	cmp	r3, #4
 8001110:	dd05      	ble.n	800111e <split+0x68>
			return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e012      	b.n	800113e <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	3301      	adds	r3, #1
 800111c:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4413      	add	r3, r2
 8001124:	3308      	adds	r3, #8
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <split+0x7e>
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	429a      	cmp	r2, r3
 8001132:	dbf1      	blt.n	8001118 <split+0x62>
		}
		if (!(ind < limit)) return i;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	429a      	cmp	r2, r3
 800113a:	dbca      	blt.n	80010d2 <split+0x1c>
 800113c:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 800113e:	4618      	mov	r0, r3
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6852      	ldr	r2, [r2, #4]
 8001158:	4610      	mov	r0, r2
 800115a:	4798      	blx	r3
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <terminal_backspace+0x18>)
 8001172:	4798      	blx	r3
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	0800ee58 	.word	0x0800ee58

08001180 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <terminal_newline+0x18>)
 800118e:	4798      	blx	r3
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	0800ee60 	.word	0x0800ee60

0800119c <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	2300      	movs	r3, #0
 80011ac:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b8:	d235      	bcs.n	8001226 <u16bit_to_str+0x8a>
		while (nmb > 0) {
 80011ba:	e01a      	b.n	80011f2 <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <u16bit_to_str+0x9c>)
 80011c0:	fba3 2301 	umull	r2, r3, r3, r1
 80011c4:	08da      	lsrs	r2, r3, #3
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	1aca      	subs	r2, r1, r3
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	1c59      	adds	r1, r3, #1
 80011d6:	6179      	str	r1, [r7, #20]
 80011d8:	3230      	adds	r2, #48	; 0x30
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	f107 0118 	add.w	r1, r7, #24
 80011e0:	440b      	add	r3, r1
 80011e2:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a13      	ldr	r2, [pc, #76]	; (8001238 <u16bit_to_str+0x9c>)
 80011ea:	fba2 2303 	umull	r2, r3, r2, r3
 80011ee:	08db      	lsrs	r3, r3, #3
 80011f0:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e1      	bne.n	80011bc <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	e00f      	b.n	800121e <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	1e5a      	subs	r2, r3, #1
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	1c59      	adds	r1, r3, #1
 800120a:	6039      	str	r1, [r7, #0]
 800120c:	f107 0118 	add.w	r1, r7, #24
 8001210:	440a      	add	r2, r1
 8001212:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001216:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	3301      	adds	r3, #1
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	429a      	cmp	r2, r3
 8001224:	dbeb      	blt.n	80011fe <u16bit_to_str+0x62>
	}
	*buf = '\0';
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
	return buf;
 800122c:	683b      	ldr	r3, [r7, #0]
}
 800122e:	4618      	mov	r0, r3
 8001230:	371c      	adds	r7, #28
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	cccccccd 	.word	0xcccccccd

0800123c <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <terminal_move_cursor+0x90>)
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	4611      	mov	r1, r2
 8001260:	8019      	strh	r1, [r3, #0]
 8001262:	3302      	adds	r3, #2
 8001264:	0c12      	lsrs	r2, r2, #16
 8001266:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	dd0f      	ble.n	800128e <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	3302      	adds	r3, #2
 8001276:	4619      	mov	r1, r3
 8001278:	4610      	mov	r0, r2
 800127a:	f7ff ff8f 	bl	800119c <u16bit_to_str>
 800127e:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	4913      	ldr	r1, [pc, #76]	; (80012d0 <terminal_move_cursor+0x94>)
 8001284:	461a      	mov	r2, r3
 8001286:	460b      	mov	r3, r1
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	8013      	strh	r3, [r2, #0]
 800128c:	e013      	b.n	80012b6 <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	da17      	bge.n	80012c4 <terminal_move_cursor+0x88>
		endstr = u16bit_to_str (-(offset), str+2);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	425b      	negs	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	3302      	adds	r3, #2
 80012a0:	4619      	mov	r1, r3
 80012a2:	4610      	mov	r0, r2
 80012a4:	f7ff ff7a 	bl	800119c <u16bit_to_str>
 80012a8:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	4909      	ldr	r1, [pc, #36]	; (80012d4 <terminal_move_cursor+0x98>)
 80012ae:	461a      	mov	r2, r3
 80012b0:	460b      	mov	r3, r1
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f107 020c 	add.w	r2, r7, #12
 80012be:	4610      	mov	r0, r2
 80012c0:	4798      	blx	r3
 80012c2:	e000      	b.n	80012c6 <terminal_move_cursor+0x8a>
		return;
 80012c4:	bf00      	nop
}
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	0800ee64 	.word	0x0800ee64
 80012d0:	0800ee68 	.word	0x0800ee68
 80012d4:	0800ee6c 	.word	0x0800ee6c

080012d8 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	4a15      	ldr	r2, [pc, #84]	; (800133c <terminal_reset_cursor+0x64>)
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	4611      	mov	r1, r2
 80012ea:	8019      	strh	r1, [r3, #0]
 80012ec:	3302      	adds	r3, #2
 80012ee:	0c12      	lsrs	r2, r2, #16
 80012f0:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	3302      	adds	r3, #2
 80012f8:	4619      	mov	r1, r3
 80012fa:	203a      	movs	r0, #58	; 0x3a
 80012fc:	f7ff ff4e 	bl	800119c <u16bit_to_str>
 8001300:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <terminal_reset_cursor+0x68>)
 8001306:	6810      	ldr	r0, [r2, #0]
 8001308:	6018      	str	r0, [r3, #0]
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3303      	adds	r3, #3
 800130e:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 8001310:	69f9      	ldr	r1, [r7, #28]
 8001312:	2005      	movs	r0, #5
 8001314:	f7ff ff42 	bl	800119c <u16bit_to_str>
 8001318:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	4909      	ldr	r1, [pc, #36]	; (8001344 <terminal_reset_cursor+0x6c>)
 800131e:	461a      	mov	r2, r3
 8001320:	460b      	mov	r3, r1
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f107 020c 	add.w	r2, r7, #12
 800132e:	4610      	mov	r0, r2
 8001330:	4798      	blx	r3
}
 8001332:	bf00      	nop
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	0800ee64 	.word	0x0800ee64
 8001340:	0800ee70 	.word	0x0800ee70
 8001344:	0800ee68 	.word	0x0800ee68

08001348 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	4815      	ldr	r0, [pc, #84]	; (80013b0 <terminal_print_line+0x68>)
 800135a:	4798      	blx	r3

	char nch [] = {0,0};
 800135c:	2300      	movs	r3, #0
 800135e:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	e013      	b.n	800138e <terminal_print_line+0x46>
		nch [0] = pThis->cmdline [i];
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	4413      	add	r3, r2
 800136c:	3308      	adds	r3, #8
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8001372:	7c3b      	ldrb	r3, [r7, #16]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <terminal_print_line+0x34>
			nch[0] = ' ';
 8001378:	2320      	movs	r3, #32
 800137a:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	f107 0210 	add.w	r2, r7, #16
 8001384:	4610      	mov	r0, r2
 8001386:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3301      	adds	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbe6      	blt.n	8001366 <terminal_print_line+0x1e>
	}
	
	terminal_reset_cursor (pThis);
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f7ff ff9d 	bl	80012d8 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f7ff ff4b 	bl	800123c <terminal_move_cursor>
}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	0800ee74 	.word	0x0800ee74

080013b4 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3308      	adds	r3, #8
 80013c2:	2233      	movs	r2, #51	; 0x33
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00d fcde 	bl	800ed88 <memset>
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
	pThis->ring_hist.begin = 0;
	pThis->ring_hist.end = 0;
	pThis->ring_hist.cur = 0;
#endif
	pThis->cmdlen =0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pThis->cursor = 0;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40
	pThis->execute = NULL;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->get_completion = NULL;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	649a      	str	r2, [r3, #72]	; 0x48
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	651a      	str	r2, [r3, #80]	; 0x50
#endif
	pThis->prompt_str = prompt_default;
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <microrl_init+0x4c>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	605a      	str	r2, [r3, #4]
	pThis->print = print;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	64da      	str	r2, [r3, #76]	; 0x4c
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000004 	.word	0x20000004

08001404 <microrl_set_execute_callback>:
	pThis->get_completion = get_completion;
}

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	2b5b      	cmp	r3, #91	; 0x5b
 8001448:	d104      	bne.n	8001454 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
		return 0;
 8001450:	2300      	movs	r3, #0
 8001452:	e067      	b.n	8001524 <escape_process+0xec>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d140      	bne.n	80014de <escape_process+0xa6>
		if (ch == 'A') {
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	2b41      	cmp	r3, #65	; 0x41
 8001460:	d101      	bne.n	8001466 <escape_process+0x2e>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
#endif
			return 1;
 8001462:	2301      	movs	r3, #1
 8001464:	e05e      	b.n	8001524 <escape_process+0xec>
		} else if (ch == 'B') {
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	2b42      	cmp	r3, #66	; 0x42
 800146a:	d101      	bne.n	8001470 <escape_process+0x38>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
#endif
			return 1;
 800146c:	2301      	movs	r3, #1
 800146e:	e059      	b.n	8001524 <escape_process+0xec>
		} else if (ch == 'C') {
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	2b43      	cmp	r3, #67	; 0x43
 8001474:	d110      	bne.n	8001498 <escape_process+0x60>
			if (pThis->cursor < pThis->cmdlen) {
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147e:	429a      	cmp	r2, r3
 8001480:	da08      	bge.n	8001494 <escape_process+0x5c>
				terminal_move_cursor (pThis, 1);
 8001482:	2101      	movs	r1, #1
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fed9 	bl	800123c <terminal_move_cursor>
				pThis->cursor++;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
			}
			return 1;
 8001494:	2301      	movs	r3, #1
 8001496:	e045      	b.n	8001524 <escape_process+0xec>
		} else if (ch == 'D') {
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	2b44      	cmp	r3, #68	; 0x44
 800149c:	d10f      	bne.n	80014be <escape_process+0x86>
			if (pThis->cursor > 0) {
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	dd09      	ble.n	80014ba <escape_process+0x82>
				terminal_move_cursor (pThis, -1);
 80014a6:	f04f 31ff 	mov.w	r1, #4294967295
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fec6 	bl	800123c <terminal_move_cursor>
				pThis->cursor--;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	1e5a      	subs	r2, r3, #1
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	641a      	str	r2, [r3, #64]	; 0x40
			}
			return 1;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e032      	b.n	8001524 <escape_process+0xec>
		} else if (ch == '7') {
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	2b37      	cmp	r3, #55	; 0x37
 80014c2:	d104      	bne.n	80014ce <escape_process+0x96>
			pThis->escape_seq = _ESC_HOME;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2202      	movs	r2, #2
 80014c8:	701a      	strb	r2, [r3, #0]
			return 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e02a      	b.n	8001524 <escape_process+0xec>
		} else if (ch == '8') {
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	2b38      	cmp	r3, #56	; 0x38
 80014d2:	d126      	bne.n	8001522 <escape_process+0xea>
			pThis->escape_seq = _ESC_END;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2203      	movs	r2, #3
 80014d8:	701a      	strb	r2, [r3, #0]
			return 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	e022      	b.n	8001524 <escape_process+0xec>
		} 
	} else if (ch == '~') {
 80014de:	78fb      	ldrb	r3, [r7, #3]
 80014e0:	2b7e      	cmp	r3, #126	; 0x7e
 80014e2:	d11e      	bne.n	8001522 <escape_process+0xea>
		if (pThis->escape_seq == _ESC_HOME) {
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d107      	bne.n	80014fc <escape_process+0xc4>
			terminal_reset_cursor (pThis);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fef3 	bl	80012d8 <terminal_reset_cursor>
			pThis->cursor = 0;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
			return 1;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e013      	b.n	8001524 <escape_process+0xec>
		} else if (pThis->escape_seq == _ESC_END) {
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b03      	cmp	r3, #3
 8001502:	d10e      	bne.n	8001522 <escape_process+0xea>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	4619      	mov	r1, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fe93 	bl	800123c <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	641a      	str	r2, [r3, #64]	; 0x40
			return 1;
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <escape_process+0xec>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	2b32      	cmp	r3, #50	; 0x32
 8001542:	dc50      	bgt.n	80015e6 <microrl_insert_text+0xba>
		memmove (pThis->cmdline + pThis->cursor + len,
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f103 0208 	add.w	r2, r3, #8
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4619      	mov	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	440b      	add	r3, r1
 8001554:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3308      	adds	r3, #8
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	6c12      	ldr	r2, [r2, #64]	; 0x40
		memmove (pThis->cmdline + pThis->cursor + len,
 800155e:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 800156a:	461a      	mov	r2, r3
 800156c:	f00d fbf2 	bl	800ed54 <memmove>
		for (i = 0; i < len; i++) {
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e01f      	b.n	80015b6 <microrl_insert_text+0x8a>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	441a      	add	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	440b      	add	r3, r1
 8001584:	7811      	ldrb	r1, [r2, #0]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	4413      	add	r3, r2
 800158a:	460a      	mov	r2, r1
 800158c:	721a      	strb	r2, [r3, #8]
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	4413      	add	r3, r2
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	4413      	add	r3, r2
 800159a:	7a1b      	ldrb	r3, [r3, #8]
 800159c:	2b20      	cmp	r3, #32
 800159e:	d107      	bne.n	80015b0 <microrl_insert_text+0x84>
				pThis->cmdline [pThis->cursor + i] = 0;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	4413      	add	r3, r2
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	2200      	movs	r2, #0
 80015ae:	721a      	strb	r2, [r3, #8]
		for (i = 0; i < len; i++) {
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	3301      	adds	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	dbdb      	blt.n	8001576 <microrl_insert_text+0x4a>
			}
		}
		pThis->cursor += len;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	441a      	add	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	641a      	str	r2, [r3, #64]	; 0x40
		pThis->cmdlen += len;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	441a      	add	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	63da      	str	r2, [r3, #60]	; 0x3c
		pThis->cmdline [pThis->cmdlen] = '\0';
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4413      	add	r3, r2
 80015de:	2200      	movs	r2, #0
 80015e0:	721a      	strb	r2, [r3, #8]
		return true;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <microrl_insert_text+0xbc>
	}
	return false;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	dd27      	ble.n	8001650 <microrl_backspace+0x60>
		terminal_backspace (pThis);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff fdaf 	bl	8001164 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f103 0208 	add.w	r2, r3, #8
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	3b01      	subs	r3, #1
 8001612:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3308      	adds	r3, #8
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6c12      	ldr	r2, [r2, #64]	; 0x40
		memmove (pThis->cmdline + pThis->cursor-1,
 800161c:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 800162a:	461a      	mov	r2, r3
 800162c:	f00d fb92 	bl	800ed54 <memmove>
		pThis->cursor--;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	1e5a      	subs	r2, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	641a      	str	r2, [r3, #64]	; 0x40
		pThis->cmdline [pThis->cmdlen] = '\0';
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	2200      	movs	r2, #0
 8001644:	721a      	strb	r2, [r3, #8]
		pThis->cmdlen--;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164a:	1e5a      	subs	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <new_line_handler>:
	} 
}
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff fd8d 	bl	8001180 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166a:	f107 0208 	add.w	r2, r7, #8
 800166e:	4619      	mov	r1, r3
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fd20 	bl	80010b6 <split>
 8001676:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167e:	d107      	bne.n	8001690 <new_line_handler+0x38>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001684:	4813      	ldr	r0, [pc, #76]	; (80016d4 <new_line_handler+0x7c>)
 8001686:	4798      	blx	r3
		pThis->print (ENDL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	4812      	ldr	r0, [pc, #72]	; (80016d8 <new_line_handler+0x80>)
 800168e:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	2b00      	cmp	r3, #0
 8001694:	dd0a      	ble.n	80016ac <new_line_handler+0x54>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	2b00      	cmp	r3, #0
 800169c:	d006      	beq.n	80016ac <new_line_handler+0x54>
		pThis->execute (status, tkn_arr);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f107 0208 	add.w	r2, r7, #8
 80016a6:	4611      	mov	r1, r2
 80016a8:	69f8      	ldr	r0, [r7, #28]
 80016aa:	4798      	blx	r3
	print_prompt (pThis);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff fd4b 	bl	8001148 <print_prompt>
	pThis->cmdlen = 0;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pThis->cursor = 0;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	641a      	str	r2, [r3, #64]	; 0x40
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3308      	adds	r3, #8
 80016c2:	2233      	movs	r2, #51	; 0x33
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f00d fb5e 	bl	800ed88 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
#endif
}
 80016cc:	bf00      	nop
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	0800ee78 	.word	0x0800ee78
 80016d8:	0800ee60 	.word	0x0800ee60

080016dc <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	785b      	ldrb	r3, [r3, #1]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00d      	beq.n	800170a <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	4619      	mov	r1, r3
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fe9f 	bl	8001438 <escape_process>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 80fd 	beq.w	80018fc <microrl_insert_char+0x220>
			pThis->escape = 0;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8001708:	e0f8      	b.n	80018fc <microrl_insert_char+0x220>
		switch (ch) {
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2b1b      	cmp	r3, #27
 800170e:	dc3f      	bgt.n	8001790 <microrl_insert_char+0xb4>
 8001710:	2b00      	cmp	r3, #0
 8001712:	f340 80c9 	ble.w	80018a8 <microrl_insert_char+0x1cc>
 8001716:	3b01      	subs	r3, #1
 8001718:	2b1a      	cmp	r3, #26
 800171a:	f200 80c5 	bhi.w	80018a8 <microrl_insert_char+0x1cc>
 800171e:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <microrl_insert_char+0x48>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	08001813 	.word	0x08001813
 8001728:	08001841 	.word	0x08001841
 800172c:	08001899 	.word	0x08001899
 8001730:	080018a9 	.word	0x080018a9
 8001734:	080017f7 	.word	0x080017f7
 8001738:	08001821 	.word	0x08001821
 800173c:	080018a9 	.word	0x080018a9
 8001740:	0800185f 	.word	0x0800185f
 8001744:	080018a9 	.word	0x080018a9
 8001748:	08001797 	.word	0x08001797
 800174c:	080017e5 	.word	0x080017e5
 8001750:	080018a9 	.word	0x080018a9
 8001754:	08001797 	.word	0x08001797
 8001758:	080018e3 	.word	0x080018e3
 800175c:	080018a9 	.word	0x080018a9
 8001760:	080018e3 	.word	0x080018e3
 8001764:	080018a9 	.word	0x080018a9
 8001768:	08001877 	.word	0x08001877
 800176c:	080018a9 	.word	0x080018a9
 8001770:	080018a9 	.word	0x080018a9
 8001774:	080017cd 	.word	0x080017cd
 8001778:	080018a9 	.word	0x080018a9
 800177c:	080018a9 	.word	0x080018a9
 8001780:	080018a9 	.word	0x080018a9
 8001784:	080018a9 	.word	0x080018a9
 8001788:	080018a9 	.word	0x080018a9
 800178c:	080017bf 	.word	0x080017bf
 8001790:	2b7f      	cmp	r3, #127	; 0x7f
 8001792:	d064      	beq.n	800185e <microrl_insert_char+0x182>
 8001794:	e088      	b.n	80018a8 <microrl_insert_char+0x1cc>
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	789b      	ldrb	r3, [r3, #2]
 800179a:	461a      	mov	r2, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b0d      	cmp	r3, #13
 80017a0:	d101      	bne.n	80017a6 <microrl_insert_char+0xca>
 80017a2:	230a      	movs	r3, #10
 80017a4:	e000      	b.n	80017a8 <microrl_insert_char+0xcc>
 80017a6:	230d      	movs	r3, #13
 80017a8:	4293      	cmp	r3, r2
 80017aa:	f000 809c 	beq.w	80018e6 <microrl_insert_char+0x20a>
				pThis->tmpch = ch;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ff4e 	bl	8001658 <new_line_handler>
				break;
 80017bc:	e09e      	b.n	80018fc <microrl_insert_char+0x220>
				pThis->escape = 1;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	705a      	strb	r2, [r3, #1]
			break;
 80017c4:	e09a      	b.n	80018fc <microrl_insert_char+0x220>
					microrl_backspace (pThis);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ff12 	bl	80015f0 <microrl_backspace>
					while (pThis->cursor > 0) {
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	dcf8      	bgt.n	80017c6 <microrl_insert_char+0xea>
				terminal_print_line (pThis, 0, pThis->cursor);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	461a      	mov	r2, r3
 80017da:	2100      	movs	r1, #0
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff fdb3 	bl	8001348 <terminal_print_line>
			break;
 80017e2:	e08b      	b.n	80018fc <microrl_insert_char+0x220>
				pThis->print ("\033[K");
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	4846      	ldr	r0, [pc, #280]	; (8001904 <microrl_insert_char+0x228>)
 80017ea:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80017f4:	e082      	b.n	80018fc <microrl_insert_char+0x220>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	4619      	mov	r1, r3
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff fd1a 	bl	800123c <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001810:	e074      	b.n	80018fc <microrl_insert_char+0x220>
				terminal_reset_cursor (pThis);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fd60 	bl	80012d8 <terminal_reset_cursor>
				pThis->cursor = 0;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800181e:	e06d      	b.n	80018fc <microrl_insert_char+0x220>
			if (pThis->cursor < pThis->cmdlen) {
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001828:	429a      	cmp	r2, r3
 800182a:	da5e      	bge.n	80018ea <microrl_insert_char+0x20e>
				terminal_move_cursor (pThis, 1);
 800182c:	2101      	movs	r1, #1
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fd04 	bl	800123c <terminal_move_cursor>
				pThis->cursor++;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800183e:	e054      	b.n	80018ea <microrl_insert_char+0x20e>
			if (pThis->cursor) {
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	2b00      	cmp	r3, #0
 8001846:	d052      	beq.n	80018ee <microrl_insert_char+0x212>
				terminal_move_cursor (pThis, -1);
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff fcf5 	bl	800123c <terminal_move_cursor>
				pThis->cursor--;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	1e5a      	subs	r2, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800185c:	e047      	b.n	80018ee <microrl_insert_char+0x212>
				microrl_backspace (pThis);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fec6 	bl	80015f0 <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	461a      	mov	r2, r3
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fd6a 	bl	8001348 <terminal_print_line>
			break;
 8001874:	e042      	b.n	80018fc <microrl_insert_char+0x220>
				terminal_newline (pThis);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fc82 	bl	8001180 <terminal_newline>
				print_prompt (pThis);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff fc63 	bl	8001148 <print_prompt>
				terminal_reset_cursor (pThis);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fd28 	bl	80012d8 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	461a      	mov	r2, r3
 800188e:	2100      	movs	r1, #0
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fd59 	bl	8001348 <terminal_print_line>
			break;
 8001896:	e031      	b.n	80018fc <microrl_insert_char+0x220>
			if (pThis->sigint != NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800189c:	2b00      	cmp	r3, #0
 800189e:	d028      	beq.n	80018f2 <microrl_insert_char+0x216>
				pThis->sigint();
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a4:	4798      	blx	r3
			break;
 80018a6:	e024      	b.n	80018f2 <microrl_insert_char+0x216>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2b20      	cmp	r3, #32
 80018ac:	d103      	bne.n	80018b6 <microrl_insert_char+0x1da>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d01f      	beq.n	80018f6 <microrl_insert_char+0x21a>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	2b1f      	cmp	r3, #31
 80018ba:	dd1c      	ble.n	80018f6 <microrl_insert_char+0x21a>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 80018bc:	463b      	mov	r3, r7
 80018be:	2201      	movs	r2, #1
 80018c0:	4619      	mov	r1, r3
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fe32 	bl	800152c <microrl_insert_text>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d015      	beq.n	80018fa <microrl_insert_char+0x21e>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	1e59      	subs	r1, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	461a      	mov	r2, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fd34 	bl	8001348 <terminal_print_line>
			break;
 80018e0:	e00b      	b.n	80018fa <microrl_insert_char+0x21e>
			break;
 80018e2:	bf00      	nop
 80018e4:	e00a      	b.n	80018fc <microrl_insert_char+0x220>
					break;
 80018e6:	bf00      	nop
 80018e8:	e008      	b.n	80018fc <microrl_insert_char+0x220>
			break;
 80018ea:	bf00      	nop
 80018ec:	e006      	b.n	80018fc <microrl_insert_char+0x220>
			break;
 80018ee:	bf00      	nop
 80018f0:	e004      	b.n	80018fc <microrl_insert_char+0x220>
			break;
 80018f2:	bf00      	nop
 80018f4:	e002      	b.n	80018fc <microrl_insert_char+0x220>
	}
 80018f6:	bf00      	nop
 80018f8:	e000      	b.n	80018fc <microrl_insert_char+0x220>
			break;
 80018fa:	bf00      	nop
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	0800ee74 	.word	0x0800ee74

08001908 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <microrl_print_char+0x20>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	79fa      	ldrb	r2, [r7, #7]
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fede 	bl	80016dc <microrl_insert_char>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000008 	.word	0x20000008

0800192c <print>:

void print (const char * str)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <print+0x84>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	f083 0301 	eor.w	r3, r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <print+0x1e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b1b      	cmp	r3, #27
 8001948:	d02b      	beq.n	80019a2 <print+0x76>
		return;
	if (!CDC_is_ready)
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <print+0x88>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	f083 0301 	eor.w	r3, r3, #1
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d126      	bne.n	80019a6 <print+0x7a>
		return;
	uint16_t len = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 800195c:	89fb      	ldrh	r3, [r7, #14]
 800195e:	3301      	adds	r3, #1
 8001960:	81fb      	strh	r3, [r7, #14]
 8001962:	89fb      	ldrh	r3, [r7, #14]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	4413      	add	r3, r2
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f6      	bne.n	800195c <print+0x30>
	uint32_t timeout = HAL_GetTick();
 800196e:	f000 fe67 	bl	8002640 <HAL_GetTick>
 8001972:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001974:	e006      	b.n	8001984 <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 8001976:	f000 fe63 	bl	8002640 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b04      	cmp	r3, #4
 8001982:	d807      	bhi.n	8001994 <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <print+0x8c>)
 8001986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800198a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f1      	bne.n	8001976 <print+0x4a>
 8001992:	e000      	b.n	8001996 <print+0x6a>
			break;
 8001994:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 8001996:	89fb      	ldrh	r3, [r7, #14]
 8001998:	4619      	mov	r1, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f00c fdca 	bl	800e534 <CDC_Transmit_FS>
 80019a0:	e002      	b.n	80019a8 <print+0x7c>
		return;
 80019a2:	bf00      	nop
 80019a4:	e000      	b.n	80019a8 <print+0x7c>
		return;
 80019a6:	bf00      	nop
}
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000000c 	.word	0x2000000c
 80019b4:	200001b1 	.word	0x200001b1
 80019b8:	200026c0 	.word	0x200026c0

080019bc <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	e010      	b.n	80019ee <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 80019cc:	490c      	ldr	r1, [pc, #48]	; (8001a00 <find_color_by_name+0x44>)
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	440b      	add	r3, r1
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	79fa      	ldrb	r2, [r7, #7]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d101      	bne.n	80019e8 <find_color_by_name+0x2c>
		{
			return i;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	e006      	b.n	80019f6 <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3301      	adds	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b10      	cmp	r3, #16
 80019f2:	d9eb      	bls.n	80019cc <find_color_by_name+0x10>
		}
	}
	return 0;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	0800f388 	.word	0x0800f388

08001a04 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ffd2 	bl	80019bc <find_color_by_name>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <print_color+0x44>)
 8001a26:	4413      	add	r3, r2
 8001a28:	3301      	adds	r3, #1
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff7e 	bl	800192c <print>
	print(str);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff7b 	bl	800192c <print>
	print(COLOR_NC);
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <print_color+0x48>)
 8001a38:	f7ff ff78 	bl	800192c <print>
	return 0;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	0800f388 	.word	0x0800f388
 8001a4c:	0800ee90 	.word	0x0800ee90

08001a50 <str_length>:

int str_length(const char * str)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8001a5c:	e002      	b.n	8001a64 <str_length+0x14>
		i++;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3301      	adds	r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f6      	bne.n	8001a5e <str_length+0xe>
	return i;
 8001a70:	68fb      	ldr	r3, [r7, #12]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <print_help>:


int print_help(int argc, const char * const * argv)
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
	print(_VER);
 8001a86:	4862      	ldr	r0, [pc, #392]	; (8001c10 <print_help+0x194>)
 8001a88:	f7ff ff50 	bl	800192c <print>
	print(ENDL);
 8001a8c:	4861      	ldr	r0, [pc, #388]	; (8001c14 <print_help+0x198>)
 8001a8e:	f7ff ff4d 	bl	800192c <print>
	print ("Use ");
 8001a92:	4861      	ldr	r0, [pc, #388]	; (8001c18 <print_help+0x19c>)
 8001a94:	f7ff ff4a 	bl	800192c <print>
	print_color("TAB", C_GREEN);
 8001a98:	2105      	movs	r1, #5
 8001a9a:	4860      	ldr	r0, [pc, #384]	; (8001c1c <print_help+0x1a0>)
 8001a9c:	f7ff ffb2 	bl	8001a04 <print_color>
	print(" key for completion");
 8001aa0:	485f      	ldr	r0, [pc, #380]	; (8001c20 <print_help+0x1a4>)
 8001aa2:	f7ff ff43 	bl	800192c <print>
	print (ENDL);
 8001aa6:	485b      	ldr	r0, [pc, #364]	; (8001c14 <print_help+0x198>)
 8001aa8:	f7ff ff40 	bl	800192c <print>
	print ("Available commands:");
 8001aac:	485d      	ldr	r0, [pc, #372]	; (8001c24 <print_help+0x1a8>)
 8001aae:	f7ff ff3d 	bl	800192c <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	e09e      	b.n	8001bf6 <print_help+0x17a>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8001ab8:	4a5b      	ldr	r2, [pc, #364]	; (8001c28 <print_help+0x1ac>)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	212c      	movs	r1, #44	; 0x2c
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aca:	d11f      	bne.n	8001b0c <print_help+0x90>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	4a55      	ldr	r2, [pc, #340]	; (8001c28 <print_help+0x1ac>)
 8001ad2:	212c      	movs	r1, #44	; 0x2c
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d004      	beq.n	8001aec <print_help+0x70>
				print_color(" aka ", C_L_PURPLE);
 8001ae2:	210c      	movs	r1, #12
 8001ae4:	4851      	ldr	r0, [pc, #324]	; (8001c2c <print_help+0x1b0>)
 8001ae6:	f7ff ff8d 	bl	8001a04 <print_color>
 8001aea:	e003      	b.n	8001af4 <print_help+0x78>
			else
				print_color("/", C_L_PURPLE);
 8001aec:	210c      	movs	r1, #12
 8001aee:	4850      	ldr	r0, [pc, #320]	; (8001c30 <print_help+0x1b4>)
 8001af0:	f7ff ff88 	bl	8001a04 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	222c      	movs	r2, #44	; 0x2c
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	4a4a      	ldr	r2, [pc, #296]	; (8001c28 <print_help+0x1ac>)
 8001afe:	4413      	add	r3, r2
 8001b00:	3304      	adds	r3, #4
 8001b02:	210b      	movs	r1, #11
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff7d 	bl	8001a04 <print_color>
 8001b0a:	e071      	b.n	8001bf0 <print_help+0x174>
		}
		else
		{
			print(ENDL);
 8001b0c:	4841      	ldr	r0, [pc, #260]	; (8001c14 <print_help+0x198>)
 8001b0e:	f7ff ff0d 	bl	800192c <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8001b12:	f06f 0303 	mvn.w	r3, #3
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	e005      	b.n	8001b26 <print_help+0xaa>
				print(" ");
 8001b1a:	4846      	ldr	r0, [pc, #280]	; (8001c34 <print_help+0x1b8>)
 8001b1c:	f7ff ff06 	bl	800192c <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	3301      	adds	r3, #1
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	4a40      	ldr	r2, [pc, #256]	; (8001c28 <print_help+0x1ac>)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	212c      	movs	r1, #44	; 0x2c
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	dbef      	blt.n	8001b1a <print_help+0x9e>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	222c      	movs	r2, #44	; 0x2c
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	4a39      	ldr	r2, [pc, #228]	; (8001c28 <print_help+0x1ac>)
 8001b44:	4413      	add	r3, r2
 8001b46:	1d1a      	adds	r2, r3, #4
 8001b48:	4937      	ldr	r1, [pc, #220]	; (8001c28 <print_help+0x1ac>)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	202c      	movs	r0, #44	; 0x2c
 8001b4e:	fb00 f303 	mul.w	r3, r0, r3
 8001b52:	440b      	add	r3, r1
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4938      	ldr	r1, [pc, #224]	; (8001c38 <print_help+0x1bc>)
 8001b58:	5ccb      	ldrb	r3, [r1, r3]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	f7ff ff51 	bl	8001a04 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e005      	b.n	8001b74 <print_help+0xf8>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 8001b68:	4832      	ldr	r0, [pc, #200]	; (8001c34 <print_help+0x1b8>)
 8001b6a:	f7ff fedf 	bl	800192c <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3301      	adds	r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	4a2c      	ldr	r2, [pc, #176]	; (8001c28 <print_help+0x1ac>)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	212c      	movs	r1, #44	; 0x2c
 8001b7a:	fb01 f303 	mul.w	r3, r1, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001b82:	f1c3 040b 	rsb	r4, r3, #11
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	222c      	movs	r2, #44	; 0x2c
 8001b8a:	fb02 f303 	mul.w	r3, r2, r3
 8001b8e:	4a26      	ldr	r2, [pc, #152]	; (8001c28 <print_help+0x1ac>)
 8001b90:	4413      	add	r3, r2
 8001b92:	3304      	adds	r3, #4
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff5b 	bl	8001a50 <str_length>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	dbe1      	blt.n	8001b68 <print_help+0xec>
			switch (microrl_actions[i].level){
 8001ba4:	4a20      	ldr	r2, [pc, #128]	; (8001c28 <print_help+0x1ac>)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	212c      	movs	r1, #44	; 0x2c
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <print_help+0x140>
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d004      	beq.n	8001bc4 <print_help+0x148>
 8001bba:	e007      	b.n	8001bcc <print_help+0x150>
			case 0:
				print ("-");
 8001bbc:	481f      	ldr	r0, [pc, #124]	; (8001c3c <print_help+0x1c0>)
 8001bbe:	f7ff feb5 	bl	800192c <print>
				break;
 8001bc2:	e007      	b.n	8001bd4 <print_help+0x158>
			case 1:
				print ("^");
 8001bc4:	481e      	ldr	r0, [pc, #120]	; (8001c40 <print_help+0x1c4>)
 8001bc6:	f7ff feb1 	bl	800192c <print>
				break;
 8001bca:	e003      	b.n	8001bd4 <print_help+0x158>
			default:
				print ("#");
 8001bcc:	481d      	ldr	r0, [pc, #116]	; (8001c44 <print_help+0x1c8>)
 8001bce:	f7ff fead 	bl	800192c <print>
				break;
 8001bd2:	bf00      	nop
			}
			print (" ");
 8001bd4:	4817      	ldr	r0, [pc, #92]	; (8001c34 <print_help+0x1b8>)
 8001bd6:	f7ff fea9 	bl	800192c <print>
			print (microrl_actions[i].help_msg);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	222c      	movs	r2, #44	; 0x2c
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	3308      	adds	r3, #8
 8001be4:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <print_help+0x1ac>)
 8001be6:	4413      	add	r3, r2
 8001be8:	3305      	adds	r3, #5
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fe9e 	bl	800192c <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2b0e      	cmp	r3, #14
 8001bfa:	f67f af5d 	bls.w	8001ab8 <print_help+0x3c>
		}
	}
	print(ENDL);
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <print_help+0x198>)
 8001c00:	f7ff fe94 	bl	800192c <print>
	return 0;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd90      	pop	{r4, r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	0800ee98 	.word	0x0800ee98
 8001c14:	0800eea8 	.word	0x0800eea8
 8001c18:	0800eeac 	.word	0x0800eeac
 8001c1c:	0800eeb4 	.word	0x0800eeb4
 8001c20:	0800eeb8 	.word	0x0800eeb8
 8001c24:	0800eecc 	.word	0x0800eecc
 8001c28:	0800f0f4 	.word	0x0800f0f4
 8001c2c:	0800eee0 	.word	0x0800eee0
 8001c30:	0800eee8 	.word	0x0800eee8
 8001c34:	0800eeec 	.word	0x0800eeec
 8001c38:	0800f444 	.word	0x0800f444
 8001c3c:	0800eef0 	.word	0x0800eef0
 8001c40:	0800eef4 	.word	0x0800eef4
 8001c44:	0800eef8 	.word	0x0800eef8

08001c48 <execute>:



int execute (int argc, const char * const * argv)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	e056      	b.n	8001d16 <execute+0xce>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	e045      	b.n	8001cfa <execute+0xb2>
		{
			tokens_found = false;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 8001c72:	4a55      	ldr	r2, [pc, #340]	; (8001dc8 <execute+0x180>)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	212c      	movs	r1, #44	; 0x2c
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d001      	beq.n	8001c8e <execute+0x46>
				synonym_level = current_level; // save the synonym level
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c94:	d003      	beq.n	8001c9e <execute+0x56>
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	db31      	blt.n	8001d02 <execute+0xba>
				break;
			if (current_level == i)
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d101      	bne.n	8001caa <execute+0x62>
				last_main_synonym = n;
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	212c      	movs	r1, #44	; 0x2c
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	4942      	ldr	r1, [pc, #264]	; (8001dc8 <execute+0x180>)
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	f7fe fa43 	bl	8000150 <strcmp>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d111      	bne.n	8001cf4 <execute+0xac>
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d10d      	bne.n	8001cf4 <execute+0xac>
					(i == synonym_level))
			{
				tokens_found = true;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	623a      	str	r2, [r7, #32]
 8001ce2:	4a39      	ldr	r2, [pc, #228]	; (8001dc8 <execute+0x180>)
 8001ce4:	212c      	movs	r1, #44	; 0x2c
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	3328      	adds	r3, #40	; 0x28
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001cf2:	e007      	b.n	8001d04 <execute+0xbc>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b0e      	cmp	r3, #14
 8001cfe:	d9b6      	bls.n	8001c6e <execute+0x26>
 8001d00:	e000      	b.n	8001d04 <execute+0xbc>
				break;
 8001d02:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8001d04:	7efb      	ldrb	r3, [r7, #27]
 8001d06:	f083 0301 	eor.w	r3, r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d107      	bne.n	8001d20 <execute+0xd8>
	for (int i = 0; i < argc; i++)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	dba4      	blt.n	8001c68 <execute+0x20>
 8001d1e:	e000      	b.n	8001d22 <execute+0xda>
			break;
 8001d20:	bf00      	nop
	}

	if (func != NULL)
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <execute+0xec>
	{
		return func(argc, argv); // function found
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	6839      	ldr	r1, [r7, #0]
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	4798      	blx	r3
 8001d30:	4603      	mov	r3, r0
 8001d32:	e045      	b.n	8001dc0 <execute+0x178>
	} else if (tokens_found)
 8001d34:	7efb      	ldrb	r3, [r7, #27]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d021      	beq.n	8001d7e <execute+0x136>
	{
		print_color ("command: '", C_L_RED);
 8001d3a:	210a      	movs	r1, #10
 8001d3c:	4823      	ldr	r0, [pc, #140]	; (8001dcc <execute+0x184>)
 8001d3e:	f7ff fe61 	bl	8001a04 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	210a      	movs	r1, #10
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fe5b 	bl	8001a04 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 8001d4e:	210a      	movs	r1, #10
 8001d50:	481f      	ldr	r0, [pc, #124]	; (8001dd0 <execute+0x188>)
 8001d52:	f7ff fe57 	bl	8001a04 <print_color>
		print(ENDL);
 8001d56:	481f      	ldr	r0, [pc, #124]	; (8001dd4 <execute+0x18c>)
 8001d58:	f7ff fde8 	bl	800192c <print>
		print_color ("use '", C_NC);
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	481e      	ldr	r0, [pc, #120]	; (8001dd8 <execute+0x190>)
 8001d60:	f7ff fe50 	bl	8001a04 <print_color>
		print_color ("?", C_GREEN);
 8001d64:	2105      	movs	r1, #5
 8001d66:	481d      	ldr	r0, [pc, #116]	; (8001ddc <execute+0x194>)
 8001d68:	f7ff fe4c 	bl	8001a04 <print_color>
		print_color ("' for help", C_NC);
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	481c      	ldr	r0, [pc, #112]	; (8001de0 <execute+0x198>)
 8001d70:	f7ff fe48 	bl	8001a04 <print_color>
		print (ENDL);
 8001d74:	4817      	ldr	r0, [pc, #92]	; (8001dd4 <execute+0x18c>)
 8001d76:	f7ff fdd9 	bl	800192c <print>
		return 1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e020      	b.n	8001dc0 <execute+0x178>
	}
	else
	{
		print_color ("command: '", C_RED);
 8001d7e:	2109      	movs	r1, #9
 8001d80:	4812      	ldr	r0, [pc, #72]	; (8001dcc <execute+0x184>)
 8001d82:	f7ff fe3f 	bl	8001a04 <print_color>
		print_color ((char*)argv[0], C_RED);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2109      	movs	r1, #9
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fe39 	bl	8001a04 <print_color>
		print_color ("' not found", C_RED);
 8001d92:	2109      	movs	r1, #9
 8001d94:	4813      	ldr	r0, [pc, #76]	; (8001de4 <execute+0x19c>)
 8001d96:	f7ff fe35 	bl	8001a04 <print_color>
		print(ENDL);
 8001d9a:	480e      	ldr	r0, [pc, #56]	; (8001dd4 <execute+0x18c>)
 8001d9c:	f7ff fdc6 	bl	800192c <print>
		print_color ("use '", C_NC);
 8001da0:	2100      	movs	r1, #0
 8001da2:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <execute+0x190>)
 8001da4:	f7ff fe2e 	bl	8001a04 <print_color>
		print_color ("?", C_GREEN);
 8001da8:	2105      	movs	r1, #5
 8001daa:	480c      	ldr	r0, [pc, #48]	; (8001ddc <execute+0x194>)
 8001dac:	f7ff fe2a 	bl	8001a04 <print_color>
		print_color ("' for help", C_NC);
 8001db0:	2100      	movs	r1, #0
 8001db2:	480b      	ldr	r0, [pc, #44]	; (8001de0 <execute+0x198>)
 8001db4:	f7ff fe26 	bl	8001a04 <print_color>
		print (ENDL);
 8001db8:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <execute+0x18c>)
 8001dba:	f7ff fdb7 	bl	800192c <print>
		return 1;
 8001dbe:	2301      	movs	r3, #1

	}
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3728      	adds	r7, #40	; 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	0800f0f4 	.word	0x0800f0f4
 8001dcc:	0800eefc 	.word	0x0800eefc
 8001dd0:	0800ef08 	.word	0x0800ef08
 8001dd4:	0800eea8 	.word	0x0800eea8
 8001dd8:	0800ef28 	.word	0x0800ef28
 8001ddc:	0800ef30 	.word	0x0800ef30
 8001de0:	0800ef34 	.word	0x0800ef34
 8001de4:	0800ef40 	.word	0x0800ef40

08001de8 <sigint>:
}
#endif


void sigint (void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <sigint+0x50>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
	show_clock = true;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <sigint+0x54>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]

	print (ENDL);
 8001dfa:	4811      	ldr	r0, [pc, #68]	; (8001e40 <sigint+0x58>)
 8001dfc:	f7ff fd96 	bl	800192c <print>
	print ("^C catched!");
 8001e00:	4810      	ldr	r0, [pc, #64]	; (8001e44 <sigint+0x5c>)
 8001e02:	f7ff fd93 	bl	800192c <print>
	int i = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 8001e0a:	e009      	b.n	8001e20 <sigint+0x38>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <sigint+0x60>)
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <sigint+0x58>)
 8001e18:	5cd3      	ldrb	r3, [r2, r3]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f7ff fc5e 	bl	80016dc <microrl_insert_char>
	while (ENTER[i])
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <sigint+0x58>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1ef      	bne.n	8001e0c <sigint+0x24>
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200001b2 	.word	0x200001b2
 8001e3c:	2000000d 	.word	0x2000000d
 8001e40:	0800eea8 	.word	0x0800eea8
 8001e44:	0800ef4c 	.word	0x0800ef4c
 8001e48:	20000008 	.word	0x20000008

08001e4c <init_microrl>:

void init_microrl(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <init_microrl+0x2c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4909      	ldr	r1, [pc, #36]	; (8001e7c <init_microrl+0x30>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff faac 	bl	80013b4 <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <init_microrl+0x2c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4907      	ldr	r1, [pc, #28]	; (8001e80 <init_microrl+0x34>)
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff face 	bl	8001404 <microrl_set_execute_callback>
	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <init_microrl+0x2c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4905      	ldr	r1, [pc, #20]	; (8001e84 <init_microrl+0x38>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fad5 	bl	800141e <microrl_set_sigint_callback>
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000008 	.word	0x20000008
 8001e7c:	0800192d 	.word	0x0800192d
 8001e80:	08001c49 	.word	0x08001c49
 8001e84:	08001de9 	.word	0x08001de9

08001e88 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <clear_screen+0x20>)
 8001e94:	f7ff fd4a 	bl	800192c <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 8001e98:	4804      	ldr	r0, [pc, #16]	; (8001eac <clear_screen+0x24>)
 8001e9a:	f7ff fd47 	bl	800192c <print>
	return 0;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	0800ef58 	.word	0x0800ef58
 8001eac:	0800ef60 	.word	0x0800ef60

08001eb0 <set_CDC_ready>:


void set_CDC_ready(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <set_CDC_ready+0x14>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	200001b1 	.word	0x200001b1

08001ec8 <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <color_toggle+0x30>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	f083 0301 	eor.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf14      	ite	ne
 8001ee0:	2301      	movne	r3, #1
 8001ee2:	2300      	moveq	r3, #0
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <color_toggle+0x30>)
 8001ee8:	701a      	strb	r2, [r3, #0]
	return 0;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	2000000c 	.word	0x2000000c

08001efc <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
	color_out = 1;
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <color_on+0x28>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 8001f0c:	2105      	movs	r1, #5
 8001f0e:	4806      	ldr	r0, [pc, #24]	; (8001f28 <color_on+0x2c>)
 8001f10:	f7ff fd78 	bl	8001a04 <print_color>
	print(ENDL);
 8001f14:	4805      	ldr	r0, [pc, #20]	; (8001f2c <color_on+0x30>)
 8001f16:	f7ff fd09 	bl	800192c <print>
	return 0;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	2000000c 	.word	0x2000000c
 8001f28:	0800ef64 	.word	0x0800ef64
 8001f2c:	0800eea8 	.word	0x0800eea8

08001f30 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
	color_out = 0;
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <color_off+0x28>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8001f40:	4806      	ldr	r0, [pc, #24]	; (8001f5c <color_off+0x2c>)
 8001f42:	f7ff fcf3 	bl	800192c <print>
	print(ENDL);
 8001f46:	4806      	ldr	r0, [pc, #24]	; (8001f60 <color_off+0x30>)
 8001f48:	f7ff fcf0 	bl	800192c <print>
	return 0;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	2000000c 	.word	0x2000000c
 8001f5c:	0800ef78 	.word	0x0800ef78
 8001f60:	0800eea8 	.word	0x0800eea8

08001f64 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
	if (color_out)
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <color_show+0x34>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d004      	beq.n	8001f80 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8001f76:	2105      	movs	r1, #5
 8001f78:	4808      	ldr	r0, [pc, #32]	; (8001f9c <color_show+0x38>)
 8001f7a:	f7ff fd43 	bl	8001a04 <print_color>
 8001f7e:	e002      	b.n	8001f86 <color_show+0x22>
	else
		print ("Color output is OFF");
 8001f80:	4807      	ldr	r0, [pc, #28]	; (8001fa0 <color_show+0x3c>)
 8001f82:	f7ff fcd3 	bl	800192c <print>
	print(ENDL);
 8001f86:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <color_show+0x40>)
 8001f88:	f7ff fcd0 	bl	800192c <print>
	return 0;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000000c 	.word	0x2000000c
 8001f9c:	0800ef64 	.word	0x0800ef64
 8001fa0:	0800ef78 	.word	0x0800ef78
 8001fa4:	0800eea8 	.word	0x0800eea8

08001fa8 <nema_toggle>:


int nema_toggle 	(int argc, const char * const * argv)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
	nema_out ^= 1;
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <nema_toggle+0x30>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	f083 0301 	eor.w	r3, r3, #1
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf14      	ite	ne
 8001fc0:	2301      	movne	r3, #1
 8001fc2:	2300      	moveq	r3, #0
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <nema_toggle+0x30>)
 8001fc8:	701a      	strb	r2, [r3, #0]
	return 0;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	200001b2 	.word	0x200001b2

08001fdc <vfd>:
	print(ENDL);
	return 0;
}

int vfd (int argc, const char * const * argv)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
	show_clock = false;
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <vfd+0x7c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < argc; i++)
 8001fec:	2301      	movs	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e028      	b.n	8002044 <vfd+0x68>
	{
		uint16_t temp = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	81fb      	strh	r3, [r7, #14]
		char * pchar = (char*)argv[i];
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	613b      	str	r3, [r7, #16]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <vfd+0x80>)
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	f107 010e 	add.w	r1, r7, #14
 800200a:	2300      	movs	r3, #0
 800200c:	2264      	movs	r2, #100	; 0x64
 800200e:	f009 fc3d 	bl	800b88c <xQueueGenericSend>
		while (*pchar)
 8002012:	e010      	b.n	8002036 <vfd+0x5a>
		{
			temp = get_char(*(pchar++));
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	613a      	str	r2, [r7, #16]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fa55 	bl	80024cc <get_char>
 8002022:	4603      	mov	r3, r0
 8002024:	81fb      	strh	r3, [r7, #14]
			xQueueSendToBack(qVFDHandle, &temp, 100);
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <vfd+0x80>)
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	f107 010e 	add.w	r1, r7, #14
 800202e:	2300      	movs	r3, #0
 8002030:	2264      	movs	r2, #100	; 0x64
 8002032:	f009 fc2b 	bl	800b88c <xQueueGenericSend>
		while (*pchar)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1ea      	bne.n	8002014 <vfd+0x38>
	for (int i = 1; i < argc; i++)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	3301      	adds	r3, #1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	dbd2      	blt.n	8001ff2 <vfd+0x16>
		}
	}
	return 0;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000000d 	.word	0x2000000d
 800205c:	20002490 	.word	0x20002490

08002060 <get_nema>:
	return 0;
}


bool get_nema(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
	return nema_out;
 8002064:	4b02      	ldr	r3, [pc, #8]	; (8002070 <get_nema+0x10>)
 8002066:	781b      	ldrb	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	200001b2 	.word	0x200001b2

08002074 <set_td>:



int set_td		(int argc, const char * const * argv)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
	if (argc == 3 && str_length(argv[2]) == 6)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d146      	bne.n	8002112 <set_td+0x9e>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	3308      	adds	r3, #8
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fce0 	bl	8001a50 <str_length>
 8002090:	4603      	mov	r3, r0
 8002092:	2b06      	cmp	r3, #6
 8002094:	d13d      	bne.n	8002112 <set_td+0x9e>
	{
		uint8_t arr [3];


			int temp = 6;
 8002096:	2306      	movs	r3, #6
 8002098:	613b      	str	r3, [r7, #16]
			char * pchar = (char*)argv[2];
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	60fb      	str	r3, [r7, #12]
			for (int i = 0; i < 3; i++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	e021      	b.n	80020ea <set_td+0x76>
			{
				arr[2-i] = (argv[2][i*2+1]-'0')+((argv[2][i*2]-'0')<<4);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	3308      	adds	r3, #8
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	3301      	adds	r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	781a      	ldrb	r2, [r3, #0]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	3308      	adds	r3, #8
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6979      	ldr	r1, [r7, #20]
 80020be:	0049      	lsls	r1, r1, #1
 80020c0:	440b      	add	r3, r1
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	3b30      	subs	r3, #48	; 0x30
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f1c3 0302 	rsb	r3, r3, #2
 80020d6:	3a30      	subs	r2, #48	; 0x30
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	f107 0118 	add.w	r1, r7, #24
 80020de:	440b      	add	r3, r1
 80020e0:	f803 2c10 	strb.w	r2, [r3, #-16]
			for (int i = 0; i < 3; i++)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3301      	adds	r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	ddda      	ble.n	80020a6 <set_td+0x32>
			}
		d3231_set(arr, argv[1][0] == 'd');
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	3304      	adds	r3, #4
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b64      	cmp	r3, #100	; 0x64
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2da      	uxtb	r2, r3
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f853 	bl	80001b4 <d3231_set>
		return 0;
 800210e:	2300      	movs	r3, #0
 8002110:	e007      	b.n	8002122 <set_td+0xae>
	}
	print_color("wrong format", C_RED);
 8002112:	2109      	movs	r1, #9
 8002114:	4805      	ldr	r0, [pc, #20]	; (800212c <set_td+0xb8>)
 8002116:	f7ff fc75 	bl	8001a04 <print_color>
	print(ENDL);
 800211a:	4805      	ldr	r0, [pc, #20]	; (8002130 <set_td+0xbc>)
 800211c:	f7ff fc06 	bl	800192c <print>
	return 0;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	0800ef8c 	.word	0x0800ef8c
 8002130:	0800eea8 	.word	0x0800eea8

08002134 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <MX_SPI2_Init+0x64>)
 800213a:	4a18      	ldr	r2, [pc, #96]	; (800219c <MX_SPI2_Init+0x68>)
 800213c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <MX_SPI2_Init+0x64>)
 8002140:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002144:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <MX_SPI2_Init+0x64>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <MX_SPI2_Init+0x64>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_SPI2_Init+0x64>)
 8002154:	2202      	movs	r2, #2
 8002156:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <MX_SPI2_Init+0x64>)
 800215a:	2201      	movs	r2, #1
 800215c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <MX_SPI2_Init+0x64>)
 8002160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002164:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_SPI2_Init+0x64>)
 8002168:	2218      	movs	r2, #24
 800216a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <MX_SPI2_Init+0x64>)
 800216e:	2280      	movs	r2, #128	; 0x80
 8002170:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_SPI2_Init+0x64>)
 8002174:	2200      	movs	r2, #0
 8002176:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <MX_SPI2_Init+0x64>)
 800217a:	2200      	movs	r2, #0
 800217c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_SPI2_Init+0x64>)
 8002180:	220a      	movs	r2, #10
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002184:	4804      	ldr	r0, [pc, #16]	; (8002198 <MX_SPI2_Init+0x64>)
 8002186:	f003 ffab 	bl	80060e0 <HAL_SPI_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002190:	f7fe ff8c 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20002598 	.word	0x20002598
 800219c:	40003800 	.word	0x40003800

080021a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 0310 	add.w	r3, r7, #16
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_SPI_MspInit+0x8c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d131      	bne.n	8002224 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_SPI_MspInit+0x90>)
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <HAL_SPI_MspInit+0x90>)
 80021c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ca:	61d3      	str	r3, [r2, #28]
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_SPI_MspInit+0x90>)
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d8:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_SPI_MspInit+0x90>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a14      	ldr	r2, [pc, #80]	; (8002230 <HAL_SPI_MspInit+0x90>)
 80021de:	f043 0308 	orr.w	r3, r3, #8
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_SPI_MspInit+0x90>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80021f0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80021f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021fa:	2303      	movs	r3, #3
 80021fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fe:	f107 0310 	add.w	r3, r7, #16
 8002202:	4619      	mov	r1, r3
 8002204:	480b      	ldr	r0, [pc, #44]	; (8002234 <HAL_SPI_MspInit+0x94>)
 8002206:	f000 fbb5 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800220a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800220e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002218:	f107 0310 	add.w	r3, r7, #16
 800221c:	4619      	mov	r1, r3
 800221e:	4805      	ldr	r0, [pc, #20]	; (8002234 <HAL_SPI_MspInit+0x94>)
 8002220:	f000 fba8 	bl	8002974 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002224:	bf00      	nop
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40003800 	.word	0x40003800
 8002230:	40021000 	.word	0x40021000
 8002234:	40010c00 	.word	0x40010c00

08002238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800223e:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_MspInit+0x68>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	4a17      	ldr	r2, [pc, #92]	; (80022a0 <HAL_MspInit+0x68>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6193      	str	r3, [r2, #24]
 800224a:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <HAL_MspInit+0x68>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_MspInit+0x68>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <HAL_MspInit+0x68>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	61d3      	str	r3, [r2, #28]
 8002262:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <HAL_MspInit+0x68>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	210f      	movs	r1, #15
 8002272:	f06f 0001 	mvn.w	r0, #1
 8002276:	f000 faa2 	bl	80027be <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <HAL_MspInit+0x6c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <HAL_MspInit+0x6c>)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010000 	.word	0x40010000

080022a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	; 0x30
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80022b8:	2200      	movs	r2, #0
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	2019      	movs	r0, #25
 80022be:	f000 fa7e 	bl	80027be <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80022c2:	2019      	movs	r0, #25
 80022c4:	f000 fa97 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022c8:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <HAL_InitTick+0x9c>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <HAL_InitTick+0x9c>)
 80022ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022d2:	6193      	str	r3, [r2, #24]
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_InitTick+0x9c>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022e0:	f107 0210 	add.w	r2, r7, #16
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 fdf4 	bl	8005ed8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022f0:	f003 fdde 	bl	8005eb0 <HAL_RCC_GetPCLK2Freq>
 80022f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f8:	4a13      	ldr	r2, [pc, #76]	; (8002348 <HAL_InitTick+0xa0>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	0c9b      	lsrs	r3, r3, #18
 8002300:	3b01      	subs	r3, #1
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_InitTick+0xa4>)
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <HAL_InitTick+0xa8>)
 8002308:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <HAL_InitTick+0xa4>)
 800230c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002310:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002312:	4a0e      	ldr	r2, [pc, #56]	; (800234c <HAL_InitTick+0xa4>)
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_InitTick+0xa4>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_InitTick+0xa4>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002324:	4809      	ldr	r0, [pc, #36]	; (800234c <HAL_InitTick+0xa4>)
 8002326:	f004 f941 	bl	80065ac <HAL_TIM_Base_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d104      	bne.n	800233a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002330:	4806      	ldr	r0, [pc, #24]	; (800234c <HAL_InitTick+0xa4>)
 8002332:	f004 f993 	bl	800665c <HAL_TIM_Base_Start_IT>
 8002336:	4603      	mov	r3, r0
 8002338:	e000      	b.n	800233c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
}
 800233c:	4618      	mov	r0, r3
 800233e:	3730      	adds	r7, #48	; 0x30
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	431bde83 	.word	0x431bde83
 800234c:	200025f0 	.word	0x200025f0
 8002350:	40012c00 	.word	0x40012c00

08002354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <NMI_Handler+0x4>

0800235a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235e:	e7fe      	b.n	800235e <HardFault_Handler+0x4>

08002360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <MemManage_Handler+0x4>

08002366 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <BusFault_Handler+0x4>

0800236c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <UsageFault_Handler+0x4>

08002372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002382:	2001      	movs	r0, #1
 8002384:	f000 fcc2 	bl	8002d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}

0800238c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002390:	4802      	ldr	r0, [pc, #8]	; (800239c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002392:	f001 fe0e 	bl	8003fb2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20003354 	.word	0x20003354

080023a0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <TIM1_UP_IRQHandler+0x10>)
 80023a6:	f004 f9ab 	bl	8006700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	200025f0 	.word	0x200025f0

080023b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <USART2_IRQHandler+0x10>)
 80023ba:	f004 fbbf 	bl	8006b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20002638 	.word	0x20002638

080023c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <MX_USART2_UART_Init+0x50>)
 80023dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 80023e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 80023fa:	220c      	movs	r2, #12
 80023fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fe:	4b08      	ldr	r3, [pc, #32]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 8002406:	2200      	movs	r2, #0
 8002408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800240a:	4805      	ldr	r0, [pc, #20]	; (8002420 <MX_USART2_UART_Init+0x4c>)
 800240c:	f004 fb18 	bl	8006a40 <HAL_UART_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002416:	f7fe fe49 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20002638 	.word	0x20002638
 8002424:	40004400 	.word	0x40004400

08002428 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0310 	add.w	r3, r7, #16
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1f      	ldr	r2, [pc, #124]	; (80024c0 <HAL_UART_MspInit+0x98>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d137      	bne.n	80024b8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <HAL_UART_MspInit+0x9c>)
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <HAL_UART_MspInit+0x9c>)
 800244e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002452:	61d3      	str	r3, [r2, #28]
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_UART_MspInit+0x9c>)
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <HAL_UART_MspInit+0x9c>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	4a17      	ldr	r2, [pc, #92]	; (80024c4 <HAL_UART_MspInit+0x9c>)
 8002466:	f043 0304 	orr.w	r3, r3, #4
 800246a:	6193      	str	r3, [r2, #24]
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <HAL_UART_MspInit+0x9c>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002478:	2304      	movs	r3, #4
 800247a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002484:	f107 0310 	add.w	r3, r7, #16
 8002488:	4619      	mov	r1, r3
 800248a:	480f      	ldr	r0, [pc, #60]	; (80024c8 <HAL_UART_MspInit+0xa0>)
 800248c:	f000 fa72 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002490:	2308      	movs	r3, #8
 8002492:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249c:	f107 0310 	add.w	r3, r7, #16
 80024a0:	4619      	mov	r1, r3
 80024a2:	4809      	ldr	r0, [pc, #36]	; (80024c8 <HAL_UART_MspInit+0xa0>)
 80024a4:	f000 fa66 	bl	8002974 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80024a8:	2200      	movs	r2, #0
 80024aa:	2105      	movs	r1, #5
 80024ac:	2026      	movs	r0, #38	; 0x26
 80024ae:	f000 f986 	bl	80027be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024b2:	2026      	movs	r0, #38	; 0x26
 80024b4:	f000 f99f 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80024b8:	bf00      	nop
 80024ba:	3720      	adds	r7, #32
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40004400 	.word	0x40004400
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40010800 	.word	0x40010800

080024cc <get_char>:
const uint8_t ALPHAS = (sizeof(vfd_alpha)/sizeof(vfd_alpha[0]));
const uint8_t ALPHAR = (sizeof(vfd_alpha_ru)/sizeof(vfd_alpha_ru[0]));
const uint8_t SPECIAL = (sizeof(vfd_special)/sizeof(vfd_special[0]));

uint16_t get_char(char input)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
	if ('0' <= input && input <= '9')
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	2b2f      	cmp	r3, #47	; 0x2f
 80024da:	d908      	bls.n	80024ee <get_char+0x22>
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	2b39      	cmp	r3, #57	; 0x39
 80024e0:	d805      	bhi.n	80024ee <get_char+0x22>
		return vfd_digits[input - '0'];
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	3b30      	subs	r3, #48	; 0x30
 80024e6:	4a2a      	ldr	r2, [pc, #168]	; (8002590 <get_char+0xc4>)
 80024e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ec:	e04a      	b.n	8002584 <get_char+0xb8>
	if (0 <= input && input <= 9)
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	2b09      	cmp	r3, #9
 80024f2:	d804      	bhi.n	80024fe <get_char+0x32>
		return vfd_digits[(uint8_t)input];
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	4a26      	ldr	r2, [pc, #152]	; (8002590 <get_char+0xc4>)
 80024f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024fc:	e042      	b.n	8002584 <get_char+0xb8>
	if ('a' <= input && input <= 'z')
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	2b60      	cmp	r3, #96	; 0x60
 8002502:	d908      	bls.n	8002516 <get_char+0x4a>
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	2b7a      	cmp	r3, #122	; 0x7a
 8002508:	d805      	bhi.n	8002516 <get_char+0x4a>
		return vfd_alpha[input - 'a'];
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	3b61      	subs	r3, #97	; 0x61
 800250e:	4a21      	ldr	r2, [pc, #132]	; (8002594 <get_char+0xc8>)
 8002510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002514:	e036      	b.n	8002584 <get_char+0xb8>
	if ('A' <= input && input <= 'Z')
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2b40      	cmp	r3, #64	; 0x40
 800251a:	d908      	bls.n	800252e <get_char+0x62>
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	2b5a      	cmp	r3, #90	; 0x5a
 8002520:	d805      	bhi.n	800252e <get_char+0x62>
		return vfd_alpha[input - 'A'];
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	3b41      	subs	r3, #65	; 0x41
 8002526:	4a1b      	ldr	r2, [pc, #108]	; (8002594 <get_char+0xc8>)
 8002528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800252c:	e02a      	b.n	8002584 <get_char+0xb8>
	if (192 <= input && input <= 223)
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	2bbf      	cmp	r3, #191	; 0xbf
 8002532:	d908      	bls.n	8002546 <get_char+0x7a>
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	2bdf      	cmp	r3, #223	; 0xdf
 8002538:	d805      	bhi.n	8002546 <get_char+0x7a>
		return vfd_alpha_ru[input - 192];
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	3bc0      	subs	r3, #192	; 0xc0
 800253e:	4a16      	ldr	r2, [pc, #88]	; (8002598 <get_char+0xcc>)
 8002540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002544:	e01e      	b.n	8002584 <get_char+0xb8>
	if (224 <= input && input <= 255)
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	2bdf      	cmp	r3, #223	; 0xdf
 800254a:	d905      	bls.n	8002558 <get_char+0x8c>
		return vfd_alpha_ru[input - 224];
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	3be0      	subs	r3, #224	; 0xe0
 8002550:	4a11      	ldr	r2, [pc, #68]	; (8002598 <get_char+0xcc>)
 8002552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002556:	e015      	b.n	8002584 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e00e      	b.n	800257c <get_char+0xb0>
		if (vfd_special_char[i] == input)
 800255e:	4a0f      	ldr	r2, [pc, #60]	; (800259c <get_char+0xd0>)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4413      	add	r3, r2
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	79fa      	ldrb	r2, [r7, #7]
 8002568:	429a      	cmp	r2, r3
 800256a:	d104      	bne.n	8002576 <get_char+0xaa>
			return vfd_special[i];
 800256c:	4a0c      	ldr	r2, [pc, #48]	; (80025a0 <get_char+0xd4>)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002574:	e006      	b.n	8002584 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3301      	adds	r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b10      	cmp	r3, #16
 8002580:	d9ed      	bls.n	800255e <get_char+0x92>
	return 0;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	0800f460 	.word	0x0800f460
 8002594:	0800f474 	.word	0x0800f474
 8002598:	0800f4a8 	.word	0x0800f4a8
 800259c:	0800f50c 	.word	0x0800f50c
 80025a0:	0800f4e8 	.word	0x0800f4e8

080025a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a4:	480c      	ldr	r0, [pc, #48]	; (80025d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025a6:	490d      	ldr	r1, [pc, #52]	; (80025dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025a8:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025ac:	e002      	b.n	80025b4 <LoopCopyDataInit>

080025ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b2:	3304      	adds	r3, #4

080025b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b8:	d3f9      	bcc.n	80025ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ba:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025bc:	4c0a      	ldr	r4, [pc, #40]	; (80025e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c0:	e001      	b.n	80025c6 <LoopFillZerobss>

080025c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c4:	3204      	adds	r2, #4

080025c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c8:	d3fb      	bcc.n	80025c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025ca:	f7ff fefd 	bl	80023c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ce:	f00c fb8f 	bl	800ecf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025d2:	f7fe fce9 	bl	8000fa8 <main>
  bx lr
 80025d6:	4770      	bx	lr
  ldr r0, =_sdata
 80025d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025dc:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80025e0:	0800f528 	.word	0x0800f528
  ldr r2, =_sbss
 80025e4:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80025e8:	20003640 	.word	0x20003640

080025ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025ec:	e7fe      	b.n	80025ec <ADC1_2_IRQHandler>
	...

080025f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_Init+0x28>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a07      	ldr	r2, [pc, #28]	; (8002618 <HAL_Init+0x28>)
 80025fa:	f043 0310 	orr.w	r3, r3, #16
 80025fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002600:	2003      	movs	r0, #3
 8002602:	f000 f8d1 	bl	80027a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002606:	2000      	movs	r0, #0
 8002608:	f7ff fe4e 	bl	80022a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800260c:	f7ff fe14 	bl	8002238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40022000 	.word	0x40022000

0800261c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_IncTick+0x1c>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_IncTick+0x20>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4413      	add	r3, r2
 800262c:	4a03      	ldr	r2, [pc, #12]	; (800263c <HAL_IncTick+0x20>)
 800262e:	6013      	str	r3, [r2, #0]
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	20000018 	.word	0x20000018
 800263c:	2000267c 	.word	0x2000267c

08002640 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return uwTick;
 8002644:	4b02      	ldr	r3, [pc, #8]	; (8002650 <HAL_GetTick+0x10>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	2000267c 	.word	0x2000267c

08002654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002670:	4013      	ands	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800267c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002686:	4a04      	ldr	r2, [pc, #16]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	60d3      	str	r3, [r2, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <__NVIC_GetPriorityGrouping+0x18>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	f003 0307 	and.w	r3, r3, #7
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	db0b      	blt.n	80026e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	4906      	ldr	r1, [pc, #24]	; (80026ec <__NVIC_EnableIRQ+0x34>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	2001      	movs	r0, #1
 80026da:	fa00 f202 	lsl.w	r2, r0, r2
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	e000e100 	.word	0xe000e100

080026f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	6039      	str	r1, [r7, #0]
 80026fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002700:	2b00      	cmp	r3, #0
 8002702:	db0a      	blt.n	800271a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	b2da      	uxtb	r2, r3
 8002708:	490c      	ldr	r1, [pc, #48]	; (800273c <__NVIC_SetPriority+0x4c>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	0112      	lsls	r2, r2, #4
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	440b      	add	r3, r1
 8002714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002718:	e00a      	b.n	8002730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4908      	ldr	r1, [pc, #32]	; (8002740 <__NVIC_SetPriority+0x50>)
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	3b04      	subs	r3, #4
 8002728:	0112      	lsls	r2, r2, #4
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	440b      	add	r3, r1
 800272e:	761a      	strb	r2, [r3, #24]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000e100 	.word	0xe000e100
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f1c3 0307 	rsb	r3, r3, #7
 800275e:	2b04      	cmp	r3, #4
 8002760:	bf28      	it	cs
 8002762:	2304      	movcs	r3, #4
 8002764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3304      	adds	r3, #4
 800276a:	2b06      	cmp	r3, #6
 800276c:	d902      	bls.n	8002774 <NVIC_EncodePriority+0x30>
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3b03      	subs	r3, #3
 8002772:	e000      	b.n	8002776 <NVIC_EncodePriority+0x32>
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002778:	f04f 32ff 	mov.w	r2, #4294967295
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	401a      	ands	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800278c:	f04f 31ff 	mov.w	r1, #4294967295
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	43d9      	mvns	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	4313      	orrs	r3, r2
         );
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3724      	adds	r7, #36	; 0x24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff4f 	bl	8002654 <__NVIC_SetPriorityGrouping>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d0:	f7ff ff64 	bl	800269c <__NVIC_GetPriorityGrouping>
 80027d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7ff ffb2 	bl	8002744 <NVIC_EncodePriority>
 80027e0:	4602      	mov	r2, r0
 80027e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff81 	bl	80026f0 <__NVIC_SetPriority>
}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff57 	bl	80026b8 <__NVIC_EnableIRQ>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002824:	2b02      	cmp	r3, #2
 8002826:	d008      	beq.n	800283a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2204      	movs	r2, #4
 800282c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e020      	b.n	800287c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 020e 	bic.w	r2, r2, #14
 8002848:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002862:	2101      	movs	r1, #1
 8002864:	fa01 f202 	lsl.w	r2, r1, r2
 8002868:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800287a:	7bfb      	ldrb	r3, [r7, #15]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
	...

08002888 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800289a:	2b02      	cmp	r3, #2
 800289c:	d005      	beq.n	80028aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2204      	movs	r2, #4
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e051      	b.n	800294e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 020e 	bic.w	r2, r2, #14
 80028b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0201 	bic.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a22      	ldr	r2, [pc, #136]	; (8002958 <HAL_DMA_Abort_IT+0xd0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d029      	beq.n	8002928 <HAL_DMA_Abort_IT+0xa0>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a20      	ldr	r2, [pc, #128]	; (800295c <HAL_DMA_Abort_IT+0xd4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d022      	beq.n	8002924 <HAL_DMA_Abort_IT+0x9c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1f      	ldr	r2, [pc, #124]	; (8002960 <HAL_DMA_Abort_IT+0xd8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d01a      	beq.n	800291e <HAL_DMA_Abort_IT+0x96>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <HAL_DMA_Abort_IT+0xdc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d012      	beq.n	8002918 <HAL_DMA_Abort_IT+0x90>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1c      	ldr	r2, [pc, #112]	; (8002968 <HAL_DMA_Abort_IT+0xe0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00a      	beq.n	8002912 <HAL_DMA_Abort_IT+0x8a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1a      	ldr	r2, [pc, #104]	; (800296c <HAL_DMA_Abort_IT+0xe4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d102      	bne.n	800290c <HAL_DMA_Abort_IT+0x84>
 8002906:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800290a:	e00e      	b.n	800292a <HAL_DMA_Abort_IT+0xa2>
 800290c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002910:	e00b      	b.n	800292a <HAL_DMA_Abort_IT+0xa2>
 8002912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002916:	e008      	b.n	800292a <HAL_DMA_Abort_IT+0xa2>
 8002918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800291c:	e005      	b.n	800292a <HAL_DMA_Abort_IT+0xa2>
 800291e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002922:	e002      	b.n	800292a <HAL_DMA_Abort_IT+0xa2>
 8002924:	2310      	movs	r3, #16
 8002926:	e000      	b.n	800292a <HAL_DMA_Abort_IT+0xa2>
 8002928:	2301      	movs	r3, #1
 800292a:	4a11      	ldr	r2, [pc, #68]	; (8002970 <HAL_DMA_Abort_IT+0xe8>)
 800292c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4798      	blx	r3
    } 
  }
  return status;
 800294e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40020008 	.word	0x40020008
 800295c:	4002001c 	.word	0x4002001c
 8002960:	40020030 	.word	0x40020030
 8002964:	40020044 	.word	0x40020044
 8002968:	40020058 	.word	0x40020058
 800296c:	4002006c 	.word	0x4002006c
 8002970:	40020000 	.word	0x40020000

08002974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002974:	b480      	push	{r7}
 8002976:	b08b      	sub	sp, #44	; 0x2c
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002982:	2300      	movs	r3, #0
 8002984:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002986:	e169      	b.n	8002c5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002988:	2201      	movs	r2, #1
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	f040 8158 	bne.w	8002c56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4a9a      	ldr	r2, [pc, #616]	; (8002c14 <HAL_GPIO_Init+0x2a0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d05e      	beq.n	8002a6e <HAL_GPIO_Init+0xfa>
 80029b0:	4a98      	ldr	r2, [pc, #608]	; (8002c14 <HAL_GPIO_Init+0x2a0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d875      	bhi.n	8002aa2 <HAL_GPIO_Init+0x12e>
 80029b6:	4a98      	ldr	r2, [pc, #608]	; (8002c18 <HAL_GPIO_Init+0x2a4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d058      	beq.n	8002a6e <HAL_GPIO_Init+0xfa>
 80029bc:	4a96      	ldr	r2, [pc, #600]	; (8002c18 <HAL_GPIO_Init+0x2a4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d86f      	bhi.n	8002aa2 <HAL_GPIO_Init+0x12e>
 80029c2:	4a96      	ldr	r2, [pc, #600]	; (8002c1c <HAL_GPIO_Init+0x2a8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d052      	beq.n	8002a6e <HAL_GPIO_Init+0xfa>
 80029c8:	4a94      	ldr	r2, [pc, #592]	; (8002c1c <HAL_GPIO_Init+0x2a8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d869      	bhi.n	8002aa2 <HAL_GPIO_Init+0x12e>
 80029ce:	4a94      	ldr	r2, [pc, #592]	; (8002c20 <HAL_GPIO_Init+0x2ac>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d04c      	beq.n	8002a6e <HAL_GPIO_Init+0xfa>
 80029d4:	4a92      	ldr	r2, [pc, #584]	; (8002c20 <HAL_GPIO_Init+0x2ac>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d863      	bhi.n	8002aa2 <HAL_GPIO_Init+0x12e>
 80029da:	4a92      	ldr	r2, [pc, #584]	; (8002c24 <HAL_GPIO_Init+0x2b0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d046      	beq.n	8002a6e <HAL_GPIO_Init+0xfa>
 80029e0:	4a90      	ldr	r2, [pc, #576]	; (8002c24 <HAL_GPIO_Init+0x2b0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d85d      	bhi.n	8002aa2 <HAL_GPIO_Init+0x12e>
 80029e6:	2b12      	cmp	r3, #18
 80029e8:	d82a      	bhi.n	8002a40 <HAL_GPIO_Init+0xcc>
 80029ea:	2b12      	cmp	r3, #18
 80029ec:	d859      	bhi.n	8002aa2 <HAL_GPIO_Init+0x12e>
 80029ee:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <HAL_GPIO_Init+0x80>)
 80029f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f4:	08002a6f 	.word	0x08002a6f
 80029f8:	08002a49 	.word	0x08002a49
 80029fc:	08002a5b 	.word	0x08002a5b
 8002a00:	08002a9d 	.word	0x08002a9d
 8002a04:	08002aa3 	.word	0x08002aa3
 8002a08:	08002aa3 	.word	0x08002aa3
 8002a0c:	08002aa3 	.word	0x08002aa3
 8002a10:	08002aa3 	.word	0x08002aa3
 8002a14:	08002aa3 	.word	0x08002aa3
 8002a18:	08002aa3 	.word	0x08002aa3
 8002a1c:	08002aa3 	.word	0x08002aa3
 8002a20:	08002aa3 	.word	0x08002aa3
 8002a24:	08002aa3 	.word	0x08002aa3
 8002a28:	08002aa3 	.word	0x08002aa3
 8002a2c:	08002aa3 	.word	0x08002aa3
 8002a30:	08002aa3 	.word	0x08002aa3
 8002a34:	08002aa3 	.word	0x08002aa3
 8002a38:	08002a51 	.word	0x08002a51
 8002a3c:	08002a65 	.word	0x08002a65
 8002a40:	4a79      	ldr	r2, [pc, #484]	; (8002c28 <HAL_GPIO_Init+0x2b4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a46:	e02c      	b.n	8002aa2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	623b      	str	r3, [r7, #32]
          break;
 8002a4e:	e029      	b.n	8002aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	3304      	adds	r3, #4
 8002a56:	623b      	str	r3, [r7, #32]
          break;
 8002a58:	e024      	b.n	8002aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	3308      	adds	r3, #8
 8002a60:	623b      	str	r3, [r7, #32]
          break;
 8002a62:	e01f      	b.n	8002aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	330c      	adds	r3, #12
 8002a6a:	623b      	str	r3, [r7, #32]
          break;
 8002a6c:	e01a      	b.n	8002aa4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d102      	bne.n	8002a7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a76:	2304      	movs	r3, #4
 8002a78:	623b      	str	r3, [r7, #32]
          break;
 8002a7a:	e013      	b.n	8002aa4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d105      	bne.n	8002a90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a84:	2308      	movs	r3, #8
 8002a86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	611a      	str	r2, [r3, #16]
          break;
 8002a8e:	e009      	b.n	8002aa4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a90:	2308      	movs	r3, #8
 8002a92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	615a      	str	r2, [r3, #20]
          break;
 8002a9a:	e003      	b.n	8002aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	623b      	str	r3, [r7, #32]
          break;
 8002aa0:	e000      	b.n	8002aa4 <HAL_GPIO_Init+0x130>
          break;
 8002aa2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	2bff      	cmp	r3, #255	; 0xff
 8002aa8:	d801      	bhi.n	8002aae <HAL_GPIO_Init+0x13a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	e001      	b.n	8002ab2 <HAL_GPIO_Init+0x13e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2bff      	cmp	r3, #255	; 0xff
 8002ab8:	d802      	bhi.n	8002ac0 <HAL_GPIO_Init+0x14c>
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	e002      	b.n	8002ac6 <HAL_GPIO_Init+0x152>
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	3b08      	subs	r3, #8
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	210f      	movs	r1, #15
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	6a39      	ldr	r1, [r7, #32]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80b1 	beq.w	8002c56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002af4:	4b4d      	ldr	r3, [pc, #308]	; (8002c2c <HAL_GPIO_Init+0x2b8>)
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	4a4c      	ldr	r2, [pc, #304]	; (8002c2c <HAL_GPIO_Init+0x2b8>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6193      	str	r3, [r2, #24]
 8002b00:	4b4a      	ldr	r3, [pc, #296]	; (8002c2c <HAL_GPIO_Init+0x2b8>)
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b0c:	4a48      	ldr	r2, [pc, #288]	; (8002c30 <HAL_GPIO_Init+0x2bc>)
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	3302      	adds	r3, #2
 8002b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	220f      	movs	r2, #15
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a40      	ldr	r2, [pc, #256]	; (8002c34 <HAL_GPIO_Init+0x2c0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d013      	beq.n	8002b60 <HAL_GPIO_Init+0x1ec>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a3f      	ldr	r2, [pc, #252]	; (8002c38 <HAL_GPIO_Init+0x2c4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00d      	beq.n	8002b5c <HAL_GPIO_Init+0x1e8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a3e      	ldr	r2, [pc, #248]	; (8002c3c <HAL_GPIO_Init+0x2c8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d007      	beq.n	8002b58 <HAL_GPIO_Init+0x1e4>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a3d      	ldr	r2, [pc, #244]	; (8002c40 <HAL_GPIO_Init+0x2cc>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d101      	bne.n	8002b54 <HAL_GPIO_Init+0x1e0>
 8002b50:	2303      	movs	r3, #3
 8002b52:	e006      	b.n	8002b62 <HAL_GPIO_Init+0x1ee>
 8002b54:	2304      	movs	r3, #4
 8002b56:	e004      	b.n	8002b62 <HAL_GPIO_Init+0x1ee>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e002      	b.n	8002b62 <HAL_GPIO_Init+0x1ee>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <HAL_GPIO_Init+0x1ee>
 8002b60:	2300      	movs	r3, #0
 8002b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b64:	f002 0203 	and.w	r2, r2, #3
 8002b68:	0092      	lsls	r2, r2, #2
 8002b6a:	4093      	lsls	r3, r2
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b72:	492f      	ldr	r1, [pc, #188]	; (8002c30 <HAL_GPIO_Init+0x2bc>)
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	3302      	adds	r3, #2
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d006      	beq.n	8002b9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b8c:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <HAL_GPIO_Init+0x2d0>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	492c      	ldr	r1, [pc, #176]	; (8002c44 <HAL_GPIO_Init+0x2d0>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]
 8002b98:	e006      	b.n	8002ba8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b9a:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <HAL_GPIO_Init+0x2d0>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	4928      	ldr	r1, [pc, #160]	; (8002c44 <HAL_GPIO_Init+0x2d0>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d006      	beq.n	8002bc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bb4:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <HAL_GPIO_Init+0x2d0>)
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	4922      	ldr	r1, [pc, #136]	; (8002c44 <HAL_GPIO_Init+0x2d0>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
 8002bc0:	e006      	b.n	8002bd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <HAL_GPIO_Init+0x2d0>)
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	491e      	ldr	r1, [pc, #120]	; (8002c44 <HAL_GPIO_Init+0x2d0>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d006      	beq.n	8002bea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bdc:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <HAL_GPIO_Init+0x2d0>)
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	4918      	ldr	r1, [pc, #96]	; (8002c44 <HAL_GPIO_Init+0x2d0>)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]
 8002be8:	e006      	b.n	8002bf8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bea:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <HAL_GPIO_Init+0x2d0>)
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	4914      	ldr	r1, [pc, #80]	; (8002c44 <HAL_GPIO_Init+0x2d0>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d021      	beq.n	8002c48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <HAL_GPIO_Init+0x2d0>)
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	490e      	ldr	r1, [pc, #56]	; (8002c44 <HAL_GPIO_Init+0x2d0>)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60cb      	str	r3, [r1, #12]
 8002c10:	e021      	b.n	8002c56 <HAL_GPIO_Init+0x2e2>
 8002c12:	bf00      	nop
 8002c14:	10320000 	.word	0x10320000
 8002c18:	10310000 	.word	0x10310000
 8002c1c:	10220000 	.word	0x10220000
 8002c20:	10210000 	.word	0x10210000
 8002c24:	10120000 	.word	0x10120000
 8002c28:	10110000 	.word	0x10110000
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40010000 	.word	0x40010000
 8002c34:	40010800 	.word	0x40010800
 8002c38:	40010c00 	.word	0x40010c00
 8002c3c:	40011000 	.word	0x40011000
 8002c40:	40011400 	.word	0x40011400
 8002c44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_GPIO_Init+0x304>)
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	4909      	ldr	r1, [pc, #36]	; (8002c78 <HAL_GPIO_Init+0x304>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	3301      	adds	r3, #1
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	fa22 f303 	lsr.w	r3, r2, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f47f ae8e 	bne.w	8002988 <HAL_GPIO_Init+0x14>
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	372c      	adds	r7, #44	; 0x2c
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	40010400 	.word	0x40010400

08002c7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	887b      	ldrh	r3, [r7, #2]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
 8002c98:	e001      	b.n	8002c9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	807b      	strh	r3, [r7, #2]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cba:	787b      	ldrb	r3, [r7, #1]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cc0:	887a      	ldrh	r2, [r7, #2]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cc6:	e003      	b.n	8002cd0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cc8:	887b      	ldrh	r3, [r7, #2]
 8002cca:	041a      	lsls	r2, r3, #16
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	611a      	str	r2, [r3, #16]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cec:	887a      	ldrh	r2, [r7, #2]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	041a      	lsls	r2, r3, #16
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	43d9      	mvns	r1, r3
 8002cf8:	887b      	ldrh	r3, [r7, #2]
 8002cfa:	400b      	ands	r3, r1
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	611a      	str	r2, [r3, #16]
}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d16:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d22:	4a05      	ldr	r2, [pc, #20]	; (8002d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f806 	bl	8002d3c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40010400 	.word	0x40010400

08002d3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e12b      	b.n	8002fba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fe f8d8 	bl	8000f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2224      	movs	r2, #36	; 0x24
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002da2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002db2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002db4:	f003 f868 	bl	8005e88 <HAL_RCC_GetPCLK1Freq>
 8002db8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4a81      	ldr	r2, [pc, #516]	; (8002fc4 <HAL_I2C_Init+0x274>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d807      	bhi.n	8002dd4 <HAL_I2C_Init+0x84>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4a80      	ldr	r2, [pc, #512]	; (8002fc8 <HAL_I2C_Init+0x278>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	bf94      	ite	ls
 8002dcc:	2301      	movls	r3, #1
 8002dce:	2300      	movhi	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e006      	b.n	8002de2 <HAL_I2C_Init+0x92>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a7d      	ldr	r2, [pc, #500]	; (8002fcc <HAL_I2C_Init+0x27c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	bf94      	ite	ls
 8002ddc:	2301      	movls	r3, #1
 8002dde:	2300      	movhi	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e0e7      	b.n	8002fba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4a78      	ldr	r2, [pc, #480]	; (8002fd0 <HAL_I2C_Init+0x280>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	0c9b      	lsrs	r3, r3, #18
 8002df4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4a6a      	ldr	r2, [pc, #424]	; (8002fc4 <HAL_I2C_Init+0x274>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d802      	bhi.n	8002e24 <HAL_I2C_Init+0xd4>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	3301      	adds	r3, #1
 8002e22:	e009      	b.n	8002e38 <HAL_I2C_Init+0xe8>
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	4a69      	ldr	r2, [pc, #420]	; (8002fd4 <HAL_I2C_Init+0x284>)
 8002e30:	fba2 2303 	umull	r2, r3, r2, r3
 8002e34:	099b      	lsrs	r3, r3, #6
 8002e36:	3301      	adds	r3, #1
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	495c      	ldr	r1, [pc, #368]	; (8002fc4 <HAL_I2C_Init+0x274>)
 8002e54:	428b      	cmp	r3, r1
 8002e56:	d819      	bhi.n	8002e8c <HAL_I2C_Init+0x13c>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1e59      	subs	r1, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e66:	1c59      	adds	r1, r3, #1
 8002e68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e6c:	400b      	ands	r3, r1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_I2C_Init+0x138>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1e59      	subs	r1, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e80:	3301      	adds	r3, #1
 8002e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e86:	e051      	b.n	8002f2c <HAL_I2C_Init+0x1dc>
 8002e88:	2304      	movs	r3, #4
 8002e8a:	e04f      	b.n	8002f2c <HAL_I2C_Init+0x1dc>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d111      	bne.n	8002eb8 <HAL_I2C_Init+0x168>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e58      	subs	r0, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	440b      	add	r3, r1
 8002ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e012      	b.n	8002ede <HAL_I2C_Init+0x18e>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1e58      	subs	r0, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	0099      	lsls	r1, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_Init+0x196>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e022      	b.n	8002f2c <HAL_I2C_Init+0x1dc>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10e      	bne.n	8002f0c <HAL_I2C_Init+0x1bc>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1e58      	subs	r0, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6859      	ldr	r1, [r3, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	440b      	add	r3, r1
 8002efc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f00:	3301      	adds	r3, #1
 8002f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f0a:	e00f      	b.n	8002f2c <HAL_I2C_Init+0x1dc>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1e58      	subs	r0, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	0099      	lsls	r1, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f22:	3301      	adds	r3, #1
 8002f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	6809      	ldr	r1, [r1, #0]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69da      	ldr	r2, [r3, #28]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6911      	ldr	r1, [r2, #16]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68d2      	ldr	r2, [r2, #12]
 8002f66:	4311      	orrs	r1, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	000186a0 	.word	0x000186a0
 8002fc8:	001e847f 	.word	0x001e847f
 8002fcc:	003d08ff 	.word	0x003d08ff
 8002fd0:	431bde83 	.word	0x431bde83
 8002fd4:	10624dd3 	.word	0x10624dd3

08002fd8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	4608      	mov	r0, r1
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	817b      	strh	r3, [r7, #10]
 8002fea:	460b      	mov	r3, r1
 8002fec:	813b      	strh	r3, [r7, #8]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ff2:	f7ff fb25 	bl	8002640 <HAL_GetTick>
 8002ff6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b20      	cmp	r3, #32
 8003002:	f040 80d9 	bne.w	80031b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2319      	movs	r3, #25
 800300c:	2201      	movs	r2, #1
 800300e:	496d      	ldr	r1, [pc, #436]	; (80031c4 <HAL_I2C_Mem_Write+0x1ec>)
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fcc1 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
 800301e:	e0cc      	b.n	80031ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_I2C_Mem_Write+0x56>
 800302a:	2302      	movs	r3, #2
 800302c:	e0c5      	b.n	80031ba <HAL_I2C_Mem_Write+0x1e2>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d007      	beq.n	8003054 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003062:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2221      	movs	r2, #33	; 0x21
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2240      	movs	r2, #64	; 0x40
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a3a      	ldr	r2, [r7, #32]
 800307e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003084:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4a4d      	ldr	r2, [pc, #308]	; (80031c8 <HAL_I2C_Mem_Write+0x1f0>)
 8003094:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003096:	88f8      	ldrh	r0, [r7, #6]
 8003098:	893a      	ldrh	r2, [r7, #8]
 800309a:	8979      	ldrh	r1, [r7, #10]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	4603      	mov	r3, r0
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 faf8 	bl	800369c <I2C_RequestMemoryWrite>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d052      	beq.n	8003158 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e081      	b.n	80031ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fd42 	bl	8003b44 <I2C_WaitOnTXEFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00d      	beq.n	80030e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d107      	bne.n	80030de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e06b      	b.n	80031ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	781a      	ldrb	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b04      	cmp	r3, #4
 800311e:	d11b      	bne.n	8003158 <HAL_I2C_Mem_Write+0x180>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003124:	2b00      	cmp	r3, #0
 8003126:	d017      	beq.n	8003158 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1aa      	bne.n	80030b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fd2e 	bl	8003bc6 <I2C_WaitOnBTFFlagUntilTimeout>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00d      	beq.n	800318c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	2b04      	cmp	r3, #4
 8003176:	d107      	bne.n	8003188 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003186:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e016      	b.n	80031ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	e000      	b.n	80031ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031b8:	2302      	movs	r3, #2
  }
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	00100002 	.word	0x00100002
 80031c8:	ffff0000 	.word	0xffff0000

080031cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08c      	sub	sp, #48	; 0x30
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	4608      	mov	r0, r1
 80031d6:	4611      	mov	r1, r2
 80031d8:	461a      	mov	r2, r3
 80031da:	4603      	mov	r3, r0
 80031dc:	817b      	strh	r3, [r7, #10]
 80031de:	460b      	mov	r3, r1
 80031e0:	813b      	strh	r3, [r7, #8]
 80031e2:	4613      	mov	r3, r2
 80031e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031ea:	f7ff fa29 	bl	8002640 <HAL_GetTick>
 80031ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	f040 8244 	bne.w	8003686 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	2319      	movs	r3, #25
 8003204:	2201      	movs	r2, #1
 8003206:	4982      	ldr	r1, [pc, #520]	; (8003410 <HAL_I2C_Mem_Read+0x244>)
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 fbc5 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003214:	2302      	movs	r3, #2
 8003216:	e237      	b.n	8003688 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_I2C_Mem_Read+0x5a>
 8003222:	2302      	movs	r3, #2
 8003224:	e230      	b.n	8003688 <HAL_I2C_Mem_Read+0x4bc>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d007      	beq.n	800324c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800325a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2222      	movs	r2, #34	; 0x22
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2240      	movs	r2, #64	; 0x40
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003276:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800327c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4a62      	ldr	r2, [pc, #392]	; (8003414 <HAL_I2C_Mem_Read+0x248>)
 800328c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800328e:	88f8      	ldrh	r0, [r7, #6]
 8003290:	893a      	ldrh	r2, [r7, #8]
 8003292:	8979      	ldrh	r1, [r7, #10]
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	4603      	mov	r3, r0
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 fa92 	bl	80037c8 <I2C_RequestMemoryRead>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e1ec      	b.n	8003688 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d113      	bne.n	80032de <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e1c0      	b.n	8003660 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d11e      	bne.n	8003324 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032f6:	b672      	cpsid	i
}
 80032f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003320:	b662      	cpsie	i
}
 8003322:	e035      	b.n	8003390 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003328:	2b02      	cmp	r3, #2
 800332a:	d11e      	bne.n	800336a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800333a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800333c:	b672      	cpsid	i
}
 800333e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003364:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003366:	b662      	cpsie	i
}
 8003368:	e012      	b.n	8003390 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003378:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003390:	e166      	b.n	8003660 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003396:	2b03      	cmp	r3, #3
 8003398:	f200 811f 	bhi.w	80035da <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d123      	bne.n	80033ec <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fc4d 	bl	8003c48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e167      	b.n	8003688 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033ea:	e139      	b.n	8003660 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d152      	bne.n	800349a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fa:	2200      	movs	r2, #0
 80033fc:	4906      	ldr	r1, [pc, #24]	; (8003418 <HAL_I2C_Mem_Read+0x24c>)
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 faca 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e13c      	b.n	8003688 <HAL_I2C_Mem_Read+0x4bc>
 800340e:	bf00      	nop
 8003410:	00100002 	.word	0x00100002
 8003414:	ffff0000 	.word	0xffff0000
 8003418:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800341c:	b672      	cpsid	i
}
 800341e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003462:	b662      	cpsie	i
}
 8003464:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348e:	b29b      	uxth	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003498:	e0e2      	b.n	8003660 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a0:	2200      	movs	r2, #0
 80034a2:	497b      	ldr	r1, [pc, #492]	; (8003690 <HAL_I2C_Mem_Read+0x4c4>)
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fa77 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0e9      	b.n	8003688 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034c4:	b672      	cpsid	i
}
 80034c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034fa:	4b66      	ldr	r3, [pc, #408]	; (8003694 <HAL_I2C_Mem_Read+0x4c8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	08db      	lsrs	r3, r3, #3
 8003500:	4a65      	ldr	r2, [pc, #404]	; (8003698 <HAL_I2C_Mem_Read+0x4cc>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	0a1a      	lsrs	r2, r3, #8
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00da      	lsls	r2, r3, #3
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	3b01      	subs	r3, #1
 8003518:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d118      	bne.n	8003552 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f043 0220 	orr.w	r2, r3, #32
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003542:	b662      	cpsie	i
}
 8003544:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e09a      	b.n	8003688 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b04      	cmp	r3, #4
 800355e:	d1d9      	bne.n	8003514 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035a2:	b662      	cpsie	i
}
 80035a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035d8:	e042      	b.n	8003660 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fb32 	bl	8003c48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e04c      	b.n	8003688 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b04      	cmp	r3, #4
 800362c:	d118      	bne.n	8003660 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	f47f ae94 	bne.w	8003392 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003686:	2302      	movs	r3, #2
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	3728      	adds	r7, #40	; 0x28
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	00010004 	.word	0x00010004
 8003694:	20000010 	.word	0x20000010
 8003698:	14f8b589 	.word	0x14f8b589

0800369c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	4608      	mov	r0, r1
 80036a6:	4611      	mov	r1, r2
 80036a8:	461a      	mov	r2, r3
 80036aa:	4603      	mov	r3, r0
 80036ac:	817b      	strh	r3, [r7, #10]
 80036ae:	460b      	mov	r3, r1
 80036b0:	813b      	strh	r3, [r7, #8]
 80036b2:	4613      	mov	r3, r2
 80036b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f960 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00d      	beq.n	80036fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ec:	d103      	bne.n	80036f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e05f      	b.n	80037ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036fa:	897b      	ldrh	r3, [r7, #10]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003708:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	6a3a      	ldr	r2, [r7, #32]
 800370e:	492d      	ldr	r1, [pc, #180]	; (80037c4 <I2C_RequestMemoryWrite+0x128>)
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f998 	bl	8003a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e04c      	b.n	80037ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003738:	6a39      	ldr	r1, [r7, #32]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fa02 	bl	8003b44 <I2C_WaitOnTXEFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00d      	beq.n	8003762 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	2b04      	cmp	r3, #4
 800374c:	d107      	bne.n	800375e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e02b      	b.n	80037ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d105      	bne.n	8003774 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003768:	893b      	ldrh	r3, [r7, #8]
 800376a:	b2da      	uxtb	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	611a      	str	r2, [r3, #16]
 8003772:	e021      	b.n	80037b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003774:	893b      	ldrh	r3, [r7, #8]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	b29b      	uxth	r3, r3
 800377a:	b2da      	uxtb	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003784:	6a39      	ldr	r1, [r7, #32]
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f9dc 	bl	8003b44 <I2C_WaitOnTXEFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00d      	beq.n	80037ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2b04      	cmp	r3, #4
 8003798:	d107      	bne.n	80037aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e005      	b.n	80037ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037ae:	893b      	ldrh	r3, [r7, #8]
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	00010002 	.word	0x00010002

080037c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	4608      	mov	r0, r1
 80037d2:	4611      	mov	r1, r2
 80037d4:	461a      	mov	r2, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	817b      	strh	r3, [r7, #10]
 80037da:	460b      	mov	r3, r1
 80037dc:	813b      	strh	r3, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003800:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	2200      	movs	r2, #0
 800380a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f8c2 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003828:	d103      	bne.n	8003832 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003830:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0aa      	b.n	800398c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003836:	897b      	ldrh	r3, [r7, #10]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003844:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	6a3a      	ldr	r2, [r7, #32]
 800384a:	4952      	ldr	r1, [pc, #328]	; (8003994 <I2C_RequestMemoryRead+0x1cc>)
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f8fa 	bl	8003a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e097      	b.n	800398c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003874:	6a39      	ldr	r1, [r7, #32]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f964 	bl	8003b44 <I2C_WaitOnTXEFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00d      	beq.n	800389e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	2b04      	cmp	r3, #4
 8003888:	d107      	bne.n	800389a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003898:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e076      	b.n	800398c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800389e:	88fb      	ldrh	r3, [r7, #6]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038a4:	893b      	ldrh	r3, [r7, #8]
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	611a      	str	r2, [r3, #16]
 80038ae:	e021      	b.n	80038f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038b0:	893b      	ldrh	r3, [r7, #8]
 80038b2:	0a1b      	lsrs	r3, r3, #8
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c0:	6a39      	ldr	r1, [r7, #32]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f93e 	bl	8003b44 <I2C_WaitOnTXEFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00d      	beq.n	80038ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d107      	bne.n	80038e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e050      	b.n	800398c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038ea:	893b      	ldrh	r3, [r7, #8]
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f6:	6a39      	ldr	r1, [r7, #32]
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f923 	bl	8003b44 <I2C_WaitOnTXEFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00d      	beq.n	8003920 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	2b04      	cmp	r3, #4
 800390a:	d107      	bne.n	800391c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e035      	b.n	800398c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800392e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	2200      	movs	r2, #0
 8003938:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f82b 	bl	8003998 <I2C_WaitOnFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00d      	beq.n	8003964 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003956:	d103      	bne.n	8003960 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800395e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e013      	b.n	800398c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003964:	897b      	ldrh	r3, [r7, #10]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	b2da      	uxtb	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	6a3a      	ldr	r2, [r7, #32]
 8003978:	4906      	ldr	r1, [pc, #24]	; (8003994 <I2C_RequestMemoryRead+0x1cc>)
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f863 	bl	8003a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	00010002 	.word	0x00010002

08003998 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039a8:	e025      	b.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d021      	beq.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b2:	f7fe fe45 	bl	8002640 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d116      	bne.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f043 0220 	orr.w	r2, r3, #32
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e023      	b.n	8003a3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d10d      	bne.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	43da      	mvns	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf0c      	ite	eq
 8003a12:	2301      	moveq	r3, #1
 8003a14:	2300      	movne	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	e00c      	b.n	8003a36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	43da      	mvns	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4013      	ands	r3, r2
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bf0c      	ite	eq
 8003a2e:	2301      	moveq	r3, #1
 8003a30:	2300      	movne	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	461a      	mov	r2, r3
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d0b6      	beq.n	80039aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a54:	e051      	b.n	8003afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a64:	d123      	bne.n	8003aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f043 0204 	orr.w	r2, r3, #4
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e046      	b.n	8003b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d021      	beq.n	8003afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab6:	f7fe fdc3 	bl	8002640 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d302      	bcc.n	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d116      	bne.n	8003afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f043 0220 	orr.w	r2, r3, #32
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e020      	b.n	8003b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d10c      	bne.n	8003b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf14      	ite	ne
 8003b16:	2301      	movne	r3, #1
 8003b18:	2300      	moveq	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	e00b      	b.n	8003b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	43da      	mvns	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf14      	ite	ne
 8003b30:	2301      	movne	r3, #1
 8003b32:	2300      	moveq	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d18d      	bne.n	8003a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b50:	e02d      	b.n	8003bae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f8ce 	bl	8003cf4 <I2C_IsAcknowledgeFailed>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e02d      	b.n	8003bbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d021      	beq.n	8003bae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6a:	f7fe fd69 	bl	8002640 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d302      	bcc.n	8003b80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d116      	bne.n	8003bae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f043 0220 	orr.w	r2, r3, #32
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e007      	b.n	8003bbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb8:	2b80      	cmp	r3, #128	; 0x80
 8003bba:	d1ca      	bne.n	8003b52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b084      	sub	sp, #16
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bd2:	e02d      	b.n	8003c30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f88d 	bl	8003cf4 <I2C_IsAcknowledgeFailed>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e02d      	b.n	8003c40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bea:	d021      	beq.n	8003c30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bec:	f7fe fd28 	bl	8002640 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d302      	bcc.n	8003c02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d116      	bne.n	8003c30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e007      	b.n	8003c40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d1ca      	bne.n	8003bd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c54:	e042      	b.n	8003cdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	d119      	bne.n	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0210 	mvn.w	r2, #16
 8003c6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e029      	b.n	8003cec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c98:	f7fe fcd2 	bl	8002640 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d302      	bcc.n	8003cae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d116      	bne.n	8003cdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f043 0220 	orr.w	r2, r3, #32
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e007      	b.n	8003cec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	d1b5      	bne.n	8003c56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0a:	d11b      	bne.n	8003d44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	f043 0204 	orr.w	r2, r3, #4
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d52:	b08b      	sub	sp, #44	; 0x2c
 8003d54:	af06      	add	r7, sp, #24
 8003d56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e0fd      	b.n	8003f5e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f00a fd10 	bl	800e79c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2203      	movs	r2, #3
 8003d80:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f003 fadb 	bl	8007344 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	687e      	ldr	r6, [r7, #4]
 8003d96:	466d      	mov	r5, sp
 8003d98:	f106 0410 	add.w	r4, r6, #16
 8003d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	602b      	str	r3, [r5, #0]
 8003da4:	1d33      	adds	r3, r6, #4
 8003da6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003da8:	6838      	ldr	r0, [r7, #0]
 8003daa:	f003 faa5 	bl	80072f8 <USB_CoreInit>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0ce      	b.n	8003f5e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f003 fad6 	bl	8007378 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	73fb      	strb	r3, [r7, #15]
 8003dd0:	e04c      	b.n	8003e6c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	440b      	add	r3, r1
 8003de2:	3301      	adds	r3, #1
 8003de4:	2201      	movs	r2, #1
 8003de6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	4613      	mov	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	440b      	add	r3, r1
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003dfc:	7bfa      	ldrb	r2, [r7, #15]
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	b298      	uxth	r0, r3
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	440b      	add	r3, r1
 8003e0e:	3336      	adds	r3, #54	; 0x36
 8003e10:	4602      	mov	r2, r0
 8003e12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	440b      	add	r3, r1
 8003e24:	3303      	adds	r3, #3
 8003e26:	2200      	movs	r2, #0
 8003e28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e2a:	7bfa      	ldrb	r2, [r7, #15]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	440b      	add	r3, r1
 8003e38:	3338      	adds	r3, #56	; 0x38
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e3e:	7bfa      	ldrb	r2, [r7, #15]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	440b      	add	r3, r1
 8003e4c:	333c      	adds	r3, #60	; 0x3c
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e52:	7bfa      	ldrb	r2, [r7, #15]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	440b      	add	r3, r1
 8003e60:	3340      	adds	r3, #64	; 0x40
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d3ad      	bcc.n	8003dd2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e76:	2300      	movs	r3, #0
 8003e78:	73fb      	strb	r3, [r7, #15]
 8003e7a:	e044      	b.n	8003f06 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e7c:	7bfa      	ldrb	r2, [r7, #15]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	440b      	add	r3, r1
 8003e8a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003e8e:	2200      	movs	r2, #0
 8003e90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e92:	7bfa      	ldrb	r2, [r7, #15]
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	440b      	add	r3, r1
 8003ea0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ea8:	7bfa      	ldrb	r2, [r7, #15]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	440b      	add	r3, r1
 8003eb6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003eba:	2200      	movs	r2, #0
 8003ebc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ebe:	7bfa      	ldrb	r2, [r7, #15]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ed4:	7bfa      	ldrb	r2, [r7, #15]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	440b      	add	r3, r1
 8003ee2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003eea:	7bfa      	ldrb	r2, [r7, #15]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	440b      	add	r3, r1
 8003ef8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	3301      	adds	r3, #1
 8003f04:	73fb      	strb	r3, [r7, #15]
 8003f06:	7bfa      	ldrb	r2, [r7, #15]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d3b5      	bcc.n	8003e7c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	603b      	str	r3, [r7, #0]
 8003f16:	687e      	ldr	r6, [r7, #4]
 8003f18:	466d      	mov	r5, sp
 8003f1a:	f106 0410 	add.w	r4, r6, #16
 8003f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	602b      	str	r3, [r5, #0]
 8003f26:	1d33      	adds	r3, r6, #4
 8003f28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f2a:	6838      	ldr	r0, [r7, #0]
 8003f2c:	f003 fa30 	bl	8007390 <USB_DevInit>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e00d      	b.n	8003f5e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f005 fba1 	bl	800969e <USB_DevDisconnect>

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_PCD_Start+0x16>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e016      	b.n	8003faa <HAL_PCD_Start+0x44>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f003 f9c5 	bl	8007318 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003f8e:	2101      	movs	r1, #1
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f00a fe76 	bl	800ec82 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f005 fb75 	bl	800968a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b088      	sub	sp, #32
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f005 fb77 	bl	80096b2 <USB_ReadInterrupts>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fce:	d102      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fb61 	bl	8004698 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f005 fb69 	bl	80096b2 <USB_ReadInterrupts>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fea:	d112      	bne.n	8004012 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffe:	b292      	uxth	r2, r2
 8004000:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f00a fc44 	bl	800e892 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800400a:	2100      	movs	r1, #0
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f925 	bl	800425c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f005 fb4b 	bl	80096b2 <USB_ReadInterrupts>
 800401c:	4603      	mov	r3, r0
 800401e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004022:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004026:	d10b      	bne.n	8004040 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004030:	b29a      	uxth	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800403a:	b292      	uxth	r2, r2
 800403c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f005 fb34 	bl	80096b2 <USB_ReadInterrupts>
 800404a:	4603      	mov	r3, r0
 800404c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004054:	d10b      	bne.n	800406e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800405e:	b29a      	uxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004068:	b292      	uxth	r2, r2
 800406a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f005 fb1d 	bl	80096b2 <USB_ReadInterrupts>
 8004078:	4603      	mov	r3, r0
 800407a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800407e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004082:	d126      	bne.n	80040d2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800408c:	b29a      	uxth	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0204 	bic.w	r2, r2, #4
 8004096:	b292      	uxth	r2, r2
 8004098:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0208 	bic.w	r2, r2, #8
 80040ae:	b292      	uxth	r2, r2
 80040b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f00a fc25 	bl	800e904 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040cc:	b292      	uxth	r2, r2
 80040ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f005 faeb 	bl	80096b2 <USB_ReadInterrupts>
 80040dc:	4603      	mov	r3, r0
 80040de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e6:	f040 8084 	bne.w	80041f2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80040ea:	2300      	movs	r3, #0
 80040ec:	77fb      	strb	r3, [r7, #31]
 80040ee:	e011      	b.n	8004114 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	7ffb      	ldrb	r3, [r7, #31]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	441a      	add	r2, r3
 80040fc:	7ffb      	ldrb	r3, [r7, #31]
 80040fe:	8812      	ldrh	r2, [r2, #0]
 8004100:	b292      	uxth	r2, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	f107 0120 	add.w	r1, r7, #32
 8004108:	440b      	add	r3, r1
 800410a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800410e:	7ffb      	ldrb	r3, [r7, #31]
 8004110:	3301      	adds	r3, #1
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	7ffb      	ldrb	r3, [r7, #31]
 8004116:	2b07      	cmp	r3, #7
 8004118:	d9ea      	bls.n	80040f0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004122:	b29a      	uxth	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0201 	orr.w	r2, r2, #1
 800412c:	b292      	uxth	r2, r2
 800412e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800413a:	b29a      	uxth	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	b292      	uxth	r2, r2
 8004146:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800414a:	bf00      	nop
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004154:	b29b      	uxth	r3, r3
 8004156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f6      	beq.n	800414c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004170:	b292      	uxth	r2, r2
 8004172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004176:	2300      	movs	r3, #0
 8004178:	77fb      	strb	r3, [r7, #31]
 800417a:	e010      	b.n	800419e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800417c:	7ffb      	ldrb	r3, [r7, #31]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	4611      	mov	r1, r2
 8004184:	7ffa      	ldrb	r2, [r7, #31]
 8004186:	0092      	lsls	r2, r2, #2
 8004188:	440a      	add	r2, r1
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	f107 0120 	add.w	r1, r7, #32
 8004190:	440b      	add	r3, r1
 8004192:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004196:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004198:	7ffb      	ldrb	r3, [r7, #31]
 800419a:	3301      	adds	r3, #1
 800419c:	77fb      	strb	r3, [r7, #31]
 800419e:	7ffb      	ldrb	r3, [r7, #31]
 80041a0:	2b07      	cmp	r3, #7
 80041a2:	d9eb      	bls.n	800417c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0208 	orr.w	r2, r2, #8
 80041b6:	b292      	uxth	r2, r2
 80041b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ce:	b292      	uxth	r2, r2
 80041d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041dc:	b29a      	uxth	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0204 	orr.w	r2, r2, #4
 80041e6:	b292      	uxth	r2, r2
 80041e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f00a fb6f 	bl	800e8d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f005 fa5b 	bl	80096b2 <USB_ReadInterrupts>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004206:	d10e      	bne.n	8004226 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004210:	b29a      	uxth	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800421a:	b292      	uxth	r2, r2
 800421c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f00a fb28 	bl	800e876 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f005 fa41 	bl	80096b2 <USB_ReadInterrupts>
 8004230:	4603      	mov	r3, r0
 8004232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800423a:	d10b      	bne.n	8004254 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800424e:	b292      	uxth	r2, r2
 8004250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004254:	bf00      	nop
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_PCD_SetAddress+0x1a>
 8004272:	2302      	movs	r3, #2
 8004274:	e013      	b.n	800429e <HAL_PCD_SetAddress+0x42>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	78fa      	ldrb	r2, [r7, #3]
 8004282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	78fa      	ldrb	r2, [r7, #3]
 800428c:	4611      	mov	r1, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f005 f9e8 	bl	8009664 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	4608      	mov	r0, r1
 80042b0:	4611      	mov	r1, r2
 80042b2:	461a      	mov	r2, r3
 80042b4:	4603      	mov	r3, r0
 80042b6:	70fb      	strb	r3, [r7, #3]
 80042b8:	460b      	mov	r3, r1
 80042ba:	803b      	strh	r3, [r7, #0]
 80042bc:	4613      	mov	r3, r2
 80042be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	da0e      	bge.n	80042ea <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4413      	add	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	705a      	strb	r2, [r3, #1]
 80042e8:	e00e      	b.n	8004308 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	f003 0207 	and.w	r2, r3, #7
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	4413      	add	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	b2da      	uxtb	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004314:	883a      	ldrh	r2, [r7, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	78ba      	ldrb	r2, [r7, #2]
 800431e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	785b      	ldrb	r3, [r3, #1]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d004      	beq.n	8004332 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004332:	78bb      	ldrb	r3, [r7, #2]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d102      	bne.n	800433e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_PCD_EP_Open+0xa6>
 8004348:	2302      	movs	r3, #2
 800434a:	e00e      	b.n	800436a <HAL_PCD_EP_Open+0xc4>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68f9      	ldr	r1, [r7, #12]
 800435a:	4618      	mov	r0, r3
 800435c:	f003 f838 	bl	80073d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004368:	7afb      	ldrb	r3, [r7, #11]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b084      	sub	sp, #16
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800437e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004382:	2b00      	cmp	r3, #0
 8004384:	da0e      	bge.n	80043a4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4413      	add	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	705a      	strb	r2, [r3, #1]
 80043a2:	e00e      	b.n	80043c2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	f003 0207 	and.w	r2, r3, #7
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	4413      	add	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_PCD_EP_Close+0x6a>
 80043d8:	2302      	movs	r3, #2
 80043da:	e00e      	b.n	80043fa <HAL_PCD_EP_Close+0x88>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68f9      	ldr	r1, [r7, #12]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f003 fb5a 	bl	8007aa4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b086      	sub	sp, #24
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
 800440e:	460b      	mov	r3, r1
 8004410:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004412:	7afb      	ldrb	r3, [r7, #11]
 8004414:	f003 0207 	and.w	r2, r3, #7
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4413      	add	r3, r2
 8004428:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2200      	movs	r2, #0
 800443a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2200      	movs	r2, #0
 8004440:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004442:	7afb      	ldrb	r3, [r7, #11]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	b2da      	uxtb	r2, r3
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800444e:	7afb      	ldrb	r3, [r7, #11]
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	2b00      	cmp	r3, #0
 8004456:	d106      	bne.n	8004466 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6979      	ldr	r1, [r7, #20]
 800445e:	4618      	mov	r0, r3
 8004460:	f003 fd0c 	bl	8007e7c <USB_EPStartXfer>
 8004464:	e005      	b.n	8004472 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6979      	ldr	r1, [r7, #20]
 800446c:	4618      	mov	r0, r3
 800446e:	f003 fd05 	bl	8007e7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	f003 0207 	and.w	r2, r3, #7
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	440b      	add	r3, r1
 800449a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr

080044aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b086      	sub	sp, #24
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
 80044b6:	460b      	mov	r3, r1
 80044b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044ba:	7afb      	ldrb	r3, [r7, #11]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2200      	movs	r2, #0
 80044ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2201      	movs	r2, #1
 80044f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044f6:	7afb      	ldrb	r3, [r7, #11]
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004502:	7afb      	ldrb	r3, [r7, #11]
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6979      	ldr	r1, [r7, #20]
 8004512:	4618      	mov	r0, r3
 8004514:	f003 fcb2 	bl	8007e7c <USB_EPStartXfer>
 8004518:	e005      	b.n	8004526 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6979      	ldr	r1, [r7, #20]
 8004520:	4618      	mov	r0, r3
 8004522:	f003 fcab 	bl	8007e7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	f003 0207 	and.w	r2, r3, #7
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	429a      	cmp	r2, r3
 8004548:	d901      	bls.n	800454e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e04c      	b.n	80045e8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800454e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004552:	2b00      	cmp	r3, #0
 8004554:	da0e      	bge.n	8004574 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004556:	78fb      	ldrb	r3, [r7, #3]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	4413      	add	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	705a      	strb	r2, [r3, #1]
 8004572:	e00c      	b.n	800458e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	b2da      	uxtb	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_PCD_EP_SetStall+0x7e>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e01c      	b.n	80045e8 <HAL_PCD_EP_SetStall+0xb8>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68f9      	ldr	r1, [r7, #12]
 80045bc:	4618      	mov	r0, r3
 80045be:	f004 ff54 	bl	800946a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d108      	bne.n	80045de <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f005 f879 	bl	80096d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	f003 020f 	and.w	r2, r3, #15
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	429a      	cmp	r2, r3
 8004608:	d901      	bls.n	800460e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e040      	b.n	8004690 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800460e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004612:	2b00      	cmp	r3, #0
 8004614:	da0e      	bge.n	8004634 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4413      	add	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	705a      	strb	r2, [r3, #1]
 8004632:	e00e      	b.n	8004652 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	f003 0207 	and.w	r2, r3, #7
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	4413      	add	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	b2da      	uxtb	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_PCD_EP_ClrStall+0x82>
 800466e:	2302      	movs	r3, #2
 8004670:	e00e      	b.n	8004690 <HAL_PCD_EP_ClrStall+0xa0>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68f9      	ldr	r1, [r7, #12]
 8004680:	4618      	mov	r0, r3
 8004682:	f004 ff42 	bl	800950a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08e      	sub	sp, #56	; 0x38
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80046a0:	e2ec      	b.n	8004c7c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046aa:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80046ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f003 030f 	and.w	r3, r3, #15
 80046b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80046b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f040 8161 	bne.w	8004984 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80046c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d152      	bne.n	8004772 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80046d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046dc:	81fb      	strh	r3, [r7, #14]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	89fb      	ldrh	r3, [r7, #14]
 80046e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3328      	adds	r3, #40	; 0x28
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046fe:	b29b      	uxth	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4413      	add	r3, r2
 800470a:	3302      	adds	r3, #2
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	441a      	add	r2, r3
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004730:	2100      	movs	r1, #0
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f00a f885 	bl	800e842 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 829b 	beq.w	8004c7c <PCD_EP_ISR_Handler+0x5e4>
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	f040 8296 	bne.w	8004c7c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800475c:	b2da      	uxtb	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	b292      	uxth	r2, r2
 8004764:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004770:	e284      	b.n	8004c7c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	881b      	ldrh	r3, [r3, #0]
 8004780:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004782:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004788:	2b00      	cmp	r3, #0
 800478a:	d034      	beq.n	80047f6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004794:	b29b      	uxth	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	4413      	add	r3, r2
 80047a0:	3306      	adds	r3, #6
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f004 ffd0 	bl	8009770 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80047dc:	4013      	ands	r3, r2
 80047de:	823b      	strh	r3, [r7, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	8a3a      	ldrh	r2, [r7, #16]
 80047e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047ea:	b292      	uxth	r2, r2
 80047ec:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f009 fffa 	bl	800e7e8 <HAL_PCD_SetupStageCallback>
 80047f4:	e242      	b.n	8004c7c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80047f6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f280 823e 	bge.w	8004c7c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29a      	uxth	r2, r3
 8004808:	f640 738f 	movw	r3, #3983	; 0xf8f
 800480c:	4013      	ands	r3, r2
 800480e:	83bb      	strh	r3, [r7, #28]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	8bba      	ldrh	r2, [r7, #28]
 8004816:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800481a:	b292      	uxth	r2, r2
 800481c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004826:	b29b      	uxth	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	4413      	add	r3, r2
 8004832:	3306      	adds	r3, #6
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6812      	ldr	r2, [r2, #0]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d019      	beq.n	8004886 <PCD_EP_ISR_Handler+0x1ee>
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d015      	beq.n	8004886 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	6959      	ldr	r1, [r3, #20]
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800486a:	b29b      	uxth	r3, r3
 800486c:	f004 ff80 	bl	8009770 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	441a      	add	r2, r3
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800487e:	2100      	movs	r1, #0
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f009 ffc3 	bl	800e80c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004892:	2b00      	cmp	r3, #0
 8004894:	f040 81f2 	bne.w	8004c7c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	4413      	add	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d112      	bne.n	80048e6 <PCD_EP_ISR_Handler+0x24e>
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	801a      	strh	r2, [r3, #0]
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048de:	b29a      	uxth	r2, r3
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	801a      	strh	r2, [r3, #0]
 80048e4:	e02f      	b.n	8004946 <PCD_EP_ISR_Handler+0x2ae>
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b3e      	cmp	r3, #62	; 0x3e
 80048ec:	d813      	bhi.n	8004916 <PCD_EP_ISR_Handler+0x27e>
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	085b      	lsrs	r3, r3, #1
 80048f4:	633b      	str	r3, [r7, #48]	; 0x30
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <PCD_EP_ISR_Handler+0x270>
 8004902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004904:	3301      	adds	r3, #1
 8004906:	633b      	str	r3, [r7, #48]	; 0x30
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	b29b      	uxth	r3, r3
 800490c:	029b      	lsls	r3, r3, #10
 800490e:	b29a      	uxth	r2, r3
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	801a      	strh	r2, [r3, #0]
 8004914:	e017      	b.n	8004946 <PCD_EP_ISR_Handler+0x2ae>
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	633b      	str	r3, [r7, #48]	; 0x30
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <PCD_EP_ISR_Handler+0x298>
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	3b01      	subs	r3, #1
 800492e:	633b      	str	r3, [r7, #48]	; 0x30
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	b29b      	uxth	r3, r3
 8004934:	029b      	lsls	r3, r3, #10
 8004936:	b29b      	uxth	r3, r3
 8004938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004940:	b29a      	uxth	r2, r3
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004956:	827b      	strh	r3, [r7, #18]
 8004958:	8a7b      	ldrh	r3, [r7, #18]
 800495a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800495e:	827b      	strh	r3, [r7, #18]
 8004960:	8a7b      	ldrh	r3, [r7, #18]
 8004962:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004966:	827b      	strh	r3, [r7, #18]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	8a7b      	ldrh	r3, [r7, #18]
 800496e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800497a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497e:	b29b      	uxth	r3, r3
 8004980:	8013      	strh	r3, [r2, #0]
 8004982:	e17b      	b.n	8004c7c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004996:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800499a:	2b00      	cmp	r3, #0
 800499c:	f280 80ea 	bge.w	8004b74 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	461a      	mov	r2, r3
 80049a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80049b6:	4013      	ands	r3, r2
 80049b8:	853b      	strh	r3, [r7, #40]	; 0x28
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80049ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049ce:	b292      	uxth	r2, r2
 80049d0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80049d2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	4413      	add	r3, r2
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	7b1b      	ldrb	r3, [r3, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d122      	bne.n	8004a36 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	4413      	add	r3, r2
 8004a04:	3306      	adds	r3, #6
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a18:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004a1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8087 	beq.w	8004b30 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	6959      	ldr	r1, [r3, #20]
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	88da      	ldrh	r2, [r3, #6]
 8004a2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a30:	f004 fe9e 	bl	8009770 <USB_ReadPMA>
 8004a34:	e07c      	b.n	8004b30 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	78db      	ldrb	r3, [r3, #3]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d108      	bne.n	8004a50 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004a3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a40:	461a      	mov	r2, r3
 8004a42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f927 	bl	8004c98 <HAL_PCD_EP_DB_Receive>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004a4e:	e06f      	b.n	8004b30 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	441a      	add	r2, r3
 8004a7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d021      	beq.n	8004aee <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	4413      	add	r3, r2
 8004abe:	3302      	adds	r3, #2
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ad2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004ad4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d02a      	beq.n	8004b30 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	6959      	ldr	r1, [r3, #20]
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	891a      	ldrh	r2, [r3, #8]
 8004ae6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ae8:	f004 fe42 	bl	8009770 <USB_ReadPMA>
 8004aec:	e020      	b.n	8004b30 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4413      	add	r3, r2
 8004b02:	3306      	adds	r3, #6
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b16:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004b18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	6959      	ldr	r1, [r3, #20]
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	895a      	ldrh	r2, [r3, #10]
 8004b2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b2c:	f004 fe20 	bl	8009770 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	69da      	ldr	r2, [r3, #28]
 8004b34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b36:	441a      	add	r2, r3
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	695a      	ldr	r2, [r3, #20]
 8004b40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b42:	441a      	add	r2, r3
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d004      	beq.n	8004b5a <PCD_EP_ISR_Handler+0x4c2>
 8004b50:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d206      	bcs.n	8004b68 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f009 fe53 	bl	800e80c <HAL_PCD_DataOutStageCallback>
 8004b66:	e005      	b.n	8004b74 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f003 f984 	bl	8007e7c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004b74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d07e      	beq.n	8004c7c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004b7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	4413      	add	r3, r2
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bac:	843b      	strh	r3, [r7, #32]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	441a      	add	r2, r3
 8004bbc:	8c3b      	ldrh	r3, [r7, #32]
 8004bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	78db      	ldrb	r3, [r3, #3]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d00c      	beq.n	8004bec <PCD_EP_ISR_Handler+0x554>
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	78db      	ldrb	r3, [r3, #3]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d008      	beq.n	8004bec <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d146      	bne.n	8004c70 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004be2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d141      	bne.n	8004c70 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4413      	add	r3, r2
 8004c00:	3302      	adds	r3, #2
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c14:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	699a      	ldr	r2, [r3, #24]
 8004c1a:	8bfb      	ldrh	r3, [r7, #30]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d906      	bls.n	8004c2e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	699a      	ldr	r2, [r3, #24]
 8004c24:	8bfb      	ldrh	r3, [r7, #30]
 8004c26:	1ad2      	subs	r2, r2, r3
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	619a      	str	r2, [r3, #24]
 8004c2c:	e002      	b.n	8004c34 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	2200      	movs	r2, #0
 8004c32:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d106      	bne.n	8004c4a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f009 fdfd 	bl	800e842 <HAL_PCD_DataInStageCallback>
 8004c48:	e018      	b.n	8004c7c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	8bfb      	ldrh	r3, [r7, #30]
 8004c50:	441a      	add	r2, r3
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	69da      	ldr	r2, [r3, #28]
 8004c5a:	8bfb      	ldrh	r3, [r7, #30]
 8004c5c:	441a      	add	r2, r3
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f003 f907 	bl	8007e7c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004c6e:	e005      	b.n	8004c7c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004c70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c72:	461a      	mov	r2, r3
 8004c74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f91b 	bl	8004eb2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	b21b      	sxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f6ff ad0a 	blt.w	80046a2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3738      	adds	r7, #56	; 0x38
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d07e      	beq.n	8004dae <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cd8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	8b7b      	ldrh	r3, [r7, #26]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d306      	bcc.n	8004cf2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	699a      	ldr	r2, [r3, #24]
 8004ce8:	8b7b      	ldrh	r3, [r7, #26]
 8004cea:	1ad2      	subs	r2, r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	619a      	str	r2, [r3, #24]
 8004cf0:	e002      	b.n	8004cf8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d123      	bne.n	8004d48 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1a:	833b      	strh	r3, [r7, #24]
 8004d1c:	8b3b      	ldrh	r3, [r7, #24]
 8004d1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d22:	833b      	strh	r3, [r7, #24]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	441a      	add	r2, r3
 8004d32:	8b3b      	ldrh	r3, [r7, #24]
 8004d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d48:	88fb      	ldrh	r3, [r7, #6]
 8004d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d01f      	beq.n	8004d92 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6c:	82fb      	strh	r3, [r7, #22]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	441a      	add	r2, r3
 8004d7c:	8afb      	ldrh	r3, [r7, #22]
 8004d7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004d92:	8b7b      	ldrh	r3, [r7, #26]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8087 	beq.w	8004ea8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6959      	ldr	r1, [r3, #20]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	891a      	ldrh	r2, [r3, #8]
 8004da6:	8b7b      	ldrh	r3, [r7, #26]
 8004da8:	f004 fce2 	bl	8009770 <USB_ReadPMA>
 8004dac:	e07c      	b.n	8004ea8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	4413      	add	r3, r2
 8004dc2:	3306      	adds	r3, #6
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	6812      	ldr	r2, [r2, #0]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dd6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	699a      	ldr	r2, [r3, #24]
 8004ddc:	8b7b      	ldrh	r3, [r7, #26]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d306      	bcc.n	8004df0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	8b7b      	ldrh	r3, [r7, #26]
 8004de8:	1ad2      	subs	r2, r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	619a      	str	r2, [r3, #24]
 8004dee:	e002      	b.n	8004df6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2200      	movs	r2, #0
 8004df4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d123      	bne.n	8004e46 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e18:	83fb      	strh	r3, [r7, #30]
 8004e1a:	8bfb      	ldrh	r3, [r7, #30]
 8004e1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e20:	83fb      	strh	r3, [r7, #30]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	461a      	mov	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	441a      	add	r2, r3
 8004e30:	8bfb      	ldrh	r3, [r7, #30]
 8004e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d11f      	bne.n	8004e90 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6a:	83bb      	strh	r3, [r7, #28]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	441a      	add	r2, r3
 8004e7a:	8bbb      	ldrh	r3, [r7, #28]
 8004e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e90:	8b7b      	ldrh	r3, [r7, #26]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d008      	beq.n	8004ea8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	6959      	ldr	r1, [r3, #20]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	895a      	ldrh	r2, [r3, #10]
 8004ea2:	8b7b      	ldrh	r3, [r7, #26]
 8004ea4:	f004 fc64 	bl	8009770 <USB_ReadPMA>
    }
  }

  return count;
 8004ea8:	8b7b      	ldrh	r3, [r7, #26]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3720      	adds	r7, #32
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b0a2      	sub	sp, #136	; 0x88
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 81c7 	beq.w	800525a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	4413      	add	r3, r2
 8004ee0:	3302      	adds	r3, #2
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ef4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	699a      	ldr	r2, [r3, #24]
 8004efc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d907      	bls.n	8004f14 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	699a      	ldr	r2, [r3, #24]
 8004f08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f0c:	1ad2      	subs	r2, r2, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	619a      	str	r2, [r3, #24]
 8004f12:	e002      	b.n	8004f1a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2200      	movs	r2, #0
 8004f18:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 80b9 	bne.w	8005096 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	785b      	ldrb	r3, [r3, #1]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d126      	bne.n	8004f7a <HAL_PCD_EP_DB_Transmit+0xc8>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f40:	4413      	add	r3, r2
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	011a      	lsls	r2, r3, #4
 8004f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	801a      	strh	r2, [r3, #0]
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	801a      	strh	r2, [r3, #0]
 8004f78:	e01a      	b.n	8004fb0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	785b      	ldrb	r3, [r3, #1]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d116      	bne.n	8004fb0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	633b      	str	r3, [r7, #48]	; 0x30
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	4413      	add	r3, r2
 8004f98:	633b      	str	r3, [r7, #48]	; 0x30
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	011a      	lsls	r2, r3, #4
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fac:	2200      	movs	r2, #0
 8004fae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	785b      	ldrb	r3, [r3, #1]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d126      	bne.n	800500c <HAL_PCD_EP_DB_Transmit+0x15a>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	61bb      	str	r3, [r7, #24]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	011a      	lsls	r2, r3, #4
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fe4:	617b      	str	r3, [r7, #20]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	801a      	strh	r2, [r3, #0]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005004:	b29a      	uxth	r2, r3
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	801a      	strh	r2, [r3, #0]
 800500a:	e017      	b.n	800503c <HAL_PCD_EP_DB_Transmit+0x18a>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d113      	bne.n	800503c <HAL_PCD_EP_DB_Transmit+0x18a>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800501c:	b29b      	uxth	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	4413      	add	r3, r2
 8005024:	623b      	str	r3, [r7, #32]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	011a      	lsls	r2, r3, #4
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	4413      	add	r3, r2
 8005030:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005034:	61fb      	str	r3, [r7, #28]
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	2200      	movs	r2, #0
 800503a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	4619      	mov	r1, r3
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f009 fbfd 	bl	800e842 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005048:	88fb      	ldrh	r3, [r7, #6]
 800504a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 82d4 	beq.w	80055fc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	827b      	strh	r3, [r7, #18]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	441a      	add	r2, r3
 800507e:	8a7b      	ldrh	r3, [r7, #18]
 8005080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800508c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005090:	b29b      	uxth	r3, r3
 8005092:	8013      	strh	r3, [r2, #0]
 8005094:	e2b2      	b.n	80055fc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d021      	beq.n	80050e4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	441a      	add	r2, r3
 80050cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	f040 8286 	bne.w	80055fc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	695a      	ldr	r2, [r3, #20]
 80050f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050f8:	441a      	add	r2, r3
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	69da      	ldr	r2, [r3, #28]
 8005102:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005106:	441a      	add	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	6a1a      	ldr	r2, [r3, #32]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	429a      	cmp	r2, r3
 8005116:	d309      	bcc.n	800512c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	6a1a      	ldr	r2, [r3, #32]
 8005122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005124:	1ad2      	subs	r2, r2, r3
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	621a      	str	r2, [r3, #32]
 800512a:	e015      	b.n	8005158 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d107      	bne.n	8005144 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005134:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005138:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005142:	e009      	b.n	8005158 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2200      	movs	r2, #0
 8005156:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	785b      	ldrb	r3, [r3, #1]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d155      	bne.n	800520c <HAL_PCD_EP_DB_Transmit+0x35a>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	63bb      	str	r3, [r7, #56]	; 0x38
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516e:	b29b      	uxth	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	4413      	add	r3, r2
 8005176:	63bb      	str	r3, [r7, #56]	; 0x38
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	011a      	lsls	r2, r3, #4
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	4413      	add	r3, r2
 8005182:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005186:	637b      	str	r3, [r7, #52]	; 0x34
 8005188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800518a:	2b00      	cmp	r3, #0
 800518c:	d112      	bne.n	80051b4 <HAL_PCD_EP_DB_Transmit+0x302>
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	b29b      	uxth	r3, r3
 8005194:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005198:	b29a      	uxth	r2, r3
 800519a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519c:	801a      	strh	r2, [r3, #0]
 800519e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b0:	801a      	strh	r2, [r3, #0]
 80051b2:	e047      	b.n	8005244 <HAL_PCD_EP_DB_Transmit+0x392>
 80051b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b6:	2b3e      	cmp	r3, #62	; 0x3e
 80051b8:	d811      	bhi.n	80051de <HAL_PCD_EP_DB_Transmit+0x32c>
 80051ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051bc:	085b      	lsrs	r3, r3, #1
 80051be:	64bb      	str	r3, [r7, #72]	; 0x48
 80051c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_PCD_EP_DB_Transmit+0x31e>
 80051ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051cc:	3301      	adds	r3, #1
 80051ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	029b      	lsls	r3, r3, #10
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051da:	801a      	strh	r2, [r3, #0]
 80051dc:	e032      	b.n	8005244 <HAL_PCD_EP_DB_Transmit+0x392>
 80051de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e6:	f003 031f 	and.w	r3, r3, #31
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d102      	bne.n	80051f4 <HAL_PCD_EP_DB_Transmit+0x342>
 80051ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f0:	3b01      	subs	r3, #1
 80051f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	029b      	lsls	r3, r3, #10
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005204:	b29a      	uxth	r2, r3
 8005206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005208:	801a      	strh	r2, [r3, #0]
 800520a:	e01b      	b.n	8005244 <HAL_PCD_EP_DB_Transmit+0x392>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d117      	bne.n	8005244 <HAL_PCD_EP_DB_Transmit+0x392>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	643b      	str	r3, [r7, #64]	; 0x40
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005222:	b29b      	uxth	r3, r3
 8005224:	461a      	mov	r2, r3
 8005226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005228:	4413      	add	r3, r2
 800522a:	643b      	str	r3, [r7, #64]	; 0x40
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	011a      	lsls	r2, r3, #4
 8005232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005234:	4413      	add	r3, r2
 8005236:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800523a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800523c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800523e:	b29a      	uxth	r2, r3
 8005240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005242:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6818      	ldr	r0, [r3, #0]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	6959      	ldr	r1, [r3, #20]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	891a      	ldrh	r2, [r3, #8]
 8005250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005252:	b29b      	uxth	r3, r3
 8005254:	f004 fa47 	bl	80096e6 <USB_WritePMA>
 8005258:	e1d0      	b.n	80055fc <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005262:	b29b      	uxth	r3, r3
 8005264:	461a      	mov	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	4413      	add	r3, r2
 800526e:	3306      	adds	r3, #6
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	6812      	ldr	r2, [r2, #0]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005282:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800528e:	429a      	cmp	r2, r3
 8005290:	d307      	bcc.n	80052a2 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800529a:	1ad2      	subs	r2, r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	619a      	str	r2, [r3, #24]
 80052a0:	e002      	b.n	80052a8 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2200      	movs	r2, #0
 80052a6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f040 80c4 	bne.w	800543a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d126      	bne.n	8005308 <HAL_PCD_EP_DB_Transmit+0x456>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ce:	4413      	add	r3, r2
 80052d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	011a      	lsls	r2, r3, #4
 80052d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052da:	4413      	add	r3, r2
 80052dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80052e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052f0:	801a      	strh	r2, [r3, #0]
 80052f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005300:	b29a      	uxth	r2, r3
 8005302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005304:	801a      	strh	r2, [r3, #0]
 8005306:	e01a      	b.n	800533e <HAL_PCD_EP_DB_Transmit+0x48c>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	785b      	ldrb	r3, [r3, #1]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d116      	bne.n	800533e <HAL_PCD_EP_DB_Transmit+0x48c>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	677b      	str	r3, [r7, #116]	; 0x74
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800531e:	b29b      	uxth	r3, r3
 8005320:	461a      	mov	r2, r3
 8005322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005324:	4413      	add	r3, r2
 8005326:	677b      	str	r3, [r7, #116]	; 0x74
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	011a      	lsls	r2, r3, #4
 800532e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005330:	4413      	add	r3, r2
 8005332:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005336:	673b      	str	r3, [r7, #112]	; 0x70
 8005338:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800533a:	2200      	movs	r2, #0
 800533c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	67bb      	str	r3, [r7, #120]	; 0x78
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d12f      	bne.n	80053ac <HAL_PCD_EP_DB_Transmit+0x4fa>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800535c:	b29b      	uxth	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005364:	4413      	add	r3, r2
 8005366:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	011a      	lsls	r2, r3, #4
 8005370:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005374:	4413      	add	r3, r2
 8005376:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800537a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800537e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800538a:	b29a      	uxth	r2, r3
 800538c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005390:	801a      	strh	r2, [r3, #0]
 8005392:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053a8:	801a      	strh	r2, [r3, #0]
 80053aa:	e017      	b.n	80053dc <HAL_PCD_EP_DB_Transmit+0x52a>
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	785b      	ldrb	r3, [r3, #1]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d113      	bne.n	80053dc <HAL_PCD_EP_DB_Transmit+0x52a>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053bc:	b29b      	uxth	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053c2:	4413      	add	r3, r2
 80053c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	011a      	lsls	r2, r3, #4
 80053cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ce:	4413      	add	r3, r2
 80053d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053d8:	2200      	movs	r2, #0
 80053da:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	4619      	mov	r1, r3
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f009 fa2d 	bl	800e842 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80053e8:	88fb      	ldrh	r3, [r7, #6]
 80053ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f040 8104 	bne.w	80055fc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	461a      	mov	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	b29b      	uxth	r3, r3
 8005406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	441a      	add	r2, r3
 8005420:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800542c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005434:	b29b      	uxth	r3, r3
 8005436:	8013      	strh	r3, [r2, #0]
 8005438:	e0e0      	b.n	80055fc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800543a:	88fb      	ldrh	r3, [r7, #6]
 800543c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d121      	bne.n	8005488 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29b      	uxth	r3, r3
 8005456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	441a      	add	r2, r3
 8005470:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800547c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005484:	b29b      	uxth	r3, r3
 8005486:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800548e:	2b01      	cmp	r3, #1
 8005490:	f040 80b4 	bne.w	80055fc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	695a      	ldr	r2, [r3, #20]
 8005498:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800549c:	441a      	add	r2, r3
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	69da      	ldr	r2, [r3, #28]
 80054a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054aa:	441a      	add	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	6a1a      	ldr	r2, [r3, #32]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d309      	bcc.n	80054d0 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	6a1a      	ldr	r2, [r3, #32]
 80054c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c8:	1ad2      	subs	r2, r2, r3
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	621a      	str	r2, [r3, #32]
 80054ce:	e015      	b.n	80054fc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d107      	bne.n	80054e8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80054d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80054e6:	e009      	b.n	80054fc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2200      	movs	r2, #0
 80054f2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	667b      	str	r3, [r7, #100]	; 0x64
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	785b      	ldrb	r3, [r3, #1]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d155      	bne.n	80055b6 <HAL_PCD_EP_DB_Transmit+0x704>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005518:	b29b      	uxth	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800551e:	4413      	add	r3, r2
 8005520:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	011a      	lsls	r2, r3, #4
 8005528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800552a:	4413      	add	r3, r2
 800552c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005530:	65bb      	str	r3, [r7, #88]	; 0x58
 8005532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005534:	2b00      	cmp	r3, #0
 8005536:	d112      	bne.n	800555e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005542:	b29a      	uxth	r2, r3
 8005544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005556:	b29a      	uxth	r2, r3
 8005558:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800555a:	801a      	strh	r2, [r3, #0]
 800555c:	e044      	b.n	80055e8 <HAL_PCD_EP_DB_Transmit+0x736>
 800555e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005560:	2b3e      	cmp	r3, #62	; 0x3e
 8005562:	d811      	bhi.n	8005588 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005566:	085b      	lsrs	r3, r3, #1
 8005568:	657b      	str	r3, [r7, #84]	; 0x54
 800556a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005576:	3301      	adds	r3, #1
 8005578:	657b      	str	r3, [r7, #84]	; 0x54
 800557a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800557c:	b29b      	uxth	r3, r3
 800557e:	029b      	lsls	r3, r3, #10
 8005580:	b29a      	uxth	r2, r3
 8005582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005584:	801a      	strh	r2, [r3, #0]
 8005586:	e02f      	b.n	80055e8 <HAL_PCD_EP_DB_Transmit+0x736>
 8005588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	657b      	str	r3, [r7, #84]	; 0x54
 800558e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005590:	f003 031f 	and.w	r3, r3, #31
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800559a:	3b01      	subs	r3, #1
 800559c:	657b      	str	r3, [r7, #84]	; 0x54
 800559e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	029b      	lsls	r3, r3, #10
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055b2:	801a      	strh	r2, [r3, #0]
 80055b4:	e018      	b.n	80055e8 <HAL_PCD_EP_DB_Transmit+0x736>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	785b      	ldrb	r3, [r3, #1]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d114      	bne.n	80055e8 <HAL_PCD_EP_DB_Transmit+0x736>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055cc:	4413      	add	r3, r2
 80055ce:	667b      	str	r3, [r7, #100]	; 0x64
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	011a      	lsls	r2, r3, #4
 80055d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055d8:	4413      	add	r3, r2
 80055da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055de:	663b      	str	r3, [r7, #96]	; 0x60
 80055e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055e6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	6959      	ldr	r1, [r3, #20]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	895a      	ldrh	r2, [r3, #10]
 80055f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f004 f875 	bl	80096e6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	461a      	mov	r2, r3
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005616:	823b      	strh	r3, [r7, #16]
 8005618:	8a3b      	ldrh	r3, [r7, #16]
 800561a:	f083 0310 	eor.w	r3, r3, #16
 800561e:	823b      	strh	r3, [r7, #16]
 8005620:	8a3b      	ldrh	r3, [r7, #16]
 8005622:	f083 0320 	eor.w	r3, r3, #32
 8005626:	823b      	strh	r3, [r7, #16]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	441a      	add	r2, r3
 8005636:	8a3b      	ldrh	r3, [r7, #16]
 8005638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005648:	b29b      	uxth	r3, r3
 800564a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3788      	adds	r7, #136	; 0x88
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005656:	b480      	push	{r7}
 8005658:	b087      	sub	sp, #28
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	607b      	str	r3, [r7, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	817b      	strh	r3, [r7, #10]
 8005664:	4613      	mov	r3, r2
 8005666:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005668:	897b      	ldrh	r3, [r7, #10]
 800566a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566e:	b29b      	uxth	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00b      	beq.n	800568c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005674:	897b      	ldrh	r3, [r7, #10]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	e009      	b.n	80056a0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800568c:	897a      	ldrh	r2, [r7, #10]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80056a0:	893b      	ldrh	r3, [r7, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d107      	bne.n	80056b6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2200      	movs	r2, #0
 80056aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	80da      	strh	r2, [r3, #6]
 80056b4:	e00b      	b.n	80056ce <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2201      	movs	r2, #1
 80056ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	b29a      	uxth	r2, r3
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	0c1b      	lsrs	r3, r3, #16
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr
	...

080056dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e26c      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 8087 	beq.w	800580a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056fc:	4b92      	ldr	r3, [pc, #584]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f003 030c 	and.w	r3, r3, #12
 8005704:	2b04      	cmp	r3, #4
 8005706:	d00c      	beq.n	8005722 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005708:	4b8f      	ldr	r3, [pc, #572]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f003 030c 	and.w	r3, r3, #12
 8005710:	2b08      	cmp	r3, #8
 8005712:	d112      	bne.n	800573a <HAL_RCC_OscConfig+0x5e>
 8005714:	4b8c      	ldr	r3, [pc, #560]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005720:	d10b      	bne.n	800573a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005722:	4b89      	ldr	r3, [pc, #548]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d06c      	beq.n	8005808 <HAL_RCC_OscConfig+0x12c>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d168      	bne.n	8005808 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e246      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005742:	d106      	bne.n	8005752 <HAL_RCC_OscConfig+0x76>
 8005744:	4b80      	ldr	r3, [pc, #512]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a7f      	ldr	r2, [pc, #508]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 800574a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	e02e      	b.n	80057b0 <HAL_RCC_OscConfig+0xd4>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10c      	bne.n	8005774 <HAL_RCC_OscConfig+0x98>
 800575a:	4b7b      	ldr	r3, [pc, #492]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a7a      	ldr	r2, [pc, #488]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 8005760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	4b78      	ldr	r3, [pc, #480]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a77      	ldr	r2, [pc, #476]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 800576c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	e01d      	b.n	80057b0 <HAL_RCC_OscConfig+0xd4>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800577c:	d10c      	bne.n	8005798 <HAL_RCC_OscConfig+0xbc>
 800577e:	4b72      	ldr	r3, [pc, #456]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a71      	ldr	r2, [pc, #452]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 8005784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	4b6f      	ldr	r3, [pc, #444]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a6e      	ldr	r2, [pc, #440]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 8005790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e00b      	b.n	80057b0 <HAL_RCC_OscConfig+0xd4>
 8005798:	4b6b      	ldr	r3, [pc, #428]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a6a      	ldr	r2, [pc, #424]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 800579e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	4b68      	ldr	r3, [pc, #416]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a67      	ldr	r2, [pc, #412]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 80057aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d013      	beq.n	80057e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b8:	f7fc ff42 	bl	8002640 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057c0:	f7fc ff3e 	bl	8002640 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b64      	cmp	r3, #100	; 0x64
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e1fa      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057d2:	4b5d      	ldr	r3, [pc, #372]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0f0      	beq.n	80057c0 <HAL_RCC_OscConfig+0xe4>
 80057de:	e014      	b.n	800580a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e0:	f7fc ff2e 	bl	8002640 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057e8:	f7fc ff2a 	bl	8002640 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b64      	cmp	r3, #100	; 0x64
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e1e6      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057fa:	4b53      	ldr	r3, [pc, #332]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f0      	bne.n	80057e8 <HAL_RCC_OscConfig+0x10c>
 8005806:	e000      	b.n	800580a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d063      	beq.n	80058de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005816:	4b4c      	ldr	r3, [pc, #304]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f003 030c 	and.w	r3, r3, #12
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005822:	4b49      	ldr	r3, [pc, #292]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f003 030c 	and.w	r3, r3, #12
 800582a:	2b08      	cmp	r3, #8
 800582c:	d11c      	bne.n	8005868 <HAL_RCC_OscConfig+0x18c>
 800582e:	4b46      	ldr	r3, [pc, #280]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d116      	bne.n	8005868 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800583a:	4b43      	ldr	r3, [pc, #268]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <HAL_RCC_OscConfig+0x176>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d001      	beq.n	8005852 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e1ba      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005852:	4b3d      	ldr	r3, [pc, #244]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	4939      	ldr	r1, [pc, #228]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 8005862:	4313      	orrs	r3, r2
 8005864:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005866:	e03a      	b.n	80058de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d020      	beq.n	80058b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005870:	4b36      	ldr	r3, [pc, #216]	; (800594c <HAL_RCC_OscConfig+0x270>)
 8005872:	2201      	movs	r2, #1
 8005874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005876:	f7fc fee3 	bl	8002640 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800587e:	f7fc fedf 	bl	8002640 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e19b      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005890:	4b2d      	ldr	r3, [pc, #180]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0f0      	beq.n	800587e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800589c:	4b2a      	ldr	r3, [pc, #168]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	4927      	ldr	r1, [pc, #156]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	600b      	str	r3, [r1, #0]
 80058b0:	e015      	b.n	80058de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058b2:	4b26      	ldr	r3, [pc, #152]	; (800594c <HAL_RCC_OscConfig+0x270>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b8:	f7fc fec2 	bl	8002640 <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058c0:	f7fc febe 	bl	8002640 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e17a      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058d2:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f0      	bne.n	80058c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d03a      	beq.n	8005960 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d019      	beq.n	8005926 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058f2:	4b17      	ldr	r3, [pc, #92]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f8:	f7fc fea2 	bl	8002640 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005900:	f7fc fe9e 	bl	8002640 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e15a      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005912:	4b0d      	ldr	r3, [pc, #52]	; (8005948 <HAL_RCC_OscConfig+0x26c>)
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0f0      	beq.n	8005900 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800591e:	2001      	movs	r0, #1
 8005920:	f000 fb0a 	bl	8005f38 <RCC_Delay>
 8005924:	e01c      	b.n	8005960 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005926:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800592c:	f7fc fe88 	bl	8002640 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005932:	e00f      	b.n	8005954 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005934:	f7fc fe84 	bl	8002640 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d908      	bls.n	8005954 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e140      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>
 8005946:	bf00      	nop
 8005948:	40021000 	.word	0x40021000
 800594c:	42420000 	.word	0x42420000
 8005950:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005954:	4b9e      	ldr	r3, [pc, #632]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e9      	bne.n	8005934 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80a6 	beq.w	8005aba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800596e:	2300      	movs	r3, #0
 8005970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005972:	4b97      	ldr	r3, [pc, #604]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10d      	bne.n	800599a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800597e:	4b94      	ldr	r3, [pc, #592]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	4a93      	ldr	r2, [pc, #588]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005988:	61d3      	str	r3, [r2, #28]
 800598a:	4b91      	ldr	r3, [pc, #580]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005992:	60bb      	str	r3, [r7, #8]
 8005994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005996:	2301      	movs	r3, #1
 8005998:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800599a:	4b8e      	ldr	r3, [pc, #568]	; (8005bd4 <HAL_RCC_OscConfig+0x4f8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d118      	bne.n	80059d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059a6:	4b8b      	ldr	r3, [pc, #556]	; (8005bd4 <HAL_RCC_OscConfig+0x4f8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a8a      	ldr	r2, [pc, #552]	; (8005bd4 <HAL_RCC_OscConfig+0x4f8>)
 80059ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059b2:	f7fc fe45 	bl	8002640 <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b8:	e008      	b.n	80059cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ba:	f7fc fe41 	bl	8002640 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b64      	cmp	r3, #100	; 0x64
 80059c6:	d901      	bls.n	80059cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e0fd      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059cc:	4b81      	ldr	r3, [pc, #516]	; (8005bd4 <HAL_RCC_OscConfig+0x4f8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0f0      	beq.n	80059ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d106      	bne.n	80059ee <HAL_RCC_OscConfig+0x312>
 80059e0:	4b7b      	ldr	r3, [pc, #492]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	4a7a      	ldr	r2, [pc, #488]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 80059e6:	f043 0301 	orr.w	r3, r3, #1
 80059ea:	6213      	str	r3, [r2, #32]
 80059ec:	e02d      	b.n	8005a4a <HAL_RCC_OscConfig+0x36e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10c      	bne.n	8005a10 <HAL_RCC_OscConfig+0x334>
 80059f6:	4b76      	ldr	r3, [pc, #472]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	4a75      	ldr	r2, [pc, #468]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 80059fc:	f023 0301 	bic.w	r3, r3, #1
 8005a00:	6213      	str	r3, [r2, #32]
 8005a02:	4b73      	ldr	r3, [pc, #460]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	4a72      	ldr	r2, [pc, #456]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a08:	f023 0304 	bic.w	r3, r3, #4
 8005a0c:	6213      	str	r3, [r2, #32]
 8005a0e:	e01c      	b.n	8005a4a <HAL_RCC_OscConfig+0x36e>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	2b05      	cmp	r3, #5
 8005a16:	d10c      	bne.n	8005a32 <HAL_RCC_OscConfig+0x356>
 8005a18:	4b6d      	ldr	r3, [pc, #436]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	4a6c      	ldr	r2, [pc, #432]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a1e:	f043 0304 	orr.w	r3, r3, #4
 8005a22:	6213      	str	r3, [r2, #32]
 8005a24:	4b6a      	ldr	r3, [pc, #424]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	4a69      	ldr	r2, [pc, #420]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a2a:	f043 0301 	orr.w	r3, r3, #1
 8005a2e:	6213      	str	r3, [r2, #32]
 8005a30:	e00b      	b.n	8005a4a <HAL_RCC_OscConfig+0x36e>
 8005a32:	4b67      	ldr	r3, [pc, #412]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	4a66      	ldr	r2, [pc, #408]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	6213      	str	r3, [r2, #32]
 8005a3e:	4b64      	ldr	r3, [pc, #400]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	4a63      	ldr	r2, [pc, #396]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a44:	f023 0304 	bic.w	r3, r3, #4
 8005a48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d015      	beq.n	8005a7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a52:	f7fc fdf5 	bl	8002640 <HAL_GetTick>
 8005a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a58:	e00a      	b.n	8005a70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a5a:	f7fc fdf1 	bl	8002640 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e0ab      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a70:	4b57      	ldr	r3, [pc, #348]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0ee      	beq.n	8005a5a <HAL_RCC_OscConfig+0x37e>
 8005a7c:	e014      	b.n	8005aa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a7e:	f7fc fddf 	bl	8002640 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a84:	e00a      	b.n	8005a9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a86:	f7fc fddb 	bl	8002640 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e095      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a9c:	4b4c      	ldr	r3, [pc, #304]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1ee      	bne.n	8005a86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d105      	bne.n	8005aba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aae:	4b48      	ldr	r3, [pc, #288]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	4a47      	ldr	r2, [pc, #284]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ab8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 8081 	beq.w	8005bc6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ac4:	4b42      	ldr	r3, [pc, #264]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f003 030c 	and.w	r3, r3, #12
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d061      	beq.n	8005b94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d146      	bne.n	8005b66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad8:	4b3f      	ldr	r3, [pc, #252]	; (8005bd8 <HAL_RCC_OscConfig+0x4fc>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ade:	f7fc fdaf 	bl	8002640 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae6:	f7fc fdab 	bl	8002640 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e067      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005af8:	4b35      	ldr	r3, [pc, #212]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f0      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b0c:	d108      	bne.n	8005b20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b0e:	4b30      	ldr	r3, [pc, #192]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	492d      	ldr	r1, [pc, #180]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b20:	4b2b      	ldr	r3, [pc, #172]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a19      	ldr	r1, [r3, #32]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	430b      	orrs	r3, r1
 8005b32:	4927      	ldr	r1, [pc, #156]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b38:	4b27      	ldr	r3, [pc, #156]	; (8005bd8 <HAL_RCC_OscConfig+0x4fc>)
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b3e:	f7fc fd7f 	bl	8002640 <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b44:	e008      	b.n	8005b58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b46:	f7fc fd7b 	bl	8002640 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e037      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b58:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0f0      	beq.n	8005b46 <HAL_RCC_OscConfig+0x46a>
 8005b64:	e02f      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b66:	4b1c      	ldr	r3, [pc, #112]	; (8005bd8 <HAL_RCC_OscConfig+0x4fc>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6c:	f7fc fd68 	bl	8002640 <HAL_GetTick>
 8005b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b74:	f7fc fd64 	bl	8002640 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e020      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b86:	4b12      	ldr	r3, [pc, #72]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1f0      	bne.n	8005b74 <HAL_RCC_OscConfig+0x498>
 8005b92:	e018      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e013      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <HAL_RCC_OscConfig+0x4f4>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d106      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d001      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	40007000 	.word	0x40007000
 8005bd8:	42420060 	.word	0x42420060

08005bdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0d0      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bf0:	4b6a      	ldr	r3, [pc, #424]	; (8005d9c <HAL_RCC_ClockConfig+0x1c0>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d910      	bls.n	8005c20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bfe:	4b67      	ldr	r3, [pc, #412]	; (8005d9c <HAL_RCC_ClockConfig+0x1c0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f023 0207 	bic.w	r2, r3, #7
 8005c06:	4965      	ldr	r1, [pc, #404]	; (8005d9c <HAL_RCC_ClockConfig+0x1c0>)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0e:	4b63      	ldr	r3, [pc, #396]	; (8005d9c <HAL_RCC_ClockConfig+0x1c0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0b8      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d020      	beq.n	8005c6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c38:	4b59      	ldr	r3, [pc, #356]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	4a58      	ldr	r2, [pc, #352]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c50:	4b53      	ldr	r3, [pc, #332]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	4a52      	ldr	r2, [pc, #328]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c5c:	4b50      	ldr	r3, [pc, #320]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	494d      	ldr	r1, [pc, #308]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d040      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d107      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c82:	4b47      	ldr	r3, [pc, #284]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d115      	bne.n	8005cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e07f      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d107      	bne.n	8005caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c9a:	4b41      	ldr	r3, [pc, #260]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e073      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005caa:	4b3d      	ldr	r3, [pc, #244]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e06b      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cba:	4b39      	ldr	r3, [pc, #228]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f023 0203 	bic.w	r2, r3, #3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	4936      	ldr	r1, [pc, #216]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ccc:	f7fc fcb8 	bl	8002640 <HAL_GetTick>
 8005cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd2:	e00a      	b.n	8005cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd4:	f7fc fcb4 	bl	8002640 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e053      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cea:	4b2d      	ldr	r3, [pc, #180]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f003 020c 	and.w	r2, r3, #12
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d1eb      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cfc:	4b27      	ldr	r3, [pc, #156]	; (8005d9c <HAL_RCC_ClockConfig+0x1c0>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d210      	bcs.n	8005d2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d0a:	4b24      	ldr	r3, [pc, #144]	; (8005d9c <HAL_RCC_ClockConfig+0x1c0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f023 0207 	bic.w	r2, r3, #7
 8005d12:	4922      	ldr	r1, [pc, #136]	; (8005d9c <HAL_RCC_ClockConfig+0x1c0>)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1a:	4b20      	ldr	r3, [pc, #128]	; (8005d9c <HAL_RCC_ClockConfig+0x1c0>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d001      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e032      	b.n	8005d92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d38:	4b19      	ldr	r3, [pc, #100]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4916      	ldr	r1, [pc, #88]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d009      	beq.n	8005d6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d56:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	490e      	ldr	r1, [pc, #56]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d6a:	f000 f821 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	091b      	lsrs	r3, r3, #4
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	490a      	ldr	r1, [pc, #40]	; (8005da4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d7c:	5ccb      	ldrb	r3, [r1, r3]
 8005d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d82:	4a09      	ldr	r2, [pc, #36]	; (8005da8 <HAL_RCC_ClockConfig+0x1cc>)
 8005d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d86:	4b09      	ldr	r3, [pc, #36]	; (8005dac <HAL_RCC_ClockConfig+0x1d0>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fc fa8c 	bl	80022a8 <HAL_InitTick>

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40022000 	.word	0x40022000
 8005da0:	40021000 	.word	0x40021000
 8005da4:	0800f448 	.word	0x0800f448
 8005da8:	20000010 	.word	0x20000010
 8005dac:	20000014 	.word	0x20000014

08005db0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005db0:	b490      	push	{r4, r7}
 8005db2:	b08a      	sub	sp, #40	; 0x28
 8005db4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005db6:	4b2a      	ldr	r3, [pc, #168]	; (8005e60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005db8:	1d3c      	adds	r4, r7, #4
 8005dba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005dbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005dc0:	f240 2301 	movw	r3, #513	; 0x201
 8005dc4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61bb      	str	r3, [r7, #24]
 8005dce:	2300      	movs	r3, #0
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005dda:	4b22      	ldr	r3, [pc, #136]	; (8005e64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f003 030c 	and.w	r3, r3, #12
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d002      	beq.n	8005df0 <HAL_RCC_GetSysClockFreq+0x40>
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d003      	beq.n	8005df6 <HAL_RCC_GetSysClockFreq+0x46>
 8005dee:	e02d      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005df0:	4b1d      	ldr	r3, [pc, #116]	; (8005e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005df2:	623b      	str	r3, [r7, #32]
      break;
 8005df4:	e02d      	b.n	8005e52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	0c9b      	lsrs	r3, r3, #18
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e02:	4413      	add	r3, r2
 8005e04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005e08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d013      	beq.n	8005e3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e14:	4b13      	ldr	r3, [pc, #76]	; (8005e64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	0c5b      	lsrs	r3, r3, #17
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e22:	4413      	add	r3, r2
 8005e24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	4a0e      	ldr	r2, [pc, #56]	; (8005e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e2e:	fb02 f203 	mul.w	r2, r2, r3
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3a:	e004      	b.n	8005e46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	4a0b      	ldr	r2, [pc, #44]	; (8005e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e40:	fb02 f303 	mul.w	r3, r2, r3
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	623b      	str	r3, [r7, #32]
      break;
 8005e4a:	e002      	b.n	8005e52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e4c:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e4e:	623b      	str	r3, [r7, #32]
      break;
 8005e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e52:	6a3b      	ldr	r3, [r7, #32]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3728      	adds	r7, #40	; 0x28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bc90      	pop	{r4, r7}
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	0800ef9c 	.word	0x0800ef9c
 8005e64:	40021000 	.word	0x40021000
 8005e68:	00f42400 	.word	0x00f42400
 8005e6c:	003d0900 	.word	0x003d0900
 8005e70:	007a1200 	.word	0x007a1200

08005e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e78:	4b02      	ldr	r3, [pc, #8]	; (8005e84 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr
 8005e84:	20000010 	.word	0x20000010

08005e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e8c:	f7ff fff2 	bl	8005e74 <HAL_RCC_GetHCLKFreq>
 8005e90:	4602      	mov	r2, r0
 8005e92:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	0a1b      	lsrs	r3, r3, #8
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	4903      	ldr	r1, [pc, #12]	; (8005eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	40021000 	.word	0x40021000
 8005eac:	0800f458 	.word	0x0800f458

08005eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005eb4:	f7ff ffde 	bl	8005e74 <HAL_RCC_GetHCLKFreq>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	0adb      	lsrs	r3, r3, #11
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	4903      	ldr	r1, [pc, #12]	; (8005ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ec6:	5ccb      	ldrb	r3, [r1, r3]
 8005ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	0800f458 	.word	0x0800f458

08005ed8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	220f      	movs	r2, #15
 8005ee6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ee8:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <HAL_RCC_GetClockConfig+0x58>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f003 0203 	and.w	r2, r3, #3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ef4:	4b0e      	ldr	r3, [pc, #56]	; (8005f30 <HAL_RCC_GetClockConfig+0x58>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005f00:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <HAL_RCC_GetClockConfig+0x58>)
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005f0c:	4b08      	ldr	r3, [pc, #32]	; (8005f30 <HAL_RCC_GetClockConfig+0x58>)
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	08db      	lsrs	r3, r3, #3
 8005f12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f1a:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <HAL_RCC_GetClockConfig+0x5c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0207 	and.w	r2, r3, #7
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bc80      	pop	{r7}
 8005f2e:	4770      	bx	lr
 8005f30:	40021000 	.word	0x40021000
 8005f34:	40022000 	.word	0x40022000

08005f38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f40:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <RCC_Delay+0x34>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a0a      	ldr	r2, [pc, #40]	; (8005f70 <RCC_Delay+0x38>)
 8005f46:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4a:	0a5b      	lsrs	r3, r3, #9
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	fb02 f303 	mul.w	r3, r2, r3
 8005f52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f54:	bf00      	nop
  }
  while (Delay --);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	1e5a      	subs	r2, r3, #1
 8005f5a:	60fa      	str	r2, [r7, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1f9      	bne.n	8005f54 <RCC_Delay+0x1c>
}
 8005f60:	bf00      	nop
 8005f62:	bf00      	nop
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr
 8005f6c:	20000010 	.word	0x20000010
 8005f70:	10624dd3 	.word	0x10624dd3

08005f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d07d      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005f90:	2300      	movs	r3, #0
 8005f92:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f94:	4b4f      	ldr	r3, [pc, #316]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10d      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fa0:	4b4c      	ldr	r3, [pc, #304]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	4a4b      	ldr	r2, [pc, #300]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005faa:	61d3      	str	r3, [r2, #28]
 8005fac:	4b49      	ldr	r3, [pc, #292]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb4:	60bb      	str	r3, [r7, #8]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fbc:	4b46      	ldr	r3, [pc, #280]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d118      	bne.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fc8:	4b43      	ldr	r3, [pc, #268]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a42      	ldr	r2, [pc, #264]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fd4:	f7fc fb34 	bl	8002640 <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fda:	e008      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fdc:	f7fc fb30 	bl	8002640 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b64      	cmp	r3, #100	; 0x64
 8005fe8:	d901      	bls.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e06d      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fee:	4b3a      	ldr	r3, [pc, #232]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0f0      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ffa:	4b36      	ldr	r3, [pc, #216]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006002:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d02e      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	429a      	cmp	r2, r3
 8006016:	d027      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006018:	4b2e      	ldr	r3, [pc, #184]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006020:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006022:	4b2e      	ldr	r3, [pc, #184]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006024:	2201      	movs	r2, #1
 8006026:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006028:	4b2c      	ldr	r3, [pc, #176]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800602e:	4a29      	ldr	r2, [pc, #164]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d014      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800603e:	f7fc faff 	bl	8002640 <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006044:	e00a      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006046:	f7fc fafb 	bl	8002640 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	f241 3288 	movw	r2, #5000	; 0x1388
 8006054:	4293      	cmp	r3, r2
 8006056:	d901      	bls.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e036      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800605c:	4b1d      	ldr	r3, [pc, #116]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0ee      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006068:	4b1a      	ldr	r3, [pc, #104]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	4917      	ldr	r1, [pc, #92]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006076:	4313      	orrs	r3, r2
 8006078:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800607a:	7dfb      	ldrb	r3, [r7, #23]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d105      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006080:	4b14      	ldr	r3, [pc, #80]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	4a13      	ldr	r2, [pc, #76]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800608a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006098:	4b0e      	ldr	r3, [pc, #56]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	490b      	ldr	r1, [pc, #44]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d008      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060b6:	4b07      	ldr	r3, [pc, #28]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	4904      	ldr	r1, [pc, #16]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40021000 	.word	0x40021000
 80060d8:	40007000 	.word	0x40007000
 80060dc:	42420440 	.word	0x42420440

080060e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e076      	b.n	80061e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d108      	bne.n	800610c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006102:	d009      	beq.n	8006118 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	61da      	str	r2, [r3, #28]
 800610a:	e005      	b.n	8006118 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fc f834 	bl	80021a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800614e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006188:	431a      	orrs	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619c:	ea42 0103 	orr.w	r1, r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	0c1a      	lsrs	r2, r3, #16
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f002 0204 	and.w	r2, r2, #4
 80061be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	69da      	ldr	r2, [r3, #28]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	4613      	mov	r3, r2
 80061f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_SPI_Transmit+0x22>
 8006206:	2302      	movs	r3, #2
 8006208:	e126      	b.n	8006458 <HAL_SPI_Transmit+0x270>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006212:	f7fc fa15 	bl	8002640 <HAL_GetTick>
 8006216:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006218:	88fb      	ldrh	r3, [r7, #6]
 800621a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b01      	cmp	r3, #1
 8006226:	d002      	beq.n	800622e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006228:	2302      	movs	r3, #2
 800622a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800622c:	e10b      	b.n	8006446 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <HAL_SPI_Transmit+0x52>
 8006234:	88fb      	ldrh	r3, [r7, #6]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d102      	bne.n	8006240 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800623e:	e102      	b.n	8006446 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2203      	movs	r2, #3
 8006244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	88fa      	ldrh	r2, [r7, #6]
 8006258:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	88fa      	ldrh	r2, [r7, #6]
 800625e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006286:	d10f      	bne.n	80062a8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006296:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b2:	2b40      	cmp	r3, #64	; 0x40
 80062b4:	d007      	beq.n	80062c6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ce:	d14b      	bne.n	8006368 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <HAL_SPI_Transmit+0xf6>
 80062d8:	8afb      	ldrh	r3, [r7, #22]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d13e      	bne.n	800635c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e2:	881a      	ldrh	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ee:	1c9a      	adds	r2, r3, #2
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006302:	e02b      	b.n	800635c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b02      	cmp	r3, #2
 8006310:	d112      	bne.n	8006338 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006316:	881a      	ldrh	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	1c9a      	adds	r2, r3, #2
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800632c:	b29b      	uxth	r3, r3
 800632e:	3b01      	subs	r3, #1
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	86da      	strh	r2, [r3, #54]	; 0x36
 8006336:	e011      	b.n	800635c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006338:	f7fc f982 	bl	8002640 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d803      	bhi.n	8006350 <HAL_SPI_Transmit+0x168>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634e:	d102      	bne.n	8006356 <HAL_SPI_Transmit+0x16e>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d102      	bne.n	800635c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	77fb      	strb	r3, [r7, #31]
          goto error;
 800635a:	e074      	b.n	8006446 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1ce      	bne.n	8006304 <HAL_SPI_Transmit+0x11c>
 8006366:	e04c      	b.n	8006402 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <HAL_SPI_Transmit+0x18e>
 8006370:	8afb      	ldrh	r3, [r7, #22]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d140      	bne.n	80063f8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	330c      	adds	r3, #12
 8006380:	7812      	ldrb	r2, [r2, #0]
 8006382:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006392:	b29b      	uxth	r3, r3
 8006394:	3b01      	subs	r3, #1
 8006396:	b29a      	uxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800639c:	e02c      	b.n	80063f8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d113      	bne.n	80063d4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	330c      	adds	r3, #12
 80063b6:	7812      	ldrb	r2, [r2, #0]
 80063b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80063d2:	e011      	b.n	80063f8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063d4:	f7fc f934 	bl	8002640 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d803      	bhi.n	80063ec <HAL_SPI_Transmit+0x204>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ea:	d102      	bne.n	80063f2 <HAL_SPI_Transmit+0x20a>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d102      	bne.n	80063f8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063f6:	e026      	b.n	8006446 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1cd      	bne.n	800639e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f8b2 	bl	8006570 <SPI_EndRxTxTransaction>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2220      	movs	r2, #32
 8006416:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10a      	bne.n	8006436 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006420:	2300      	movs	r3, #0
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	77fb      	strb	r3, [r7, #31]
 8006442:	e000      	b.n	8006446 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006444:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006456:	7ffb      	ldrb	r3, [r7, #31]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006470:	f7fc f8e6 	bl	8002640 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006478:	1a9b      	subs	r3, r3, r2
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	4413      	add	r3, r2
 800647e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006480:	f7fc f8de 	bl	8002640 <HAL_GetTick>
 8006484:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006486:	4b39      	ldr	r3, [pc, #228]	; (800656c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	015b      	lsls	r3, r3, #5
 800648c:	0d1b      	lsrs	r3, r3, #20
 800648e:	69fa      	ldr	r2, [r7, #28]
 8006490:	fb02 f303 	mul.w	r3, r2, r3
 8006494:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006496:	e054      	b.n	8006542 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649e:	d050      	beq.n	8006542 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064a0:	f7fc f8ce 	bl	8002640 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	69fa      	ldr	r2, [r7, #28]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d902      	bls.n	80064b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d13d      	bne.n	8006532 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064ce:	d111      	bne.n	80064f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064d8:	d004      	beq.n	80064e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e2:	d107      	bne.n	80064f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064fc:	d10f      	bne.n	800651e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800651c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e017      	b.n	8006562 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	3b01      	subs	r3, #1
 8006540:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4013      	ands	r3, r2
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	429a      	cmp	r2, r3
 8006550:	bf0c      	ite	eq
 8006552:	2301      	moveq	r3, #1
 8006554:	2300      	movne	r3, #0
 8006556:	b2db      	uxtb	r3, r3
 8006558:	461a      	mov	r2, r3
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	429a      	cmp	r2, r3
 800655e:	d19b      	bne.n	8006498 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3720      	adds	r7, #32
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	20000010 	.word	0x20000010

08006570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af02      	add	r7, sp, #8
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2200      	movs	r2, #0
 8006584:	2180      	movs	r1, #128	; 0x80
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f7ff ff6a 	bl	8006460 <SPI_WaitFlagStateUntilTimeout>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d007      	beq.n	80065a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006596:	f043 0220 	orr.w	r2, r3, #32
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e000      	b.n	80065a4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e041      	b.n	8006642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d106      	bne.n	80065d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f839 	bl	800664a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3304      	adds	r3, #4
 80065e8:	4619      	mov	r1, r3
 80065ea:	4610      	mov	r0, r2
 80065ec:	f000 f9b4 	bl	8006958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	bc80      	pop	{r7}
 800665a:	4770      	bx	lr

0800665c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b01      	cmp	r3, #1
 800666e:	d001      	beq.n	8006674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e03a      	b.n	80066ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a18      	ldr	r2, [pc, #96]	; (80066f4 <HAL_TIM_Base_Start_IT+0x98>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00e      	beq.n	80066b4 <HAL_TIM_Base_Start_IT+0x58>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800669e:	d009      	beq.n	80066b4 <HAL_TIM_Base_Start_IT+0x58>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a14      	ldr	r2, [pc, #80]	; (80066f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d004      	beq.n	80066b4 <HAL_TIM_Base_Start_IT+0x58>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a13      	ldr	r2, [pc, #76]	; (80066fc <HAL_TIM_Base_Start_IT+0xa0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d111      	bne.n	80066d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b06      	cmp	r3, #6
 80066c4:	d010      	beq.n	80066e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f042 0201 	orr.w	r2, r2, #1
 80066d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d6:	e007      	b.n	80066e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0201 	orr.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr
 80066f4:	40012c00 	.word	0x40012c00
 80066f8:	40000400 	.word	0x40000400
 80066fc:	40000800 	.word	0x40000800

08006700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b02      	cmp	r3, #2
 8006714:	d122      	bne.n	800675c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b02      	cmp	r3, #2
 8006722:	d11b      	bne.n	800675c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f06f 0202 	mvn.w	r2, #2
 800672c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f8ed 	bl	8006922 <HAL_TIM_IC_CaptureCallback>
 8006748:	e005      	b.n	8006756 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f8e0 	bl	8006910 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f8ef 	bl	8006934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b04      	cmp	r3, #4
 8006768:	d122      	bne.n	80067b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b04      	cmp	r3, #4
 8006776:	d11b      	bne.n	80067b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f06f 0204 	mvn.w	r2, #4
 8006780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2202      	movs	r2, #2
 8006786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f8c3 	bl	8006922 <HAL_TIM_IC_CaptureCallback>
 800679c:	e005      	b.n	80067aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f8b6 	bl	8006910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f8c5 	bl	8006934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 0308 	and.w	r3, r3, #8
 80067ba:	2b08      	cmp	r3, #8
 80067bc:	d122      	bne.n	8006804 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f003 0308 	and.w	r3, r3, #8
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d11b      	bne.n	8006804 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f06f 0208 	mvn.w	r2, #8
 80067d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2204      	movs	r2, #4
 80067da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f899 	bl	8006922 <HAL_TIM_IC_CaptureCallback>
 80067f0:	e005      	b.n	80067fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f88c 	bl	8006910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f89b 	bl	8006934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	f003 0310 	and.w	r3, r3, #16
 800680e:	2b10      	cmp	r3, #16
 8006810:	d122      	bne.n	8006858 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	2b10      	cmp	r3, #16
 800681e:	d11b      	bne.n	8006858 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f06f 0210 	mvn.w	r2, #16
 8006828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2208      	movs	r2, #8
 800682e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f86f 	bl	8006922 <HAL_TIM_IC_CaptureCallback>
 8006844:	e005      	b.n	8006852 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f862 	bl	8006910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f871 	bl	8006934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b01      	cmp	r3, #1
 8006864:	d10e      	bne.n	8006884 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b01      	cmp	r3, #1
 8006872:	d107      	bne.n	8006884 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f06f 0201 	mvn.w	r2, #1
 800687c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fa fc02 	bl	8001088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688e:	2b80      	cmp	r3, #128	; 0x80
 8006890:	d10e      	bne.n	80068b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689c:	2b80      	cmp	r3, #128	; 0x80
 800689e:	d107      	bne.n	80068b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f8bf 	bl	8006a2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ba:	2b40      	cmp	r3, #64	; 0x40
 80068bc:	d10e      	bne.n	80068dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c8:	2b40      	cmp	r3, #64	; 0x40
 80068ca:	d107      	bne.n	80068dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f835 	bl	8006946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	d10e      	bne.n	8006908 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	d107      	bne.n	8006908 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f06f 0220 	mvn.w	r2, #32
 8006900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f88a 	bl	8006a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006908:	bf00      	nop
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	bc80      	pop	{r7}
 8006920:	4770      	bx	lr

08006922 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr

08006934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	bc80      	pop	{r7}
 8006944:	4770      	bx	lr

08006946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	bc80      	pop	{r7}
 8006956:	4770      	bx	lr

08006958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a29      	ldr	r2, [pc, #164]	; (8006a10 <TIM_Base_SetConfig+0xb8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d00b      	beq.n	8006988 <TIM_Base_SetConfig+0x30>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006976:	d007      	beq.n	8006988 <TIM_Base_SetConfig+0x30>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a26      	ldr	r2, [pc, #152]	; (8006a14 <TIM_Base_SetConfig+0xbc>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d003      	beq.n	8006988 <TIM_Base_SetConfig+0x30>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a25      	ldr	r2, [pc, #148]	; (8006a18 <TIM_Base_SetConfig+0xc0>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d108      	bne.n	800699a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a1c      	ldr	r2, [pc, #112]	; (8006a10 <TIM_Base_SetConfig+0xb8>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00b      	beq.n	80069ba <TIM_Base_SetConfig+0x62>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a8:	d007      	beq.n	80069ba <TIM_Base_SetConfig+0x62>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a19      	ldr	r2, [pc, #100]	; (8006a14 <TIM_Base_SetConfig+0xbc>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d003      	beq.n	80069ba <TIM_Base_SetConfig+0x62>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a18      	ldr	r2, [pc, #96]	; (8006a18 <TIM_Base_SetConfig+0xc0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d108      	bne.n	80069cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a07      	ldr	r2, [pc, #28]	; (8006a10 <TIM_Base_SetConfig+0xb8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d103      	bne.n	8006a00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	691a      	ldr	r2, [r3, #16]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	615a      	str	r2, [r3, #20]
}
 8006a06:	bf00      	nop
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr
 8006a10:	40012c00 	.word	0x40012c00
 8006a14:	40000400 	.word	0x40000400
 8006a18:	40000800 	.word	0x40000800

08006a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bc80      	pop	{r7}
 8006a2c:	4770      	bx	lr

08006a2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bc80      	pop	{r7}
 8006a3e:	4770      	bx	lr

08006a40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e03f      	b.n	8006ad2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d106      	bne.n	8006a6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7fb fcde 	bl	8002428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2224      	movs	r2, #36	; 0x24
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fba9 	bl	80071dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691a      	ldr	r2, [r3, #16]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	695a      	ldr	r2, [r3, #20]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006aa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68da      	ldr	r2, [r3, #12]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ab8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	d11d      	bne.n	8006b30 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <HAL_UART_Receive_IT+0x26>
 8006afa:	88fb      	ldrh	r3, [r7, #6]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e016      	b.n	8006b32 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_UART_Receive_IT+0x38>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e00f      	b.n	8006b32 <HAL_UART_Receive_IT+0x58>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006b20:	88fb      	ldrh	r3, [r7, #6]
 8006b22:	461a      	mov	r2, r3
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 f9cf 	bl	8006eca <UART_Start_Receive_IT>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	e000      	b.n	8006b32 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006b30:	2302      	movs	r3, #2
  }
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08a      	sub	sp, #40	; 0x28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	f003 030f 	and.w	r3, r3, #15
 8006b6a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10d      	bne.n	8006b8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d008      	beq.n	8006b8e <HAL_UART_IRQHandler+0x52>
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	f003 0320 	and.w	r3, r3, #32
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fa7f 	bl	800708a <UART_Receive_IT>
      return;
 8006b8c:	e17b      	b.n	8006e86 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 80b1 	beq.w	8006cf8 <HAL_UART_IRQHandler+0x1bc>
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d105      	bne.n	8006bac <HAL_UART_IRQHandler+0x70>
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 80a6 	beq.w	8006cf8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <HAL_UART_IRQHandler+0x90>
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	f043 0201 	orr.w	r2, r3, #1
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	f003 0304 	and.w	r3, r3, #4
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <HAL_UART_IRQHandler+0xb0>
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d005      	beq.n	8006bec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be4:	f043 0202 	orr.w	r2, r3, #2
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <HAL_UART_IRQHandler+0xd0>
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d005      	beq.n	8006c0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c04:	f043 0204 	orr.w	r2, r3, #4
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	f003 0308 	and.w	r3, r3, #8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00f      	beq.n	8006c36 <HAL_UART_IRQHandler+0xfa>
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d104      	bne.n	8006c2a <HAL_UART_IRQHandler+0xee>
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	f043 0208 	orr.w	r2, r3, #8
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 811e 	beq.w	8006e7c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	f003 0320 	and.w	r3, r3, #32
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d007      	beq.n	8006c5a <HAL_UART_IRQHandler+0x11e>
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fa18 	bl	800708a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bf14      	ite	ne
 8006c68:	2301      	movne	r3, #1
 8006c6a:	2300      	moveq	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c74:	f003 0308 	and.w	r3, r3, #8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d102      	bne.n	8006c82 <HAL_UART_IRQHandler+0x146>
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d031      	beq.n	8006ce6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f95a 	bl	8006f3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d023      	beq.n	8006cde <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	695a      	ldr	r2, [r3, #20]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ca4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d013      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	4a76      	ldr	r2, [pc, #472]	; (8006e8c <HAL_UART_IRQHandler+0x350>)
 8006cb4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fb fde4 	bl	8002888 <HAL_DMA_Abort_IT>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d016      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd4:	e00e      	b.n	8006cf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f8e3 	bl	8006ea2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cdc:	e00a      	b.n	8006cf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f8df 	bl	8006ea2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce4:	e006      	b.n	8006cf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f8db 	bl	8006ea2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006cf2:	e0c3      	b.n	8006e7c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf4:	bf00      	nop
    return;
 8006cf6:	e0c1      	b.n	8006e7c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	f040 80a1 	bne.w	8006e44 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	f003 0310 	and.w	r3, r3, #16
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 809b 	beq.w	8006e44 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	f003 0310 	and.w	r3, r3, #16
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 8095 	beq.w	8006e44 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d04e      	beq.n	8006ddc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006d48:	8a3b      	ldrh	r3, [r7, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 8098 	beq.w	8006e80 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d54:	8a3a      	ldrh	r2, [r7, #16]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	f080 8092 	bcs.w	8006e80 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	8a3a      	ldrh	r2, [r7, #16]
 8006d60:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d02b      	beq.n	8006dc4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d7a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	695a      	ldr	r2, [r3, #20]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0201 	bic.w	r2, r2, #1
 8006d8a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	695a      	ldr	r2, [r3, #20]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d9a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0210 	bic.w	r2, r2, #16
 8006db8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fb fd27 	bl	8002812 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f86d 	bl	8006eb4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006dda:	e051      	b.n	8006e80 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d047      	beq.n	8006e84 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006df4:	8a7b      	ldrh	r3, [r7, #18]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d044      	beq.n	8006e84 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e08:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	695a      	ldr	r2, [r3, #20]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0201 	bic.w	r2, r2, #1
 8006e18:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0210 	bic.w	r2, r2, #16
 8006e36:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e38:	8a7b      	ldrh	r3, [r7, #18]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f839 	bl	8006eb4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006e42:	e01f      	b.n	8006e84 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d008      	beq.n	8006e60 <HAL_UART_IRQHandler+0x324>
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f8af 	bl	8006fbc <UART_Transmit_IT>
    return;
 8006e5e:	e012      	b.n	8006e86 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00d      	beq.n	8006e86 <HAL_UART_IRQHandler+0x34a>
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d008      	beq.n	8006e86 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f8f0 	bl	800705a <UART_EndTransmit_IT>
    return;
 8006e7a:	e004      	b.n	8006e86 <HAL_UART_IRQHandler+0x34a>
    return;
 8006e7c:	bf00      	nop
 8006e7e:	e002      	b.n	8006e86 <HAL_UART_IRQHandler+0x34a>
      return;
 8006e80:	bf00      	nop
 8006e82:	e000      	b.n	8006e86 <HAL_UART_IRQHandler+0x34a>
      return;
 8006e84:	bf00      	nop
  }
}
 8006e86:	3728      	adds	r7, #40	; 0x28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	08006f95 	.word	0x08006f95

08006e90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr

08006ea2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bc80      	pop	{r7}
 8006ec8:	4770      	bx	lr

08006eca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	88fa      	ldrh	r2, [r7, #6]
 8006ee2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	88fa      	ldrh	r2, [r7, #6]
 8006ee8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2222      	movs	r2, #34	; 0x22
 8006ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f0e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	695a      	ldr	r2, [r3, #20]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0201 	orr.w	r2, r2, #1
 8006f1e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0220 	orr.w	r2, r2, #32
 8006f2e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bc80      	pop	{r7}
 8006f3a:	4770      	bx	lr

08006f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68da      	ldr	r2, [r3, #12]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f52:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	695a      	ldr	r2, [r3, #20]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0201 	bic.w	r2, r2, #1
 8006f62:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d107      	bne.n	8006f7c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f022 0210 	bic.w	r2, r2, #16
 8006f7a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f8a:	bf00      	nop
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr

08006f94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f7ff ff77 	bl	8006ea2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fb4:	bf00      	nop
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b21      	cmp	r3, #33	; 0x21
 8006fce:	d13e      	bne.n	800704e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd8:	d114      	bne.n	8007004 <UART_Transmit_IT+0x48>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d110      	bne.n	8007004 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ff6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	1c9a      	adds	r2, r3, #2
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	621a      	str	r2, [r3, #32]
 8007002:	e008      	b.n	8007016 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	1c59      	adds	r1, r3, #1
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6211      	str	r1, [r2, #32]
 800700e:	781a      	ldrb	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800701a:	b29b      	uxth	r3, r3
 800701c:	3b01      	subs	r3, #1
 800701e:	b29b      	uxth	r3, r3
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	4619      	mov	r1, r3
 8007024:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10f      	bne.n	800704a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68da      	ldr	r2, [r3, #12]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007038:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007048:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	e000      	b.n	8007050 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800704e:	2302      	movs	r3, #2
  }
}
 8007050:	4618      	mov	r0, r3
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	bc80      	pop	{r7}
 8007058:	4770      	bx	lr

0800705a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b082      	sub	sp, #8
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007070:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2220      	movs	r2, #32
 8007076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7ff ff08 	bl	8006e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b086      	sub	sp, #24
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b22      	cmp	r3, #34	; 0x22
 800709c:	f040 8099 	bne.w	80071d2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a8:	d117      	bne.n	80070da <UART_Receive_IT+0x50>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d113      	bne.n	80070da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ba:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d2:	1c9a      	adds	r2, r3, #2
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	629a      	str	r2, [r3, #40]	; 0x28
 80070d8:	e026      	b.n	8007128 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070de:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80070e0:	2300      	movs	r3, #0
 80070e2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ec:	d007      	beq.n	80070fe <UART_Receive_IT+0x74>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <UART_Receive_IT+0x82>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	b2da      	uxtb	r2, r3
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	701a      	strb	r2, [r3, #0]
 800710a:	e008      	b.n	800711e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	b2db      	uxtb	r3, r3
 8007114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007118:	b2da      	uxtb	r2, r3
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29b      	uxth	r3, r3
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	4619      	mov	r1, r3
 8007136:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007138:	2b00      	cmp	r3, #0
 800713a:	d148      	bne.n	80071ce <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 0220 	bic.w	r2, r2, #32
 800714a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68da      	ldr	r2, [r3, #12]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800715a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	695a      	ldr	r2, [r3, #20]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0201 	bic.w	r2, r2, #1
 800716a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2220      	movs	r2, #32
 8007170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	2b01      	cmp	r3, #1
 800717a:	d123      	bne.n	80071c4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0210 	bic.w	r2, r2, #16
 8007190:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0310 	and.w	r3, r3, #16
 800719c:	2b10      	cmp	r3, #16
 800719e:	d10a      	bne.n	80071b6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff fe79 	bl	8006eb4 <HAL_UARTEx_RxEventCallback>
 80071c2:	e002      	b.n	80071ca <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7f9 fd2f 	bl	8000c28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	e002      	b.n	80071d4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	e000      	b.n	80071d4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80071d2:	2302      	movs	r3, #2
  }
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	689a      	ldr	r2, [r3, #8]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	431a      	orrs	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	4313      	orrs	r3, r2
 800720a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007216:	f023 030c 	bic.w	r3, r3, #12
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	6812      	ldr	r2, [r2, #0]
 800721e:	68b9      	ldr	r1, [r7, #8]
 8007220:	430b      	orrs	r3, r1
 8007222:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	699a      	ldr	r2, [r3, #24]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a2c      	ldr	r2, [pc, #176]	; (80072f0 <UART_SetConfig+0x114>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d103      	bne.n	800724c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007244:	f7fe fe34 	bl	8005eb0 <HAL_RCC_GetPCLK2Freq>
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	e002      	b.n	8007252 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800724c:	f7fe fe1c 	bl	8005e88 <HAL_RCC_GetPCLK1Freq>
 8007250:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4613      	mov	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	009a      	lsls	r2, r3, #2
 800725c:	441a      	add	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	fbb2 f3f3 	udiv	r3, r2, r3
 8007268:	4a22      	ldr	r2, [pc, #136]	; (80072f4 <UART_SetConfig+0x118>)
 800726a:	fba2 2303 	umull	r2, r3, r2, r3
 800726e:	095b      	lsrs	r3, r3, #5
 8007270:	0119      	lsls	r1, r3, #4
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	4613      	mov	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	009a      	lsls	r2, r3, #2
 800727c:	441a      	add	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	fbb2 f2f3 	udiv	r2, r2, r3
 8007288:	4b1a      	ldr	r3, [pc, #104]	; (80072f4 <UART_SetConfig+0x118>)
 800728a:	fba3 0302 	umull	r0, r3, r3, r2
 800728e:	095b      	lsrs	r3, r3, #5
 8007290:	2064      	movs	r0, #100	; 0x64
 8007292:	fb00 f303 	mul.w	r3, r0, r3
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	011b      	lsls	r3, r3, #4
 800729a:	3332      	adds	r3, #50	; 0x32
 800729c:	4a15      	ldr	r2, [pc, #84]	; (80072f4 <UART_SetConfig+0x118>)
 800729e:	fba2 2303 	umull	r2, r3, r2, r3
 80072a2:	095b      	lsrs	r3, r3, #5
 80072a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072a8:	4419      	add	r1, r3
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4613      	mov	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	009a      	lsls	r2, r3, #2
 80072b4:	441a      	add	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80072c0:	4b0c      	ldr	r3, [pc, #48]	; (80072f4 <UART_SetConfig+0x118>)
 80072c2:	fba3 0302 	umull	r0, r3, r3, r2
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	2064      	movs	r0, #100	; 0x64
 80072ca:	fb00 f303 	mul.w	r3, r0, r3
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	011b      	lsls	r3, r3, #4
 80072d2:	3332      	adds	r3, #50	; 0x32
 80072d4:	4a07      	ldr	r2, [pc, #28]	; (80072f4 <UART_SetConfig+0x118>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	095b      	lsrs	r3, r3, #5
 80072dc:	f003 020f 	and.w	r2, r3, #15
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	440a      	add	r2, r1
 80072e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80072e8:	bf00      	nop
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	40013800 	.word	0x40013800
 80072f4:	51eb851f 	.word	0x51eb851f

080072f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80072f8:	b084      	sub	sp, #16
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	f107 0014 	add.w	r0, r7, #20
 8007306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	bc80      	pop	{r7}
 8007314:	b004      	add	sp, #16
 8007316:	4770      	bx	lr

08007318 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007328:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800732c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	b29a      	uxth	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	bc80      	pop	{r7}
 8007342:	4770      	bx	lr

08007344 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800734c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007350:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007358:	b29a      	uxth	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	b29b      	uxth	r3, r3
 800735e:	43db      	mvns	r3, r3
 8007360:	b29b      	uxth	r3, r3
 8007362:	4013      	ands	r3, r2
 8007364:	b29a      	uxth	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr

08007378 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	bc80      	pop	{r7}
 800738e:	4770      	bx	lr

08007390 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007390:	b084      	sub	sp, #16
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	f107 0014 	add.w	r0, r7, #20
 800739e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bc80      	pop	{r7}
 80073cc:	b004      	add	sp, #16
 80073ce:	4770      	bx	lr

080073d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b09b      	sub	sp, #108	; 0x6c
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80073f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	78db      	ldrb	r3, [r3, #3]
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d81f      	bhi.n	8007442 <USB_ActivateEndpoint+0x72>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <USB_ActivateEndpoint+0x38>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	08007419 	.word	0x08007419
 800740c:	08007435 	.word	0x08007435
 8007410:	0800744b 	.word	0x0800744b
 8007414:	08007427 	.word	0x08007427
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007418:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800741c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007420:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007424:	e012      	b.n	800744c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007426:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800742a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800742e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007432:	e00b      	b.n	800744c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007434:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800743c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007440:	e004      	b.n	800744c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007448:	e000      	b.n	800744c <USB_ActivateEndpoint+0x7c>
      break;
 800744a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	441a      	add	r2, r3
 8007456:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800745a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800745e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746a:	b29b      	uxth	r3, r3
 800746c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007484:	b29a      	uxth	r2, r3
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	b29b      	uxth	r3, r3
 800748c:	4313      	orrs	r3, r2
 800748e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	441a      	add	r2, r3
 800749c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80074a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	7b1b      	ldrb	r3, [r3, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f040 8149 	bne.w	8007750 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	785b      	ldrb	r3, [r3, #1]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 8084 	beq.w	80075d0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	4413      	add	r3, r2
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	011a      	lsls	r2, r3, #4
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074ea:	613b      	str	r3, [r7, #16]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	88db      	ldrh	r3, [r3, #6]
 80074f0:	085b      	lsrs	r3, r3, #1
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	81fb      	strh	r3, [r7, #14]
 800750a:	89fb      	ldrh	r3, [r7, #14]
 800750c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007510:	2b00      	cmp	r3, #0
 8007512:	d01b      	beq.n	800754c <USB_ActivateEndpoint+0x17c>
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752a:	81bb      	strh	r3, [r7, #12]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	441a      	add	r2, r3
 8007536:	89bb      	ldrh	r3, [r7, #12]
 8007538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800753c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007544:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007548:	b29b      	uxth	r3, r3
 800754a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	78db      	ldrb	r3, [r3, #3]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d020      	beq.n	8007596 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	b29b      	uxth	r3, r3
 8007562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800756a:	813b      	strh	r3, [r7, #8]
 800756c:	893b      	ldrh	r3, [r7, #8]
 800756e:	f083 0320 	eor.w	r3, r3, #32
 8007572:	813b      	strh	r3, [r7, #8]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	441a      	add	r2, r3
 800757e:	893b      	ldrh	r3, [r7, #8]
 8007580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800758c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007590:	b29b      	uxth	r3, r3
 8007592:	8013      	strh	r3, [r2, #0]
 8007594:	e27f      	b.n	8007a96 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ac:	817b      	strh	r3, [r7, #10]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	441a      	add	r2, r3
 80075b8:	897b      	ldrh	r3, [r7, #10]
 80075ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	8013      	strh	r3, [r2, #0]
 80075ce:	e262      	b.n	8007a96 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075da:	b29b      	uxth	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e0:	4413      	add	r3, r2
 80075e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	011a      	lsls	r2, r3, #4
 80075ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80075f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	88db      	ldrh	r3, [r3, #6]
 80075f8:	085b      	lsrs	r3, r3, #1
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800760e:	b29b      	uxth	r3, r3
 8007610:	461a      	mov	r2, r3
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	4413      	add	r3, r2
 8007616:	627b      	str	r3, [r7, #36]	; 0x24
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	011a      	lsls	r2, r3, #4
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	4413      	add	r3, r2
 8007622:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007626:	623b      	str	r3, [r7, #32]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d112      	bne.n	8007656 <USB_ActivateEndpoint+0x286>
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800763a:	b29a      	uxth	r2, r3
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	801a      	strh	r2, [r3, #0]
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800764a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800764e:	b29a      	uxth	r2, r3
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	801a      	strh	r2, [r3, #0]
 8007654:	e02f      	b.n	80076b6 <USB_ActivateEndpoint+0x2e6>
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	2b3e      	cmp	r3, #62	; 0x3e
 800765c:	d813      	bhi.n	8007686 <USB_ActivateEndpoint+0x2b6>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	085b      	lsrs	r3, r3, #1
 8007664:	663b      	str	r3, [r7, #96]	; 0x60
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d002      	beq.n	8007678 <USB_ActivateEndpoint+0x2a8>
 8007672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007674:	3301      	adds	r3, #1
 8007676:	663b      	str	r3, [r7, #96]	; 0x60
 8007678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800767a:	b29b      	uxth	r3, r3
 800767c:	029b      	lsls	r3, r3, #10
 800767e:	b29a      	uxth	r2, r3
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	801a      	strh	r2, [r3, #0]
 8007684:	e017      	b.n	80076b6 <USB_ActivateEndpoint+0x2e6>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	095b      	lsrs	r3, r3, #5
 800768c:	663b      	str	r3, [r7, #96]	; 0x60
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f003 031f 	and.w	r3, r3, #31
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <USB_ActivateEndpoint+0x2d0>
 800769a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800769c:	3b01      	subs	r3, #1
 800769e:	663b      	str	r3, [r7, #96]	; 0x60
 80076a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	029b      	lsls	r3, r3, #10
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	83fb      	strh	r3, [r7, #30]
 80076c4:	8bfb      	ldrh	r3, [r7, #30]
 80076c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d01b      	beq.n	8007706 <USB_ActivateEndpoint+0x336>
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e4:	83bb      	strh	r3, [r7, #28]
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	441a      	add	r2, r3
 80076f0:	8bbb      	ldrh	r3, [r7, #28]
 80076f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007702:	b29b      	uxth	r3, r3
 8007704:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	b29b      	uxth	r3, r3
 8007714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800771c:	837b      	strh	r3, [r7, #26]
 800771e:	8b7b      	ldrh	r3, [r7, #26]
 8007720:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007724:	837b      	strh	r3, [r7, #26]
 8007726:	8b7b      	ldrh	r3, [r7, #26]
 8007728:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800772c:	837b      	strh	r3, [r7, #26]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	441a      	add	r2, r3
 8007738:	8b7b      	ldrh	r3, [r7, #26]
 800773a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800773e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774a:	b29b      	uxth	r3, r3
 800774c:	8013      	strh	r3, [r2, #0]
 800774e:	e1a2      	b.n	8007a96 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007766:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	441a      	add	r2, r3
 8007774:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800777c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007780:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007788:	b29b      	uxth	r3, r3
 800778a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007796:	b29b      	uxth	r3, r3
 8007798:	461a      	mov	r2, r3
 800779a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800779c:	4413      	add	r3, r2
 800779e:	65bb      	str	r3, [r7, #88]	; 0x58
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	011a      	lsls	r2, r3, #4
 80077a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ae:	657b      	str	r3, [r7, #84]	; 0x54
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	891b      	ldrh	r3, [r3, #8]
 80077b4:	085b      	lsrs	r3, r3, #1
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077be:	801a      	strh	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	653b      	str	r3, [r7, #80]	; 0x50
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077d0:	4413      	add	r3, r2
 80077d2:	653b      	str	r3, [r7, #80]	; 0x50
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	011a      	lsls	r2, r3, #4
 80077da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077dc:	4413      	add	r3, r2
 80077de:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80077e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	895b      	ldrh	r3, [r3, #10]
 80077e8:	085b      	lsrs	r3, r3, #1
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	785b      	ldrb	r3, [r3, #1]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f040 8091 	bne.w	8007920 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800780c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800780e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d01b      	beq.n	800784e <USB_ActivateEndpoint+0x47e>
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4413      	add	r3, r2
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	b29b      	uxth	r3, r3
 8007824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800782c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	441a      	add	r2, r3
 8007838:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800783a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800783e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007842:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800784a:	b29b      	uxth	r3, r3
 800784c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	881b      	ldrh	r3, [r3, #0]
 800785a:	873b      	strh	r3, [r7, #56]	; 0x38
 800785c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800785e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	d01b      	beq.n	800789e <USB_ActivateEndpoint+0x4ce>
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	b29b      	uxth	r3, r3
 8007874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	441a      	add	r2, r3
 8007888:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800788a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800788e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007896:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800789a:	b29b      	uxth	r3, r3
 800789c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80078b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80078b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80078be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80078c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	441a      	add	r2, r3
 80078d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80078d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078fc:	867b      	strh	r3, [r7, #50]	; 0x32
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	441a      	add	r2, r3
 8007908:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800790a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800790e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800791a:	b29b      	uxth	r3, r3
 800791c:	8013      	strh	r3, [r2, #0]
 800791e:	e0ba      	b.n	8007a96 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	881b      	ldrh	r3, [r3, #0]
 800792c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007930:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d01d      	beq.n	8007978 <USB_ActivateEndpoint+0x5a8>
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	881b      	ldrh	r3, [r3, #0]
 8007948:	b29b      	uxth	r3, r3
 800794a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800794e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007952:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	441a      	add	r2, r3
 8007960:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800796c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007974:	b29b      	uxth	r3, r3
 8007976:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007988:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800798c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01d      	beq.n	80079d0 <USB_ActivateEndpoint+0x600>
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	441a      	add	r2, r3
 80079b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80079bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	78db      	ldrb	r3, [r3, #3]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d024      	beq.n	8007a22 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	881b      	ldrh	r3, [r3, #0]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80079f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80079f6:	f083 0320 	eor.w	r3, r3, #32
 80079fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	441a      	add	r2, r3
 8007a08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	8013      	strh	r3, [r2, #0]
 8007a20:	e01d      	b.n	8007a5e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	441a      	add	r2, r3
 8007a46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	881b      	ldrh	r3, [r3, #0]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a74:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	441a      	add	r2, r3
 8007a80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007a96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	376c      	adds	r7, #108	; 0x6c
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bc80      	pop	{r7}
 8007aa2:	4770      	bx	lr

08007aa4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b08d      	sub	sp, #52	; 0x34
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	7b1b      	ldrb	r3, [r3, #12]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f040 808e 	bne.w	8007bd4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d044      	beq.n	8007b4a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	81bb      	strh	r3, [r7, #12]
 8007ace:	89bb      	ldrh	r3, [r7, #12]
 8007ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01b      	beq.n	8007b10 <USB_DeactivateEndpoint+0x6c>
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aee:	817b      	strh	r3, [r7, #10]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	441a      	add	r2, r3
 8007afa:	897b      	ldrh	r3, [r7, #10]
 8007afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b26:	813b      	strh	r3, [r7, #8]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	441a      	add	r2, r3
 8007b32:	893b      	ldrh	r3, [r7, #8]
 8007b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	8013      	strh	r3, [r2, #0]
 8007b48:	e192      	b.n	8007e70 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	827b      	strh	r3, [r7, #18]
 8007b58:	8a7b      	ldrh	r3, [r7, #18]
 8007b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d01b      	beq.n	8007b9a <USB_DeactivateEndpoint+0xf6>
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b78:	823b      	strh	r3, [r7, #16]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	441a      	add	r2, r3
 8007b84:	8a3b      	ldrh	r3, [r7, #16]
 8007b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb0:	81fb      	strh	r3, [r7, #14]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	441a      	add	r2, r3
 8007bbc:	89fb      	ldrh	r3, [r7, #14]
 8007bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	8013      	strh	r3, [r2, #0]
 8007bd2:	e14d      	b.n	8007e70 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	785b      	ldrb	r3, [r3, #1]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f040 80a5 	bne.w	8007d28 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	843b      	strh	r3, [r7, #32]
 8007bec:	8c3b      	ldrh	r3, [r7, #32]
 8007bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d01b      	beq.n	8007c2e <USB_DeactivateEndpoint+0x18a>
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0c:	83fb      	strh	r3, [r7, #30]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	441a      	add	r2, r3
 8007c18:	8bfb      	ldrh	r3, [r7, #30]
 8007c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	83bb      	strh	r3, [r7, #28]
 8007c3c:	8bbb      	ldrh	r3, [r7, #28]
 8007c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d01b      	beq.n	8007c7e <USB_DeactivateEndpoint+0x1da>
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c5c:	837b      	strh	r3, [r7, #26]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	441a      	add	r2, r3
 8007c68:	8b7b      	ldrh	r3, [r7, #26]
 8007c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	881b      	ldrh	r3, [r3, #0]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c94:	833b      	strh	r3, [r7, #24]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	441a      	add	r2, r3
 8007ca0:	8b3b      	ldrh	r3, [r7, #24]
 8007ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ccc:	82fb      	strh	r3, [r7, #22]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	441a      	add	r2, r3
 8007cd8:	8afb      	ldrh	r3, [r7, #22]
 8007cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d04:	82bb      	strh	r3, [r7, #20]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	441a      	add	r2, r3
 8007d10:	8abb      	ldrh	r3, [r7, #20]
 8007d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	8013      	strh	r3, [r2, #0]
 8007d26:	e0a3      	b.n	8007e70 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007d36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d01b      	beq.n	8007d78 <USB_DeactivateEndpoint+0x2d4>
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d56:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	441a      	add	r2, r3
 8007d62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007d86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d01b      	beq.n	8007dc8 <USB_DeactivateEndpoint+0x324>
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da6:	853b      	strh	r3, [r7, #40]	; 0x28
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	441a      	add	r2, r3
 8007db2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dde:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	441a      	add	r2, r3
 8007dea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	881b      	ldrh	r3, [r3, #0]
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e16:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	441a      	add	r2, r3
 8007e22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e4e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	441a      	add	r2, r3
 8007e5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3734      	adds	r7, #52	; 0x34
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bc80      	pop	{r7}
 8007e7a:	4770      	bx	lr

08007e7c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b0cc      	sub	sp, #304	; 0x130
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	1d3b      	adds	r3, r7, #4
 8007e84:	6018      	str	r0, [r3, #0]
 8007e86:	463b      	mov	r3, r7
 8007e88:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e8a:	463b      	mov	r3, r7
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	785b      	ldrb	r3, [r3, #1]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	f040 872e 	bne.w	8008cf2 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007e96:	463b      	mov	r3, r7
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	699a      	ldr	r2, [r3, #24]
 8007e9c:	463b      	mov	r3, r7
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d905      	bls.n	8007eb2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007ea6:	463b      	mov	r3, r7
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007eb0:	e004      	b.n	8007ebc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007eb2:	463b      	mov	r3, r7
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007ebc:	463b      	mov	r3, r7
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	7b1b      	ldrb	r3, [r3, #12]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d134      	bne.n	8007f30 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007ec6:	463b      	mov	r3, r7
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6959      	ldr	r1, [r3, #20]
 8007ecc:	463b      	mov	r3, r7
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	88da      	ldrh	r2, [r3, #6]
 8007ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	1d38      	adds	r0, r7, #4
 8007eda:	6800      	ldr	r0, [r0, #0]
 8007edc:	f001 fc03 	bl	80096e6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ee0:	f107 0310 	add.w	r3, r7, #16
 8007ee4:	1d3a      	adds	r2, r7, #4
 8007ee6:	6812      	ldr	r2, [r2, #0]
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	1d3b      	adds	r3, r7, #4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	f107 0310 	add.w	r3, r7, #16
 8007efa:	f107 0210 	add.w	r2, r7, #16
 8007efe:	6812      	ldr	r2, [r2, #0]
 8007f00:	440a      	add	r2, r1
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	463b      	mov	r3, r7
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	011a      	lsls	r2, r3, #4
 8007f0c:	f107 0310 	add.w	r3, r7, #16
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4413      	add	r3, r2
 8007f14:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007f18:	f107 030c 	add.w	r3, r7, #12
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	f107 030c 	add.w	r3, r7, #12
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	801a      	strh	r2, [r3, #0]
 8007f2c:	f000 beac 	b.w	8008c88 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007f30:	463b      	mov	r3, r7
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	78db      	ldrb	r3, [r3, #3]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	f040 838c 	bne.w	8008654 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007f3c:	463b      	mov	r3, r7
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6a1a      	ldr	r2, [r3, #32]
 8007f42:	463b      	mov	r3, r7
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	f240 8330 	bls.w	80085ae <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007f4e:	1d3b      	adds	r3, r7, #4
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	463b      	mov	r3, r7
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f68:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007f6c:	1d3b      	adds	r3, r7, #4
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	463b      	mov	r3, r7
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	441a      	add	r2, r3
 8007f7a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f86:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007f92:	463b      	mov	r3, r7
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6a1a      	ldr	r2, [r3, #32]
 8007f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f9c:	1ad2      	subs	r2, r2, r3
 8007f9e:	463b      	mov	r3, r7
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007fa4:	1d3b      	adds	r3, r7, #4
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	463b      	mov	r3, r7
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f000 819e 	beq.w	80082fc <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007fc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007fc4:	1d3a      	adds	r2, r7, #4
 8007fc6:	6812      	ldr	r2, [r2, #0]
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	463b      	mov	r3, r7
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	785b      	ldrb	r3, [r3, #1]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d17a      	bne.n	80080ca <USB_EPStartXfer+0x24e>
 8007fd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fd8:	1d3a      	adds	r2, r7, #4
 8007fda:	6812      	ldr	r2, [r2, #0]
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	1d3b      	adds	r3, r7, #4
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	4619      	mov	r1, r3
 8007fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007ff2:	6812      	ldr	r2, [r2, #0]
 8007ff4:	440a      	add	r2, r1
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	463b      	mov	r3, r7
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	011a      	lsls	r2, r3, #4
 8008000:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4413      	add	r3, r2
 8008008:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800800c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008016:	2b00      	cmp	r3, #0
 8008018:	d11a      	bne.n	8008050 <USB_EPStartXfer+0x1d4>
 800801a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	b29b      	uxth	r3, r3
 8008024:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008028:	b29a      	uxth	r2, r3
 800802a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	b29b      	uxth	r3, r3
 800803c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008044:	b29a      	uxth	r2, r3
 8008046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	801a      	strh	r2, [r3, #0]
 800804e:	e062      	b.n	8008116 <USB_EPStartXfer+0x29a>
 8008050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008054:	2b3e      	cmp	r3, #62	; 0x3e
 8008056:	d819      	bhi.n	800808c <USB_EPStartXfer+0x210>
 8008058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800805c:	085b      	lsrs	r3, r3, #1
 800805e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d004      	beq.n	8008078 <USB_EPStartXfer+0x1fc>
 800806e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008072:	3301      	adds	r3, #1
 8008074:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008078:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800807c:	b29b      	uxth	r3, r3
 800807e:	029b      	lsls	r3, r3, #10
 8008080:	b29a      	uxth	r2, r3
 8008082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	801a      	strh	r2, [r3, #0]
 800808a:	e044      	b.n	8008116 <USB_EPStartXfer+0x29a>
 800808c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008090:	095b      	lsrs	r3, r3, #5
 8008092:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800809a:	f003 031f 	and.w	r3, r3, #31
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d104      	bne.n	80080ac <USB_EPStartXfer+0x230>
 80080a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080a6:	3b01      	subs	r3, #1
 80080a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80080ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	029b      	lsls	r3, r3, #10
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080be:	b29a      	uxth	r2, r3
 80080c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	801a      	strh	r2, [r3, #0]
 80080c8:	e025      	b.n	8008116 <USB_EPStartXfer+0x29a>
 80080ca:	463b      	mov	r3, r7
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	785b      	ldrb	r3, [r3, #1]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d120      	bne.n	8008116 <USB_EPStartXfer+0x29a>
 80080d4:	1d3b      	adds	r3, r7, #4
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080dc:	b29b      	uxth	r3, r3
 80080de:	4619      	mov	r1, r3
 80080e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80080e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80080e8:	6812      	ldr	r2, [r2, #0]
 80080ea:	440a      	add	r2, r1
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	463b      	mov	r3, r7
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	011a      	lsls	r2, r3, #4
 80080f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4413      	add	r3, r2
 80080fe:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008106:	601a      	str	r2, [r3, #0]
 8008108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800810c:	b29a      	uxth	r2, r3
 800810e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008116:	463b      	mov	r3, r7
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	895b      	ldrh	r3, [r3, #10]
 800811c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008120:	463b      	mov	r3, r7
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6959      	ldr	r1, [r3, #20]
 8008126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800812a:	b29b      	uxth	r3, r3
 800812c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008130:	1d38      	adds	r0, r7, #4
 8008132:	6800      	ldr	r0, [r0, #0]
 8008134:	f001 fad7 	bl	80096e6 <USB_WritePMA>
            ep->xfer_buff += len;
 8008138:	463b      	mov	r3, r7
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	695a      	ldr	r2, [r3, #20]
 800813e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008142:	441a      	add	r2, r3
 8008144:	463b      	mov	r3, r7
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800814a:	463b      	mov	r3, r7
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6a1a      	ldr	r2, [r3, #32]
 8008150:	463b      	mov	r3, r7
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	429a      	cmp	r2, r3
 8008158:	d909      	bls.n	800816e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800815a:	463b      	mov	r3, r7
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6a1a      	ldr	r2, [r3, #32]
 8008160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008164:	1ad2      	subs	r2, r2, r3
 8008166:	463b      	mov	r3, r7
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	621a      	str	r2, [r3, #32]
 800816c:	e008      	b.n	8008180 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800816e:	463b      	mov	r3, r7
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008178:	463b      	mov	r3, r7
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2200      	movs	r2, #0
 800817e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008180:	463b      	mov	r3, r7
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d17a      	bne.n	8008280 <USB_EPStartXfer+0x404>
 800818a:	f107 0318 	add.w	r3, r7, #24
 800818e:	1d3a      	adds	r2, r7, #4
 8008190:	6812      	ldr	r2, [r2, #0]
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	1d3b      	adds	r3, r7, #4
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800819c:	b29b      	uxth	r3, r3
 800819e:	4619      	mov	r1, r3
 80081a0:	f107 0318 	add.w	r3, r7, #24
 80081a4:	f107 0218 	add.w	r2, r7, #24
 80081a8:	6812      	ldr	r2, [r2, #0]
 80081aa:	440a      	add	r2, r1
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	463b      	mov	r3, r7
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	011a      	lsls	r2, r3, #4
 80081b6:	f107 0318 	add.w	r3, r7, #24
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4413      	add	r3, r2
 80081be:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80081c2:	f107 0314 	add.w	r3, r7, #20
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d11a      	bne.n	8008206 <USB_EPStartXfer+0x38a>
 80081d0:	f107 0314 	add.w	r3, r7, #20
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081de:	b29a      	uxth	r2, r3
 80081e0:	f107 0314 	add.w	r3, r7, #20
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	801a      	strh	r2, [r3, #0]
 80081e8:	f107 0314 	add.w	r3, r7, #20
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	f107 0314 	add.w	r3, r7, #20
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	801a      	strh	r2, [r3, #0]
 8008204:	e067      	b.n	80082d6 <USB_EPStartXfer+0x45a>
 8008206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800820a:	2b3e      	cmp	r3, #62	; 0x3e
 800820c:	d819      	bhi.n	8008242 <USB_EPStartXfer+0x3c6>
 800820e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008212:	085b      	lsrs	r3, r3, #1
 8008214:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d004      	beq.n	800822e <USB_EPStartXfer+0x3b2>
 8008224:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008228:	3301      	adds	r3, #1
 800822a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800822e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008232:	b29b      	uxth	r3, r3
 8008234:	029b      	lsls	r3, r3, #10
 8008236:	b29a      	uxth	r2, r3
 8008238:	f107 0314 	add.w	r3, r7, #20
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	801a      	strh	r2, [r3, #0]
 8008240:	e049      	b.n	80082d6 <USB_EPStartXfer+0x45a>
 8008242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008246:	095b      	lsrs	r3, r3, #5
 8008248:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800824c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008250:	f003 031f 	and.w	r3, r3, #31
 8008254:	2b00      	cmp	r3, #0
 8008256:	d104      	bne.n	8008262 <USB_EPStartXfer+0x3e6>
 8008258:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800825c:	3b01      	subs	r3, #1
 800825e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008262:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008266:	b29b      	uxth	r3, r3
 8008268:	029b      	lsls	r3, r3, #10
 800826a:	b29b      	uxth	r3, r3
 800826c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008274:	b29a      	uxth	r2, r3
 8008276:	f107 0314 	add.w	r3, r7, #20
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	801a      	strh	r2, [r3, #0]
 800827e:	e02a      	b.n	80082d6 <USB_EPStartXfer+0x45a>
 8008280:	463b      	mov	r3, r7
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	785b      	ldrb	r3, [r3, #1]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d125      	bne.n	80082d6 <USB_EPStartXfer+0x45a>
 800828a:	f107 0320 	add.w	r3, r7, #32
 800828e:	1d3a      	adds	r2, r7, #4
 8008290:	6812      	ldr	r2, [r2, #0]
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	1d3b      	adds	r3, r7, #4
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800829c:	b29b      	uxth	r3, r3
 800829e:	4619      	mov	r1, r3
 80082a0:	f107 0320 	add.w	r3, r7, #32
 80082a4:	f107 0220 	add.w	r2, r7, #32
 80082a8:	6812      	ldr	r2, [r2, #0]
 80082aa:	440a      	add	r2, r1
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	463b      	mov	r3, r7
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	011a      	lsls	r2, r3, #4
 80082b6:	f107 0320 	add.w	r3, r7, #32
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4413      	add	r3, r2
 80082be:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80082c2:	f107 031c 	add.w	r3, r7, #28
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	f107 031c 	add.w	r3, r7, #28
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80082d6:	463b      	mov	r3, r7
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	891b      	ldrh	r3, [r3, #8]
 80082dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082e0:	463b      	mov	r3, r7
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6959      	ldr	r1, [r3, #20]
 80082e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80082f0:	1d38      	adds	r0, r7, #4
 80082f2:	6800      	ldr	r0, [r0, #0]
 80082f4:	f001 f9f7 	bl	80096e6 <USB_WritePMA>
 80082f8:	f000 bcc6 	b.w	8008c88 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082fc:	463b      	mov	r3, r7
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	785b      	ldrb	r3, [r3, #1]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d164      	bne.n	80083d0 <USB_EPStartXfer+0x554>
 8008306:	1d3b      	adds	r3, r7, #4
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	64bb      	str	r3, [r7, #72]	; 0x48
 800830c:	1d3b      	adds	r3, r7, #4
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008314:	b29b      	uxth	r3, r3
 8008316:	461a      	mov	r2, r3
 8008318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800831a:	4413      	add	r3, r2
 800831c:	64bb      	str	r3, [r7, #72]	; 0x48
 800831e:	463b      	mov	r3, r7
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	011a      	lsls	r2, r3, #4
 8008326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008328:	4413      	add	r3, r2
 800832a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800832e:	647b      	str	r3, [r7, #68]	; 0x44
 8008330:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008334:	2b00      	cmp	r3, #0
 8008336:	d112      	bne.n	800835e <USB_EPStartXfer+0x4e2>
 8008338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	b29b      	uxth	r3, r3
 800833e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008342:	b29a      	uxth	r2, r3
 8008344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008346:	801a      	strh	r2, [r3, #0]
 8008348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	b29b      	uxth	r3, r3
 800834e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008356:	b29a      	uxth	r2, r3
 8008358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800835a:	801a      	strh	r2, [r3, #0]
 800835c:	e057      	b.n	800840e <USB_EPStartXfer+0x592>
 800835e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008362:	2b3e      	cmp	r3, #62	; 0x3e
 8008364:	d817      	bhi.n	8008396 <USB_EPStartXfer+0x51a>
 8008366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800836a:	085b      	lsrs	r3, r3, #1
 800836c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d004      	beq.n	8008386 <USB_EPStartXfer+0x50a>
 800837c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008380:	3301      	adds	r3, #1
 8008382:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008386:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800838a:	b29b      	uxth	r3, r3
 800838c:	029b      	lsls	r3, r3, #10
 800838e:	b29a      	uxth	r2, r3
 8008390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008392:	801a      	strh	r2, [r3, #0]
 8008394:	e03b      	b.n	800840e <USB_EPStartXfer+0x592>
 8008396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800839a:	095b      	lsrs	r3, r3, #5
 800839c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80083a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083a4:	f003 031f 	and.w	r3, r3, #31
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d104      	bne.n	80083b6 <USB_EPStartXfer+0x53a>
 80083ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80083b0:	3b01      	subs	r3, #1
 80083b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80083b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	029b      	lsls	r3, r3, #10
 80083be:	b29b      	uxth	r3, r3
 80083c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083cc:	801a      	strh	r2, [r3, #0]
 80083ce:	e01e      	b.n	800840e <USB_EPStartXfer+0x592>
 80083d0:	463b      	mov	r3, r7
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	785b      	ldrb	r3, [r3, #1]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d119      	bne.n	800840e <USB_EPStartXfer+0x592>
 80083da:	1d3b      	adds	r3, r7, #4
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	653b      	str	r3, [r7, #80]	; 0x50
 80083e0:	1d3b      	adds	r3, r7, #4
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	461a      	mov	r2, r3
 80083ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ee:	4413      	add	r3, r2
 80083f0:	653b      	str	r3, [r7, #80]	; 0x50
 80083f2:	463b      	mov	r3, r7
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	011a      	lsls	r2, r3, #4
 80083fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083fc:	4413      	add	r3, r2
 80083fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008408:	b29a      	uxth	r2, r3
 800840a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800840c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800840e:	463b      	mov	r3, r7
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	891b      	ldrh	r3, [r3, #8]
 8008414:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008418:	463b      	mov	r3, r7
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6959      	ldr	r1, [r3, #20]
 800841e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008422:	b29b      	uxth	r3, r3
 8008424:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008428:	1d38      	adds	r0, r7, #4
 800842a:	6800      	ldr	r0, [r0, #0]
 800842c:	f001 f95b 	bl	80096e6 <USB_WritePMA>
            ep->xfer_buff += len;
 8008430:	463b      	mov	r3, r7
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	695a      	ldr	r2, [r3, #20]
 8008436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800843a:	441a      	add	r2, r3
 800843c:	463b      	mov	r3, r7
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008442:	463b      	mov	r3, r7
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6a1a      	ldr	r2, [r3, #32]
 8008448:	463b      	mov	r3, r7
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	429a      	cmp	r2, r3
 8008450:	d909      	bls.n	8008466 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8008452:	463b      	mov	r3, r7
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6a1a      	ldr	r2, [r3, #32]
 8008458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800845c:	1ad2      	subs	r2, r2, r3
 800845e:	463b      	mov	r3, r7
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	621a      	str	r2, [r3, #32]
 8008464:	e008      	b.n	8008478 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8008466:	463b      	mov	r3, r7
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008470:	463b      	mov	r3, r7
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2200      	movs	r2, #0
 8008476:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008478:	1d3b      	adds	r3, r7, #4
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	643b      	str	r3, [r7, #64]	; 0x40
 800847e:	463b      	mov	r3, r7
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	785b      	ldrb	r3, [r3, #1]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d164      	bne.n	8008552 <USB_EPStartXfer+0x6d6>
 8008488:	1d3b      	adds	r3, r7, #4
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	63bb      	str	r3, [r7, #56]	; 0x38
 800848e:	1d3b      	adds	r3, r7, #4
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008496:	b29b      	uxth	r3, r3
 8008498:	461a      	mov	r2, r3
 800849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849c:	4413      	add	r3, r2
 800849e:	63bb      	str	r3, [r7, #56]	; 0x38
 80084a0:	463b      	mov	r3, r7
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	011a      	lsls	r2, r3, #4
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	4413      	add	r3, r2
 80084ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084b0:	637b      	str	r3, [r7, #52]	; 0x34
 80084b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d112      	bne.n	80084e0 <USB_EPStartXfer+0x664>
 80084ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	b29b      	uxth	r3, r3
 80084c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c8:	801a      	strh	r2, [r3, #0]
 80084ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d8:	b29a      	uxth	r2, r3
 80084da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084dc:	801a      	strh	r2, [r3, #0]
 80084de:	e054      	b.n	800858a <USB_EPStartXfer+0x70e>
 80084e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084e4:	2b3e      	cmp	r3, #62	; 0x3e
 80084e6:	d817      	bhi.n	8008518 <USB_EPStartXfer+0x69c>
 80084e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ec:	085b      	lsrs	r3, r3, #1
 80084ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80084f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d004      	beq.n	8008508 <USB_EPStartXfer+0x68c>
 80084fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008502:	3301      	adds	r3, #1
 8008504:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008508:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800850c:	b29b      	uxth	r3, r3
 800850e:	029b      	lsls	r3, r3, #10
 8008510:	b29a      	uxth	r2, r3
 8008512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008514:	801a      	strh	r2, [r3, #0]
 8008516:	e038      	b.n	800858a <USB_EPStartXfer+0x70e>
 8008518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800851c:	095b      	lsrs	r3, r3, #5
 800851e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008526:	f003 031f 	and.w	r3, r3, #31
 800852a:	2b00      	cmp	r3, #0
 800852c:	d104      	bne.n	8008538 <USB_EPStartXfer+0x6bc>
 800852e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008532:	3b01      	subs	r3, #1
 8008534:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008538:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800853c:	b29b      	uxth	r3, r3
 800853e:	029b      	lsls	r3, r3, #10
 8008540:	b29b      	uxth	r3, r3
 8008542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800854a:	b29a      	uxth	r2, r3
 800854c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854e:	801a      	strh	r2, [r3, #0]
 8008550:	e01b      	b.n	800858a <USB_EPStartXfer+0x70e>
 8008552:	463b      	mov	r3, r7
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	785b      	ldrb	r3, [r3, #1]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d116      	bne.n	800858a <USB_EPStartXfer+0x70e>
 800855c:	1d3b      	adds	r3, r7, #4
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008564:	b29b      	uxth	r3, r3
 8008566:	461a      	mov	r2, r3
 8008568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800856a:	4413      	add	r3, r2
 800856c:	643b      	str	r3, [r7, #64]	; 0x40
 800856e:	463b      	mov	r3, r7
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	011a      	lsls	r2, r3, #4
 8008576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008578:	4413      	add	r3, r2
 800857a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800857e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008584:	b29a      	uxth	r2, r3
 8008586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008588:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800858a:	463b      	mov	r3, r7
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	895b      	ldrh	r3, [r3, #10]
 8008590:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008594:	463b      	mov	r3, r7
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6959      	ldr	r1, [r3, #20]
 800859a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800859e:	b29b      	uxth	r3, r3
 80085a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80085a4:	1d38      	adds	r0, r7, #4
 80085a6:	6800      	ldr	r0, [r0, #0]
 80085a8:	f001 f89d 	bl	80096e6 <USB_WritePMA>
 80085ac:	e36c      	b.n	8008c88 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80085ae:	463b      	mov	r3, r7
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	6a1b      	ldr	r3, [r3, #32]
 80085b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80085b8:	1d3b      	adds	r3, r7, #4
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	463b      	mov	r3, r7
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80085ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085d2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80085d6:	1d3b      	adds	r3, r7, #4
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	463b      	mov	r3, r7
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	441a      	add	r2, r3
 80085e4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80085e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80085fc:	1d3b      	adds	r3, r7, #4
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008602:	1d3b      	adds	r3, r7, #4
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800860a:	b29b      	uxth	r3, r3
 800860c:	461a      	mov	r2, r3
 800860e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008610:	4413      	add	r3, r2
 8008612:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008614:	463b      	mov	r3, r7
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	011a      	lsls	r2, r3, #4
 800861c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800861e:	4413      	add	r3, r2
 8008620:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008624:	65bb      	str	r3, [r7, #88]	; 0x58
 8008626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800862a:	b29a      	uxth	r2, r3
 800862c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800862e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008630:	463b      	mov	r3, r7
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	891b      	ldrh	r3, [r3, #8]
 8008636:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800863a:	463b      	mov	r3, r7
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6959      	ldr	r1, [r3, #20]
 8008640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008644:	b29b      	uxth	r3, r3
 8008646:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800864a:	1d38      	adds	r0, r7, #4
 800864c:	6800      	ldr	r0, [r0, #0]
 800864e:	f001 f84a 	bl	80096e6 <USB_WritePMA>
 8008652:	e319      	b.n	8008c88 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008654:	1d3b      	adds	r3, r7, #4
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	463b      	mov	r3, r7
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	b29b      	uxth	r3, r3
 8008666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800866a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800866e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008672:	1d3b      	adds	r3, r7, #4
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	463b      	mov	r3, r7
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	441a      	add	r2, r3
 8008680:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800868c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008694:	b29b      	uxth	r3, r3
 8008696:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008698:	463b      	mov	r3, r7
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6a1a      	ldr	r2, [r3, #32]
 800869e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086a2:	1ad2      	subs	r2, r2, r3
 80086a4:	463b      	mov	r3, r7
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80086aa:	1d3b      	adds	r3, r7, #4
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	463b      	mov	r3, r7
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 8162 	beq.w	800898a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80086c6:	1d3b      	adds	r3, r7, #4
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086ce:	463b      	mov	r3, r7
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	785b      	ldrb	r3, [r3, #1]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d164      	bne.n	80087a2 <USB_EPStartXfer+0x926>
 80086d8:	1d3b      	adds	r3, r7, #4
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80086de:	1d3b      	adds	r3, r7, #4
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	461a      	mov	r2, r3
 80086ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086ec:	4413      	add	r3, r2
 80086ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80086f0:	463b      	mov	r3, r7
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	011a      	lsls	r2, r3, #4
 80086f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086fa:	4413      	add	r3, r2
 80086fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008700:	677b      	str	r3, [r7, #116]	; 0x74
 8008702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008706:	2b00      	cmp	r3, #0
 8008708:	d112      	bne.n	8008730 <USB_EPStartXfer+0x8b4>
 800870a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800870c:	881b      	ldrh	r3, [r3, #0]
 800870e:	b29b      	uxth	r3, r3
 8008710:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008714:	b29a      	uxth	r2, r3
 8008716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008718:	801a      	strh	r2, [r3, #0]
 800871a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b29b      	uxth	r3, r3
 8008720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008728:	b29a      	uxth	r2, r3
 800872a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800872c:	801a      	strh	r2, [r3, #0]
 800872e:	e057      	b.n	80087e0 <USB_EPStartXfer+0x964>
 8008730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008734:	2b3e      	cmp	r3, #62	; 0x3e
 8008736:	d817      	bhi.n	8008768 <USB_EPStartXfer+0x8ec>
 8008738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800873c:	085b      	lsrs	r3, r3, #1
 800873e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d004      	beq.n	8008758 <USB_EPStartXfer+0x8dc>
 800874e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008752:	3301      	adds	r3, #1
 8008754:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008758:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800875c:	b29b      	uxth	r3, r3
 800875e:	029b      	lsls	r3, r3, #10
 8008760:	b29a      	uxth	r2, r3
 8008762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008764:	801a      	strh	r2, [r3, #0]
 8008766:	e03b      	b.n	80087e0 <USB_EPStartXfer+0x964>
 8008768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800876c:	095b      	lsrs	r3, r3, #5
 800876e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008776:	f003 031f 	and.w	r3, r3, #31
 800877a:	2b00      	cmp	r3, #0
 800877c:	d104      	bne.n	8008788 <USB_EPStartXfer+0x90c>
 800877e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008782:	3b01      	subs	r3, #1
 8008784:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008788:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800878c:	b29b      	uxth	r3, r3
 800878e:	029b      	lsls	r3, r3, #10
 8008790:	b29b      	uxth	r3, r3
 8008792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800879a:	b29a      	uxth	r2, r3
 800879c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800879e:	801a      	strh	r2, [r3, #0]
 80087a0:	e01e      	b.n	80087e0 <USB_EPStartXfer+0x964>
 80087a2:	463b      	mov	r3, r7
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	785b      	ldrb	r3, [r3, #1]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d119      	bne.n	80087e0 <USB_EPStartXfer+0x964>
 80087ac:	1d3b      	adds	r3, r7, #4
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	461a      	mov	r2, r3
 80087b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80087bc:	4413      	add	r3, r2
 80087be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087c2:	463b      	mov	r3, r7
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	011a      	lsls	r2, r3, #4
 80087ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80087ce:	4413      	add	r3, r2
 80087d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80087d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087da:	b29a      	uxth	r2, r3
 80087dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80087e0:	463b      	mov	r3, r7
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	895b      	ldrh	r3, [r3, #10]
 80087e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087ea:	463b      	mov	r3, r7
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	6959      	ldr	r1, [r3, #20]
 80087f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80087fa:	1d38      	adds	r0, r7, #4
 80087fc:	6800      	ldr	r0, [r0, #0]
 80087fe:	f000 ff72 	bl	80096e6 <USB_WritePMA>
          ep->xfer_buff += len;
 8008802:	463b      	mov	r3, r7
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	695a      	ldr	r2, [r3, #20]
 8008808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800880c:	441a      	add	r2, r3
 800880e:	463b      	mov	r3, r7
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008814:	463b      	mov	r3, r7
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6a1a      	ldr	r2, [r3, #32]
 800881a:	463b      	mov	r3, r7
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	429a      	cmp	r2, r3
 8008822:	d909      	bls.n	8008838 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008824:	463b      	mov	r3, r7
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6a1a      	ldr	r2, [r3, #32]
 800882a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800882e:	1ad2      	subs	r2, r2, r3
 8008830:	463b      	mov	r3, r7
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	621a      	str	r2, [r3, #32]
 8008836:	e008      	b.n	800884a <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008838:	463b      	mov	r3, r7
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008842:	463b      	mov	r3, r7
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2200      	movs	r2, #0
 8008848:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800884a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 821a 	beq.w	8008c88 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008854:	463b      	mov	r3, r7
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	785b      	ldrb	r3, [r3, #1]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d164      	bne.n	8008928 <USB_EPStartXfer+0xaac>
 800885e:	1d3b      	adds	r3, r7, #4
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	66bb      	str	r3, [r7, #104]	; 0x68
 8008864:	1d3b      	adds	r3, r7, #4
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800886c:	b29b      	uxth	r3, r3
 800886e:	461a      	mov	r2, r3
 8008870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008872:	4413      	add	r3, r2
 8008874:	66bb      	str	r3, [r7, #104]	; 0x68
 8008876:	463b      	mov	r3, r7
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	011a      	lsls	r2, r3, #4
 800887e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008880:	4413      	add	r3, r2
 8008882:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008886:	667b      	str	r3, [r7, #100]	; 0x64
 8008888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800888c:	2b00      	cmp	r3, #0
 800888e:	d112      	bne.n	80088b6 <USB_EPStartXfer+0xa3a>
 8008890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	b29b      	uxth	r3, r3
 8008896:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800889a:	b29a      	uxth	r2, r3
 800889c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800889e:	801a      	strh	r2, [r3, #0]
 80088a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088b2:	801a      	strh	r2, [r3, #0]
 80088b4:	e057      	b.n	8008966 <USB_EPStartXfer+0xaea>
 80088b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ba:	2b3e      	cmp	r3, #62	; 0x3e
 80088bc:	d817      	bhi.n	80088ee <USB_EPStartXfer+0xa72>
 80088be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088c2:	085b      	lsrs	r3, r3, #1
 80088c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80088c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088cc:	f003 0301 	and.w	r3, r3, #1
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d004      	beq.n	80088de <USB_EPStartXfer+0xa62>
 80088d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088d8:	3301      	adds	r3, #1
 80088da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	029b      	lsls	r3, r3, #10
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088ea:	801a      	strh	r2, [r3, #0]
 80088ec:	e03b      	b.n	8008966 <USB_EPStartXfer+0xaea>
 80088ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f2:	095b      	lsrs	r3, r3, #5
 80088f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80088f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088fc:	f003 031f 	and.w	r3, r3, #31
 8008900:	2b00      	cmp	r3, #0
 8008902:	d104      	bne.n	800890e <USB_EPStartXfer+0xa92>
 8008904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008908:	3b01      	subs	r3, #1
 800890a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800890e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008912:	b29b      	uxth	r3, r3
 8008914:	029b      	lsls	r3, r3, #10
 8008916:	b29b      	uxth	r3, r3
 8008918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800891c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008920:	b29a      	uxth	r2, r3
 8008922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008924:	801a      	strh	r2, [r3, #0]
 8008926:	e01e      	b.n	8008966 <USB_EPStartXfer+0xaea>
 8008928:	463b      	mov	r3, r7
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	785b      	ldrb	r3, [r3, #1]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d119      	bne.n	8008966 <USB_EPStartXfer+0xaea>
 8008932:	1d3b      	adds	r3, r7, #4
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	673b      	str	r3, [r7, #112]	; 0x70
 8008938:	1d3b      	adds	r3, r7, #4
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008940:	b29b      	uxth	r3, r3
 8008942:	461a      	mov	r2, r3
 8008944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008946:	4413      	add	r3, r2
 8008948:	673b      	str	r3, [r7, #112]	; 0x70
 800894a:	463b      	mov	r3, r7
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	011a      	lsls	r2, r3, #4
 8008952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008954:	4413      	add	r3, r2
 8008956:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800895a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800895c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008960:	b29a      	uxth	r2, r3
 8008962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008964:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008966:	463b      	mov	r3, r7
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	891b      	ldrh	r3, [r3, #8]
 800896c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008970:	463b      	mov	r3, r7
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6959      	ldr	r1, [r3, #20]
 8008976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800897a:	b29b      	uxth	r3, r3
 800897c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008980:	1d38      	adds	r0, r7, #4
 8008982:	6800      	ldr	r0, [r0, #0]
 8008984:	f000 feaf 	bl	80096e6 <USB_WritePMA>
 8008988:	e17e      	b.n	8008c88 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800898a:	463b      	mov	r3, r7
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d16f      	bne.n	8008a74 <USB_EPStartXfer+0xbf8>
 8008994:	1d3b      	adds	r3, r7, #4
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800899c:	1d3b      	adds	r3, r7, #4
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	461a      	mov	r2, r3
 80089a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089ac:	4413      	add	r3, r2
 80089ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80089b2:	463b      	mov	r3, r7
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	011a      	lsls	r2, r3, #4
 80089ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089be:	4413      	add	r3, r2
 80089c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80089c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d116      	bne.n	80089fe <USB_EPStartXfer+0xb82>
 80089d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089d4:	881b      	ldrh	r3, [r3, #0]
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089dc:	b29a      	uxth	r2, r3
 80089de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089e2:	801a      	strh	r2, [r3, #0]
 80089e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089e8:	881b      	ldrh	r3, [r3, #0]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089fa:	801a      	strh	r2, [r3, #0]
 80089fc:	e05f      	b.n	8008abe <USB_EPStartXfer+0xc42>
 80089fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a02:	2b3e      	cmp	r3, #62	; 0x3e
 8008a04:	d818      	bhi.n	8008a38 <USB_EPStartXfer+0xbbc>
 8008a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a0a:	085b      	lsrs	r3, r3, #1
 8008a0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a14:	f003 0301 	and.w	r3, r3, #1
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d004      	beq.n	8008a26 <USB_EPStartXfer+0xbaa>
 8008a1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008a20:	3301      	adds	r3, #1
 8008a22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008a26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	029b      	lsls	r3, r3, #10
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a34:	801a      	strh	r2, [r3, #0]
 8008a36:	e042      	b.n	8008abe <USB_EPStartXfer+0xc42>
 8008a38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a3c:	095b      	lsrs	r3, r3, #5
 8008a3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a46:	f003 031f 	and.w	r3, r3, #31
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d104      	bne.n	8008a58 <USB_EPStartXfer+0xbdc>
 8008a4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008a52:	3b01      	subs	r3, #1
 8008a54:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008a58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	029b      	lsls	r3, r3, #10
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a70:	801a      	strh	r2, [r3, #0]
 8008a72:	e024      	b.n	8008abe <USB_EPStartXfer+0xc42>
 8008a74:	463b      	mov	r3, r7
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	785b      	ldrb	r3, [r3, #1]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d11f      	bne.n	8008abe <USB_EPStartXfer+0xc42>
 8008a7e:	1d3b      	adds	r3, r7, #4
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008a86:	1d3b      	adds	r3, r7, #4
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	461a      	mov	r2, r3
 8008a92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a96:	4413      	add	r3, r2
 8008a98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008a9c:	463b      	mov	r3, r7
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	011a      	lsls	r2, r3, #4
 8008aa4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008abc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008abe:	463b      	mov	r3, r7
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	891b      	ldrh	r3, [r3, #8]
 8008ac4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ac8:	463b      	mov	r3, r7
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6959      	ldr	r1, [r3, #20]
 8008ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ad8:	1d38      	adds	r0, r7, #4
 8008ada:	6800      	ldr	r0, [r0, #0]
 8008adc:	f000 fe03 	bl	80096e6 <USB_WritePMA>
          ep->xfer_buff += len;
 8008ae0:	463b      	mov	r3, r7
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	695a      	ldr	r2, [r3, #20]
 8008ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aea:	441a      	add	r2, r3
 8008aec:	463b      	mov	r3, r7
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008af2:	463b      	mov	r3, r7
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6a1a      	ldr	r2, [r3, #32]
 8008af8:	463b      	mov	r3, r7
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d909      	bls.n	8008b16 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8008b02:	463b      	mov	r3, r7
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6a1a      	ldr	r2, [r3, #32]
 8008b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b0c:	1ad2      	subs	r2, r2, r3
 8008b0e:	463b      	mov	r3, r7
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	621a      	str	r2, [r3, #32]
 8008b14:	e008      	b.n	8008b28 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8008b16:	463b      	mov	r3, r7
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008b20:	463b      	mov	r3, r7
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2200      	movs	r2, #0
 8008b26:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f000 80ab 	beq.w	8008c88 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b32:	1d3b      	adds	r3, r7, #4
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b3a:	463b      	mov	r3, r7
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	785b      	ldrb	r3, [r3, #1]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d16f      	bne.n	8008c24 <USB_EPStartXfer+0xda8>
 8008b44:	1d3b      	adds	r3, r7, #4
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b4c:	1d3b      	adds	r3, r7, #4
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	461a      	mov	r2, r3
 8008b58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b62:	463b      	mov	r3, r7
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	011a      	lsls	r2, r3, #4
 8008b6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b6e:	4413      	add	r3, r2
 8008b70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d116      	bne.n	8008bae <USB_EPStartXfer+0xd32>
 8008b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b92:	801a      	strh	r2, [r3, #0]
 8008b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008baa:	801a      	strh	r2, [r3, #0]
 8008bac:	e05b      	b.n	8008c66 <USB_EPStartXfer+0xdea>
 8008bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb2:	2b3e      	cmp	r3, #62	; 0x3e
 8008bb4:	d818      	bhi.n	8008be8 <USB_EPStartXfer+0xd6c>
 8008bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bba:	085b      	lsrs	r3, r3, #1
 8008bbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d004      	beq.n	8008bd6 <USB_EPStartXfer+0xd5a>
 8008bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	029b      	lsls	r3, r3, #10
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008be4:	801a      	strh	r2, [r3, #0]
 8008be6:	e03e      	b.n	8008c66 <USB_EPStartXfer+0xdea>
 8008be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bec:	095b      	lsrs	r3, r3, #5
 8008bee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bf6:	f003 031f 	and.w	r3, r3, #31
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d104      	bne.n	8008c08 <USB_EPStartXfer+0xd8c>
 8008bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c02:	3b01      	subs	r3, #1
 8008c04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	029b      	lsls	r3, r3, #10
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c20:	801a      	strh	r2, [r3, #0]
 8008c22:	e020      	b.n	8008c66 <USB_EPStartXfer+0xdea>
 8008c24:	463b      	mov	r3, r7
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	785b      	ldrb	r3, [r3, #1]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d11b      	bne.n	8008c66 <USB_EPStartXfer+0xdea>
 8008c2e:	1d3b      	adds	r3, r7, #4
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	461a      	mov	r2, r3
 8008c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c3e:	4413      	add	r3, r2
 8008c40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c44:	463b      	mov	r3, r7
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	011a      	lsls	r2, r3, #4
 8008c4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c50:	4413      	add	r3, r2
 8008c52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008c66:	463b      	mov	r3, r7
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	895b      	ldrh	r3, [r3, #10]
 8008c6c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c70:	463b      	mov	r3, r7
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6959      	ldr	r1, [r3, #20]
 8008c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008c80:	1d38      	adds	r0, r7, #4
 8008c82:	6800      	ldr	r0, [r0, #0]
 8008c84:	f000 fd2f 	bl	80096e6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008c88:	1d3b      	adds	r3, r7, #4
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	463b      	mov	r3, r7
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	f107 020a 	add.w	r2, r7, #10
 8008c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ca6:	8013      	strh	r3, [r2, #0]
 8008ca8:	f107 030a 	add.w	r3, r7, #10
 8008cac:	f107 020a 	add.w	r2, r7, #10
 8008cb0:	8812      	ldrh	r2, [r2, #0]
 8008cb2:	f082 0210 	eor.w	r2, r2, #16
 8008cb6:	801a      	strh	r2, [r3, #0]
 8008cb8:	f107 030a 	add.w	r3, r7, #10
 8008cbc:	f107 020a 	add.w	r2, r7, #10
 8008cc0:	8812      	ldrh	r2, [r2, #0]
 8008cc2:	f082 0220 	eor.w	r2, r2, #32
 8008cc6:	801a      	strh	r2, [r3, #0]
 8008cc8:	1d3b      	adds	r3, r7, #4
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	463b      	mov	r3, r7
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	441a      	add	r2, r3
 8008cd6:	f107 030a 	add.w	r3, r7, #10
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	8013      	strh	r3, [r2, #0]
 8008cf0:	e3b5      	b.n	800945e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008cf2:	463b      	mov	r3, r7
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	7b1b      	ldrb	r3, [r3, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f040 8090 	bne.w	8008e1e <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008cfe:	463b      	mov	r3, r7
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	699a      	ldr	r2, [r3, #24]
 8008d04:	463b      	mov	r3, r7
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d90e      	bls.n	8008d2c <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8008d0e:	463b      	mov	r3, r7
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008d18:	463b      	mov	r3, r7
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	699a      	ldr	r2, [r3, #24]
 8008d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d22:	1ad2      	subs	r2, r2, r3
 8008d24:	463b      	mov	r3, r7
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	619a      	str	r2, [r3, #24]
 8008d2a:	e008      	b.n	8008d3e <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8008d2c:	463b      	mov	r3, r7
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008d36:	463b      	mov	r3, r7
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008d3e:	1d3b      	adds	r3, r7, #4
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d46:	1d3b      	adds	r3, r7, #4
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	461a      	mov	r2, r3
 8008d52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d56:	4413      	add	r3, r2
 8008d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d5c:	463b      	mov	r3, r7
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	011a      	lsls	r2, r3, #4
 8008d64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d68:	4413      	add	r3, r2
 8008d6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d116      	bne.n	8008da8 <USB_EPStartXfer+0xf2c>
 8008d7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d7e:	881b      	ldrh	r3, [r3, #0]
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d8c:	801a      	strh	r2, [r3, #0]
 8008d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d92:	881b      	ldrh	r3, [r3, #0]
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008da4:	801a      	strh	r2, [r3, #0]
 8008da6:	e32c      	b.n	8009402 <USB_EPStartXfer+0x1586>
 8008da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dac:	2b3e      	cmp	r3, #62	; 0x3e
 8008dae:	d818      	bhi.n	8008de2 <USB_EPStartXfer+0xf66>
 8008db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db4:	085b      	lsrs	r3, r3, #1
 8008db6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d004      	beq.n	8008dd0 <USB_EPStartXfer+0xf54>
 8008dc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008dca:	3301      	adds	r3, #1
 8008dcc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008dd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	029b      	lsls	r3, r3, #10
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dde:	801a      	strh	r2, [r3, #0]
 8008de0:	e30f      	b.n	8009402 <USB_EPStartXfer+0x1586>
 8008de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008de6:	095b      	lsrs	r3, r3, #5
 8008de8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008df0:	f003 031f 	and.w	r3, r3, #31
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d104      	bne.n	8008e02 <USB_EPStartXfer+0xf86>
 8008df8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008e02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	029b      	lsls	r3, r3, #10
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e1a:	801a      	strh	r2, [r3, #0]
 8008e1c:	e2f1      	b.n	8009402 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008e1e:	463b      	mov	r3, r7
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	78db      	ldrb	r3, [r3, #3]
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	f040 818f 	bne.w	8009148 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008e2a:	463b      	mov	r3, r7
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	785b      	ldrb	r3, [r3, #1]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d175      	bne.n	8008f20 <USB_EPStartXfer+0x10a4>
 8008e34:	1d3b      	adds	r3, r7, #4
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e3c:	1d3b      	adds	r3, r7, #4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	461a      	mov	r2, r3
 8008e48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e52:	463b      	mov	r3, r7
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	011a      	lsls	r2, r3, #4
 8008e5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e5e:	4413      	add	r3, r2
 8008e60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e68:	463b      	mov	r3, r7
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d116      	bne.n	8008ea0 <USB_EPStartXfer+0x1024>
 8008e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e84:	801a      	strh	r2, [r3, #0]
 8008e86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e8a:	881b      	ldrh	r3, [r3, #0]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e9c:	801a      	strh	r2, [r3, #0]
 8008e9e:	e065      	b.n	8008f6c <USB_EPStartXfer+0x10f0>
 8008ea0:	463b      	mov	r3, r7
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	2b3e      	cmp	r3, #62	; 0x3e
 8008ea8:	d81a      	bhi.n	8008ee0 <USB_EPStartXfer+0x1064>
 8008eaa:	463b      	mov	r3, r7
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	085b      	lsrs	r3, r3, #1
 8008eb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008eb6:	463b      	mov	r3, r7
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d004      	beq.n	8008ece <USB_EPStartXfer+0x1052>
 8008ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ec8:	3301      	adds	r3, #1
 8008eca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	029b      	lsls	r3, r3, #10
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008edc:	801a      	strh	r2, [r3, #0]
 8008ede:	e045      	b.n	8008f6c <USB_EPStartXfer+0x10f0>
 8008ee0:	463b      	mov	r3, r7
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	095b      	lsrs	r3, r3, #5
 8008ee8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008eec:	463b      	mov	r3, r7
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	f003 031f 	and.w	r3, r3, #31
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d104      	bne.n	8008f04 <USB_EPStartXfer+0x1088>
 8008efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008efe:	3b01      	subs	r3, #1
 8008f00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	029b      	lsls	r3, r3, #10
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f1c:	801a      	strh	r2, [r3, #0]
 8008f1e:	e025      	b.n	8008f6c <USB_EPStartXfer+0x10f0>
 8008f20:	463b      	mov	r3, r7
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	785b      	ldrb	r3, [r3, #1]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d120      	bne.n	8008f6c <USB_EPStartXfer+0x10f0>
 8008f2a:	1d3b      	adds	r3, r7, #4
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008f32:	1d3b      	adds	r3, r7, #4
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f42:	4413      	add	r3, r2
 8008f44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008f48:	463b      	mov	r3, r7
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	011a      	lsls	r2, r3, #4
 8008f50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f54:	4413      	add	r3, r2
 8008f56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f5e:	463b      	mov	r3, r7
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008f6a:	801a      	strh	r2, [r3, #0]
 8008f6c:	1d3b      	adds	r3, r7, #4
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f74:	463b      	mov	r3, r7
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	785b      	ldrb	r3, [r3, #1]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d175      	bne.n	800906a <USB_EPStartXfer+0x11ee>
 8008f7e:	1d3b      	adds	r3, r7, #4
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008f86:	1d3b      	adds	r3, r7, #4
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	461a      	mov	r2, r3
 8008f92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008f96:	4413      	add	r3, r2
 8008f98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008f9c:	463b      	mov	r3, r7
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	011a      	lsls	r2, r3, #4
 8008fa4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008fa8:	4413      	add	r3, r2
 8008faa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008fae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fb2:	463b      	mov	r3, r7
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d116      	bne.n	8008fea <USB_EPStartXfer+0x116e>
 8008fbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008fce:	801a      	strh	r2, [r3, #0]
 8008fd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008fd4:	881b      	ldrh	r3, [r3, #0]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008fe6:	801a      	strh	r2, [r3, #0]
 8008fe8:	e061      	b.n	80090ae <USB_EPStartXfer+0x1232>
 8008fea:	463b      	mov	r3, r7
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	2b3e      	cmp	r3, #62	; 0x3e
 8008ff2:	d81a      	bhi.n	800902a <USB_EPStartXfer+0x11ae>
 8008ff4:	463b      	mov	r3, r7
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	085b      	lsrs	r3, r3, #1
 8008ffc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009000:	463b      	mov	r3, r7
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d004      	beq.n	8009018 <USB_EPStartXfer+0x119c>
 800900e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009012:	3301      	adds	r3, #1
 8009014:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009018:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800901c:	b29b      	uxth	r3, r3
 800901e:	029b      	lsls	r3, r3, #10
 8009020:	b29a      	uxth	r2, r3
 8009022:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009026:	801a      	strh	r2, [r3, #0]
 8009028:	e041      	b.n	80090ae <USB_EPStartXfer+0x1232>
 800902a:	463b      	mov	r3, r7
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	095b      	lsrs	r3, r3, #5
 8009032:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009036:	463b      	mov	r3, r7
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	f003 031f 	and.w	r3, r3, #31
 8009040:	2b00      	cmp	r3, #0
 8009042:	d104      	bne.n	800904e <USB_EPStartXfer+0x11d2>
 8009044:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009048:	3b01      	subs	r3, #1
 800904a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800904e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009052:	b29b      	uxth	r3, r3
 8009054:	029b      	lsls	r3, r3, #10
 8009056:	b29b      	uxth	r3, r3
 8009058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800905c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009060:	b29a      	uxth	r2, r3
 8009062:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009066:	801a      	strh	r2, [r3, #0]
 8009068:	e021      	b.n	80090ae <USB_EPStartXfer+0x1232>
 800906a:	463b      	mov	r3, r7
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	785b      	ldrb	r3, [r3, #1]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d11c      	bne.n	80090ae <USB_EPStartXfer+0x1232>
 8009074:	1d3b      	adds	r3, r7, #4
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800907c:	b29b      	uxth	r3, r3
 800907e:	461a      	mov	r2, r3
 8009080:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009084:	4413      	add	r3, r2
 8009086:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800908a:	463b      	mov	r3, r7
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	011a      	lsls	r2, r3, #4
 8009092:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009096:	4413      	add	r3, r2
 8009098:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800909c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090a0:	463b      	mov	r3, r7
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090ac:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80090ae:	463b      	mov	r3, r7
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 81a4 	beq.w	8009402 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80090ba:	1d3b      	adds	r3, r7, #4
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	463b      	mov	r3, r7
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80090ce:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80090d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d005      	beq.n	80090e6 <USB_EPStartXfer+0x126a>
 80090da:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80090de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10d      	bne.n	8009102 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80090e6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80090ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f040 8187 	bne.w	8009402 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80090f4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80090f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f040 8180 	bne.w	8009402 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009102:	1d3b      	adds	r3, r7, #4
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	463b      	mov	r3, r7
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	b29b      	uxth	r3, r3
 8009114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800911c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009120:	1d3b      	adds	r3, r7, #4
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	463b      	mov	r3, r7
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	441a      	add	r2, r3
 800912e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8009132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800913a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800913e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009142:	b29b      	uxth	r3, r3
 8009144:	8013      	strh	r3, [r2, #0]
 8009146:	e15c      	b.n	8009402 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009148:	463b      	mov	r3, r7
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	78db      	ldrb	r3, [r3, #3]
 800914e:	2b01      	cmp	r3, #1
 8009150:	f040 8155 	bne.w	80093fe <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009154:	463b      	mov	r3, r7
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	699a      	ldr	r2, [r3, #24]
 800915a:	463b      	mov	r3, r7
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	429a      	cmp	r2, r3
 8009162:	d90e      	bls.n	8009182 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8009164:	463b      	mov	r3, r7
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800916e:	463b      	mov	r3, r7
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	699a      	ldr	r2, [r3, #24]
 8009174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009178:	1ad2      	subs	r2, r2, r3
 800917a:	463b      	mov	r3, r7
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	619a      	str	r2, [r3, #24]
 8009180:	e008      	b.n	8009194 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8009182:	463b      	mov	r3, r7
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800918c:	463b      	mov	r3, r7
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2200      	movs	r2, #0
 8009192:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009194:	463b      	mov	r3, r7
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	785b      	ldrb	r3, [r3, #1]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d16f      	bne.n	800927e <USB_EPStartXfer+0x1402>
 800919e:	1d3b      	adds	r3, r7, #4
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80091a6:	1d3b      	adds	r3, r7, #4
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	461a      	mov	r2, r3
 80091b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80091b6:	4413      	add	r3, r2
 80091b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80091bc:	463b      	mov	r3, r7
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	011a      	lsls	r2, r3, #4
 80091c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80091c8:	4413      	add	r3, r2
 80091ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d116      	bne.n	8009208 <USB_EPStartXfer+0x138c>
 80091da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80091ec:	801a      	strh	r2, [r3, #0]
 80091ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091fe:	b29a      	uxth	r2, r3
 8009200:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009204:	801a      	strh	r2, [r3, #0]
 8009206:	e05f      	b.n	80092c8 <USB_EPStartXfer+0x144c>
 8009208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800920c:	2b3e      	cmp	r3, #62	; 0x3e
 800920e:	d818      	bhi.n	8009242 <USB_EPStartXfer+0x13c6>
 8009210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009214:	085b      	lsrs	r3, r3, #1
 8009216:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800921a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	2b00      	cmp	r3, #0
 8009224:	d004      	beq.n	8009230 <USB_EPStartXfer+0x13b4>
 8009226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800922a:	3301      	adds	r3, #1
 800922c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009234:	b29b      	uxth	r3, r3
 8009236:	029b      	lsls	r3, r3, #10
 8009238:	b29a      	uxth	r2, r3
 800923a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800923e:	801a      	strh	r2, [r3, #0]
 8009240:	e042      	b.n	80092c8 <USB_EPStartXfer+0x144c>
 8009242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009246:	095b      	lsrs	r3, r3, #5
 8009248:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800924c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009250:	f003 031f 	and.w	r3, r3, #31
 8009254:	2b00      	cmp	r3, #0
 8009256:	d104      	bne.n	8009262 <USB_EPStartXfer+0x13e6>
 8009258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800925c:	3b01      	subs	r3, #1
 800925e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009266:	b29b      	uxth	r3, r3
 8009268:	029b      	lsls	r3, r3, #10
 800926a:	b29b      	uxth	r3, r3
 800926c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009274:	b29a      	uxth	r2, r3
 8009276:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800927a:	801a      	strh	r2, [r3, #0]
 800927c:	e024      	b.n	80092c8 <USB_EPStartXfer+0x144c>
 800927e:	463b      	mov	r3, r7
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	785b      	ldrb	r3, [r3, #1]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d11f      	bne.n	80092c8 <USB_EPStartXfer+0x144c>
 8009288:	1d3b      	adds	r3, r7, #4
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009290:	1d3b      	adds	r3, r7, #4
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009298:	b29b      	uxth	r3, r3
 800929a:	461a      	mov	r2, r3
 800929c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a0:	4413      	add	r3, r2
 80092a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80092a6:	463b      	mov	r3, r7
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	011a      	lsls	r2, r3, #4
 80092ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092b2:	4413      	add	r3, r2
 80092b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80092bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80092c6:	801a      	strh	r2, [r3, #0]
 80092c8:	1d3b      	adds	r3, r7, #4
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092d0:	463b      	mov	r3, r7
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	785b      	ldrb	r3, [r3, #1]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d16f      	bne.n	80093ba <USB_EPStartXfer+0x153e>
 80092da:	1d3b      	adds	r3, r7, #4
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80092e2:	1d3b      	adds	r3, r7, #4
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	461a      	mov	r2, r3
 80092ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092f2:	4413      	add	r3, r2
 80092f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80092f8:	463b      	mov	r3, r7
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	011a      	lsls	r2, r3, #4
 8009300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009304:	4413      	add	r3, r2
 8009306:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800930a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800930e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009312:	2b00      	cmp	r3, #0
 8009314:	d116      	bne.n	8009344 <USB_EPStartXfer+0x14c8>
 8009316:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	b29b      	uxth	r3, r3
 800931e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009322:	b29a      	uxth	r2, r3
 8009324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009328:	801a      	strh	r2, [r3, #0]
 800932a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800932e:	881b      	ldrh	r3, [r3, #0]
 8009330:	b29b      	uxth	r3, r3
 8009332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800933a:	b29a      	uxth	r2, r3
 800933c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009340:	801a      	strh	r2, [r3, #0]
 8009342:	e05e      	b.n	8009402 <USB_EPStartXfer+0x1586>
 8009344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009348:	2b3e      	cmp	r3, #62	; 0x3e
 800934a:	d818      	bhi.n	800937e <USB_EPStartXfer+0x1502>
 800934c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009350:	085b      	lsrs	r3, r3, #1
 8009352:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b00      	cmp	r3, #0
 8009360:	d004      	beq.n	800936c <USB_EPStartXfer+0x14f0>
 8009362:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009366:	3301      	adds	r3, #1
 8009368:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800936c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009370:	b29b      	uxth	r3, r3
 8009372:	029b      	lsls	r3, r3, #10
 8009374:	b29a      	uxth	r2, r3
 8009376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800937a:	801a      	strh	r2, [r3, #0]
 800937c:	e041      	b.n	8009402 <USB_EPStartXfer+0x1586>
 800937e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009382:	095b      	lsrs	r3, r3, #5
 8009384:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800938c:	f003 031f 	and.w	r3, r3, #31
 8009390:	2b00      	cmp	r3, #0
 8009392:	d104      	bne.n	800939e <USB_EPStartXfer+0x1522>
 8009394:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009398:	3b01      	subs	r3, #1
 800939a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800939e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	029b      	lsls	r3, r3, #10
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093b6:	801a      	strh	r2, [r3, #0]
 80093b8:	e023      	b.n	8009402 <USB_EPStartXfer+0x1586>
 80093ba:	463b      	mov	r3, r7
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	785b      	ldrb	r3, [r3, #1]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d11e      	bne.n	8009402 <USB_EPStartXfer+0x1586>
 80093c4:	1d3b      	adds	r3, r7, #4
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	461a      	mov	r2, r3
 80093d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093d4:	4413      	add	r3, r2
 80093d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80093da:	463b      	mov	r3, r7
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	011a      	lsls	r2, r3, #4
 80093e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e6:	4413      	add	r3, r2
 80093e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093fa:	801a      	strh	r2, [r3, #0]
 80093fc:	e001      	b.n	8009402 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e02e      	b.n	8009460 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009402:	1d3b      	adds	r3, r7, #4
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	463b      	mov	r3, r7
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	b29b      	uxth	r3, r3
 8009414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800941c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009420:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009424:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009428:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800942c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009430:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009434:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009438:	1d3b      	adds	r3, r7, #4
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	463b      	mov	r3, r7
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	441a      	add	r2, r3
 8009446:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800944a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800944e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800945a:	b29b      	uxth	r3, r3
 800945c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800946a:	b480      	push	{r7}
 800946c:	b085      	sub	sp, #20
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	785b      	ldrb	r3, [r3, #1]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d020      	beq.n	80094be <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	b29b      	uxth	r3, r3
 800948a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800948e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009492:	81bb      	strh	r3, [r7, #12]
 8009494:	89bb      	ldrh	r3, [r7, #12]
 8009496:	f083 0310 	eor.w	r3, r3, #16
 800949a:	81bb      	strh	r3, [r7, #12]
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	441a      	add	r2, r3
 80094a6:	89bb      	ldrh	r3, [r7, #12]
 80094a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	8013      	strh	r3, [r2, #0]
 80094bc:	e01f      	b.n	80094fe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	881b      	ldrh	r3, [r3, #0]
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094d4:	81fb      	strh	r3, [r7, #14]
 80094d6:	89fb      	ldrh	r3, [r7, #14]
 80094d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80094dc:	81fb      	strh	r3, [r7, #14]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	441a      	add	r2, r3
 80094e8:	89fb      	ldrh	r3, [r7, #14]
 80094ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	bc80      	pop	{r7}
 8009508:	4770      	bx	lr

0800950a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800950a:	b480      	push	{r7}
 800950c:	b087      	sub	sp, #28
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	7b1b      	ldrb	r3, [r3, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	f040 809d 	bne.w	8009658 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	785b      	ldrb	r3, [r3, #1]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d04c      	beq.n	80095c0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	823b      	strh	r3, [r7, #16]
 8009534:	8a3b      	ldrh	r3, [r7, #16]
 8009536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800953a:	2b00      	cmp	r3, #0
 800953c:	d01b      	beq.n	8009576 <USB_EPClearStall+0x6c>
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	b29b      	uxth	r3, r3
 800954c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009554:	81fb      	strh	r3, [r7, #14]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	441a      	add	r2, r3
 8009560:	89fb      	ldrh	r3, [r7, #14]
 8009562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800956a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800956e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009572:	b29b      	uxth	r3, r3
 8009574:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	78db      	ldrb	r3, [r3, #3]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d06c      	beq.n	8009658 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	881b      	ldrh	r3, [r3, #0]
 800958a:	b29b      	uxth	r3, r3
 800958c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009594:	81bb      	strh	r3, [r7, #12]
 8009596:	89bb      	ldrh	r3, [r7, #12]
 8009598:	f083 0320 	eor.w	r3, r3, #32
 800959c:	81bb      	strh	r3, [r7, #12]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	441a      	add	r2, r3
 80095a8:	89bb      	ldrh	r3, [r7, #12]
 80095aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	8013      	strh	r3, [r2, #0]
 80095be:	e04b      	b.n	8009658 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4413      	add	r3, r2
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	82fb      	strh	r3, [r7, #22]
 80095ce:	8afb      	ldrh	r3, [r7, #22]
 80095d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d01b      	beq.n	8009610 <USB_EPClearStall+0x106>
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ee:	82bb      	strh	r3, [r7, #20]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	441a      	add	r2, r3
 80095fa:	8abb      	ldrh	r3, [r7, #20]
 80095fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009604:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800960c:	b29b      	uxth	r3, r3
 800960e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4413      	add	r3, r2
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	b29b      	uxth	r3, r3
 800961e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009626:	827b      	strh	r3, [r7, #18]
 8009628:	8a7b      	ldrh	r3, [r7, #18]
 800962a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800962e:	827b      	strh	r3, [r7, #18]
 8009630:	8a7b      	ldrh	r3, [r7, #18]
 8009632:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009636:	827b      	strh	r3, [r7, #18]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	441a      	add	r2, r3
 8009642:	8a7b      	ldrh	r3, [r7, #18]
 8009644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800964c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009654:	b29b      	uxth	r3, r3
 8009656:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	371c      	adds	r7, #28
 800965e:	46bd      	mov	sp, r7
 8009660:	bc80      	pop	{r7}
 8009662:	4770      	bx	lr

08009664 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	460b      	mov	r3, r1
 800966e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009670:	78fb      	ldrb	r3, [r7, #3]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d103      	bne.n	800967e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2280      	movs	r2, #128	; 0x80
 800967a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	bc80      	pop	{r7}
 8009688:	4770      	bx	lr

0800968a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	bc80      	pop	{r7}
 800969c:	4770      	bx	lr

0800969e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800969e:	b480      	push	{r7}
 80096a0:	b083      	sub	sp, #12
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bc80      	pop	{r7}
 80096b0:	4770      	bx	lr

080096b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b085      	sub	sp, #20
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80096c4:	68fb      	ldr	r3, [r7, #12]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bc80      	pop	{r7}
 80096ce:	4770      	bx	lr

080096d0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bc80      	pop	{r7}
 80096e4:	4770      	bx	lr

080096e6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b08d      	sub	sp, #52	; 0x34
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	60b9      	str	r1, [r7, #8]
 80096f0:	4611      	mov	r1, r2
 80096f2:	461a      	mov	r2, r3
 80096f4:	460b      	mov	r3, r1
 80096f6:	80fb      	strh	r3, [r7, #6]
 80096f8:	4613      	mov	r3, r2
 80096fa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80096fc:	88bb      	ldrh	r3, [r7, #4]
 80096fe:	3301      	adds	r3, #1
 8009700:	085b      	lsrs	r3, r3, #1
 8009702:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800970c:	88fb      	ldrh	r3, [r7, #6]
 800970e:	005a      	lsls	r2, r3, #1
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	4413      	add	r3, r2
 8009714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009718:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800971e:	e01e      	b.n	800975e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009728:	3301      	adds	r3, #1
 800972a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	b29b      	uxth	r3, r3
 8009732:	021b      	lsls	r3, r3, #8
 8009734:	b29b      	uxth	r3, r3
 8009736:	461a      	mov	r2, r3
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	4313      	orrs	r3, r2
 800973c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	b29a      	uxth	r2, r3
 8009742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009744:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009748:	3302      	adds	r3, #2
 800974a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800974c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974e:	3302      	adds	r3, #2
 8009750:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009754:	3301      	adds	r3, #1
 8009756:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975a:	3b01      	subs	r3, #1
 800975c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1dd      	bne.n	8009720 <USB_WritePMA+0x3a>
  }
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop
 8009768:	3734      	adds	r7, #52	; 0x34
 800976a:	46bd      	mov	sp, r7
 800976c:	bc80      	pop	{r7}
 800976e:	4770      	bx	lr

08009770 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009770:	b480      	push	{r7}
 8009772:	b08b      	sub	sp, #44	; 0x2c
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	4611      	mov	r1, r2
 800977c:	461a      	mov	r2, r3
 800977e:	460b      	mov	r3, r1
 8009780:	80fb      	strh	r3, [r7, #6]
 8009782:	4613      	mov	r3, r2
 8009784:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009786:	88bb      	ldrh	r3, [r7, #4]
 8009788:	085b      	lsrs	r3, r3, #1
 800978a:	b29b      	uxth	r3, r3
 800978c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009796:	88fb      	ldrh	r3, [r7, #6]
 8009798:	005a      	lsls	r2, r3, #1
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	4413      	add	r3, r2
 800979e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097a2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	627b      	str	r3, [r7, #36]	; 0x24
 80097a8:	e01b      	b.n	80097e2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80097aa:	6a3b      	ldr	r3, [r7, #32]
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80097b2:	6a3b      	ldr	r3, [r7, #32]
 80097b4:	3302      	adds	r3, #2
 80097b6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	b2da      	uxtb	r2, r3
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	3301      	adds	r3, #1
 80097c4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	0a1b      	lsrs	r3, r3, #8
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	3301      	adds	r3, #1
 80097d4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	3302      	adds	r3, #2
 80097da:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80097dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097de:	3b01      	subs	r3, #1
 80097e0:	627b      	str	r3, [r7, #36]	; 0x24
 80097e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1e0      	bne.n	80097aa <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80097e8:	88bb      	ldrh	r3, [r7, #4]
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d007      	beq.n	8009804 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	881b      	ldrh	r3, [r3, #0]
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	701a      	strb	r2, [r3, #0]
  }
}
 8009804:	bf00      	nop
 8009806:	372c      	adds	r7, #44	; 0x2c
 8009808:	46bd      	mov	sp, r7
 800980a:	bc80      	pop	{r7}
 800980c:	4770      	bx	lr

0800980e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b084      	sub	sp, #16
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	460b      	mov	r3, r1
 8009818:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	7c1b      	ldrb	r3, [r3, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d115      	bne.n	8009852 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800982a:	2202      	movs	r2, #2
 800982c:	2181      	movs	r1, #129	; 0x81
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f005 f8eb 	bl	800ea0a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800983a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800983e:	2202      	movs	r2, #2
 8009840:	2101      	movs	r1, #1
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f005 f8e1 	bl	800ea0a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009850:	e012      	b.n	8009878 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009852:	2340      	movs	r3, #64	; 0x40
 8009854:	2202      	movs	r2, #2
 8009856:	2181      	movs	r1, #129	; 0x81
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f005 f8d6 	bl	800ea0a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2201      	movs	r2, #1
 8009862:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009864:	2340      	movs	r3, #64	; 0x40
 8009866:	2202      	movs	r2, #2
 8009868:	2101      	movs	r1, #1
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f005 f8cd 	bl	800ea0a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009878:	2308      	movs	r3, #8
 800987a:	2203      	movs	r2, #3
 800987c:	2182      	movs	r1, #130	; 0x82
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f005 f8c3 	bl	800ea0a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800988a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800988e:	f005 f9e3 	bl	800ec58 <USBD_static_malloc>
 8009892:	4602      	mov	r2, r0
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d102      	bne.n	80098aa <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80098a4:	2301      	movs	r3, #1
 80098a6:	73fb      	strb	r3, [r7, #15]
 80098a8:	e026      	b.n	80098f8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	2200      	movs	r2, #0
 80098c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	7c1b      	ldrb	r3, [r3, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d109      	bne.n	80098e8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098de:	2101      	movs	r1, #1
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f005 f983 	bl	800ebec <USBD_LL_PrepareReceive>
 80098e6:	e007      	b.n	80098f8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098ee:	2340      	movs	r3, #64	; 0x40
 80098f0:	2101      	movs	r1, #1
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f005 f97a 	bl	800ebec <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	460b      	mov	r3, r1
 800990c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009912:	2181      	movs	r1, #129	; 0x81
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f005 f89e 	bl	800ea56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009920:	2101      	movs	r1, #1
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f005 f897 	bl	800ea56 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009930:	2182      	movs	r1, #130	; 0x82
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f005 f88f 	bl	800ea56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00e      	beq.n	8009966 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009958:	4618      	mov	r0, r3
 800995a:	f005 f989 	bl	800ec70 <USBD_static_free>
    pdev->pClassData = NULL;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009966:	7bfb      	ldrb	r3, [r7, #15]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009980:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009982:	2300      	movs	r3, #0
 8009984:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009986:	2300      	movs	r3, #0
 8009988:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009996:	2b00      	cmp	r3, #0
 8009998:	d039      	beq.n	8009a0e <USBD_CDC_Setup+0x9e>
 800999a:	2b20      	cmp	r3, #32
 800999c:	d17f      	bne.n	8009a9e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	88db      	ldrh	r3, [r3, #6]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d029      	beq.n	80099fa <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	b25b      	sxtb	r3, r3
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	da11      	bge.n	80099d4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	683a      	ldr	r2, [r7, #0]
 80099ba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80099bc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80099be:	683a      	ldr	r2, [r7, #0]
 80099c0:	88d2      	ldrh	r2, [r2, #6]
 80099c2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80099c4:	6939      	ldr	r1, [r7, #16]
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	88db      	ldrh	r3, [r3, #6]
 80099ca:	461a      	mov	r2, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f001 fa0a 	bl	800ade6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80099d2:	e06b      	b.n	8009aac <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	785a      	ldrb	r2, [r3, #1]
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	88db      	ldrh	r3, [r3, #6]
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80099ea:	6939      	ldr	r1, [r7, #16]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	88db      	ldrh	r3, [r3, #6]
 80099f0:	461a      	mov	r2, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f001 fa25 	bl	800ae42 <USBD_CtlPrepareRx>
      break;
 80099f8:	e058      	b.n	8009aac <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	7850      	ldrb	r0, [r2, #1]
 8009a06:	2200      	movs	r2, #0
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	4798      	blx	r3
      break;
 8009a0c:	e04e      	b.n	8009aac <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	785b      	ldrb	r3, [r3, #1]
 8009a12:	2b0b      	cmp	r3, #11
 8009a14:	d02e      	beq.n	8009a74 <USBD_CDC_Setup+0x104>
 8009a16:	2b0b      	cmp	r3, #11
 8009a18:	dc38      	bgt.n	8009a8c <USBD_CDC_Setup+0x11c>
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d002      	beq.n	8009a24 <USBD_CDC_Setup+0xb4>
 8009a1e:	2b0a      	cmp	r3, #10
 8009a20:	d014      	beq.n	8009a4c <USBD_CDC_Setup+0xdc>
 8009a22:	e033      	b.n	8009a8c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a2a:	2b03      	cmp	r3, #3
 8009a2c:	d107      	bne.n	8009a3e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009a2e:	f107 030c 	add.w	r3, r7, #12
 8009a32:	2202      	movs	r2, #2
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f001 f9d5 	bl	800ade6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a3c:	e02e      	b.n	8009a9c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f001 f966 	bl	800ad12 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a46:	2302      	movs	r3, #2
 8009a48:	75fb      	strb	r3, [r7, #23]
          break;
 8009a4a:	e027      	b.n	8009a9c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	d107      	bne.n	8009a66 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009a56:	f107 030f 	add.w	r3, r7, #15
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f001 f9c1 	bl	800ade6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a64:	e01a      	b.n	8009a9c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f001 f952 	bl	800ad12 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a6e:	2302      	movs	r3, #2
 8009a70:	75fb      	strb	r3, [r7, #23]
          break;
 8009a72:	e013      	b.n	8009a9c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a7a:	2b03      	cmp	r3, #3
 8009a7c:	d00d      	beq.n	8009a9a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f001 f946 	bl	800ad12 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a86:	2302      	movs	r3, #2
 8009a88:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009a8a:	e006      	b.n	8009a9a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f001 f93f 	bl	800ad12 <USBD_CtlError>
          ret = USBD_FAIL;
 8009a94:	2302      	movs	r3, #2
 8009a96:	75fb      	strb	r3, [r7, #23]
          break;
 8009a98:	e000      	b.n	8009a9c <USBD_CDC_Setup+0x12c>
          break;
 8009a9a:	bf00      	nop
      }
      break;
 8009a9c:	e006      	b.n	8009aac <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f001 f936 	bl	800ad12 <USBD_CtlError>
      ret = USBD_FAIL;
 8009aa6:	2302      	movs	r3, #2
 8009aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8009aaa:	bf00      	nop
  }

  return ret;
 8009aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b084      	sub	sp, #16
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
 8009abe:	460b      	mov	r3, r1
 8009ac0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ac8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ad0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d03a      	beq.n	8009b52 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009adc:	78fa      	ldrb	r2, [r7, #3]
 8009ade:	6879      	ldr	r1, [r7, #4]
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	440b      	add	r3, r1
 8009aea:	331c      	adds	r3, #28
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d029      	beq.n	8009b46 <USBD_CDC_DataIn+0x90>
 8009af2:	78fa      	ldrb	r2, [r7, #3]
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	4613      	mov	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	440b      	add	r3, r1
 8009b00:	331c      	adds	r3, #28
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	78f9      	ldrb	r1, [r7, #3]
 8009b06:	68b8      	ldr	r0, [r7, #8]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	440b      	add	r3, r1
 8009b0e:	00db      	lsls	r3, r3, #3
 8009b10:	4403      	add	r3, r0
 8009b12:	3338      	adds	r3, #56	; 0x38
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b1a:	fb03 f301 	mul.w	r3, r3, r1
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d110      	bne.n	8009b46 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009b24:	78fa      	ldrb	r2, [r7, #3]
 8009b26:	6879      	ldr	r1, [r7, #4]
 8009b28:	4613      	mov	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	440b      	add	r3, r1
 8009b32:	331c      	adds	r3, #28
 8009b34:	2200      	movs	r2, #0
 8009b36:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009b38:	78f9      	ldrb	r1, [r7, #3]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f005 f831 	bl	800eba6 <USBD_LL_Transmit>
 8009b44:	e003      	b.n	8009b4e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	e000      	b.n	8009b54 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009b52:	2302      	movs	r3, #2
  }
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	460b      	mov	r3, r1
 8009b66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b6e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009b70:	78fb      	ldrb	r3, [r7, #3]
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f005 f85c 	bl	800ec32 <USBD_LL_GetRxDataSize>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00d      	beq.n	8009ba8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	4798      	blx	r3

    return USBD_OK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	e000      	b.n	8009baa <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009ba8:	2302      	movs	r3, #2
  }
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b084      	sub	sp, #16
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d015      	beq.n	8009bf8 <USBD_CDC_EP0_RxReady+0x46>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009bd2:	2bff      	cmp	r3, #255	; 0xff
 8009bd4:	d010      	beq.n	8009bf8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009be4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009bec:	b292      	uxth	r2, r2
 8009bee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	22ff      	movs	r2, #255	; 0xff
 8009bf4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2243      	movs	r2, #67	; 0x43
 8009c10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009c12:	4b03      	ldr	r3, [pc, #12]	; (8009c20 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bc80      	pop	{r7}
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	200000a4 	.word	0x200000a4

08009c24 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2243      	movs	r2, #67	; 0x43
 8009c30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009c32:	4b03      	ldr	r3, [pc, #12]	; (8009c40 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bc80      	pop	{r7}
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	20000060 	.word	0x20000060

08009c44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2243      	movs	r2, #67	; 0x43
 8009c50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009c52:	4b03      	ldr	r3, [pc, #12]	; (8009c60 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bc80      	pop	{r7}
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	200000e8 	.word	0x200000e8

08009c64 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	220a      	movs	r2, #10
 8009c70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009c72:	4b03      	ldr	r3, [pc, #12]	; (8009c80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bc80      	pop	{r7}
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	2000001c 	.word	0x2000001c

08009c84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009c8e:	2302      	movs	r3, #2
 8009c90:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d005      	beq.n	8009ca4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bc80      	pop	{r7}
 8009cae:	4770      	bx	lr

08009cb0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b087      	sub	sp, #28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cc4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009cce:	88fa      	ldrh	r2, [r7, #6]
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	371c      	adds	r7, #28
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bc80      	pop	{r7}
 8009ce0:	4770      	bx	lr

08009ce2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009ce2:	b480      	push	{r7}
 8009ce4:	b085      	sub	sp, #20
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cf2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bc80      	pop	{r7}
 8009d06:	4770      	bx	lr

08009d08 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d01c      	beq.n	8009d5c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d115      	bne.n	8009d58 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	2181      	movs	r1, #129	; 0x81
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f004 ff29 	bl	800eba6 <USBD_LL_Transmit>

      return USBD_OK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	e002      	b.n	8009d5e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e000      	b.n	8009d5e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009d5c:	2302      	movs	r3, #2
  }
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b084      	sub	sp, #16
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d74:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d017      	beq.n	8009db0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	7c1b      	ldrb	r3, [r3, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d109      	bne.n	8009d9c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d92:	2101      	movs	r1, #1
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f004 ff29 	bl	800ebec <USBD_LL_PrepareReceive>
 8009d9a:	e007      	b.n	8009dac <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009da2:	2340      	movs	r3, #64	; 0x40
 8009da4:	2101      	movs	r1, #1
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f004 ff20 	bl	800ebec <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	e000      	b.n	8009db2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009db0:	2302      	movs	r3, #2
  }
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b084      	sub	sp, #16
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	60f8      	str	r0, [r7, #12]
 8009dc2:	60b9      	str	r1, [r7, #8]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d101      	bne.n	8009dd2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009dce:	2302      	movs	r3, #2
 8009dd0:	e01a      	b.n	8009e08 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d003      	beq.n	8009de4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d003      	beq.n	8009df2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	79fa      	ldrb	r2, [r7, #7]
 8009dfe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f004 fd8d 	bl	800e920 <USBD_LL_Init>

  return USBD_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d006      	beq.n	8009e32 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	683a      	ldr	r2, [r7, #0]
 8009e28:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	73fb      	strb	r3, [r7, #15]
 8009e30:	e001      	b.n	8009e36 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009e32:	2302      	movs	r3, #2
 8009e34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3714      	adds	r7, #20
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bc80      	pop	{r7}
 8009e40:	4770      	bx	lr

08009e42 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b082      	sub	sp, #8
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f004 fdc2 	bl	800e9d4 <USBD_LL_Start>

  return USBD_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b083      	sub	sp, #12
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bc80      	pop	{r7}
 8009e6c:	4770      	bx	lr

08009e6e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	460b      	mov	r3, r1
 8009e78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00c      	beq.n	8009ea2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	78fa      	ldrb	r2, [r7, #3]
 8009e92:	4611      	mov	r1, r2
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	4798      	blx	r3
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d101      	bne.n	8009ea2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	78fa      	ldrb	r2, [r7, #3]
 8009ec2:	4611      	mov	r1, r2
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	4798      	blx	r3

  return USBD_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 fed8 	bl	800ac9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009ef8:	461a      	mov	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009f06:	f003 031f 	and.w	r3, r3, #31
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d016      	beq.n	8009f3c <USBD_LL_SetupStage+0x6a>
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d81c      	bhi.n	8009f4c <USBD_LL_SetupStage+0x7a>
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d002      	beq.n	8009f1c <USBD_LL_SetupStage+0x4a>
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d008      	beq.n	8009f2c <USBD_LL_SetupStage+0x5a>
 8009f1a:	e017      	b.n	8009f4c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f9cb 	bl	800a2c0 <USBD_StdDevReq>
      break;
 8009f2a:	e01a      	b.n	8009f62 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fa2d 	bl	800a394 <USBD_StdItfReq>
      break;
 8009f3a:	e012      	b.n	8009f62 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009f42:	4619      	mov	r1, r3
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fa6d 	bl	800a424 <USBD_StdEPReq>
      break;
 8009f4a:	e00a      	b.n	8009f62 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009f52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f004 fd9a 	bl	800ea94 <USBD_LL_StallEP>
      break;
 8009f60:	bf00      	nop
  }

  return USBD_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	460b      	mov	r3, r1
 8009f76:	607a      	str	r2, [r7, #4]
 8009f78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009f7a:	7afb      	ldrb	r3, [r7, #11]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d14b      	bne.n	800a018 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009f86:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f8e:	2b03      	cmp	r3, #3
 8009f90:	d134      	bne.n	8009ffc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	68da      	ldr	r2, [r3, #12]
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d919      	bls.n	8009fd2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	68da      	ldr	r2, [r3, #12]
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	1ad2      	subs	r2, r2, r3
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	68da      	ldr	r2, [r3, #12]
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d203      	bcs.n	8009fc0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	e002      	b.n	8009fc6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	6879      	ldr	r1, [r7, #4]
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f000 ff57 	bl	800ae7e <USBD_CtlContinueRx>
 8009fd0:	e038      	b.n	800a044 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00a      	beq.n	8009ff4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009fe4:	2b03      	cmp	r3, #3
 8009fe6:	d105      	bne.n	8009ff4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f000 ff54 	bl	800aea2 <USBD_CtlSendStatus>
 8009ffa:	e023      	b.n	800a044 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a002:	2b05      	cmp	r3, #5
 800a004:	d11e      	bne.n	800a044 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a00e:	2100      	movs	r1, #0
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f004 fd3f 	bl	800ea94 <USBD_LL_StallEP>
 800a016:	e015      	b.n	800a044 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00d      	beq.n	800a040 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a02a:	2b03      	cmp	r3, #3
 800a02c:	d108      	bne.n	800a040 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a034:	699b      	ldr	r3, [r3, #24]
 800a036:	7afa      	ldrb	r2, [r7, #11]
 800a038:	4611      	mov	r1, r2
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	4798      	blx	r3
 800a03e:	e001      	b.n	800a044 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a040:	2302      	movs	r3, #2
 800a042:	e000      	b.n	800a046 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b086      	sub	sp, #24
 800a052:	af00      	add	r7, sp, #0
 800a054:	60f8      	str	r0, [r7, #12]
 800a056:	460b      	mov	r3, r1
 800a058:	607a      	str	r2, [r7, #4]
 800a05a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a05c:	7afb      	ldrb	r3, [r7, #11]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d17f      	bne.n	800a162 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3314      	adds	r3, #20
 800a066:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d15c      	bne.n	800a12c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	68da      	ldr	r2, [r3, #12]
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d915      	bls.n	800a0aa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	68da      	ldr	r2, [r3, #12]
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	1ad2      	subs	r2, r2, r3
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	b29b      	uxth	r3, r3
 800a092:	461a      	mov	r2, r3
 800a094:	6879      	ldr	r1, [r7, #4]
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f000 fec1 	bl	800ae1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a09c:	2300      	movs	r3, #0
 800a09e:	2200      	movs	r2, #0
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f004 fda2 	bl	800ebec <USBD_LL_PrepareReceive>
 800a0a8:	e04e      	b.n	800a148 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	6912      	ldr	r2, [r2, #16]
 800a0b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0b6:	fb02 f201 	mul.w	r2, r2, r1
 800a0ba:	1a9b      	subs	r3, r3, r2
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d11c      	bne.n	800a0fa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	689a      	ldr	r2, [r3, #8]
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d316      	bcc.n	800a0fa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	689a      	ldr	r2, [r3, #8]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d20f      	bcs.n	800a0fa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a0da:	2200      	movs	r2, #0
 800a0dc:	2100      	movs	r1, #0
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f000 fe9d 	bl	800ae1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f004 fd7a 	bl	800ebec <USBD_LL_PrepareReceive>
 800a0f8:	e026      	b.n	800a148 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00a      	beq.n	800a11c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a10c:	2b03      	cmp	r3, #3
 800a10e:	d105      	bne.n	800a11c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a11c:	2180      	movs	r1, #128	; 0x80
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f004 fcb8 	bl	800ea94 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 fecf 	bl	800aec8 <USBD_CtlReceiveStatus>
 800a12a:	e00d      	b.n	800a148 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a132:	2b04      	cmp	r3, #4
 800a134:	d004      	beq.n	800a140 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d103      	bne.n	800a148 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a140:	2180      	movs	r1, #128	; 0x80
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f004 fca6 	bl	800ea94 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d11d      	bne.n	800a18e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f7ff fe81 	bl	8009e5a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a160:	e015      	b.n	800a18e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00d      	beq.n	800a18a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a174:	2b03      	cmp	r3, #3
 800a176:	d108      	bne.n	800a18a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a17e:	695b      	ldr	r3, [r3, #20]
 800a180:	7afa      	ldrb	r2, [r7, #11]
 800a182:	4611      	mov	r1, r2
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	4798      	blx	r3
 800a188:	e001      	b.n	800a18e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a18a:	2302      	movs	r3, #2
 800a18c:	e000      	b.n	800a190 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a18e:	2300      	movs	r3, #0
}
 800a190:	4618      	mov	r0, r3
 800a192:	3718      	adds	r7, #24
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1a0:	2340      	movs	r3, #64	; 0x40
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f004 fc2f 	bl	800ea0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2240      	movs	r2, #64	; 0x40
 800a1b8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1bc:	2340      	movs	r3, #64	; 0x40
 800a1be:	2200      	movs	r2, #0
 800a1c0:	2180      	movs	r1, #128	; 0x80
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f004 fc21 	bl	800ea0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2240      	movs	r2, #64	; 0x40
 800a1d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d009      	beq.n	800a210 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	6852      	ldr	r2, [r2, #4]
 800a208:	b2d2      	uxtb	r2, r2
 800a20a:	4611      	mov	r1, r2
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	4798      	blx	r3
  }

  return USBD_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b083      	sub	sp, #12
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	460b      	mov	r3, r1
 800a224:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	78fa      	ldrb	r2, [r7, #3]
 800a22a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	370c      	adds	r7, #12
 800a232:	46bd      	mov	sp, r7
 800a234:	bc80      	pop	{r7}
 800a236:	4770      	bx	lr

0800a238 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2204      	movs	r2, #4
 800a250:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bc80      	pop	{r7}
 800a25e:	4770      	bx	lr

0800a260 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a26e:	2b04      	cmp	r3, #4
 800a270:	d105      	bne.n	800a27e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	bc80      	pop	{r7}
 800a288:	4770      	bx	lr

0800a28a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d10b      	bne.n	800a2b4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2a2:	69db      	ldr	r3, [r3, #28]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d005      	beq.n	800a2b4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ae:	69db      	ldr	r3, [r3, #28]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
	...

0800a2c0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2d6:	2b40      	cmp	r3, #64	; 0x40
 800a2d8:	d005      	beq.n	800a2e6 <USBD_StdDevReq+0x26>
 800a2da:	2b40      	cmp	r3, #64	; 0x40
 800a2dc:	d84f      	bhi.n	800a37e <USBD_StdDevReq+0xbe>
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d009      	beq.n	800a2f6 <USBD_StdDevReq+0x36>
 800a2e2:	2b20      	cmp	r3, #32
 800a2e4:	d14b      	bne.n	800a37e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	6839      	ldr	r1, [r7, #0]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	4798      	blx	r3
      break;
 800a2f4:	e048      	b.n	800a388 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	785b      	ldrb	r3, [r3, #1]
 800a2fa:	2b09      	cmp	r3, #9
 800a2fc:	d839      	bhi.n	800a372 <USBD_StdDevReq+0xb2>
 800a2fe:	a201      	add	r2, pc, #4	; (adr r2, 800a304 <USBD_StdDevReq+0x44>)
 800a300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a304:	0800a355 	.word	0x0800a355
 800a308:	0800a369 	.word	0x0800a369
 800a30c:	0800a373 	.word	0x0800a373
 800a310:	0800a35f 	.word	0x0800a35f
 800a314:	0800a373 	.word	0x0800a373
 800a318:	0800a337 	.word	0x0800a337
 800a31c:	0800a32d 	.word	0x0800a32d
 800a320:	0800a373 	.word	0x0800a373
 800a324:	0800a34b 	.word	0x0800a34b
 800a328:	0800a341 	.word	0x0800a341
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f9dc 	bl	800a6ec <USBD_GetDescriptor>
          break;
 800a334:	e022      	b.n	800a37c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a336:	6839      	ldr	r1, [r7, #0]
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fb3f 	bl	800a9bc <USBD_SetAddress>
          break;
 800a33e:	e01d      	b.n	800a37c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fb7e 	bl	800aa44 <USBD_SetConfig>
          break;
 800a348:	e018      	b.n	800a37c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a34a:	6839      	ldr	r1, [r7, #0]
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fc07 	bl	800ab60 <USBD_GetConfig>
          break;
 800a352:	e013      	b.n	800a37c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fc37 	bl	800abca <USBD_GetStatus>
          break;
 800a35c:	e00e      	b.n	800a37c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fc65 	bl	800ac30 <USBD_SetFeature>
          break;
 800a366:	e009      	b.n	800a37c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fc74 	bl	800ac58 <USBD_ClrFeature>
          break;
 800a370:	e004      	b.n	800a37c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a372:	6839      	ldr	r1, [r7, #0]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fccc 	bl	800ad12 <USBD_CtlError>
          break;
 800a37a:	bf00      	nop
      }
      break;
 800a37c:	e004      	b.n	800a388 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 fcc6 	bl	800ad12 <USBD_CtlError>
      break;
 800a386:	bf00      	nop
  }

  return ret;
 800a388:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop

0800a394 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3aa:	2b40      	cmp	r3, #64	; 0x40
 800a3ac:	d005      	beq.n	800a3ba <USBD_StdItfReq+0x26>
 800a3ae:	2b40      	cmp	r3, #64	; 0x40
 800a3b0:	d82e      	bhi.n	800a410 <USBD_StdItfReq+0x7c>
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <USBD_StdItfReq+0x26>
 800a3b6:	2b20      	cmp	r3, #32
 800a3b8:	d12a      	bne.n	800a410 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d81d      	bhi.n	800a402 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	889b      	ldrh	r3, [r3, #4]
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d813      	bhi.n	800a3f8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	6839      	ldr	r1, [r7, #0]
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	4798      	blx	r3
 800a3de:	4603      	mov	r3, r0
 800a3e0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	88db      	ldrh	r3, [r3, #6]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d110      	bne.n	800a40c <USBD_StdItfReq+0x78>
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10d      	bne.n	800a40c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 fd56 	bl	800aea2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a3f6:	e009      	b.n	800a40c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a3f8:	6839      	ldr	r1, [r7, #0]
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fc89 	bl	800ad12 <USBD_CtlError>
          break;
 800a400:	e004      	b.n	800a40c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 fc84 	bl	800ad12 <USBD_CtlError>
          break;
 800a40a:	e000      	b.n	800a40e <USBD_StdItfReq+0x7a>
          break;
 800a40c:	bf00      	nop
      }
      break;
 800a40e:	e004      	b.n	800a41a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 fc7d 	bl	800ad12 <USBD_CtlError>
      break;
 800a418:	bf00      	nop
  }

  return USBD_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	889b      	ldrh	r3, [r3, #4]
 800a436:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a440:	2b40      	cmp	r3, #64	; 0x40
 800a442:	d007      	beq.n	800a454 <USBD_StdEPReq+0x30>
 800a444:	2b40      	cmp	r3, #64	; 0x40
 800a446:	f200 8146 	bhi.w	800a6d6 <USBD_StdEPReq+0x2b2>
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00a      	beq.n	800a464 <USBD_StdEPReq+0x40>
 800a44e:	2b20      	cmp	r3, #32
 800a450:	f040 8141 	bne.w	800a6d6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	6839      	ldr	r1, [r7, #0]
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	4798      	blx	r3
      break;
 800a462:	e13d      	b.n	800a6e0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a46c:	2b20      	cmp	r3, #32
 800a46e:	d10a      	bne.n	800a486 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	4798      	blx	r3
 800a47e:	4603      	mov	r3, r0
 800a480:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a482:	7bfb      	ldrb	r3, [r7, #15]
 800a484:	e12d      	b.n	800a6e2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	785b      	ldrb	r3, [r3, #1]
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	d007      	beq.n	800a49e <USBD_StdEPReq+0x7a>
 800a48e:	2b03      	cmp	r3, #3
 800a490:	f300 811b 	bgt.w	800a6ca <USBD_StdEPReq+0x2a6>
 800a494:	2b00      	cmp	r3, #0
 800a496:	d072      	beq.n	800a57e <USBD_StdEPReq+0x15a>
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d03a      	beq.n	800a512 <USBD_StdEPReq+0xee>
 800a49c:	e115      	b.n	800a6ca <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d002      	beq.n	800a4ae <USBD_StdEPReq+0x8a>
 800a4a8:	2b03      	cmp	r3, #3
 800a4aa:	d015      	beq.n	800a4d8 <USBD_StdEPReq+0xb4>
 800a4ac:	e02b      	b.n	800a506 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4ae:	7bbb      	ldrb	r3, [r7, #14]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00c      	beq.n	800a4ce <USBD_StdEPReq+0xaa>
 800a4b4:	7bbb      	ldrb	r3, [r7, #14]
 800a4b6:	2b80      	cmp	r3, #128	; 0x80
 800a4b8:	d009      	beq.n	800a4ce <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a4ba:	7bbb      	ldrb	r3, [r7, #14]
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f004 fae8 	bl	800ea94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a4c4:	2180      	movs	r1, #128	; 0x80
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f004 fae4 	bl	800ea94 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4cc:	e020      	b.n	800a510 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a4ce:	6839      	ldr	r1, [r7, #0]
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fc1e 	bl	800ad12 <USBD_CtlError>
              break;
 800a4d6:	e01b      	b.n	800a510 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	885b      	ldrh	r3, [r3, #2]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d10e      	bne.n	800a4fe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a4e0:	7bbb      	ldrb	r3, [r7, #14]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00b      	beq.n	800a4fe <USBD_StdEPReq+0xda>
 800a4e6:	7bbb      	ldrb	r3, [r7, #14]
 800a4e8:	2b80      	cmp	r3, #128	; 0x80
 800a4ea:	d008      	beq.n	800a4fe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	88db      	ldrh	r3, [r3, #6]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d104      	bne.n	800a4fe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a4f4:	7bbb      	ldrb	r3, [r7, #14]
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f004 facb 	bl	800ea94 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fccf 	bl	800aea2 <USBD_CtlSendStatus>

              break;
 800a504:	e004      	b.n	800a510 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a506:	6839      	ldr	r1, [r7, #0]
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 fc02 	bl	800ad12 <USBD_CtlError>
              break;
 800a50e:	bf00      	nop
          }
          break;
 800a510:	e0e0      	b.n	800a6d4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d002      	beq.n	800a522 <USBD_StdEPReq+0xfe>
 800a51c:	2b03      	cmp	r3, #3
 800a51e:	d015      	beq.n	800a54c <USBD_StdEPReq+0x128>
 800a520:	e026      	b.n	800a570 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a522:	7bbb      	ldrb	r3, [r7, #14]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00c      	beq.n	800a542 <USBD_StdEPReq+0x11e>
 800a528:	7bbb      	ldrb	r3, [r7, #14]
 800a52a:	2b80      	cmp	r3, #128	; 0x80
 800a52c:	d009      	beq.n	800a542 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a52e:	7bbb      	ldrb	r3, [r7, #14]
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f004 faae 	bl	800ea94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a538:	2180      	movs	r1, #128	; 0x80
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f004 faaa 	bl	800ea94 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a540:	e01c      	b.n	800a57c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a542:	6839      	ldr	r1, [r7, #0]
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 fbe4 	bl	800ad12 <USBD_CtlError>
              break;
 800a54a:	e017      	b.n	800a57c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	885b      	ldrh	r3, [r3, #2]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d112      	bne.n	800a57a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a554:	7bbb      	ldrb	r3, [r7, #14]
 800a556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d004      	beq.n	800a568 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a55e:	7bbb      	ldrb	r3, [r7, #14]
 800a560:	4619      	mov	r1, r3
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f004 fab5 	bl	800ead2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fc9a 	bl	800aea2 <USBD_CtlSendStatus>
              }
              break;
 800a56e:	e004      	b.n	800a57a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fbcd 	bl	800ad12 <USBD_CtlError>
              break;
 800a578:	e000      	b.n	800a57c <USBD_StdEPReq+0x158>
              break;
 800a57a:	bf00      	nop
          }
          break;
 800a57c:	e0aa      	b.n	800a6d4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a584:	2b02      	cmp	r3, #2
 800a586:	d002      	beq.n	800a58e <USBD_StdEPReq+0x16a>
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d032      	beq.n	800a5f2 <USBD_StdEPReq+0x1ce>
 800a58c:	e097      	b.n	800a6be <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a58e:	7bbb      	ldrb	r3, [r7, #14]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d007      	beq.n	800a5a4 <USBD_StdEPReq+0x180>
 800a594:	7bbb      	ldrb	r3, [r7, #14]
 800a596:	2b80      	cmp	r3, #128	; 0x80
 800a598:	d004      	beq.n	800a5a4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a59a:	6839      	ldr	r1, [r7, #0]
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fbb8 	bl	800ad12 <USBD_CtlError>
                break;
 800a5a2:	e091      	b.n	800a6c8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	da0b      	bge.n	800a5c4 <USBD_StdEPReq+0x1a0>
 800a5ac:	7bbb      	ldrb	r3, [r7, #14]
 800a5ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4413      	add	r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	3310      	adds	r3, #16
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	4413      	add	r3, r2
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	e00b      	b.n	800a5dc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5c4:	7bbb      	ldrb	r3, [r7, #14]
 800a5c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	4413      	add	r3, r2
 800a5da:	3304      	adds	r3, #4
 800a5dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2202      	movs	r2, #2
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fbfb 	bl	800ade6 <USBD_CtlSendData>
              break;
 800a5f0:	e06a      	b.n	800a6c8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a5f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	da11      	bge.n	800a61e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a5fa:	7bbb      	ldrb	r3, [r7, #14]
 800a5fc:	f003 020f 	and.w	r2, r3, #15
 800a600:	6879      	ldr	r1, [r7, #4]
 800a602:	4613      	mov	r3, r2
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	440b      	add	r3, r1
 800a60c:	3318      	adds	r3, #24
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d117      	bne.n	800a644 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a614:	6839      	ldr	r1, [r7, #0]
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 fb7b 	bl	800ad12 <USBD_CtlError>
                  break;
 800a61c:	e054      	b.n	800a6c8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a61e:	7bbb      	ldrb	r3, [r7, #14]
 800a620:	f003 020f 	and.w	r2, r3, #15
 800a624:	6879      	ldr	r1, [r7, #4]
 800a626:	4613      	mov	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	440b      	add	r3, r1
 800a630:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d104      	bne.n	800a644 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a63a:	6839      	ldr	r1, [r7, #0]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fb68 	bl	800ad12 <USBD_CtlError>
                  break;
 800a642:	e041      	b.n	800a6c8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a644:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	da0b      	bge.n	800a664 <USBD_StdEPReq+0x240>
 800a64c:	7bbb      	ldrb	r3, [r7, #14]
 800a64e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a652:	4613      	mov	r3, r2
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	4413      	add	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	3310      	adds	r3, #16
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	4413      	add	r3, r2
 800a660:	3304      	adds	r3, #4
 800a662:	e00b      	b.n	800a67c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a664:	7bbb      	ldrb	r3, [r7, #14]
 800a666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a66a:	4613      	mov	r3, r2
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4413      	add	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	4413      	add	r3, r2
 800a67a:	3304      	adds	r3, #4
 800a67c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a67e:	7bbb      	ldrb	r3, [r7, #14]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d002      	beq.n	800a68a <USBD_StdEPReq+0x266>
 800a684:	7bbb      	ldrb	r3, [r7, #14]
 800a686:	2b80      	cmp	r3, #128	; 0x80
 800a688:	d103      	bne.n	800a692 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2200      	movs	r2, #0
 800a68e:	601a      	str	r2, [r3, #0]
 800a690:	e00e      	b.n	800a6b0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a692:	7bbb      	ldrb	r3, [r7, #14]
 800a694:	4619      	mov	r1, r3
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f004 fa3a 	bl	800eb10 <USBD_LL_IsStallEP>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d003      	beq.n	800a6aa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	601a      	str	r2, [r3, #0]
 800a6a8:	e002      	b.n	800a6b0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	2202      	movs	r2, #2
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 fb95 	bl	800ade6 <USBD_CtlSendData>
              break;
 800a6bc:	e004      	b.n	800a6c8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a6be:	6839      	ldr	r1, [r7, #0]
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 fb26 	bl	800ad12 <USBD_CtlError>
              break;
 800a6c6:	bf00      	nop
          }
          break;
 800a6c8:	e004      	b.n	800a6d4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fb20 	bl	800ad12 <USBD_CtlError>
          break;
 800a6d2:	bf00      	nop
      }
      break;
 800a6d4:	e004      	b.n	800a6e0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a6d6:	6839      	ldr	r1, [r7, #0]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fb1a 	bl	800ad12 <USBD_CtlError>
      break;
 800a6de:	bf00      	nop
  }

  return ret;
 800a6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
	...

0800a6ec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a6fe:	2300      	movs	r3, #0
 800a700:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	885b      	ldrh	r3, [r3, #2]
 800a706:	0a1b      	lsrs	r3, r3, #8
 800a708:	b29b      	uxth	r3, r3
 800a70a:	3b01      	subs	r3, #1
 800a70c:	2b06      	cmp	r3, #6
 800a70e:	f200 8128 	bhi.w	800a962 <USBD_GetDescriptor+0x276>
 800a712:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <USBD_GetDescriptor+0x2c>)
 800a714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a718:	0800a735 	.word	0x0800a735
 800a71c:	0800a74d 	.word	0x0800a74d
 800a720:	0800a78d 	.word	0x0800a78d
 800a724:	0800a963 	.word	0x0800a963
 800a728:	0800a963 	.word	0x0800a963
 800a72c:	0800a903 	.word	0x0800a903
 800a730:	0800a92f 	.word	0x0800a92f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	7c12      	ldrb	r2, [r2, #16]
 800a740:	f107 0108 	add.w	r1, r7, #8
 800a744:	4610      	mov	r0, r2
 800a746:	4798      	blx	r3
 800a748:	60f8      	str	r0, [r7, #12]
      break;
 800a74a:	e112      	b.n	800a972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	7c1b      	ldrb	r3, [r3, #16]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10d      	bne.n	800a770 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a75c:	f107 0208 	add.w	r2, r7, #8
 800a760:	4610      	mov	r0, r2
 800a762:	4798      	blx	r3
 800a764:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	3301      	adds	r3, #1
 800a76a:	2202      	movs	r2, #2
 800a76c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a76e:	e100      	b.n	800a972 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a778:	f107 0208 	add.w	r2, r7, #8
 800a77c:	4610      	mov	r0, r2
 800a77e:	4798      	blx	r3
 800a780:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	3301      	adds	r3, #1
 800a786:	2202      	movs	r2, #2
 800a788:	701a      	strb	r2, [r3, #0]
      break;
 800a78a:	e0f2      	b.n	800a972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	885b      	ldrh	r3, [r3, #2]
 800a790:	b2db      	uxtb	r3, r3
 800a792:	2b05      	cmp	r3, #5
 800a794:	f200 80ac 	bhi.w	800a8f0 <USBD_GetDescriptor+0x204>
 800a798:	a201      	add	r2, pc, #4	; (adr r2, 800a7a0 <USBD_GetDescriptor+0xb4>)
 800a79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79e:	bf00      	nop
 800a7a0:	0800a7b9 	.word	0x0800a7b9
 800a7a4:	0800a7ed 	.word	0x0800a7ed
 800a7a8:	0800a821 	.word	0x0800a821
 800a7ac:	0800a855 	.word	0x0800a855
 800a7b0:	0800a889 	.word	0x0800a889
 800a7b4:	0800a8bd 	.word	0x0800a8bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00b      	beq.n	800a7dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	7c12      	ldrb	r2, [r2, #16]
 800a7d0:	f107 0108 	add.w	r1, r7, #8
 800a7d4:	4610      	mov	r0, r2
 800a7d6:	4798      	blx	r3
 800a7d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7da:	e091      	b.n	800a900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7dc:	6839      	ldr	r1, [r7, #0]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fa97 	bl	800ad12 <USBD_CtlError>
            err++;
 800a7e4:	7afb      	ldrb	r3, [r7, #11]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a7ea:	e089      	b.n	800a900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00b      	beq.n	800a810 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	7c12      	ldrb	r2, [r2, #16]
 800a804:	f107 0108 	add.w	r1, r7, #8
 800a808:	4610      	mov	r0, r2
 800a80a:	4798      	blx	r3
 800a80c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a80e:	e077      	b.n	800a900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fa7d 	bl	800ad12 <USBD_CtlError>
            err++;
 800a818:	7afb      	ldrb	r3, [r7, #11]
 800a81a:	3301      	adds	r3, #1
 800a81c:	72fb      	strb	r3, [r7, #11]
          break;
 800a81e:	e06f      	b.n	800a900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00b      	beq.n	800a844 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	7c12      	ldrb	r2, [r2, #16]
 800a838:	f107 0108 	add.w	r1, r7, #8
 800a83c:	4610      	mov	r0, r2
 800a83e:	4798      	blx	r3
 800a840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a842:	e05d      	b.n	800a900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a844:	6839      	ldr	r1, [r7, #0]
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 fa63 	bl	800ad12 <USBD_CtlError>
            err++;
 800a84c:	7afb      	ldrb	r3, [r7, #11]
 800a84e:	3301      	adds	r3, #1
 800a850:	72fb      	strb	r3, [r7, #11]
          break;
 800a852:	e055      	b.n	800a900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00b      	beq.n	800a878 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a866:	691b      	ldr	r3, [r3, #16]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	7c12      	ldrb	r2, [r2, #16]
 800a86c:	f107 0108 	add.w	r1, r7, #8
 800a870:	4610      	mov	r0, r2
 800a872:	4798      	blx	r3
 800a874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a876:	e043      	b.n	800a900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fa49 	bl	800ad12 <USBD_CtlError>
            err++;
 800a880:	7afb      	ldrb	r3, [r7, #11]
 800a882:	3301      	adds	r3, #1
 800a884:	72fb      	strb	r3, [r7, #11]
          break;
 800a886:	e03b      	b.n	800a900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a88e:	695b      	ldr	r3, [r3, #20]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00b      	beq.n	800a8ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a89a:	695b      	ldr	r3, [r3, #20]
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	7c12      	ldrb	r2, [r2, #16]
 800a8a0:	f107 0108 	add.w	r1, r7, #8
 800a8a4:	4610      	mov	r0, r2
 800a8a6:	4798      	blx	r3
 800a8a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8aa:	e029      	b.n	800a900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8ac:	6839      	ldr	r1, [r7, #0]
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 fa2f 	bl	800ad12 <USBD_CtlError>
            err++;
 800a8b4:	7afb      	ldrb	r3, [r7, #11]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	72fb      	strb	r3, [r7, #11]
          break;
 800a8ba:	e021      	b.n	800a900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00b      	beq.n	800a8e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a8ce:	699b      	ldr	r3, [r3, #24]
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	7c12      	ldrb	r2, [r2, #16]
 800a8d4:	f107 0108 	add.w	r1, r7, #8
 800a8d8:	4610      	mov	r0, r2
 800a8da:	4798      	blx	r3
 800a8dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8de:	e00f      	b.n	800a900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8e0:	6839      	ldr	r1, [r7, #0]
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fa15 	bl	800ad12 <USBD_CtlError>
            err++;
 800a8e8:	7afb      	ldrb	r3, [r7, #11]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	72fb      	strb	r3, [r7, #11]
          break;
 800a8ee:	e007      	b.n	800a900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a8f0:	6839      	ldr	r1, [r7, #0]
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fa0d 	bl	800ad12 <USBD_CtlError>
          err++;
 800a8f8:	7afb      	ldrb	r3, [r7, #11]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a8fe:	e038      	b.n	800a972 <USBD_GetDescriptor+0x286>
 800a900:	e037      	b.n	800a972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	7c1b      	ldrb	r3, [r3, #16]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d109      	bne.n	800a91e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a912:	f107 0208 	add.w	r2, r7, #8
 800a916:	4610      	mov	r0, r2
 800a918:	4798      	blx	r3
 800a91a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a91c:	e029      	b.n	800a972 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a91e:	6839      	ldr	r1, [r7, #0]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 f9f6 	bl	800ad12 <USBD_CtlError>
        err++;
 800a926:	7afb      	ldrb	r3, [r7, #11]
 800a928:	3301      	adds	r3, #1
 800a92a:	72fb      	strb	r3, [r7, #11]
      break;
 800a92c:	e021      	b.n	800a972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	7c1b      	ldrb	r3, [r3, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10d      	bne.n	800a952 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93e:	f107 0208 	add.w	r2, r7, #8
 800a942:	4610      	mov	r0, r2
 800a944:	4798      	blx	r3
 800a946:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	3301      	adds	r3, #1
 800a94c:	2207      	movs	r2, #7
 800a94e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a950:	e00f      	b.n	800a972 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a952:	6839      	ldr	r1, [r7, #0]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f9dc 	bl	800ad12 <USBD_CtlError>
        err++;
 800a95a:	7afb      	ldrb	r3, [r7, #11]
 800a95c:	3301      	adds	r3, #1
 800a95e:	72fb      	strb	r3, [r7, #11]
      break;
 800a960:	e007      	b.n	800a972 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a962:	6839      	ldr	r1, [r7, #0]
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 f9d4 	bl	800ad12 <USBD_CtlError>
      err++;
 800a96a:	7afb      	ldrb	r3, [r7, #11]
 800a96c:	3301      	adds	r3, #1
 800a96e:	72fb      	strb	r3, [r7, #11]
      break;
 800a970:	bf00      	nop
  }

  if (err != 0U)
 800a972:	7afb      	ldrb	r3, [r7, #11]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d11c      	bne.n	800a9b2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a978:	893b      	ldrh	r3, [r7, #8]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d011      	beq.n	800a9a2 <USBD_GetDescriptor+0x2b6>
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	88db      	ldrh	r3, [r3, #6]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00d      	beq.n	800a9a2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	88da      	ldrh	r2, [r3, #6]
 800a98a:	893b      	ldrh	r3, [r7, #8]
 800a98c:	4293      	cmp	r3, r2
 800a98e:	bf28      	it	cs
 800a990:	4613      	movcs	r3, r2
 800a992:	b29b      	uxth	r3, r3
 800a994:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a996:	893b      	ldrh	r3, [r7, #8]
 800a998:	461a      	mov	r2, r3
 800a99a:	68f9      	ldr	r1, [r7, #12]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fa22 	bl	800ade6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	88db      	ldrh	r3, [r3, #6]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d104      	bne.n	800a9b4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fa79 	bl	800aea2 <USBD_CtlSendStatus>
 800a9b0:	e000      	b.n	800a9b4 <USBD_GetDescriptor+0x2c8>
    return;
 800a9b2:	bf00      	nop
    }
  }
}
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop

0800a9bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	889b      	ldrh	r3, [r3, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d130      	bne.n	800aa30 <USBD_SetAddress+0x74>
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	88db      	ldrh	r3, [r3, #6]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d12c      	bne.n	800aa30 <USBD_SetAddress+0x74>
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	885b      	ldrh	r3, [r3, #2]
 800a9da:	2b7f      	cmp	r3, #127	; 0x7f
 800a9dc:	d828      	bhi.n	800aa30 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	885b      	ldrh	r3, [r3, #2]
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9f0:	2b03      	cmp	r3, #3
 800a9f2:	d104      	bne.n	800a9fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a9f4:	6839      	ldr	r1, [r7, #0]
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f98b 	bl	800ad12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9fc:	e01d      	b.n	800aa3a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	7bfa      	ldrb	r2, [r7, #15]
 800aa02:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aa06:	7bfb      	ldrb	r3, [r7, #15]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f004 f8ac 	bl	800eb68 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 fa46 	bl	800aea2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aa16:	7bfb      	ldrb	r3, [r7, #15]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d004      	beq.n	800aa26 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2202      	movs	r2, #2
 800aa20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa24:	e009      	b.n	800aa3a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa2e:	e004      	b.n	800aa3a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 f96d 	bl	800ad12 <USBD_CtlError>
  }
}
 800aa38:	bf00      	nop
 800aa3a:	bf00      	nop
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
	...

0800aa44 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	885b      	ldrh	r3, [r3, #2]
 800aa52:	b2da      	uxtb	r2, r3
 800aa54:	4b41      	ldr	r3, [pc, #260]	; (800ab5c <USBD_SetConfig+0x118>)
 800aa56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa58:	4b40      	ldr	r3, [pc, #256]	; (800ab5c <USBD_SetConfig+0x118>)
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d904      	bls.n	800aa6a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800aa60:	6839      	ldr	r1, [r7, #0]
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 f955 	bl	800ad12 <USBD_CtlError>
 800aa68:	e075      	b.n	800ab56 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d002      	beq.n	800aa7a <USBD_SetConfig+0x36>
 800aa74:	2b03      	cmp	r3, #3
 800aa76:	d023      	beq.n	800aac0 <USBD_SetConfig+0x7c>
 800aa78:	e062      	b.n	800ab40 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800aa7a:	4b38      	ldr	r3, [pc, #224]	; (800ab5c <USBD_SetConfig+0x118>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d01a      	beq.n	800aab8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800aa82:	4b36      	ldr	r3, [pc, #216]	; (800ab5c <USBD_SetConfig+0x118>)
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	461a      	mov	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2203      	movs	r2, #3
 800aa90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aa94:	4b31      	ldr	r3, [pc, #196]	; (800ab5c <USBD_SetConfig+0x118>)
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7ff f9e7 	bl	8009e6e <USBD_SetClassConfig>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d104      	bne.n	800aab0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800aaa6:	6839      	ldr	r1, [r7, #0]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f932 	bl	800ad12 <USBD_CtlError>
            return;
 800aaae:	e052      	b.n	800ab56 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f9f6 	bl	800aea2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aab6:	e04e      	b.n	800ab56 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 f9f2 	bl	800aea2 <USBD_CtlSendStatus>
        break;
 800aabe:	e04a      	b.n	800ab56 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800aac0:	4b26      	ldr	r3, [pc, #152]	; (800ab5c <USBD_SetConfig+0x118>)
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d112      	bne.n	800aaee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2202      	movs	r2, #2
 800aacc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800aad0:	4b22      	ldr	r3, [pc, #136]	; (800ab5c <USBD_SetConfig+0x118>)
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	461a      	mov	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800aada:	4b20      	ldr	r3, [pc, #128]	; (800ab5c <USBD_SetConfig+0x118>)
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7ff f9e3 	bl	8009eac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f9db 	bl	800aea2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aaec:	e033      	b.n	800ab56 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800aaee:	4b1b      	ldr	r3, [pc, #108]	; (800ab5c <USBD_SetConfig+0x118>)
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d01d      	beq.n	800ab38 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	4619      	mov	r1, r3
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff f9d1 	bl	8009eac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ab0a:	4b14      	ldr	r3, [pc, #80]	; (800ab5c <USBD_SetConfig+0x118>)
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ab14:	4b11      	ldr	r3, [pc, #68]	; (800ab5c <USBD_SetConfig+0x118>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	4619      	mov	r1, r3
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7ff f9a7 	bl	8009e6e <USBD_SetClassConfig>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	d104      	bne.n	800ab30 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ab26:	6839      	ldr	r1, [r7, #0]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f8f2 	bl	800ad12 <USBD_CtlError>
            return;
 800ab2e:	e012      	b.n	800ab56 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f9b6 	bl	800aea2 <USBD_CtlSendStatus>
        break;
 800ab36:	e00e      	b.n	800ab56 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 f9b2 	bl	800aea2 <USBD_CtlSendStatus>
        break;
 800ab3e:	e00a      	b.n	800ab56 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ab40:	6839      	ldr	r1, [r7, #0]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 f8e5 	bl	800ad12 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ab48:	4b04      	ldr	r3, [pc, #16]	; (800ab5c <USBD_SetConfig+0x118>)
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f7ff f9ac 	bl	8009eac <USBD_ClrClassConfig>
        break;
 800ab54:	bf00      	nop
    }
  }
}
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	200001b3 	.word	0x200001b3

0800ab60 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	88db      	ldrh	r3, [r3, #6]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d004      	beq.n	800ab7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ab72:	6839      	ldr	r1, [r7, #0]
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f8cc 	bl	800ad12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ab7a:	e022      	b.n	800abc2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	dc02      	bgt.n	800ab8c <USBD_GetConfig+0x2c>
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	dc03      	bgt.n	800ab92 <USBD_GetConfig+0x32>
 800ab8a:	e015      	b.n	800abb8 <USBD_GetConfig+0x58>
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d00b      	beq.n	800aba8 <USBD_GetConfig+0x48>
 800ab90:	e012      	b.n	800abb8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f920 	bl	800ade6 <USBD_CtlSendData>
        break;
 800aba6:	e00c      	b.n	800abc2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3304      	adds	r3, #4
 800abac:	2201      	movs	r2, #1
 800abae:	4619      	mov	r1, r3
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 f918 	bl	800ade6 <USBD_CtlSendData>
        break;
 800abb6:	e004      	b.n	800abc2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f8a9 	bl	800ad12 <USBD_CtlError>
        break;
 800abc0:	bf00      	nop
}
 800abc2:	bf00      	nop
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b082      	sub	sp, #8
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abda:	3b01      	subs	r3, #1
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d81e      	bhi.n	800ac1e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	88db      	ldrh	r3, [r3, #6]
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d004      	beq.n	800abf2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800abe8:	6839      	ldr	r1, [r7, #0]
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 f891 	bl	800ad12 <USBD_CtlError>
        break;
 800abf0:	e01a      	b.n	800ac28 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2201      	movs	r2, #1
 800abf6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d005      	beq.n	800ac0e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	f043 0202 	orr.w	r2, r3, #2
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	330c      	adds	r3, #12
 800ac12:	2202      	movs	r2, #2
 800ac14:	4619      	mov	r1, r3
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 f8e5 	bl	800ade6 <USBD_CtlSendData>
      break;
 800ac1c:	e004      	b.n	800ac28 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ac1e:	6839      	ldr	r1, [r7, #0]
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 f876 	bl	800ad12 <USBD_CtlError>
      break;
 800ac26:	bf00      	nop
  }
}
 800ac28:	bf00      	nop
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	885b      	ldrh	r3, [r3, #2]
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d106      	bne.n	800ac50 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 f929 	bl	800aea2 <USBD_CtlSendStatus>
  }
}
 800ac50:	bf00      	nop
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d80b      	bhi.n	800ac86 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	885b      	ldrh	r3, [r3, #2]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d10c      	bne.n	800ac90 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 f90f 	bl	800aea2 <USBD_CtlSendStatus>
      }
      break;
 800ac84:	e004      	b.n	800ac90 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 f842 	bl	800ad12 <USBD_CtlError>
      break;
 800ac8e:	e000      	b.n	800ac92 <USBD_ClrFeature+0x3a>
      break;
 800ac90:	bf00      	nop
  }
}
 800ac92:	bf00      	nop
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b083      	sub	sp, #12
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	781a      	ldrb	r2, [r3, #0]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	785a      	ldrb	r2, [r3, #1]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	3302      	adds	r3, #2
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	b29a      	uxth	r2, r3
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	3303      	adds	r3, #3
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	021b      	lsls	r3, r3, #8
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	4413      	add	r3, r2
 800acca:	b29a      	uxth	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	3304      	adds	r3, #4
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	3305      	adds	r3, #5
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	b29b      	uxth	r3, r3
 800ace0:	021b      	lsls	r3, r3, #8
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	4413      	add	r3, r2
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	3306      	adds	r3, #6
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	b29a      	uxth	r2, r3
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	3307      	adds	r3, #7
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	021b      	lsls	r3, r3, #8
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	4413      	add	r3, r2
 800ad02:	b29a      	uxth	r2, r3
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	80da      	strh	r2, [r3, #6]

}
 800ad08:	bf00      	nop
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bc80      	pop	{r7}
 800ad10:	4770      	bx	lr

0800ad12 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b082      	sub	sp, #8
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ad1c:	2180      	movs	r1, #128	; 0x80
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f003 feb8 	bl	800ea94 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ad24:	2100      	movs	r1, #0
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f003 feb4 	bl	800ea94 <USBD_LL_StallEP>
}
 800ad2c:	bf00      	nop
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ad40:	2300      	movs	r3, #0
 800ad42:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d032      	beq.n	800adb0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 f834 	bl	800adb8 <USBD_GetLen>
 800ad50:	4603      	mov	r3, r0
 800ad52:	3301      	adds	r3, #1
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	005b      	lsls	r3, r3, #1
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ad5e:	7dfb      	ldrb	r3, [r7, #23]
 800ad60:	1c5a      	adds	r2, r3, #1
 800ad62:	75fa      	strb	r2, [r7, #23]
 800ad64:	461a      	mov	r2, r3
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	4413      	add	r3, r2
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	7812      	ldrb	r2, [r2, #0]
 800ad6e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ad70:	7dfb      	ldrb	r3, [r7, #23]
 800ad72:	1c5a      	adds	r2, r3, #1
 800ad74:	75fa      	strb	r2, [r7, #23]
 800ad76:	461a      	mov	r2, r3
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	2203      	movs	r2, #3
 800ad7e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ad80:	e012      	b.n	800ada8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	1c5a      	adds	r2, r3, #1
 800ad86:	60fa      	str	r2, [r7, #12]
 800ad88:	7dfa      	ldrb	r2, [r7, #23]
 800ad8a:	1c51      	adds	r1, r2, #1
 800ad8c:	75f9      	strb	r1, [r7, #23]
 800ad8e:	4611      	mov	r1, r2
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	440a      	add	r2, r1
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ad98:	7dfb      	ldrb	r3, [r7, #23]
 800ad9a:	1c5a      	adds	r2, r3, #1
 800ad9c:	75fa      	strb	r2, [r7, #23]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	4413      	add	r3, r2
 800ada4:	2200      	movs	r2, #0
 800ada6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1e8      	bne.n	800ad82 <USBD_GetString+0x4e>
    }
  }
}
 800adb0:	bf00      	nop
 800adb2:	3718      	adds	r7, #24
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800adc0:	2300      	movs	r3, #0
 800adc2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800adc4:	e005      	b.n	800add2 <USBD_GetLen+0x1a>
  {
    len++;
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
 800adc8:	3301      	adds	r3, #1
 800adca:	73fb      	strb	r3, [r7, #15]
    buf++;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	3301      	adds	r3, #1
 800add0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1f5      	bne.n	800adc6 <USBD_GetLen+0xe>
  }

  return len;
 800adda:	7bfb      	ldrb	r3, [r7, #15]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3714      	adds	r7, #20
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bc80      	pop	{r7}
 800ade4:	4770      	bx	lr

0800ade6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b084      	sub	sp, #16
 800adea:	af00      	add	r7, sp, #0
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	60b9      	str	r1, [r7, #8]
 800adf0:	4613      	mov	r3, r2
 800adf2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2202      	movs	r2, #2
 800adf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800adfc:	88fa      	ldrh	r2, [r7, #6]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ae02:	88fa      	ldrh	r2, [r7, #6]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae08:	88fb      	ldrh	r3, [r7, #6]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	f003 fec9 	bl	800eba6 <USBD_LL_Transmit>

  return USBD_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b084      	sub	sp, #16
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	60f8      	str	r0, [r7, #12]
 800ae26:	60b9      	str	r1, [r7, #8]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae2c:	88fb      	ldrh	r3, [r7, #6]
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	2100      	movs	r1, #0
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f003 feb7 	bl	800eba6 <USBD_LL_Transmit>

  return USBD_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b084      	sub	sp, #16
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	60f8      	str	r0, [r7, #12]
 800ae4a:	60b9      	str	r1, [r7, #8]
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2203      	movs	r2, #3
 800ae54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ae58:	88fa      	ldrh	r2, [r7, #6]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ae60:	88fa      	ldrh	r2, [r7, #6]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae68:	88fb      	ldrh	r3, [r7, #6]
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f003 febc 	bl	800ebec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b084      	sub	sp, #16
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	60f8      	str	r0, [r7, #12]
 800ae86:	60b9      	str	r1, [r7, #8]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae8c:	88fb      	ldrh	r3, [r7, #6]
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	2100      	movs	r1, #0
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	f003 feaa 	bl	800ebec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b082      	sub	sp, #8
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2204      	movs	r2, #4
 800aeae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f003 fe74 	bl	800eba6 <USBD_LL_Transmit>

  return USBD_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2205      	movs	r2, #5
 800aed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aed8:	2300      	movs	r3, #0
 800aeda:	2200      	movs	r2, #0
 800aedc:	2100      	movs	r1, #0
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f003 fe84 	bl	800ebec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
	...

0800aef0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aef6:	f3ef 8305 	mrs	r3, IPSR
 800aefa:	60bb      	str	r3, [r7, #8]
  return(result);
 800aefc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10f      	bne.n	800af22 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af02:	f3ef 8310 	mrs	r3, PRIMASK
 800af06:	607b      	str	r3, [r7, #4]
  return(result);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d109      	bne.n	800af22 <osKernelInitialize+0x32>
 800af0e:	4b10      	ldr	r3, [pc, #64]	; (800af50 <osKernelInitialize+0x60>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2b02      	cmp	r3, #2
 800af14:	d109      	bne.n	800af2a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af16:	f3ef 8311 	mrs	r3, BASEPRI
 800af1a:	603b      	str	r3, [r7, #0]
  return(result);
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d003      	beq.n	800af2a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800af22:	f06f 0305 	mvn.w	r3, #5
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	e00c      	b.n	800af44 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800af2a:	4b09      	ldr	r3, [pc, #36]	; (800af50 <osKernelInitialize+0x60>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d105      	bne.n	800af3e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800af32:	4b07      	ldr	r3, [pc, #28]	; (800af50 <osKernelInitialize+0x60>)
 800af34:	2201      	movs	r2, #1
 800af36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800af38:	2300      	movs	r3, #0
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	e002      	b.n	800af44 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800af3e:	f04f 33ff 	mov.w	r3, #4294967295
 800af42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800af44:	68fb      	ldr	r3, [r7, #12]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3714      	adds	r7, #20
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bc80      	pop	{r7}
 800af4e:	4770      	bx	lr
 800af50:	200001b4 	.word	0x200001b4

0800af54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af5a:	f3ef 8305 	mrs	r3, IPSR
 800af5e:	60bb      	str	r3, [r7, #8]
  return(result);
 800af60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af62:	2b00      	cmp	r3, #0
 800af64:	d10f      	bne.n	800af86 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af66:	f3ef 8310 	mrs	r3, PRIMASK
 800af6a:	607b      	str	r3, [r7, #4]
  return(result);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d109      	bne.n	800af86 <osKernelStart+0x32>
 800af72:	4b11      	ldr	r3, [pc, #68]	; (800afb8 <osKernelStart+0x64>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2b02      	cmp	r3, #2
 800af78:	d109      	bne.n	800af8e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af7a:	f3ef 8311 	mrs	r3, BASEPRI
 800af7e:	603b      	str	r3, [r7, #0]
  return(result);
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d003      	beq.n	800af8e <osKernelStart+0x3a>
    stat = osErrorISR;
 800af86:	f06f 0305 	mvn.w	r3, #5
 800af8a:	60fb      	str	r3, [r7, #12]
 800af8c:	e00e      	b.n	800afac <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800af8e:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <osKernelStart+0x64>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b01      	cmp	r3, #1
 800af94:	d107      	bne.n	800afa6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800af96:	4b08      	ldr	r3, [pc, #32]	; (800afb8 <osKernelStart+0x64>)
 800af98:	2202      	movs	r2, #2
 800af9a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800af9c:	f001 fbc6 	bl	800c72c <vTaskStartScheduler>
      stat = osOK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	60fb      	str	r3, [r7, #12]
 800afa4:	e002      	b.n	800afac <osKernelStart+0x58>
    } else {
      stat = osError;
 800afa6:	f04f 33ff 	mov.w	r3, #4294967295
 800afaa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800afac:	68fb      	ldr	r3, [r7, #12]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	200001b4 	.word	0x200001b4

0800afbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b092      	sub	sp, #72	; 0x48
 800afc0:	af04      	add	r7, sp, #16
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800afc8:	2300      	movs	r3, #0
 800afca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afcc:	f3ef 8305 	mrs	r3, IPSR
 800afd0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800afd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f040 8094 	bne.w	800b102 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afda:	f3ef 8310 	mrs	r3, PRIMASK
 800afde:	623b      	str	r3, [r7, #32]
  return(result);
 800afe0:	6a3b      	ldr	r3, [r7, #32]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f040 808d 	bne.w	800b102 <osThreadNew+0x146>
 800afe8:	4b48      	ldr	r3, [pc, #288]	; (800b10c <osThreadNew+0x150>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b02      	cmp	r3, #2
 800afee:	d106      	bne.n	800affe <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aff0:	f3ef 8311 	mrs	r3, BASEPRI
 800aff4:	61fb      	str	r3, [r7, #28]
  return(result);
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f040 8082 	bne.w	800b102 <osThreadNew+0x146>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d07e      	beq.n	800b102 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800b004:	2380      	movs	r3, #128	; 0x80
 800b006:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800b008:	2318      	movs	r3, #24
 800b00a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800b00c:	2300      	movs	r3, #0
 800b00e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800b010:	f107 031b 	add.w	r3, r7, #27
 800b014:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800b016:	f04f 33ff 	mov.w	r3, #4294967295
 800b01a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d045      	beq.n	800b0ae <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d002      	beq.n	800b030 <osThreadNew+0x74>
        name = attr->name;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	699b      	ldr	r3, [r3, #24]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d002      	beq.n	800b03e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b040:	2b00      	cmp	r3, #0
 800b042:	d008      	beq.n	800b056 <osThreadNew+0x9a>
 800b044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b046:	2b38      	cmp	r3, #56	; 0x38
 800b048:	d805      	bhi.n	800b056 <osThreadNew+0x9a>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	f003 0301 	and.w	r3, r3, #1
 800b052:	2b00      	cmp	r3, #0
 800b054:	d001      	beq.n	800b05a <osThreadNew+0x9e>
        return (NULL);
 800b056:	2300      	movs	r3, #0
 800b058:	e054      	b.n	800b104 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	695b      	ldr	r3, [r3, #20]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d003      	beq.n	800b06a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	089b      	lsrs	r3, r3, #2
 800b068:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00e      	beq.n	800b090 <osThreadNew+0xd4>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	2b5b      	cmp	r3, #91	; 0x5b
 800b078:	d90a      	bls.n	800b090 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d006      	beq.n	800b090 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d002      	beq.n	800b090 <osThreadNew+0xd4>
        mem = 1;
 800b08a:	2301      	movs	r3, #1
 800b08c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b08e:	e010      	b.n	800b0b2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d10c      	bne.n	800b0b2 <osThreadNew+0xf6>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d108      	bne.n	800b0b2 <osThreadNew+0xf6>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d104      	bne.n	800b0b2 <osThreadNew+0xf6>
          mem = 0;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0ac:	e001      	b.n	800b0b2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800b0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d110      	bne.n	800b0da <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b0c0:	9202      	str	r2, [sp, #8]
 800b0c2:	9301      	str	r3, [sp, #4]
 800b0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c6:	9300      	str	r3, [sp, #0]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b0ce:	68f8      	ldr	r0, [r7, #12]
 800b0d0:	f001 f8e2 	bl	800c298 <xTaskCreateStatic>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	617b      	str	r3, [r7, #20]
 800b0d8:	e013      	b.n	800b102 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800b0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d110      	bne.n	800b102 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	f107 0314 	add.w	r3, r7, #20
 800b0e8:	9301      	str	r3, [sp, #4]
 800b0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ec:	9300      	str	r3, [sp, #0]
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f001 f92c 	bl	800c350 <xTaskCreate>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d001      	beq.n	800b102 <osThreadNew+0x146>
          hTask = NULL;
 800b0fe:	2300      	movs	r3, #0
 800b100:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b102:	697b      	ldr	r3, [r7, #20]
}
 800b104:	4618      	mov	r0, r3
 800b106:	3738      	adds	r7, #56	; 0x38
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	200001b4 	.word	0x200001b4

0800b110 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b118:	f3ef 8305 	mrs	r3, IPSR
 800b11c:	613b      	str	r3, [r7, #16]
  return(result);
 800b11e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b120:	2b00      	cmp	r3, #0
 800b122:	d10f      	bne.n	800b144 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b124:	f3ef 8310 	mrs	r3, PRIMASK
 800b128:	60fb      	str	r3, [r7, #12]
  return(result);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d109      	bne.n	800b144 <osDelay+0x34>
 800b130:	4b0d      	ldr	r3, [pc, #52]	; (800b168 <osDelay+0x58>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b02      	cmp	r3, #2
 800b136:	d109      	bne.n	800b14c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b138:	f3ef 8311 	mrs	r3, BASEPRI
 800b13c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d003      	beq.n	800b14c <osDelay+0x3c>
    stat = osErrorISR;
 800b144:	f06f 0305 	mvn.w	r3, #5
 800b148:	617b      	str	r3, [r7, #20]
 800b14a:	e007      	b.n	800b15c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d002      	beq.n	800b15c <osDelay+0x4c>
      vTaskDelay(ticks);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f001 fab4 	bl	800c6c4 <vTaskDelay>
    }
  }

  return (stat);
 800b15c:	697b      	ldr	r3, [r7, #20]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	200001b4 	.word	0x200001b4

0800b16c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b08a      	sub	sp, #40	; 0x28
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b174:	2300      	movs	r3, #0
 800b176:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b178:	f3ef 8305 	mrs	r3, IPSR
 800b17c:	613b      	str	r3, [r7, #16]
  return(result);
 800b17e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800b180:	2b00      	cmp	r3, #0
 800b182:	f040 8085 	bne.w	800b290 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b186:	f3ef 8310 	mrs	r3, PRIMASK
 800b18a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d17e      	bne.n	800b290 <osMutexNew+0x124>
 800b192:	4b42      	ldr	r3, [pc, #264]	; (800b29c <osMutexNew+0x130>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2b02      	cmp	r3, #2
 800b198:	d105      	bne.n	800b1a6 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b19a:	f3ef 8311 	mrs	r3, BASEPRI
 800b19e:	60bb      	str	r3, [r7, #8]
  return(result);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d174      	bne.n	800b290 <osMutexNew+0x124>
    if (attr != NULL) {
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d003      	beq.n	800b1b4 <osMutexNew+0x48>
      type = attr->attr_bits;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	623b      	str	r3, [r7, #32]
 800b1b2:	e001      	b.n	800b1b8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b1b8:	6a3b      	ldr	r3, [r7, #32]
 800b1ba:	f003 0301 	and.w	r3, r3, #1
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d002      	beq.n	800b1c8 <osMutexNew+0x5c>
      rmtx = 1U;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	61fb      	str	r3, [r7, #28]
 800b1c6:	e001      	b.n	800b1cc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	f003 0308 	and.w	r3, r3, #8
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d15c      	bne.n	800b290 <osMutexNew+0x124>
      mem = -1;
 800b1d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1da:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d015      	beq.n	800b20e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d006      	beq.n	800b1f8 <osMutexNew+0x8c>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	2b4f      	cmp	r3, #79	; 0x4f
 800b1f0:	d902      	bls.n	800b1f8 <osMutexNew+0x8c>
          mem = 1;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	61bb      	str	r3, [r7, #24]
 800b1f6:	e00c      	b.n	800b212 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d108      	bne.n	800b212 <osMutexNew+0xa6>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d104      	bne.n	800b212 <osMutexNew+0xa6>
            mem = 0;
 800b208:	2300      	movs	r3, #0
 800b20a:	61bb      	str	r3, [r7, #24]
 800b20c:	e001      	b.n	800b212 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800b20e:	2300      	movs	r3, #0
 800b210:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b212:	69bb      	ldr	r3, [r7, #24]
 800b214:	2b01      	cmp	r3, #1
 800b216:	d112      	bne.n	800b23e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d007      	beq.n	800b22e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	4619      	mov	r1, r3
 800b224:	2004      	movs	r0, #4
 800b226:	f000 fb15 	bl	800b854 <xQueueCreateMutexStatic>
 800b22a:	6278      	str	r0, [r7, #36]	; 0x24
 800b22c:	e016      	b.n	800b25c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	4619      	mov	r1, r3
 800b234:	2001      	movs	r0, #1
 800b236:	f000 fb0d 	bl	800b854 <xQueueCreateMutexStatic>
 800b23a:	6278      	str	r0, [r7, #36]	; 0x24
 800b23c:	e00e      	b.n	800b25c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d10b      	bne.n	800b25c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d004      	beq.n	800b254 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b24a:	2004      	movs	r0, #4
 800b24c:	f000 faea 	bl	800b824 <xQueueCreateMutex>
 800b250:	6278      	str	r0, [r7, #36]	; 0x24
 800b252:	e003      	b.n	800b25c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800b254:	2001      	movs	r0, #1
 800b256:	f000 fae5 	bl	800b824 <xQueueCreateMutex>
 800b25a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00c      	beq.n	800b27c <osMutexNew+0x110>
        if (attr != NULL) {
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d003      	beq.n	800b270 <osMutexNew+0x104>
          name = attr->name;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	617b      	str	r3, [r7, #20]
 800b26e:	e001      	b.n	800b274 <osMutexNew+0x108>
        } else {
          name = NULL;
 800b270:	2300      	movs	r3, #0
 800b272:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800b274:	6979      	ldr	r1, [r7, #20]
 800b276:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b278:	f000 ffb2 	bl	800c1e0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d006      	beq.n	800b290 <osMutexNew+0x124>
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d003      	beq.n	800b290 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28a:	f043 0301 	orr.w	r3, r3, #1
 800b28e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b292:	4618      	mov	r0, r3
 800b294:	3728      	adds	r7, #40	; 0x28
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	200001b4 	.word	0x200001b4

0800b2a0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b08c      	sub	sp, #48	; 0x30
 800b2a4:	af02      	add	r7, sp, #8
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2b0:	f3ef 8305 	mrs	r3, IPSR
 800b2b4:	61bb      	str	r3, [r7, #24]
  return(result);
 800b2b6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d16f      	bne.n	800b39c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2bc:	f3ef 8310 	mrs	r3, PRIMASK
 800b2c0:	617b      	str	r3, [r7, #20]
  return(result);
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d169      	bne.n	800b39c <osMessageQueueNew+0xfc>
 800b2c8:	4b37      	ldr	r3, [pc, #220]	; (800b3a8 <osMessageQueueNew+0x108>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d105      	bne.n	800b2dc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b2d0:	f3ef 8311 	mrs	r3, BASEPRI
 800b2d4:	613b      	str	r3, [r7, #16]
  return(result);
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d15f      	bne.n	800b39c <osMessageQueueNew+0xfc>
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d05c      	beq.n	800b39c <osMessageQueueNew+0xfc>
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d059      	beq.n	800b39c <osMessageQueueNew+0xfc>
    mem = -1;
 800b2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d029      	beq.n	800b348 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d012      	beq.n	800b322 <osMessageQueueNew+0x82>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	2b4f      	cmp	r3, #79	; 0x4f
 800b302:	d90e      	bls.n	800b322 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00a      	beq.n	800b322 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	695a      	ldr	r2, [r3, #20]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	68b9      	ldr	r1, [r7, #8]
 800b314:	fb01 f303 	mul.w	r3, r1, r3
 800b318:	429a      	cmp	r2, r3
 800b31a:	d302      	bcc.n	800b322 <osMessageQueueNew+0x82>
        mem = 1;
 800b31c:	2301      	movs	r3, #1
 800b31e:	623b      	str	r3, [r7, #32]
 800b320:	e014      	b.n	800b34c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d110      	bne.n	800b34c <osMessageQueueNew+0xac>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10c      	bne.n	800b34c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b336:	2b00      	cmp	r3, #0
 800b338:	d108      	bne.n	800b34c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d104      	bne.n	800b34c <osMessageQueueNew+0xac>
          mem = 0;
 800b342:	2300      	movs	r3, #0
 800b344:	623b      	str	r3, [r7, #32]
 800b346:	e001      	b.n	800b34c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800b348:	2300      	movs	r3, #0
 800b34a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b34c:	6a3b      	ldr	r3, [r7, #32]
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d10b      	bne.n	800b36a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	691a      	ldr	r2, [r3, #16]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	2100      	movs	r1, #0
 800b35c:	9100      	str	r1, [sp, #0]
 800b35e:	68b9      	ldr	r1, [r7, #8]
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	f000 f96d 	bl	800b640 <xQueueGenericCreateStatic>
 800b366:	6278      	str	r0, [r7, #36]	; 0x24
 800b368:	e008      	b.n	800b37c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800b36a:	6a3b      	ldr	r3, [r7, #32]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d105      	bne.n	800b37c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b370:	2200      	movs	r2, #0
 800b372:	68b9      	ldr	r1, [r7, #8]
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f000 f9da 	bl	800b72e <xQueueGenericCreate>
 800b37a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00c      	beq.n	800b39c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d003      	beq.n	800b390 <osMessageQueueNew+0xf0>
        name = attr->name;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	61fb      	str	r3, [r7, #28]
 800b38e:	e001      	b.n	800b394 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800b390:	2300      	movs	r3, #0
 800b392:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800b394:	69f9      	ldr	r1, [r7, #28]
 800b396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b398:	f000 ff22 	bl	800c1e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3728      	adds	r7, #40	; 0x28
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	200001b4 	.word	0x200001b4

0800b3ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	4a06      	ldr	r2, [pc, #24]	; (800b3d4 <vApplicationGetIdleTaskMemory+0x28>)
 800b3bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	4a05      	ldr	r2, [pc, #20]	; (800b3d8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b3c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2280      	movs	r2, #128	; 0x80
 800b3c8:	601a      	str	r2, [r3, #0]
}
 800b3ca:	bf00      	nop
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bc80      	pop	{r7}
 800b3d2:	4770      	bx	lr
 800b3d4:	200001b8 	.word	0x200001b8
 800b3d8:	20000214 	.word	0x20000214

0800b3dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	4a07      	ldr	r2, [pc, #28]	; (800b408 <vApplicationGetTimerTaskMemory+0x2c>)
 800b3ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	4a06      	ldr	r2, [pc, #24]	; (800b40c <vApplicationGetTimerTaskMemory+0x30>)
 800b3f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b3fa:	601a      	str	r2, [r3, #0]
}
 800b3fc:	bf00      	nop
 800b3fe:	3714      	adds	r7, #20
 800b400:	46bd      	mov	sp, r7
 800b402:	bc80      	pop	{r7}
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	20000414 	.word	0x20000414
 800b40c:	20000470 	.word	0x20000470

0800b410 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f103 0208 	add.w	r2, r3, #8
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f04f 32ff 	mov.w	r2, #4294967295
 800b428:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f103 0208 	add.w	r2, r3, #8
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f103 0208 	add.w	r2, r3, #8
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b444:	bf00      	nop
 800b446:	370c      	adds	r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	bc80      	pop	{r7}
 800b44c:	4770      	bx	lr

0800b44e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b44e:	b480      	push	{r7}
 800b450:	b083      	sub	sp, #12
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b45c:	bf00      	nop
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	bc80      	pop	{r7}
 800b464:	4770      	bx	lr

0800b466 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b466:	b480      	push	{r7}
 800b468:	b085      	sub	sp, #20
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
 800b46e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	689a      	ldr	r2, [r3, #8]
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	683a      	ldr	r2, [r7, #0]
 800b48a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	1c5a      	adds	r2, r3, #1
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	601a      	str	r2, [r3, #0]
}
 800b4a2:	bf00      	nop
 800b4a4:	3714      	adds	r7, #20
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bc80      	pop	{r7}
 800b4aa:	4770      	bx	lr

0800b4ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c2:	d103      	bne.n	800b4cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	691b      	ldr	r3, [r3, #16]
 800b4c8:	60fb      	str	r3, [r7, #12]
 800b4ca:	e00c      	b.n	800b4e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	3308      	adds	r3, #8
 800b4d0:	60fb      	str	r3, [r7, #12]
 800b4d2:	e002      	b.n	800b4da <vListInsert+0x2e>
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	60fb      	str	r3, [r7, #12]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	68ba      	ldr	r2, [r7, #8]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d2f6      	bcs.n	800b4d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	1c5a      	adds	r2, r3, #1
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	601a      	str	r2, [r3, #0]
}
 800b512:	bf00      	nop
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	bc80      	pop	{r7}
 800b51a:	4770      	bx	lr

0800b51c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	691b      	ldr	r3, [r3, #16]
 800b528:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	6892      	ldr	r2, [r2, #8]
 800b532:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	6852      	ldr	r2, [r2, #4]
 800b53c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	429a      	cmp	r2, r3
 800b546:	d103      	bne.n	800b550 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	689a      	ldr	r2, [r3, #8]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	1e5a      	subs	r2, r3, #1
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3714      	adds	r7, #20
 800b568:	46bd      	mov	sp, r7
 800b56a:	bc80      	pop	{r7}
 800b56c:	4770      	bx	lr
	...

0800b570 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d10a      	bne.n	800b59a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b588:	f383 8811 	msr	BASEPRI, r3
 800b58c:	f3bf 8f6f 	isb	sy
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b596:	bf00      	nop
 800b598:	e7fe      	b.n	800b598 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b59a:	f002 fc0f 	bl	800ddbc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5a6:	68f9      	ldr	r1, [r7, #12]
 800b5a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b5aa:	fb01 f303 	mul.w	r3, r1, r3
 800b5ae:	441a      	add	r2, r3
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	68f9      	ldr	r1, [r7, #12]
 800b5ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b5d0:	fb01 f303 	mul.w	r3, r1, r3
 800b5d4:	441a      	add	r2, r3
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	22ff      	movs	r2, #255	; 0xff
 800b5de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	22ff      	movs	r2, #255	; 0xff
 800b5e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d114      	bne.n	800b61a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d01a      	beq.n	800b62e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	3310      	adds	r3, #16
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f001 fb1f 	bl	800cc40 <xTaskRemoveFromEventList>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d012      	beq.n	800b62e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b608:	4b0c      	ldr	r3, [pc, #48]	; (800b63c <xQueueGenericReset+0xcc>)
 800b60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b60e:	601a      	str	r2, [r3, #0]
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	e009      	b.n	800b62e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	3310      	adds	r3, #16
 800b61e:	4618      	mov	r0, r3
 800b620:	f7ff fef6 	bl	800b410 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	3324      	adds	r3, #36	; 0x24
 800b628:	4618      	mov	r0, r3
 800b62a:	f7ff fef1 	bl	800b410 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b62e:	f002 fbf5 	bl	800de1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b632:	2301      	movs	r3, #1
}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	e000ed04 	.word	0xe000ed04

0800b640 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b640:	b580      	push	{r7, lr}
 800b642:	b08e      	sub	sp, #56	; 0x38
 800b644:	af02      	add	r7, sp, #8
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
 800b64c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10a      	bne.n	800b66a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b666:	bf00      	nop
 800b668:	e7fe      	b.n	800b668 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d10a      	bne.n	800b686 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b674:	f383 8811 	msr	BASEPRI, r3
 800b678:	f3bf 8f6f 	isb	sy
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b682:	bf00      	nop
 800b684:	e7fe      	b.n	800b684 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d002      	beq.n	800b692 <xQueueGenericCreateStatic+0x52>
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d001      	beq.n	800b696 <xQueueGenericCreateStatic+0x56>
 800b692:	2301      	movs	r3, #1
 800b694:	e000      	b.n	800b698 <xQueueGenericCreateStatic+0x58>
 800b696:	2300      	movs	r3, #0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d10a      	bne.n	800b6b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a0:	f383 8811 	msr	BASEPRI, r3
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	623b      	str	r3, [r7, #32]
}
 800b6ae:	bf00      	nop
 800b6b0:	e7fe      	b.n	800b6b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d102      	bne.n	800b6be <xQueueGenericCreateStatic+0x7e>
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d101      	bne.n	800b6c2 <xQueueGenericCreateStatic+0x82>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e000      	b.n	800b6c4 <xQueueGenericCreateStatic+0x84>
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d10a      	bne.n	800b6de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6cc:	f383 8811 	msr	BASEPRI, r3
 800b6d0:	f3bf 8f6f 	isb	sy
 800b6d4:	f3bf 8f4f 	dsb	sy
 800b6d8:	61fb      	str	r3, [r7, #28]
}
 800b6da:	bf00      	nop
 800b6dc:	e7fe      	b.n	800b6dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b6de:	2350      	movs	r3, #80	; 0x50
 800b6e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	2b50      	cmp	r3, #80	; 0x50
 800b6e6:	d00a      	beq.n	800b6fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	61bb      	str	r3, [r7, #24]
}
 800b6fa:	bf00      	nop
 800b6fc:	e7fe      	b.n	800b6fc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00d      	beq.n	800b724 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70a:	2201      	movs	r2, #1
 800b70c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b710:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b716:	9300      	str	r3, [sp, #0]
 800b718:	4613      	mov	r3, r2
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	68b9      	ldr	r1, [r7, #8]
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f000 f843 	bl	800b7aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b726:	4618      	mov	r0, r3
 800b728:	3730      	adds	r7, #48	; 0x30
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b08a      	sub	sp, #40	; 0x28
 800b732:	af02      	add	r7, sp, #8
 800b734:	60f8      	str	r0, [r7, #12]
 800b736:	60b9      	str	r1, [r7, #8]
 800b738:	4613      	mov	r3, r2
 800b73a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10a      	bne.n	800b758 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b746:	f383 8811 	msr	BASEPRI, r3
 800b74a:	f3bf 8f6f 	isb	sy
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	613b      	str	r3, [r7, #16]
}
 800b754:	bf00      	nop
 800b756:	e7fe      	b.n	800b756 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d102      	bne.n	800b764 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b75e:	2300      	movs	r3, #0
 800b760:	61fb      	str	r3, [r7, #28]
 800b762:	e004      	b.n	800b76e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	fb02 f303 	mul.w	r3, r2, r3
 800b76c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	3350      	adds	r3, #80	; 0x50
 800b772:	4618      	mov	r0, r3
 800b774:	f002 fc22 	bl	800dfbc <pvPortMalloc>
 800b778:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d00f      	beq.n	800b7a0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	3350      	adds	r3, #80	; 0x50
 800b784:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b78e:	79fa      	ldrb	r2, [r7, #7]
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	4613      	mov	r3, r2
 800b796:	697a      	ldr	r2, [r7, #20]
 800b798:	68b9      	ldr	r1, [r7, #8]
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f000 f805 	bl	800b7aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b7a0:	69bb      	ldr	r3, [r7, #24]
	}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3720      	adds	r7, #32
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b084      	sub	sp, #16
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	60f8      	str	r0, [r7, #12]
 800b7b2:	60b9      	str	r1, [r7, #8]
 800b7b4:	607a      	str	r2, [r7, #4]
 800b7b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d103      	bne.n	800b7c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	69ba      	ldr	r2, [r7, #24]
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	e002      	b.n	800b7cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	68ba      	ldr	r2, [r7, #8]
 800b7d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b7d8:	2101      	movs	r1, #1
 800b7da:	69b8      	ldr	r0, [r7, #24]
 800b7dc:	f7ff fec8 	bl	800b570 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	78fa      	ldrb	r2, [r7, #3]
 800b7e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b7e8:	bf00      	nop
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00e      	beq.n	800b81c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b810:	2300      	movs	r3, #0
 800b812:	2200      	movs	r2, #0
 800b814:	2100      	movs	r1, #0
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 f838 	bl	800b88c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b81c:	bf00      	nop
 800b81e:	3708      	adds	r7, #8
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b824:	b580      	push	{r7, lr}
 800b826:	b086      	sub	sp, #24
 800b828:	af00      	add	r7, sp, #0
 800b82a:	4603      	mov	r3, r0
 800b82c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b82e:	2301      	movs	r3, #1
 800b830:	617b      	str	r3, [r7, #20]
 800b832:	2300      	movs	r3, #0
 800b834:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b836:	79fb      	ldrb	r3, [r7, #7]
 800b838:	461a      	mov	r2, r3
 800b83a:	6939      	ldr	r1, [r7, #16]
 800b83c:	6978      	ldr	r0, [r7, #20]
 800b83e:	f7ff ff76 	bl	800b72e <xQueueGenericCreate>
 800b842:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f7ff ffd3 	bl	800b7f0 <prvInitialiseMutex>

		return pxNewQueue;
 800b84a:	68fb      	ldr	r3, [r7, #12]
	}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3718      	adds	r7, #24
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b854:	b580      	push	{r7, lr}
 800b856:	b088      	sub	sp, #32
 800b858:	af02      	add	r7, sp, #8
 800b85a:	4603      	mov	r3, r0
 800b85c:	6039      	str	r1, [r7, #0]
 800b85e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b860:	2301      	movs	r3, #1
 800b862:	617b      	str	r3, [r7, #20]
 800b864:	2300      	movs	r3, #0
 800b866:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b868:	79fb      	ldrb	r3, [r7, #7]
 800b86a:	9300      	str	r3, [sp, #0]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	2200      	movs	r2, #0
 800b870:	6939      	ldr	r1, [r7, #16]
 800b872:	6978      	ldr	r0, [r7, #20]
 800b874:	f7ff fee4 	bl	800b640 <xQueueGenericCreateStatic>
 800b878:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f7ff ffb8 	bl	800b7f0 <prvInitialiseMutex>

		return pxNewQueue;
 800b880:	68fb      	ldr	r3, [r7, #12]
	}
 800b882:	4618      	mov	r0, r3
 800b884:	3718      	adds	r7, #24
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
	...

0800b88c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b08e      	sub	sp, #56	; 0x38
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
 800b898:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b89a:	2300      	movs	r3, #0
 800b89c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d10a      	bne.n	800b8be <xQueueGenericSend+0x32>
	__asm volatile
 800b8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ac:	f383 8811 	msr	BASEPRI, r3
 800b8b0:	f3bf 8f6f 	isb	sy
 800b8b4:	f3bf 8f4f 	dsb	sy
 800b8b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b8ba:	bf00      	nop
 800b8bc:	e7fe      	b.n	800b8bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d103      	bne.n	800b8cc <xQueueGenericSend+0x40>
 800b8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d101      	bne.n	800b8d0 <xQueueGenericSend+0x44>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	e000      	b.n	800b8d2 <xQueueGenericSend+0x46>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d10a      	bne.n	800b8ec <xQueueGenericSend+0x60>
	__asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8e8:	bf00      	nop
 800b8ea:	e7fe      	b.n	800b8ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d103      	bne.n	800b8fa <xQueueGenericSend+0x6e>
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d101      	bne.n	800b8fe <xQueueGenericSend+0x72>
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e000      	b.n	800b900 <xQueueGenericSend+0x74>
 800b8fe:	2300      	movs	r3, #0
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10a      	bne.n	800b91a <xQueueGenericSend+0x8e>
	__asm volatile
 800b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	623b      	str	r3, [r7, #32]
}
 800b916:	bf00      	nop
 800b918:	e7fe      	b.n	800b918 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b91a:	f001 fb8b 	bl	800d034 <xTaskGetSchedulerState>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d102      	bne.n	800b92a <xQueueGenericSend+0x9e>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d101      	bne.n	800b92e <xQueueGenericSend+0xa2>
 800b92a:	2301      	movs	r3, #1
 800b92c:	e000      	b.n	800b930 <xQueueGenericSend+0xa4>
 800b92e:	2300      	movs	r3, #0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10a      	bne.n	800b94a <xQueueGenericSend+0xbe>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	61fb      	str	r3, [r7, #28]
}
 800b946:	bf00      	nop
 800b948:	e7fe      	b.n	800b948 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b94a:	f002 fa37 	bl	800ddbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b956:	429a      	cmp	r2, r3
 800b958:	d302      	bcc.n	800b960 <xQueueGenericSend+0xd4>
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d129      	bne.n	800b9b4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	68b9      	ldr	r1, [r7, #8]
 800b964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b966:	f000 fb2a 	bl	800bfbe <prvCopyDataToQueue>
 800b96a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b970:	2b00      	cmp	r3, #0
 800b972:	d010      	beq.n	800b996 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b976:	3324      	adds	r3, #36	; 0x24
 800b978:	4618      	mov	r0, r3
 800b97a:	f001 f961 	bl	800cc40 <xTaskRemoveFromEventList>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d013      	beq.n	800b9ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b984:	4b3f      	ldr	r3, [pc, #252]	; (800ba84 <xQueueGenericSend+0x1f8>)
 800b986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b98a:	601a      	str	r2, [r3, #0]
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	e00a      	b.n	800b9ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d007      	beq.n	800b9ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b99c:	4b39      	ldr	r3, [pc, #228]	; (800ba84 <xQueueGenericSend+0x1f8>)
 800b99e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9a2:	601a      	str	r2, [r3, #0]
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b9ac:	f002 fa36 	bl	800de1c <vPortExitCritical>
				return pdPASS;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	e063      	b.n	800ba7c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d103      	bne.n	800b9c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9ba:	f002 fa2f 	bl	800de1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	e05c      	b.n	800ba7c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d106      	bne.n	800b9d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9c8:	f107 0314 	add.w	r3, r7, #20
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f001 f99b 	bl	800cd08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9d6:	f002 fa21 	bl	800de1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9da:	f000 ff0d 	bl	800c7f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9de:	f002 f9ed 	bl	800ddbc <vPortEnterCritical>
 800b9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9e8:	b25b      	sxtb	r3, r3
 800b9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ee:	d103      	bne.n	800b9f8 <xQueueGenericSend+0x16c>
 800b9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9fe:	b25b      	sxtb	r3, r3
 800ba00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba04:	d103      	bne.n	800ba0e <xQueueGenericSend+0x182>
 800ba06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba0e:	f002 fa05 	bl	800de1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba12:	1d3a      	adds	r2, r7, #4
 800ba14:	f107 0314 	add.w	r3, r7, #20
 800ba18:	4611      	mov	r1, r2
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f001 f98a 	bl	800cd34 <xTaskCheckForTimeOut>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d124      	bne.n	800ba70 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ba26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba28:	f000 fbc1 	bl	800c1ae <prvIsQueueFull>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d018      	beq.n	800ba64 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ba32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba34:	3310      	adds	r3, #16
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	4611      	mov	r1, r2
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f001 f8b0 	bl	800cba0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ba40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba42:	f000 fb4c 	bl	800c0de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ba46:	f000 fee5 	bl	800c814 <xTaskResumeAll>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f47f af7c 	bne.w	800b94a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ba52:	4b0c      	ldr	r3, [pc, #48]	; (800ba84 <xQueueGenericSend+0x1f8>)
 800ba54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba58:	601a      	str	r2, [r3, #0]
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	e772      	b.n	800b94a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ba64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba66:	f000 fb3a 	bl	800c0de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba6a:	f000 fed3 	bl	800c814 <xTaskResumeAll>
 800ba6e:	e76c      	b.n	800b94a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ba70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba72:	f000 fb34 	bl	800c0de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba76:	f000 fecd 	bl	800c814 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ba7a:	2300      	movs	r3, #0
		}
	}
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3738      	adds	r7, #56	; 0x38
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	e000ed04 	.word	0xe000ed04

0800ba88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b08e      	sub	sp, #56	; 0x38
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
 800ba94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10a      	bne.n	800bab6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800baa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bab2:	bf00      	nop
 800bab4:	e7fe      	b.n	800bab4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d103      	bne.n	800bac4 <xQueueGenericSendFromISR+0x3c>
 800babc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d101      	bne.n	800bac8 <xQueueGenericSendFromISR+0x40>
 800bac4:	2301      	movs	r3, #1
 800bac6:	e000      	b.n	800baca <xQueueGenericSendFromISR+0x42>
 800bac8:	2300      	movs	r3, #0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d10a      	bne.n	800bae4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	623b      	str	r3, [r7, #32]
}
 800bae0:	bf00      	nop
 800bae2:	e7fe      	b.n	800bae2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	d103      	bne.n	800baf2 <xQueueGenericSendFromISR+0x6a>
 800baea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d101      	bne.n	800baf6 <xQueueGenericSendFromISR+0x6e>
 800baf2:	2301      	movs	r3, #1
 800baf4:	e000      	b.n	800baf8 <xQueueGenericSendFromISR+0x70>
 800baf6:	2300      	movs	r3, #0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10a      	bne.n	800bb12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb00:	f383 8811 	msr	BASEPRI, r3
 800bb04:	f3bf 8f6f 	isb	sy
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	61fb      	str	r3, [r7, #28]
}
 800bb0e:	bf00      	nop
 800bb10:	e7fe      	b.n	800bb10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb12:	f002 fa15 	bl	800df40 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bb16:	f3ef 8211 	mrs	r2, BASEPRI
 800bb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1e:	f383 8811 	msr	BASEPRI, r3
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	f3bf 8f4f 	dsb	sy
 800bb2a:	61ba      	str	r2, [r7, #24]
 800bb2c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bb2e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d302      	bcc.n	800bb44 <xQueueGenericSendFromISR+0xbc>
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	2b02      	cmp	r3, #2
 800bb42:	d12c      	bne.n	800bb9e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb4e:	683a      	ldr	r2, [r7, #0]
 800bb50:	68b9      	ldr	r1, [r7, #8]
 800bb52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb54:	f000 fa33 	bl	800bfbe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bb58:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bb5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb60:	d112      	bne.n	800bb88 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d016      	beq.n	800bb98 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6c:	3324      	adds	r3, #36	; 0x24
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f001 f866 	bl	800cc40 <xTaskRemoveFromEventList>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00e      	beq.n	800bb98 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00b      	beq.n	800bb98 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	601a      	str	r2, [r3, #0]
 800bb86:	e007      	b.n	800bb98 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bb88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	b25a      	sxtb	r2, r3
 800bb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bb9c:	e001      	b.n	800bba2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	637b      	str	r3, [r7, #52]	; 0x34
 800bba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bbac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3738      	adds	r7, #56	; 0x38
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b08c      	sub	sp, #48	; 0x30
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10a      	bne.n	800bbe8 <xQueueReceive+0x30>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	623b      	str	r3, [r7, #32]
}
 800bbe4:	bf00      	nop
 800bbe6:	e7fe      	b.n	800bbe6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d103      	bne.n	800bbf6 <xQueueReceive+0x3e>
 800bbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d101      	bne.n	800bbfa <xQueueReceive+0x42>
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e000      	b.n	800bbfc <xQueueReceive+0x44>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d10a      	bne.n	800bc16 <xQueueReceive+0x5e>
	__asm volatile
 800bc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc04:	f383 8811 	msr	BASEPRI, r3
 800bc08:	f3bf 8f6f 	isb	sy
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	61fb      	str	r3, [r7, #28]
}
 800bc12:	bf00      	nop
 800bc14:	e7fe      	b.n	800bc14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc16:	f001 fa0d 	bl	800d034 <xTaskGetSchedulerState>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d102      	bne.n	800bc26 <xQueueReceive+0x6e>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d101      	bne.n	800bc2a <xQueueReceive+0x72>
 800bc26:	2301      	movs	r3, #1
 800bc28:	e000      	b.n	800bc2c <xQueueReceive+0x74>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d10a      	bne.n	800bc46 <xQueueReceive+0x8e>
	__asm volatile
 800bc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc34:	f383 8811 	msr	BASEPRI, r3
 800bc38:	f3bf 8f6f 	isb	sy
 800bc3c:	f3bf 8f4f 	dsb	sy
 800bc40:	61bb      	str	r3, [r7, #24]
}
 800bc42:	bf00      	nop
 800bc44:	e7fe      	b.n	800bc44 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc46:	f002 f8b9 	bl	800ddbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d01f      	beq.n	800bc96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bc56:	68b9      	ldr	r1, [r7, #8]
 800bc58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc5a:	f000 fa1a 	bl	800c092 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc60:	1e5a      	subs	r2, r3, #1
 800bc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00f      	beq.n	800bc8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc70:	3310      	adds	r3, #16
 800bc72:	4618      	mov	r0, r3
 800bc74:	f000 ffe4 	bl	800cc40 <xTaskRemoveFromEventList>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d007      	beq.n	800bc8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc7e:	4b3d      	ldr	r3, [pc, #244]	; (800bd74 <xQueueReceive+0x1bc>)
 800bc80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc84:	601a      	str	r2, [r3, #0]
 800bc86:	f3bf 8f4f 	dsb	sy
 800bc8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bc8e:	f002 f8c5 	bl	800de1c <vPortExitCritical>
				return pdPASS;
 800bc92:	2301      	movs	r3, #1
 800bc94:	e069      	b.n	800bd6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d103      	bne.n	800bca4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc9c:	f002 f8be 	bl	800de1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bca0:	2300      	movs	r3, #0
 800bca2:	e062      	b.n	800bd6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d106      	bne.n	800bcb8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcaa:	f107 0310 	add.w	r3, r7, #16
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f001 f82a 	bl	800cd08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bcb8:	f002 f8b0 	bl	800de1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bcbc:	f000 fd9c 	bl	800c7f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcc0:	f002 f87c 	bl	800ddbc <vPortEnterCritical>
 800bcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcca:	b25b      	sxtb	r3, r3
 800bccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd0:	d103      	bne.n	800bcda <xQueueReceive+0x122>
 800bcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bce0:	b25b      	sxtb	r3, r3
 800bce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce6:	d103      	bne.n	800bcf0 <xQueueReceive+0x138>
 800bce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcea:	2200      	movs	r2, #0
 800bcec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcf0:	f002 f894 	bl	800de1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcf4:	1d3a      	adds	r2, r7, #4
 800bcf6:	f107 0310 	add.w	r3, r7, #16
 800bcfa:	4611      	mov	r1, r2
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f001 f819 	bl	800cd34 <xTaskCheckForTimeOut>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d123      	bne.n	800bd50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd0a:	f000 fa3a 	bl	800c182 <prvIsQueueEmpty>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d017      	beq.n	800bd44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd16:	3324      	adds	r3, #36	; 0x24
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	4611      	mov	r1, r2
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f000 ff3f 	bl	800cba0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd24:	f000 f9db 	bl	800c0de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd28:	f000 fd74 	bl	800c814 <xTaskResumeAll>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d189      	bne.n	800bc46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bd32:	4b10      	ldr	r3, [pc, #64]	; (800bd74 <xQueueReceive+0x1bc>)
 800bd34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd38:	601a      	str	r2, [r3, #0]
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	f3bf 8f6f 	isb	sy
 800bd42:	e780      	b.n	800bc46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bd44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd46:	f000 f9ca 	bl	800c0de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd4a:	f000 fd63 	bl	800c814 <xTaskResumeAll>
 800bd4e:	e77a      	b.n	800bc46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bd50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd52:	f000 f9c4 	bl	800c0de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd56:	f000 fd5d 	bl	800c814 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd5c:	f000 fa11 	bl	800c182 <prvIsQueueEmpty>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	f43f af6f 	beq.w	800bc46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bd68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3730      	adds	r7, #48	; 0x30
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	e000ed04 	.word	0xe000ed04

0800bd78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b08e      	sub	sp, #56	; 0x38
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd82:	2300      	movs	r3, #0
 800bd84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10a      	bne.n	800bdaa <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd98:	f383 8811 	msr	BASEPRI, r3
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	f3bf 8f4f 	dsb	sy
 800bda4:	623b      	str	r3, [r7, #32]
}
 800bda6:	bf00      	nop
 800bda8:	e7fe      	b.n	800bda8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00a      	beq.n	800bdc8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb6:	f383 8811 	msr	BASEPRI, r3
 800bdba:	f3bf 8f6f 	isb	sy
 800bdbe:	f3bf 8f4f 	dsb	sy
 800bdc2:	61fb      	str	r3, [r7, #28]
}
 800bdc4:	bf00      	nop
 800bdc6:	e7fe      	b.n	800bdc6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdc8:	f001 f934 	bl	800d034 <xTaskGetSchedulerState>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d102      	bne.n	800bdd8 <xQueueSemaphoreTake+0x60>
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d101      	bne.n	800bddc <xQueueSemaphoreTake+0x64>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e000      	b.n	800bdde <xQueueSemaphoreTake+0x66>
 800bddc:	2300      	movs	r3, #0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10a      	bne.n	800bdf8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde6:	f383 8811 	msr	BASEPRI, r3
 800bdea:	f3bf 8f6f 	isb	sy
 800bdee:	f3bf 8f4f 	dsb	sy
 800bdf2:	61bb      	str	r3, [r7, #24]
}
 800bdf4:	bf00      	nop
 800bdf6:	e7fe      	b.n	800bdf6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdf8:	f001 ffe0 	bl	800ddbc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be00:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800be02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be04:	2b00      	cmp	r3, #0
 800be06:	d024      	beq.n	800be52 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0a:	1e5a      	subs	r2, r3, #1
 800be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d104      	bne.n	800be22 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800be18:	f001 fa8c 	bl	800d334 <pvTaskIncrementMutexHeldCount>
 800be1c:	4602      	mov	r2, r0
 800be1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be20:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be24:	691b      	ldr	r3, [r3, #16]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d00f      	beq.n	800be4a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2c:	3310      	adds	r3, #16
 800be2e:	4618      	mov	r0, r3
 800be30:	f000 ff06 	bl	800cc40 <xTaskRemoveFromEventList>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d007      	beq.n	800be4a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be3a:	4b54      	ldr	r3, [pc, #336]	; (800bf8c <xQueueSemaphoreTake+0x214>)
 800be3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be40:	601a      	str	r2, [r3, #0]
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be4a:	f001 ffe7 	bl	800de1c <vPortExitCritical>
				return pdPASS;
 800be4e:	2301      	movs	r3, #1
 800be50:	e097      	b.n	800bf82 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d111      	bne.n	800be7c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800be58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00a      	beq.n	800be74 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	617b      	str	r3, [r7, #20]
}
 800be70:	bf00      	nop
 800be72:	e7fe      	b.n	800be72 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800be74:	f001 ffd2 	bl	800de1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be78:	2300      	movs	r3, #0
 800be7a:	e082      	b.n	800bf82 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d106      	bne.n	800be90 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be82:	f107 030c 	add.w	r3, r7, #12
 800be86:	4618      	mov	r0, r3
 800be88:	f000 ff3e 	bl	800cd08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be8c:	2301      	movs	r3, #1
 800be8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be90:	f001 ffc4 	bl	800de1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be94:	f000 fcb0 	bl	800c7f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be98:	f001 ff90 	bl	800ddbc <vPortEnterCritical>
 800be9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bea2:	b25b      	sxtb	r3, r3
 800bea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea8:	d103      	bne.n	800beb2 <xQueueSemaphoreTake+0x13a>
 800beaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beac:	2200      	movs	r2, #0
 800beae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800beb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800beb8:	b25b      	sxtb	r3, r3
 800beba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bebe:	d103      	bne.n	800bec8 <xQueueSemaphoreTake+0x150>
 800bec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec2:	2200      	movs	r2, #0
 800bec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bec8:	f001 ffa8 	bl	800de1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800becc:	463a      	mov	r2, r7
 800bece:	f107 030c 	add.w	r3, r7, #12
 800bed2:	4611      	mov	r1, r2
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 ff2d 	bl	800cd34 <xTaskCheckForTimeOut>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d132      	bne.n	800bf46 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bee2:	f000 f94e 	bl	800c182 <prvIsQueueEmpty>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d026      	beq.n	800bf3a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800beec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d109      	bne.n	800bf08 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bef4:	f001 ff62 	bl	800ddbc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800bef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	4618      	mov	r0, r3
 800befe:	f001 f8b7 	bl	800d070 <xTaskPriorityInherit>
 800bf02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bf04:	f001 ff8a 	bl	800de1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0a:	3324      	adds	r3, #36	; 0x24
 800bf0c:	683a      	ldr	r2, [r7, #0]
 800bf0e:	4611      	mov	r1, r2
 800bf10:	4618      	mov	r0, r3
 800bf12:	f000 fe45 	bl	800cba0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf18:	f000 f8e1 	bl	800c0de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf1c:	f000 fc7a 	bl	800c814 <xTaskResumeAll>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	f47f af68 	bne.w	800bdf8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bf28:	4b18      	ldr	r3, [pc, #96]	; (800bf8c <xQueueSemaphoreTake+0x214>)
 800bf2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf2e:	601a      	str	r2, [r3, #0]
 800bf30:	f3bf 8f4f 	dsb	sy
 800bf34:	f3bf 8f6f 	isb	sy
 800bf38:	e75e      	b.n	800bdf8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bf3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf3c:	f000 f8cf 	bl	800c0de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf40:	f000 fc68 	bl	800c814 <xTaskResumeAll>
 800bf44:	e758      	b.n	800bdf8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bf46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf48:	f000 f8c9 	bl	800c0de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf4c:	f000 fc62 	bl	800c814 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf52:	f000 f916 	bl	800c182 <prvIsQueueEmpty>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f43f af4d 	beq.w	800bdf8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00d      	beq.n	800bf80 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bf64:	f001 ff2a 	bl	800ddbc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bf68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf6a:	f000 f811 	bl	800bf90 <prvGetDisinheritPriorityAfterTimeout>
 800bf6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800bf70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf76:	4618      	mov	r0, r3
 800bf78:	f001 f956 	bl	800d228 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bf7c:	f001 ff4e 	bl	800de1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3738      	adds	r7, #56	; 0x38
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	e000ed04 	.word	0xe000ed04

0800bf90 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d006      	beq.n	800bfae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800bfaa:	60fb      	str	r3, [r7, #12]
 800bfac:	e001      	b.n	800bfb2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
	}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3714      	adds	r7, #20
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bc80      	pop	{r7}
 800bfbc:	4770      	bx	lr

0800bfbe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bfbe:	b580      	push	{r7, lr}
 800bfc0:	b086      	sub	sp, #24
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	60f8      	str	r0, [r7, #12]
 800bfc6:	60b9      	str	r1, [r7, #8]
 800bfc8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d10d      	bne.n	800bff8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d14d      	bne.n	800c080 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f001 f8af 	bl	800d14c <xTaskPriorityDisinherit>
 800bfee:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2200      	movs	r2, #0
 800bff4:	605a      	str	r2, [r3, #4]
 800bff6:	e043      	b.n	800c080 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d119      	bne.n	800c032 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6898      	ldr	r0, [r3, #8]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c006:	461a      	mov	r2, r3
 800c008:	68b9      	ldr	r1, [r7, #8]
 800c00a:	f002 fe95 	bl	800ed38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	689a      	ldr	r2, [r3, #8]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c016:	441a      	add	r2, r3
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	689a      	ldr	r2, [r3, #8]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	429a      	cmp	r2, r3
 800c026:	d32b      	bcc.n	800c080 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	609a      	str	r2, [r3, #8]
 800c030:	e026      	b.n	800c080 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	68d8      	ldr	r0, [r3, #12]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03a:	461a      	mov	r2, r3
 800c03c:	68b9      	ldr	r1, [r7, #8]
 800c03e:	f002 fe7b 	bl	800ed38 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	68da      	ldr	r2, [r3, #12]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c04a:	425b      	negs	r3, r3
 800c04c:	441a      	add	r2, r3
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	68da      	ldr	r2, [r3, #12]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d207      	bcs.n	800c06e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	685a      	ldr	r2, [r3, #4]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c066:	425b      	negs	r3, r3
 800c068:	441a      	add	r2, r3
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2b02      	cmp	r3, #2
 800c072:	d105      	bne.n	800c080 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d002      	beq.n	800c080 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	3b01      	subs	r3, #1
 800c07e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	1c5a      	adds	r2, r3, #1
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c088:	697b      	ldr	r3, [r7, #20]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3718      	adds	r7, #24
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c092:	b580      	push	{r7, lr}
 800c094:	b082      	sub	sp, #8
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
 800c09a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d018      	beq.n	800c0d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	68da      	ldr	r2, [r3, #12]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ac:	441a      	add	r2, r3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	68da      	ldr	r2, [r3, #12]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d303      	bcc.n	800c0c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	68d9      	ldr	r1, [r3, #12]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	6838      	ldr	r0, [r7, #0]
 800c0d2:	f002 fe31 	bl	800ed38 <memcpy>
	}
}
 800c0d6:	bf00      	nop
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b084      	sub	sp, #16
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c0e6:	f001 fe69 	bl	800ddbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c0f2:	e011      	b.n	800c118 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d012      	beq.n	800c122 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	3324      	adds	r3, #36	; 0x24
 800c100:	4618      	mov	r0, r3
 800c102:	f000 fd9d 	bl	800cc40 <xTaskRemoveFromEventList>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d001      	beq.n	800c110 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c10c:	f000 fe74 	bl	800cdf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c110:	7bfb      	ldrb	r3, [r7, #15]
 800c112:	3b01      	subs	r3, #1
 800c114:	b2db      	uxtb	r3, r3
 800c116:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	dce9      	bgt.n	800c0f4 <prvUnlockQueue+0x16>
 800c120:	e000      	b.n	800c124 <prvUnlockQueue+0x46>
					break;
 800c122:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	22ff      	movs	r2, #255	; 0xff
 800c128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c12c:	f001 fe76 	bl	800de1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c130:	f001 fe44 	bl	800ddbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c13a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c13c:	e011      	b.n	800c162 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d012      	beq.n	800c16c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	3310      	adds	r3, #16
 800c14a:	4618      	mov	r0, r3
 800c14c:	f000 fd78 	bl	800cc40 <xTaskRemoveFromEventList>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d001      	beq.n	800c15a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c156:	f000 fe4f 	bl	800cdf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c15a:	7bbb      	ldrb	r3, [r7, #14]
 800c15c:	3b01      	subs	r3, #1
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c162:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c166:	2b00      	cmp	r3, #0
 800c168:	dce9      	bgt.n	800c13e <prvUnlockQueue+0x60>
 800c16a:	e000      	b.n	800c16e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c16c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	22ff      	movs	r2, #255	; 0xff
 800c172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c176:	f001 fe51 	bl	800de1c <vPortExitCritical>
}
 800c17a:	bf00      	nop
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b084      	sub	sp, #16
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c18a:	f001 fe17 	bl	800ddbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c192:	2b00      	cmp	r3, #0
 800c194:	d102      	bne.n	800c19c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c196:	2301      	movs	r3, #1
 800c198:	60fb      	str	r3, [r7, #12]
 800c19a:	e001      	b.n	800c1a0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c19c:	2300      	movs	r3, #0
 800c19e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1a0:	f001 fe3c 	bl	800de1c <vPortExitCritical>

	return xReturn;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b084      	sub	sp, #16
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1b6:	f001 fe01 	bl	800ddbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d102      	bne.n	800c1cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	60fb      	str	r3, [r7, #12]
 800c1ca:	e001      	b.n	800c1d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1d0:	f001 fe24 	bl	800de1c <vPortExitCritical>

	return xReturn;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
	...

0800c1e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b085      	sub	sp, #20
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	60fb      	str	r3, [r7, #12]
 800c1ee:	e014      	b.n	800c21a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c1f0:	4a0e      	ldr	r2, [pc, #56]	; (800c22c <vQueueAddToRegistry+0x4c>)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10b      	bne.n	800c214 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c1fc:	490b      	ldr	r1, [pc, #44]	; (800c22c <vQueueAddToRegistry+0x4c>)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c206:	4a09      	ldr	r2, [pc, #36]	; (800c22c <vQueueAddToRegistry+0x4c>)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	00db      	lsls	r3, r3, #3
 800c20c:	4413      	add	r3, r2
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c212:	e006      	b.n	800c222 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	3301      	adds	r3, #1
 800c218:	60fb      	str	r3, [r7, #12]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2b07      	cmp	r3, #7
 800c21e:	d9e7      	bls.n	800c1f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c220:	bf00      	nop
 800c222:	bf00      	nop
 800c224:	3714      	adds	r7, #20
 800c226:	46bd      	mov	sp, r7
 800c228:	bc80      	pop	{r7}
 800c22a:	4770      	bx	lr
 800c22c:	20002680 	.word	0x20002680

0800c230 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c230:	b580      	push	{r7, lr}
 800c232:	b086      	sub	sp, #24
 800c234:	af00      	add	r7, sp, #0
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c240:	f001 fdbc 	bl	800ddbc <vPortEnterCritical>
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c24a:	b25b      	sxtb	r3, r3
 800c24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c250:	d103      	bne.n	800c25a <vQueueWaitForMessageRestricted+0x2a>
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	2200      	movs	r2, #0
 800c256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c260:	b25b      	sxtb	r3, r3
 800c262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c266:	d103      	bne.n	800c270 <vQueueWaitForMessageRestricted+0x40>
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	2200      	movs	r2, #0
 800c26c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c270:	f001 fdd4 	bl	800de1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d106      	bne.n	800c28a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	3324      	adds	r3, #36	; 0x24
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	68b9      	ldr	r1, [r7, #8]
 800c284:	4618      	mov	r0, r3
 800c286:	f000 fcaf 	bl	800cbe8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c28a:	6978      	ldr	r0, [r7, #20]
 800c28c:	f7ff ff27 	bl	800c0de <prvUnlockQueue>
	}
 800c290:	bf00      	nop
 800c292:	3718      	adds	r7, #24
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b08e      	sub	sp, #56	; 0x38
 800c29c:	af04      	add	r7, sp, #16
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
 800c2a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d10a      	bne.n	800c2c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b0:	f383 8811 	msr	BASEPRI, r3
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	623b      	str	r3, [r7, #32]
}
 800c2be:	bf00      	nop
 800c2c0:	e7fe      	b.n	800c2c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d10a      	bne.n	800c2de <xTaskCreateStatic+0x46>
	__asm volatile
 800c2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2cc:	f383 8811 	msr	BASEPRI, r3
 800c2d0:	f3bf 8f6f 	isb	sy
 800c2d4:	f3bf 8f4f 	dsb	sy
 800c2d8:	61fb      	str	r3, [r7, #28]
}
 800c2da:	bf00      	nop
 800c2dc:	e7fe      	b.n	800c2dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c2de:	235c      	movs	r3, #92	; 0x5c
 800c2e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	2b5c      	cmp	r3, #92	; 0x5c
 800c2e6:	d00a      	beq.n	800c2fe <xTaskCreateStatic+0x66>
	__asm volatile
 800c2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ec:	f383 8811 	msr	BASEPRI, r3
 800c2f0:	f3bf 8f6f 	isb	sy
 800c2f4:	f3bf 8f4f 	dsb	sy
 800c2f8:	61bb      	str	r3, [r7, #24]
}
 800c2fa:	bf00      	nop
 800c2fc:	e7fe      	b.n	800c2fc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c300:	2b00      	cmp	r3, #0
 800c302:	d01e      	beq.n	800c342 <xTaskCreateStatic+0xaa>
 800c304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c306:	2b00      	cmp	r3, #0
 800c308:	d01b      	beq.n	800c342 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c310:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c312:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c316:	2202      	movs	r2, #2
 800c318:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c31c:	2300      	movs	r3, #0
 800c31e:	9303      	str	r3, [sp, #12]
 800c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c322:	9302      	str	r3, [sp, #8]
 800c324:	f107 0314 	add.w	r3, r7, #20
 800c328:	9301      	str	r3, [sp, #4]
 800c32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	68b9      	ldr	r1, [r7, #8]
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f000 f850 	bl	800c3da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c33a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c33c:	f000 f8d4 	bl	800c4e8 <prvAddNewTaskToReadyList>
 800c340:	e001      	b.n	800c346 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800c342:	2300      	movs	r3, #0
 800c344:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c346:	697b      	ldr	r3, [r7, #20]
	}
 800c348:	4618      	mov	r0, r3
 800c34a:	3728      	adds	r7, #40	; 0x28
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c350:	b580      	push	{r7, lr}
 800c352:	b08c      	sub	sp, #48	; 0x30
 800c354:	af04      	add	r7, sp, #16
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	603b      	str	r3, [r7, #0]
 800c35c:	4613      	mov	r3, r2
 800c35e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c360:	88fb      	ldrh	r3, [r7, #6]
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	4618      	mov	r0, r3
 800c366:	f001 fe29 	bl	800dfbc <pvPortMalloc>
 800c36a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00e      	beq.n	800c390 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800c372:	205c      	movs	r0, #92	; 0x5c
 800c374:	f001 fe22 	bl	800dfbc <pvPortMalloc>
 800c378:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d003      	beq.n	800c388 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	631a      	str	r2, [r3, #48]	; 0x30
 800c386:	e005      	b.n	800c394 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c388:	6978      	ldr	r0, [r7, #20]
 800c38a:	f001 fedb 	bl	800e144 <vPortFree>
 800c38e:	e001      	b.n	800c394 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c390:	2300      	movs	r3, #0
 800c392:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d017      	beq.n	800c3ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	2200      	movs	r2, #0
 800c39e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c3a2:	88fa      	ldrh	r2, [r7, #6]
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	9303      	str	r3, [sp, #12]
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	9302      	str	r3, [sp, #8]
 800c3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ae:	9301      	str	r3, [sp, #4]
 800c3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	68b9      	ldr	r1, [r7, #8]
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f000 f80e 	bl	800c3da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c3be:	69f8      	ldr	r0, [r7, #28]
 800c3c0:	f000 f892 	bl	800c4e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	61bb      	str	r3, [r7, #24]
 800c3c8:	e002      	b.n	800c3d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c3ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c3ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c3d0:	69bb      	ldr	r3, [r7, #24]
	}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3720      	adds	r7, #32
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b088      	sub	sp, #32
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	60f8      	str	r0, [r7, #12]
 800c3e2:	60b9      	str	r1, [r7, #8]
 800c3e4:	607a      	str	r2, [r7, #4]
 800c3e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	21a5      	movs	r1, #165	; 0xa5
 800c3f4:	f002 fcc8 	bl	800ed88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c402:	3b01      	subs	r3, #1
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4413      	add	r3, r2
 800c408:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	f023 0307 	bic.w	r3, r3, #7
 800c410:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	f003 0307 	and.w	r3, r3, #7
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00a      	beq.n	800c432 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	617b      	str	r3, [r7, #20]
}
 800c42e:	bf00      	nop
 800c430:	e7fe      	b.n	800c430 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c432:	2300      	movs	r3, #0
 800c434:	61fb      	str	r3, [r7, #28]
 800c436:	e012      	b.n	800c45e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	4413      	add	r3, r2
 800c43e:	7819      	ldrb	r1, [r3, #0]
 800c440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	4413      	add	r3, r2
 800c446:	3334      	adds	r3, #52	; 0x34
 800c448:	460a      	mov	r2, r1
 800c44a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800c44c:	68ba      	ldr	r2, [r7, #8]
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	4413      	add	r3, r2
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d006      	beq.n	800c466 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	3301      	adds	r3, #1
 800c45c:	61fb      	str	r3, [r7, #28]
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	2b0f      	cmp	r3, #15
 800c462:	d9e9      	bls.n	800c438 <prvInitialiseNewTask+0x5e>
 800c464:	e000      	b.n	800c468 <prvInitialiseNewTask+0x8e>
		{
			break;
 800c466:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46a:	2200      	movs	r2, #0
 800c46c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c472:	2b37      	cmp	r3, #55	; 0x37
 800c474:	d901      	bls.n	800c47a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c476:	2337      	movs	r3, #55	; 0x37
 800c478:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c47e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c484:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c488:	2200      	movs	r2, #0
 800c48a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48e:	3304      	adds	r3, #4
 800c490:	4618      	mov	r0, r3
 800c492:	f7fe ffdc 	bl	800b44e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c498:	3318      	adds	r3, #24
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe ffd7 	bl	800b44e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c4c4:	683a      	ldr	r2, [r7, #0]
 800c4c6:	68f9      	ldr	r1, [r7, #12]
 800c4c8:	69b8      	ldr	r0, [r7, #24]
 800c4ca:	f001 fb89 	bl	800dbe0 <pxPortInitialiseStack>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800c4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d002      	beq.n	800c4e0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4e0:	bf00      	nop
 800c4e2:	3720      	adds	r7, #32
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c4f0:	f001 fc64 	bl	800ddbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c4f4:	4b2d      	ldr	r3, [pc, #180]	; (800c5ac <prvAddNewTaskToReadyList+0xc4>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	4a2c      	ldr	r2, [pc, #176]	; (800c5ac <prvAddNewTaskToReadyList+0xc4>)
 800c4fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c4fe:	4b2c      	ldr	r3, [pc, #176]	; (800c5b0 <prvAddNewTaskToReadyList+0xc8>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d109      	bne.n	800c51a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c506:	4a2a      	ldr	r2, [pc, #168]	; (800c5b0 <prvAddNewTaskToReadyList+0xc8>)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c50c:	4b27      	ldr	r3, [pc, #156]	; (800c5ac <prvAddNewTaskToReadyList+0xc4>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b01      	cmp	r3, #1
 800c512:	d110      	bne.n	800c536 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c514:	f000 fc94 	bl	800ce40 <prvInitialiseTaskLists>
 800c518:	e00d      	b.n	800c536 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c51a:	4b26      	ldr	r3, [pc, #152]	; (800c5b4 <prvAddNewTaskToReadyList+0xcc>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d109      	bne.n	800c536 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c522:	4b23      	ldr	r3, [pc, #140]	; (800c5b0 <prvAddNewTaskToReadyList+0xc8>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d802      	bhi.n	800c536 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c530:	4a1f      	ldr	r2, [pc, #124]	; (800c5b0 <prvAddNewTaskToReadyList+0xc8>)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c536:	4b20      	ldr	r3, [pc, #128]	; (800c5b8 <prvAddNewTaskToReadyList+0xd0>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	3301      	adds	r3, #1
 800c53c:	4a1e      	ldr	r2, [pc, #120]	; (800c5b8 <prvAddNewTaskToReadyList+0xd0>)
 800c53e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c540:	4b1d      	ldr	r3, [pc, #116]	; (800c5b8 <prvAddNewTaskToReadyList+0xd0>)
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c54c:	4b1b      	ldr	r3, [pc, #108]	; (800c5bc <prvAddNewTaskToReadyList+0xd4>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	429a      	cmp	r2, r3
 800c552:	d903      	bls.n	800c55c <prvAddNewTaskToReadyList+0x74>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c558:	4a18      	ldr	r2, [pc, #96]	; (800c5bc <prvAddNewTaskToReadyList+0xd4>)
 800c55a:	6013      	str	r3, [r2, #0]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c560:	4613      	mov	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4413      	add	r3, r2
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	4a15      	ldr	r2, [pc, #84]	; (800c5c0 <prvAddNewTaskToReadyList+0xd8>)
 800c56a:	441a      	add	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	3304      	adds	r3, #4
 800c570:	4619      	mov	r1, r3
 800c572:	4610      	mov	r0, r2
 800c574:	f7fe ff77 	bl	800b466 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c578:	f001 fc50 	bl	800de1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c57c:	4b0d      	ldr	r3, [pc, #52]	; (800c5b4 <prvAddNewTaskToReadyList+0xcc>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d00e      	beq.n	800c5a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c584:	4b0a      	ldr	r3, [pc, #40]	; (800c5b0 <prvAddNewTaskToReadyList+0xc8>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58e:	429a      	cmp	r2, r3
 800c590:	d207      	bcs.n	800c5a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c592:	4b0c      	ldr	r3, [pc, #48]	; (800c5c4 <prvAddNewTaskToReadyList+0xdc>)
 800c594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c598:	601a      	str	r2, [r3, #0]
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5a2:	bf00      	nop
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	20000d44 	.word	0x20000d44
 800c5b0:	20000870 	.word	0x20000870
 800c5b4:	20000d50 	.word	0x20000d50
 800c5b8:	20000d60 	.word	0x20000d60
 800c5bc:	20000d4c 	.word	0x20000d4c
 800c5c0:	20000874 	.word	0x20000874
 800c5c4:	e000ed04 	.word	0xe000ed04

0800c5c8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b08a      	sub	sp, #40	; 0x28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d10a      	bne.n	800c5f2 <vTaskDelayUntil+0x2a>
	__asm volatile
 800c5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	617b      	str	r3, [r7, #20]
}
 800c5ee:	bf00      	nop
 800c5f0:	e7fe      	b.n	800c5f0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d10a      	bne.n	800c60e <vTaskDelayUntil+0x46>
	__asm volatile
 800c5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fc:	f383 8811 	msr	BASEPRI, r3
 800c600:	f3bf 8f6f 	isb	sy
 800c604:	f3bf 8f4f 	dsb	sy
 800c608:	613b      	str	r3, [r7, #16]
}
 800c60a:	bf00      	nop
 800c60c:	e7fe      	b.n	800c60c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c60e:	4b2a      	ldr	r3, [pc, #168]	; (800c6b8 <vTaskDelayUntil+0xf0>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00a      	beq.n	800c62c <vTaskDelayUntil+0x64>
	__asm volatile
 800c616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61a:	f383 8811 	msr	BASEPRI, r3
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f3bf 8f4f 	dsb	sy
 800c626:	60fb      	str	r3, [r7, #12]
}
 800c628:	bf00      	nop
 800c62a:	e7fe      	b.n	800c62a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c62c:	f000 f8e4 	bl	800c7f8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c630:	4b22      	ldr	r3, [pc, #136]	; (800c6bc <vTaskDelayUntil+0xf4>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	683a      	ldr	r2, [r7, #0]
 800c63c:	4413      	add	r3, r2
 800c63e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	6a3a      	ldr	r2, [r7, #32]
 800c646:	429a      	cmp	r2, r3
 800c648:	d20b      	bcs.n	800c662 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	69fa      	ldr	r2, [r7, #28]
 800c650:	429a      	cmp	r2, r3
 800c652:	d211      	bcs.n	800c678 <vTaskDelayUntil+0xb0>
 800c654:	69fa      	ldr	r2, [r7, #28]
 800c656:	6a3b      	ldr	r3, [r7, #32]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d90d      	bls.n	800c678 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c65c:	2301      	movs	r3, #1
 800c65e:	627b      	str	r3, [r7, #36]	; 0x24
 800c660:	e00a      	b.n	800c678 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	69fa      	ldr	r2, [r7, #28]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d303      	bcc.n	800c674 <vTaskDelayUntil+0xac>
 800c66c:	69fa      	ldr	r2, [r7, #28]
 800c66e:	6a3b      	ldr	r3, [r7, #32]
 800c670:	429a      	cmp	r2, r3
 800c672:	d901      	bls.n	800c678 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c674:	2301      	movs	r3, #1
 800c676:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	69fa      	ldr	r2, [r7, #28]
 800c67c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c680:	2b00      	cmp	r3, #0
 800c682:	d006      	beq.n	800c692 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c684:	69fa      	ldr	r2, [r7, #28]
 800c686:	6a3b      	ldr	r3, [r7, #32]
 800c688:	1ad3      	subs	r3, r2, r3
 800c68a:	2100      	movs	r1, #0
 800c68c:	4618      	mov	r0, r3
 800c68e:	f000 ff41 	bl	800d514 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c692:	f000 f8bf 	bl	800c814 <xTaskResumeAll>
 800c696:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d107      	bne.n	800c6ae <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c69e:	4b08      	ldr	r3, [pc, #32]	; (800c6c0 <vTaskDelayUntil+0xf8>)
 800c6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a4:	601a      	str	r2, [r3, #0]
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6ae:	bf00      	nop
 800c6b0:	3728      	adds	r7, #40	; 0x28
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	20000d6c 	.word	0x20000d6c
 800c6bc:	20000d48 	.word	0x20000d48
 800c6c0:	e000ed04 	.word	0xe000ed04

0800c6c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d017      	beq.n	800c706 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c6d6:	4b13      	ldr	r3, [pc, #76]	; (800c724 <vTaskDelay+0x60>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00a      	beq.n	800c6f4 <vTaskDelay+0x30>
	__asm volatile
 800c6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	60bb      	str	r3, [r7, #8]
}
 800c6f0:	bf00      	nop
 800c6f2:	e7fe      	b.n	800c6f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c6f4:	f000 f880 	bl	800c7f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 ff0a 	bl	800d514 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c700:	f000 f888 	bl	800c814 <xTaskResumeAll>
 800c704:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d107      	bne.n	800c71c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c70c:	4b06      	ldr	r3, [pc, #24]	; (800c728 <vTaskDelay+0x64>)
 800c70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c712:	601a      	str	r2, [r3, #0]
 800c714:	f3bf 8f4f 	dsb	sy
 800c718:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c71c:	bf00      	nop
 800c71e:	3710      	adds	r7, #16
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	20000d6c 	.word	0x20000d6c
 800c728:	e000ed04 	.word	0xe000ed04

0800c72c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b08a      	sub	sp, #40	; 0x28
 800c730:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c732:	2300      	movs	r3, #0
 800c734:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c736:	2300      	movs	r3, #0
 800c738:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c73a:	463a      	mov	r2, r7
 800c73c:	1d39      	adds	r1, r7, #4
 800c73e:	f107 0308 	add.w	r3, r7, #8
 800c742:	4618      	mov	r0, r3
 800c744:	f7fe fe32 	bl	800b3ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	9202      	str	r2, [sp, #8]
 800c750:	9301      	str	r3, [sp, #4]
 800c752:	2300      	movs	r3, #0
 800c754:	9300      	str	r3, [sp, #0]
 800c756:	2300      	movs	r3, #0
 800c758:	460a      	mov	r2, r1
 800c75a:	4921      	ldr	r1, [pc, #132]	; (800c7e0 <vTaskStartScheduler+0xb4>)
 800c75c:	4821      	ldr	r0, [pc, #132]	; (800c7e4 <vTaskStartScheduler+0xb8>)
 800c75e:	f7ff fd9b 	bl	800c298 <xTaskCreateStatic>
 800c762:	4603      	mov	r3, r0
 800c764:	4a20      	ldr	r2, [pc, #128]	; (800c7e8 <vTaskStartScheduler+0xbc>)
 800c766:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c768:	4b1f      	ldr	r3, [pc, #124]	; (800c7e8 <vTaskStartScheduler+0xbc>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d002      	beq.n	800c776 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c770:	2301      	movs	r3, #1
 800c772:	617b      	str	r3, [r7, #20]
 800c774:	e001      	b.n	800c77a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c776:	2300      	movs	r3, #0
 800c778:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d102      	bne.n	800c786 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c780:	f000 ff1c 	bl	800d5bc <xTimerCreateTimerTask>
 800c784:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d116      	bne.n	800c7ba <vTaskStartScheduler+0x8e>
	__asm volatile
 800c78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c790:	f383 8811 	msr	BASEPRI, r3
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	613b      	str	r3, [r7, #16]
}
 800c79e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c7a0:	4b12      	ldr	r3, [pc, #72]	; (800c7ec <vTaskStartScheduler+0xc0>)
 800c7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c7a8:	4b11      	ldr	r3, [pc, #68]	; (800c7f0 <vTaskStartScheduler+0xc4>)
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800c7ae:	4b11      	ldr	r3, [pc, #68]	; (800c7f4 <vTaskStartScheduler+0xc8>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c7b4:	f001 fa90 	bl	800dcd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c7b8:	e00e      	b.n	800c7d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c0:	d10a      	bne.n	800c7d8 <vTaskStartScheduler+0xac>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c6:	f383 8811 	msr	BASEPRI, r3
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	60fb      	str	r3, [r7, #12]
}
 800c7d4:	bf00      	nop
 800c7d6:	e7fe      	b.n	800c7d6 <vTaskStartScheduler+0xaa>
}
 800c7d8:	bf00      	nop
 800c7da:	3718      	adds	r7, #24
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	0800efac 	.word	0x0800efac
 800c7e4:	0800ce11 	.word	0x0800ce11
 800c7e8:	20000d68 	.word	0x20000d68
 800c7ec:	20000d64 	.word	0x20000d64
 800c7f0:	20000d50 	.word	0x20000d50
 800c7f4:	20000d48 	.word	0x20000d48

0800c7f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c7fc:	4b04      	ldr	r3, [pc, #16]	; (800c810 <vTaskSuspendAll+0x18>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	3301      	adds	r3, #1
 800c802:	4a03      	ldr	r2, [pc, #12]	; (800c810 <vTaskSuspendAll+0x18>)
 800c804:	6013      	str	r3, [r2, #0]
}
 800c806:	bf00      	nop
 800c808:	46bd      	mov	sp, r7
 800c80a:	bc80      	pop	{r7}
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	20000d6c 	.word	0x20000d6c

0800c814 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c81a:	2300      	movs	r3, #0
 800c81c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c81e:	2300      	movs	r3, #0
 800c820:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c822:	4b42      	ldr	r3, [pc, #264]	; (800c92c <xTaskResumeAll+0x118>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d10a      	bne.n	800c840 <xTaskResumeAll+0x2c>
	__asm volatile
 800c82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82e:	f383 8811 	msr	BASEPRI, r3
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	603b      	str	r3, [r7, #0]
}
 800c83c:	bf00      	nop
 800c83e:	e7fe      	b.n	800c83e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c840:	f001 fabc 	bl	800ddbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c844:	4b39      	ldr	r3, [pc, #228]	; (800c92c <xTaskResumeAll+0x118>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	3b01      	subs	r3, #1
 800c84a:	4a38      	ldr	r2, [pc, #224]	; (800c92c <xTaskResumeAll+0x118>)
 800c84c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c84e:	4b37      	ldr	r3, [pc, #220]	; (800c92c <xTaskResumeAll+0x118>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d162      	bne.n	800c91c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c856:	4b36      	ldr	r3, [pc, #216]	; (800c930 <xTaskResumeAll+0x11c>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d05e      	beq.n	800c91c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c85e:	e02f      	b.n	800c8c0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800c860:	4b34      	ldr	r3, [pc, #208]	; (800c934 <xTaskResumeAll+0x120>)
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	3318      	adds	r3, #24
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7fe fe55 	bl	800b51c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	3304      	adds	r3, #4
 800c876:	4618      	mov	r0, r3
 800c878:	f7fe fe50 	bl	800b51c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c880:	4b2d      	ldr	r3, [pc, #180]	; (800c938 <xTaskResumeAll+0x124>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	429a      	cmp	r2, r3
 800c886:	d903      	bls.n	800c890 <xTaskResumeAll+0x7c>
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88c:	4a2a      	ldr	r2, [pc, #168]	; (800c938 <xTaskResumeAll+0x124>)
 800c88e:	6013      	str	r3, [r2, #0]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c894:	4613      	mov	r3, r2
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	4413      	add	r3, r2
 800c89a:	009b      	lsls	r3, r3, #2
 800c89c:	4a27      	ldr	r2, [pc, #156]	; (800c93c <xTaskResumeAll+0x128>)
 800c89e:	441a      	add	r2, r3
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	3304      	adds	r3, #4
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	4610      	mov	r0, r2
 800c8a8:	f7fe fddd 	bl	800b466 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b0:	4b23      	ldr	r3, [pc, #140]	; (800c940 <xTaskResumeAll+0x12c>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d302      	bcc.n	800c8c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c8ba:	4b22      	ldr	r3, [pc, #136]	; (800c944 <xTaskResumeAll+0x130>)
 800c8bc:	2201      	movs	r2, #1
 800c8be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8c0:	4b1c      	ldr	r3, [pc, #112]	; (800c934 <xTaskResumeAll+0x120>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d1cb      	bne.n	800c860 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d001      	beq.n	800c8d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c8ce:	f000 fb8d 	bl	800cfec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c8d2:	4b1d      	ldr	r3, [pc, #116]	; (800c948 <xTaskResumeAll+0x134>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d010      	beq.n	800c900 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c8de:	f000 f845 	bl	800c96c <xTaskIncrementTick>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d002      	beq.n	800c8ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c8e8:	4b16      	ldr	r3, [pc, #88]	; (800c944 <xTaskResumeAll+0x130>)
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1f1      	bne.n	800c8de <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800c8fa:	4b13      	ldr	r3, [pc, #76]	; (800c948 <xTaskResumeAll+0x134>)
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c900:	4b10      	ldr	r3, [pc, #64]	; (800c944 <xTaskResumeAll+0x130>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d009      	beq.n	800c91c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c908:	2301      	movs	r3, #1
 800c90a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c90c:	4b0f      	ldr	r3, [pc, #60]	; (800c94c <xTaskResumeAll+0x138>)
 800c90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c912:	601a      	str	r2, [r3, #0]
 800c914:	f3bf 8f4f 	dsb	sy
 800c918:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c91c:	f001 fa7e 	bl	800de1c <vPortExitCritical>

	return xAlreadyYielded;
 800c920:	68bb      	ldr	r3, [r7, #8]
}
 800c922:	4618      	mov	r0, r3
 800c924:	3710      	adds	r7, #16
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	20000d6c 	.word	0x20000d6c
 800c930:	20000d44 	.word	0x20000d44
 800c934:	20000d04 	.word	0x20000d04
 800c938:	20000d4c 	.word	0x20000d4c
 800c93c:	20000874 	.word	0x20000874
 800c940:	20000870 	.word	0x20000870
 800c944:	20000d58 	.word	0x20000d58
 800c948:	20000d54 	.word	0x20000d54
 800c94c:	e000ed04 	.word	0xe000ed04

0800c950 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c956:	4b04      	ldr	r3, [pc, #16]	; (800c968 <xTaskGetTickCount+0x18>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c95c:	687b      	ldr	r3, [r7, #4]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	370c      	adds	r7, #12
 800c962:	46bd      	mov	sp, r7
 800c964:	bc80      	pop	{r7}
 800c966:	4770      	bx	lr
 800c968:	20000d48 	.word	0x20000d48

0800c96c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b086      	sub	sp, #24
 800c970:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c972:	2300      	movs	r3, #0
 800c974:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c976:	4b51      	ldr	r3, [pc, #324]	; (800cabc <xTaskIncrementTick+0x150>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	f040 808e 	bne.w	800ca9c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c980:	4b4f      	ldr	r3, [pc, #316]	; (800cac0 <xTaskIncrementTick+0x154>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	3301      	adds	r3, #1
 800c986:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c988:	4a4d      	ldr	r2, [pc, #308]	; (800cac0 <xTaskIncrementTick+0x154>)
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d120      	bne.n	800c9d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c994:	4b4b      	ldr	r3, [pc, #300]	; (800cac4 <xTaskIncrementTick+0x158>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d00a      	beq.n	800c9b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	603b      	str	r3, [r7, #0]
}
 800c9b0:	bf00      	nop
 800c9b2:	e7fe      	b.n	800c9b2 <xTaskIncrementTick+0x46>
 800c9b4:	4b43      	ldr	r3, [pc, #268]	; (800cac4 <xTaskIncrementTick+0x158>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	60fb      	str	r3, [r7, #12]
 800c9ba:	4b43      	ldr	r3, [pc, #268]	; (800cac8 <xTaskIncrementTick+0x15c>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4a41      	ldr	r2, [pc, #260]	; (800cac4 <xTaskIncrementTick+0x158>)
 800c9c0:	6013      	str	r3, [r2, #0]
 800c9c2:	4a41      	ldr	r2, [pc, #260]	; (800cac8 <xTaskIncrementTick+0x15c>)
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6013      	str	r3, [r2, #0]
 800c9c8:	4b40      	ldr	r3, [pc, #256]	; (800cacc <xTaskIncrementTick+0x160>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	4a3f      	ldr	r2, [pc, #252]	; (800cacc <xTaskIncrementTick+0x160>)
 800c9d0:	6013      	str	r3, [r2, #0]
 800c9d2:	f000 fb0b 	bl	800cfec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c9d6:	4b3e      	ldr	r3, [pc, #248]	; (800cad0 <xTaskIncrementTick+0x164>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	693a      	ldr	r2, [r7, #16]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d34e      	bcc.n	800ca7e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9e0:	4b38      	ldr	r3, [pc, #224]	; (800cac4 <xTaskIncrementTick+0x158>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d101      	bne.n	800c9ee <xTaskIncrementTick+0x82>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e000      	b.n	800c9f0 <xTaskIncrementTick+0x84>
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d004      	beq.n	800c9fe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9f4:	4b36      	ldr	r3, [pc, #216]	; (800cad0 <xTaskIncrementTick+0x164>)
 800c9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9fa:	601a      	str	r2, [r3, #0]
					break;
 800c9fc:	e03f      	b.n	800ca7e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c9fe:	4b31      	ldr	r3, [pc, #196]	; (800cac4 <xTaskIncrementTick+0x158>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ca0e:	693a      	ldr	r2, [r7, #16]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d203      	bcs.n	800ca1e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ca16:	4a2e      	ldr	r2, [pc, #184]	; (800cad0 <xTaskIncrementTick+0x164>)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6013      	str	r3, [r2, #0]
						break;
 800ca1c:	e02f      	b.n	800ca7e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	3304      	adds	r3, #4
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7fe fd7a 	bl	800b51c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d004      	beq.n	800ca3a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	3318      	adds	r3, #24
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7fe fd71 	bl	800b51c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca3e:	4b25      	ldr	r3, [pc, #148]	; (800cad4 <xTaskIncrementTick+0x168>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d903      	bls.n	800ca4e <xTaskIncrementTick+0xe2>
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4a:	4a22      	ldr	r2, [pc, #136]	; (800cad4 <xTaskIncrementTick+0x168>)
 800ca4c:	6013      	str	r3, [r2, #0]
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca52:	4613      	mov	r3, r2
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	4413      	add	r3, r2
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	4a1f      	ldr	r2, [pc, #124]	; (800cad8 <xTaskIncrementTick+0x16c>)
 800ca5c:	441a      	add	r2, r3
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	3304      	adds	r3, #4
 800ca62:	4619      	mov	r1, r3
 800ca64:	4610      	mov	r0, r2
 800ca66:	f7fe fcfe 	bl	800b466 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6e:	4b1b      	ldr	r3, [pc, #108]	; (800cadc <xTaskIncrementTick+0x170>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d3b3      	bcc.n	800c9e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca7c:	e7b0      	b.n	800c9e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca7e:	4b17      	ldr	r3, [pc, #92]	; (800cadc <xTaskIncrementTick+0x170>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca84:	4914      	ldr	r1, [pc, #80]	; (800cad8 <xTaskIncrementTick+0x16c>)
 800ca86:	4613      	mov	r3, r2
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4413      	add	r3, r2
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	440b      	add	r3, r1
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d907      	bls.n	800caa6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ca96:	2301      	movs	r3, #1
 800ca98:	617b      	str	r3, [r7, #20]
 800ca9a:	e004      	b.n	800caa6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ca9c:	4b10      	ldr	r3, [pc, #64]	; (800cae0 <xTaskIncrementTick+0x174>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	3301      	adds	r3, #1
 800caa2:	4a0f      	ldr	r2, [pc, #60]	; (800cae0 <xTaskIncrementTick+0x174>)
 800caa4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800caa6:	4b0f      	ldr	r3, [pc, #60]	; (800cae4 <xTaskIncrementTick+0x178>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d001      	beq.n	800cab2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800caae:	2301      	movs	r3, #1
 800cab0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cab2:	697b      	ldr	r3, [r7, #20]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3718      	adds	r7, #24
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	20000d6c 	.word	0x20000d6c
 800cac0:	20000d48 	.word	0x20000d48
 800cac4:	20000cfc 	.word	0x20000cfc
 800cac8:	20000d00 	.word	0x20000d00
 800cacc:	20000d5c 	.word	0x20000d5c
 800cad0:	20000d64 	.word	0x20000d64
 800cad4:	20000d4c 	.word	0x20000d4c
 800cad8:	20000874 	.word	0x20000874
 800cadc:	20000870 	.word	0x20000870
 800cae0:	20000d54 	.word	0x20000d54
 800cae4:	20000d58 	.word	0x20000d58

0800cae8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800caee:	4b27      	ldr	r3, [pc, #156]	; (800cb8c <vTaskSwitchContext+0xa4>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d003      	beq.n	800cafe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800caf6:	4b26      	ldr	r3, [pc, #152]	; (800cb90 <vTaskSwitchContext+0xa8>)
 800caf8:	2201      	movs	r2, #1
 800cafa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cafc:	e041      	b.n	800cb82 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800cafe:	4b24      	ldr	r3, [pc, #144]	; (800cb90 <vTaskSwitchContext+0xa8>)
 800cb00:	2200      	movs	r2, #0
 800cb02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800cb04:	4b23      	ldr	r3, [pc, #140]	; (800cb94 <vTaskSwitchContext+0xac>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	60fb      	str	r3, [r7, #12]
 800cb0a:	e010      	b.n	800cb2e <vTaskSwitchContext+0x46>
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d10a      	bne.n	800cb28 <vTaskSwitchContext+0x40>
	__asm volatile
 800cb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb16:	f383 8811 	msr	BASEPRI, r3
 800cb1a:	f3bf 8f6f 	isb	sy
 800cb1e:	f3bf 8f4f 	dsb	sy
 800cb22:	607b      	str	r3, [r7, #4]
}
 800cb24:	bf00      	nop
 800cb26:	e7fe      	b.n	800cb26 <vTaskSwitchContext+0x3e>
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	60fb      	str	r3, [r7, #12]
 800cb2e:	491a      	ldr	r1, [pc, #104]	; (800cb98 <vTaskSwitchContext+0xb0>)
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	4613      	mov	r3, r2
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	4413      	add	r3, r2
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	440b      	add	r3, r1
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d0e4      	beq.n	800cb0c <vTaskSwitchContext+0x24>
 800cb42:	68fa      	ldr	r2, [r7, #12]
 800cb44:	4613      	mov	r3, r2
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	4413      	add	r3, r2
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	4a12      	ldr	r2, [pc, #72]	; (800cb98 <vTaskSwitchContext+0xb0>)
 800cb4e:	4413      	add	r3, r2
 800cb50:	60bb      	str	r3, [r7, #8]
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	685a      	ldr	r2, [r3, #4]
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	605a      	str	r2, [r3, #4]
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	685a      	ldr	r2, [r3, #4]
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	3308      	adds	r3, #8
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d104      	bne.n	800cb72 <vTaskSwitchContext+0x8a>
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	685a      	ldr	r2, [r3, #4]
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	605a      	str	r2, [r3, #4]
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	4a08      	ldr	r2, [pc, #32]	; (800cb9c <vTaskSwitchContext+0xb4>)
 800cb7a:	6013      	str	r3, [r2, #0]
 800cb7c:	4a05      	ldr	r2, [pc, #20]	; (800cb94 <vTaskSwitchContext+0xac>)
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6013      	str	r3, [r2, #0]
}
 800cb82:	bf00      	nop
 800cb84:	3714      	adds	r7, #20
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bc80      	pop	{r7}
 800cb8a:	4770      	bx	lr
 800cb8c:	20000d6c 	.word	0x20000d6c
 800cb90:	20000d58 	.word	0x20000d58
 800cb94:	20000d4c 	.word	0x20000d4c
 800cb98:	20000874 	.word	0x20000874
 800cb9c:	20000870 	.word	0x20000870

0800cba0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d10a      	bne.n	800cbc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb4:	f383 8811 	msr	BASEPRI, r3
 800cbb8:	f3bf 8f6f 	isb	sy
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	60fb      	str	r3, [r7, #12]
}
 800cbc2:	bf00      	nop
 800cbc4:	e7fe      	b.n	800cbc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cbc6:	4b07      	ldr	r3, [pc, #28]	; (800cbe4 <vTaskPlaceOnEventList+0x44>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	3318      	adds	r3, #24
 800cbcc:	4619      	mov	r1, r3
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f7fe fc6c 	bl	800b4ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cbd4:	2101      	movs	r1, #1
 800cbd6:	6838      	ldr	r0, [r7, #0]
 800cbd8:	f000 fc9c 	bl	800d514 <prvAddCurrentTaskToDelayedList>
}
 800cbdc:	bf00      	nop
 800cbde:	3710      	adds	r7, #16
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	20000870 	.word	0x20000870

0800cbe8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b086      	sub	sp, #24
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d10a      	bne.n	800cc10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfe:	f383 8811 	msr	BASEPRI, r3
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	f3bf 8f4f 	dsb	sy
 800cc0a:	617b      	str	r3, [r7, #20]
}
 800cc0c:	bf00      	nop
 800cc0e:	e7fe      	b.n	800cc0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc10:	4b0a      	ldr	r3, [pc, #40]	; (800cc3c <vTaskPlaceOnEventListRestricted+0x54>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	3318      	adds	r3, #24
 800cc16:	4619      	mov	r1, r3
 800cc18:	68f8      	ldr	r0, [r7, #12]
 800cc1a:	f7fe fc24 	bl	800b466 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d002      	beq.n	800cc2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cc24:	f04f 33ff 	mov.w	r3, #4294967295
 800cc28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cc2a:	6879      	ldr	r1, [r7, #4]
 800cc2c:	68b8      	ldr	r0, [r7, #8]
 800cc2e:	f000 fc71 	bl	800d514 <prvAddCurrentTaskToDelayedList>
	}
 800cc32:	bf00      	nop
 800cc34:	3718      	adds	r7, #24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	20000870 	.word	0x20000870

0800cc40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b086      	sub	sp, #24
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d10a      	bne.n	800cc6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5a:	f383 8811 	msr	BASEPRI, r3
 800cc5e:	f3bf 8f6f 	isb	sy
 800cc62:	f3bf 8f4f 	dsb	sy
 800cc66:	60fb      	str	r3, [r7, #12]
}
 800cc68:	bf00      	nop
 800cc6a:	e7fe      	b.n	800cc6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	3318      	adds	r3, #24
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7fe fc53 	bl	800b51c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc76:	4b1e      	ldr	r3, [pc, #120]	; (800ccf0 <xTaskRemoveFromEventList+0xb0>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d11d      	bne.n	800ccba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	3304      	adds	r3, #4
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fe fc4a 	bl	800b51c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc8c:	4b19      	ldr	r3, [pc, #100]	; (800ccf4 <xTaskRemoveFromEventList+0xb4>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d903      	bls.n	800cc9c <xTaskRemoveFromEventList+0x5c>
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc98:	4a16      	ldr	r2, [pc, #88]	; (800ccf4 <xTaskRemoveFromEventList+0xb4>)
 800cc9a:	6013      	str	r3, [r2, #0]
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca0:	4613      	mov	r3, r2
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	4413      	add	r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4a13      	ldr	r2, [pc, #76]	; (800ccf8 <xTaskRemoveFromEventList+0xb8>)
 800ccaa:	441a      	add	r2, r3
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	3304      	adds	r3, #4
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	4610      	mov	r0, r2
 800ccb4:	f7fe fbd7 	bl	800b466 <vListInsertEnd>
 800ccb8:	e005      	b.n	800ccc6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	3318      	adds	r3, #24
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	480e      	ldr	r0, [pc, #56]	; (800ccfc <xTaskRemoveFromEventList+0xbc>)
 800ccc2:	f7fe fbd0 	bl	800b466 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccca:	4b0d      	ldr	r3, [pc, #52]	; (800cd00 <xTaskRemoveFromEventList+0xc0>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d905      	bls.n	800cce0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ccd8:	4b0a      	ldr	r3, [pc, #40]	; (800cd04 <xTaskRemoveFromEventList+0xc4>)
 800ccda:	2201      	movs	r2, #1
 800ccdc:	601a      	str	r2, [r3, #0]
 800ccde:	e001      	b.n	800cce4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cce0:	2300      	movs	r3, #0
 800cce2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800cce4:	697b      	ldr	r3, [r7, #20]
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3718      	adds	r7, #24
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	20000d6c 	.word	0x20000d6c
 800ccf4:	20000d4c 	.word	0x20000d4c
 800ccf8:	20000874 	.word	0x20000874
 800ccfc:	20000d04 	.word	0x20000d04
 800cd00:	20000870 	.word	0x20000870
 800cd04:	20000d58 	.word	0x20000d58

0800cd08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cd10:	4b06      	ldr	r3, [pc, #24]	; (800cd2c <vTaskInternalSetTimeOutState+0x24>)
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cd18:	4b05      	ldr	r3, [pc, #20]	; (800cd30 <vTaskInternalSetTimeOutState+0x28>)
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	605a      	str	r2, [r3, #4]
}
 800cd20:	bf00      	nop
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bc80      	pop	{r7}
 800cd28:	4770      	bx	lr
 800cd2a:	bf00      	nop
 800cd2c:	20000d5c 	.word	0x20000d5c
 800cd30:	20000d48 	.word	0x20000d48

0800cd34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b088      	sub	sp, #32
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d10a      	bne.n	800cd5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd48:	f383 8811 	msr	BASEPRI, r3
 800cd4c:	f3bf 8f6f 	isb	sy
 800cd50:	f3bf 8f4f 	dsb	sy
 800cd54:	613b      	str	r3, [r7, #16]
}
 800cd56:	bf00      	nop
 800cd58:	e7fe      	b.n	800cd58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d10a      	bne.n	800cd76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	60fb      	str	r3, [r7, #12]
}
 800cd72:	bf00      	nop
 800cd74:	e7fe      	b.n	800cd74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cd76:	f001 f821 	bl	800ddbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cd7a:	4b1d      	ldr	r3, [pc, #116]	; (800cdf0 <xTaskCheckForTimeOut+0xbc>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	69ba      	ldr	r2, [r7, #24]
 800cd86:	1ad3      	subs	r3, r2, r3
 800cd88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd92:	d102      	bne.n	800cd9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cd94:	2300      	movs	r3, #0
 800cd96:	61fb      	str	r3, [r7, #28]
 800cd98:	e023      	b.n	800cde2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	4b15      	ldr	r3, [pc, #84]	; (800cdf4 <xTaskCheckForTimeOut+0xc0>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d007      	beq.n	800cdb6 <xTaskCheckForTimeOut+0x82>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	69ba      	ldr	r2, [r7, #24]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d302      	bcc.n	800cdb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	61fb      	str	r3, [r7, #28]
 800cdb4:	e015      	b.n	800cde2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	697a      	ldr	r2, [r7, #20]
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d20b      	bcs.n	800cdd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	681a      	ldr	r2, [r3, #0]
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	1ad2      	subs	r2, r2, r3
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f7ff ff9b 	bl	800cd08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	61fb      	str	r3, [r7, #28]
 800cdd6:	e004      	b.n	800cde2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	2200      	movs	r2, #0
 800cddc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cdde:	2301      	movs	r3, #1
 800cde0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cde2:	f001 f81b 	bl	800de1c <vPortExitCritical>

	return xReturn;
 800cde6:	69fb      	ldr	r3, [r7, #28]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3720      	adds	r7, #32
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	20000d48 	.word	0x20000d48
 800cdf4:	20000d5c 	.word	0x20000d5c

0800cdf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cdfc:	4b03      	ldr	r3, [pc, #12]	; (800ce0c <vTaskMissedYield+0x14>)
 800cdfe:	2201      	movs	r2, #1
 800ce00:	601a      	str	r2, [r3, #0]
}
 800ce02:	bf00      	nop
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bc80      	pop	{r7}
 800ce08:	4770      	bx	lr
 800ce0a:	bf00      	nop
 800ce0c:	20000d58 	.word	0x20000d58

0800ce10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ce18:	f000 f852 	bl	800cec0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ce1c:	4b06      	ldr	r3, [pc, #24]	; (800ce38 <prvIdleTask+0x28>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d9f9      	bls.n	800ce18 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ce24:	4b05      	ldr	r3, [pc, #20]	; (800ce3c <prvIdleTask+0x2c>)
 800ce26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce2a:	601a      	str	r2, [r3, #0]
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ce34:	e7f0      	b.n	800ce18 <prvIdleTask+0x8>
 800ce36:	bf00      	nop
 800ce38:	20000874 	.word	0x20000874
 800ce3c:	e000ed04 	.word	0xe000ed04

0800ce40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce46:	2300      	movs	r3, #0
 800ce48:	607b      	str	r3, [r7, #4]
 800ce4a:	e00c      	b.n	800ce66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	4613      	mov	r3, r2
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	4413      	add	r3, r2
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	4a12      	ldr	r2, [pc, #72]	; (800cea0 <prvInitialiseTaskLists+0x60>)
 800ce58:	4413      	add	r3, r2
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7fe fad8 	bl	800b410 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	3301      	adds	r3, #1
 800ce64:	607b      	str	r3, [r7, #4]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2b37      	cmp	r3, #55	; 0x37
 800ce6a:	d9ef      	bls.n	800ce4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ce6c:	480d      	ldr	r0, [pc, #52]	; (800cea4 <prvInitialiseTaskLists+0x64>)
 800ce6e:	f7fe facf 	bl	800b410 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce72:	480d      	ldr	r0, [pc, #52]	; (800cea8 <prvInitialiseTaskLists+0x68>)
 800ce74:	f7fe facc 	bl	800b410 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce78:	480c      	ldr	r0, [pc, #48]	; (800ceac <prvInitialiseTaskLists+0x6c>)
 800ce7a:	f7fe fac9 	bl	800b410 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ce7e:	480c      	ldr	r0, [pc, #48]	; (800ceb0 <prvInitialiseTaskLists+0x70>)
 800ce80:	f7fe fac6 	bl	800b410 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ce84:	480b      	ldr	r0, [pc, #44]	; (800ceb4 <prvInitialiseTaskLists+0x74>)
 800ce86:	f7fe fac3 	bl	800b410 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce8a:	4b0b      	ldr	r3, [pc, #44]	; (800ceb8 <prvInitialiseTaskLists+0x78>)
 800ce8c:	4a05      	ldr	r2, [pc, #20]	; (800cea4 <prvInitialiseTaskLists+0x64>)
 800ce8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce90:	4b0a      	ldr	r3, [pc, #40]	; (800cebc <prvInitialiseTaskLists+0x7c>)
 800ce92:	4a05      	ldr	r2, [pc, #20]	; (800cea8 <prvInitialiseTaskLists+0x68>)
 800ce94:	601a      	str	r2, [r3, #0]
}
 800ce96:	bf00      	nop
 800ce98:	3708      	adds	r7, #8
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	20000874 	.word	0x20000874
 800cea4:	20000cd4 	.word	0x20000cd4
 800cea8:	20000ce8 	.word	0x20000ce8
 800ceac:	20000d04 	.word	0x20000d04
 800ceb0:	20000d18 	.word	0x20000d18
 800ceb4:	20000d30 	.word	0x20000d30
 800ceb8:	20000cfc 	.word	0x20000cfc
 800cebc:	20000d00 	.word	0x20000d00

0800cec0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cec6:	e019      	b.n	800cefc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cec8:	f000 ff78 	bl	800ddbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800cecc:	4b10      	ldr	r3, [pc, #64]	; (800cf10 <prvCheckTasksWaitingTermination+0x50>)
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	3304      	adds	r3, #4
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7fe fb1f 	bl	800b51c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cede:	4b0d      	ldr	r3, [pc, #52]	; (800cf14 <prvCheckTasksWaitingTermination+0x54>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	3b01      	subs	r3, #1
 800cee4:	4a0b      	ldr	r2, [pc, #44]	; (800cf14 <prvCheckTasksWaitingTermination+0x54>)
 800cee6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cee8:	4b0b      	ldr	r3, [pc, #44]	; (800cf18 <prvCheckTasksWaitingTermination+0x58>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	3b01      	subs	r3, #1
 800ceee:	4a0a      	ldr	r2, [pc, #40]	; (800cf18 <prvCheckTasksWaitingTermination+0x58>)
 800cef0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cef2:	f000 ff93 	bl	800de1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f848 	bl	800cf8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cefc:	4b06      	ldr	r3, [pc, #24]	; (800cf18 <prvCheckTasksWaitingTermination+0x58>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d1e1      	bne.n	800cec8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop
 800cf08:	3708      	adds	r7, #8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	20000d18 	.word	0x20000d18
 800cf14:	20000d44 	.word	0x20000d44
 800cf18:	20000d2c 	.word	0x20000d2c

0800cf1c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800cf24:	2300      	movs	r3, #0
 800cf26:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800cf28:	e005      	b.n	800cf36 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	3301      	adds	r3, #1
 800cf34:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	2ba5      	cmp	r3, #165	; 0xa5
 800cf3c:	d0f5      	beq.n	800cf2a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	089b      	lsrs	r3, r3, #2
 800cf42:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	b29b      	uxth	r3, r3
	}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3714      	adds	r7, #20
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bc80      	pop	{r7}
 800cf50:	4770      	bx	lr
	...

0800cf54 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b086      	sub	sp, #24
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d102      	bne.n	800cf68 <uxTaskGetStackHighWaterMark+0x14>
 800cf62:	4b09      	ldr	r3, [pc, #36]	; (800cf88 <uxTaskGetStackHighWaterMark+0x34>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	e000      	b.n	800cf6a <uxTaskGetStackHighWaterMark+0x16>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf70:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800cf72:	6938      	ldr	r0, [r7, #16]
 800cf74:	f7ff ffd2 	bl	800cf1c <prvTaskCheckFreeStackSpace>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
	}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3718      	adds	r7, #24
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	20000870 	.word	0x20000870

0800cf8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d108      	bne.n	800cfb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f001 f8ce 	bl	800e144 <vPortFree>
				vPortFree( pxTCB );
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f001 f8cb 	bl	800e144 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cfae:	e018      	b.n	800cfe2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d103      	bne.n	800cfc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f001 f8c2 	bl	800e144 <vPortFree>
	}
 800cfc0:	e00f      	b.n	800cfe2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cfc8:	2b02      	cmp	r3, #2
 800cfca:	d00a      	beq.n	800cfe2 <prvDeleteTCB+0x56>
	__asm volatile
 800cfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd0:	f383 8811 	msr	BASEPRI, r3
 800cfd4:	f3bf 8f6f 	isb	sy
 800cfd8:	f3bf 8f4f 	dsb	sy
 800cfdc:	60fb      	str	r3, [r7, #12]
}
 800cfde:	bf00      	nop
 800cfe0:	e7fe      	b.n	800cfe0 <prvDeleteTCB+0x54>
	}
 800cfe2:	bf00      	nop
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
	...

0800cfec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cff2:	4b0e      	ldr	r3, [pc, #56]	; (800d02c <prvResetNextTaskUnblockTime+0x40>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d101      	bne.n	800d000 <prvResetNextTaskUnblockTime+0x14>
 800cffc:	2301      	movs	r3, #1
 800cffe:	e000      	b.n	800d002 <prvResetNextTaskUnblockTime+0x16>
 800d000:	2300      	movs	r3, #0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d004      	beq.n	800d010 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d006:	4b0a      	ldr	r3, [pc, #40]	; (800d030 <prvResetNextTaskUnblockTime+0x44>)
 800d008:	f04f 32ff 	mov.w	r2, #4294967295
 800d00c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d00e:	e008      	b.n	800d022 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d010:	4b06      	ldr	r3, [pc, #24]	; (800d02c <prvResetNextTaskUnblockTime+0x40>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	68db      	ldr	r3, [r3, #12]
 800d018:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	4a04      	ldr	r2, [pc, #16]	; (800d030 <prvResetNextTaskUnblockTime+0x44>)
 800d020:	6013      	str	r3, [r2, #0]
}
 800d022:	bf00      	nop
 800d024:	370c      	adds	r7, #12
 800d026:	46bd      	mov	sp, r7
 800d028:	bc80      	pop	{r7}
 800d02a:	4770      	bx	lr
 800d02c:	20000cfc 	.word	0x20000cfc
 800d030:	20000d64 	.word	0x20000d64

0800d034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d03a:	4b0b      	ldr	r3, [pc, #44]	; (800d068 <xTaskGetSchedulerState+0x34>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d102      	bne.n	800d048 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d042:	2301      	movs	r3, #1
 800d044:	607b      	str	r3, [r7, #4]
 800d046:	e008      	b.n	800d05a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d048:	4b08      	ldr	r3, [pc, #32]	; (800d06c <xTaskGetSchedulerState+0x38>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d102      	bne.n	800d056 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d050:	2302      	movs	r3, #2
 800d052:	607b      	str	r3, [r7, #4]
 800d054:	e001      	b.n	800d05a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d056:	2300      	movs	r3, #0
 800d058:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d05a:	687b      	ldr	r3, [r7, #4]
	}
 800d05c:	4618      	mov	r0, r3
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	bc80      	pop	{r7}
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop
 800d068:	20000d50 	.word	0x20000d50
 800d06c:	20000d6c 	.word	0x20000d6c

0800d070 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d07c:	2300      	movs	r3, #0
 800d07e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d056      	beq.n	800d134 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d08a:	4b2d      	ldr	r3, [pc, #180]	; (800d140 <xTaskPriorityInherit+0xd0>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d090:	429a      	cmp	r2, r3
 800d092:	d246      	bcs.n	800d122 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	699b      	ldr	r3, [r3, #24]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	db06      	blt.n	800d0aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d09c:	4b28      	ldr	r3, [pc, #160]	; (800d140 <xTaskPriorityInherit+0xd0>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	6959      	ldr	r1, [r3, #20]
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	4413      	add	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	4a22      	ldr	r2, [pc, #136]	; (800d144 <xTaskPriorityInherit+0xd4>)
 800d0bc:	4413      	add	r3, r2
 800d0be:	4299      	cmp	r1, r3
 800d0c0:	d101      	bne.n	800d0c6 <xTaskPriorityInherit+0x56>
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	e000      	b.n	800d0c8 <xTaskPriorityInherit+0x58>
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d022      	beq.n	800d112 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	3304      	adds	r3, #4
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7fe fa23 	bl	800b51c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d0d6:	4b1a      	ldr	r3, [pc, #104]	; (800d140 <xTaskPriorityInherit+0xd0>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0e4:	4b18      	ldr	r3, [pc, #96]	; (800d148 <xTaskPriorityInherit+0xd8>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d903      	bls.n	800d0f4 <xTaskPriorityInherit+0x84>
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f0:	4a15      	ldr	r2, [pc, #84]	; (800d148 <xTaskPriorityInherit+0xd8>)
 800d0f2:	6013      	str	r3, [r2, #0]
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	4413      	add	r3, r2
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	4a10      	ldr	r2, [pc, #64]	; (800d144 <xTaskPriorityInherit+0xd4>)
 800d102:	441a      	add	r2, r3
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	3304      	adds	r3, #4
 800d108:	4619      	mov	r1, r3
 800d10a:	4610      	mov	r0, r2
 800d10c:	f7fe f9ab 	bl	800b466 <vListInsertEnd>
 800d110:	e004      	b.n	800d11c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d112:	4b0b      	ldr	r3, [pc, #44]	; (800d140 <xTaskPriorityInherit+0xd0>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d11c:	2301      	movs	r3, #1
 800d11e:	60fb      	str	r3, [r7, #12]
 800d120:	e008      	b.n	800d134 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d126:	4b06      	ldr	r3, [pc, #24]	; (800d140 <xTaskPriorityInherit+0xd0>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d201      	bcs.n	800d134 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d130:	2301      	movs	r3, #1
 800d132:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d134:	68fb      	ldr	r3, [r7, #12]
	}
 800d136:	4618      	mov	r0, r3
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	20000870 	.word	0x20000870
 800d144:	20000874 	.word	0x20000874
 800d148:	20000d4c 	.word	0x20000d4c

0800d14c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d158:	2300      	movs	r3, #0
 800d15a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d056      	beq.n	800d210 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d162:	4b2e      	ldr	r3, [pc, #184]	; (800d21c <xTaskPriorityDisinherit+0xd0>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	693a      	ldr	r2, [r7, #16]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d00a      	beq.n	800d182 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d170:	f383 8811 	msr	BASEPRI, r3
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	60fb      	str	r3, [r7, #12]
}
 800d17e:	bf00      	nop
 800d180:	e7fe      	b.n	800d180 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10a      	bne.n	800d1a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18e:	f383 8811 	msr	BASEPRI, r3
 800d192:	f3bf 8f6f 	isb	sy
 800d196:	f3bf 8f4f 	dsb	sy
 800d19a:	60bb      	str	r3, [r7, #8]
}
 800d19c:	bf00      	nop
 800d19e:	e7fe      	b.n	800d19e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1a4:	1e5a      	subs	r2, r3, #1
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d02c      	beq.n	800d210 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d128      	bne.n	800d210 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	3304      	adds	r3, #4
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fe f9aa 	bl	800b51c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1e0:	4b0f      	ldr	r3, [pc, #60]	; (800d220 <xTaskPriorityDisinherit+0xd4>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d903      	bls.n	800d1f0 <xTaskPriorityDisinherit+0xa4>
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ec:	4a0c      	ldr	r2, [pc, #48]	; (800d220 <xTaskPriorityDisinherit+0xd4>)
 800d1ee:	6013      	str	r3, [r2, #0]
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	4413      	add	r3, r2
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	4a09      	ldr	r2, [pc, #36]	; (800d224 <xTaskPriorityDisinherit+0xd8>)
 800d1fe:	441a      	add	r2, r3
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	3304      	adds	r3, #4
 800d204:	4619      	mov	r1, r3
 800d206:	4610      	mov	r0, r2
 800d208:	f7fe f92d 	bl	800b466 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d20c:	2301      	movs	r3, #1
 800d20e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d210:	697b      	ldr	r3, [r7, #20]
	}
 800d212:	4618      	mov	r0, r3
 800d214:	3718      	adds	r7, #24
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	20000870 	.word	0x20000870
 800d220:	20000d4c 	.word	0x20000d4c
 800d224:	20000874 	.word	0x20000874

0800d228 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b088      	sub	sp, #32
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d236:	2301      	movs	r3, #1
 800d238:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d06f      	beq.n	800d320 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d244:	2b00      	cmp	r3, #0
 800d246:	d10a      	bne.n	800d25e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24c:	f383 8811 	msr	BASEPRI, r3
 800d250:	f3bf 8f6f 	isb	sy
 800d254:	f3bf 8f4f 	dsb	sy
 800d258:	60fb      	str	r3, [r7, #12]
}
 800d25a:	bf00      	nop
 800d25c:	e7fe      	b.n	800d25c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d25e:	69bb      	ldr	r3, [r7, #24]
 800d260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d262:	683a      	ldr	r2, [r7, #0]
 800d264:	429a      	cmp	r2, r3
 800d266:	d902      	bls.n	800d26e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	61fb      	str	r3, [r7, #28]
 800d26c:	e002      	b.n	800d274 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d272:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d278:	69fa      	ldr	r2, [r7, #28]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d050      	beq.n	800d320 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d282:	697a      	ldr	r2, [r7, #20]
 800d284:	429a      	cmp	r2, r3
 800d286:	d14b      	bne.n	800d320 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d288:	4b27      	ldr	r3, [pc, #156]	; (800d328 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	69ba      	ldr	r2, [r7, #24]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d10a      	bne.n	800d2a8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d296:	f383 8811 	msr	BASEPRI, r3
 800d29a:	f3bf 8f6f 	isb	sy
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	60bb      	str	r3, [r7, #8]
}
 800d2a4:	bf00      	nop
 800d2a6:	e7fe      	b.n	800d2a6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d2a8:	69bb      	ldr	r3, [r7, #24]
 800d2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	69fa      	ldr	r2, [r7, #28]
 800d2b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d2b4:	69bb      	ldr	r3, [r7, #24]
 800d2b6:	699b      	ldr	r3, [r3, #24]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	db04      	blt.n	800d2c6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2bc:	69fb      	ldr	r3, [r7, #28]
 800d2be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	6959      	ldr	r1, [r3, #20]
 800d2ca:	693a      	ldr	r2, [r7, #16]
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	4413      	add	r3, r2
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	4a15      	ldr	r2, [pc, #84]	; (800d32c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d2d6:	4413      	add	r3, r2
 800d2d8:	4299      	cmp	r1, r3
 800d2da:	d101      	bne.n	800d2e0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e000      	b.n	800d2e2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d01c      	beq.n	800d320 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	3304      	adds	r3, #4
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fe f916 	bl	800b51c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2f4:	4b0e      	ldr	r3, [pc, #56]	; (800d330 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d903      	bls.n	800d304 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d300:	4a0b      	ldr	r2, [pc, #44]	; (800d330 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d302:	6013      	str	r3, [r2, #0]
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d308:	4613      	mov	r3, r2
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	4413      	add	r3, r2
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	4a06      	ldr	r2, [pc, #24]	; (800d32c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d312:	441a      	add	r2, r3
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	3304      	adds	r3, #4
 800d318:	4619      	mov	r1, r3
 800d31a:	4610      	mov	r0, r2
 800d31c:	f7fe f8a3 	bl	800b466 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d320:	bf00      	nop
 800d322:	3720      	adds	r7, #32
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	20000870 	.word	0x20000870
 800d32c:	20000874 	.word	0x20000874
 800d330:	20000d4c 	.word	0x20000d4c

0800d334 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800d334:	b480      	push	{r7}
 800d336:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d338:	4b07      	ldr	r3, [pc, #28]	; (800d358 <pvTaskIncrementMutexHeldCount+0x24>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d004      	beq.n	800d34a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d340:	4b05      	ldr	r3, [pc, #20]	; (800d358 <pvTaskIncrementMutexHeldCount+0x24>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d346:	3201      	adds	r2, #1
 800d348:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d34a:	4b03      	ldr	r3, [pc, #12]	; (800d358 <pvTaskIncrementMutexHeldCount+0x24>)
 800d34c:	681b      	ldr	r3, [r3, #0]
	}
 800d34e:	4618      	mov	r0, r3
 800d350:	46bd      	mov	sp, r7
 800d352:	bc80      	pop	{r7}
 800d354:	4770      	bx	lr
 800d356:	bf00      	nop
 800d358:	20000870 	.word	0x20000870

0800d35c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d366:	f000 fd29 	bl	800ddbc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d36a:	4b1e      	ldr	r3, [pc, #120]	; (800d3e4 <ulTaskNotifyTake+0x88>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d370:	2b00      	cmp	r3, #0
 800d372:	d113      	bne.n	800d39c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d374:	4b1b      	ldr	r3, [pc, #108]	; (800d3e4 <ulTaskNotifyTake+0x88>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2201      	movs	r2, #1
 800d37a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d00b      	beq.n	800d39c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d384:	2101      	movs	r1, #1
 800d386:	6838      	ldr	r0, [r7, #0]
 800d388:	f000 f8c4 	bl	800d514 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d38c:	4b16      	ldr	r3, [pc, #88]	; (800d3e8 <ulTaskNotifyTake+0x8c>)
 800d38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d392:	601a      	str	r2, [r3, #0]
 800d394:	f3bf 8f4f 	dsb	sy
 800d398:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d39c:	f000 fd3e 	bl	800de1c <vPortExitCritical>

		taskENTER_CRITICAL();
 800d3a0:	f000 fd0c 	bl	800ddbc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d3a4:	4b0f      	ldr	r3, [pc, #60]	; (800d3e4 <ulTaskNotifyTake+0x88>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3aa:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d00c      	beq.n	800d3cc <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d004      	beq.n	800d3c2 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d3b8:	4b0a      	ldr	r3, [pc, #40]	; (800d3e4 <ulTaskNotifyTake+0x88>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	655a      	str	r2, [r3, #84]	; 0x54
 800d3c0:	e004      	b.n	800d3cc <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d3c2:	4b08      	ldr	r3, [pc, #32]	; (800d3e4 <ulTaskNotifyTake+0x88>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	68fa      	ldr	r2, [r7, #12]
 800d3c8:	3a01      	subs	r2, #1
 800d3ca:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d3cc:	4b05      	ldr	r3, [pc, #20]	; (800d3e4 <ulTaskNotifyTake+0x88>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800d3d6:	f000 fd21 	bl	800de1c <vPortExitCritical>

		return ulReturn;
 800d3da:	68fb      	ldr	r3, [r7, #12]
	}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3710      	adds	r7, #16
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	20000870 	.word	0x20000870
 800d3e8:	e000ed04 	.word	0xe000ed04

0800d3ec <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b08a      	sub	sp, #40	; 0x28
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d10a      	bne.n	800d412 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800d3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d400:	f383 8811 	msr	BASEPRI, r3
 800d404:	f3bf 8f6f 	isb	sy
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	61bb      	str	r3, [r7, #24]
}
 800d40e:	bf00      	nop
 800d410:	e7fe      	b.n	800d410 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d412:	f000 fd95 	bl	800df40 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800d41a:	f3ef 8211 	mrs	r2, BASEPRI
 800d41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d422:	f383 8811 	msr	BASEPRI, r3
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	617a      	str	r2, [r7, #20]
 800d430:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d432:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d434:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d438:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d43c:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d440:	2202      	movs	r2, #2
 800d442:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800d446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d44a:	1c5a      	adds	r2, r3, #1
 800d44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44e:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d450:	7ffb      	ldrb	r3, [r7, #31]
 800d452:	2b01      	cmp	r3, #1
 800d454:	d147      	bne.n	800d4e6 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d00a      	beq.n	800d474 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d462:	f383 8811 	msr	BASEPRI, r3
 800d466:	f3bf 8f6f 	isb	sy
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	60fb      	str	r3, [r7, #12]
}
 800d470:	bf00      	nop
 800d472:	e7fe      	b.n	800d472 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d474:	4b21      	ldr	r3, [pc, #132]	; (800d4fc <vTaskNotifyGiveFromISR+0x110>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d11d      	bne.n	800d4b8 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47e:	3304      	adds	r3, #4
 800d480:	4618      	mov	r0, r3
 800d482:	f7fe f84b 	bl	800b51c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d48a:	4b1d      	ldr	r3, [pc, #116]	; (800d500 <vTaskNotifyGiveFromISR+0x114>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d903      	bls.n	800d49a <vTaskNotifyGiveFromISR+0xae>
 800d492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d496:	4a1a      	ldr	r2, [pc, #104]	; (800d500 <vTaskNotifyGiveFromISR+0x114>)
 800d498:	6013      	str	r3, [r2, #0]
 800d49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d49e:	4613      	mov	r3, r2
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	4413      	add	r3, r2
 800d4a4:	009b      	lsls	r3, r3, #2
 800d4a6:	4a17      	ldr	r2, [pc, #92]	; (800d504 <vTaskNotifyGiveFromISR+0x118>)
 800d4a8:	441a      	add	r2, r3
 800d4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	4610      	mov	r0, r2
 800d4b2:	f7fd ffd8 	bl	800b466 <vListInsertEnd>
 800d4b6:	e005      	b.n	800d4c4 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ba:	3318      	adds	r3, #24
 800d4bc:	4619      	mov	r1, r3
 800d4be:	4812      	ldr	r0, [pc, #72]	; (800d508 <vTaskNotifyGiveFromISR+0x11c>)
 800d4c0:	f7fd ffd1 	bl	800b466 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4c8:	4b10      	ldr	r3, [pc, #64]	; (800d50c <vTaskNotifyGiveFromISR+0x120>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d909      	bls.n	800d4e6 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d003      	beq.n	800d4e0 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	601a      	str	r2, [r3, #0]
 800d4de:	e002      	b.n	800d4e6 <vTaskNotifyGiveFromISR+0xfa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800d4e0:	4b0b      	ldr	r3, [pc, #44]	; (800d510 <vTaskNotifyGiveFromISR+0x124>)
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	601a      	str	r2, [r3, #0]
 800d4e6:	6a3b      	ldr	r3, [r7, #32]
 800d4e8:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	f383 8811 	msr	BASEPRI, r3
}
 800d4f0:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800d4f2:	bf00      	nop
 800d4f4:	3728      	adds	r7, #40	; 0x28
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	20000d6c 	.word	0x20000d6c
 800d500:	20000d4c 	.word	0x20000d4c
 800d504:	20000874 	.word	0x20000874
 800d508:	20000d04 	.word	0x20000d04
 800d50c:	20000870 	.word	0x20000870
 800d510:	20000d58 	.word	0x20000d58

0800d514 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d51e:	4b21      	ldr	r3, [pc, #132]	; (800d5a4 <prvAddCurrentTaskToDelayedList+0x90>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d524:	4b20      	ldr	r3, [pc, #128]	; (800d5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	3304      	adds	r3, #4
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7fd fff6 	bl	800b51c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d536:	d10a      	bne.n	800d54e <prvAddCurrentTaskToDelayedList+0x3a>
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d007      	beq.n	800d54e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d53e:	4b1a      	ldr	r3, [pc, #104]	; (800d5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	3304      	adds	r3, #4
 800d544:	4619      	mov	r1, r3
 800d546:	4819      	ldr	r0, [pc, #100]	; (800d5ac <prvAddCurrentTaskToDelayedList+0x98>)
 800d548:	f7fd ff8d 	bl	800b466 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d54c:	e026      	b.n	800d59c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d54e:	68fa      	ldr	r2, [r7, #12]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4413      	add	r3, r2
 800d554:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d556:	4b14      	ldr	r3, [pc, #80]	; (800d5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	68ba      	ldr	r2, [r7, #8]
 800d55c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d55e:	68ba      	ldr	r2, [r7, #8]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	429a      	cmp	r2, r3
 800d564:	d209      	bcs.n	800d57a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d566:	4b12      	ldr	r3, [pc, #72]	; (800d5b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	4b0f      	ldr	r3, [pc, #60]	; (800d5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	3304      	adds	r3, #4
 800d570:	4619      	mov	r1, r3
 800d572:	4610      	mov	r0, r2
 800d574:	f7fd ff9a 	bl	800b4ac <vListInsert>
}
 800d578:	e010      	b.n	800d59c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d57a:	4b0e      	ldr	r3, [pc, #56]	; (800d5b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d57c:	681a      	ldr	r2, [r3, #0]
 800d57e:	4b0a      	ldr	r3, [pc, #40]	; (800d5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	3304      	adds	r3, #4
 800d584:	4619      	mov	r1, r3
 800d586:	4610      	mov	r0, r2
 800d588:	f7fd ff90 	bl	800b4ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d58c:	4b0a      	ldr	r3, [pc, #40]	; (800d5b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	68ba      	ldr	r2, [r7, #8]
 800d592:	429a      	cmp	r2, r3
 800d594:	d202      	bcs.n	800d59c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d596:	4a08      	ldr	r2, [pc, #32]	; (800d5b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	6013      	str	r3, [r2, #0]
}
 800d59c:	bf00      	nop
 800d59e:	3710      	adds	r7, #16
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	20000d48 	.word	0x20000d48
 800d5a8:	20000870 	.word	0x20000870
 800d5ac:	20000d30 	.word	0x20000d30
 800d5b0:	20000d00 	.word	0x20000d00
 800d5b4:	20000cfc 	.word	0x20000cfc
 800d5b8:	20000d64 	.word	0x20000d64

0800d5bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08a      	sub	sp, #40	; 0x28
 800d5c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d5c6:	f000 facb 	bl	800db60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d5ca:	4b1c      	ldr	r3, [pc, #112]	; (800d63c <xTimerCreateTimerTask+0x80>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d021      	beq.n	800d616 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d5da:	1d3a      	adds	r2, r7, #4
 800d5dc:	f107 0108 	add.w	r1, r7, #8
 800d5e0:	f107 030c 	add.w	r3, r7, #12
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7fd fef9 	bl	800b3dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d5ea:	6879      	ldr	r1, [r7, #4]
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	68fa      	ldr	r2, [r7, #12]
 800d5f0:	9202      	str	r2, [sp, #8]
 800d5f2:	9301      	str	r3, [sp, #4]
 800d5f4:	2302      	movs	r3, #2
 800d5f6:	9300      	str	r3, [sp, #0]
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	460a      	mov	r2, r1
 800d5fc:	4910      	ldr	r1, [pc, #64]	; (800d640 <xTimerCreateTimerTask+0x84>)
 800d5fe:	4811      	ldr	r0, [pc, #68]	; (800d644 <xTimerCreateTimerTask+0x88>)
 800d600:	f7fe fe4a 	bl	800c298 <xTaskCreateStatic>
 800d604:	4603      	mov	r3, r0
 800d606:	4a10      	ldr	r2, [pc, #64]	; (800d648 <xTimerCreateTimerTask+0x8c>)
 800d608:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d60a:	4b0f      	ldr	r3, [pc, #60]	; (800d648 <xTimerCreateTimerTask+0x8c>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d001      	beq.n	800d616 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d612:	2301      	movs	r3, #1
 800d614:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d10a      	bne.n	800d632 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d620:	f383 8811 	msr	BASEPRI, r3
 800d624:	f3bf 8f6f 	isb	sy
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	613b      	str	r3, [r7, #16]
}
 800d62e:	bf00      	nop
 800d630:	e7fe      	b.n	800d630 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d632:	697b      	ldr	r3, [r7, #20]
}
 800d634:	4618      	mov	r0, r3
 800d636:	3718      	adds	r7, #24
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	20000da0 	.word	0x20000da0
 800d640:	0800efb4 	.word	0x0800efb4
 800d644:	0800d769 	.word	0x0800d769
 800d648:	20000da4 	.word	0x20000da4

0800d64c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b08a      	sub	sp, #40	; 0x28
 800d650:	af00      	add	r7, sp, #0
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	60b9      	str	r1, [r7, #8]
 800d656:	607a      	str	r2, [r7, #4]
 800d658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d65a:	2300      	movs	r3, #0
 800d65c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d10a      	bne.n	800d67a <xTimerGenericCommand+0x2e>
	__asm volatile
 800d664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d668:	f383 8811 	msr	BASEPRI, r3
 800d66c:	f3bf 8f6f 	isb	sy
 800d670:	f3bf 8f4f 	dsb	sy
 800d674:	623b      	str	r3, [r7, #32]
}
 800d676:	bf00      	nop
 800d678:	e7fe      	b.n	800d678 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d67a:	4b1a      	ldr	r3, [pc, #104]	; (800d6e4 <xTimerGenericCommand+0x98>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d02a      	beq.n	800d6d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	2b05      	cmp	r3, #5
 800d692:	dc18      	bgt.n	800d6c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d694:	f7ff fcce 	bl	800d034 <xTaskGetSchedulerState>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b02      	cmp	r3, #2
 800d69c:	d109      	bne.n	800d6b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d69e:	4b11      	ldr	r3, [pc, #68]	; (800d6e4 <xTimerGenericCommand+0x98>)
 800d6a0:	6818      	ldr	r0, [r3, #0]
 800d6a2:	f107 0110 	add.w	r1, r7, #16
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6aa:	f7fe f8ef 	bl	800b88c <xQueueGenericSend>
 800d6ae:	6278      	str	r0, [r7, #36]	; 0x24
 800d6b0:	e012      	b.n	800d6d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d6b2:	4b0c      	ldr	r3, [pc, #48]	; (800d6e4 <xTimerGenericCommand+0x98>)
 800d6b4:	6818      	ldr	r0, [r3, #0]
 800d6b6:	f107 0110 	add.w	r1, r7, #16
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	2200      	movs	r2, #0
 800d6be:	f7fe f8e5 	bl	800b88c <xQueueGenericSend>
 800d6c2:	6278      	str	r0, [r7, #36]	; 0x24
 800d6c4:	e008      	b.n	800d6d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d6c6:	4b07      	ldr	r3, [pc, #28]	; (800d6e4 <xTimerGenericCommand+0x98>)
 800d6c8:	6818      	ldr	r0, [r3, #0]
 800d6ca:	f107 0110 	add.w	r1, r7, #16
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	683a      	ldr	r2, [r7, #0]
 800d6d2:	f7fe f9d9 	bl	800ba88 <xQueueGenericSendFromISR>
 800d6d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3728      	adds	r7, #40	; 0x28
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
 800d6e2:	bf00      	nop
 800d6e4:	20000da0 	.word	0x20000da0

0800d6e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b088      	sub	sp, #32
 800d6ec:	af02      	add	r7, sp, #8
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d6f2:	4b1c      	ldr	r3, [pc, #112]	; (800d764 <prvProcessExpiredTimer+0x7c>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	3304      	adds	r3, #4
 800d700:	4618      	mov	r0, r3
 800d702:	f7fd ff0b 	bl	800b51c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	69db      	ldr	r3, [r3, #28]
 800d70a:	2b01      	cmp	r3, #1
 800d70c:	d122      	bne.n	800d754 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	699a      	ldr	r2, [r3, #24]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	18d1      	adds	r1, r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	683a      	ldr	r2, [r7, #0]
 800d71a:	6978      	ldr	r0, [r7, #20]
 800d71c:	f000 f8c8 	bl	800d8b0 <prvInsertTimerInActiveList>
 800d720:	4603      	mov	r3, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d016      	beq.n	800d754 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d726:	2300      	movs	r3, #0
 800d728:	9300      	str	r3, [sp, #0]
 800d72a:	2300      	movs	r3, #0
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	2100      	movs	r1, #0
 800d730:	6978      	ldr	r0, [r7, #20]
 800d732:	f7ff ff8b 	bl	800d64c <xTimerGenericCommand>
 800d736:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d10a      	bne.n	800d754 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800d73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d742:	f383 8811 	msr	BASEPRI, r3
 800d746:	f3bf 8f6f 	isb	sy
 800d74a:	f3bf 8f4f 	dsb	sy
 800d74e:	60fb      	str	r3, [r7, #12]
}
 800d750:	bf00      	nop
 800d752:	e7fe      	b.n	800d752 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d758:	6978      	ldr	r0, [r7, #20]
 800d75a:	4798      	blx	r3
}
 800d75c:	bf00      	nop
 800d75e:	3718      	adds	r7, #24
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	20000d98 	.word	0x20000d98

0800d768 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d770:	f107 0308 	add.w	r3, r7, #8
 800d774:	4618      	mov	r0, r3
 800d776:	f000 f857 	bl	800d828 <prvGetNextExpireTime>
 800d77a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	4619      	mov	r1, r3
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f000 f803 	bl	800d78c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d786:	f000 f8d5 	bl	800d934 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d78a:	e7f1      	b.n	800d770 <prvTimerTask+0x8>

0800d78c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d796:	f7ff f82f 	bl	800c7f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d79a:	f107 0308 	add.w	r3, r7, #8
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 f866 	bl	800d870 <prvSampleTimeNow>
 800d7a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d130      	bne.n	800d80e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d10a      	bne.n	800d7c8 <prvProcessTimerOrBlockTask+0x3c>
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d806      	bhi.n	800d7c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d7ba:	f7ff f82b 	bl	800c814 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d7be:	68f9      	ldr	r1, [r7, #12]
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f7ff ff91 	bl	800d6e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d7c6:	e024      	b.n	800d812 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d008      	beq.n	800d7e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d7ce:	4b13      	ldr	r3, [pc, #76]	; (800d81c <prvProcessTimerOrBlockTask+0x90>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	bf0c      	ite	eq
 800d7d8:	2301      	moveq	r3, #1
 800d7da:	2300      	movne	r3, #0
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d7e0:	4b0f      	ldr	r3, [pc, #60]	; (800d820 <prvProcessTimerOrBlockTask+0x94>)
 800d7e2:	6818      	ldr	r0, [r3, #0]
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	1ad3      	subs	r3, r2, r3
 800d7ea:	683a      	ldr	r2, [r7, #0]
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	f7fe fd1f 	bl	800c230 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d7f2:	f7ff f80f 	bl	800c814 <xTaskResumeAll>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d10a      	bne.n	800d812 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d7fc:	4b09      	ldr	r3, [pc, #36]	; (800d824 <prvProcessTimerOrBlockTask+0x98>)
 800d7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d802:	601a      	str	r2, [r3, #0]
 800d804:	f3bf 8f4f 	dsb	sy
 800d808:	f3bf 8f6f 	isb	sy
}
 800d80c:	e001      	b.n	800d812 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d80e:	f7ff f801 	bl	800c814 <xTaskResumeAll>
}
 800d812:	bf00      	nop
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	20000d9c 	.word	0x20000d9c
 800d820:	20000da0 	.word	0x20000da0
 800d824:	e000ed04 	.word	0xe000ed04

0800d828 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d828:	b480      	push	{r7}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d830:	4b0e      	ldr	r3, [pc, #56]	; (800d86c <prvGetNextExpireTime+0x44>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	bf0c      	ite	eq
 800d83a:	2301      	moveq	r3, #1
 800d83c:	2300      	movne	r3, #0
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	461a      	mov	r2, r3
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d105      	bne.n	800d85a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d84e:	4b07      	ldr	r3, [pc, #28]	; (800d86c <prvGetNextExpireTime+0x44>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	68db      	ldr	r3, [r3, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	60fb      	str	r3, [r7, #12]
 800d858:	e001      	b.n	800d85e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d85a:	2300      	movs	r3, #0
 800d85c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d85e:	68fb      	ldr	r3, [r7, #12]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3714      	adds	r7, #20
 800d864:	46bd      	mov	sp, r7
 800d866:	bc80      	pop	{r7}
 800d868:	4770      	bx	lr
 800d86a:	bf00      	nop
 800d86c:	20000d98 	.word	0x20000d98

0800d870 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d878:	f7ff f86a 	bl	800c950 <xTaskGetTickCount>
 800d87c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d87e:	4b0b      	ldr	r3, [pc, #44]	; (800d8ac <prvSampleTimeNow+0x3c>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	68fa      	ldr	r2, [r7, #12]
 800d884:	429a      	cmp	r2, r3
 800d886:	d205      	bcs.n	800d894 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d888:	f000 f908 	bl	800da9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2201      	movs	r2, #1
 800d890:	601a      	str	r2, [r3, #0]
 800d892:	e002      	b.n	800d89a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2200      	movs	r2, #0
 800d898:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d89a:	4a04      	ldr	r2, [pc, #16]	; (800d8ac <prvSampleTimeNow+0x3c>)
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	20000da8 	.word	0x20000da8

0800d8b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
 800d8bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	68ba      	ldr	r2, [r7, #8]
 800d8c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	68fa      	ldr	r2, [r7, #12]
 800d8cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d8ce:	68ba      	ldr	r2, [r7, #8]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d812      	bhi.n	800d8fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8d6:	687a      	ldr	r2, [r7, #4]
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	1ad2      	subs	r2, r2, r3
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	699b      	ldr	r3, [r3, #24]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d302      	bcc.n	800d8ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	617b      	str	r3, [r7, #20]
 800d8e8:	e01b      	b.n	800d922 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d8ea:	4b10      	ldr	r3, [pc, #64]	; (800d92c <prvInsertTimerInActiveList+0x7c>)
 800d8ec:	681a      	ldr	r2, [r3, #0]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	3304      	adds	r3, #4
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	4610      	mov	r0, r2
 800d8f6:	f7fd fdd9 	bl	800b4ac <vListInsert>
 800d8fa:	e012      	b.n	800d922 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d8fc:	687a      	ldr	r2, [r7, #4]
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	429a      	cmp	r2, r3
 800d902:	d206      	bcs.n	800d912 <prvInsertTimerInActiveList+0x62>
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d302      	bcc.n	800d912 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d90c:	2301      	movs	r3, #1
 800d90e:	617b      	str	r3, [r7, #20]
 800d910:	e007      	b.n	800d922 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d912:	4b07      	ldr	r3, [pc, #28]	; (800d930 <prvInsertTimerInActiveList+0x80>)
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	3304      	adds	r3, #4
 800d91a:	4619      	mov	r1, r3
 800d91c:	4610      	mov	r0, r2
 800d91e:	f7fd fdc5 	bl	800b4ac <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d922:	697b      	ldr	r3, [r7, #20]
}
 800d924:	4618      	mov	r0, r3
 800d926:	3718      	adds	r7, #24
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	20000d9c 	.word	0x20000d9c
 800d930:	20000d98 	.word	0x20000d98

0800d934 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b08e      	sub	sp, #56	; 0x38
 800d938:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d93a:	e09d      	b.n	800da78 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	da18      	bge.n	800d974 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d942:	1d3b      	adds	r3, r7, #4
 800d944:	3304      	adds	r3, #4
 800d946:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d10a      	bne.n	800d964 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d952:	f383 8811 	msr	BASEPRI, r3
 800d956:	f3bf 8f6f 	isb	sy
 800d95a:	f3bf 8f4f 	dsb	sy
 800d95e:	61fb      	str	r3, [r7, #28]
}
 800d960:	bf00      	nop
 800d962:	e7fe      	b.n	800d962 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d96a:	6850      	ldr	r0, [r2, #4]
 800d96c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d96e:	6892      	ldr	r2, [r2, #8]
 800d970:	4611      	mov	r1, r2
 800d972:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2b00      	cmp	r3, #0
 800d978:	db7d      	blt.n	800da76 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d980:	695b      	ldr	r3, [r3, #20]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d004      	beq.n	800d990 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d988:	3304      	adds	r3, #4
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7fd fdc6 	bl	800b51c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d990:	463b      	mov	r3, r7
 800d992:	4618      	mov	r0, r3
 800d994:	f7ff ff6c 	bl	800d870 <prvSampleTimeNow>
 800d998:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2b09      	cmp	r3, #9
 800d99e:	d86b      	bhi.n	800da78 <prvProcessReceivedCommands+0x144>
 800d9a0:	a201      	add	r2, pc, #4	; (adr r2, 800d9a8 <prvProcessReceivedCommands+0x74>)
 800d9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9a6:	bf00      	nop
 800d9a8:	0800d9d1 	.word	0x0800d9d1
 800d9ac:	0800d9d1 	.word	0x0800d9d1
 800d9b0:	0800d9d1 	.word	0x0800d9d1
 800d9b4:	0800da79 	.word	0x0800da79
 800d9b8:	0800da2d 	.word	0x0800da2d
 800d9bc:	0800da65 	.word	0x0800da65
 800d9c0:	0800d9d1 	.word	0x0800d9d1
 800d9c4:	0800d9d1 	.word	0x0800d9d1
 800d9c8:	0800da79 	.word	0x0800da79
 800d9cc:	0800da2d 	.word	0x0800da2d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d9d0:	68ba      	ldr	r2, [r7, #8]
 800d9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d4:	699b      	ldr	r3, [r3, #24]
 800d9d6:	18d1      	adds	r1, r2, r3
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9de:	f7ff ff67 	bl	800d8b0 <prvInsertTimerInActiveList>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d047      	beq.n	800da78 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9ee:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f2:	69db      	ldr	r3, [r3, #28]
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d13f      	bne.n	800da78 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d9f8:	68ba      	ldr	r2, [r7, #8]
 800d9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fc:	699b      	ldr	r3, [r3, #24]
 800d9fe:	441a      	add	r2, r3
 800da00:	2300      	movs	r3, #0
 800da02:	9300      	str	r3, [sp, #0]
 800da04:	2300      	movs	r3, #0
 800da06:	2100      	movs	r1, #0
 800da08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da0a:	f7ff fe1f 	bl	800d64c <xTimerGenericCommand>
 800da0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800da10:	6a3b      	ldr	r3, [r7, #32]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d130      	bne.n	800da78 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800da16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1a:	f383 8811 	msr	BASEPRI, r3
 800da1e:	f3bf 8f6f 	isb	sy
 800da22:	f3bf 8f4f 	dsb	sy
 800da26:	61bb      	str	r3, [r7, #24]
}
 800da28:	bf00      	nop
 800da2a:	e7fe      	b.n	800da2a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800da2c:	68ba      	ldr	r2, [r7, #8]
 800da2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800da32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da34:	699b      	ldr	r3, [r3, #24]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d10a      	bne.n	800da50 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800da3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3e:	f383 8811 	msr	BASEPRI, r3
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	f3bf 8f4f 	dsb	sy
 800da4a:	617b      	str	r3, [r7, #20]
}
 800da4c:	bf00      	nop
 800da4e:	e7fe      	b.n	800da4e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800da50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da52:	699a      	ldr	r2, [r3, #24]
 800da54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da56:	18d1      	adds	r1, r2, r3
 800da58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da5e:	f7ff ff27 	bl	800d8b0 <prvInsertTimerInActiveList>
					break;
 800da62:	e009      	b.n	800da78 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800da64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d104      	bne.n	800da78 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800da6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da70:	f000 fb68 	bl	800e144 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800da74:	e000      	b.n	800da78 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800da76:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800da78:	4b07      	ldr	r3, [pc, #28]	; (800da98 <prvProcessReceivedCommands+0x164>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	1d39      	adds	r1, r7, #4
 800da7e:	2200      	movs	r2, #0
 800da80:	4618      	mov	r0, r3
 800da82:	f7fe f899 	bl	800bbb8 <xQueueReceive>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f47f af57 	bne.w	800d93c <prvProcessReceivedCommands+0x8>
	}
}
 800da8e:	bf00      	nop
 800da90:	bf00      	nop
 800da92:	3730      	adds	r7, #48	; 0x30
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	20000da0 	.word	0x20000da0

0800da9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b088      	sub	sp, #32
 800daa0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800daa2:	e045      	b.n	800db30 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800daa4:	4b2c      	ldr	r3, [pc, #176]	; (800db58 <prvSwitchTimerLists+0xbc>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800daae:	4b2a      	ldr	r3, [pc, #168]	; (800db58 <prvSwitchTimerLists+0xbc>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	68db      	ldr	r3, [r3, #12]
 800dab4:	68db      	ldr	r3, [r3, #12]
 800dab6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	3304      	adds	r3, #4
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7fd fd2d 	bl	800b51c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	69db      	ldr	r3, [r3, #28]
 800dace:	2b01      	cmp	r3, #1
 800dad0:	d12e      	bne.n	800db30 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	699b      	ldr	r3, [r3, #24]
 800dad6:	693a      	ldr	r2, [r7, #16]
 800dad8:	4413      	add	r3, r2
 800dada:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dadc:	68ba      	ldr	r2, [r7, #8]
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d90e      	bls.n	800db02 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	68ba      	ldr	r2, [r7, #8]
 800dae8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	68fa      	ldr	r2, [r7, #12]
 800daee:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800daf0:	4b19      	ldr	r3, [pc, #100]	; (800db58 <prvSwitchTimerLists+0xbc>)
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	3304      	adds	r3, #4
 800daf8:	4619      	mov	r1, r3
 800dafa:	4610      	mov	r0, r2
 800dafc:	f7fd fcd6 	bl	800b4ac <vListInsert>
 800db00:	e016      	b.n	800db30 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db02:	2300      	movs	r3, #0
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	2300      	movs	r3, #0
 800db08:	693a      	ldr	r2, [r7, #16]
 800db0a:	2100      	movs	r1, #0
 800db0c:	68f8      	ldr	r0, [r7, #12]
 800db0e:	f7ff fd9d 	bl	800d64c <xTimerGenericCommand>
 800db12:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10a      	bne.n	800db30 <prvSwitchTimerLists+0x94>
	__asm volatile
 800db1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1e:	f383 8811 	msr	BASEPRI, r3
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	f3bf 8f4f 	dsb	sy
 800db2a:	603b      	str	r3, [r7, #0]
}
 800db2c:	bf00      	nop
 800db2e:	e7fe      	b.n	800db2e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db30:	4b09      	ldr	r3, [pc, #36]	; (800db58 <prvSwitchTimerLists+0xbc>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1b4      	bne.n	800daa4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800db3a:	4b07      	ldr	r3, [pc, #28]	; (800db58 <prvSwitchTimerLists+0xbc>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800db40:	4b06      	ldr	r3, [pc, #24]	; (800db5c <prvSwitchTimerLists+0xc0>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a04      	ldr	r2, [pc, #16]	; (800db58 <prvSwitchTimerLists+0xbc>)
 800db46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800db48:	4a04      	ldr	r2, [pc, #16]	; (800db5c <prvSwitchTimerLists+0xc0>)
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	6013      	str	r3, [r2, #0]
}
 800db4e:	bf00      	nop
 800db50:	3718      	adds	r7, #24
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop
 800db58:	20000d98 	.word	0x20000d98
 800db5c:	20000d9c 	.word	0x20000d9c

0800db60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800db66:	f000 f929 	bl	800ddbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800db6a:	4b15      	ldr	r3, [pc, #84]	; (800dbc0 <prvCheckForValidListAndQueue+0x60>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d120      	bne.n	800dbb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800db72:	4814      	ldr	r0, [pc, #80]	; (800dbc4 <prvCheckForValidListAndQueue+0x64>)
 800db74:	f7fd fc4c 	bl	800b410 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800db78:	4813      	ldr	r0, [pc, #76]	; (800dbc8 <prvCheckForValidListAndQueue+0x68>)
 800db7a:	f7fd fc49 	bl	800b410 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800db7e:	4b13      	ldr	r3, [pc, #76]	; (800dbcc <prvCheckForValidListAndQueue+0x6c>)
 800db80:	4a10      	ldr	r2, [pc, #64]	; (800dbc4 <prvCheckForValidListAndQueue+0x64>)
 800db82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800db84:	4b12      	ldr	r3, [pc, #72]	; (800dbd0 <prvCheckForValidListAndQueue+0x70>)
 800db86:	4a10      	ldr	r2, [pc, #64]	; (800dbc8 <prvCheckForValidListAndQueue+0x68>)
 800db88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800db8a:	2300      	movs	r3, #0
 800db8c:	9300      	str	r3, [sp, #0]
 800db8e:	4b11      	ldr	r3, [pc, #68]	; (800dbd4 <prvCheckForValidListAndQueue+0x74>)
 800db90:	4a11      	ldr	r2, [pc, #68]	; (800dbd8 <prvCheckForValidListAndQueue+0x78>)
 800db92:	2110      	movs	r1, #16
 800db94:	200a      	movs	r0, #10
 800db96:	f7fd fd53 	bl	800b640 <xQueueGenericCreateStatic>
 800db9a:	4603      	mov	r3, r0
 800db9c:	4a08      	ldr	r2, [pc, #32]	; (800dbc0 <prvCheckForValidListAndQueue+0x60>)
 800db9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dba0:	4b07      	ldr	r3, [pc, #28]	; (800dbc0 <prvCheckForValidListAndQueue+0x60>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d005      	beq.n	800dbb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dba8:	4b05      	ldr	r3, [pc, #20]	; (800dbc0 <prvCheckForValidListAndQueue+0x60>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	490b      	ldr	r1, [pc, #44]	; (800dbdc <prvCheckForValidListAndQueue+0x7c>)
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7fe fb16 	bl	800c1e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dbb4:	f000 f932 	bl	800de1c <vPortExitCritical>
}
 800dbb8:	bf00      	nop
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	20000da0 	.word	0x20000da0
 800dbc4:	20000d70 	.word	0x20000d70
 800dbc8:	20000d84 	.word	0x20000d84
 800dbcc:	20000d98 	.word	0x20000d98
 800dbd0:	20000d9c 	.word	0x20000d9c
 800dbd4:	20000e4c 	.word	0x20000e4c
 800dbd8:	20000dac 	.word	0x20000dac
 800dbdc:	0800efbc 	.word	0x0800efbc

0800dbe0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b085      	sub	sp, #20
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	60f8      	str	r0, [r7, #12]
 800dbe8:	60b9      	str	r1, [r7, #8]
 800dbea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	3b04      	subs	r3, #4
 800dbf0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dbf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	3b04      	subs	r3, #4
 800dbfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	f023 0201 	bic.w	r2, r3, #1
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	3b04      	subs	r3, #4
 800dc0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc10:	4a08      	ldr	r2, [pc, #32]	; (800dc34 <pxPortInitialiseStack+0x54>)
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	3b14      	subs	r3, #20
 800dc1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dc1c:	687a      	ldr	r2, [r7, #4]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	3b20      	subs	r3, #32
 800dc26:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dc28:	68fb      	ldr	r3, [r7, #12]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3714      	adds	r7, #20
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bc80      	pop	{r7}
 800dc32:	4770      	bx	lr
 800dc34:	0800dc39 	.word	0x0800dc39

0800dc38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dc42:	4b12      	ldr	r3, [pc, #72]	; (800dc8c <prvTaskExitError+0x54>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc4a:	d00a      	beq.n	800dc62 <prvTaskExitError+0x2a>
	__asm volatile
 800dc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc50:	f383 8811 	msr	BASEPRI, r3
 800dc54:	f3bf 8f6f 	isb	sy
 800dc58:	f3bf 8f4f 	dsb	sy
 800dc5c:	60fb      	str	r3, [r7, #12]
}
 800dc5e:	bf00      	nop
 800dc60:	e7fe      	b.n	800dc60 <prvTaskExitError+0x28>
	__asm volatile
 800dc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc66:	f383 8811 	msr	BASEPRI, r3
 800dc6a:	f3bf 8f6f 	isb	sy
 800dc6e:	f3bf 8f4f 	dsb	sy
 800dc72:	60bb      	str	r3, [r7, #8]
}
 800dc74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dc76:	bf00      	nop
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d0fc      	beq.n	800dc78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dc7e:	bf00      	nop
 800dc80:	bf00      	nop
 800dc82:	3714      	adds	r7, #20
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bc80      	pop	{r7}
 800dc88:	4770      	bx	lr
 800dc8a:	bf00      	nop
 800dc8c:	2000012c 	.word	0x2000012c

0800dc90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dc90:	4b07      	ldr	r3, [pc, #28]	; (800dcb0 <pxCurrentTCBConst2>)
 800dc92:	6819      	ldr	r1, [r3, #0]
 800dc94:	6808      	ldr	r0, [r1, #0]
 800dc96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800dc9a:	f380 8809 	msr	PSP, r0
 800dc9e:	f3bf 8f6f 	isb	sy
 800dca2:	f04f 0000 	mov.w	r0, #0
 800dca6:	f380 8811 	msr	BASEPRI, r0
 800dcaa:	f04e 0e0d 	orr.w	lr, lr, #13
 800dcae:	4770      	bx	lr

0800dcb0 <pxCurrentTCBConst2>:
 800dcb0:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dcb4:	bf00      	nop
 800dcb6:	bf00      	nop

0800dcb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800dcb8:	4806      	ldr	r0, [pc, #24]	; (800dcd4 <prvPortStartFirstTask+0x1c>)
 800dcba:	6800      	ldr	r0, [r0, #0]
 800dcbc:	6800      	ldr	r0, [r0, #0]
 800dcbe:	f380 8808 	msr	MSP, r0
 800dcc2:	b662      	cpsie	i
 800dcc4:	b661      	cpsie	f
 800dcc6:	f3bf 8f4f 	dsb	sy
 800dcca:	f3bf 8f6f 	isb	sy
 800dcce:	df00      	svc	0
 800dcd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dcd2:	bf00      	nop
 800dcd4:	e000ed08 	.word	0xe000ed08

0800dcd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dcde:	4b32      	ldr	r3, [pc, #200]	; (800dda8 <xPortStartScheduler+0xd0>)
 800dce0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	22ff      	movs	r2, #255	; 0xff
 800dcee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dcf8:	78fb      	ldrb	r3, [r7, #3]
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	4b2a      	ldr	r3, [pc, #168]	; (800ddac <xPortStartScheduler+0xd4>)
 800dd04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dd06:	4b2a      	ldr	r3, [pc, #168]	; (800ddb0 <xPortStartScheduler+0xd8>)
 800dd08:	2207      	movs	r2, #7
 800dd0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd0c:	e009      	b.n	800dd22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800dd0e:	4b28      	ldr	r3, [pc, #160]	; (800ddb0 <xPortStartScheduler+0xd8>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	3b01      	subs	r3, #1
 800dd14:	4a26      	ldr	r2, [pc, #152]	; (800ddb0 <xPortStartScheduler+0xd8>)
 800dd16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dd18:	78fb      	ldrb	r3, [r7, #3]
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	005b      	lsls	r3, r3, #1
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd22:	78fb      	ldrb	r3, [r7, #3]
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd2a:	2b80      	cmp	r3, #128	; 0x80
 800dd2c:	d0ef      	beq.n	800dd0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dd2e:	4b20      	ldr	r3, [pc, #128]	; (800ddb0 <xPortStartScheduler+0xd8>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f1c3 0307 	rsb	r3, r3, #7
 800dd36:	2b04      	cmp	r3, #4
 800dd38:	d00a      	beq.n	800dd50 <xPortStartScheduler+0x78>
	__asm volatile
 800dd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd3e:	f383 8811 	msr	BASEPRI, r3
 800dd42:	f3bf 8f6f 	isb	sy
 800dd46:	f3bf 8f4f 	dsb	sy
 800dd4a:	60bb      	str	r3, [r7, #8]
}
 800dd4c:	bf00      	nop
 800dd4e:	e7fe      	b.n	800dd4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dd50:	4b17      	ldr	r3, [pc, #92]	; (800ddb0 <xPortStartScheduler+0xd8>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	021b      	lsls	r3, r3, #8
 800dd56:	4a16      	ldr	r2, [pc, #88]	; (800ddb0 <xPortStartScheduler+0xd8>)
 800dd58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dd5a:	4b15      	ldr	r3, [pc, #84]	; (800ddb0 <xPortStartScheduler+0xd8>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dd62:	4a13      	ldr	r2, [pc, #76]	; (800ddb0 <xPortStartScheduler+0xd8>)
 800dd64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	b2da      	uxtb	r2, r3
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dd6e:	4b11      	ldr	r3, [pc, #68]	; (800ddb4 <xPortStartScheduler+0xdc>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4a10      	ldr	r2, [pc, #64]	; (800ddb4 <xPortStartScheduler+0xdc>)
 800dd74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dd78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dd7a:	4b0e      	ldr	r3, [pc, #56]	; (800ddb4 <xPortStartScheduler+0xdc>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4a0d      	ldr	r2, [pc, #52]	; (800ddb4 <xPortStartScheduler+0xdc>)
 800dd80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dd84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dd86:	f000 f8b9 	bl	800defc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dd8a:	4b0b      	ldr	r3, [pc, #44]	; (800ddb8 <xPortStartScheduler+0xe0>)
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dd90:	f7ff ff92 	bl	800dcb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dd94:	f7fe fea8 	bl	800cae8 <vTaskSwitchContext>
	prvTaskExitError();
 800dd98:	f7ff ff4e 	bl	800dc38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dd9c:	2300      	movs	r3, #0
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	e000e400 	.word	0xe000e400
 800ddac:	20000e9c 	.word	0x20000e9c
 800ddb0:	20000ea0 	.word	0x20000ea0
 800ddb4:	e000ed20 	.word	0xe000ed20
 800ddb8:	2000012c 	.word	0x2000012c

0800ddbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
	__asm volatile
 800ddc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc6:	f383 8811 	msr	BASEPRI, r3
 800ddca:	f3bf 8f6f 	isb	sy
 800ddce:	f3bf 8f4f 	dsb	sy
 800ddd2:	607b      	str	r3, [r7, #4]
}
 800ddd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ddd6:	4b0f      	ldr	r3, [pc, #60]	; (800de14 <vPortEnterCritical+0x58>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	3301      	adds	r3, #1
 800dddc:	4a0d      	ldr	r2, [pc, #52]	; (800de14 <vPortEnterCritical+0x58>)
 800ddde:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dde0:	4b0c      	ldr	r3, [pc, #48]	; (800de14 <vPortEnterCritical+0x58>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d10f      	bne.n	800de08 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dde8:	4b0b      	ldr	r3, [pc, #44]	; (800de18 <vPortEnterCritical+0x5c>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d00a      	beq.n	800de08 <vPortEnterCritical+0x4c>
	__asm volatile
 800ddf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf6:	f383 8811 	msr	BASEPRI, r3
 800ddfa:	f3bf 8f6f 	isb	sy
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	603b      	str	r3, [r7, #0]
}
 800de04:	bf00      	nop
 800de06:	e7fe      	b.n	800de06 <vPortEnterCritical+0x4a>
	}
}
 800de08:	bf00      	nop
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bc80      	pop	{r7}
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop
 800de14:	2000012c 	.word	0x2000012c
 800de18:	e000ed04 	.word	0xe000ed04

0800de1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800de1c:	b480      	push	{r7}
 800de1e:	b083      	sub	sp, #12
 800de20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800de22:	4b11      	ldr	r3, [pc, #68]	; (800de68 <vPortExitCritical+0x4c>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d10a      	bne.n	800de40 <vPortExitCritical+0x24>
	__asm volatile
 800de2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2e:	f383 8811 	msr	BASEPRI, r3
 800de32:	f3bf 8f6f 	isb	sy
 800de36:	f3bf 8f4f 	dsb	sy
 800de3a:	607b      	str	r3, [r7, #4]
}
 800de3c:	bf00      	nop
 800de3e:	e7fe      	b.n	800de3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800de40:	4b09      	ldr	r3, [pc, #36]	; (800de68 <vPortExitCritical+0x4c>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	3b01      	subs	r3, #1
 800de46:	4a08      	ldr	r2, [pc, #32]	; (800de68 <vPortExitCritical+0x4c>)
 800de48:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800de4a:	4b07      	ldr	r3, [pc, #28]	; (800de68 <vPortExitCritical+0x4c>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d105      	bne.n	800de5e <vPortExitCritical+0x42>
 800de52:	2300      	movs	r3, #0
 800de54:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	f383 8811 	msr	BASEPRI, r3
}
 800de5c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800de5e:	bf00      	nop
 800de60:	370c      	adds	r7, #12
 800de62:	46bd      	mov	sp, r7
 800de64:	bc80      	pop	{r7}
 800de66:	4770      	bx	lr
 800de68:	2000012c 	.word	0x2000012c
 800de6c:	00000000 	.word	0x00000000

0800de70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800de70:	f3ef 8009 	mrs	r0, PSP
 800de74:	f3bf 8f6f 	isb	sy
 800de78:	4b0d      	ldr	r3, [pc, #52]	; (800deb0 <pxCurrentTCBConst>)
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800de80:	6010      	str	r0, [r2, #0]
 800de82:	e92d 4008 	stmdb	sp!, {r3, lr}
 800de86:	f04f 0050 	mov.w	r0, #80	; 0x50
 800de8a:	f380 8811 	msr	BASEPRI, r0
 800de8e:	f7fe fe2b 	bl	800cae8 <vTaskSwitchContext>
 800de92:	f04f 0000 	mov.w	r0, #0
 800de96:	f380 8811 	msr	BASEPRI, r0
 800de9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800de9e:	6819      	ldr	r1, [r3, #0]
 800dea0:	6808      	ldr	r0, [r1, #0]
 800dea2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800dea6:	f380 8809 	msr	PSP, r0
 800deaa:	f3bf 8f6f 	isb	sy
 800deae:	4770      	bx	lr

0800deb0 <pxCurrentTCBConst>:
 800deb0:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800deb4:	bf00      	nop
 800deb6:	bf00      	nop

0800deb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
	__asm volatile
 800debe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec2:	f383 8811 	msr	BASEPRI, r3
 800dec6:	f3bf 8f6f 	isb	sy
 800deca:	f3bf 8f4f 	dsb	sy
 800dece:	607b      	str	r3, [r7, #4]
}
 800ded0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ded2:	f7fe fd4b 	bl	800c96c <xTaskIncrementTick>
 800ded6:	4603      	mov	r3, r0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d003      	beq.n	800dee4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dedc:	4b06      	ldr	r3, [pc, #24]	; (800def8 <SysTick_Handler+0x40>)
 800dede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dee2:	601a      	str	r2, [r3, #0]
 800dee4:	2300      	movs	r3, #0
 800dee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	f383 8811 	msr	BASEPRI, r3
}
 800deee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800def0:	bf00      	nop
 800def2:	3708      	adds	r7, #8
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	e000ed04 	.word	0xe000ed04

0800defc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800defc:	b480      	push	{r7}
 800defe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800df00:	4b0a      	ldr	r3, [pc, #40]	; (800df2c <vPortSetupTimerInterrupt+0x30>)
 800df02:	2200      	movs	r2, #0
 800df04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800df06:	4b0a      	ldr	r3, [pc, #40]	; (800df30 <vPortSetupTimerInterrupt+0x34>)
 800df08:	2200      	movs	r2, #0
 800df0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800df0c:	4b09      	ldr	r3, [pc, #36]	; (800df34 <vPortSetupTimerInterrupt+0x38>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a09      	ldr	r2, [pc, #36]	; (800df38 <vPortSetupTimerInterrupt+0x3c>)
 800df12:	fba2 2303 	umull	r2, r3, r2, r3
 800df16:	099b      	lsrs	r3, r3, #6
 800df18:	4a08      	ldr	r2, [pc, #32]	; (800df3c <vPortSetupTimerInterrupt+0x40>)
 800df1a:	3b01      	subs	r3, #1
 800df1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800df1e:	4b03      	ldr	r3, [pc, #12]	; (800df2c <vPortSetupTimerInterrupt+0x30>)
 800df20:	2207      	movs	r2, #7
 800df22:	601a      	str	r2, [r3, #0]
}
 800df24:	bf00      	nop
 800df26:	46bd      	mov	sp, r7
 800df28:	bc80      	pop	{r7}
 800df2a:	4770      	bx	lr
 800df2c:	e000e010 	.word	0xe000e010
 800df30:	e000e018 	.word	0xe000e018
 800df34:	20000010 	.word	0x20000010
 800df38:	10624dd3 	.word	0x10624dd3
 800df3c:	e000e014 	.word	0xe000e014

0800df40 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800df40:	b480      	push	{r7}
 800df42:	b085      	sub	sp, #20
 800df44:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800df46:	f3ef 8305 	mrs	r3, IPSR
 800df4a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2b0f      	cmp	r3, #15
 800df50:	d914      	bls.n	800df7c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800df52:	4a16      	ldr	r2, [pc, #88]	; (800dfac <vPortValidateInterruptPriority+0x6c>)
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	4413      	add	r3, r2
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800df5c:	4b14      	ldr	r3, [pc, #80]	; (800dfb0 <vPortValidateInterruptPriority+0x70>)
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	7afa      	ldrb	r2, [r7, #11]
 800df62:	429a      	cmp	r2, r3
 800df64:	d20a      	bcs.n	800df7c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800df66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6a:	f383 8811 	msr	BASEPRI, r3
 800df6e:	f3bf 8f6f 	isb	sy
 800df72:	f3bf 8f4f 	dsb	sy
 800df76:	607b      	str	r3, [r7, #4]
}
 800df78:	bf00      	nop
 800df7a:	e7fe      	b.n	800df7a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800df7c:	4b0d      	ldr	r3, [pc, #52]	; (800dfb4 <vPortValidateInterruptPriority+0x74>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800df84:	4b0c      	ldr	r3, [pc, #48]	; (800dfb8 <vPortValidateInterruptPriority+0x78>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d90a      	bls.n	800dfa2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800df8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df90:	f383 8811 	msr	BASEPRI, r3
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	f3bf 8f4f 	dsb	sy
 800df9c:	603b      	str	r3, [r7, #0]
}
 800df9e:	bf00      	nop
 800dfa0:	e7fe      	b.n	800dfa0 <vPortValidateInterruptPriority+0x60>
	}
 800dfa2:	bf00      	nop
 800dfa4:	3714      	adds	r7, #20
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bc80      	pop	{r7}
 800dfaa:	4770      	bx	lr
 800dfac:	e000e3f0 	.word	0xe000e3f0
 800dfb0:	20000e9c 	.word	0x20000e9c
 800dfb4:	e000ed0c 	.word	0xe000ed0c
 800dfb8:	20000ea0 	.word	0x20000ea0

0800dfbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b08a      	sub	sp, #40	; 0x28
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dfc8:	f7fe fc16 	bl	800c7f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dfcc:	4b58      	ldr	r3, [pc, #352]	; (800e130 <pvPortMalloc+0x174>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d101      	bne.n	800dfd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dfd4:	f000 f910 	bl	800e1f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dfd8:	4b56      	ldr	r3, [pc, #344]	; (800e134 <pvPortMalloc+0x178>)
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	4013      	ands	r3, r2
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	f040 808e 	bne.w	800e102 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d01d      	beq.n	800e028 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dfec:	2208      	movs	r2, #8
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4413      	add	r3, r2
 800dff2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f003 0307 	and.w	r3, r3, #7
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d014      	beq.n	800e028 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f023 0307 	bic.w	r3, r3, #7
 800e004:	3308      	adds	r3, #8
 800e006:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f003 0307 	and.w	r3, r3, #7
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d00a      	beq.n	800e028 <pvPortMalloc+0x6c>
	__asm volatile
 800e012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e016:	f383 8811 	msr	BASEPRI, r3
 800e01a:	f3bf 8f6f 	isb	sy
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	617b      	str	r3, [r7, #20]
}
 800e024:	bf00      	nop
 800e026:	e7fe      	b.n	800e026 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d069      	beq.n	800e102 <pvPortMalloc+0x146>
 800e02e:	4b42      	ldr	r3, [pc, #264]	; (800e138 <pvPortMalloc+0x17c>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	687a      	ldr	r2, [r7, #4]
 800e034:	429a      	cmp	r2, r3
 800e036:	d864      	bhi.n	800e102 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e038:	4b40      	ldr	r3, [pc, #256]	; (800e13c <pvPortMalloc+0x180>)
 800e03a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e03c:	4b3f      	ldr	r3, [pc, #252]	; (800e13c <pvPortMalloc+0x180>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e042:	e004      	b.n	800e04e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e046:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	429a      	cmp	r2, r3
 800e056:	d903      	bls.n	800e060 <pvPortMalloc+0xa4>
 800e058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d1f1      	bne.n	800e044 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e060:	4b33      	ldr	r3, [pc, #204]	; (800e130 <pvPortMalloc+0x174>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e066:	429a      	cmp	r2, r3
 800e068:	d04b      	beq.n	800e102 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e06a:	6a3b      	ldr	r3, [r7, #32]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	2208      	movs	r2, #8
 800e070:	4413      	add	r3, r2
 800e072:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e076:	681a      	ldr	r2, [r3, #0]
 800e078:	6a3b      	ldr	r3, [r7, #32]
 800e07a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07e:	685a      	ldr	r2, [r3, #4]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	1ad2      	subs	r2, r2, r3
 800e084:	2308      	movs	r3, #8
 800e086:	005b      	lsls	r3, r3, #1
 800e088:	429a      	cmp	r2, r3
 800e08a:	d91f      	bls.n	800e0cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4413      	add	r3, r2
 800e092:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e094:	69bb      	ldr	r3, [r7, #24]
 800e096:	f003 0307 	and.w	r3, r3, #7
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d00a      	beq.n	800e0b4 <pvPortMalloc+0xf8>
	__asm volatile
 800e09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a2:	f383 8811 	msr	BASEPRI, r3
 800e0a6:	f3bf 8f6f 	isb	sy
 800e0aa:	f3bf 8f4f 	dsb	sy
 800e0ae:	613b      	str	r3, [r7, #16]
}
 800e0b0:	bf00      	nop
 800e0b2:	e7fe      	b.n	800e0b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b6:	685a      	ldr	r2, [r3, #4]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	1ad2      	subs	r2, r2, r3
 800e0bc:	69bb      	ldr	r3, [r7, #24]
 800e0be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e0c6:	69b8      	ldr	r0, [r7, #24]
 800e0c8:	f000 f8f8 	bl	800e2bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e0cc:	4b1a      	ldr	r3, [pc, #104]	; (800e138 <pvPortMalloc+0x17c>)
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	1ad3      	subs	r3, r2, r3
 800e0d6:	4a18      	ldr	r2, [pc, #96]	; (800e138 <pvPortMalloc+0x17c>)
 800e0d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e0da:	4b17      	ldr	r3, [pc, #92]	; (800e138 <pvPortMalloc+0x17c>)
 800e0dc:	681a      	ldr	r2, [r3, #0]
 800e0de:	4b18      	ldr	r3, [pc, #96]	; (800e140 <pvPortMalloc+0x184>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d203      	bcs.n	800e0ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e0e6:	4b14      	ldr	r3, [pc, #80]	; (800e138 <pvPortMalloc+0x17c>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4a15      	ldr	r2, [pc, #84]	; (800e140 <pvPortMalloc+0x184>)
 800e0ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f0:	685a      	ldr	r2, [r3, #4]
 800e0f2:	4b10      	ldr	r3, [pc, #64]	; (800e134 <pvPortMalloc+0x178>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	431a      	orrs	r2, r3
 800e0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fe:	2200      	movs	r2, #0
 800e100:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e102:	f7fe fb87 	bl	800c814 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e106:	69fb      	ldr	r3, [r7, #28]
 800e108:	f003 0307 	and.w	r3, r3, #7
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00a      	beq.n	800e126 <pvPortMalloc+0x16a>
	__asm volatile
 800e110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e114:	f383 8811 	msr	BASEPRI, r3
 800e118:	f3bf 8f6f 	isb	sy
 800e11c:	f3bf 8f4f 	dsb	sy
 800e120:	60fb      	str	r3, [r7, #12]
}
 800e122:	bf00      	nop
 800e124:	e7fe      	b.n	800e124 <pvPortMalloc+0x168>
	return pvReturn;
 800e126:	69fb      	ldr	r3, [r7, #28]
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3728      	adds	r7, #40	; 0x28
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	20002248 	.word	0x20002248
 800e134:	20002254 	.word	0x20002254
 800e138:	2000224c 	.word	0x2000224c
 800e13c:	20002240 	.word	0x20002240
 800e140:	20002250 	.word	0x20002250

0800e144 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b086      	sub	sp, #24
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d048      	beq.n	800e1e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e156:	2308      	movs	r3, #8
 800e158:	425b      	negs	r3, r3
 800e15a:	697a      	ldr	r2, [r7, #20]
 800e15c:	4413      	add	r3, r2
 800e15e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	685a      	ldr	r2, [r3, #4]
 800e168:	4b21      	ldr	r3, [pc, #132]	; (800e1f0 <vPortFree+0xac>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4013      	ands	r3, r2
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d10a      	bne.n	800e188 <vPortFree+0x44>
	__asm volatile
 800e172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e176:	f383 8811 	msr	BASEPRI, r3
 800e17a:	f3bf 8f6f 	isb	sy
 800e17e:	f3bf 8f4f 	dsb	sy
 800e182:	60fb      	str	r3, [r7, #12]
}
 800e184:	bf00      	nop
 800e186:	e7fe      	b.n	800e186 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d00a      	beq.n	800e1a6 <vPortFree+0x62>
	__asm volatile
 800e190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e194:	f383 8811 	msr	BASEPRI, r3
 800e198:	f3bf 8f6f 	isb	sy
 800e19c:	f3bf 8f4f 	dsb	sy
 800e1a0:	60bb      	str	r3, [r7, #8]
}
 800e1a2:	bf00      	nop
 800e1a4:	e7fe      	b.n	800e1a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	685a      	ldr	r2, [r3, #4]
 800e1aa:	4b11      	ldr	r3, [pc, #68]	; (800e1f0 <vPortFree+0xac>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4013      	ands	r3, r2
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d019      	beq.n	800e1e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d115      	bne.n	800e1e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	685a      	ldr	r2, [r3, #4]
 800e1c0:	4b0b      	ldr	r3, [pc, #44]	; (800e1f0 <vPortFree+0xac>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	43db      	mvns	r3, r3
 800e1c6:	401a      	ands	r2, r3
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e1cc:	f7fe fb14 	bl	800c7f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	685a      	ldr	r2, [r3, #4]
 800e1d4:	4b07      	ldr	r3, [pc, #28]	; (800e1f4 <vPortFree+0xb0>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4413      	add	r3, r2
 800e1da:	4a06      	ldr	r2, [pc, #24]	; (800e1f4 <vPortFree+0xb0>)
 800e1dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e1de:	6938      	ldr	r0, [r7, #16]
 800e1e0:	f000 f86c 	bl	800e2bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e1e4:	f7fe fb16 	bl	800c814 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e1e8:	bf00      	nop
 800e1ea:	3718      	adds	r7, #24
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	20002254 	.word	0x20002254
 800e1f4:	2000224c 	.word	0x2000224c

0800e1f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b085      	sub	sp, #20
 800e1fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e1fe:	f241 339c 	movw	r3, #5020	; 0x139c
 800e202:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e204:	4b27      	ldr	r3, [pc, #156]	; (800e2a4 <prvHeapInit+0xac>)
 800e206:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f003 0307 	and.w	r3, r3, #7
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d00c      	beq.n	800e22c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	3307      	adds	r3, #7
 800e216:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	f023 0307 	bic.w	r3, r3, #7
 800e21e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e220:	68ba      	ldr	r2, [r7, #8]
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	1ad3      	subs	r3, r2, r3
 800e226:	4a1f      	ldr	r2, [pc, #124]	; (800e2a4 <prvHeapInit+0xac>)
 800e228:	4413      	add	r3, r2
 800e22a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e230:	4a1d      	ldr	r2, [pc, #116]	; (800e2a8 <prvHeapInit+0xb0>)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e236:	4b1c      	ldr	r3, [pc, #112]	; (800e2a8 <prvHeapInit+0xb0>)
 800e238:	2200      	movs	r2, #0
 800e23a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	68ba      	ldr	r2, [r7, #8]
 800e240:	4413      	add	r3, r2
 800e242:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e244:	2208      	movs	r2, #8
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	1a9b      	subs	r3, r3, r2
 800e24a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f023 0307 	bic.w	r3, r3, #7
 800e252:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	4a15      	ldr	r2, [pc, #84]	; (800e2ac <prvHeapInit+0xb4>)
 800e258:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e25a:	4b14      	ldr	r3, [pc, #80]	; (800e2ac <prvHeapInit+0xb4>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	2200      	movs	r2, #0
 800e260:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e262:	4b12      	ldr	r3, [pc, #72]	; (800e2ac <prvHeapInit+0xb4>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2200      	movs	r2, #0
 800e268:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	1ad2      	subs	r2, r2, r3
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e278:	4b0c      	ldr	r3, [pc, #48]	; (800e2ac <prvHeapInit+0xb4>)
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	4a0a      	ldr	r2, [pc, #40]	; (800e2b0 <prvHeapInit+0xb8>)
 800e286:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	4a09      	ldr	r2, [pc, #36]	; (800e2b4 <prvHeapInit+0xbc>)
 800e28e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e290:	4b09      	ldr	r3, [pc, #36]	; (800e2b8 <prvHeapInit+0xc0>)
 800e292:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e296:	601a      	str	r2, [r3, #0]
}
 800e298:	bf00      	nop
 800e29a:	3714      	adds	r7, #20
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bc80      	pop	{r7}
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop
 800e2a4:	20000ea4 	.word	0x20000ea4
 800e2a8:	20002240 	.word	0x20002240
 800e2ac:	20002248 	.word	0x20002248
 800e2b0:	20002250 	.word	0x20002250
 800e2b4:	2000224c 	.word	0x2000224c
 800e2b8:	20002254 	.word	0x20002254

0800e2bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b085      	sub	sp, #20
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e2c4:	4b27      	ldr	r3, [pc, #156]	; (800e364 <prvInsertBlockIntoFreeList+0xa8>)
 800e2c6:	60fb      	str	r3, [r7, #12]
 800e2c8:	e002      	b.n	800e2d0 <prvInsertBlockIntoFreeList+0x14>
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	60fb      	str	r3, [r7, #12]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	687a      	ldr	r2, [r7, #4]
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d8f7      	bhi.n	800e2ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	68ba      	ldr	r2, [r7, #8]
 800e2e4:	4413      	add	r3, r2
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d108      	bne.n	800e2fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	685a      	ldr	r2, [r3, #4]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	441a      	add	r2, r3
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	68ba      	ldr	r2, [r7, #8]
 800e308:	441a      	add	r2, r3
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d118      	bne.n	800e344 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	681a      	ldr	r2, [r3, #0]
 800e316:	4b14      	ldr	r3, [pc, #80]	; (800e368 <prvInsertBlockIntoFreeList+0xac>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d00d      	beq.n	800e33a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	685a      	ldr	r2, [r3, #4]
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	441a      	add	r2, r3
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	681a      	ldr	r2, [r3, #0]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	601a      	str	r2, [r3, #0]
 800e338:	e008      	b.n	800e34c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e33a:	4b0b      	ldr	r3, [pc, #44]	; (800e368 <prvInsertBlockIntoFreeList+0xac>)
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	601a      	str	r2, [r3, #0]
 800e342:	e003      	b.n	800e34c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e34c:	68fa      	ldr	r2, [r7, #12]
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	429a      	cmp	r2, r3
 800e352:	d002      	beq.n	800e35a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e35a:	bf00      	nop
 800e35c:	3714      	adds	r7, #20
 800e35e:	46bd      	mov	sp, r7
 800e360:	bc80      	pop	{r7}
 800e362:	4770      	bx	lr
 800e364:	20002240 	.word	0x20002240
 800e368:	20002248 	.word	0x20002248

0800e36c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e370:	2200      	movs	r2, #0
 800e372:	4912      	ldr	r1, [pc, #72]	; (800e3bc <MX_USB_DEVICE_Init+0x50>)
 800e374:	4812      	ldr	r0, [pc, #72]	; (800e3c0 <MX_USB_DEVICE_Init+0x54>)
 800e376:	f7fb fd20 	bl	8009dba <USBD_Init>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d001      	beq.n	800e384 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e380:	f7f2 fe94 	bl	80010ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e384:	490f      	ldr	r1, [pc, #60]	; (800e3c4 <MX_USB_DEVICE_Init+0x58>)
 800e386:	480e      	ldr	r0, [pc, #56]	; (800e3c0 <MX_USB_DEVICE_Init+0x54>)
 800e388:	f7fb fd42 	bl	8009e10 <USBD_RegisterClass>
 800e38c:	4603      	mov	r3, r0
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d001      	beq.n	800e396 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e392:	f7f2 fe8b 	bl	80010ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e396:	490c      	ldr	r1, [pc, #48]	; (800e3c8 <MX_USB_DEVICE_Init+0x5c>)
 800e398:	4809      	ldr	r0, [pc, #36]	; (800e3c0 <MX_USB_DEVICE_Init+0x54>)
 800e39a:	f7fb fc73 	bl	8009c84 <USBD_CDC_RegisterInterface>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d001      	beq.n	800e3a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e3a4:	f7f2 fe82 	bl	80010ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e3a8:	4805      	ldr	r0, [pc, #20]	; (800e3c0 <MX_USB_DEVICE_Init+0x54>)
 800e3aa:	f7fb fd4a 	bl	8009e42 <USBD_Start>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d001      	beq.n	800e3b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e3b4:	f7f2 fe7a 	bl	80010ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e3b8:	bf00      	nop
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	20000140 	.word	0x20000140
 800e3c0:	200026c0 	.word	0x200026c0
 800e3c4:	20000028 	.word	0x20000028
 800e3c8:	20000130 	.word	0x20000130

0800e3cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	4905      	ldr	r1, [pc, #20]	; (800e3e8 <CDC_Init_FS+0x1c>)
 800e3d4:	4805      	ldr	r0, [pc, #20]	; (800e3ec <CDC_Init_FS+0x20>)
 800e3d6:	f7fb fc6b 	bl	8009cb0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e3da:	4905      	ldr	r1, [pc, #20]	; (800e3f0 <CDC_Init_FS+0x24>)
 800e3dc:	4803      	ldr	r0, [pc, #12]	; (800e3ec <CDC_Init_FS+0x20>)
 800e3de:	f7fb fc80 	bl	8009ce2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e3e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	20002d6c 	.word	0x20002d6c
 800e3ec:	200026c0 	.word	0x200026c0
 800e3f0:	20002984 	.word	0x20002984

0800e3f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e3f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bc80      	pop	{r7}
 800e400:	4770      	bx	lr
	...

0800e404 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
 800e40a:	4603      	mov	r3, r0
 800e40c:	6039      	str	r1, [r7, #0]
 800e40e:	71fb      	strb	r3, [r7, #7]
 800e410:	4613      	mov	r3, r2
 800e412:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e414:	79fb      	ldrb	r3, [r7, #7]
 800e416:	2b23      	cmp	r3, #35	; 0x23
 800e418:	d84a      	bhi.n	800e4b0 <CDC_Control_FS+0xac>
 800e41a:	a201      	add	r2, pc, #4	; (adr r2, 800e420 <CDC_Control_FS+0x1c>)
 800e41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e420:	0800e4b1 	.word	0x0800e4b1
 800e424:	0800e4b1 	.word	0x0800e4b1
 800e428:	0800e4b1 	.word	0x0800e4b1
 800e42c:	0800e4b1 	.word	0x0800e4b1
 800e430:	0800e4b1 	.word	0x0800e4b1
 800e434:	0800e4b1 	.word	0x0800e4b1
 800e438:	0800e4b1 	.word	0x0800e4b1
 800e43c:	0800e4b1 	.word	0x0800e4b1
 800e440:	0800e4b1 	.word	0x0800e4b1
 800e444:	0800e4b1 	.word	0x0800e4b1
 800e448:	0800e4b1 	.word	0x0800e4b1
 800e44c:	0800e4b1 	.word	0x0800e4b1
 800e450:	0800e4b1 	.word	0x0800e4b1
 800e454:	0800e4b1 	.word	0x0800e4b1
 800e458:	0800e4b1 	.word	0x0800e4b1
 800e45c:	0800e4b1 	.word	0x0800e4b1
 800e460:	0800e4b1 	.word	0x0800e4b1
 800e464:	0800e4b1 	.word	0x0800e4b1
 800e468:	0800e4b1 	.word	0x0800e4b1
 800e46c:	0800e4b1 	.word	0x0800e4b1
 800e470:	0800e4b1 	.word	0x0800e4b1
 800e474:	0800e4b1 	.word	0x0800e4b1
 800e478:	0800e4b1 	.word	0x0800e4b1
 800e47c:	0800e4b1 	.word	0x0800e4b1
 800e480:	0800e4b1 	.word	0x0800e4b1
 800e484:	0800e4b1 	.word	0x0800e4b1
 800e488:	0800e4b1 	.word	0x0800e4b1
 800e48c:	0800e4b1 	.word	0x0800e4b1
 800e490:	0800e4b1 	.word	0x0800e4b1
 800e494:	0800e4b1 	.word	0x0800e4b1
 800e498:	0800e4b1 	.word	0x0800e4b1
 800e49c:	0800e4b1 	.word	0x0800e4b1
 800e4a0:	0800e4b1 	.word	0x0800e4b1
 800e4a4:	0800e4b1 	.word	0x0800e4b1
 800e4a8:	0800e4b1 	.word	0x0800e4b1
 800e4ac:	0800e4b1 	.word	0x0800e4b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e4b0:	bf00      	nop
  }

  return (USBD_OK);
 800e4b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bc80      	pop	{r7}
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop

0800e4c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	60fb      	str	r3, [r7, #12]
 800e4d2:	e00c      	b.n	800e4ee <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800e4d4:	4b14      	ldr	r3, [pc, #80]	; (800e528 <CDC_Receive_FS+0x68>)
 800e4d6:	6818      	ldr	r0, [r3, #0]
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	18d1      	adds	r1, r2, r3
 800e4de:	f107 0208 	add.w	r2, r7, #8
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	f7fd fad0 	bl	800ba88 <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	60fb      	str	r3, [r7, #12]
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	68fa      	ldr	r2, [r7, #12]
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d3ed      	bcc.n	800e4d4 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e4f8:	6879      	ldr	r1, [r7, #4]
 800e4fa:	480c      	ldr	r0, [pc, #48]	; (800e52c <CDC_Receive_FS+0x6c>)
 800e4fc:	f7fb fbf1 	bl	8009ce2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e500:	480a      	ldr	r0, [pc, #40]	; (800e52c <CDC_Receive_FS+0x6c>)
 800e502:	f7fb fc30 	bl	8009d66 <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d007      	beq.n	800e51c <CDC_Receive_FS+0x5c>
 800e50c:	4b08      	ldr	r3, [pc, #32]	; (800e530 <CDC_Receive_FS+0x70>)
 800e50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e512:	601a      	str	r2, [r3, #0]
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800e51c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3710      	adds	r7, #16
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	20002494 	.word	0x20002494
 800e52c:	200026c0 	.word	0x200026c0
 800e530:	e000ed04 	.word	0xe000ed04

0800e534 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	460b      	mov	r3, r1
 800e53e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e540:	2300      	movs	r3, #0
 800e542:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e544:	4b0d      	ldr	r3, [pc, #52]	; (800e57c <CDC_Transmit_FS+0x48>)
 800e546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e54a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e552:	2b00      	cmp	r3, #0
 800e554:	d001      	beq.n	800e55a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e556:	2301      	movs	r3, #1
 800e558:	e00b      	b.n	800e572 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e55a:	887b      	ldrh	r3, [r7, #2]
 800e55c:	461a      	mov	r2, r3
 800e55e:	6879      	ldr	r1, [r7, #4]
 800e560:	4806      	ldr	r0, [pc, #24]	; (800e57c <CDC_Transmit_FS+0x48>)
 800e562:	f7fb fba5 	bl	8009cb0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e566:	4805      	ldr	r0, [pc, #20]	; (800e57c <CDC_Transmit_FS+0x48>)
 800e568:	f7fb fbce 	bl	8009d08 <USBD_CDC_TransmitPacket>
 800e56c:	4603      	mov	r3, r0
 800e56e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e570:	7bfb      	ldrb	r3, [r7, #15]
}
 800e572:	4618      	mov	r0, r3
 800e574:	3710      	adds	r7, #16
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	200026c0 	.word	0x200026c0

0800e580 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	4603      	mov	r3, r0
 800e588:	6039      	str	r1, [r7, #0]
 800e58a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	2212      	movs	r2, #18
 800e590:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e592:	4b03      	ldr	r3, [pc, #12]	; (800e5a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e594:	4618      	mov	r0, r3
 800e596:	370c      	adds	r7, #12
 800e598:	46bd      	mov	sp, r7
 800e59a:	bc80      	pop	{r7}
 800e59c:	4770      	bx	lr
 800e59e:	bf00      	nop
 800e5a0:	2000015c 	.word	0x2000015c

0800e5a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b083      	sub	sp, #12
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	6039      	str	r1, [r7, #0]
 800e5ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	2204      	movs	r2, #4
 800e5b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e5b6:	4b03      	ldr	r3, [pc, #12]	; (800e5c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	370c      	adds	r7, #12
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bc80      	pop	{r7}
 800e5c0:	4770      	bx	lr
 800e5c2:	bf00      	nop
 800e5c4:	20000170 	.word	0x20000170

0800e5c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	6039      	str	r1, [r7, #0]
 800e5d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e5d4:	79fb      	ldrb	r3, [r7, #7]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d105      	bne.n	800e5e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5da:	683a      	ldr	r2, [r7, #0]
 800e5dc:	4907      	ldr	r1, [pc, #28]	; (800e5fc <USBD_FS_ProductStrDescriptor+0x34>)
 800e5de:	4808      	ldr	r0, [pc, #32]	; (800e600 <USBD_FS_ProductStrDescriptor+0x38>)
 800e5e0:	f7fc fba8 	bl	800ad34 <USBD_GetString>
 800e5e4:	e004      	b.n	800e5f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5e6:	683a      	ldr	r2, [r7, #0]
 800e5e8:	4904      	ldr	r1, [pc, #16]	; (800e5fc <USBD_FS_ProductStrDescriptor+0x34>)
 800e5ea:	4805      	ldr	r0, [pc, #20]	; (800e600 <USBD_FS_ProductStrDescriptor+0x38>)
 800e5ec:	f7fc fba2 	bl	800ad34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e5f0:	4b02      	ldr	r3, [pc, #8]	; (800e5fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3708      	adds	r7, #8
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	20003154 	.word	0x20003154
 800e600:	0800efc4 	.word	0x0800efc4

0800e604 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	4603      	mov	r3, r0
 800e60c:	6039      	str	r1, [r7, #0]
 800e60e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e610:	683a      	ldr	r2, [r7, #0]
 800e612:	4904      	ldr	r1, [pc, #16]	; (800e624 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e614:	4804      	ldr	r0, [pc, #16]	; (800e628 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e616:	f7fc fb8d 	bl	800ad34 <USBD_GetString>
  return USBD_StrDesc;
 800e61a:	4b02      	ldr	r3, [pc, #8]	; (800e624 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3708      	adds	r7, #8
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}
 800e624:	20003154 	.word	0x20003154
 800e628:	0800efd0 	.word	0x0800efd0

0800e62c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	4603      	mov	r3, r0
 800e634:	6039      	str	r1, [r7, #0]
 800e636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	221a      	movs	r2, #26
 800e63c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e63e:	f000 f843 	bl	800e6c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e642:	4b02      	ldr	r3, [pc, #8]	; (800e64c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e644:	4618      	mov	r0, r3
 800e646:	3708      	adds	r7, #8
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	20000174 	.word	0x20000174

0800e650 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
 800e656:	4603      	mov	r3, r0
 800e658:	6039      	str	r1, [r7, #0]
 800e65a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e65c:	79fb      	ldrb	r3, [r7, #7]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d105      	bne.n	800e66e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e662:	683a      	ldr	r2, [r7, #0]
 800e664:	4907      	ldr	r1, [pc, #28]	; (800e684 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e666:	4808      	ldr	r0, [pc, #32]	; (800e688 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e668:	f7fc fb64 	bl	800ad34 <USBD_GetString>
 800e66c:	e004      	b.n	800e678 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e66e:	683a      	ldr	r2, [r7, #0]
 800e670:	4904      	ldr	r1, [pc, #16]	; (800e684 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e672:	4805      	ldr	r0, [pc, #20]	; (800e688 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e674:	f7fc fb5e 	bl	800ad34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e678:	4b02      	ldr	r3, [pc, #8]	; (800e684 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3708      	adds	r7, #8
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	20003154 	.word	0x20003154
 800e688:	0800efe4 	.word	0x0800efe4

0800e68c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	4603      	mov	r3, r0
 800e694:	6039      	str	r1, [r7, #0]
 800e696:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e698:	79fb      	ldrb	r3, [r7, #7]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d105      	bne.n	800e6aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e69e:	683a      	ldr	r2, [r7, #0]
 800e6a0:	4907      	ldr	r1, [pc, #28]	; (800e6c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e6a2:	4808      	ldr	r0, [pc, #32]	; (800e6c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e6a4:	f7fc fb46 	bl	800ad34 <USBD_GetString>
 800e6a8:	e004      	b.n	800e6b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e6aa:	683a      	ldr	r2, [r7, #0]
 800e6ac:	4904      	ldr	r1, [pc, #16]	; (800e6c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e6ae:	4805      	ldr	r0, [pc, #20]	; (800e6c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e6b0:	f7fc fb40 	bl	800ad34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6b4:	4b02      	ldr	r3, [pc, #8]	; (800e6c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3708      	adds	r7, #8
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	20003154 	.word	0x20003154
 800e6c4:	0800eff0 	.word	0x0800eff0

0800e6c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e6ce:	4b0f      	ldr	r3, [pc, #60]	; (800e70c <Get_SerialNum+0x44>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e6d4:	4b0e      	ldr	r3, [pc, #56]	; (800e710 <Get_SerialNum+0x48>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e6da:	4b0e      	ldr	r3, [pc, #56]	; (800e714 <Get_SerialNum+0x4c>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e6e0:	68fa      	ldr	r2, [r7, #12]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	4413      	add	r3, r2
 800e6e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d009      	beq.n	800e702 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e6ee:	2208      	movs	r2, #8
 800e6f0:	4909      	ldr	r1, [pc, #36]	; (800e718 <Get_SerialNum+0x50>)
 800e6f2:	68f8      	ldr	r0, [r7, #12]
 800e6f4:	f000 f814 	bl	800e720 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e6f8:	2204      	movs	r2, #4
 800e6fa:	4908      	ldr	r1, [pc, #32]	; (800e71c <Get_SerialNum+0x54>)
 800e6fc:	68b8      	ldr	r0, [r7, #8]
 800e6fe:	f000 f80f 	bl	800e720 <IntToUnicode>
  }
}
 800e702:	bf00      	nop
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	1ffff7e8 	.word	0x1ffff7e8
 800e710:	1ffff7ec 	.word	0x1ffff7ec
 800e714:	1ffff7f0 	.word	0x1ffff7f0
 800e718:	20000176 	.word	0x20000176
 800e71c:	20000186 	.word	0x20000186

0800e720 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e720:	b480      	push	{r7}
 800e722:	b087      	sub	sp, #28
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	4613      	mov	r3, r2
 800e72c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e72e:	2300      	movs	r3, #0
 800e730:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e732:	2300      	movs	r3, #0
 800e734:	75fb      	strb	r3, [r7, #23]
 800e736:	e027      	b.n	800e788 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	0f1b      	lsrs	r3, r3, #28
 800e73c:	2b09      	cmp	r3, #9
 800e73e:	d80b      	bhi.n	800e758 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	0f1b      	lsrs	r3, r3, #28
 800e744:	b2da      	uxtb	r2, r3
 800e746:	7dfb      	ldrb	r3, [r7, #23]
 800e748:	005b      	lsls	r3, r3, #1
 800e74a:	4619      	mov	r1, r3
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	440b      	add	r3, r1
 800e750:	3230      	adds	r2, #48	; 0x30
 800e752:	b2d2      	uxtb	r2, r2
 800e754:	701a      	strb	r2, [r3, #0]
 800e756:	e00a      	b.n	800e76e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	0f1b      	lsrs	r3, r3, #28
 800e75c:	b2da      	uxtb	r2, r3
 800e75e:	7dfb      	ldrb	r3, [r7, #23]
 800e760:	005b      	lsls	r3, r3, #1
 800e762:	4619      	mov	r1, r3
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	440b      	add	r3, r1
 800e768:	3237      	adds	r2, #55	; 0x37
 800e76a:	b2d2      	uxtb	r2, r2
 800e76c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	011b      	lsls	r3, r3, #4
 800e772:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e774:	7dfb      	ldrb	r3, [r7, #23]
 800e776:	005b      	lsls	r3, r3, #1
 800e778:	3301      	adds	r3, #1
 800e77a:	68ba      	ldr	r2, [r7, #8]
 800e77c:	4413      	add	r3, r2
 800e77e:	2200      	movs	r2, #0
 800e780:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e782:	7dfb      	ldrb	r3, [r7, #23]
 800e784:	3301      	adds	r3, #1
 800e786:	75fb      	strb	r3, [r7, #23]
 800e788:	7dfa      	ldrb	r2, [r7, #23]
 800e78a:	79fb      	ldrb	r3, [r7, #7]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d3d3      	bcc.n	800e738 <IntToUnicode+0x18>
  }
}
 800e790:	bf00      	nop
 800e792:	bf00      	nop
 800e794:	371c      	adds	r7, #28
 800e796:	46bd      	mov	sp, r7
 800e798:	bc80      	pop	{r7}
 800e79a:	4770      	bx	lr

0800e79c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a0d      	ldr	r2, [pc, #52]	; (800e7e0 <HAL_PCD_MspInit+0x44>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d113      	bne.n	800e7d6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e7ae:	4b0d      	ldr	r3, [pc, #52]	; (800e7e4 <HAL_PCD_MspInit+0x48>)
 800e7b0:	69db      	ldr	r3, [r3, #28]
 800e7b2:	4a0c      	ldr	r2, [pc, #48]	; (800e7e4 <HAL_PCD_MspInit+0x48>)
 800e7b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e7b8:	61d3      	str	r3, [r2, #28]
 800e7ba:	4b0a      	ldr	r3, [pc, #40]	; (800e7e4 <HAL_PCD_MspInit+0x48>)
 800e7bc:	69db      	ldr	r3, [r3, #28]
 800e7be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e7c2:	60fb      	str	r3, [r7, #12]
 800e7c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	2105      	movs	r1, #5
 800e7ca:	2014      	movs	r0, #20
 800e7cc:	f7f3 fff7 	bl	80027be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800e7d0:	2014      	movs	r0, #20
 800e7d2:	f7f4 f810 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e7d6:	bf00      	nop
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	40005c00 	.word	0x40005c00
 800e7e4:	40021000 	.word	0x40021000

0800e7e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	4610      	mov	r0, r2
 800e800:	f7fb fb67 	bl	8009ed2 <USBD_LL_SetupStage>
}
 800e804:	bf00      	nop
 800e806:	3708      	adds	r7, #8
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	460b      	mov	r3, r1
 800e816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e81e:	78fa      	ldrb	r2, [r7, #3]
 800e820:	6879      	ldr	r1, [r7, #4]
 800e822:	4613      	mov	r3, r2
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	4413      	add	r3, r2
 800e828:	00db      	lsls	r3, r3, #3
 800e82a:	440b      	add	r3, r1
 800e82c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e830:	681a      	ldr	r2, [r3, #0]
 800e832:	78fb      	ldrb	r3, [r7, #3]
 800e834:	4619      	mov	r1, r3
 800e836:	f7fb fb99 	bl	8009f6c <USBD_LL_DataOutStage>
}
 800e83a:	bf00      	nop
 800e83c:	3708      	adds	r7, #8
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}

0800e842 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e842:	b580      	push	{r7, lr}
 800e844:	b082      	sub	sp, #8
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
 800e84a:	460b      	mov	r3, r1
 800e84c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e854:	78fa      	ldrb	r2, [r7, #3]
 800e856:	6879      	ldr	r1, [r7, #4]
 800e858:	4613      	mov	r3, r2
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	4413      	add	r3, r2
 800e85e:	00db      	lsls	r3, r3, #3
 800e860:	440b      	add	r3, r1
 800e862:	333c      	adds	r3, #60	; 0x3c
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	78fb      	ldrb	r3, [r7, #3]
 800e868:	4619      	mov	r1, r3
 800e86a:	f7fb fbf0 	bl	800a04e <USBD_LL_DataInStage>
}
 800e86e:	bf00      	nop
 800e870:	3708      	adds	r7, #8
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b082      	sub	sp, #8
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e884:	4618      	mov	r0, r3
 800e886:	f7fb fd00 	bl	800a28a <USBD_LL_SOF>
}
 800e88a:	bf00      	nop
 800e88c:	3708      	adds	r7, #8
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}

0800e892 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e892:	b580      	push	{r7, lr}
 800e894:	b084      	sub	sp, #16
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e89a:	2301      	movs	r3, #1
 800e89c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	689b      	ldr	r3, [r3, #8]
 800e8a2:	2b02      	cmp	r3, #2
 800e8a4:	d001      	beq.n	800e8aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e8a6:	f7f2 fc01 	bl	80010ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e8b0:	7bfa      	ldrb	r2, [r7, #15]
 800e8b2:	4611      	mov	r1, r2
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7fb fcb0 	bl	800a21a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fb fc69 	bl	800a198 <USBD_LL_Reset>
}
 800e8c6:	bf00      	nop
 800e8c8:	3710      	adds	r7, #16
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
	...

0800e8d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7fb fcaa 	bl	800a238 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	699b      	ldr	r3, [r3, #24]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d005      	beq.n	800e8f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e8ec:	4b04      	ldr	r3, [pc, #16]	; (800e900 <HAL_PCD_SuspendCallback+0x30>)
 800e8ee:	691b      	ldr	r3, [r3, #16]
 800e8f0:	4a03      	ldr	r2, [pc, #12]	; (800e900 <HAL_PCD_SuspendCallback+0x30>)
 800e8f2:	f043 0306 	orr.w	r3, r3, #6
 800e8f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e8f8:	bf00      	nop
 800e8fa:	3708      	adds	r7, #8
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}
 800e900:	e000ed00 	.word	0xe000ed00

0800e904 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b082      	sub	sp, #8
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e912:	4618      	mov	r0, r3
 800e914:	f7fb fca4 	bl	800a260 <USBD_LL_Resume>
}
 800e918:	bf00      	nop
 800e91a:	3708      	adds	r7, #8
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e928:	4a28      	ldr	r2, [pc, #160]	; (800e9cc <USBD_LL_Init+0xac>)
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	4a26      	ldr	r2, [pc, #152]	; (800e9cc <USBD_LL_Init+0xac>)
 800e934:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800e938:	4b24      	ldr	r3, [pc, #144]	; (800e9cc <USBD_LL_Init+0xac>)
 800e93a:	4a25      	ldr	r2, [pc, #148]	; (800e9d0 <USBD_LL_Init+0xb0>)
 800e93c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e93e:	4b23      	ldr	r3, [pc, #140]	; (800e9cc <USBD_LL_Init+0xac>)
 800e940:	2208      	movs	r2, #8
 800e942:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e944:	4b21      	ldr	r3, [pc, #132]	; (800e9cc <USBD_LL_Init+0xac>)
 800e946:	2202      	movs	r2, #2
 800e948:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e94a:	4b20      	ldr	r3, [pc, #128]	; (800e9cc <USBD_LL_Init+0xac>)
 800e94c:	2200      	movs	r2, #0
 800e94e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e950:	4b1e      	ldr	r3, [pc, #120]	; (800e9cc <USBD_LL_Init+0xac>)
 800e952:	2200      	movs	r2, #0
 800e954:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e956:	4b1d      	ldr	r3, [pc, #116]	; (800e9cc <USBD_LL_Init+0xac>)
 800e958:	2200      	movs	r2, #0
 800e95a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e95c:	481b      	ldr	r0, [pc, #108]	; (800e9cc <USBD_LL_Init+0xac>)
 800e95e:	f7f5 f9f7 	bl	8003d50 <HAL_PCD_Init>
 800e962:	4603      	mov	r3, r0
 800e964:	2b00      	cmp	r3, #0
 800e966:	d001      	beq.n	800e96c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800e968:	f7f2 fba0 	bl	80010ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e972:	2318      	movs	r3, #24
 800e974:	2200      	movs	r2, #0
 800e976:	2100      	movs	r1, #0
 800e978:	f7f6 fe6d 	bl	8005656 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e982:	2358      	movs	r3, #88	; 0x58
 800e984:	2200      	movs	r2, #0
 800e986:	2180      	movs	r1, #128	; 0x80
 800e988:	f7f6 fe65 	bl	8005656 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e992:	23c0      	movs	r3, #192	; 0xc0
 800e994:	2200      	movs	r2, #0
 800e996:	2181      	movs	r1, #129	; 0x81
 800e998:	f7f6 fe5d 	bl	8005656 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e9a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	2101      	movs	r1, #1
 800e9aa:	f7f6 fe54 	bl	8005656 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e9b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	2182      	movs	r1, #130	; 0x82
 800e9bc:	f7f6 fe4b 	bl	8005656 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e9c0:	2300      	movs	r3, #0
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	20003354 	.word	0x20003354
 800e9d0:	40005c00 	.word	0x40005c00

0800e9d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f7f5 fabb 	bl	8003f66 <HAL_PCD_Start>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9f4:	7bfb      	ldrb	r3, [r7, #15]
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f000 f94e 	bl	800ec98 <USBD_Get_USB_Status>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3710      	adds	r7, #16
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b084      	sub	sp, #16
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
 800ea12:	4608      	mov	r0, r1
 800ea14:	4611      	mov	r1, r2
 800ea16:	461a      	mov	r2, r3
 800ea18:	4603      	mov	r3, r0
 800ea1a:	70fb      	strb	r3, [r7, #3]
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	70bb      	strb	r3, [r7, #2]
 800ea20:	4613      	mov	r3, r2
 800ea22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea24:	2300      	movs	r3, #0
 800ea26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ea32:	78bb      	ldrb	r3, [r7, #2]
 800ea34:	883a      	ldrh	r2, [r7, #0]
 800ea36:	78f9      	ldrb	r1, [r7, #3]
 800ea38:	f7f5 fc35 	bl	80042a6 <HAL_PCD_EP_Open>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea40:	7bfb      	ldrb	r3, [r7, #15]
 800ea42:	4618      	mov	r0, r3
 800ea44:	f000 f928 	bl	800ec98 <USBD_Get_USB_Status>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3710      	adds	r7, #16
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b084      	sub	sp, #16
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	6078      	str	r0, [r7, #4]
 800ea5e:	460b      	mov	r3, r1
 800ea60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea62:	2300      	movs	r3, #0
 800ea64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea66:	2300      	movs	r3, #0
 800ea68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea70:	78fa      	ldrb	r2, [r7, #3]
 800ea72:	4611      	mov	r1, r2
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7f5 fc7c 	bl	8004372 <HAL_PCD_EP_Close>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea7e:	7bfb      	ldrb	r3, [r7, #15]
 800ea80:	4618      	mov	r0, r3
 800ea82:	f000 f909 	bl	800ec98 <USBD_Get_USB_Status>
 800ea86:	4603      	mov	r3, r0
 800ea88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3710      	adds	r7, #16
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eaae:	78fa      	ldrb	r2, [r7, #3]
 800eab0:	4611      	mov	r1, r2
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7f5 fd3c 	bl	8004530 <HAL_PCD_EP_SetStall>
 800eab8:	4603      	mov	r3, r0
 800eaba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eabc:	7bfb      	ldrb	r3, [r7, #15]
 800eabe:	4618      	mov	r0, r3
 800eac0:	f000 f8ea 	bl	800ec98 <USBD_Get_USB_Status>
 800eac4:	4603      	mov	r3, r0
 800eac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eac8:	7bbb      	ldrb	r3, [r7, #14]
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3710      	adds	r7, #16
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b084      	sub	sp, #16
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
 800eada:	460b      	mov	r3, r1
 800eadc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eade:	2300      	movs	r3, #0
 800eae0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eae2:	2300      	movs	r3, #0
 800eae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eaec:	78fa      	ldrb	r2, [r7, #3]
 800eaee:	4611      	mov	r1, r2
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7f5 fd7d 	bl	80045f0 <HAL_PCD_EP_ClrStall>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eafa:	7bfb      	ldrb	r3, [r7, #15]
 800eafc:	4618      	mov	r0, r3
 800eafe:	f000 f8cb 	bl	800ec98 <USBD_Get_USB_Status>
 800eb02:	4603      	mov	r3, r0
 800eb04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb06:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3710      	adds	r7, #16
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb10:	b480      	push	{r7}
 800eb12:	b085      	sub	sp, #20
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	460b      	mov	r3, r1
 800eb1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eb24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	da0c      	bge.n	800eb46 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eb2c:	78fb      	ldrb	r3, [r7, #3]
 800eb2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb32:	68f9      	ldr	r1, [r7, #12]
 800eb34:	1c5a      	adds	r2, r3, #1
 800eb36:	4613      	mov	r3, r2
 800eb38:	009b      	lsls	r3, r3, #2
 800eb3a:	4413      	add	r3, r2
 800eb3c:	00db      	lsls	r3, r3, #3
 800eb3e:	440b      	add	r3, r1
 800eb40:	3302      	adds	r3, #2
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	e00b      	b.n	800eb5e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eb46:	78fb      	ldrb	r3, [r7, #3]
 800eb48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb4c:	68f9      	ldr	r1, [r7, #12]
 800eb4e:	4613      	mov	r3, r2
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	4413      	add	r3, r2
 800eb54:	00db      	lsls	r3, r3, #3
 800eb56:	440b      	add	r3, r1
 800eb58:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800eb5c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3714      	adds	r7, #20
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bc80      	pop	{r7}
 800eb66:	4770      	bx	lr

0800eb68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	460b      	mov	r3, r1
 800eb72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb74:	2300      	movs	r3, #0
 800eb76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb82:	78fa      	ldrb	r2, [r7, #3]
 800eb84:	4611      	mov	r1, r2
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7f5 fb68 	bl	800425c <HAL_PCD_SetAddress>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb90:	7bfb      	ldrb	r3, [r7, #15]
 800eb92:	4618      	mov	r0, r3
 800eb94:	f000 f880 	bl	800ec98 <USBD_Get_USB_Status>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3710      	adds	r7, #16
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800eba6:	b580      	push	{r7, lr}
 800eba8:	b086      	sub	sp, #24
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	60f8      	str	r0, [r7, #12]
 800ebae:	607a      	str	r2, [r7, #4]
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	460b      	mov	r3, r1
 800ebb4:	72fb      	strb	r3, [r7, #11]
 800ebb6:	4613      	mov	r3, r2
 800ebb8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ebc8:	893b      	ldrh	r3, [r7, #8]
 800ebca:	7af9      	ldrb	r1, [r7, #11]
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	f7f5 fc6c 	bl	80044aa <HAL_PCD_EP_Transmit>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebd6:	7dfb      	ldrb	r3, [r7, #23]
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f000 f85d 	bl	800ec98 <USBD_Get_USB_Status>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ebe2:	7dbb      	ldrb	r3, [r7, #22]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3718      	adds	r7, #24
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b086      	sub	sp, #24
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	607a      	str	r2, [r7, #4]
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	72fb      	strb	r3, [r7, #11]
 800ebfc:	4613      	mov	r3, r2
 800ebfe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec00:	2300      	movs	r3, #0
 800ec02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec04:	2300      	movs	r3, #0
 800ec06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ec0e:	893b      	ldrh	r3, [r7, #8]
 800ec10:	7af9      	ldrb	r1, [r7, #11]
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	f7f5 fbf5 	bl	8004402 <HAL_PCD_EP_Receive>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec1c:	7dfb      	ldrb	r3, [r7, #23]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f000 f83a 	bl	800ec98 <USBD_Get_USB_Status>
 800ec24:	4603      	mov	r3, r0
 800ec26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ec28:	7dbb      	ldrb	r3, [r7, #22]
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3718      	adds	r7, #24
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec32:	b580      	push	{r7, lr}
 800ec34:	b082      	sub	sp, #8
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	6078      	str	r0, [r7, #4]
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec44:	78fa      	ldrb	r2, [r7, #3]
 800ec46:	4611      	mov	r1, r2
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7f5 fc17 	bl	800447c <HAL_PCD_EP_GetRxCount>
 800ec4e:	4603      	mov	r3, r0
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3708      	adds	r7, #8
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}

0800ec58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ec60:	4b02      	ldr	r3, [pc, #8]	; (800ec6c <USBD_static_malloc+0x14>)
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	370c      	adds	r7, #12
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bc80      	pop	{r7}
 800ec6a:	4770      	bx	lr
 800ec6c:	20002258 	.word	0x20002258

0800ec70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b083      	sub	sp, #12
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]

}
 800ec78:	bf00      	nop
 800ec7a:	370c      	adds	r7, #12
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bc80      	pop	{r7}
 800ec80:	4770      	bx	lr

0800ec82 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec82:	b480      	push	{r7}
 800ec84:	b083      	sub	sp, #12
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	6078      	str	r0, [r7, #4]
 800ec8a:	460b      	mov	r3, r1
 800ec8c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ec8e:	bf00      	nop
 800ec90:	370c      	adds	r7, #12
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bc80      	pop	{r7}
 800ec96:	4770      	bx	lr

0800ec98 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b085      	sub	sp, #20
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	4603      	mov	r3, r0
 800eca0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eca2:	2300      	movs	r3, #0
 800eca4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eca6:	79fb      	ldrb	r3, [r7, #7]
 800eca8:	2b03      	cmp	r3, #3
 800ecaa:	d817      	bhi.n	800ecdc <USBD_Get_USB_Status+0x44>
 800ecac:	a201      	add	r2, pc, #4	; (adr r2, 800ecb4 <USBD_Get_USB_Status+0x1c>)
 800ecae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb2:	bf00      	nop
 800ecb4:	0800ecc5 	.word	0x0800ecc5
 800ecb8:	0800eccb 	.word	0x0800eccb
 800ecbc:	0800ecd1 	.word	0x0800ecd1
 800ecc0:	0800ecd7 	.word	0x0800ecd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	73fb      	strb	r3, [r7, #15]
    break;
 800ecc8:	e00b      	b.n	800ece2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ecca:	2302      	movs	r3, #2
 800eccc:	73fb      	strb	r3, [r7, #15]
    break;
 800ecce:	e008      	b.n	800ece2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	73fb      	strb	r3, [r7, #15]
    break;
 800ecd4:	e005      	b.n	800ece2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ecd6:	2302      	movs	r3, #2
 800ecd8:	73fb      	strb	r3, [r7, #15]
    break;
 800ecda:	e002      	b.n	800ece2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ecdc:	2302      	movs	r3, #2
 800ecde:	73fb      	strb	r3, [r7, #15]
    break;
 800ece0:	bf00      	nop
  }
  return usb_status;
 800ece2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3714      	adds	r7, #20
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bc80      	pop	{r7}
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop

0800ecf0 <__libc_init_array>:
 800ecf0:	b570      	push	{r4, r5, r6, lr}
 800ecf2:	2600      	movs	r6, #0
 800ecf4:	4d0c      	ldr	r5, [pc, #48]	; (800ed28 <__libc_init_array+0x38>)
 800ecf6:	4c0d      	ldr	r4, [pc, #52]	; (800ed2c <__libc_init_array+0x3c>)
 800ecf8:	1b64      	subs	r4, r4, r5
 800ecfa:	10a4      	asrs	r4, r4, #2
 800ecfc:	42a6      	cmp	r6, r4
 800ecfe:	d109      	bne.n	800ed14 <__libc_init_array+0x24>
 800ed00:	f000 f84a 	bl	800ed98 <_init>
 800ed04:	2600      	movs	r6, #0
 800ed06:	4d0a      	ldr	r5, [pc, #40]	; (800ed30 <__libc_init_array+0x40>)
 800ed08:	4c0a      	ldr	r4, [pc, #40]	; (800ed34 <__libc_init_array+0x44>)
 800ed0a:	1b64      	subs	r4, r4, r5
 800ed0c:	10a4      	asrs	r4, r4, #2
 800ed0e:	42a6      	cmp	r6, r4
 800ed10:	d105      	bne.n	800ed1e <__libc_init_array+0x2e>
 800ed12:	bd70      	pop	{r4, r5, r6, pc}
 800ed14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed18:	4798      	blx	r3
 800ed1a:	3601      	adds	r6, #1
 800ed1c:	e7ee      	b.n	800ecfc <__libc_init_array+0xc>
 800ed1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed22:	4798      	blx	r3
 800ed24:	3601      	adds	r6, #1
 800ed26:	e7f2      	b.n	800ed0e <__libc_init_array+0x1e>
 800ed28:	0800f520 	.word	0x0800f520
 800ed2c:	0800f520 	.word	0x0800f520
 800ed30:	0800f520 	.word	0x0800f520
 800ed34:	0800f524 	.word	0x0800f524

0800ed38 <memcpy>:
 800ed38:	440a      	add	r2, r1
 800ed3a:	4291      	cmp	r1, r2
 800ed3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed40:	d100      	bne.n	800ed44 <memcpy+0xc>
 800ed42:	4770      	bx	lr
 800ed44:	b510      	push	{r4, lr}
 800ed46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed4a:	4291      	cmp	r1, r2
 800ed4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed50:	d1f9      	bne.n	800ed46 <memcpy+0xe>
 800ed52:	bd10      	pop	{r4, pc}

0800ed54 <memmove>:
 800ed54:	4288      	cmp	r0, r1
 800ed56:	b510      	push	{r4, lr}
 800ed58:	eb01 0402 	add.w	r4, r1, r2
 800ed5c:	d902      	bls.n	800ed64 <memmove+0x10>
 800ed5e:	4284      	cmp	r4, r0
 800ed60:	4623      	mov	r3, r4
 800ed62:	d807      	bhi.n	800ed74 <memmove+0x20>
 800ed64:	1e43      	subs	r3, r0, #1
 800ed66:	42a1      	cmp	r1, r4
 800ed68:	d008      	beq.n	800ed7c <memmove+0x28>
 800ed6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed72:	e7f8      	b.n	800ed66 <memmove+0x12>
 800ed74:	4601      	mov	r1, r0
 800ed76:	4402      	add	r2, r0
 800ed78:	428a      	cmp	r2, r1
 800ed7a:	d100      	bne.n	800ed7e <memmove+0x2a>
 800ed7c:	bd10      	pop	{r4, pc}
 800ed7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed86:	e7f7      	b.n	800ed78 <memmove+0x24>

0800ed88 <memset>:
 800ed88:	4603      	mov	r3, r0
 800ed8a:	4402      	add	r2, r0
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d100      	bne.n	800ed92 <memset+0xa>
 800ed90:	4770      	bx	lr
 800ed92:	f803 1b01 	strb.w	r1, [r3], #1
 800ed96:	e7f9      	b.n	800ed8c <memset+0x4>

0800ed98 <_init>:
 800ed98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed9a:	bf00      	nop
 800ed9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed9e:	bc08      	pop	{r3}
 800eda0:	469e      	mov	lr, r3
 800eda2:	4770      	bx	lr

0800eda4 <_fini>:
 800eda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eda6:	bf00      	nop
 800eda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edaa:	bc08      	pop	{r3}
 800edac:	469e      	mov	lr, r3
 800edae:	4770      	bx	lr
