
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd00  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  0800de10  0800de10  0001de10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e630  0800e630  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800e630  0800e630  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e630  0800e630  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e630  0800e630  0001e630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e634  0800e634  0001e634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800e638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003490  20000190  0800e7c8  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003620  0800e7c8  00023620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c112  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005dca  00000000  00000000  0004c2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df0  00000000  00000000  00052098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bd8  00000000  00000000  00053e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e711  00000000  00000000  00055a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023fe5  00000000  00000000  00074171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c515  00000000  00000000  00098156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013466b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c14  00000000  00000000  001346c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000190 	.word	0x20000190
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ddf8 	.word	0x0800ddf8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000194 	.word	0x20000194
 800014c:	0800ddf8 	.word	0x0800ddf8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (32, sizeof(uint8_t), &qUSB_rcv_attributes);
 8000178:	4a1e      	ldr	r2, [pc, #120]	; (80001f4 <MX_FREERTOS_Init+0x80>)
 800017a:	2101      	movs	r1, #1
 800017c:	2020      	movs	r0, #32
 800017e:	f00a fb1b 	bl	800a7b8 <osMessageQueueNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a1c      	ldr	r2, [pc, #112]	; (80001f8 <MX_FREERTOS_Init+0x84>)
 8000186:	6013      	str	r3, [r2, #0]

  /* creation of qVFD */
  qVFDHandle = osMessageQueueNew (16, sizeof(uint16_t), &qVFD_attributes);
 8000188:	4a1c      	ldr	r2, [pc, #112]	; (80001fc <MX_FREERTOS_Init+0x88>)
 800018a:	2102      	movs	r1, #2
 800018c:	2010      	movs	r0, #16
 800018e:	f00a fb13 	bl	800a7b8 <osMessageQueueNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a1a      	ldr	r2, [pc, #104]	; (8000200 <MX_FREERTOS_Init+0x8c>)
 8000196:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000198:	4a1a      	ldr	r2, [pc, #104]	; (8000204 <MX_FREERTOS_Init+0x90>)
 800019a:	2100      	movs	r1, #0
 800019c:	481a      	ldr	r0, [pc, #104]	; (8000208 <MX_FREERTOS_Init+0x94>)
 800019e:	f00a fa33 	bl	800a608 <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a19      	ldr	r2, [pc, #100]	; (800020c <MX_FREERTOS_Init+0x98>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 80001a8:	4a19      	ldr	r2, [pc, #100]	; (8000210 <MX_FREERTOS_Init+0x9c>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	4819      	ldr	r0, [pc, #100]	; (8000214 <MX_FREERTOS_Init+0xa0>)
 80001ae:	f00a fa2b 	bl	800a608 <osThreadNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a18      	ldr	r2, [pc, #96]	; (8000218 <MX_FREERTOS_Init+0xa4>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 80001b8:	4a18      	ldr	r2, [pc, #96]	; (800021c <MX_FREERTOS_Init+0xa8>)
 80001ba:	2100      	movs	r1, #0
 80001bc:	4818      	ldr	r0, [pc, #96]	; (8000220 <MX_FREERTOS_Init+0xac>)
 80001be:	f00a fa23 	bl	800a608 <osThreadNew>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <MX_FREERTOS_Init+0xb0>)
 80001c6:	6013      	str	r3, [r2, #0]

  /* creation of UARTtask */
  UARTtaskHandle = osThreadNew(StartUARTtask, NULL, &UARTtask_attributes);
 80001c8:	4a17      	ldr	r2, [pc, #92]	; (8000228 <MX_FREERTOS_Init+0xb4>)
 80001ca:	2100      	movs	r1, #0
 80001cc:	4817      	ldr	r0, [pc, #92]	; (800022c <MX_FREERTOS_Init+0xb8>)
 80001ce:	f00a fa1b 	bl	800a608 <osThreadNew>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4a16      	ldr	r2, [pc, #88]	; (8000230 <MX_FREERTOS_Init+0xbc>)
 80001d6:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(StartEncoder, NULL, &Encoder_attributes);
 80001d8:	4a16      	ldr	r2, [pc, #88]	; (8000234 <MX_FREERTOS_Init+0xc0>)
 80001da:	2100      	movs	r1, #0
 80001dc:	4816      	ldr	r0, [pc, #88]	; (8000238 <MX_FREERTOS_Init+0xc4>)
 80001de:	f00a fa13 	bl	800a608 <osThreadNew>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4a15      	ldr	r2, [pc, #84]	; (800023c <MX_FREERTOS_Init+0xc8>)
 80001e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 80001e8:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <MX_FREERTOS_Init+0x84>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a14      	ldr	r2, [pc, #80]	; (8000240 <MX_FREERTOS_Init+0xcc>)
 80001ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	0800e168 	.word	0x0800e168
 80001f8:	20002488 	.word	0x20002488
 80001fc:	0800e180 	.word	0x0800e180
 8000200:	2000248c 	.word	0x2000248c
 8000204:	0800e0b4 	.word	0x0800e0b4
 8000208:	08000245 	.word	0x08000245
 800020c:	20002478 	.word	0x20002478
 8000210:	0800e0d8 	.word	0x0800e0d8
 8000214:	0800027d 	.word	0x0800027d
 8000218:	2000247c 	.word	0x2000247c
 800021c:	0800e0fc 	.word	0x0800e0fc
 8000220:	08000331 	.word	0x08000331
 8000224:	20002484 	.word	0x20002484
 8000228:	0800e120 	.word	0x0800e120
 800022c:	08000379 	.word	0x08000379
 8000230:	20002480 	.word	0x20002480
 8000234:	0800e144 	.word	0x0800e144
 8000238:	080003b5 	.word	0x080003b5
 800023c:	20002494 	.word	0x20002494
 8000240:	20002490 	.word	0x20002490

08000244 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800024c:	f00d f8a6 	bl	800d39c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000256:	4808      	ldr	r0, [pc, #32]	; (8000278 <StartDefaultTask+0x34>)
 8000258:	f003 f84d 	bl	80032f6 <HAL_GPIO_WritePin>
  osDelay(10);
 800025c:	200a      	movs	r0, #10
 800025e:	f00a fa7d 	bl	800a75c <osDelay>
  init_microrl();
 8000262:	f002 f97b 	bl	800255c <init_microrl>
  set_CDC_ready(); // allow to send
 8000266:	f002 f9b3 	bl	80025d0 <set_CDC_ready>

  //vTaskDelete(NULL);
  /* Infinite loop */
  for(;;)
  {
    process_encoder();
 800026a:	f000 fbfd 	bl	8000a68 <process_encoder>
    osDelay(1);
 800026e:	2001      	movs	r0, #1
 8000270:	f00a fa74 	bl	800a75c <osDelay>
    process_encoder();
 8000274:	e7f9      	b.n	800026a <StartDefaultTask+0x26>
 8000276:	bf00      	nop
 8000278:	40010800 	.word	0x40010800

0800027c <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 8000284:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000288:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 800028a:	f00b fc7b 	bl	800bb84 <xTaskGetTickCount>
 800028e:	4603      	mov	r3, r0
 8000290:	60bb      	str	r3, [r7, #8]

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000296:	4821      	ldr	r0, [pc, #132]	; (800031c <StartLEDheartbeat+0xa0>)
 8000298:	f003 f845 	bl	8003326 <HAL_GPIO_TogglePin>

		if (xTaskGetTickCount() > 10000)
 800029c:	f00b fc72 	bl	800bb84 <xTaskGetTickCount>
 80002a0:	4603      	mov	r3, r0
 80002a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d930      	bls.n	800030c <StartLEDheartbeat+0x90>
		{
				static uint8_t cnt = 0;
				if (cnt < DIGITS)
 80002aa:	4b1d      	ldr	r3, [pc, #116]	; (8000320 <StartLEDheartbeat+0xa4>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	220a      	movs	r2, #10
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d20b      	bcs.n	80002cc <StartLEDheartbeat+0x50>
					xQueueSendToBack(qVFDHandle, &vfd_digits[cnt], 10);
 80002b4:	4b1b      	ldr	r3, [pc, #108]	; (8000324 <StartLEDheartbeat+0xa8>)
 80002b6:	6818      	ldr	r0, [r3, #0]
 80002b8:	4b19      	ldr	r3, [pc, #100]	; (8000320 <StartLEDheartbeat+0xa4>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	4a1a      	ldr	r2, [pc, #104]	; (8000328 <StartLEDheartbeat+0xac>)
 80002c0:	1899      	adds	r1, r3, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	220a      	movs	r2, #10
 80002c6:	f00a fd1f 	bl	800ad08 <xQueueGenericSend>
 80002ca:	e00d      	b.n	80002e8 <StartLEDheartbeat+0x6c>
				else
					xQueueSendToBack(qVFDHandle, &vfd_alpha[cnt-DIGITS], 10);
 80002cc:	4b15      	ldr	r3, [pc, #84]	; (8000324 <StartLEDheartbeat+0xa8>)
 80002ce:	6818      	ldr	r0, [r3, #0]
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <StartLEDheartbeat+0xa4>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	461a      	mov	r2, r3
 80002d6:	230a      	movs	r3, #10
 80002d8:	1ad3      	subs	r3, r2, r3
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	4a13      	ldr	r2, [pc, #76]	; (800032c <StartLEDheartbeat+0xb0>)
 80002de:	1899      	adds	r1, r3, r2
 80002e0:	2300      	movs	r3, #0
 80002e2:	220a      	movs	r2, #10
 80002e4:	f00a fd10 	bl	800ad08 <xQueueGenericSend>
				if (++cnt >= ALPHAS + DIGITS)
 80002e8:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <StartLEDheartbeat+0xa4>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <StartLEDheartbeat+0xa4>)
 80002f2:	701a      	strb	r2, [r3, #0]
 80002f4:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <StartLEDheartbeat+0xa4>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	461a      	mov	r2, r3
 80002fa:	231a      	movs	r3, #26
 80002fc:	4619      	mov	r1, r3
 80002fe:	230a      	movs	r3, #10
 8000300:	440b      	add	r3, r1
 8000302:	429a      	cmp	r2, r3
 8000304:	db02      	blt.n	800030c <StartLEDheartbeat+0x90>
					cnt = 0;
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <StartLEDheartbeat+0xa4>)
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
		}

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800030c:	f107 0308 	add.w	r3, r7, #8
 8000310:	68f9      	ldr	r1, [r7, #12]
 8000312:	4618      	mov	r0, r3
 8000314:	f00b fa72 	bl	800b7fc <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000318:	e7b7      	b.n	800028a <StartLEDheartbeat+0xe>
 800031a:	bf00      	nop
 800031c:	40011000 	.word	0x40011000
 8000320:	200001ae 	.word	0x200001ae
 8000324:	2000248c 	.word	0x2000248c
 8000328:	0800e06c 	.word	0x0800e06c
 800032c:	0800e080 	.word	0x0800e080

08000330 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 8000338:	2000      	movs	r0, #0
 800033a:	f00b ff25 	bl	800c188 <uxTaskGetStackHighWaterMark>
 800033e:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000344:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <StartUSB_rcv+0x44>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f107 010f 	add.w	r1, r7, #15
 800034c:	f04f 32ff 	mov.w	r2, #4294967295
 8000350:	4618      	mov	r0, r3
 8000352:	f00a fe6f 	bl	800b034 <xQueueReceive>
	  microrl_print_char(buf);
 8000356:	7bfb      	ldrb	r3, [r7, #15]
 8000358:	4618      	mov	r0, r3
 800035a:	f001 fdbb 	bl	8001ed4 <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 800035e:	2000      	movs	r0, #0
 8000360:	f00b ff12 	bl	800c188 <uxTaskGetStackHighWaterMark>
 8000364:	6138      	str	r0, [r7, #16]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 8000366:	693a      	ldr	r2, [r7, #16]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	429a      	cmp	r2, r3
 800036c:	d2ea      	bcs.n	8000344 <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	617b      	str	r3, [r7, #20]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000372:	e7e7      	b.n	8000344 <StartUSB_rcv+0x14>
 8000374:	20002490 	.word	0x20002490

08000378 <StartUARTtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTtask */
void StartUARTtask(void *argument)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  uint8_t data;
  for(;;)
  {
	HAL_UART_Receive_IT(&huart2, &data, 1);
 8000380:	f107 030f 	add.w	r3, r7, #15
 8000384:	2201      	movs	r2, #1
 8000386:	4619      	mov	r1, r3
 8000388:	4809      	ldr	r0, [pc, #36]	; (80003b0 <StartUARTtask+0x38>)
 800038a:	f005 fecc 	bl	8006126 <HAL_UART_Receive_IT>
	/* Wait to be notified of an interrupt. */
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 800038e:	f04f 31ff 	mov.w	r1, #4294967295
 8000392:	2001      	movs	r0, #1
 8000394:	f00b fff4 	bl	800c380 <ulTaskNotifyTake>
	if (get_nema())
 8000398:	f002 fa54 	bl	8002844 <get_nema>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0ee      	beq.n	8000380 <StartUARTtask+0x8>
		CDC_Transmit_FS(&data, 1);
 80003a2:	f107 030f 	add.w	r3, r7, #15
 80003a6:	2101      	movs	r1, #1
 80003a8:	4618      	mov	r0, r3
 80003aa:	f00d f8db 	bl	800d564 <CDC_Transmit_FS>
	HAL_UART_Receive_IT(&huart2, &data, 1);
 80003ae:	e7e7      	b.n	8000380 <StartUARTtask+0x8>
 80003b0:	20002618 	.word	0x20002618

080003b4 <StartEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoder */
void StartEncoder(void *argument)
{
 80003b4:	b5b0      	push	{r4, r5, r7, lr}
 80003b6:	b0a6      	sub	sp, #152	; 0x98
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]

	static bool invert = true;
	static bool released = true;


  osDelay(500);
 80003bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003c0:	f00a f9cc 	bl	800a75c <osDelay>
  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2120      	movs	r1, #32
 80003c8:	48be      	ldr	r0, [pc, #760]	; (80006c4 <StartEncoder+0x310>)
 80003ca:	f002 ff94 	bl	80032f6 <HAL_GPIO_WritePin>
  union VFD {
	  uint8_t arr2[11][3];
	  uint8_t arr1[11*3];
  } vfd;

  for (int i = 0; i < sizeof(vfd.arr1); i++)
 80003ce:	2300      	movs	r3, #0
 80003d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80003d4:	e00b      	b.n	80003ee <StartEncoder+0x3a>
  {
	  vfd.arr1[i] = 0xFF;
 80003d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80003da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80003de:	4413      	add	r3, r2
 80003e0:	22ff      	movs	r2, #255	; 0xff
 80003e2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(vfd.arr1); i++)
 80003e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80003e8:	3301      	adds	r3, #1
 80003ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80003ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80003f2:	2b20      	cmp	r3, #32
 80003f4:	d9ef      	bls.n	80003d6 <StartEncoder+0x22>
  }
  uint8_t data;


  data = 0b01000000; // command 2, write to Display port
 80003f6:	2340      	movs	r3, #64	; 0x40
 80003f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80003fc:	2200      	movs	r2, #0
 80003fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000402:	48b0      	ldr	r0, [pc, #704]	; (80006c4 <StartEncoder+0x310>)
 8000404:	f002 ff77 	bl	80032f6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000408:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 800040c:	f04f 33ff 	mov.w	r3, #4294967295
 8000410:	2201      	movs	r2, #1
 8000412:	48ad      	ldr	r0, [pc, #692]	; (80006c8 <StartEncoder+0x314>)
 8000414:	f005 fa0e 	bl	8005834 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000418:	2201      	movs	r2, #1
 800041a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041e:	48a9      	ldr	r0, [pc, #676]	; (80006c4 <StartEncoder+0x310>)
 8000420:	f002 ff69 	bl	80032f6 <HAL_GPIO_WritePin>
  osDelay(10);
 8000424:	200a      	movs	r0, #10
 8000426:	f00a f999 	bl	800a75c <osDelay>
  data = 0b11000000; // command 3, set address to 0
 800042a:	23c0      	movs	r3, #192	; 0xc0
 800042c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000436:	48a3      	ldr	r0, [pc, #652]	; (80006c4 <StartEncoder+0x310>)
 8000438:	f002 ff5d 	bl	80032f6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800043c:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000440:	f04f 33ff 	mov.w	r3, #4294967295
 8000444:	2201      	movs	r2, #1
 8000446:	48a0      	ldr	r0, [pc, #640]	; (80006c8 <StartEncoder+0x314>)
 8000448:	f005 f9f4 	bl	8005834 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 800044c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000450:	f04f 33ff 	mov.w	r3, #4294967295
 8000454:	2221      	movs	r2, #33	; 0x21
 8000456:	489c      	ldr	r0, [pc, #624]	; (80006c8 <StartEncoder+0x314>)
 8000458:	f005 f9ec 	bl	8005834 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000462:	4898      	ldr	r0, [pc, #608]	; (80006c4 <StartEncoder+0x310>)
 8000464:	f002 ff47 	bl	80032f6 <HAL_GPIO_WritePin>
  osDelay(10);
 8000468:	200a      	movs	r0, #10
 800046a:	f00a f977 	bl	800a75c <osDelay>
  // init display, 11 digits 17 segments
  data = 0b00000111; // command 1, 11 digits 17 segments
 800046e:	2307      	movs	r3, #7
 8000470:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000474:	2200      	movs	r2, #0
 8000476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047a:	4892      	ldr	r0, [pc, #584]	; (80006c4 <StartEncoder+0x310>)
 800047c:	f002 ff3b 	bl	80032f6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000480:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000484:	f04f 33ff 	mov.w	r3, #4294967295
 8000488:	2201      	movs	r2, #1
 800048a:	488f      	ldr	r0, [pc, #572]	; (80006c8 <StartEncoder+0x314>)
 800048c:	f005 f9d2 	bl	8005834 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000490:	2201      	movs	r2, #1
 8000492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000496:	488b      	ldr	r0, [pc, #556]	; (80006c4 <StartEncoder+0x310>)
 8000498:	f002 ff2d 	bl	80032f6 <HAL_GPIO_WritePin>
  osDelay(10);
 800049c:	200a      	movs	r0, #10
 800049e:	f00a f95d 	bl	800a75c <osDelay>

  for (uint8_t i = 0; i <= 0b111; i++)
 80004a2:	2300      	movs	r3, #0
 80004a4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80004a8:	e02d      	b.n	8000506 <StartEncoder+0x152>
  {
	  data = 0b10000000; // command 4
 80004aa:	2380      	movs	r3, #128	; 0x80
 80004ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  data |= 1<<3; // enable/disable display
 80004b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80004b4:	f043 0308 	orr.w	r3, r3, #8
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  data |= i; // set brightness
 80004be:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80004c2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80004c6:	4313      	orrs	r3, r2
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d4:	487b      	ldr	r0, [pc, #492]	; (80006c4 <StartEncoder+0x310>)
 80004d6:	f002 ff0e 	bl	80032f6 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004da:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80004de:	f04f 33ff 	mov.w	r3, #4294967295
 80004e2:	2201      	movs	r2, #1
 80004e4:	4878      	ldr	r0, [pc, #480]	; (80006c8 <StartEncoder+0x314>)
 80004e6:	f005 f9a5 	bl	8005834 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80004ea:	2201      	movs	r2, #1
 80004ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f0:	4874      	ldr	r0, [pc, #464]	; (80006c4 <StartEncoder+0x310>)
 80004f2:	f002 ff00 	bl	80032f6 <HAL_GPIO_WritePin>
	  osDelay(250);
 80004f6:	20fa      	movs	r0, #250	; 0xfa
 80004f8:	f00a f930 	bl	800a75c <osDelay>
  for (uint8_t i = 0; i <= 0b111; i++)
 80004fc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000500:	3301      	adds	r3, #1
 8000502:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8000506:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800050a:	2b07      	cmp	r3, #7
 800050c:	d9cd      	bls.n	80004aa <StartEncoder+0xf6>
  }



  for (int i = 0; i < 11; i++)
 800050e:	2300      	movs	r3, #0
 8000510:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000514:	e041      	b.n	800059a <StartEncoder+0x1e6>
  {
	  for (int b = 0; b < 3; b++) // erasing from right to left
 8000516:	2300      	movs	r3, #0
 8000518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800051c:	e012      	b.n	8000544 <StartEncoder+0x190>
	  {
		  vfd.arr2[i][b] = 0;
 800051e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000522:	4613      	mov	r3, r2
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	4413      	add	r3, r2
 8000528:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800052c:	441a      	add	r2, r3
 800052e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000532:	4413      	add	r3, r2
 8000534:	3b58      	subs	r3, #88	; 0x58
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
	  for (int b = 0; b < 3; b++) // erasing from right to left
 800053a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800053e:	3301      	adds	r3, #1
 8000540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000544:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000548:	2b02      	cmp	r3, #2
 800054a:	dde8      	ble.n	800051e <StartEncoder+0x16a>
	  }
	  data = 0b11000000; // command 3, set address to 0
 800054c:	23c0      	movs	r3, #192	; 0xc0
 800054e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000558:	485a      	ldr	r0, [pc, #360]	; (80006c4 <StartEncoder+0x310>)
 800055a:	f002 fecc 	bl	80032f6 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800055e:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000562:	f04f 33ff 	mov.w	r3, #4294967295
 8000566:	2201      	movs	r2, #1
 8000568:	4857      	ldr	r0, [pc, #348]	; (80006c8 <StartEncoder+0x314>)
 800056a:	f005 f963 	bl	8005834 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 800056e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000572:	f04f 33ff 	mov.w	r3, #4294967295
 8000576:	2221      	movs	r2, #33	; 0x21
 8000578:	4853      	ldr	r0, [pc, #332]	; (80006c8 <StartEncoder+0x314>)
 800057a:	f005 f95b 	bl	8005834 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000584:	484f      	ldr	r0, [pc, #316]	; (80006c4 <StartEncoder+0x310>)
 8000586:	f002 feb6 	bl	80032f6 <HAL_GPIO_WritePin>
	  osDelay(150);
 800058a:	2096      	movs	r0, #150	; 0x96
 800058c:	f00a f8e6 	bl	800a75c <osDelay>
  for (int i = 0; i < 11; i++)
 8000590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000594:	3301      	adds	r3, #1
 8000596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800059a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800059e:	2b0a      	cmp	r3, #10
 80005a0:	ddb9      	ble.n	8000516 <StartEncoder+0x162>
  }
  osDelay (500);
 80005a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005a6:	f00a f8d9 	bl	800a75c <osDelay>

  //erase everything... just in case
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80005b0:	e00b      	b.n	80005ca <StartEncoder+0x216>
	  vfd.arr1[a] = 0;
 80005b2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80005b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80005ba:	4413      	add	r3, r2
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 80005c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80005c4:	3301      	adds	r3, #1
 80005c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80005ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80005ce:	2b20      	cmp	r3, #32
 80005d0:	d9ef      	bls.n	80005b2 <StartEncoder+0x1fe>


  // fill everything
    for (int j = 1; j < 15; j++)
 80005d2:	2301      	movs	r3, #1
 80005d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80005d8:	e05d      	b.n	8000696 <StartEncoder+0x2e2>
    {
  	  uint32_t temp = 1<<j;
 80005da:	2201      	movs	r2, #1
 80005dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
 80005e4:	667b      	str	r3, [r7, #100]	; 0x64
  	  for (int i = 1; i < 11; i++)
 80005e6:	2301      	movs	r3, #1
 80005e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80005ea:	e02a      	b.n	8000642 <StartEncoder+0x28e>
  	  {
  		  for (int b = 0; b < 3; b++)
 80005ec:	2300      	movs	r3, #0
 80005ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80005f0:	e021      	b.n	8000636 <StartEncoder+0x282>
  		  {
  			  vfd.arr2[i][b] |= (temp>>(b<<3))&0xFF;
 80005f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80005fe:	441a      	add	r2, r3
 8000600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000602:	4413      	add	r3, r2
 8000604:	3b58      	subs	r3, #88	; 0x58
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800060a:	00db      	lsls	r3, r3, #3
 800060c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800060e:	fa21 f303 	lsr.w	r3, r1, r3
 8000612:	b2db      	uxtb	r3, r3
 8000614:	4313      	orrs	r3, r2
 8000616:	b2d9      	uxtb	r1, r3
 8000618:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800061a:	4613      	mov	r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	4413      	add	r3, r2
 8000620:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000624:	441a      	add	r2, r3
 8000626:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000628:	4413      	add	r3, r2
 800062a:	3b58      	subs	r3, #88	; 0x58
 800062c:	460a      	mov	r2, r1
 800062e:	701a      	strb	r2, [r3, #0]
  		  for (int b = 0; b < 3; b++)
 8000630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000632:	3301      	adds	r3, #1
 8000634:	67bb      	str	r3, [r7, #120]	; 0x78
 8000636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000638:	2b02      	cmp	r3, #2
 800063a:	ddda      	ble.n	80005f2 <StartEncoder+0x23e>
  	  for (int i = 1; i < 11; i++)
 800063c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800063e:	3301      	adds	r3, #1
 8000640:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000642:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000644:	2b0a      	cmp	r3, #10
 8000646:	ddd1      	ble.n	80005ec <StartEncoder+0x238>
  		  }
  	  }
  	  data = 0b11000000; // command 3, set address to 0
 8000648:	23c0      	movs	r3, #192	; 0xc0
 800064a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000654:	481b      	ldr	r0, [pc, #108]	; (80006c4 <StartEncoder+0x310>)
 8000656:	f002 fe4e 	bl	80032f6 <HAL_GPIO_WritePin>
  	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800065a:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	2201      	movs	r2, #1
 8000664:	4818      	ldr	r0, [pc, #96]	; (80006c8 <StartEncoder+0x314>)
 8000666:	f005 f8e5 	bl	8005834 <HAL_SPI_Transmit>
  	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 800066a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	2221      	movs	r2, #33	; 0x21
 8000674:	4814      	ldr	r0, [pc, #80]	; (80006c8 <StartEncoder+0x314>)
 8000676:	f005 f8dd 	bl	8005834 <HAL_SPI_Transmit>
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000680:	4810      	ldr	r0, [pc, #64]	; (80006c4 <StartEncoder+0x310>)
 8000682:	f002 fe38 	bl	80032f6 <HAL_GPIO_WritePin>
  	  osDelay(100);
 8000686:	2064      	movs	r0, #100	; 0x64
 8000688:	f00a f868 	bl	800a75c <osDelay>
    for (int j = 1; j < 15; j++)
 800068c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000690:	3301      	adds	r3, #1
 8000692:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000696:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800069a:	2b0e      	cmp	r3, #14
 800069c:	dd9d      	ble.n	80005da <StartEncoder+0x226>
    }

    const uint8_t arr[][2] = {{6, 0},
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <StartEncoder+0x318>)
 80006a0:	f107 040c 	add.w	r4, r7, #12
 80006a4:	461d      	mov	r5, r3
 80006a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b2:	682b      	ldr	r3, [r5, #0]
 80006b4:	8023      	strh	r3, [r4, #0]
					   {9, 16},
					   {10, 16},
					   {10, 15},
    };

    for (int j = 0; j < sizeof(arr)/2; j++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	677b      	str	r3, [r7, #116]	; 0x74
 80006ba:	e06d      	b.n	8000798 <StartEncoder+0x3e4>
    {
		for (int b = 0; b < 3; b++)
 80006bc:	2300      	movs	r3, #0
 80006be:	673b      	str	r3, [r7, #112]	; 0x70
 80006c0:	e042      	b.n	8000748 <StartEncoder+0x394>
 80006c2:	bf00      	nop
 80006c4:	40010c00 	.word	0x40010c00
 80006c8:	20002578 	.word	0x20002578
 80006cc:	0800de60 	.word	0x0800de60
		  vfd.arr2[arr[j][0]][b] |= ((1<<arr[j][1])>>(b<<3))&0xFF;
 80006d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80006d8:	4413      	add	r3, r2
 80006da:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 80006de:	461a      	mov	r2, r3
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80006ea:	441a      	add	r2, r3
 80006ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006ee:	4413      	add	r3, r2
 80006f0:	3b58      	subs	r3, #88	; 0x58
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b25a      	sxtb	r2, r3
 80006f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80006fe:	440b      	add	r3, r1
 8000700:	f813 3c8b 	ldrb.w	r3, [r3, #-139]
 8000704:	4619      	mov	r1, r3
 8000706:	2301      	movs	r3, #1
 8000708:	fa03 f101 	lsl.w	r1, r3, r1
 800070c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800070e:	00db      	lsls	r3, r3, #3
 8000710:	fa41 f303 	asr.w	r3, r1, r3
 8000714:	b25b      	sxtb	r3, r3
 8000716:	4313      	orrs	r3, r2
 8000718:	b259      	sxtb	r1, r3
 800071a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000722:	4413      	add	r3, r2
 8000724:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8000728:	461a      	mov	r2, r3
 800072a:	b2c9      	uxtb	r1, r1
 800072c:	4613      	mov	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4413      	add	r3, r2
 8000732:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000736:	441a      	add	r2, r3
 8000738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800073a:	4413      	add	r3, r2
 800073c:	3b58      	subs	r3, #88	; 0x58
 800073e:	460a      	mov	r2, r1
 8000740:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++)
 8000742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000744:	3301      	adds	r3, #1
 8000746:	673b      	str	r3, [r7, #112]	; 0x70
 8000748:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800074a:	2b02      	cmp	r3, #2
 800074c:	ddc0      	ble.n	80006d0 <StartEncoder+0x31c>
		data = 0b11000000; // command 3, set address to 0
 800074e:	23c0      	movs	r3, #192	; 0xc0
 8000750:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075a:	48a9      	ldr	r0, [pc, #676]	; (8000a00 <StartEncoder+0x64c>)
 800075c:	f002 fdcb 	bl	80032f6 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000760:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	2201      	movs	r2, #1
 800076a:	48a6      	ldr	r0, [pc, #664]	; (8000a04 <StartEncoder+0x650>)
 800076c:	f005 f862 	bl	8005834 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000770:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000774:	f04f 33ff 	mov.w	r3, #4294967295
 8000778:	2221      	movs	r2, #33	; 0x21
 800077a:	48a2      	ldr	r0, [pc, #648]	; (8000a04 <StartEncoder+0x650>)
 800077c:	f005 f85a 	bl	8005834 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000786:	489e      	ldr	r0, [pc, #632]	; (8000a00 <StartEncoder+0x64c>)
 8000788:	f002 fdb5 	bl	80032f6 <HAL_GPIO_WritePin>
		osDelay(100);
 800078c:	2064      	movs	r0, #100	; 0x64
 800078e:	f009 ffe5 	bl	800a75c <osDelay>
    for (int j = 0; j < sizeof(arr)/2; j++)
 8000792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000794:	3301      	adds	r3, #1
 8000796:	677b      	str	r3, [r7, #116]	; 0x74
 8000798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800079a:	2b18      	cmp	r3, #24
 800079c:	d98e      	bls.n	80006bc <StartEncoder+0x308>
    }

    osDelay(500);
 800079e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a2:	f009 ffdb 	bl	800a75c <osDelay>

    //erase everything... just in case
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80007aa:	e008      	b.n	80007be <StartEncoder+0x40a>
  	  vfd.arr1[a] = 0;
 80007ac:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80007b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007b2:	4413      	add	r3, r2
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 80007b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007ba:	3301      	adds	r3, #1
 80007bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80007be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007c0:	2b20      	cmp	r3, #32
 80007c2:	d9f3      	bls.n	80007ac <StartEncoder+0x3f8>
//    {
//        vfd.arr2[i+1][0] = vfd_digits[i]&0xFF;
//        vfd.arr2[i+1][1] = (vfd_digits[i]>>8)&0xFF;
//    }

	data = 0b11000000; // command 3, set address to 0
 80007c4:	23c0      	movs	r3, #192	; 0xc0
 80007c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d0:	488b      	ldr	r0, [pc, #556]	; (8000a00 <StartEncoder+0x64c>)
 80007d2:	f002 fd90 	bl	80032f6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80007d6:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	2201      	movs	r2, #1
 80007e0:	4888      	ldr	r0, [pc, #544]	; (8000a04 <StartEncoder+0x650>)
 80007e2:	f005 f827 	bl	8005834 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80007e6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	2221      	movs	r2, #33	; 0x21
 80007f0:	4884      	ldr	r0, [pc, #528]	; (8000a04 <StartEncoder+0x650>)
 80007f2:	f005 f81f 	bl	8005834 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fc:	4880      	ldr	r0, [pc, #512]	; (8000a00 <StartEncoder+0x64c>)
 80007fe:	f002 fd7a 	bl	80032f6 <HAL_GPIO_WritePin>

  /* Infinite loop */
  for(;;)
  {
	  uint16_t buf;
	  if(qVFDHandle && xQueueReceive(qVFDHandle, &buf, 1))
 8000802:	4b81      	ldr	r3, [pc, #516]	; (8000a08 <StartEncoder+0x654>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d064      	beq.n	80008d4 <StartEncoder+0x520>
 800080a:	4b7f      	ldr	r3, [pc, #508]	; (8000a08 <StartEncoder+0x654>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f107 010a 	add.w	r1, r7, #10
 8000812:	2201      	movs	r2, #1
 8000814:	4618      	mov	r0, r3
 8000816:	f00a fc0d 	bl	800b034 <xQueueReceive>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d059      	beq.n	80008d4 <StartEncoder+0x520>
	  {
		    for (int i = 10; i > 1; i--)
 8000820:	230a      	movs	r3, #10
 8000822:	66bb      	str	r3, [r7, #104]	; 0x68
 8000824:	e02a      	b.n	800087c <StartEncoder+0x4c8>
		    {
				vfd.arr2[i][0] = vfd.arr2[i-1][0];
 8000826:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	4613      	mov	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000834:	4413      	add	r3, r2
 8000836:	3b58      	subs	r3, #88	; 0x58
 8000838:	7819      	ldrb	r1, [r3, #0]
 800083a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800083c:	4613      	mov	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	4413      	add	r3, r2
 8000842:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000846:	4413      	add	r3, r2
 8000848:	3b58      	subs	r3, #88	; 0x58
 800084a:	460a      	mov	r2, r1
 800084c:	701a      	strb	r2, [r3, #0]
				vfd.arr2[i][1] = vfd.arr2[i-1][1];
 800084e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000850:	1e5a      	subs	r2, r3, #1
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800085c:	4413      	add	r3, r2
 800085e:	3b57      	subs	r3, #87	; 0x57
 8000860:	7819      	ldrb	r1, [r3, #0]
 8000862:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000864:	4613      	mov	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4413      	add	r3, r2
 800086a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800086e:	4413      	add	r3, r2
 8000870:	3b57      	subs	r3, #87	; 0x57
 8000872:	460a      	mov	r2, r1
 8000874:	701a      	strb	r2, [r3, #0]
		    for (int i = 10; i > 1; i--)
 8000876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000878:	3b01      	subs	r3, #1
 800087a:	66bb      	str	r3, [r7, #104]	; 0x68
 800087c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800087e:	2b01      	cmp	r3, #1
 8000880:	dcd1      	bgt.n	8000826 <StartEncoder+0x472>
		    }
			vfd.arr2[1][0] = buf & 0xFF;
 8000882:	897b      	ldrh	r3, [r7, #10]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			vfd.arr2[1][1] = (buf>>8)&0xFF;
 800088a:	897b      	ldrh	r3, [r7, #10]
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	b29b      	uxth	r3, r3
 8000890:	b2db      	uxtb	r3, r3
 8000892:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			data = 0b11000000; // command 3, set address to 0
 8000896:	23c0      	movs	r3, #192	; 0xc0
 8000898:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a2:	4857      	ldr	r0, [pc, #348]	; (8000a00 <StartEncoder+0x64c>)
 80008a4:	f002 fd27 	bl	80032f6 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80008a8:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80008ac:	f04f 33ff 	mov.w	r3, #4294967295
 80008b0:	2201      	movs	r2, #1
 80008b2:	4854      	ldr	r0, [pc, #336]	; (8000a04 <StartEncoder+0x650>)
 80008b4:	f004 ffbe 	bl	8005834 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80008b8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295
 80008c0:	2221      	movs	r2, #33	; 0x21
 80008c2:	4850      	ldr	r0, [pc, #320]	; (8000a04 <StartEncoder+0x650>)
 80008c4:	f004 ffb6 	bl	8005834 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ce:	484c      	ldr	r0, [pc, #304]	; (8000a00 <StartEncoder+0x64c>)
 80008d0:	f002 fd11 	bl	80032f6 <HAL_GPIO_WritePin>
	  }

	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 80008d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d8:	4849      	ldr	r0, [pc, #292]	; (8000a00 <StartEncoder+0x64c>)
 80008da:	f002 fcf5 	bl	80032c8 <HAL_GPIO_ReadPin>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d003      	beq.n	80008ec <StartEncoder+0x538>
	  {
		  released = true;
 80008e4:	4b49      	ldr	r3, [pc, #292]	; (8000a0c <StartEncoder+0x658>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
 80008ea:	e015      	b.n	8000918 <StartEncoder+0x564>
	  } else if (released)
 80008ec:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <StartEncoder+0x658>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d011      	beq.n	8000918 <StartEncoder+0x564>
	  {
		  released = false;
 80008f4:	4b45      	ldr	r3, [pc, #276]	; (8000a0c <StartEncoder+0x658>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
		  invert = !invert;
 80008fa:	4b45      	ldr	r3, [pc, #276]	; (8000a10 <StartEncoder+0x65c>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	bf14      	ite	ne
 8000902:	2301      	movne	r3, #1
 8000904:	2300      	moveq	r3, #0
 8000906:	b2db      	uxtb	r3, r3
 8000908:	f083 0301 	eor.w	r3, r3, #1
 800090c:	b2db      	uxtb	r3, r3
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	b2da      	uxtb	r2, r3
 8000914:	4b3e      	ldr	r3, [pc, #248]	; (8000a10 <StartEncoder+0x65c>)
 8000916:	701a      	strb	r2, [r3, #0]
	  }

	  data = 0b01000001; // command 2, write to LED port
 8000918:	2341      	movs	r3, #65	; 0x41
 800091a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000924:	4836      	ldr	r0, [pc, #216]	; (8000a00 <StartEncoder+0x64c>)
 8000926:	f002 fce6 	bl	80032f6 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800092a:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	2201      	movs	r2, #1
 8000934:	4833      	ldr	r0, [pc, #204]	; (8000a04 <StartEncoder+0x650>)
 8000936:	f004 ff7d 	bl	8005834 <HAL_SPI_Transmit>
	  osDelay(10);
 800093a:	200a      	movs	r0, #10
 800093c:	f009 ff0e 	bl	800a75c <osDelay>

	  data = ~(1<<((encoder_value >> 2)&0b11));
 8000940:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <StartEncoder+0x660>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	089b      	lsrs	r3, r3, #2
 8000946:	b29b      	uxth	r3, r3
 8000948:	f003 0303 	and.w	r3, r3, #3
 800094c:	2201      	movs	r2, #1
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	b2db      	uxtb	r3, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
//	  if (invert)
//		  data =~data;
	  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, invert);
 800095c:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <StartEncoder+0x65c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	2120      	movs	r1, #32
 8000964:	4826      	ldr	r0, [pc, #152]	; (8000a00 <StartEncoder+0x64c>)
 8000966:	f002 fcc6 	bl	80032f6 <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800096a:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	2201      	movs	r2, #1
 8000974:	4823      	ldr	r0, [pc, #140]	; (8000a04 <StartEncoder+0x650>)
 8000976:	f004 ff5d 	bl	8005834 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000980:	481f      	ldr	r0, [pc, #124]	; (8000a00 <StartEncoder+0x64c>)
 8000982:	f002 fcb8 	bl	80032f6 <HAL_GPIO_WritePin>

	  osDelay(10);
 8000986:	200a      	movs	r0, #10
 8000988:	f009 fee8 	bl	800a75c <osDelay>
	  data = 0b10000000; // command 4
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  data |= invert<<3; // enable/disable display
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <StartEncoder+0x65c>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	b25a      	sxtb	r2, r3
 800099a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  data |= ((encoder_value >> 2) - 1)&0b111; // set brightness
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <StartEncoder+0x660>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	3b01      	subs	r3, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	b25a      	sxtb	r2, r3
 80009c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d6:	480a      	ldr	r0, [pc, #40]	; (8000a00 <StartEncoder+0x64c>)
 80009d8:	f002 fc8d 	bl	80032f6 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80009dc:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
 80009e4:	2201      	movs	r2, #1
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <StartEncoder+0x650>)
 80009e8:	f004 ff24 	bl	8005834 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f2:	4803      	ldr	r0, [pc, #12]	; (8000a00 <StartEncoder+0x64c>)
 80009f4:	f002 fc7f 	bl	80032f6 <HAL_GPIO_WritePin>
	  osDelay(10);
 80009f8:	200a      	movs	r0, #10
 80009fa:	f009 feaf 	bl	800a75c <osDelay>
  {
 80009fe:	e700      	b.n	8000802 <StartEncoder+0x44e>
 8000a00:	40010c00 	.word	0x40010c00
 8000a04:	20002578 	.word	0x20002578
 8000a08:	2000248c 	.word	0x2000248c
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000001 	.word	0x20000001
 8000a14:	200001ac 	.word	0x200001ac

08000a18 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_UART_RxCpltCallback+0x44>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d115      	bne.n	8000a54 <HAL_UART_RxCpltCallback+0x3c>
		return;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]


   /* Notify the task that the transmission is complete by setting the TX_BIT
   in the task's notification value. */
	vTaskNotifyGiveFromISR( UARTtaskHandle,
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_UART_RxCpltCallback+0x48>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f107 020c 	add.w	r2, r7, #12
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f00b fcea 	bl	800c410 <vTaskNotifyGiveFromISR>

   /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
   should be performed to ensure the interrupt returns directly to the highest
   priority task.  The macro used for this purpose is dependent on the port in
   use and may be called portEND_SWITCHING_ISR(). */
   portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d009      	beq.n	8000a56 <HAL_UART_RxCpltCallback+0x3e>
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_UART_RxCpltCallback+0x4c>)
 8000a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	f3bf 8f4f 	dsb	sy
 8000a4e:	f3bf 8f6f 	isb	sy
 8000a52:	e000      	b.n	8000a56 <HAL_UART_RxCpltCallback+0x3e>
		return;
 8000a54:	bf00      	nop
}
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20002618 	.word	0x20002618
 8000a60:	20002480 	.word	0x20002480
 8000a64:	e000ed04 	.word	0xe000ed04

08000a68 <process_encoder>:

void process_encoder(void)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000a6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a72:	483c      	ldr	r0, [pc, #240]	; (8000b64 <process_encoder+0xfc>)
 8000a74:	f002 fc28 	bl	80032c8 <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461c      	mov	r4, r3
		   0b10*HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin));
 8000a7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a80:	4838      	ldr	r0, [pc, #224]	; (8000b64 <process_encoder+0xfc>)
 8000a82:	f002 fc21 	bl	80032c8 <HAL_GPIO_ReadPin>
 8000a86:	4603      	mov	r3, r0
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4423      	add	r3, r4
 8000a8e:	71fb      	strb	r3, [r7, #7]
	switch(old)
 8000a90:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <process_encoder+0x100>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	d85e      	bhi.n	8000b56 <process_encoder+0xee>
 8000a98:	a201      	add	r2, pc, #4	; (adr r2, 8000aa0 <process_encoder+0x38>)
 8000a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9e:	bf00      	nop
 8000aa0:	08000ad7 	.word	0x08000ad7
 8000aa4:	08000afd 	.word	0x08000afd
 8000aa8:	08000ab1 	.word	0x08000ab1
 8000aac:	08000b23 	.word	0x08000b23
		{
		case 2:
			{
			if(new == 3) encoder_value++;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d105      	bne.n	8000ac2 <process_encoder+0x5a>
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <process_encoder+0x104>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <process_encoder+0x104>)
 8000ac0:	801a      	strh	r2, [r3, #0]
			if(new == 0) encoder_value--;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d13f      	bne.n	8000b48 <process_encoder+0xe0>
 8000ac8:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <process_encoder+0x104>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <process_encoder+0x104>)
 8000ad2:	801a      	strh	r2, [r3, #0]
			break;
 8000ad4:	e038      	b.n	8000b48 <process_encoder+0xe0>
			}

		case 0:
			{
			if(new == 2) encoder_value++;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d105      	bne.n	8000ae8 <process_encoder+0x80>
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <process_encoder+0x104>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <process_encoder+0x104>)
 8000ae6:	801a      	strh	r2, [r3, #0]
			if(new == 1) encoder_value--;
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d12e      	bne.n	8000b4c <process_encoder+0xe4>
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <process_encoder+0x104>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <process_encoder+0x104>)
 8000af8:	801a      	strh	r2, [r3, #0]
			break;
 8000afa:	e027      	b.n	8000b4c <process_encoder+0xe4>
			}
		case 1:
			{
			if(new == 0) encoder_value++;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d105      	bne.n	8000b0e <process_encoder+0xa6>
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <process_encoder+0x104>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	3301      	adds	r3, #1
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <process_encoder+0x104>)
 8000b0c:	801a      	strh	r2, [r3, #0]
			if(new == 3) encoder_value--;
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d11d      	bne.n	8000b50 <process_encoder+0xe8>
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <process_encoder+0x104>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <process_encoder+0x104>)
 8000b1e:	801a      	strh	r2, [r3, #0]
			break;
 8000b20:	e016      	b.n	8000b50 <process_encoder+0xe8>
			}
		case 3:
			{
			if(new == 1) encoder_value++;
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d105      	bne.n	8000b34 <process_encoder+0xcc>
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <process_encoder+0x104>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <process_encoder+0x104>)
 8000b32:	801a      	strh	r2, [r3, #0]
			if(new == 2) encoder_value--;
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d10c      	bne.n	8000b54 <process_encoder+0xec>
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <process_encoder+0x104>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <process_encoder+0x104>)
 8000b44:	801a      	strh	r2, [r3, #0]
			break;
 8000b46:	e005      	b.n	8000b54 <process_encoder+0xec>
			break;
 8000b48:	bf00      	nop
 8000b4a:	e004      	b.n	8000b56 <process_encoder+0xee>
			break;
 8000b4c:	bf00      	nop
 8000b4e:	e002      	b.n	8000b56 <process_encoder+0xee>
			break;
 8000b50:	bf00      	nop
 8000b52:	e000      	b.n	8000b56 <process_encoder+0xee>
			break;
 8000b54:	bf00      	nop
			}
		}
	old = new;
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <process_encoder+0x100>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	7013      	strb	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd90      	pop	{r4, r7, pc}
 8000b64:	40010c00 	.word	0x40010c00
 8000b68:	200001af 	.word	0x200001af
 8000b6c:	200001ac 	.word	0x200001ac

08000b70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b84:	4b49      	ldr	r3, [pc, #292]	; (8000cac <MX_GPIO_Init+0x13c>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a48      	ldr	r2, [pc, #288]	; (8000cac <MX_GPIO_Init+0x13c>)
 8000b8a:	f043 0310 	orr.w	r3, r3, #16
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b46      	ldr	r3, [pc, #280]	; (8000cac <MX_GPIO_Init+0x13c>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9c:	4b43      	ldr	r3, [pc, #268]	; (8000cac <MX_GPIO_Init+0x13c>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a42      	ldr	r2, [pc, #264]	; (8000cac <MX_GPIO_Init+0x13c>)
 8000ba2:	f043 0320 	orr.w	r3, r3, #32
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b40      	ldr	r3, [pc, #256]	; (8000cac <MX_GPIO_Init+0x13c>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0320 	and.w	r3, r3, #32
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <MX_GPIO_Init+0x13c>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a3c      	ldr	r2, [pc, #240]	; (8000cac <MX_GPIO_Init+0x13c>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	; (8000cac <MX_GPIO_Init+0x13c>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bcc:	4b37      	ldr	r3, [pc, #220]	; (8000cac <MX_GPIO_Init+0x13c>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a36      	ldr	r2, [pc, #216]	; (8000cac <MX_GPIO_Init+0x13c>)
 8000bd2:	f043 0308 	orr.w	r3, r3, #8
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <MX_GPIO_Init+0x13c>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0308 	and.w	r3, r3, #8
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bea:	4831      	ldr	r0, [pc, #196]	; (8000cb0 <MX_GPIO_Init+0x140>)
 8000bec:	f002 fb83 	bl	80032f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 8000bf6:	482f      	ldr	r0, [pc, #188]	; (8000cb4 <MX_GPIO_Init+0x144>)
 8000bf8:	f002 fb7d 	bl	80032f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c02:	482d      	ldr	r0, [pc, #180]	; (8000cb8 <MX_GPIO_Init+0x148>)
 8000c04:	f002 fb77 	bl	80032f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4823      	ldr	r0, [pc, #140]	; (8000cb0 <MX_GPIO_Init+0x140>)
 8000c22:	f002 f9cd 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c26:	2301      	movs	r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2a:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <MX_GPIO_Init+0x14c>)
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	4619      	mov	r1, r3
 8000c38:	481f      	ldr	r0, [pc, #124]	; (8000cb8 <MX_GPIO_Init+0x148>)
 8000c3a:	f002 f9c1 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin|enc_s_Pin;
 8000c3e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4619      	mov	r1, r3
 8000c52:	4818      	ldr	r0, [pc, #96]	; (8000cb4 <MX_GPIO_Init+0x144>)
 8000c54:	f002 f9b4 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000c58:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 8000c5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <MX_GPIO_Init+0x144>)
 8000c72:	f002 f9a5 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <MX_GPIO_Init+0x148>)
 8000c90:	f002 f996 	bl	8002fc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2105      	movs	r1, #5
 8000c98:	2006      	movs	r0, #6
 8000c9a:	f002 f8b6 	bl	8002e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c9e:	2006      	movs	r0, #6
 8000ca0:	f002 f8cf 	bl	8002e42 <HAL_NVIC_EnableIRQ>

}
 8000ca4:	bf00      	nop
 8000ca6:	3720      	adds	r7, #32
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	40010c00 	.word	0x40010c00
 8000cb8:	40010800 	.word	0x40010800
 8000cbc:	10110000 	.word	0x10110000

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc4:	f001 ffba 	bl	8002c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc8:	f000 f80d 	bl	8000ce6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ccc:	f7ff ff50 	bl	8000b70 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000cd0:	f001 fdc2 	bl	8002858 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000cd4:	f001 ff10 	bl	8002af8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000cd8:	f009 fc30 	bl	800a53c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000cdc:	f7ff fa4a 	bl	8000174 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000ce0:	f009 fc5e 	bl	800a5a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <main+0x24>

08000ce6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b094      	sub	sp, #80	; 0x50
 8000cea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cf0:	2228      	movs	r2, #40	; 0x28
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f00d f85f 	bl	800ddb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d16:	2301      	movs	r3, #1
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d26:	2301      	movs	r3, #1
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d34:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f003 fff2 	bl	8004d28 <HAL_RCC_OscConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000d4a:	f000 f839 	bl	8000dc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4e:	230f      	movs	r3, #15
 8000d50:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2102      	movs	r1, #2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f004 fa5c 	bl	8005228 <HAL_RCC_ClockConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d76:	f000 f823 	bl	8000dc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d7a:	2310      	movs	r3, #16
 8000d7c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4618      	mov	r0, r3
 8000d86:	f004 fc1b 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d90:	f000 f816 	bl	8000dc0 <Error_Handler>
  }
}
 8000d94:	bf00      	nop
 8000d96:	3750      	adds	r7, #80	; 0x50
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d101      	bne.n	8000db2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dae:	f001 ff5b 	bl	8002c68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40012c00 	.word	0x40012c00

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <Error_Handler+0x8>

08000dca <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b085      	sub	sp, #20
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	5c8a      	ldrb	r2, [r1, r2]
 8000dde:	4413      	add	r3, r2
 8000de0:	3301      	adds	r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b3f      	cmp	r3, #63	; 0x3f
 8000de8:	dd02      	ble.n	8000df0 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3b40      	subs	r3, #64	; 0x40
 8000dee:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	5cd3      	ldrb	r3, [r2, r3]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <hist_is_space_for_new+0x1a>
		return true;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e01e      	b.n	8000e58 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	429a      	cmp	r2, r3
 8000e24:	db0c      	blt.n	8000e40 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4413      	add	r3, r2
 8000e34:	3b01      	subs	r3, #1
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	da0c      	bge.n	8000e56 <hist_is_space_for_new+0x56>
			return true;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e00b      	b.n	8000e58 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	da01      	bge.n	8000e56 <hist_is_space_for_new+0x56>
			return true;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e000      	b.n	8000e58 <hist_is_space_for_new+0x58>
	}
	return false;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b3e      	cmp	r3, #62	; 0x3e
 8000e72:	dc61      	bgt.n	8000f38 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8000e74:	e002      	b.n	8000e7c <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f7ff ffa7 	bl	8000dca <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	f7ff ffbe 	bl	8000e00 <hist_is_space_for_new>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0f5      	beq.n	8000e76 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	5cd3      	ldrb	r3, [r2, r3]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d105      	bne.n	8000ea2 <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	b2d1      	uxtb	r1, r2
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	da0a      	bge.n	8000ec6 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f00c ff52 	bl	800dd68 <memcpy>
 8000ec4:	e018      	b.n	8000ef8 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000ece:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f00c ff42 	bl	800dd68 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	68ba      	ldr	r2, [r7, #8]
 8000eea:	18d1      	adds	r1, r2, r3
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	f00c ff38 	bl	800dd68 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	b2d1      	uxtb	r1, r2
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	2b3f      	cmp	r3, #63	; 0x3f
 8000f18:	dd05      	ble.n	8000f26 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2200      	movs	r2, #0
 8000f34:	649a      	str	r2, [r3, #72]	; 0x48
 8000f36:	e000      	b.n	8000f3a <hist_save_line+0xd8>
		return;
 8000f38:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	; 0x30
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8000f56:	e010      	b.n	8000f7a <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f64:	4413      	add	r3, r2
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8000f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f6c:	dd02      	ble.n	8000f74 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8000f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f70:	3b40      	subs	r3, #64	; 0x40
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8000f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f76:	3301      	adds	r3, #1
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1e8      	bne.n	8000f58 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d176      	bne.n	800107a <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f92:	429a      	cmp	r2, r3
 8000f94:	f2c0 80d6 	blt.w	8001144 <hist_restore_line+0x204>
			int header = pThis->begin;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000fa2:	e010      	b.n	8000fc6 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb0:	4413      	add	r3, r2
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	2b3f      	cmp	r3, #63	; 0x3f
 8000fb8:	dd02      	ble.n	8000fc0 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	3b40      	subs	r3, #64	; 0x40
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	4413      	add	r3, r2
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d007      	beq.n	8000fe2 <hist_restore_line+0xa2>
 8000fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	1e5a      	subs	r2, r3, #1
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d1e0      	bne.n	8000fa4 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	4413      	add	r3, r2
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 80aa 	beq.w	8001144 <hist_restore_line+0x204>
					pThis->cur++;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	4413      	add	r3, r2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	4413      	add	r3, r2
 8001008:	2b3f      	cmp	r3, #63	; 0x3f
 800100a:	dc11      	bgt.n	8001030 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 800100c:	2233      	movs	r2, #51	; 0x33
 800100e:	2100      	movs	r1, #0
 8001010:	68b8      	ldr	r0, [r7, #8]
 8001012:	f00c fed1 	bl	800ddb8 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	3301      	adds	r3, #1
 800101c:	18d1      	adds	r1, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68b8      	ldr	r0, [r7, #8]
 800102a:	f00c fe9d 	bl	800dd68 <memcpy>
 800102e:	e01f      	b.n	8001070 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001036:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8001038:	2233      	movs	r2, #51	; 0x33
 800103a:	2100      	movs	r1, #0
 800103c:	68b8      	ldr	r0, [r7, #8]
 800103e:	f00c febb 	bl	800ddb8 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	3301      	adds	r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4619      	mov	r1, r3
 800104e:	68b8      	ldr	r0, [r7, #8]
 8001050:	f00c fe8a 	bl	800dd68 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	18d0      	adds	r0, r2, r3
 800105a:	68f9      	ldr	r1, [r7, #12]
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	461a      	mov	r2, r3
 800106c:	f00c fe7c 	bl	800dd68 <memcpy>
				}
				return pThis->ring_buf[header];
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	4413      	add	r3, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	e066      	b.n	8001148 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107e:	2b00      	cmp	r3, #0
 8001080:	dd5e      	ble.n	8001140 <hist_restore_line+0x200>
				pThis->cur--;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001086:	1e5a      	subs	r2, r3, #1
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8001096:	e010      	b.n	80010ba <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	4413      	add	r3, r2
 80010a6:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	2b3f      	cmp	r3, #63	; 0x3f
 80010ac:	dd02      	ble.n	80010b4 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b40      	subs	r3, #64	; 0x40
 80010b2:	61fb      	str	r3, [r7, #28]
				j++;
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	3301      	adds	r3, #1
 80010b8:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	4413      	add	r3, r2
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <hist_restore_line+0x194>
 80010c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d1e1      	bne.n	8001098 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	4413      	add	r3, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	4413      	add	r3, r2
 80010e2:	2b3f      	cmp	r3, #63	; 0x3f
 80010e4:	dc0c      	bgt.n	8001100 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	3301      	adds	r3, #1
 80010ec:	18d1      	adds	r1, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	4413      	add	r3, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68b8      	ldr	r0, [r7, #8]
 80010fa:	f00c fe35 	bl	800dd68 <memcpy>
 80010fe:	e01a      	b.n	8001136 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001106:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3301      	adds	r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	4619      	mov	r1, r3
 8001114:	68b8      	ldr	r0, [r7, #8]
 8001116:	f00c fe27 	bl	800dd68 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	18d0      	adds	r0, r2, r3
 8001120:	68f9      	ldr	r1, [r7, #12]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	4413      	add	r3, r2
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	461a      	mov	r2, r3
 8001132:	f00c fe19 	bl	800dd68 <memcpy>
			}
			return pThis->ring_buf[header];
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	4413      	add	r3, r2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	e003      	b.n	8001148 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8001140:	2300      	movs	r3, #0
 8001142:	e001      	b.n	8001148 <hist_restore_line+0x208>
		}
	}
	return -1;
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001148:	4618      	mov	r0, r3
 800114a:	3730      	adds	r7, #48	; 0x30
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
	int i = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8001164:	e002      	b.n	800116c <split+0x1c>
			ind++;
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	3301      	adds	r3, #1
 800116a:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4413      	add	r3, r2
 8001172:	3354      	adds	r3, #84	; 0x54
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d103      	bne.n	8001182 <split+0x32>
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	429a      	cmp	r2, r3
 8001180:	dbf1      	blt.n	8001166 <split+0x16>
		}
		if (!(ind < limit)) return i;
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	429a      	cmp	r2, r3
 8001188:	db01      	blt.n	800118e <split+0x3e>
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	e024      	b.n	80011d8 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	1c58      	adds	r0, r3, #1
 800119a:	6178      	str	r0, [r7, #20]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	4403      	add	r3, r0
 80011a2:	440a      	add	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	dd05      	ble.n	80011b8 <split+0x68>
			return -1;
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	e012      	b.n	80011d8 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	3301      	adds	r3, #1
 80011b6:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4413      	add	r3, r2
 80011be:	3354      	adds	r3, #84	; 0x54
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <split+0x7e>
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dbf1      	blt.n	80011b2 <split+0x62>
		}
		if (!(ind < limit)) return i;
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	dbca      	blt.n	800116c <split+0x1c>
 80011d6:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 80011d8:	4618      	mov	r0, r3
 80011da:	371c      	adds	r7, #28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011f4:	4610      	mov	r0, r2
 80011f6:	4798      	blx	r3
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800120e:	4803      	ldr	r0, [pc, #12]	; (800121c <terminal_backspace+0x1c>)
 8001210:	4798      	blx	r3
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	0800dea4 	.word	0x0800dea4

08001220 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800122e:	4803      	ldr	r0, [pc, #12]	; (800123c <terminal_newline+0x1c>)
 8001230:	4798      	blx	r3
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	0800deac 	.word	0x0800deac

08001240 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 8001240:	b480      	push	{r7}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	2300      	movs	r3, #0
 8001250:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125c:	d235      	bcs.n	80012ca <u16bit_to_str+0x8a>
		while (nmb > 0) {
 800125e:	e01a      	b.n	8001296 <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <u16bit_to_str+0x9c>)
 8001264:	fba3 2301 	umull	r2, r3, r3, r1
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	1aca      	subs	r2, r1, r3
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	1c59      	adds	r1, r3, #1
 800127a:	6179      	str	r1, [r7, #20]
 800127c:	3230      	adds	r2, #48	; 0x30
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	f107 0118 	add.w	r1, r7, #24
 8001284:	440b      	add	r3, r1
 8001286:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a13      	ldr	r2, [pc, #76]	; (80012dc <u16bit_to_str+0x9c>)
 800128e:	fba2 2303 	umull	r2, r3, r2, r3
 8001292:	08db      	lsrs	r3, r3, #3
 8001294:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1e1      	bne.n	8001260 <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	e00f      	b.n	80012c2 <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	1c59      	adds	r1, r3, #1
 80012ae:	6039      	str	r1, [r7, #0]
 80012b0:	f107 0118 	add.w	r1, r7, #24
 80012b4:	440a      	add	r2, r1
 80012b6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80012ba:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	3301      	adds	r3, #1
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	dbeb      	blt.n	80012a2 <u16bit_to_str+0x62>
	}
	*buf = '\0';
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
	return buf;
 80012d0:	683b      	ldr	r3, [r7, #0]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	371c      	adds	r7, #28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	cccccccd 	.word	0xcccccccd

080012e0 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4a1d      	ldr	r2, [pc, #116]	; (8001374 <terminal_move_cursor+0x94>)
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	4611      	mov	r1, r2
 8001304:	8019      	strh	r1, [r3, #0]
 8001306:	3302      	adds	r3, #2
 8001308:	0c12      	lsrs	r2, r2, #16
 800130a:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	dd0f      	ble.n	8001332 <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	3302      	adds	r3, #2
 800131a:	4619      	mov	r1, r3
 800131c:	4610      	mov	r0, r2
 800131e:	f7ff ff8f 	bl	8001240 <u16bit_to_str>
 8001322:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	4914      	ldr	r1, [pc, #80]	; (8001378 <terminal_move_cursor+0x98>)
 8001328:	461a      	mov	r2, r3
 800132a:	460b      	mov	r3, r1
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	8013      	strh	r3, [r2, #0]
 8001330:	e013      	b.n	800135a <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	da18      	bge.n	800136a <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	425b      	negs	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	3302      	adds	r3, #2
 8001344:	4619      	mov	r1, r3
 8001346:	4610      	mov	r0, r2
 8001348:	f7ff ff7a 	bl	8001240 <u16bit_to_str>
 800134c:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	490a      	ldr	r1, [pc, #40]	; (800137c <terminal_move_cursor+0x9c>)
 8001352:	461a      	mov	r2, r3
 8001354:	460b      	mov	r3, r1
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001360:	f107 020c 	add.w	r2, r7, #12
 8001364:	4610      	mov	r0, r2
 8001366:	4798      	blx	r3
 8001368:	e000      	b.n	800136c <terminal_move_cursor+0x8c>
		return;
 800136a:	bf00      	nop
}
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	0800deb0 	.word	0x0800deb0
 8001378:	0800deb4 	.word	0x0800deb4
 800137c:	0800deb8 	.word	0x0800deb8

08001380 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <terminal_reset_cursor+0x64>)
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	4611      	mov	r1, r2
 8001392:	8019      	strh	r1, [r3, #0]
 8001394:	3302      	adds	r3, #2
 8001396:	0c12      	lsrs	r2, r2, #16
 8001398:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	3302      	adds	r3, #2
 80013a0:	4619      	mov	r1, r3
 80013a2:	203a      	movs	r0, #58	; 0x3a
 80013a4:	f7ff ff4c 	bl	8001240 <u16bit_to_str>
 80013a8:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <terminal_reset_cursor+0x68>)
 80013ae:	6810      	ldr	r0, [r2, #0]
 80013b0:	6018      	str	r0, [r3, #0]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3303      	adds	r3, #3
 80013b6:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 80013b8:	69f9      	ldr	r1, [r7, #28]
 80013ba:	2005      	movs	r0, #5
 80013bc:	f7ff ff40 	bl	8001240 <u16bit_to_str>
 80013c0:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	4909      	ldr	r1, [pc, #36]	; (80013ec <terminal_reset_cursor+0x6c>)
 80013c6:	461a      	mov	r2, r3
 80013c8:	460b      	mov	r3, r1
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013d4:	f107 020c 	add.w	r2, r7, #12
 80013d8:	4610      	mov	r0, r2
 80013da:	4798      	blx	r3
}
 80013dc:	bf00      	nop
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	0800deb0 	.word	0x0800deb0
 80013e8:	0800debc 	.word	0x0800debc
 80013ec:	0800deb4 	.word	0x0800deb4

080013f0 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001402:	4816      	ldr	r0, [pc, #88]	; (800145c <terminal_print_line+0x6c>)
 8001404:	4798      	blx	r3

	char nch [] = {0,0};
 8001406:	2300      	movs	r3, #0
 8001408:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	e014      	b.n	800143a <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	4413      	add	r3, r2
 8001416:	3354      	adds	r3, #84	; 0x54
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 800141c:	7c3b      	ldrb	r3, [r7, #16]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <terminal_print_line+0x36>
			nch[0] = ' ';
 8001422:	2320      	movs	r3, #32
 8001424:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800142c:	f107 0210 	add.w	r2, r7, #16
 8001430:	4610      	mov	r0, r2
 8001432:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	429a      	cmp	r2, r3
 8001444:	dbe4      	blt.n	8001410 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff ff9a 	bl	8001380 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f7ff ff46 	bl	80012e0 <terminal_move_cursor>
}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	0800dec0 	.word	0x0800dec0

08001460 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3354      	adds	r3, #84	; 0x54
 800146e:	2233      	movs	r2, #51	; 0x33
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f00c fca0 	bl	800ddb8 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3304      	adds	r3, #4
 800147c:	2240      	movs	r2, #64	; 0x40
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f00c fc99 	bl	800ddb8 <memset>
	pThis->ring_hist.begin = 0;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pThis->execute = NULL;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	pThis->get_completion = NULL;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
	pThis->prompt_str = prompt_default;
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <microrl_init+0x78>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000004 	.word	0x20000004

080014dc <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	1d18      	adds	r0, r3, #4
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3354      	adds	r3, #84	; 0x54
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fcfb 	bl	8000f40 <hist_restore_line>
 800154a:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db1a      	blt.n	8001588 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	3354      	adds	r3, #84	; 0x54
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		terminal_reset_cursor (pThis);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ff04 	bl	8001380 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800157e:	461a      	mov	r2, r3
 8001580:	2100      	movs	r1, #0
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ff34 	bl	80013f0 <terminal_print_line>
	}
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	2b5b      	cmp	r3, #91	; 0x5b
 80015a0:	d104      	bne.n	80015ac <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	701a      	strb	r2, [r3, #0]
		return 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e07b      	b.n	80016a4 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d14f      	bne.n	8001654 <escape_process+0xc4>
		if (ch == 'A') {
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	2b41      	cmp	r3, #65	; 0x41
 80015b8:	d105      	bne.n	80015c6 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 80015ba:	2100      	movs	r1, #0
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ffb7 	bl	8001530 <hist_search>
#endif
			return 1;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e06e      	b.n	80016a4 <escape_process+0x114>
		} else if (ch == 'B') {
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	2b42      	cmp	r3, #66	; 0x42
 80015ca:	d105      	bne.n	80015d8 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 80015cc:	2101      	movs	r1, #1
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ffae 	bl	8001530 <hist_search>
#endif
			return 1;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e065      	b.n	80016a4 <escape_process+0x114>
		} else if (ch == 'C') {
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2b43      	cmp	r3, #67	; 0x43
 80015dc:	d114      	bne.n	8001608 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ea:	429a      	cmp	r2, r3
 80015ec:	da0a      	bge.n	8001604 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 80015ee:	2101      	movs	r1, #1
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fe75 	bl	80012e0 <terminal_move_cursor>
				pThis->cursor++;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8001604:	2301      	movs	r3, #1
 8001606:	e04d      	b.n	80016a4 <escape_process+0x114>
		} else if (ch == 'D') {
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	2b44      	cmp	r3, #68	; 0x44
 800160c:	d112      	bne.n	8001634 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001614:	2b00      	cmp	r3, #0
 8001616:	dd0b      	ble.n	8001630 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fe5f 	bl	80012e0 <terminal_move_cursor>
				pThis->cursor--;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001628:	1e5a      	subs	r2, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8001630:	2301      	movs	r3, #1
 8001632:	e037      	b.n	80016a4 <escape_process+0x114>
		} else if (ch == '7') {
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	2b37      	cmp	r3, #55	; 0x37
 8001638:	d104      	bne.n	8001644 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2202      	movs	r2, #2
 800163e:	701a      	strb	r2, [r3, #0]
			return 0;
 8001640:	2300      	movs	r3, #0
 8001642:	e02f      	b.n	80016a4 <escape_process+0x114>
		} else if (ch == '8') {
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	2b38      	cmp	r3, #56	; 0x38
 8001648:	d12b      	bne.n	80016a2 <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2203      	movs	r2, #3
 800164e:	701a      	strb	r2, [r3, #0]
			return 0;
 8001650:	2300      	movs	r3, #0
 8001652:	e027      	b.n	80016a4 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	2b7e      	cmp	r3, #126	; 0x7e
 8001658:	d123      	bne.n	80016a2 <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d108      	bne.n	8001674 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fe8c 	bl	8001380 <terminal_reset_cursor>
			pThis->cursor = 0;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8001670:	2301      	movs	r3, #1
 8001672:	e017      	b.n	80016a4 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d112      	bne.n	80016a2 <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	4619      	mov	r1, r3
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fe27 	bl	80012e0 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	2b32      	cmp	r3, #50	; 0x32
 80016c4:	dc60      	bgt.n	8001788 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016d2:	4619      	mov	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	440b      	add	r3, r1
 80016d8:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3354      	adds	r3, #84	; 0x54
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor + len,
 80016e4:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016f2:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 80016f4:	461a      	mov	r2, r3
 80016f6:	f00c fb45 	bl	800dd84 <memmove>
		for (i = 0; i < len; i++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	e025      	b.n	800174c <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	441a      	add	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	440b      	add	r3, r1
 8001710:	7811      	ldrb	r1, [r2, #0]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	4413      	add	r3, r2
 8001716:	460a      	mov	r2, r1
 8001718:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	4413      	add	r3, r2
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	4413      	add	r3, r2
 800172a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800172e:	2b20      	cmp	r3, #32
 8001730:	d109      	bne.n	8001746 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	4413      	add	r3, r2
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3301      	adds	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	429a      	cmp	r2, r3
 8001752:	dbd5      	blt.n	8001700 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	441a      	add	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdlen += len;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	441a      	add	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	4413      	add	r3, r2
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <microrl_insert_text+0xde>
	}
	return false;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dd31      	ble.n	8001808 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fd2b 	bl	8001200 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017b6:	3b01      	subs	r3, #1
 80017b8:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3354      	adds	r3, #84	; 0x54
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor-1,
 80017c4:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 80017d6:	461a      	mov	r2, r3
 80017d8:	f00c fad4 	bl	800dd84 <memmove>
		pThis->cursor--;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017e2:	1e5a      	subs	r2, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdline [pThis->cmdlen] = '\0';
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001800:	1e5a      	subs	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f7fe fca0 	bl	8000164 <strlen>
 8001824:	4603      	mov	r3, r0
 8001826:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e019      	b.n	8001862 <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fc93 	bl	8000164 <strlen>
 800183e:	4602      	mov	r2, r0
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	429a      	cmp	r2, r3
 8001844:	d20a      	bcs.n	800185c <common_len+0x4c>
			shortest = arr[i];
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f7fe fc86 	bl	8000164 <strlen>
 8001858:	4603      	mov	r3, r0
 800185a:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1de      	bne.n	800182e <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	e01f      	b.n	80018b6 <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	e012      	b.n	80018a2 <common_len+0x92>
			if (shortest[i] != arr[j][i])
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	4413      	add	r3, r2
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	440b      	add	r3, r1
 800188c:	6819      	ldr	r1, [r3, #0]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	440b      	add	r3, r1
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <common_len+0x8c>
				return i;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	e011      	b.n	80018c0 <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	3301      	adds	r3, #1
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1e5      	bne.n	800187c <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3301      	adds	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	dbdb      	blt.n	8001876 <common_len+0x66>

	return i;
 80018be:	697b      	ldr	r3, [r7, #20]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 80018c8:	b5b0      	push	{r4, r5, r7, lr}
 80018ca:	b08c      	sub	sp, #48	; 0x30
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 809c 	beq.w	8001a14 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018e2:	f107 020c 	add.w	r2, r7, #12
 80018e6:	4619      	mov	r1, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff fc31 	bl	8001150 <split>
 80018ee:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018f6:	3b01      	subs	r3, #1
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001900:	2b00      	cmp	r3, #0
 8001902:	d109      	bne.n	8001918 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8001904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	62fa      	str	r2, [r7, #44]	; 0x2c
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001910:	4413      	add	r3, r2
 8001912:	4a42      	ldr	r2, [pc, #264]	; (8001a1c <microrl_get_complite+0x154>)
 8001914:	f843 2c24 	str.w	r2, [r3, #-36]
	compl_token = pThis->get_completion (status, tkn_arr);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191e:	f107 020c 	add.w	r2, r7, #12
 8001922:	4611      	mov	r1, r2
 8001924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001926:	4798      	blx	r3
 8001928:	6238      	str	r0, [r7, #32]
	if (compl_token[0] != NULL) {
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d071      	beq.n	8001a16 <microrl_get_complite+0x14e>
		int i = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
		int len;

		if (compl_token[1] == NULL) {
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	3304      	adds	r3, #4
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d107      	bne.n	8001950 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fc0d 	bl	8000164 <strlen>
 800194a:	4603      	mov	r3, r0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
 800194e:	e026      	b.n	800199e <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8001950:	6a38      	ldr	r0, [r7, #32]
 8001952:	f7ff ff5d 	bl	8001810 <common_len>
 8001956:	6278      	str	r0, [r7, #36]	; 0x24
			terminal_newline (pThis);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff fc61 	bl	8001220 <terminal_newline>
			while (compl_token [i] != NULL) {
 800195e:	e011      	b.n	8001984 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	6a39      	ldr	r1, [r7, #32]
 800196c:	440a      	add	r2, r1
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	4610      	mov	r0, r2
 8001972:	4798      	blx	r3
				pThis->print (" ");
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800197a:	4829      	ldr	r0, [pc, #164]	; (8001a20 <microrl_get_complite+0x158>)
 800197c:	4798      	blx	r3
				i++;
 800197e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001980:	3301      	adds	r3, #1
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
			while (compl_token [i] != NULL) {
 8001984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	6a3a      	ldr	r2, [r7, #32]
 800198a:	4413      	add	r3, r2
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1e6      	bne.n	8001960 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fc44 	bl	8001220 <terminal_newline>
			print_prompt (pThis);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff fc22 	bl	80011e2 <print_prompt>
		}
		
		if (len) {
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d02b      	beq.n	80019fc <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	681c      	ldr	r4, [r3, #0]
 80019a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019aa:	3b01      	subs	r3, #1
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80019b2:	4413      	add	r3, r2
 80019b4:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fbd3 	bl	8000164 <strlen>
 80019be:	4603      	mov	r3, r0
 80019c0:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 80019c2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80019c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c6:	3b01      	subs	r3, #1
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80019ce:	4413      	add	r3, r2
 80019d0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fbc5 	bl	8000164 <strlen>
 80019da:	4603      	mov	r3, r0
 80019dc:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 80019de:	461a      	mov	r2, r3
 80019e0:	4629      	mov	r1, r5
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fe62 	bl	80016ac <microrl_insert_text>
			if (compl_token[1] == NULL) 
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	3304      	adds	r3, #4
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d104      	bne.n	80019fc <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 80019f2:	2201      	movs	r2, #1
 80019f4:	490a      	ldr	r1, [pc, #40]	; (8001a20 <microrl_get_complite+0x158>)
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fe58 	bl	80016ac <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff fcbf 	bl	8001380 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fcef 	bl	80013f0 <terminal_print_line>
 8001a12:	e000      	b.n	8001a16 <microrl_get_complite+0x14e>
		return;
 8001a14:	bf00      	nop
	} 
}
 8001a16:	3730      	adds	r7, #48	; 0x30
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1c:	0800dec4 	.word	0x0800dec4
 8001a20:	0800dec8 	.word	0x0800dec8

08001a24 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff fbf7 	bl	8001220 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	dd0a      	ble.n	8001a52 <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	1d18      	adds	r0, r3, #4
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f7ff fa08 	bl	8000e62 <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a58:	f107 0208 	add.w	r2, r7, #8
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fb76 	bl	8001150 <split>
 8001a64:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6c:	d109      	bne.n	8001a82 <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a74:	4817      	ldr	r0, [pc, #92]	; (8001ad4 <new_line_handler+0xb0>)
 8001a76:	4798      	blx	r3
		pThis->print (ENDL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a7e:	4816      	ldr	r0, [pc, #88]	; (8001ad8 <new_line_handler+0xb4>)
 8001a80:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	dd0c      	ble.n	8001aa2 <new_line_handler+0x7e>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a98:	f107 0208 	add.w	r2, r7, #8
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	69f8      	ldr	r0, [r7, #28]
 8001aa0:	4798      	blx	r3
	print_prompt (pThis);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fb9d 	bl	80011e2 <print_prompt>
	pThis->cmdlen = 0;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3354      	adds	r3, #84	; 0x54
 8001abc:	2233      	movs	r2, #51	; 0x33
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f00c f979 	bl	800ddb8 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8001acc:	bf00      	nop
 8001ace:	3720      	adds	r7, #32
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	0800decc 	.word	0x0800decc
 8001ad8:	0800deac 	.word	0x0800deac

08001adc <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	785b      	ldrb	r3, [r3, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00d      	beq.n	8001b0a <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4619      	mov	r1, r3
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff fd4b 	bl	8001590 <escape_process>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 81e3 	beq.w	8001ec8 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8001b08:	e1de      	b.n	8001ec8 <microrl_insert_char+0x3ec>
		switch (ch) {
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	2b7e      	cmp	r3, #126	; 0x7e
 8001b10:	f200 81af 	bhi.w	8001e72 <microrl_insert_char+0x396>
 8001b14:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <microrl_insert_char+0x40>)
 8001b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1a:	bf00      	nop
 8001b1c:	08001daf 	.word	0x08001daf
 8001b20:	08001de7 	.word	0x08001de7
 8001b24:	08001e5f 	.word	0x08001e5f
 8001b28:	08001e73 	.word	0x08001e73
 8001b2c:	08001d8b 	.word	0x08001d8b
 8001b30:	08001dbf 	.word	0x08001dbf
 8001b34:	08001e73 	.word	0x08001e73
 8001b38:	08001e1f 	.word	0x08001e1f
 8001b3c:	08001d41 	.word	0x08001d41
 8001b40:	08001d19 	.word	0x08001d19
 8001b44:	08001d73 	.word	0x08001d73
 8001b48:	08001e73 	.word	0x08001e73
 8001b4c:	08001d19 	.word	0x08001d19
 8001b50:	08001e15 	.word	0x08001e15
 8001b54:	08001e73 	.word	0x08001e73
 8001b58:	08001e0b 	.word	0x08001e0b
 8001b5c:	08001e73 	.word	0x08001e73
 8001b60:	08001e3b 	.word	0x08001e3b
 8001b64:	08001e73 	.word	0x08001e73
 8001b68:	08001e73 	.word	0x08001e73
 8001b6c:	08001d57 	.word	0x08001d57
 8001b70:	08001e73 	.word	0x08001e73
 8001b74:	08001e73 	.word	0x08001e73
 8001b78:	08001e73 	.word	0x08001e73
 8001b7c:	08001e73 	.word	0x08001e73
 8001b80:	08001e73 	.word	0x08001e73
 8001b84:	08001d49 	.word	0x08001d49
 8001b88:	08001e73 	.word	0x08001e73
 8001b8c:	08001e73 	.word	0x08001e73
 8001b90:	08001e73 	.word	0x08001e73
 8001b94:	08001e73 	.word	0x08001e73
 8001b98:	08001e73 	.word	0x08001e73
 8001b9c:	08001e73 	.word	0x08001e73
 8001ba0:	08001e73 	.word	0x08001e73
 8001ba4:	08001e73 	.word	0x08001e73
 8001ba8:	08001e73 	.word	0x08001e73
 8001bac:	08001e73 	.word	0x08001e73
 8001bb0:	08001e73 	.word	0x08001e73
 8001bb4:	08001e73 	.word	0x08001e73
 8001bb8:	08001e73 	.word	0x08001e73
 8001bbc:	08001e73 	.word	0x08001e73
 8001bc0:	08001e73 	.word	0x08001e73
 8001bc4:	08001e73 	.word	0x08001e73
 8001bc8:	08001e73 	.word	0x08001e73
 8001bcc:	08001e73 	.word	0x08001e73
 8001bd0:	08001e73 	.word	0x08001e73
 8001bd4:	08001e73 	.word	0x08001e73
 8001bd8:	08001e73 	.word	0x08001e73
 8001bdc:	08001e73 	.word	0x08001e73
 8001be0:	08001e73 	.word	0x08001e73
 8001be4:	08001e73 	.word	0x08001e73
 8001be8:	08001e73 	.word	0x08001e73
 8001bec:	08001e73 	.word	0x08001e73
 8001bf0:	08001e73 	.word	0x08001e73
 8001bf4:	08001e73 	.word	0x08001e73
 8001bf8:	08001e73 	.word	0x08001e73
 8001bfc:	08001e73 	.word	0x08001e73
 8001c00:	08001e73 	.word	0x08001e73
 8001c04:	08001e73 	.word	0x08001e73
 8001c08:	08001e73 	.word	0x08001e73
 8001c0c:	08001e73 	.word	0x08001e73
 8001c10:	08001e73 	.word	0x08001e73
 8001c14:	08001e73 	.word	0x08001e73
 8001c18:	08001e73 	.word	0x08001e73
 8001c1c:	08001e73 	.word	0x08001e73
 8001c20:	08001e73 	.word	0x08001e73
 8001c24:	08001e73 	.word	0x08001e73
 8001c28:	08001e73 	.word	0x08001e73
 8001c2c:	08001e73 	.word	0x08001e73
 8001c30:	08001e73 	.word	0x08001e73
 8001c34:	08001e73 	.word	0x08001e73
 8001c38:	08001e73 	.word	0x08001e73
 8001c3c:	08001e73 	.word	0x08001e73
 8001c40:	08001e73 	.word	0x08001e73
 8001c44:	08001e73 	.word	0x08001e73
 8001c48:	08001e73 	.word	0x08001e73
 8001c4c:	08001e73 	.word	0x08001e73
 8001c50:	08001e73 	.word	0x08001e73
 8001c54:	08001e73 	.word	0x08001e73
 8001c58:	08001e73 	.word	0x08001e73
 8001c5c:	08001e73 	.word	0x08001e73
 8001c60:	08001e73 	.word	0x08001e73
 8001c64:	08001e73 	.word	0x08001e73
 8001c68:	08001e73 	.word	0x08001e73
 8001c6c:	08001e73 	.word	0x08001e73
 8001c70:	08001e73 	.word	0x08001e73
 8001c74:	08001e73 	.word	0x08001e73
 8001c78:	08001e73 	.word	0x08001e73
 8001c7c:	08001e73 	.word	0x08001e73
 8001c80:	08001e73 	.word	0x08001e73
 8001c84:	08001e73 	.word	0x08001e73
 8001c88:	08001e73 	.word	0x08001e73
 8001c8c:	08001e73 	.word	0x08001e73
 8001c90:	08001e73 	.word	0x08001e73
 8001c94:	08001e73 	.word	0x08001e73
 8001c98:	08001e73 	.word	0x08001e73
 8001c9c:	08001e73 	.word	0x08001e73
 8001ca0:	08001e73 	.word	0x08001e73
 8001ca4:	08001e73 	.word	0x08001e73
 8001ca8:	08001e73 	.word	0x08001e73
 8001cac:	08001e73 	.word	0x08001e73
 8001cb0:	08001e73 	.word	0x08001e73
 8001cb4:	08001e73 	.word	0x08001e73
 8001cb8:	08001e73 	.word	0x08001e73
 8001cbc:	08001e73 	.word	0x08001e73
 8001cc0:	08001e73 	.word	0x08001e73
 8001cc4:	08001e73 	.word	0x08001e73
 8001cc8:	08001e73 	.word	0x08001e73
 8001ccc:	08001e73 	.word	0x08001e73
 8001cd0:	08001e73 	.word	0x08001e73
 8001cd4:	08001e73 	.word	0x08001e73
 8001cd8:	08001e73 	.word	0x08001e73
 8001cdc:	08001e73 	.word	0x08001e73
 8001ce0:	08001e73 	.word	0x08001e73
 8001ce4:	08001e73 	.word	0x08001e73
 8001ce8:	08001e73 	.word	0x08001e73
 8001cec:	08001e73 	.word	0x08001e73
 8001cf0:	08001e73 	.word	0x08001e73
 8001cf4:	08001e73 	.word	0x08001e73
 8001cf8:	08001e73 	.word	0x08001e73
 8001cfc:	08001e73 	.word	0x08001e73
 8001d00:	08001e73 	.word	0x08001e73
 8001d04:	08001e73 	.word	0x08001e73
 8001d08:	08001e73 	.word	0x08001e73
 8001d0c:	08001e73 	.word	0x08001e73
 8001d10:	08001e73 	.word	0x08001e73
 8001d14:	08001e1f 	.word	0x08001e1f
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	789b      	ldrb	r3, [r3, #2]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b0d      	cmp	r3, #13
 8001d22:	d101      	bne.n	8001d28 <microrl_insert_char+0x24c>
 8001d24:	230a      	movs	r3, #10
 8001d26:	e000      	b.n	8001d2a <microrl_insert_char+0x24e>
 8001d28:	230d      	movs	r3, #13
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	f000 80c1 	beq.w	8001eb2 <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff fe73 	bl	8001a24 <new_line_handler>
				break;
 8001d3e:	e0c3      	b.n	8001ec8 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff fdc1 	bl	80018c8 <microrl_get_complite>
			break;
 8001d46:	e0bf      	b.n	8001ec8 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	705a      	strb	r2, [r3, #1]
			break;
 8001d4e:	e0bb      	b.n	8001ec8 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff fd1e 	bl	8001792 <microrl_backspace>
					while (pThis->cursor > 0) {
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	dcf7      	bgt.n	8001d50 <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d66:	461a      	mov	r2, r3
 8001d68:	2100      	movs	r1, #0
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff fb40 	bl	80013f0 <terminal_print_line>
			break;
 8001d70:	e0aa      	b.n	8001ec8 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d78:	4855      	ldr	r0, [pc, #340]	; (8001ed0 <microrl_insert_char+0x3f4>)
 8001d7a:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8001d88:	e09e      	b.n	8001ec8 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	4619      	mov	r1, r3
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff faa0 	bl	80012e0 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001dac:	e08c      	b.n	8001ec8 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff fae6 	bl	8001380 <terminal_reset_cursor>
				pThis->cursor = 0;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001dbc:	e084      	b.n	8001ec8 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	da73      	bge.n	8001eb6 <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 8001dce:	2101      	movs	r1, #1
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff fa85 	bl	80012e0 <terminal_move_cursor>
				pThis->cursor++;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001de4:	e067      	b.n	8001eb6 <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d064      	beq.n	8001eba <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fa73 	bl	80012e0 <terminal_move_cursor>
				pThis->cursor--;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e00:	1e5a      	subs	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001e08:	e057      	b.n	8001eba <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff fb8f 	bl	8001530 <hist_search>
			break;
 8001e12:	e059      	b.n	8001ec8 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 8001e14:	2101      	movs	r1, #1
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff fb8a 	bl	8001530 <hist_search>
			break;
 8001e1c:	e054      	b.n	8001ec8 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fcb7 	bl	8001792 <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e30:	461a      	mov	r2, r3
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fadc 	bl	80013f0 <terminal_print_line>
			break;
 8001e38:	e046      	b.n	8001ec8 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff f9f0 	bl	8001220 <terminal_newline>
				print_prompt (pThis);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff f9ce 	bl	80011e2 <print_prompt>
				terminal_reset_cursor (pThis);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff fa9a 	bl	8001380 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e52:	461a      	mov	r2, r3
 8001e54:	2100      	movs	r1, #0
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff faca 	bl	80013f0 <terminal_print_line>
			break;
 8001e5c:	e034      	b.n	8001ec8 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d02a      	beq.n	8001ebe <microrl_insert_char+0x3e2>
				pThis->sigint();
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e6e:	4798      	blx	r3
			break;
 8001e70:	e025      	b.n	8001ebe <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d104      	bne.n	8001e82 <microrl_insert_char+0x3a6>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d01f      	beq.n	8001ec2 <microrl_insert_char+0x3e6>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b1f      	cmp	r3, #31
 8001e86:	dd1c      	ble.n	8001ec2 <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8001e88:	463b      	mov	r3, r7
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fc0c 	bl	80016ac <microrl_insert_text>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d015      	beq.n	8001ec6 <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea0:	1e59      	subs	r1, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff faa0 	bl	80013f0 <terminal_print_line>
			break;
 8001eb0:	e009      	b.n	8001ec6 <microrl_insert_char+0x3ea>
					break;
 8001eb2:	bf00      	nop
 8001eb4:	e008      	b.n	8001ec8 <microrl_insert_char+0x3ec>
			break;
 8001eb6:	bf00      	nop
 8001eb8:	e006      	b.n	8001ec8 <microrl_insert_char+0x3ec>
			break;
 8001eba:	bf00      	nop
 8001ebc:	e004      	b.n	8001ec8 <microrl_insert_char+0x3ec>
			break;
 8001ebe:	bf00      	nop
 8001ec0:	e002      	b.n	8001ec8 <microrl_insert_char+0x3ec>
	}
 8001ec2:	bf00      	nop
 8001ec4:	e000      	b.n	8001ec8 <microrl_insert_char+0x3ec>
			break;
 8001ec6:	bf00      	nop
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	0800dec0 	.word	0x0800dec0

08001ed4 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <microrl_print_char+0x20>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	79fa      	ldrb	r2, [r7, #7]
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fdf8 	bl	8001adc <microrl_insert_char>
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000008 	.word	0x20000008

08001ef8 <print>:

void print (const char * str)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <print+0x84>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	f083 0301 	eor.w	r3, r3, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <print+0x1e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b1b      	cmp	r3, #27
 8001f14:	d02b      	beq.n	8001f6e <print+0x76>
		return;
	if (!CDC_is_ready)
 8001f16:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <print+0x88>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	f083 0301 	eor.w	r3, r3, #1
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d126      	bne.n	8001f72 <print+0x7a>
		return;
	uint16_t len = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 8001f28:	89fb      	ldrh	r3, [r7, #14]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	81fb      	strh	r3, [r7, #14]
 8001f2e:	89fb      	ldrh	r3, [r7, #14]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	4413      	add	r3, r2
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f6      	bne.n	8001f28 <print+0x30>
	uint32_t timeout = HAL_GetTick();
 8001f3a:	f000 fea7 	bl	8002c8c <HAL_GetTick>
 8001f3e:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001f40:	e006      	b.n	8001f50 <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 8001f42:	f000 fea3 	bl	8002c8c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d807      	bhi.n	8001f60 <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <print+0x8c>)
 8001f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001f56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f1      	bne.n	8001f42 <print+0x4a>
 8001f5e:	e000      	b.n	8001f62 <print+0x6a>
			break;
 8001f60:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 8001f62:	89fb      	ldrh	r3, [r7, #14]
 8001f64:	4619      	mov	r1, r3
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f00b fafc 	bl	800d564 <CDC_Transmit_FS>
 8001f6c:	e002      	b.n	8001f74 <print+0x7c>
		return;
 8001f6e:	bf00      	nop
 8001f70:	e000      	b.n	8001f74 <print+0x7c>
		return;
 8001f72:	bf00      	nop
}
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2000000c 	.word	0x2000000c
 8001f80:	200001b0 	.word	0x200001b0
 8001f84:	200026a0 	.word	0x200026a0

08001f88 <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	e010      	b.n	8001fba <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 8001f98:	490c      	ldr	r1, [pc, #48]	; (8001fcc <find_color_by_name+0x44>)
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	79fa      	ldrb	r2, [r7, #7]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d101      	bne.n	8001fb4 <find_color_by_name+0x2c>
		{
			return i;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	e006      	b.n	8001fc2 <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b10      	cmp	r3, #16
 8001fbe:	d9eb      	bls.n	8001f98 <find_color_by_name+0x10>
		}
	}
	return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	0800e558 	.word	0x0800e558

08001fd0 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ffd2 	bl	8001f88 <find_color_by_name>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a08      	ldr	r2, [pc, #32]	; (8002014 <print_color+0x44>)
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ff7e 	bl	8001ef8 <print>
	print(str);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff7b 	bl	8001ef8 <print>
	print(COLOR_NC);
 8002002:	4805      	ldr	r0, [pc, #20]	; (8002018 <print_color+0x48>)
 8002004:	f7ff ff78 	bl	8001ef8 <print>
	return 0;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	0800e558 	.word	0x0800e558
 8002018:	0800dee4 	.word	0x0800dee4

0800201c <str_length>:

int str_length(const char * str)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8002028:	e002      	b.n	8002030 <str_length+0x14>
		i++;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3301      	adds	r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f6      	bne.n	800202a <str_length+0xe>
	return i;
 800203c:	68fb      	ldr	r3, [r7, #12]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <print_help>:


int print_help(int argc, const char * const * argv)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
	print(_VER);
 8002052:	4858      	ldr	r0, [pc, #352]	; (80021b4 <print_help+0x16c>)
 8002054:	f7ff ff50 	bl	8001ef8 <print>
	print(ENDL);
 8002058:	4857      	ldr	r0, [pc, #348]	; (80021b8 <print_help+0x170>)
 800205a:	f7ff ff4d 	bl	8001ef8 <print>
	print ("Use ");
 800205e:	4857      	ldr	r0, [pc, #348]	; (80021bc <print_help+0x174>)
 8002060:	f7ff ff4a 	bl	8001ef8 <print>
	print_color("TAB", C_GREEN);
 8002064:	2105      	movs	r1, #5
 8002066:	4856      	ldr	r0, [pc, #344]	; (80021c0 <print_help+0x178>)
 8002068:	f7ff ffb2 	bl	8001fd0 <print_color>
	print(" key for completion");
 800206c:	4855      	ldr	r0, [pc, #340]	; (80021c4 <print_help+0x17c>)
 800206e:	f7ff ff43 	bl	8001ef8 <print>
	print (ENDL);
 8002072:	4851      	ldr	r0, [pc, #324]	; (80021b8 <print_help+0x170>)
 8002074:	f7ff ff40 	bl	8001ef8 <print>
	print ("Available commands:");
 8002078:	4853      	ldr	r0, [pc, #332]	; (80021c8 <print_help+0x180>)
 800207a:	f7ff ff3d 	bl	8001ef8 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	e08a      	b.n	800219a <print_help+0x152>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8002084:	4a51      	ldr	r2, [pc, #324]	; (80021cc <print_help+0x184>)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	019b      	lsls	r3, r3, #6
 800208a:	4413      	add	r3, r2
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002092:	d11b      	bne.n	80020cc <print_help+0x84>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3b01      	subs	r3, #1
 8002098:	4a4c      	ldr	r2, [pc, #304]	; (80021cc <print_help+0x184>)
 800209a:	019b      	lsls	r3, r3, #6
 800209c:	4413      	add	r3, r2
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a4:	d004      	beq.n	80020b0 <print_help+0x68>
				print_color(" aka ", C_L_PURPLE);
 80020a6:	210c      	movs	r1, #12
 80020a8:	4849      	ldr	r0, [pc, #292]	; (80021d0 <print_help+0x188>)
 80020aa:	f7ff ff91 	bl	8001fd0 <print_color>
 80020ae:	e003      	b.n	80020b8 <print_help+0x70>
			else
				print_color("/", C_L_PURPLE);
 80020b0:	210c      	movs	r1, #12
 80020b2:	4848      	ldr	r0, [pc, #288]	; (80021d4 <print_help+0x18c>)
 80020b4:	f7ff ff8c 	bl	8001fd0 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	019b      	lsls	r3, r3, #6
 80020bc:	4a43      	ldr	r2, [pc, #268]	; (80021cc <print_help+0x184>)
 80020be:	4413      	add	r3, r2
 80020c0:	3304      	adds	r3, #4
 80020c2:	210b      	movs	r1, #11
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff83 	bl	8001fd0 <print_color>
 80020ca:	e063      	b.n	8002194 <print_help+0x14c>
		}
		else
		{
			print(ENDL);
 80020cc:	483a      	ldr	r0, [pc, #232]	; (80021b8 <print_help+0x170>)
 80020ce:	f7ff ff13 	bl	8001ef8 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80020d2:	f06f 0303 	mvn.w	r3, #3
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	e005      	b.n	80020e6 <print_help+0x9e>
				print(" ");
 80020da:	483f      	ldr	r0, [pc, #252]	; (80021d8 <print_help+0x190>)
 80020dc:	f7ff ff0c 	bl	8001ef8 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	3301      	adds	r3, #1
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	4a39      	ldr	r2, [pc, #228]	; (80021cc <print_help+0x184>)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	019b      	lsls	r3, r3, #6
 80020ec:	4413      	add	r3, r2
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	dbf1      	blt.n	80020da <print_help+0x92>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	019b      	lsls	r3, r3, #6
 80020fa:	4a34      	ldr	r2, [pc, #208]	; (80021cc <print_help+0x184>)
 80020fc:	4413      	add	r3, r2
 80020fe:	1d1a      	adds	r2, r3, #4
 8002100:	4932      	ldr	r1, [pc, #200]	; (80021cc <print_help+0x184>)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	019b      	lsls	r3, r3, #6
 8002106:	440b      	add	r3, r1
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4934      	ldr	r1, [pc, #208]	; (80021dc <print_help+0x194>)
 800210c:	5ccb      	ldrb	r3, [r1, r3]
 800210e:	4619      	mov	r1, r3
 8002110:	4610      	mov	r0, r2
 8002112:	f7ff ff5d 	bl	8001fd0 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	e005      	b.n	8002128 <print_help+0xe0>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 800211c:	482e      	ldr	r0, [pc, #184]	; (80021d8 <print_help+0x190>)
 800211e:	f7ff feeb 	bl	8001ef8 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3301      	adds	r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	4a28      	ldr	r2, [pc, #160]	; (80021cc <print_help+0x184>)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	019b      	lsls	r3, r3, #6
 800212e:	4413      	add	r3, r2
 8002130:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8002132:	f1c3 040c 	rsb	r4, r3, #12
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	019b      	lsls	r3, r3, #6
 800213a:	4a24      	ldr	r2, [pc, #144]	; (80021cc <print_help+0x184>)
 800213c:	4413      	add	r3, r2
 800213e:	3304      	adds	r3, #4
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff6b 	bl	800201c <str_length>
 8002146:	4603      	mov	r3, r0
 8002148:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	429a      	cmp	r2, r3
 800214e:	dbe5      	blt.n	800211c <print_help+0xd4>
			switch (microrl_actions[i].level){
 8002150:	4a1e      	ldr	r2, [pc, #120]	; (80021cc <print_help+0x184>)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	019b      	lsls	r3, r3, #6
 8002156:	4413      	add	r3, r2
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <print_help+0x11c>
 800215e:	2b01      	cmp	r3, #1
 8002160:	d004      	beq.n	800216c <print_help+0x124>
 8002162:	e007      	b.n	8002174 <print_help+0x12c>
			case 0:
				print ("-");
 8002164:	481e      	ldr	r0, [pc, #120]	; (80021e0 <print_help+0x198>)
 8002166:	f7ff fec7 	bl	8001ef8 <print>
				break;
 800216a:	e007      	b.n	800217c <print_help+0x134>
			case 1:
				print ("^");
 800216c:	481d      	ldr	r0, [pc, #116]	; (80021e4 <print_help+0x19c>)
 800216e:	f7ff fec3 	bl	8001ef8 <print>
				break;
 8002172:	e003      	b.n	800217c <print_help+0x134>
			default:
				print ("#");
 8002174:	481c      	ldr	r0, [pc, #112]	; (80021e8 <print_help+0x1a0>)
 8002176:	f7ff febf 	bl	8001ef8 <print>
				break;
 800217a:	bf00      	nop
			}
			print (" ");
 800217c:	4816      	ldr	r0, [pc, #88]	; (80021d8 <print_help+0x190>)
 800217e:	f7ff febb 	bl	8001ef8 <print>
			print (microrl_actions[i].help_msg);
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	019b      	lsls	r3, r3, #6
 8002186:	3308      	adds	r3, #8
 8002188:	4a10      	ldr	r2, [pc, #64]	; (80021cc <print_help+0x184>)
 800218a:	4413      	add	r3, r2
 800218c:	3306      	adds	r3, #6
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff feb2 	bl	8001ef8 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	3301      	adds	r3, #1
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2b0e      	cmp	r3, #14
 800219e:	f67f af71 	bls.w	8002084 <print_help+0x3c>
		}
	}
	print(ENDL);
 80021a2:	4805      	ldr	r0, [pc, #20]	; (80021b8 <print_help+0x170>)
 80021a4:	f7ff fea8 	bl	8001ef8 <print>
	return 0;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	371c      	adds	r7, #28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd90      	pop	{r4, r7, pc}
 80021b2:	bf00      	nop
 80021b4:	0800deec 	.word	0x0800deec
 80021b8:	0800defc 	.word	0x0800defc
 80021bc:	0800df00 	.word	0x0800df00
 80021c0:	0800df08 	.word	0x0800df08
 80021c4:	0800df0c 	.word	0x0800df0c
 80021c8:	0800df20 	.word	0x0800df20
 80021cc:	0800e198 	.word	0x0800e198
 80021d0:	0800df34 	.word	0x0800df34
 80021d4:	0800df3c 	.word	0x0800df3c
 80021d8:	0800df40 	.word	0x0800df40
 80021dc:	0800e614 	.word	0x0800e614
 80021e0:	0800df44 	.word	0x0800df44
 80021e4:	0800df48 	.word	0x0800df48
 80021e8:	0800df4c 	.word	0x0800df4c

080021ec <execute>:



int execute (int argc, const char * const * argv)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 8002202:	2300      	movs	r3, #0
 8002204:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	e050      	b.n	80022ae <execute+0xc2>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	e03f      	b.n	8002292 <execute+0xa6>
		{
			tokens_found = false;
 8002212:	2300      	movs	r3, #0
 8002214:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 8002216:	4a52      	ldr	r2, [pc, #328]	; (8002360 <execute+0x174>)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	019b      	lsls	r3, r3, #6
 800221c:	4413      	add	r3, r2
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002228:	d001      	beq.n	800222e <execute+0x42>
				synonym_level = current_level; // save the synonym level
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d003      	beq.n	800223e <execute+0x52>
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	429a      	cmp	r2, r3
 800223c:	db2d      	blt.n	800229a <execute+0xae>
				break;
			if (current_level == i)
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	429a      	cmp	r2, r3
 8002244:	d101      	bne.n	800224a <execute+0x5e>
				last_main_synonym = n;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	4413      	add	r3, r2
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	019b      	lsls	r3, r3, #6
 8002258:	4941      	ldr	r1, [pc, #260]	; (8002360 <execute+0x174>)
 800225a:	440b      	add	r3, r1
 800225c:	3304      	adds	r3, #4
 800225e:	4619      	mov	r1, r3
 8002260:	4610      	mov	r0, r2
 8002262:	f7fd ff75 	bl	8000150 <strcmp>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10f      	bne.n	800228c <execute+0xa0>
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	429a      	cmp	r2, r3
 8002272:	d10b      	bne.n	800228c <execute+0xa0>
					(i == synonym_level))
			{
				tokens_found = true;
 8002274:	2301      	movs	r3, #1
 8002276:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	623a      	str	r2, [r7, #32]
 800227e:	4a38      	ldr	r2, [pc, #224]	; (8002360 <execute+0x174>)
 8002280:	019b      	lsls	r3, r3, #6
 8002282:	4413      	add	r3, r2
 8002284:	333c      	adds	r3, #60	; 0x3c
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800228a:	e007      	b.n	800229c <execute+0xb0>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	3301      	adds	r3, #1
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b0e      	cmp	r3, #14
 8002296:	d9bc      	bls.n	8002212 <execute+0x26>
 8002298:	e000      	b.n	800229c <execute+0xb0>
				break;
 800229a:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 800229c:	7efb      	ldrb	r3, [r7, #27]
 800229e:	f083 0301 	eor.w	r3, r3, #1
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <execute+0xcc>
	for (int i = 0; i < argc; i++)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	3301      	adds	r3, #1
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	dbaa      	blt.n	800220c <execute+0x20>
 80022b6:	e000      	b.n	80022ba <execute+0xce>
			break;
 80022b8:	bf00      	nop
	}

	if (func != NULL)
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <execute+0xe0>
	{
		return func(argc, argv); // function found
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	6839      	ldr	r1, [r7, #0]
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	4798      	blx	r3
 80022c8:	4603      	mov	r3, r0
 80022ca:	e045      	b.n	8002358 <execute+0x16c>
	} else if (tokens_found)
 80022cc:	7efb      	ldrb	r3, [r7, #27]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d021      	beq.n	8002316 <execute+0x12a>
	{
		print_color ("command: '", C_L_RED);
 80022d2:	210a      	movs	r1, #10
 80022d4:	4823      	ldr	r0, [pc, #140]	; (8002364 <execute+0x178>)
 80022d6:	f7ff fe7b 	bl	8001fd0 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	210a      	movs	r1, #10
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fe75 	bl	8001fd0 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 80022e6:	210a      	movs	r1, #10
 80022e8:	481f      	ldr	r0, [pc, #124]	; (8002368 <execute+0x17c>)
 80022ea:	f7ff fe71 	bl	8001fd0 <print_color>
		print(ENDL);
 80022ee:	481f      	ldr	r0, [pc, #124]	; (800236c <execute+0x180>)
 80022f0:	f7ff fe02 	bl	8001ef8 <print>
		print_color ("use '", C_NC);
 80022f4:	2100      	movs	r1, #0
 80022f6:	481e      	ldr	r0, [pc, #120]	; (8002370 <execute+0x184>)
 80022f8:	f7ff fe6a 	bl	8001fd0 <print_color>
		print_color ("?", C_GREEN);
 80022fc:	2105      	movs	r1, #5
 80022fe:	481d      	ldr	r0, [pc, #116]	; (8002374 <execute+0x188>)
 8002300:	f7ff fe66 	bl	8001fd0 <print_color>
		print_color ("' for help", C_NC);
 8002304:	2100      	movs	r1, #0
 8002306:	481c      	ldr	r0, [pc, #112]	; (8002378 <execute+0x18c>)
 8002308:	f7ff fe62 	bl	8001fd0 <print_color>
		print (ENDL);
 800230c:	4817      	ldr	r0, [pc, #92]	; (800236c <execute+0x180>)
 800230e:	f7ff fdf3 	bl	8001ef8 <print>
		return 1;
 8002312:	2301      	movs	r3, #1
 8002314:	e020      	b.n	8002358 <execute+0x16c>
	}
	else
	{
		print_color ("command: '", C_RED);
 8002316:	2109      	movs	r1, #9
 8002318:	4812      	ldr	r0, [pc, #72]	; (8002364 <execute+0x178>)
 800231a:	f7ff fe59 	bl	8001fd0 <print_color>
		print_color ((char*)argv[0], C_RED);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2109      	movs	r1, #9
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fe53 	bl	8001fd0 <print_color>
		print_color ("' not found", C_RED);
 800232a:	2109      	movs	r1, #9
 800232c:	4813      	ldr	r0, [pc, #76]	; (800237c <execute+0x190>)
 800232e:	f7ff fe4f 	bl	8001fd0 <print_color>
		print(ENDL);
 8002332:	480e      	ldr	r0, [pc, #56]	; (800236c <execute+0x180>)
 8002334:	f7ff fde0 	bl	8001ef8 <print>
		print_color ("use '", C_NC);
 8002338:	2100      	movs	r1, #0
 800233a:	480d      	ldr	r0, [pc, #52]	; (8002370 <execute+0x184>)
 800233c:	f7ff fe48 	bl	8001fd0 <print_color>
		print_color ("?", C_GREEN);
 8002340:	2105      	movs	r1, #5
 8002342:	480c      	ldr	r0, [pc, #48]	; (8002374 <execute+0x188>)
 8002344:	f7ff fe44 	bl	8001fd0 <print_color>
		print_color ("' for help", C_NC);
 8002348:	2100      	movs	r1, #0
 800234a:	480b      	ldr	r0, [pc, #44]	; (8002378 <execute+0x18c>)
 800234c:	f7ff fe40 	bl	8001fd0 <print_color>
		print (ENDL);
 8002350:	4806      	ldr	r0, [pc, #24]	; (800236c <execute+0x180>)
 8002352:	f7ff fdd1 	bl	8001ef8 <print>
		return 1;
 8002356:	2301      	movs	r3, #1

	}
}
 8002358:	4618      	mov	r0, r3
 800235a:	3728      	adds	r7, #40	; 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	0800e198 	.word	0x0800e198
 8002364:	0800df50 	.word	0x0800df50
 8002368:	0800df5c 	.word	0x0800df5c
 800236c:	0800defc 	.word	0x0800defc
 8002370:	0800df7c 	.word	0x0800df7c
 8002374:	0800df84 	.word	0x0800df84
 8002378:	0800df88 	.word	0x0800df88
 800237c:	0800df94 	.word	0x0800df94

08002380 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	; 0x30
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
	int j = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 800238e:	4b5b      	ldr	r3, [pc, #364]	; (80024fc <complet+0x17c>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d11b      	bne.n	80023d2 <complet+0x52>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 800239a:	2300      	movs	r3, #0
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
 800239e:	e014      	b.n	80023ca <complet+0x4a>
			if (microrl_actions[i].level == 0)
 80023a0:	4a57      	ldr	r2, [pc, #348]	; (8002500 <complet+0x180>)
 80023a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a4:	019b      	lsls	r3, r3, #6
 80023a6:	4413      	add	r3, r2
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10a      	bne.n	80023c4 <complet+0x44>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 80023ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023b6:	0192      	lsls	r2, r2, #6
 80023b8:	4951      	ldr	r1, [pc, #324]	; (8002500 <complet+0x180>)
 80023ba:	440a      	add	r2, r1
 80023bc:	3204      	adds	r2, #4
 80023be:	494f      	ldr	r1, [pc, #316]	; (80024fc <complet+0x17c>)
 80023c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	3301      	adds	r3, #1
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023cc:	2b0e      	cmp	r3, #14
 80023ce:	d9e7      	bls.n	80023a0 <complet+0x20>
 80023d0:	e08a      	b.n	80024e8 <complet+0x168>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023d8:	3b01      	subs	r3, #1
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 80023ec:	2300      	movs	r3, #0
 80023ee:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	e072      	b.n	80024dc <complet+0x15c>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	e061      	b.n	80024c0 <complet+0x140>
			{
				tokens_found = false;
 80023fc:	2300      	movs	r3, #0
 80023fe:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 8002400:	4a3f      	ldr	r2, [pc, #252]	; (8002500 <complet+0x180>)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	019b      	lsls	r3, r3, #6
 8002406:	4413      	add	r3, r2
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002412:	d001      	beq.n	8002418 <complet+0x98>
					synonym_level = current_level; // save the synonym level
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241e:	d003      	beq.n	8002428 <complet+0xa8>
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	429a      	cmp	r2, r3
 8002426:	db4f      	blt.n	80024c8 <complet+0x148>
					break;
				if (current_level == i)
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	429a      	cmp	r2, r3
 800242e:	d101      	bne.n	8002434 <complet+0xb4>
					last_main_synonym = n;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	429a      	cmp	r2, r3
 800243c:	d122      	bne.n	8002484 <complet+0x104>
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	019b      	lsls	r3, r3, #6
 8002442:	4a2f      	ldr	r2, [pc, #188]	; (8002500 <complet+0x180>)
 8002444:	4413      	add	r3, r2
 8002446:	3304      	adds	r3, #4
 8002448:	6939      	ldr	r1, [r7, #16]
 800244a:	4618      	mov	r0, r3
 800244c:	f00b fcbc 	bl	800ddc8 <strstr>
 8002450:	4602      	mov	r2, r0
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	019b      	lsls	r3, r3, #6
 8002456:	492a      	ldr	r1, [pc, #168]	; (8002500 <complet+0x180>)
 8002458:	440b      	add	r3, r1
 800245a:	3304      	adds	r3, #4
 800245c:	429a      	cmp	r2, r3
 800245e:	d111      	bne.n	8002484 <complet+0x104>
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	429a      	cmp	r2, r3
 8002466:	d10d      	bne.n	8002484 <complet+0x104>
										(i == synonym_level))
				{
					tokens_found = true;
 8002468:	2301      	movs	r3, #1
 800246a:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	0192      	lsls	r2, r2, #6
 8002476:	4922      	ldr	r1, [pc, #136]	; (8002500 <complet+0x180>)
 8002478:	440a      	add	r2, r1
 800247a:	3204      	adds	r2, #4
 800247c:	491f      	ldr	r1, [pc, #124]	; (80024fc <complet+0x17c>)
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002482:	e01a      	b.n	80024ba <complet+0x13a>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	4413      	add	r3, r2
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	019b      	lsls	r3, r3, #6
 8002492:	491b      	ldr	r1, [pc, #108]	; (8002500 <complet+0x180>)
 8002494:	440b      	add	r3, r1
 8002496:	3304      	adds	r3, #4
 8002498:	4619      	mov	r1, r3
 800249a:	4610      	mov	r0, r2
 800249c:	f7fd fe58 	bl	8000150 <strcmp>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <complet+0x13a>
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d105      	bne.n	80024ba <complet+0x13a>
				{
					last_main_synonym++;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	3301      	adds	r3, #1
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 80024b4:	2301      	movs	r3, #1
 80024b6:	77fb      	strb	r3, [r7, #31]
					break;
 80024b8:	e007      	b.n	80024ca <complet+0x14a>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	3301      	adds	r3, #1
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b0e      	cmp	r3, #14
 80024c4:	d99a      	bls.n	80023fc <complet+0x7c>
 80024c6:	e000      	b.n	80024ca <complet+0x14a>
					break;
 80024c8:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 80024ca:	7ffb      	ldrb	r3, [r7, #31]
 80024cc:	f083 0301 	eor.w	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d107      	bne.n	80024e6 <complet+0x166>
		for (int i = 0; i < argc; i++)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	3301      	adds	r3, #1
 80024da:	61bb      	str	r3, [r7, #24]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	db88      	blt.n	80023f6 <complet+0x76>
 80024e4:	e000      	b.n	80024e8 <complet+0x168>
				break;
 80024e6:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 80024e8:	4a04      	ldr	r2, [pc, #16]	; (80024fc <complet+0x17c>)
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	2100      	movs	r1, #0
 80024ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 80024f2:	4b02      	ldr	r3, [pc, #8]	; (80024fc <complet+0x17c>)
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3730      	adds	r7, #48	; 0x30
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20002498 	.word	0x20002498
 8002500:	0800e198 	.word	0x0800e198

08002504 <sigint>:
#endif


void sigint (void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <sigint+0x48>)
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]


	print (ENDL);
 8002510:	480f      	ldr	r0, [pc, #60]	; (8002550 <sigint+0x4c>)
 8002512:	f7ff fcf1 	bl	8001ef8 <print>
	print ("^C catched!");
 8002516:	480f      	ldr	r0, [pc, #60]	; (8002554 <sigint+0x50>)
 8002518:	f7ff fcee 	bl	8001ef8 <print>
	int i = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 8002520:	e009      	b.n	8002536 <sigint+0x32>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 8002522:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <sigint+0x54>)
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	4a08      	ldr	r2, [pc, #32]	; (8002550 <sigint+0x4c>)
 800252e:	5cd3      	ldrb	r3, [r2, r3]
 8002530:	4619      	mov	r1, r3
 8002532:	f7ff fad3 	bl	8001adc <microrl_insert_char>
	while (ENTER[i])
 8002536:	4a06      	ldr	r2, [pc, #24]	; (8002550 <sigint+0x4c>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4413      	add	r3, r2
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1ef      	bne.n	8002522 <sigint+0x1e>
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200001b1 	.word	0x200001b1
 8002550:	0800defc 	.word	0x0800defc
 8002554:	0800dfa0 	.word	0x0800dfa0
 8002558:	20000008 	.word	0x20000008

0800255c <init_microrl>:

void init_microrl(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <init_microrl+0x38>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	490c      	ldr	r1, [pc, #48]	; (8002598 <init_microrl+0x3c>)
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe ff7a 	bl	8001460 <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <init_microrl+0x38>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	490a      	ldr	r1, [pc, #40]	; (800259c <init_microrl+0x40>)
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe ffc0 	bl	80014f8 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <init_microrl+0x38>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4908      	ldr	r1, [pc, #32]	; (80025a0 <init_microrl+0x44>)
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe ffac 	bl	80014dc <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <init_microrl+0x38>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4906      	ldr	r1, [pc, #24]	; (80025a4 <init_microrl+0x48>)
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe ffc2 	bl	8001514 <microrl_set_sigint_callback>
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000008 	.word	0x20000008
 8002598:	08001ef9 	.word	0x08001ef9
 800259c:	080021ed 	.word	0x080021ed
 80025a0:	08002381 	.word	0x08002381
 80025a4:	08002505 	.word	0x08002505

080025a8 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 80025b2:	4805      	ldr	r0, [pc, #20]	; (80025c8 <clear_screen+0x20>)
 80025b4:	f7ff fca0 	bl	8001ef8 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 80025b8:	4804      	ldr	r0, [pc, #16]	; (80025cc <clear_screen+0x24>)
 80025ba:	f7ff fc9d 	bl	8001ef8 <print>
	return 0;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	0800dfac 	.word	0x0800dfac
 80025cc:	0800dfb4 	.word	0x0800dfb4

080025d0 <set_CDC_ready>:


void set_CDC_ready(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <set_CDC_ready+0x14>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	200001b0 	.word	0x200001b0

080025e8 <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <color_toggle+0x30>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	f083 0301 	eor.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf14      	ite	ne
 8002600:	2301      	movne	r3, #1
 8002602:	2300      	moveq	r3, #0
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b04      	ldr	r3, [pc, #16]	; (8002618 <color_toggle+0x30>)
 8002608:	701a      	strb	r2, [r3, #0]
	return 0;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	2000000c 	.word	0x2000000c

0800261c <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
	color_out = 1;
 8002626:	4b07      	ldr	r3, [pc, #28]	; (8002644 <color_on+0x28>)
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 800262c:	2105      	movs	r1, #5
 800262e:	4806      	ldr	r0, [pc, #24]	; (8002648 <color_on+0x2c>)
 8002630:	f7ff fcce 	bl	8001fd0 <print_color>
	print(ENDL);
 8002634:	4805      	ldr	r0, [pc, #20]	; (800264c <color_on+0x30>)
 8002636:	f7ff fc5f 	bl	8001ef8 <print>
	return 0;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	2000000c 	.word	0x2000000c
 8002648:	0800dfb8 	.word	0x0800dfb8
 800264c:	0800defc 	.word	0x0800defc

08002650 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
	color_out = 0;
 800265a:	4b07      	ldr	r3, [pc, #28]	; (8002678 <color_off+0x28>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8002660:	4806      	ldr	r0, [pc, #24]	; (800267c <color_off+0x2c>)
 8002662:	f7ff fc49 	bl	8001ef8 <print>
	print(ENDL);
 8002666:	4806      	ldr	r0, [pc, #24]	; (8002680 <color_off+0x30>)
 8002668:	f7ff fc46 	bl	8001ef8 <print>
	return 0;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	2000000c 	.word	0x2000000c
 800267c:	0800dfcc 	.word	0x0800dfcc
 8002680:	0800defc 	.word	0x0800defc

08002684 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
	if (color_out)
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <color_show+0x34>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d004      	beq.n	80026a0 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8002696:	2105      	movs	r1, #5
 8002698:	4808      	ldr	r0, [pc, #32]	; (80026bc <color_show+0x38>)
 800269a:	f7ff fc99 	bl	8001fd0 <print_color>
 800269e:	e002      	b.n	80026a6 <color_show+0x22>
	else
		print ("Color output is OFF");
 80026a0:	4807      	ldr	r0, [pc, #28]	; (80026c0 <color_show+0x3c>)
 80026a2:	f7ff fc29 	bl	8001ef8 <print>
	print(ENDL);
 80026a6:	4807      	ldr	r0, [pc, #28]	; (80026c4 <color_show+0x40>)
 80026a8:	f7ff fc26 	bl	8001ef8 <print>
	return 0;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2000000c 	.word	0x2000000c
 80026bc:	0800dfb8 	.word	0x0800dfb8
 80026c0:	0800dfcc 	.word	0x0800dfcc
 80026c4:	0800defc 	.word	0x0800defc

080026c8 <nema_toggle>:


int nema_toggle 	(int argc, const char * const * argv)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
	nema_out ^= 1;
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <nema_toggle+0x30>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <nema_toggle+0x30>)
 80026e8:	701a      	strb	r2, [r3, #0]
	return 0;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	200001b1 	.word	0x200001b1

080026fc <nema_on>:

int nema_on 		(int argc, const char * const * argv)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
	nema_out = 1;
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <nema_on+0x28>)
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]
	print_color ("NEMA output is ON", C_GREEN);
 800270c:	2105      	movs	r1, #5
 800270e:	4806      	ldr	r0, [pc, #24]	; (8002728 <nema_on+0x2c>)
 8002710:	f7ff fc5e 	bl	8001fd0 <print_color>
	print(ENDL);
 8002714:	4805      	ldr	r0, [pc, #20]	; (800272c <nema_on+0x30>)
 8002716:	f7ff fbef 	bl	8001ef8 <print>
	return 0;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	200001b1 	.word	0x200001b1
 8002728:	0800dfe0 	.word	0x0800dfe0
 800272c:	0800defc 	.word	0x0800defc

08002730 <nema_off>:

int nema_off 		(int argc, const char * const * argv)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
	nema_out = 0;
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <nema_off+0x28>)
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
	print ("NEM output is OFF");
 8002740:	4806      	ldr	r0, [pc, #24]	; (800275c <nema_off+0x2c>)
 8002742:	f7ff fbd9 	bl	8001ef8 <print>
	print(ENDL);
 8002746:	4806      	ldr	r0, [pc, #24]	; (8002760 <nema_off+0x30>)
 8002748:	f7ff fbd6 	bl	8001ef8 <print>
	return 0;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200001b1 	.word	0x200001b1
 800275c:	0800dff4 	.word	0x0800dff4
 8002760:	0800defc 	.word	0x0800defc

08002764 <vfd>:

int vfd 		(int argc, const char * const * argv)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
	uint32_t dig = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
	char * pchar = argv[1];
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	60fb      	str	r3, [r7, #12]
	while (*pchar)
 8002778:	e00e      	b.n	8002798 <vfd+0x34>
	{
		dig *= 10;
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	60bb      	str	r3, [r7, #8]
		dig += *(pchar++) - '0';
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	60fa      	str	r2, [r7, #12]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	3b30      	subs	r3, #48	; 0x30
 8002790:	461a      	mov	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4413      	add	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]
	while (*pchar)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1ec      	bne.n	800277a <vfd+0x16>
	}
	dig = dig;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	60bb      	str	r3, [r7, #8]
	xQueueSendToBack(qVFDHandle, &dig, 100);
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <vfd+0x5c>)
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	f107 0108 	add.w	r1, r7, #8
 80027ac:	2300      	movs	r3, #0
 80027ae:	2264      	movs	r2, #100	; 0x64
 80027b0:	f008 faaa 	bl	800ad08 <xQueueGenericSend>
	return 0;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	2000248c 	.word	0x2000248c

080027c4 <show_encoder>:


int show_encoder (int argc, const char * const * argv)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]

	uint32_t buf = encoder_value;
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <show_encoder+0x78>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	617b      	str	r3, [r7, #20]
	char str [8];

	for (int i = 0; i < 5; i++)
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	e01d      	b.n	8002816 <show_encoder+0x52>
	{
		str[4 - i] = buf % 10 + '0';
 80027da:	6979      	ldr	r1, [r7, #20]
 80027dc:	4b18      	ldr	r3, [pc, #96]	; (8002840 <show_encoder+0x7c>)
 80027de:	fba3 2301 	umull	r2, r3, r3, r1
 80027e2:	08da      	lsrs	r2, r3, #3
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	1aca      	subs	r2, r1, r3
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f1c3 0304 	rsb	r3, r3, #4
 80027f6:	3230      	adds	r2, #48	; 0x30
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f107 0118 	add.w	r1, r7, #24
 80027fe:	440b      	add	r3, r1
 8002800:	f803 2c10 	strb.w	r2, [r3, #-16]
		buf /= 10;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <show_encoder+0x7c>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	08db      	lsrs	r3, r3, #3
 800280e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 5; i++)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	3301      	adds	r3, #1
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b04      	cmp	r3, #4
 800281a:	ddde      	ble.n	80027da <show_encoder+0x16>
	}
	str[5] = '\r';
 800281c:	230d      	movs	r3, #13
 800281e:	737b      	strb	r3, [r7, #13]
	str[6] = '\n';
 8002820:	230a      	movs	r3, #10
 8002822:	73bb      	strb	r3, [r7, #14]
	str[7] = '\0';
 8002824:	2300      	movs	r3, #0
 8002826:	73fb      	strb	r3, [r7, #15]
	print(str);
 8002828:	f107 0308 	add.w	r3, r7, #8
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fb63 	bl	8001ef8 <print>
	return 0;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	200001ac 	.word	0x200001ac
 8002840:	cccccccd 	.word	0xcccccccd

08002844 <get_nema>:


bool get_nema(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
	return nema_out;
 8002848:	4b02      	ldr	r3, [pc, #8]	; (8002854 <get_nema+0x10>)
 800284a:	781b      	ldrb	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	200001b1 	.word	0x200001b1

08002858 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <MX_SPI2_Init+0x64>)
 800285e:	4a18      	ldr	r2, [pc, #96]	; (80028c0 <MX_SPI2_Init+0x68>)
 8002860:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002862:	4b16      	ldr	r3, [pc, #88]	; (80028bc <MX_SPI2_Init+0x64>)
 8002864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002868:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800286a:	4b14      	ldr	r3, [pc, #80]	; (80028bc <MX_SPI2_Init+0x64>)
 800286c:	2200      	movs	r2, #0
 800286e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <MX_SPI2_Init+0x64>)
 8002872:	2200      	movs	r2, #0
 8002874:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <MX_SPI2_Init+0x64>)
 8002878:	2202      	movs	r2, #2
 800287a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <MX_SPI2_Init+0x64>)
 800287e:	2201      	movs	r2, #1
 8002880:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <MX_SPI2_Init+0x64>)
 8002884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002888:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <MX_SPI2_Init+0x64>)
 800288c:	2218      	movs	r2, #24
 800288e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002890:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <MX_SPI2_Init+0x64>)
 8002892:	2280      	movs	r2, #128	; 0x80
 8002894:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <MX_SPI2_Init+0x64>)
 8002898:	2200      	movs	r2, #0
 800289a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800289c:	4b07      	ldr	r3, [pc, #28]	; (80028bc <MX_SPI2_Init+0x64>)
 800289e:	2200      	movs	r2, #0
 80028a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <MX_SPI2_Init+0x64>)
 80028a4:	220a      	movs	r2, #10
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028a8:	4804      	ldr	r0, [pc, #16]	; (80028bc <MX_SPI2_Init+0x64>)
 80028aa:	f002 ff3f 	bl	800572c <HAL_SPI_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80028b4:	f7fe fa84 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20002578 	.word	0x20002578
 80028c0:	40003800 	.word	0x40003800

080028c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <HAL_SPI_MspInit+0x8c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d131      	bne.n	8002948 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_SPI_MspInit+0x90>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	4a1a      	ldr	r2, [pc, #104]	; (8002954 <HAL_SPI_MspInit+0x90>)
 80028ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ee:	61d3      	str	r3, [r2, #28]
 80028f0:	4b18      	ldr	r3, [pc, #96]	; (8002954 <HAL_SPI_MspInit+0x90>)
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fc:	4b15      	ldr	r3, [pc, #84]	; (8002954 <HAL_SPI_MspInit+0x90>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <HAL_SPI_MspInit+0x90>)
 8002902:	f043 0308 	orr.w	r3, r3, #8
 8002906:	6193      	str	r3, [r2, #24]
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_SPI_MspInit+0x90>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002914:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002918:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800291e:	2303      	movs	r3, #3
 8002920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002922:	f107 0310 	add.w	r3, r7, #16
 8002926:	4619      	mov	r1, r3
 8002928:	480b      	ldr	r0, [pc, #44]	; (8002958 <HAL_SPI_MspInit+0x94>)
 800292a:	f000 fb49 	bl	8002fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800292e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293c:	f107 0310 	add.w	r3, r7, #16
 8002940:	4619      	mov	r1, r3
 8002942:	4805      	ldr	r0, [pc, #20]	; (8002958 <HAL_SPI_MspInit+0x94>)
 8002944:	f000 fb3c 	bl	8002fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002948:	bf00      	nop
 800294a:	3720      	adds	r7, #32
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40003800 	.word	0x40003800
 8002954:	40021000 	.word	0x40021000
 8002958:	40010c00 	.word	0x40010c00

0800295c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_MspInit+0x68>)
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <HAL_MspInit+0x68>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6193      	str	r3, [r2, #24]
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_MspInit+0x68>)
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_MspInit+0x68>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4a11      	ldr	r2, [pc, #68]	; (80029c4 <HAL_MspInit+0x68>)
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002984:	61d3      	str	r3, [r2, #28]
 8002986:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <HAL_MspInit+0x68>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002992:	2200      	movs	r2, #0
 8002994:	210f      	movs	r1, #15
 8002996:	f06f 0001 	mvn.w	r0, #1
 800299a:	f000 fa36 	bl	8002e0a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_MspInit+0x6c>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <HAL_MspInit+0x6c>)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40010000 	.word	0x40010000

080029cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08c      	sub	sp, #48	; 0x30
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80029dc:	2200      	movs	r2, #0
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	2019      	movs	r0, #25
 80029e2:	f000 fa12 	bl	8002e0a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80029e6:	2019      	movs	r0, #25
 80029e8:	f000 fa2b 	bl	8002e42 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80029ec:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <HAL_InitTick+0x9c>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	4a1d      	ldr	r2, [pc, #116]	; (8002a68 <HAL_InitTick+0x9c>)
 80029f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029f6:	6193      	str	r3, [r2, #24]
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_InitTick+0x9c>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a04:	f107 0210 	add.w	r2, r7, #16
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f002 fd88 	bl	8005524 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002a14:	f002 fd72 	bl	80054fc <HAL_RCC_GetPCLK2Freq>
 8002a18:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1c:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <HAL_InitTick+0xa0>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	0c9b      	lsrs	r3, r3, #18
 8002a24:	3b01      	subs	r3, #1
 8002a26:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_InitTick+0xa4>)
 8002a2a:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <HAL_InitTick+0xa8>)
 8002a2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <HAL_InitTick+0xa4>)
 8002a30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a34:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002a36:	4a0e      	ldr	r2, [pc, #56]	; (8002a70 <HAL_InitTick+0xa4>)
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <HAL_InitTick+0xa4>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_InitTick+0xa4>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002a48:	4809      	ldr	r0, [pc, #36]	; (8002a70 <HAL_InitTick+0xa4>)
 8002a4a:	f003 f8d5 	bl	8005bf8 <HAL_TIM_Base_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d104      	bne.n	8002a5e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002a54:	4806      	ldr	r0, [pc, #24]	; (8002a70 <HAL_InitTick+0xa4>)
 8002a56:	f003 f927 	bl	8005ca8 <HAL_TIM_Base_Start_IT>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	e000      	b.n	8002a60 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3730      	adds	r7, #48	; 0x30
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	431bde83 	.word	0x431bde83
 8002a70:	200025d0 	.word	0x200025d0
 8002a74:	40012c00 	.word	0x40012c00

08002a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <NMI_Handler+0x4>

08002a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a82:	e7fe      	b.n	8002a82 <HardFault_Handler+0x4>

08002a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a88:	e7fe      	b.n	8002a88 <MemManage_Handler+0x4>

08002a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a8e:	e7fe      	b.n	8002a8e <BusFault_Handler+0x4>

08002a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <UsageFault_Handler+0x4>

08002a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr

08002aa2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f000 fc56 	bl	8003358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002ab6:	f000 fda2 	bl	80035fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20003334 	.word	0x20003334

08002ac4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <TIM1_UP_IRQHandler+0x10>)
 8002aca:	f003 f93f 	bl	8005d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200025d0 	.word	0x200025d0

08002ad8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <USART2_IRQHandler+0x10>)
 8002ade:	f003 fb53 	bl	8006188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20002618 	.word	0x20002618

08002aec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002afe:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <MX_USART2_UART_Init+0x50>)
 8002b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002b02:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b16:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b1e:	220c      	movs	r2, #12
 8002b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b2e:	4805      	ldr	r0, [pc, #20]	; (8002b44 <MX_USART2_UART_Init+0x4c>)
 8002b30:	f003 faac 	bl	800608c <HAL_UART_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b3a:	f7fe f941 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20002618 	.word	0x20002618
 8002b48:	40004400 	.word	0x40004400

08002b4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b54:	f107 0310 	add.w	r3, r7, #16
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <HAL_UART_MspInit+0x98>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d137      	bne.n	8002bdc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b6c:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <HAL_UART_MspInit+0x9c>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	4a1d      	ldr	r2, [pc, #116]	; (8002be8 <HAL_UART_MspInit+0x9c>)
 8002b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b76:	61d3      	str	r3, [r2, #28]
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <HAL_UART_MspInit+0x9c>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b84:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <HAL_UART_MspInit+0x9c>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <HAL_UART_MspInit+0x9c>)
 8002b8a:	f043 0304 	orr.w	r3, r3, #4
 8002b8e:	6193      	str	r3, [r2, #24]
 8002b90:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <HAL_UART_MspInit+0x9c>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba8:	f107 0310 	add.w	r3, r7, #16
 8002bac:	4619      	mov	r1, r3
 8002bae:	480f      	ldr	r0, [pc, #60]	; (8002bec <HAL_UART_MspInit+0xa0>)
 8002bb0:	f000 fa06 	bl	8002fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bb4:	2308      	movs	r3, #8
 8002bb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc0:	f107 0310 	add.w	r3, r7, #16
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4809      	ldr	r0, [pc, #36]	; (8002bec <HAL_UART_MspInit+0xa0>)
 8002bc8:	f000 f9fa 	bl	8002fc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2105      	movs	r1, #5
 8002bd0:	2026      	movs	r0, #38	; 0x26
 8002bd2:	f000 f91a 	bl	8002e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bd6:	2026      	movs	r0, #38	; 0x26
 8002bd8:	f000 f933 	bl	8002e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bdc:	bf00      	nop
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40004400 	.word	0x40004400
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40010800 	.word	0x40010800

08002bf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bf0:	480c      	ldr	r0, [pc, #48]	; (8002c24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bf2:	490d      	ldr	r1, [pc, #52]	; (8002c28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf8:	e002      	b.n	8002c00 <LoopCopyDataInit>

08002bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfe:	3304      	adds	r3, #4

08002c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c04:	d3f9      	bcc.n	8002bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c08:	4c0a      	ldr	r4, [pc, #40]	; (8002c34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c0c:	e001      	b.n	8002c12 <LoopFillZerobss>

08002c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c10:	3204      	adds	r2, #4

08002c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c14:	d3fb      	bcc.n	8002c0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c16:	f7ff ff69 	bl	8002aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c1a:	f00b f881 	bl	800dd20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c1e:	f7fe f84f 	bl	8000cc0 <main>
  bx lr
 8002c22:	4770      	bx	lr
  ldr r0, =_sdata
 8002c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c28:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8002c2c:	0800e638 	.word	0x0800e638
  ldr r2, =_sbss
 8002c30:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8002c34:	20003620 	.word	0x20003620

08002c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c38:	e7fe      	b.n	8002c38 <ADC1_2_IRQHandler>
	...

08002c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_Init+0x28>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <HAL_Init+0x28>)
 8002c46:	f043 0310 	orr.w	r3, r3, #16
 8002c4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c4c:	2003      	movs	r0, #3
 8002c4e:	f000 f8d1 	bl	8002df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c52:	2000      	movs	r0, #0
 8002c54:	f7ff feba 	bl	80029cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c58:	f7ff fe80 	bl	800295c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40022000 	.word	0x40022000

08002c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_IncTick+0x1c>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_IncTick+0x20>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4413      	add	r3, r2
 8002c78:	4a03      	ldr	r2, [pc, #12]	; (8002c88 <HAL_IncTick+0x20>)
 8002c7a:	6013      	str	r3, [r2, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	20000018 	.word	0x20000018
 8002c88:	2000265c 	.word	0x2000265c

08002c8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c90:	4b02      	ldr	r3, [pc, #8]	; (8002c9c <HAL_GetTick+0x10>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr
 8002c9c:	2000265c 	.word	0x2000265c

08002ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd2:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	60d3      	str	r3, [r2, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <__NVIC_GetPriorityGrouping+0x18>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	f003 0307 	and.w	r3, r3, #7
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	db0b      	blt.n	8002d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	f003 021f 	and.w	r2, r3, #31
 8002d1c:	4906      	ldr	r1, [pc, #24]	; (8002d38 <__NVIC_EnableIRQ+0x34>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2001      	movs	r0, #1
 8002d26:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	e000e100 	.word	0xe000e100

08002d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	db0a      	blt.n	8002d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	490c      	ldr	r1, [pc, #48]	; (8002d88 <__NVIC_SetPriority+0x4c>)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	0112      	lsls	r2, r2, #4
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d64:	e00a      	b.n	8002d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4908      	ldr	r1, [pc, #32]	; (8002d8c <__NVIC_SetPriority+0x50>)
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	3b04      	subs	r3, #4
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	440b      	add	r3, r1
 8002d7a:	761a      	strb	r2, [r3, #24]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	e000e100 	.word	0xe000e100
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	; 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f1c3 0307 	rsb	r3, r3, #7
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	bf28      	it	cs
 8002dae:	2304      	movcs	r3, #4
 8002db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3304      	adds	r3, #4
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d902      	bls.n	8002dc0 <NVIC_EncodePriority+0x30>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3b03      	subs	r3, #3
 8002dbe:	e000      	b.n	8002dc2 <NVIC_EncodePriority+0x32>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	4313      	orrs	r3, r2
         );
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3724      	adds	r7, #36	; 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff ff4f 	bl	8002ca0 <__NVIC_SetPriorityGrouping>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b086      	sub	sp, #24
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e1c:	f7ff ff64 	bl	8002ce8 <__NVIC_GetPriorityGrouping>
 8002e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	6978      	ldr	r0, [r7, #20]
 8002e28:	f7ff ffb2 	bl	8002d90 <NVIC_EncodePriority>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e32:	4611      	mov	r1, r2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ff81 	bl	8002d3c <__NVIC_SetPriority>
}
 8002e3a:	bf00      	nop
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	4603      	mov	r3, r0
 8002e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff57 	bl	8002d04 <__NVIC_EnableIRQ>
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b085      	sub	sp, #20
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d008      	beq.n	8002e86 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2204      	movs	r2, #4
 8002e78:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e020      	b.n	8002ec8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 020e 	bic.w	r2, r2, #14
 8002e94:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0201 	bic.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eae:	2101      	movs	r1, #1
 8002eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
	...

08002ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d005      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2204      	movs	r2, #4
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	e051      	b.n	8002f9a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 020e 	bic.w	r2, r2, #14
 8002f04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <HAL_DMA_Abort_IT+0xd0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d029      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xa0>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a20      	ldr	r2, [pc, #128]	; (8002fa8 <HAL_DMA_Abort_IT+0xd4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d022      	beq.n	8002f70 <HAL_DMA_Abort_IT+0x9c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1f      	ldr	r2, [pc, #124]	; (8002fac <HAL_DMA_Abort_IT+0xd8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d01a      	beq.n	8002f6a <HAL_DMA_Abort_IT+0x96>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1d      	ldr	r2, [pc, #116]	; (8002fb0 <HAL_DMA_Abort_IT+0xdc>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d012      	beq.n	8002f64 <HAL_DMA_Abort_IT+0x90>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <HAL_DMA_Abort_IT+0xe0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00a      	beq.n	8002f5e <HAL_DMA_Abort_IT+0x8a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a1a      	ldr	r2, [pc, #104]	; (8002fb8 <HAL_DMA_Abort_IT+0xe4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d102      	bne.n	8002f58 <HAL_DMA_Abort_IT+0x84>
 8002f52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f56:	e00e      	b.n	8002f76 <HAL_DMA_Abort_IT+0xa2>
 8002f58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f5c:	e00b      	b.n	8002f76 <HAL_DMA_Abort_IT+0xa2>
 8002f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f62:	e008      	b.n	8002f76 <HAL_DMA_Abort_IT+0xa2>
 8002f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f68:	e005      	b.n	8002f76 <HAL_DMA_Abort_IT+0xa2>
 8002f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f6e:	e002      	b.n	8002f76 <HAL_DMA_Abort_IT+0xa2>
 8002f70:	2310      	movs	r3, #16
 8002f72:	e000      	b.n	8002f76 <HAL_DMA_Abort_IT+0xa2>
 8002f74:	2301      	movs	r3, #1
 8002f76:	4a11      	ldr	r2, [pc, #68]	; (8002fbc <HAL_DMA_Abort_IT+0xe8>)
 8002f78:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	4798      	blx	r3
    } 
  }
  return status;
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40020008 	.word	0x40020008
 8002fa8:	4002001c 	.word	0x4002001c
 8002fac:	40020030 	.word	0x40020030
 8002fb0:	40020044 	.word	0x40020044
 8002fb4:	40020058 	.word	0x40020058
 8002fb8:	4002006c 	.word	0x4002006c
 8002fbc:	40020000 	.word	0x40020000

08002fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b08b      	sub	sp, #44	; 0x2c
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fd2:	e169      	b.n	80032a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	f040 8158 	bne.w	80032a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4a9a      	ldr	r2, [pc, #616]	; (8003260 <HAL_GPIO_Init+0x2a0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d05e      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
 8002ffc:	4a98      	ldr	r2, [pc, #608]	; (8003260 <HAL_GPIO_Init+0x2a0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d875      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 8003002:	4a98      	ldr	r2, [pc, #608]	; (8003264 <HAL_GPIO_Init+0x2a4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d058      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
 8003008:	4a96      	ldr	r2, [pc, #600]	; (8003264 <HAL_GPIO_Init+0x2a4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d86f      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 800300e:	4a96      	ldr	r2, [pc, #600]	; (8003268 <HAL_GPIO_Init+0x2a8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d052      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
 8003014:	4a94      	ldr	r2, [pc, #592]	; (8003268 <HAL_GPIO_Init+0x2a8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d869      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 800301a:	4a94      	ldr	r2, [pc, #592]	; (800326c <HAL_GPIO_Init+0x2ac>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d04c      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
 8003020:	4a92      	ldr	r2, [pc, #584]	; (800326c <HAL_GPIO_Init+0x2ac>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d863      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 8003026:	4a92      	ldr	r2, [pc, #584]	; (8003270 <HAL_GPIO_Init+0x2b0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d046      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
 800302c:	4a90      	ldr	r2, [pc, #576]	; (8003270 <HAL_GPIO_Init+0x2b0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d85d      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 8003032:	2b12      	cmp	r3, #18
 8003034:	d82a      	bhi.n	800308c <HAL_GPIO_Init+0xcc>
 8003036:	2b12      	cmp	r3, #18
 8003038:	d859      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 800303a:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <HAL_GPIO_Init+0x80>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	080030bb 	.word	0x080030bb
 8003044:	08003095 	.word	0x08003095
 8003048:	080030a7 	.word	0x080030a7
 800304c:	080030e9 	.word	0x080030e9
 8003050:	080030ef 	.word	0x080030ef
 8003054:	080030ef 	.word	0x080030ef
 8003058:	080030ef 	.word	0x080030ef
 800305c:	080030ef 	.word	0x080030ef
 8003060:	080030ef 	.word	0x080030ef
 8003064:	080030ef 	.word	0x080030ef
 8003068:	080030ef 	.word	0x080030ef
 800306c:	080030ef 	.word	0x080030ef
 8003070:	080030ef 	.word	0x080030ef
 8003074:	080030ef 	.word	0x080030ef
 8003078:	080030ef 	.word	0x080030ef
 800307c:	080030ef 	.word	0x080030ef
 8003080:	080030ef 	.word	0x080030ef
 8003084:	0800309d 	.word	0x0800309d
 8003088:	080030b1 	.word	0x080030b1
 800308c:	4a79      	ldr	r2, [pc, #484]	; (8003274 <HAL_GPIO_Init+0x2b4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003092:	e02c      	b.n	80030ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	623b      	str	r3, [r7, #32]
          break;
 800309a:	e029      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	3304      	adds	r3, #4
 80030a2:	623b      	str	r3, [r7, #32]
          break;
 80030a4:	e024      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	3308      	adds	r3, #8
 80030ac:	623b      	str	r3, [r7, #32]
          break;
 80030ae:	e01f      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	330c      	adds	r3, #12
 80030b6:	623b      	str	r3, [r7, #32]
          break;
 80030b8:	e01a      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030c2:	2304      	movs	r3, #4
 80030c4:	623b      	str	r3, [r7, #32]
          break;
 80030c6:	e013      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d105      	bne.n	80030dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030d0:	2308      	movs	r3, #8
 80030d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	611a      	str	r2, [r3, #16]
          break;
 80030da:	e009      	b.n	80030f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030dc:	2308      	movs	r3, #8
 80030de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	615a      	str	r2, [r3, #20]
          break;
 80030e6:	e003      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030e8:	2300      	movs	r3, #0
 80030ea:	623b      	str	r3, [r7, #32]
          break;
 80030ec:	e000      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          break;
 80030ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2bff      	cmp	r3, #255	; 0xff
 80030f4:	d801      	bhi.n	80030fa <HAL_GPIO_Init+0x13a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	e001      	b.n	80030fe <HAL_GPIO_Init+0x13e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3304      	adds	r3, #4
 80030fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2bff      	cmp	r3, #255	; 0xff
 8003104:	d802      	bhi.n	800310c <HAL_GPIO_Init+0x14c>
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	e002      	b.n	8003112 <HAL_GPIO_Init+0x152>
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	3b08      	subs	r3, #8
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	210f      	movs	r1, #15
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	401a      	ands	r2, r3
 8003124:	6a39      	ldr	r1, [r7, #32]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	431a      	orrs	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80b1 	beq.w	80032a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003140:	4b4d      	ldr	r3, [pc, #308]	; (8003278 <HAL_GPIO_Init+0x2b8>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	4a4c      	ldr	r2, [pc, #304]	; (8003278 <HAL_GPIO_Init+0x2b8>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6193      	str	r3, [r2, #24]
 800314c:	4b4a      	ldr	r3, [pc, #296]	; (8003278 <HAL_GPIO_Init+0x2b8>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003158:	4a48      	ldr	r2, [pc, #288]	; (800327c <HAL_GPIO_Init+0x2bc>)
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	3302      	adds	r3, #2
 8003160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003164:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	220f      	movs	r2, #15
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4013      	ands	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a40      	ldr	r2, [pc, #256]	; (8003280 <HAL_GPIO_Init+0x2c0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d013      	beq.n	80031ac <HAL_GPIO_Init+0x1ec>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a3f      	ldr	r2, [pc, #252]	; (8003284 <HAL_GPIO_Init+0x2c4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00d      	beq.n	80031a8 <HAL_GPIO_Init+0x1e8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a3e      	ldr	r2, [pc, #248]	; (8003288 <HAL_GPIO_Init+0x2c8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d007      	beq.n	80031a4 <HAL_GPIO_Init+0x1e4>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a3d      	ldr	r2, [pc, #244]	; (800328c <HAL_GPIO_Init+0x2cc>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d101      	bne.n	80031a0 <HAL_GPIO_Init+0x1e0>
 800319c:	2303      	movs	r3, #3
 800319e:	e006      	b.n	80031ae <HAL_GPIO_Init+0x1ee>
 80031a0:	2304      	movs	r3, #4
 80031a2:	e004      	b.n	80031ae <HAL_GPIO_Init+0x1ee>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e002      	b.n	80031ae <HAL_GPIO_Init+0x1ee>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <HAL_GPIO_Init+0x1ee>
 80031ac:	2300      	movs	r3, #0
 80031ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b0:	f002 0203 	and.w	r2, r2, #3
 80031b4:	0092      	lsls	r2, r2, #2
 80031b6:	4093      	lsls	r3, r2
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031be:	492f      	ldr	r1, [pc, #188]	; (800327c <HAL_GPIO_Init+0x2bc>)
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	089b      	lsrs	r3, r3, #2
 80031c4:	3302      	adds	r3, #2
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d006      	beq.n	80031e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031d8:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <HAL_GPIO_Init+0x2d0>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	492c      	ldr	r1, [pc, #176]	; (8003290 <HAL_GPIO_Init+0x2d0>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	600b      	str	r3, [r1, #0]
 80031e4:	e006      	b.n	80031f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031e6:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <HAL_GPIO_Init+0x2d0>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	4928      	ldr	r1, [pc, #160]	; (8003290 <HAL_GPIO_Init+0x2d0>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d006      	beq.n	800320e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003200:	4b23      	ldr	r3, [pc, #140]	; (8003290 <HAL_GPIO_Init+0x2d0>)
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	4922      	ldr	r1, [pc, #136]	; (8003290 <HAL_GPIO_Init+0x2d0>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
 800320c:	e006      	b.n	800321c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800320e:	4b20      	ldr	r3, [pc, #128]	; (8003290 <HAL_GPIO_Init+0x2d0>)
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	43db      	mvns	r3, r3
 8003216:	491e      	ldr	r1, [pc, #120]	; (8003290 <HAL_GPIO_Init+0x2d0>)
 8003218:	4013      	ands	r3, r2
 800321a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d006      	beq.n	8003236 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003228:	4b19      	ldr	r3, [pc, #100]	; (8003290 <HAL_GPIO_Init+0x2d0>)
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	4918      	ldr	r1, [pc, #96]	; (8003290 <HAL_GPIO_Init+0x2d0>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	608b      	str	r3, [r1, #8]
 8003234:	e006      	b.n	8003244 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003236:	4b16      	ldr	r3, [pc, #88]	; (8003290 <HAL_GPIO_Init+0x2d0>)
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	43db      	mvns	r3, r3
 800323e:	4914      	ldr	r1, [pc, #80]	; (8003290 <HAL_GPIO_Init+0x2d0>)
 8003240:	4013      	ands	r3, r2
 8003242:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d021      	beq.n	8003294 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_GPIO_Init+0x2d0>)
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	490e      	ldr	r1, [pc, #56]	; (8003290 <HAL_GPIO_Init+0x2d0>)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	60cb      	str	r3, [r1, #12]
 800325c:	e021      	b.n	80032a2 <HAL_GPIO_Init+0x2e2>
 800325e:	bf00      	nop
 8003260:	10320000 	.word	0x10320000
 8003264:	10310000 	.word	0x10310000
 8003268:	10220000 	.word	0x10220000
 800326c:	10210000 	.word	0x10210000
 8003270:	10120000 	.word	0x10120000
 8003274:	10110000 	.word	0x10110000
 8003278:	40021000 	.word	0x40021000
 800327c:	40010000 	.word	0x40010000
 8003280:	40010800 	.word	0x40010800
 8003284:	40010c00 	.word	0x40010c00
 8003288:	40011000 	.word	0x40011000
 800328c:	40011400 	.word	0x40011400
 8003290:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_GPIO_Init+0x304>)
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	43db      	mvns	r3, r3
 800329c:	4909      	ldr	r1, [pc, #36]	; (80032c4 <HAL_GPIO_Init+0x304>)
 800329e:	4013      	ands	r3, r2
 80032a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	3301      	adds	r3, #1
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f47f ae8e 	bne.w	8002fd4 <HAL_GPIO_Init+0x14>
  }
}
 80032b8:	bf00      	nop
 80032ba:	bf00      	nop
 80032bc:	372c      	adds	r7, #44	; 0x2c
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	40010400 	.word	0x40010400

080032c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	887b      	ldrh	r3, [r7, #2]
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e001      	b.n	80032ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	460b      	mov	r3, r1
 8003300:	807b      	strh	r3, [r7, #2]
 8003302:	4613      	mov	r3, r2
 8003304:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003306:	787b      	ldrb	r3, [r7, #1]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800330c:	887a      	ldrh	r2, [r7, #2]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003312:	e003      	b.n	800331c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003314:	887b      	ldrh	r3, [r7, #2]
 8003316:	041a      	lsls	r2, r3, #16
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	611a      	str	r2, [r3, #16]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr

08003326 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	460b      	mov	r3, r1
 8003330:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003338:	887a      	ldrh	r2, [r7, #2]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4013      	ands	r3, r2
 800333e:	041a      	lsls	r2, r3, #16
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	43d9      	mvns	r1, r3
 8003344:	887b      	ldrh	r3, [r7, #2]
 8003346:	400b      	ands	r3, r1
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	611a      	str	r2, [r3, #16]
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003362:	4b08      	ldr	r3, [pc, #32]	; (8003384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	4013      	ands	r3, r2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d006      	beq.n	800337c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800336e:	4a05      	ldr	r2, [pc, #20]	; (8003384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f806 	bl	8003388 <HAL_GPIO_EXTI_Callback>
  }
}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40010400 	.word	0x40010400

08003388 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800339c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800339e:	b08b      	sub	sp, #44	; 0x2c
 80033a0:	af06      	add	r7, sp, #24
 80033a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e0fd      	b.n	80035aa <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f00a fa02 	bl	800d7cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2203      	movs	r2, #3
 80033cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f003 fadb 	bl	8006990 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	687e      	ldr	r6, [r7, #4]
 80033e2:	466d      	mov	r5, sp
 80033e4:	f106 0410 	add.w	r4, r6, #16
 80033e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	602b      	str	r3, [r5, #0]
 80033f0:	1d33      	adds	r3, r6, #4
 80033f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033f4:	6838      	ldr	r0, [r7, #0]
 80033f6:	f003 faa5 	bl	8006944 <USB_CoreInit>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0ce      	b.n	80035aa <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f003 fad6 	bl	80069c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003418:	2300      	movs	r3, #0
 800341a:	73fb      	strb	r3, [r7, #15]
 800341c:	e04c      	b.n	80034b8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	440b      	add	r3, r1
 800342e:	3301      	adds	r3, #1
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	440b      	add	r3, r1
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003448:	7bfa      	ldrb	r2, [r7, #15]
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	b298      	uxth	r0, r3
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	440b      	add	r3, r1
 800345a:	3336      	adds	r3, #54	; 0x36
 800345c:	4602      	mov	r2, r0
 800345e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	440b      	add	r3, r1
 8003470:	3303      	adds	r3, #3
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003476:	7bfa      	ldrb	r2, [r7, #15]
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	440b      	add	r3, r1
 8003484:	3338      	adds	r3, #56	; 0x38
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	440b      	add	r3, r1
 8003498:	333c      	adds	r3, #60	; 0x3c
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800349e:	7bfa      	ldrb	r2, [r7, #15]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	440b      	add	r3, r1
 80034ac:	3340      	adds	r3, #64	; 0x40
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	3301      	adds	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
 80034b8:	7bfa      	ldrb	r2, [r7, #15]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d3ad      	bcc.n	800341e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]
 80034c6:	e044      	b.n	8003552 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034de:	7bfa      	ldrb	r2, [r7, #15]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	440b      	add	r3, r1
 80034ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034f4:	7bfa      	ldrb	r2, [r7, #15]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	440b      	add	r3, r1
 8003502:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800350a:	7bfa      	ldrb	r2, [r7, #15]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	440b      	add	r3, r1
 8003518:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003520:	7bfa      	ldrb	r2, [r7, #15]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	440b      	add	r3, r1
 800352e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003536:	7bfa      	ldrb	r2, [r7, #15]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	440b      	add	r3, r1
 8003544:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	3301      	adds	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	d3b5      	bcc.n	80034c8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	687e      	ldr	r6, [r7, #4]
 8003564:	466d      	mov	r5, sp
 8003566:	f106 0410 	add.w	r4, r6, #16
 800356a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800356c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	602b      	str	r3, [r5, #0]
 8003572:	1d33      	adds	r3, r6, #4
 8003574:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003576:	6838      	ldr	r0, [r7, #0]
 8003578:	f003 fa30 	bl	80069dc <USB_DevInit>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2202      	movs	r2, #2
 8003586:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e00d      	b.n	80035aa <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f005 fba1 	bl	8008cea <USB_DevDisconnect>

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_PCD_Start+0x16>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e016      	b.n	80035f6 <HAL_PCD_Start+0x44>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f003 f9c5 	bl	8006964 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80035da:	2101      	movs	r1, #1
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f00a fb68 	bl	800dcb2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f005 fb75 	bl	8008cd6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b088      	sub	sp, #32
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f005 fb77 	bl	8008cfe <USB_ReadInterrupts>
 8003610:	4603      	mov	r3, r0
 8003612:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800361a:	d102      	bne.n	8003622 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fb61 	bl	8003ce4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f005 fb69 	bl	8008cfe <USB_ReadInterrupts>
 800362c:	4603      	mov	r3, r0
 800362e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003636:	d112      	bne.n	800365e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364a:	b292      	uxth	r2, r2
 800364c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f00a f936 	bl	800d8c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003656:	2100      	movs	r1, #0
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f925 	bl	80038a8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f005 fb4b 	bl	8008cfe <USB_ReadInterrupts>
 8003668:	4603      	mov	r3, r0
 800366a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800366e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003672:	d10b      	bne.n	800368c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800367c:	b29a      	uxth	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003686:	b292      	uxth	r2, r2
 8003688:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f005 fb34 	bl	8008cfe <USB_ReadInterrupts>
 8003696:	4603      	mov	r3, r0
 8003698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800369c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036a0:	d10b      	bne.n	80036ba <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036b4:	b292      	uxth	r2, r2
 80036b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f005 fb1d 	bl	8008cfe <USB_ReadInterrupts>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ce:	d126      	bne.n	800371e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036d8:	b29a      	uxth	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0204 	bic.w	r2, r2, #4
 80036e2:	b292      	uxth	r2, r2
 80036e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0208 	bic.w	r2, r2, #8
 80036fa:	b292      	uxth	r2, r2
 80036fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f00a f917 	bl	800d934 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800370e:	b29a      	uxth	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003718:	b292      	uxth	r2, r2
 800371a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f005 faeb 	bl	8008cfe <USB_ReadInterrupts>
 8003728:	4603      	mov	r3, r0
 800372a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800372e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003732:	f040 8084 	bne.w	800383e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003736:	2300      	movs	r3, #0
 8003738:	77fb      	strb	r3, [r7, #31]
 800373a:	e011      	b.n	8003760 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	7ffb      	ldrb	r3, [r7, #31]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	441a      	add	r2, r3
 8003748:	7ffb      	ldrb	r3, [r7, #31]
 800374a:	8812      	ldrh	r2, [r2, #0]
 800374c:	b292      	uxth	r2, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	f107 0120 	add.w	r1, r7, #32
 8003754:	440b      	add	r3, r1
 8003756:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800375a:	7ffb      	ldrb	r3, [r7, #31]
 800375c:	3301      	adds	r3, #1
 800375e:	77fb      	strb	r3, [r7, #31]
 8003760:	7ffb      	ldrb	r3, [r7, #31]
 8003762:	2b07      	cmp	r3, #7
 8003764:	d9ea      	bls.n	800373c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800376e:	b29a      	uxth	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0201 	orr.w	r2, r2, #1
 8003778:	b292      	uxth	r2, r2
 800377a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003786:	b29a      	uxth	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0201 	bic.w	r2, r2, #1
 8003790:	b292      	uxth	r2, r2
 8003792:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003796:	bf00      	nop
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f6      	beq.n	8003798 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037bc:	b292      	uxth	r2, r2
 80037be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80037c2:	2300      	movs	r3, #0
 80037c4:	77fb      	strb	r3, [r7, #31]
 80037c6:	e010      	b.n	80037ea <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80037c8:	7ffb      	ldrb	r3, [r7, #31]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	4611      	mov	r1, r2
 80037d0:	7ffa      	ldrb	r2, [r7, #31]
 80037d2:	0092      	lsls	r2, r2, #2
 80037d4:	440a      	add	r2, r1
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	f107 0120 	add.w	r1, r7, #32
 80037dc:	440b      	add	r3, r1
 80037de:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80037e2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80037e4:	7ffb      	ldrb	r3, [r7, #31]
 80037e6:	3301      	adds	r3, #1
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	7ffb      	ldrb	r3, [r7, #31]
 80037ec:	2b07      	cmp	r3, #7
 80037ee:	d9eb      	bls.n	80037c8 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0208 	orr.w	r2, r2, #8
 8003802:	b292      	uxth	r2, r2
 8003804:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003810:	b29a      	uxth	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800381a:	b292      	uxth	r2, r2
 800381c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003828:	b29a      	uxth	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0204 	orr.w	r2, r2, #4
 8003832:	b292      	uxth	r2, r2
 8003834:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f00a f861 	bl	800d900 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f005 fa5b 	bl	8008cfe <USB_ReadInterrupts>
 8003848:	4603      	mov	r3, r0
 800384a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003852:	d10e      	bne.n	8003872 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800385c:	b29a      	uxth	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003866:	b292      	uxth	r2, r2
 8003868:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f00a f81a 	bl	800d8a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f005 fa41 	bl	8008cfe <USB_ReadInterrupts>
 800387c:	4603      	mov	r3, r0
 800387e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003886:	d10b      	bne.n	80038a0 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003890:	b29a      	uxth	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800389a:	b292      	uxth	r2, r2
 800389c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80038a0:	bf00      	nop
 80038a2:	3720      	adds	r7, #32
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_PCD_SetAddress+0x1a>
 80038be:	2302      	movs	r3, #2
 80038c0:	e013      	b.n	80038ea <HAL_PCD_SetAddress+0x42>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	4611      	mov	r1, r2
 80038da:	4618      	mov	r0, r3
 80038dc:	f005 f9e8 	bl	8008cb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	4608      	mov	r0, r1
 80038fc:	4611      	mov	r1, r2
 80038fe:	461a      	mov	r2, r3
 8003900:	4603      	mov	r3, r0
 8003902:	70fb      	strb	r3, [r7, #3]
 8003904:	460b      	mov	r3, r1
 8003906:	803b      	strh	r3, [r7, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003914:	2b00      	cmp	r3, #0
 8003916:	da0e      	bge.n	8003936 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	4413      	add	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	705a      	strb	r2, [r3, #1]
 8003934:	e00e      	b.n	8003954 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	f003 0207 	and.w	r2, r3, #7
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	4413      	add	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	b2da      	uxtb	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003960:	883a      	ldrh	r2, [r7, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	78ba      	ldrb	r2, [r7, #2]
 800396a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	785b      	ldrb	r3, [r3, #1]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d004      	beq.n	800397e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800397e:	78bb      	ldrb	r3, [r7, #2]
 8003980:	2b02      	cmp	r3, #2
 8003982:	d102      	bne.n	800398a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_PCD_EP_Open+0xa6>
 8003994:	2302      	movs	r3, #2
 8003996:	e00e      	b.n	80039b6 <HAL_PCD_EP_Open+0xc4>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68f9      	ldr	r1, [r7, #12]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 f838 	bl	8006a1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80039b4:	7afb      	ldrb	r3, [r7, #11]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	460b      	mov	r3, r1
 80039c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	da0e      	bge.n	80039f0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d2:	78fb      	ldrb	r3, [r7, #3]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	4413      	add	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	705a      	strb	r2, [r3, #1]
 80039ee:	e00e      	b.n	8003a0e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	f003 0207 	and.w	r2, r3, #7
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_PCD_EP_Close+0x6a>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e00e      	b.n	8003a46 <HAL_PCD_EP_Close+0x88>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68f9      	ldr	r1, [r7, #12]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f003 fb5a 	bl	80070f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a5e:	7afb      	ldrb	r3, [r7, #11]
 8003a60:	f003 0207 	and.w	r2, r3, #7
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2200      	movs	r2, #0
 8003a86:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a8e:	7afb      	ldrb	r3, [r7, #11]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a9a:	7afb      	ldrb	r3, [r7, #11]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6979      	ldr	r1, [r7, #20]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f003 fd0c 	bl	80074c8 <USB_EPStartXfer>
 8003ab0:	e005      	b.n	8003abe <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6979      	ldr	r1, [r7, #20]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f003 fd05 	bl	80074c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	f003 0207 	and.w	r2, r3, #7
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	440b      	add	r3, r1
 8003ae6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr

08003af6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b086      	sub	sp, #24
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
 8003b02:	460b      	mov	r3, r1
 8003b04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b06:	7afb      	ldrb	r3, [r7, #11]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4413      	add	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b42:	7afb      	ldrb	r3, [r7, #11]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b4e:	7afb      	ldrb	r3, [r7, #11]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6979      	ldr	r1, [r7, #20]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f003 fcb2 	bl	80074c8 <USB_EPStartXfer>
 8003b64:	e005      	b.n	8003b72 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6979      	ldr	r1, [r7, #20]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f003 fcab 	bl	80074c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	f003 0207 	and.w	r2, r3, #7
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d901      	bls.n	8003b9a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e04c      	b.n	8003c34 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	da0e      	bge.n	8003bc0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	705a      	strb	r2, [r3, #1]
 8003bbe:	e00c      	b.n	8003bda <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_PCD_EP_SetStall+0x7e>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e01c      	b.n	8003c34 <HAL_PCD_EP_SetStall+0xb8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68f9      	ldr	r1, [r7, #12]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f004 ff54 	bl	8008ab6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d108      	bne.n	8003c2a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f005 f879 	bl	8008d1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	f003 020f 	and.w	r2, r3, #15
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d901      	bls.n	8003c5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e040      	b.n	8003cdc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da0e      	bge.n	8003c80 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	705a      	strb	r2, [r3, #1]
 8003c7e:	e00e      	b.n	8003c9e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	f003 0207 	and.w	r2, r3, #7
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_PCD_EP_ClrStall+0x82>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e00e      	b.n	8003cdc <HAL_PCD_EP_ClrStall+0xa0>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68f9      	ldr	r1, [r7, #12]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f004 ff42 	bl	8008b56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08e      	sub	sp, #56	; 0x38
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cec:	e2ec      	b.n	80042c8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cf6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003cf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003d04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f040 8161 	bne.w	8003fd0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d152      	bne.n	8003dbe <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d28:	81fb      	strh	r3, [r7, #14]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	89fb      	ldrh	r3, [r7, #14]
 8003d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3328      	adds	r3, #40	; 0x28
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4413      	add	r3, r2
 8003d56:	3302      	adds	r3, #2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	695a      	ldr	r2, [r3, #20]
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	441a      	add	r2, r3
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f009 fd77 	bl	800d872 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 829b 	beq.w	80042c8 <PCD_EP_ISR_Handler+0x5e4>
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f040 8296 	bne.w	80042c8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	b292      	uxth	r2, r2
 8003db0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003dbc:	e284      	b.n	80042c8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003dce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d034      	beq.n	8003e42 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	3306      	adds	r3, #6
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f004 ffd0 	bl	8008dbc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e28:	4013      	ands	r3, r2
 8003e2a:	823b      	strh	r3, [r7, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	8a3a      	ldrh	r2, [r7, #16]
 8003e32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e36:	b292      	uxth	r2, r2
 8003e38:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f009 fcec 	bl	800d818 <HAL_PCD_SetupStageCallback>
 8003e40:	e242      	b.n	80042c8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e42:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f280 823e 	bge.w	80042c8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e58:	4013      	ands	r3, r2
 8003e5a:	83bb      	strh	r3, [r7, #28]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	8bba      	ldrh	r2, [r7, #28]
 8003e62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e66:	b292      	uxth	r2, r2
 8003e68:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3306      	adds	r3, #6
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d019      	beq.n	8003ed2 <PCD_EP_ISR_Handler+0x1ee>
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d015      	beq.n	8003ed2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	6959      	ldr	r1, [r3, #20]
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	f004 ff80 	bl	8008dbc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	441a      	add	r2, r3
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003eca:	2100      	movs	r1, #0
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f009 fcb5 	bl	800d83c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f040 81f2 	bne.w	80042c8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	4413      	add	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d112      	bne.n	8003f32 <PCD_EP_ISR_Handler+0x24e>
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	801a      	strh	r2, [r3, #0]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	801a      	strh	r2, [r3, #0]
 8003f30:	e02f      	b.n	8003f92 <PCD_EP_ISR_Handler+0x2ae>
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b3e      	cmp	r3, #62	; 0x3e
 8003f38:	d813      	bhi.n	8003f62 <PCD_EP_ISR_Handler+0x27e>
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	633b      	str	r3, [r7, #48]	; 0x30
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <PCD_EP_ISR_Handler+0x270>
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f50:	3301      	adds	r3, #1
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	029b      	lsls	r3, r3, #10
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	801a      	strh	r2, [r3, #0]
 8003f60:	e017      	b.n	8003f92 <PCD_EP_ISR_Handler+0x2ae>
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	633b      	str	r3, [r7, #48]	; 0x30
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <PCD_EP_ISR_Handler+0x298>
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	029b      	lsls	r3, r3, #10
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	827b      	strh	r3, [r7, #18]
 8003fa4:	8a7b      	ldrh	r3, [r7, #18]
 8003fa6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003faa:	827b      	strh	r3, [r7, #18]
 8003fac:	8a7b      	ldrh	r3, [r7, #18]
 8003fae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003fb2:	827b      	strh	r3, [r7, #18]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	8a7b      	ldrh	r3, [r7, #18]
 8003fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	8013      	strh	r3, [r2, #0]
 8003fce:	e17b      	b.n	80042c8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003fe2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f280 80ea 	bge.w	80041c0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004002:	4013      	ands	r3, r2
 8004004:	853b      	strh	r3, [r7, #40]	; 0x28
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004016:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800401a:	b292      	uxth	r2, r2
 800401c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800401e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	4413      	add	r3, r2
 8004032:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	7b1b      	ldrb	r3, [r3, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d122      	bne.n	8004082 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004044:	b29b      	uxth	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4413      	add	r3, r2
 8004050:	3306      	adds	r3, #6
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004064:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004066:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 8087 	beq.w	800417c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	6959      	ldr	r1, [r3, #20]
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	88da      	ldrh	r2, [r3, #6]
 800407a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800407c:	f004 fe9e 	bl	8008dbc <USB_ReadPMA>
 8004080:	e07c      	b.n	800417c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	78db      	ldrb	r3, [r3, #3]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d108      	bne.n	800409c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800408a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800408c:	461a      	mov	r2, r3
 800408e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f927 	bl	80042e4 <HAL_PCD_EP_DB_Receive>
 8004096:	4603      	mov	r3, r0
 8004098:	86fb      	strh	r3, [r7, #54]	; 0x36
 800409a:	e06f      	b.n	800417c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	441a      	add	r2, r3
 80040c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040d8:	b29b      	uxth	r3, r3
 80040da:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d021      	beq.n	800413a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040fe:	b29b      	uxth	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	3302      	adds	r3, #2
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800411e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004120:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004122:	2b00      	cmp	r3, #0
 8004124:	d02a      	beq.n	800417c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	6959      	ldr	r1, [r3, #20]
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	891a      	ldrh	r2, [r3, #8]
 8004132:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004134:	f004 fe42 	bl	8008dbc <USB_ReadPMA>
 8004138:	e020      	b.n	800417c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004142:	b29b      	uxth	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4413      	add	r3, r2
 800414e:	3306      	adds	r3, #6
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004162:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004164:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	6959      	ldr	r1, [r3, #20]
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	895a      	ldrh	r2, [r3, #10]
 8004176:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004178:	f004 fe20 	bl	8008dbc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	69da      	ldr	r2, [r3, #28]
 8004180:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004182:	441a      	add	r2, r3
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	695a      	ldr	r2, [r3, #20]
 800418c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800418e:	441a      	add	r2, r3
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d004      	beq.n	80041a6 <PCD_EP_ISR_Handler+0x4c2>
 800419c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d206      	bcs.n	80041b4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	4619      	mov	r1, r3
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f009 fb45 	bl	800d83c <HAL_PCD_DataOutStageCallback>
 80041b2:	e005      	b.n	80041c0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041ba:	4618      	mov	r0, r3
 80041bc:	f003 f984 	bl	80074c8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80041c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d07e      	beq.n	80042c8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80041ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	4413      	add	r3, r2
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80041f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f8:	843b      	strh	r3, [r7, #32]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	441a      	add	r2, r3
 8004208:	8c3b      	ldrh	r3, [r7, #32]
 800420a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800420e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004212:	b29b      	uxth	r3, r3
 8004214:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	78db      	ldrb	r3, [r3, #3]
 800421a:	2b03      	cmp	r3, #3
 800421c:	d00c      	beq.n	8004238 <PCD_EP_ISR_Handler+0x554>
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	78db      	ldrb	r3, [r3, #3]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800422a:	2b02      	cmp	r3, #2
 800422c:	d146      	bne.n	80042bc <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800422e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d141      	bne.n	80042bc <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004240:	b29b      	uxth	r3, r3
 8004242:	461a      	mov	r2, r3
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4413      	add	r3, r2
 800424c:	3302      	adds	r3, #2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004260:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	8bfb      	ldrh	r3, [r7, #30]
 8004268:	429a      	cmp	r2, r3
 800426a:	d906      	bls.n	800427a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	699a      	ldr	r2, [r3, #24]
 8004270:	8bfb      	ldrh	r3, [r7, #30]
 8004272:	1ad2      	subs	r2, r2, r3
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	619a      	str	r2, [r3, #24]
 8004278:	e002      	b.n	8004280 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	2200      	movs	r2, #0
 800427e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d106      	bne.n	8004296 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	4619      	mov	r1, r3
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f009 faef 	bl	800d872 <HAL_PCD_DataInStageCallback>
 8004294:	e018      	b.n	80042c8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	8bfb      	ldrh	r3, [r7, #30]
 800429c:	441a      	add	r2, r3
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	69da      	ldr	r2, [r3, #28]
 80042a6:	8bfb      	ldrh	r3, [r7, #30]
 80042a8:	441a      	add	r2, r3
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042b4:	4618      	mov	r0, r3
 80042b6:	f003 f907 	bl	80074c8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80042ba:	e005      	b.n	80042c8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80042bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042be:	461a      	mov	r2, r3
 80042c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f91b 	bl	80044fe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	b21b      	sxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f6ff ad0a 	blt.w	8003cee <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3738      	adds	r7, #56	; 0x38
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	4613      	mov	r3, r2
 80042f0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d07e      	beq.n	80043fa <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004304:	b29b      	uxth	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4413      	add	r3, r2
 8004310:	3302      	adds	r3, #2
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	6812      	ldr	r2, [r2, #0]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004324:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	699a      	ldr	r2, [r3, #24]
 800432a:	8b7b      	ldrh	r3, [r7, #26]
 800432c:	429a      	cmp	r2, r3
 800432e:	d306      	bcc.n	800433e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	699a      	ldr	r2, [r3, #24]
 8004334:	8b7b      	ldrh	r3, [r7, #26]
 8004336:	1ad2      	subs	r2, r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	619a      	str	r2, [r3, #24]
 800433c:	e002      	b.n	8004344 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2200      	movs	r2, #0
 8004342:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d123      	bne.n	8004394 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	833b      	strh	r3, [r7, #24]
 8004368:	8b3b      	ldrh	r3, [r7, #24]
 800436a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800436e:	833b      	strh	r3, [r7, #24]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	441a      	add	r2, r3
 800437e:	8b3b      	ldrh	r3, [r7, #24]
 8004380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004390:	b29b      	uxth	r3, r3
 8004392:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004394:	88fb      	ldrh	r3, [r7, #6]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01f      	beq.n	80043de <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b8:	82fb      	strh	r3, [r7, #22]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	441a      	add	r2, r3
 80043c8:	8afb      	ldrh	r3, [r7, #22]
 80043ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043da:	b29b      	uxth	r3, r3
 80043dc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80043de:	8b7b      	ldrh	r3, [r7, #26]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8087 	beq.w	80044f4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	6959      	ldr	r1, [r3, #20]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	891a      	ldrh	r2, [r3, #8]
 80043f2:	8b7b      	ldrh	r3, [r7, #26]
 80043f4:	f004 fce2 	bl	8008dbc <USB_ReadPMA>
 80043f8:	e07c      	b.n	80044f4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004402:	b29b      	uxth	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4413      	add	r3, r2
 800440e:	3306      	adds	r3, #6
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004422:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	8b7b      	ldrh	r3, [r7, #26]
 800442a:	429a      	cmp	r2, r3
 800442c:	d306      	bcc.n	800443c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	8b7b      	ldrh	r3, [r7, #26]
 8004434:	1ad2      	subs	r2, r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	619a      	str	r2, [r3, #24]
 800443a:	e002      	b.n	8004442 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2200      	movs	r2, #0
 8004440:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d123      	bne.n	8004492 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b29b      	uxth	r3, r3
 800445c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004464:	83fb      	strh	r3, [r7, #30]
 8004466:	8bfb      	ldrh	r3, [r7, #30]
 8004468:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800446c:	83fb      	strh	r3, [r7, #30]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	441a      	add	r2, r3
 800447c:	8bfb      	ldrh	r3, [r7, #30]
 800447e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800448a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800448e:	b29b      	uxth	r3, r3
 8004490:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004492:	88fb      	ldrh	r3, [r7, #6]
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d11f      	bne.n	80044dc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b6:	83bb      	strh	r3, [r7, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	441a      	add	r2, r3
 80044c6:	8bbb      	ldrh	r3, [r7, #28]
 80044c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044d8:	b29b      	uxth	r3, r3
 80044da:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80044dc:	8b7b      	ldrh	r3, [r7, #26]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d008      	beq.n	80044f4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	6959      	ldr	r1, [r3, #20]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	895a      	ldrh	r2, [r3, #10]
 80044ee:	8b7b      	ldrh	r3, [r7, #26]
 80044f0:	f004 fc64 	bl	8008dbc <USB_ReadPMA>
    }
  }

  return count;
 80044f4:	8b7b      	ldrh	r3, [r7, #26]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3720      	adds	r7, #32
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b0a2      	sub	sp, #136	; 0x88
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	4613      	mov	r3, r2
 800450a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 81c7 	beq.w	80048a6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004520:	b29b      	uxth	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	4413      	add	r3, r2
 800452c:	3302      	adds	r3, #2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004540:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800454c:	429a      	cmp	r2, r3
 800454e:	d907      	bls.n	8004560 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	699a      	ldr	r2, [r3, #24]
 8004554:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004558:	1ad2      	subs	r2, r2, r3
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	619a      	str	r2, [r3, #24]
 800455e:	e002      	b.n	8004566 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2200      	movs	r2, #0
 8004564:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f040 80b9 	bne.w	80046e2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	785b      	ldrb	r3, [r3, #1]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d126      	bne.n	80045c6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	62bb      	str	r3, [r7, #40]	; 0x28
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004586:	b29b      	uxth	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	4413      	add	r3, r2
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	011a      	lsls	r2, r3, #4
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	4413      	add	r3, r2
 800459a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	801a      	strh	r2, [r3, #0]
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045be:	b29a      	uxth	r2, r3
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	801a      	strh	r2, [r3, #0]
 80045c4:	e01a      	b.n	80045fc <HAL_PCD_EP_DB_Transmit+0xfe>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	785b      	ldrb	r3, [r3, #1]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d116      	bne.n	80045fc <HAL_PCD_EP_DB_Transmit+0xfe>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	633b      	str	r3, [r7, #48]	; 0x30
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045dc:	b29b      	uxth	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	4413      	add	r3, r2
 80045e4:	633b      	str	r3, [r7, #48]	; 0x30
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	011a      	lsls	r2, r3, #4
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	4413      	add	r3, r2
 80045f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f8:	2200      	movs	r2, #0
 80045fa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	623b      	str	r3, [r7, #32]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	785b      	ldrb	r3, [r3, #1]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d126      	bne.n	8004658 <HAL_PCD_EP_DB_Transmit+0x15a>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004618:	b29b      	uxth	r3, r3
 800461a:	461a      	mov	r2, r3
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	4413      	add	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	011a      	lsls	r2, r3, #4
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	4413      	add	r3, r2
 800462c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	b29b      	uxth	r3, r3
 8004638:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800463c:	b29a      	uxth	r2, r3
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	801a      	strh	r2, [r3, #0]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800464c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004650:	b29a      	uxth	r2, r3
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	801a      	strh	r2, [r3, #0]
 8004656:	e017      	b.n	8004688 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	785b      	ldrb	r3, [r3, #1]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d113      	bne.n	8004688 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004668:	b29b      	uxth	r3, r3
 800466a:	461a      	mov	r2, r3
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	4413      	add	r3, r2
 8004670:	623b      	str	r3, [r7, #32]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	011a      	lsls	r2, r3, #4
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	4413      	add	r3, r2
 800467c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004680:	61fb      	str	r3, [r7, #28]
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	2200      	movs	r2, #0
 8004686:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	4619      	mov	r1, r3
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f009 f8ef 	bl	800d872 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004694:	88fb      	ldrh	r3, [r7, #6]
 8004696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 82d4 	beq.w	8004c48 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	827b      	strh	r3, [r7, #18]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	441a      	add	r2, r3
 80046ca:	8a7b      	ldrh	r3, [r7, #18]
 80046cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046dc:	b29b      	uxth	r3, r3
 80046de:	8013      	strh	r3, [r2, #0]
 80046e0:	e2b2      	b.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d021      	beq.n	8004730 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004706:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	441a      	add	r2, r3
 8004718:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800471c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004724:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472c:	b29b      	uxth	r3, r3
 800472e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004736:	2b01      	cmp	r3, #1
 8004738:	f040 8286 	bne.w	8004c48 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004744:	441a      	add	r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	69da      	ldr	r2, [r3, #28]
 800474e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004752:	441a      	add	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	6a1a      	ldr	r2, [r3, #32]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	429a      	cmp	r2, r3
 8004762:	d309      	bcc.n	8004778 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	6a1a      	ldr	r2, [r3, #32]
 800476e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004770:	1ad2      	subs	r2, r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	621a      	str	r2, [r3, #32]
 8004776:	e015      	b.n	80047a4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d107      	bne.n	8004790 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8004780:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004784:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800478e:	e009      	b.n	80047a4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2200      	movs	r2, #0
 80047a2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	785b      	ldrb	r3, [r3, #1]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d155      	bne.n	8004858 <HAL_PCD_EP_DB_Transmit+0x35a>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c0:	4413      	add	r3, r2
 80047c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	011a      	lsls	r2, r3, #4
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	4413      	add	r3, r2
 80047ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
 80047d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d112      	bne.n	8004800 <HAL_PCD_EP_DB_Transmit+0x302>
 80047da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fc:	801a      	strh	r2, [r3, #0]
 80047fe:	e047      	b.n	8004890 <HAL_PCD_EP_DB_Transmit+0x392>
 8004800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004802:	2b3e      	cmp	r3, #62	; 0x3e
 8004804:	d811      	bhi.n	800482a <HAL_PCD_EP_DB_Transmit+0x32c>
 8004806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004808:	085b      	lsrs	r3, r3, #1
 800480a:	64bb      	str	r3, [r7, #72]	; 0x48
 800480c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_PCD_EP_DB_Transmit+0x31e>
 8004816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004818:	3301      	adds	r3, #1
 800481a:	64bb      	str	r3, [r7, #72]	; 0x48
 800481c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481e:	b29b      	uxth	r3, r3
 8004820:	029b      	lsls	r3, r3, #10
 8004822:	b29a      	uxth	r2, r3
 8004824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004826:	801a      	strh	r2, [r3, #0]
 8004828:	e032      	b.n	8004890 <HAL_PCD_EP_DB_Transmit+0x392>
 800482a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2b00      	cmp	r3, #0
 8004838:	d102      	bne.n	8004840 <HAL_PCD_EP_DB_Transmit+0x342>
 800483a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800483c:	3b01      	subs	r3, #1
 800483e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004842:	b29b      	uxth	r3, r3
 8004844:	029b      	lsls	r3, r3, #10
 8004846:	b29b      	uxth	r3, r3
 8004848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800484c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004850:	b29a      	uxth	r2, r3
 8004852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004854:	801a      	strh	r2, [r3, #0]
 8004856:	e01b      	b.n	8004890 <HAL_PCD_EP_DB_Transmit+0x392>
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	785b      	ldrb	r3, [r3, #1]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d117      	bne.n	8004890 <HAL_PCD_EP_DB_Transmit+0x392>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	643b      	str	r3, [r7, #64]	; 0x40
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800486e:	b29b      	uxth	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004874:	4413      	add	r3, r2
 8004876:	643b      	str	r3, [r7, #64]	; 0x40
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	011a      	lsls	r2, r3, #4
 800487e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004880:	4413      	add	r3, r2
 8004882:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800488a:	b29a      	uxth	r2, r3
 800488c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6818      	ldr	r0, [r3, #0]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	6959      	ldr	r1, [r3, #20]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	891a      	ldrh	r2, [r3, #8]
 800489c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f004 fa47 	bl	8008d32 <USB_WritePMA>
 80048a4:	e1d0      	b.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	4413      	add	r3, r2
 80048ba:	3306      	adds	r3, #6
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	6812      	ldr	r2, [r2, #0]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048da:	429a      	cmp	r2, r3
 80048dc:	d307      	bcc.n	80048ee <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048e6:	1ad2      	subs	r2, r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	619a      	str	r2, [r3, #24]
 80048ec:	e002      	b.n	80048f4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2200      	movs	r2, #0
 80048f2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f040 80c4 	bne.w	8004a86 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	785b      	ldrb	r3, [r3, #1]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d126      	bne.n	8004954 <HAL_PCD_EP_DB_Transmit+0x456>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004914:	b29b      	uxth	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491a:	4413      	add	r3, r2
 800491c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	011a      	lsls	r2, r3, #4
 8004924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004926:	4413      	add	r3, r2
 8004928:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800492c:	66bb      	str	r3, [r7, #104]	; 0x68
 800492e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	b29b      	uxth	r3, r3
 8004934:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004938:	b29a      	uxth	r2, r3
 800493a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800493c:	801a      	strh	r2, [r3, #0]
 800493e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800494c:	b29a      	uxth	r2, r3
 800494e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004950:	801a      	strh	r2, [r3, #0]
 8004952:	e01a      	b.n	800498a <HAL_PCD_EP_DB_Transmit+0x48c>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	785b      	ldrb	r3, [r3, #1]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d116      	bne.n	800498a <HAL_PCD_EP_DB_Transmit+0x48c>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	677b      	str	r3, [r7, #116]	; 0x74
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800496a:	b29b      	uxth	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004970:	4413      	add	r3, r2
 8004972:	677b      	str	r3, [r7, #116]	; 0x74
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	011a      	lsls	r2, r3, #4
 800497a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800497c:	4413      	add	r3, r2
 800497e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004982:	673b      	str	r3, [r7, #112]	; 0x70
 8004984:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004986:	2200      	movs	r2, #0
 8004988:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	785b      	ldrb	r3, [r3, #1]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d12f      	bne.n	80049f8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049b0:	4413      	add	r3, r2
 80049b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	011a      	lsls	r2, r3, #4
 80049bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049c0:	4413      	add	r3, r2
 80049c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049dc:	801a      	strh	r2, [r3, #0]
 80049de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049f4:	801a      	strh	r2, [r3, #0]
 80049f6:	e017      	b.n	8004a28 <HAL_PCD_EP_DB_Transmit+0x52a>
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d113      	bne.n	8004a28 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a0e:	4413      	add	r3, r2
 8004a10:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	011a      	lsls	r2, r3, #4
 8004a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a24:	2200      	movs	r2, #0
 8004a26:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f008 ff1f 	bl	800d872 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f040 8104 	bne.w	8004c48 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	441a      	add	r2, r3
 8004a6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	8013      	strh	r3, [r2, #0]
 8004a84:	e0e0      	b.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d121      	bne.n	8004ad4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aaa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	441a      	add	r2, r3
 8004abc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	f040 80b4 	bne.w	8004c48 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ae8:	441a      	add	r2, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	69da      	ldr	r2, [r3, #28]
 8004af2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004af6:	441a      	add	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	6a1a      	ldr	r2, [r3, #32]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d309      	bcc.n	8004b1c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	6a1a      	ldr	r2, [r3, #32]
 8004b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b14:	1ad2      	subs	r2, r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	621a      	str	r2, [r3, #32]
 8004b1a:	e015      	b.n	8004b48 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d107      	bne.n	8004b34 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004b24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b28:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b32:	e009      	b.n	8004b48 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	667b      	str	r3, [r7, #100]	; 0x64
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	785b      	ldrb	r3, [r3, #1]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d155      	bne.n	8004c02 <HAL_PCD_EP_DB_Transmit+0x704>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b6a:	4413      	add	r3, r2
 8004b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	011a      	lsls	r2, r3, #4
 8004b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b76:	4413      	add	r3, r2
 8004b78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d112      	bne.n	8004baa <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b92:	801a      	strh	r2, [r3, #0]
 8004b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ba6:	801a      	strh	r2, [r3, #0]
 8004ba8:	e044      	b.n	8004c34 <HAL_PCD_EP_DB_Transmit+0x736>
 8004baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bac:	2b3e      	cmp	r3, #62	; 0x3e
 8004bae:	d811      	bhi.n	8004bd4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	657b      	str	r3, [r7, #84]	; 0x54
 8004bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	657b      	str	r3, [r7, #84]	; 0x54
 8004bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	029b      	lsls	r3, r3, #10
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bd0:	801a      	strh	r2, [r3, #0]
 8004bd2:	e02f      	b.n	8004c34 <HAL_PCD_EP_DB_Transmit+0x736>
 8004bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	657b      	str	r3, [r7, #84]	; 0x54
 8004bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004be6:	3b01      	subs	r3, #1
 8004be8:	657b      	str	r3, [r7, #84]	; 0x54
 8004bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	029b      	lsls	r3, r3, #10
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bfe:	801a      	strh	r2, [r3, #0]
 8004c00:	e018      	b.n	8004c34 <HAL_PCD_EP_DB_Transmit+0x736>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	785b      	ldrb	r3, [r3, #1]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d114      	bne.n	8004c34 <HAL_PCD_EP_DB_Transmit+0x736>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c18:	4413      	add	r3, r2
 8004c1a:	667b      	str	r3, [r7, #100]	; 0x64
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	011a      	lsls	r2, r3, #4
 8004c22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c24:	4413      	add	r3, r2
 8004c26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c2a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c32:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6818      	ldr	r0, [r3, #0]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	6959      	ldr	r1, [r3, #20]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	895a      	ldrh	r2, [r3, #10]
 8004c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	f004 f875 	bl	8008d32 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c62:	823b      	strh	r3, [r7, #16]
 8004c64:	8a3b      	ldrh	r3, [r7, #16]
 8004c66:	f083 0310 	eor.w	r3, r3, #16
 8004c6a:	823b      	strh	r3, [r7, #16]
 8004c6c:	8a3b      	ldrh	r3, [r7, #16]
 8004c6e:	f083 0320 	eor.w	r3, r3, #32
 8004c72:	823b      	strh	r3, [r7, #16]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	8a3b      	ldrh	r3, [r7, #16]
 8004c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3788      	adds	r7, #136	; 0x88
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b087      	sub	sp, #28
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	607b      	str	r3, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	817b      	strh	r3, [r7, #10]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004cb4:	897b      	ldrh	r3, [r7, #10]
 8004cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cc0:	897b      	ldrh	r3, [r7, #10]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	e009      	b.n	8004cec <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004cd8:	897a      	ldrh	r2, [r7, #10]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004cec:	893b      	ldrh	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d107      	bne.n	8004d02 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	80da      	strh	r2, [r3, #6]
 8004d00:	e00b      	b.n	8004d1a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2201      	movs	r2, #1
 8004d06:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	0c1b      	lsrs	r3, r3, #16
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bc80      	pop	{r7}
 8004d24:	4770      	bx	lr
	...

08004d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e26c      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 8087 	beq.w	8004e56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d48:	4b92      	ldr	r3, [pc, #584]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 030c 	and.w	r3, r3, #12
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d00c      	beq.n	8004d6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d54:	4b8f      	ldr	r3, [pc, #572]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f003 030c 	and.w	r3, r3, #12
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d112      	bne.n	8004d86 <HAL_RCC_OscConfig+0x5e>
 8004d60:	4b8c      	ldr	r3, [pc, #560]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d10b      	bne.n	8004d86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d6e:	4b89      	ldr	r3, [pc, #548]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d06c      	beq.n	8004e54 <HAL_RCC_OscConfig+0x12c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d168      	bne.n	8004e54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e246      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d8e:	d106      	bne.n	8004d9e <HAL_RCC_OscConfig+0x76>
 8004d90:	4b80      	ldr	r3, [pc, #512]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a7f      	ldr	r2, [pc, #508]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	e02e      	b.n	8004dfc <HAL_RCC_OscConfig+0xd4>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10c      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x98>
 8004da6:	4b7b      	ldr	r3, [pc, #492]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a7a      	ldr	r2, [pc, #488]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	4b78      	ldr	r3, [pc, #480]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a77      	ldr	r2, [pc, #476]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e01d      	b.n	8004dfc <HAL_RCC_OscConfig+0xd4>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dc8:	d10c      	bne.n	8004de4 <HAL_RCC_OscConfig+0xbc>
 8004dca:	4b72      	ldr	r3, [pc, #456]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a71      	ldr	r2, [pc, #452]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	4b6f      	ldr	r3, [pc, #444]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a6e      	ldr	r2, [pc, #440]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e00b      	b.n	8004dfc <HAL_RCC_OscConfig+0xd4>
 8004de4:	4b6b      	ldr	r3, [pc, #428]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a6a      	ldr	r2, [pc, #424]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	4b68      	ldr	r3, [pc, #416]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a67      	ldr	r2, [pc, #412]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d013      	beq.n	8004e2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e04:	f7fd ff42 	bl	8002c8c <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e0c:	f7fd ff3e 	bl	8002c8c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b64      	cmp	r3, #100	; 0x64
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e1fa      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1e:	4b5d      	ldr	r3, [pc, #372]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0xe4>
 8004e2a:	e014      	b.n	8004e56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2c:	f7fd ff2e 	bl	8002c8c <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e34:	f7fd ff2a 	bl	8002c8c <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	; 0x64
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e1e6      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e46:	4b53      	ldr	r3, [pc, #332]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0x10c>
 8004e52:	e000      	b.n	8004e56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d063      	beq.n	8004f2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e62:	4b4c      	ldr	r3, [pc, #304]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f003 030c 	and.w	r3, r3, #12
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00b      	beq.n	8004e86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e6e:	4b49      	ldr	r3, [pc, #292]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f003 030c 	and.w	r3, r3, #12
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d11c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x18c>
 8004e7a:	4b46      	ldr	r3, [pc, #280]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d116      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e86:	4b43      	ldr	r3, [pc, #268]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <HAL_RCC_OscConfig+0x176>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d001      	beq.n	8004e9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e1ba      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9e:	4b3d      	ldr	r3, [pc, #244]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4939      	ldr	r1, [pc, #228]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eb2:	e03a      	b.n	8004f2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d020      	beq.n	8004efe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ebc:	4b36      	ldr	r3, [pc, #216]	; (8004f98 <HAL_RCC_OscConfig+0x270>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec2:	f7fd fee3 	bl	8002c8c <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eca:	f7fd fedf 	bl	8002c8c <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e19b      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004edc:	4b2d      	ldr	r3, [pc, #180]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee8:	4b2a      	ldr	r3, [pc, #168]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	4927      	ldr	r1, [pc, #156]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	600b      	str	r3, [r1, #0]
 8004efc:	e015      	b.n	8004f2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004efe:	4b26      	ldr	r3, [pc, #152]	; (8004f98 <HAL_RCC_OscConfig+0x270>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f04:	f7fd fec2 	bl	8002c8c <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f0c:	f7fd febe 	bl	8002c8c <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e17a      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1e:	4b1d      	ldr	r3, [pc, #116]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d03a      	beq.n	8004fac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d019      	beq.n	8004f72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f3e:	4b17      	ldr	r3, [pc, #92]	; (8004f9c <HAL_RCC_OscConfig+0x274>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f44:	f7fd fea2 	bl	8002c8c <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f4c:	f7fd fe9e 	bl	8002c8c <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e15a      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <HAL_RCC_OscConfig+0x26c>)
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	f000 fb0a 	bl	8005584 <RCC_Delay>
 8004f70:	e01c      	b.n	8004fac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f72:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <HAL_RCC_OscConfig+0x274>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f78:	f7fd fe88 	bl	8002c8c <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f7e:	e00f      	b.n	8004fa0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f80:	f7fd fe84 	bl	8002c8c <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d908      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e140      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>
 8004f92:	bf00      	nop
 8004f94:	40021000 	.word	0x40021000
 8004f98:	42420000 	.word	0x42420000
 8004f9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa0:	4b9e      	ldr	r3, [pc, #632]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e9      	bne.n	8004f80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80a6 	beq.w	8005106 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fbe:	4b97      	ldr	r3, [pc, #604]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10d      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fca:	4b94      	ldr	r3, [pc, #592]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	4a93      	ldr	r2, [pc, #588]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8004fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	61d3      	str	r3, [r2, #28]
 8004fd6:	4b91      	ldr	r3, [pc, #580]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe6:	4b8e      	ldr	r3, [pc, #568]	; (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d118      	bne.n	8005024 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ff2:	4b8b      	ldr	r3, [pc, #556]	; (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a8a      	ldr	r2, [pc, #552]	; (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8004ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ffe:	f7fd fe45 	bl	8002c8c <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005006:	f7fd fe41 	bl	8002c8c <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b64      	cmp	r3, #100	; 0x64
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e0fd      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005018:	4b81      	ldr	r3, [pc, #516]	; (8005220 <HAL_RCC_OscConfig+0x4f8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d106      	bne.n	800503a <HAL_RCC_OscConfig+0x312>
 800502c:	4b7b      	ldr	r3, [pc, #492]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	4a7a      	ldr	r2, [pc, #488]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	6213      	str	r3, [r2, #32]
 8005038:	e02d      	b.n	8005096 <HAL_RCC_OscConfig+0x36e>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10c      	bne.n	800505c <HAL_RCC_OscConfig+0x334>
 8005042:	4b76      	ldr	r3, [pc, #472]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	4a75      	ldr	r2, [pc, #468]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	6213      	str	r3, [r2, #32]
 800504e:	4b73      	ldr	r3, [pc, #460]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	4a72      	ldr	r2, [pc, #456]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005054:	f023 0304 	bic.w	r3, r3, #4
 8005058:	6213      	str	r3, [r2, #32]
 800505a:	e01c      	b.n	8005096 <HAL_RCC_OscConfig+0x36e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	2b05      	cmp	r3, #5
 8005062:	d10c      	bne.n	800507e <HAL_RCC_OscConfig+0x356>
 8005064:	4b6d      	ldr	r3, [pc, #436]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	4a6c      	ldr	r2, [pc, #432]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 800506a:	f043 0304 	orr.w	r3, r3, #4
 800506e:	6213      	str	r3, [r2, #32]
 8005070:	4b6a      	ldr	r3, [pc, #424]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	4a69      	ldr	r2, [pc, #420]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005076:	f043 0301 	orr.w	r3, r3, #1
 800507a:	6213      	str	r3, [r2, #32]
 800507c:	e00b      	b.n	8005096 <HAL_RCC_OscConfig+0x36e>
 800507e:	4b67      	ldr	r3, [pc, #412]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	4a66      	ldr	r2, [pc, #408]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005084:	f023 0301 	bic.w	r3, r3, #1
 8005088:	6213      	str	r3, [r2, #32]
 800508a:	4b64      	ldr	r3, [pc, #400]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	4a63      	ldr	r2, [pc, #396]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005090:	f023 0304 	bic.w	r3, r3, #4
 8005094:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d015      	beq.n	80050ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800509e:	f7fd fdf5 	bl	8002c8c <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a4:	e00a      	b.n	80050bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a6:	f7fd fdf1 	bl	8002c8c <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e0ab      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050bc:	4b57      	ldr	r3, [pc, #348]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0ee      	beq.n	80050a6 <HAL_RCC_OscConfig+0x37e>
 80050c8:	e014      	b.n	80050f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ca:	f7fd fddf 	bl	8002c8c <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d0:	e00a      	b.n	80050e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d2:	f7fd fddb 	bl	8002c8c <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e095      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e8:	4b4c      	ldr	r3, [pc, #304]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1ee      	bne.n	80050d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d105      	bne.n	8005106 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050fa:	4b48      	ldr	r3, [pc, #288]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	4a47      	ldr	r2, [pc, #284]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005104:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 8081 	beq.w	8005212 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005110:	4b42      	ldr	r3, [pc, #264]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 030c 	and.w	r3, r3, #12
 8005118:	2b08      	cmp	r3, #8
 800511a:	d061      	beq.n	80051e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d146      	bne.n	80051b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005124:	4b3f      	ldr	r3, [pc, #252]	; (8005224 <HAL_RCC_OscConfig+0x4fc>)
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512a:	f7fd fdaf 	bl	8002c8c <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005132:	f7fd fdab 	bl	8002c8c <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e067      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005144:	4b35      	ldr	r3, [pc, #212]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1f0      	bne.n	8005132 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005158:	d108      	bne.n	800516c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800515a:	4b30      	ldr	r3, [pc, #192]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	492d      	ldr	r1, [pc, #180]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005168:	4313      	orrs	r3, r2
 800516a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800516c:	4b2b      	ldr	r3, [pc, #172]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a19      	ldr	r1, [r3, #32]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	430b      	orrs	r3, r1
 800517e:	4927      	ldr	r1, [pc, #156]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 8005180:	4313      	orrs	r3, r2
 8005182:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005184:	4b27      	ldr	r3, [pc, #156]	; (8005224 <HAL_RCC_OscConfig+0x4fc>)
 8005186:	2201      	movs	r2, #1
 8005188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518a:	f7fd fd7f 	bl	8002c8c <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005192:	f7fd fd7b 	bl	8002c8c <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e037      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051a4:	4b1d      	ldr	r3, [pc, #116]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_RCC_OscConfig+0x46a>
 80051b0:	e02f      	b.n	8005212 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b2:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <HAL_RCC_OscConfig+0x4fc>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b8:	f7fd fd68 	bl	8002c8c <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c0:	f7fd fd64 	bl	8002c8c <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e020      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051d2:	4b12      	ldr	r3, [pc, #72]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f0      	bne.n	80051c0 <HAL_RCC_OscConfig+0x498>
 80051de:	e018      	b.n	8005212 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e013      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <HAL_RCC_OscConfig+0x4f4>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d106      	bne.n	800520e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d001      	beq.n	8005212 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40021000 	.word	0x40021000
 8005220:	40007000 	.word	0x40007000
 8005224:	42420060 	.word	0x42420060

08005228 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e0d0      	b.n	80053de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800523c:	4b6a      	ldr	r3, [pc, #424]	; (80053e8 <HAL_RCC_ClockConfig+0x1c0>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d910      	bls.n	800526c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524a:	4b67      	ldr	r3, [pc, #412]	; (80053e8 <HAL_RCC_ClockConfig+0x1c0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f023 0207 	bic.w	r2, r3, #7
 8005252:	4965      	ldr	r1, [pc, #404]	; (80053e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	4313      	orrs	r3, r2
 8005258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800525a:	4b63      	ldr	r3, [pc, #396]	; (80053e8 <HAL_RCC_ClockConfig+0x1c0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d001      	beq.n	800526c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0b8      	b.n	80053de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d020      	beq.n	80052ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005284:	4b59      	ldr	r3, [pc, #356]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	4a58      	ldr	r2, [pc, #352]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 800528a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800528e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800529c:	4b53      	ldr	r3, [pc, #332]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	4a52      	ldr	r2, [pc, #328]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 80052a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80052a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a8:	4b50      	ldr	r3, [pc, #320]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	494d      	ldr	r1, [pc, #308]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d040      	beq.n	8005348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d107      	bne.n	80052de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ce:	4b47      	ldr	r3, [pc, #284]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d115      	bne.n	8005306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e07f      	b.n	80053de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d107      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e6:	4b41      	ldr	r3, [pc, #260]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e073      	b.n	80053de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f6:	4b3d      	ldr	r3, [pc, #244]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e06b      	b.n	80053de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005306:	4b39      	ldr	r3, [pc, #228]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f023 0203 	bic.w	r2, r3, #3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	4936      	ldr	r1, [pc, #216]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 8005314:	4313      	orrs	r3, r2
 8005316:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005318:	f7fd fcb8 	bl	8002c8c <HAL_GetTick>
 800531c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531e:	e00a      	b.n	8005336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005320:	f7fd fcb4 	bl	8002c8c <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	f241 3288 	movw	r2, #5000	; 0x1388
 800532e:	4293      	cmp	r3, r2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e053      	b.n	80053de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005336:	4b2d      	ldr	r3, [pc, #180]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f003 020c 	and.w	r2, r3, #12
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	429a      	cmp	r2, r3
 8005346:	d1eb      	bne.n	8005320 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005348:	4b27      	ldr	r3, [pc, #156]	; (80053e8 <HAL_RCC_ClockConfig+0x1c0>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d210      	bcs.n	8005378 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005356:	4b24      	ldr	r3, [pc, #144]	; (80053e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f023 0207 	bic.w	r2, r3, #7
 800535e:	4922      	ldr	r1, [pc, #136]	; (80053e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	4313      	orrs	r3, r2
 8005364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005366:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d001      	beq.n	8005378 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e032      	b.n	80053de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005384:	4b19      	ldr	r3, [pc, #100]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	4916      	ldr	r1, [pc, #88]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 8005392:	4313      	orrs	r3, r2
 8005394:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d009      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	490e      	ldr	r1, [pc, #56]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053b6:	f000 f821 	bl	80053fc <HAL_RCC_GetSysClockFreq>
 80053ba:	4602      	mov	r2, r0
 80053bc:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	490a      	ldr	r1, [pc, #40]	; (80053f0 <HAL_RCC_ClockConfig+0x1c8>)
 80053c8:	5ccb      	ldrb	r3, [r1, r3]
 80053ca:	fa22 f303 	lsr.w	r3, r2, r3
 80053ce:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <HAL_RCC_ClockConfig+0x1cc>)
 80053d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <HAL_RCC_ClockConfig+0x1d0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fd faf8 	bl	80029cc <HAL_InitTick>

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40022000 	.word	0x40022000
 80053ec:	40021000 	.word	0x40021000
 80053f0:	0800e618 	.word	0x0800e618
 80053f4:	20000010 	.word	0x20000010
 80053f8:	20000014 	.word	0x20000014

080053fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053fc:	b490      	push	{r4, r7}
 80053fe:	b08a      	sub	sp, #40	; 0x28
 8005400:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005402:	4b2a      	ldr	r3, [pc, #168]	; (80054ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8005404:	1d3c      	adds	r4, r7, #4
 8005406:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005408:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800540c:	f240 2301 	movw	r3, #513	; 0x201
 8005410:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	2300      	movs	r3, #0
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	2300      	movs	r3, #0
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005426:	4b22      	ldr	r3, [pc, #136]	; (80054b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f003 030c 	and.w	r3, r3, #12
 8005432:	2b04      	cmp	r3, #4
 8005434:	d002      	beq.n	800543c <HAL_RCC_GetSysClockFreq+0x40>
 8005436:	2b08      	cmp	r3, #8
 8005438:	d003      	beq.n	8005442 <HAL_RCC_GetSysClockFreq+0x46>
 800543a:	e02d      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800543c:	4b1d      	ldr	r3, [pc, #116]	; (80054b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800543e:	623b      	str	r3, [r7, #32]
      break;
 8005440:	e02d      	b.n	800549e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	0c9b      	lsrs	r3, r3, #18
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800544e:	4413      	add	r3, r2
 8005450:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005454:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d013      	beq.n	8005488 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005460:	4b13      	ldr	r3, [pc, #76]	; (80054b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	0c5b      	lsrs	r3, r3, #17
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800546e:	4413      	add	r3, r2
 8005470:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005474:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	4a0e      	ldr	r2, [pc, #56]	; (80054b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800547a:	fb02 f203 	mul.w	r2, r2, r3
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
 8005486:	e004      	b.n	8005492 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	4a0b      	ldr	r2, [pc, #44]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800548c:	fb02 f303 	mul.w	r3, r2, r3
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	623b      	str	r3, [r7, #32]
      break;
 8005496:	e002      	b.n	800549e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005498:	4b08      	ldr	r3, [pc, #32]	; (80054bc <HAL_RCC_GetSysClockFreq+0xc0>)
 800549a:	623b      	str	r3, [r7, #32]
      break;
 800549c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800549e:	6a3b      	ldr	r3, [r7, #32]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3728      	adds	r7, #40	; 0x28
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc90      	pop	{r4, r7}
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	0800e008 	.word	0x0800e008
 80054b0:	40021000 	.word	0x40021000
 80054b4:	00f42400 	.word	0x00f42400
 80054b8:	003d0900 	.word	0x003d0900
 80054bc:	007a1200 	.word	0x007a1200

080054c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054c4:	4b02      	ldr	r3, [pc, #8]	; (80054d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80054c6:	681b      	ldr	r3, [r3, #0]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr
 80054d0:	20000010 	.word	0x20000010

080054d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054d8:	f7ff fff2 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 80054dc:	4602      	mov	r2, r0
 80054de:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	0a1b      	lsrs	r3, r3, #8
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	4903      	ldr	r1, [pc, #12]	; (80054f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ea:	5ccb      	ldrb	r3, [r1, r3]
 80054ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40021000 	.word	0x40021000
 80054f8:	0800e628 	.word	0x0800e628

080054fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005500:	f7ff ffde 	bl	80054c0 <HAL_RCC_GetHCLKFreq>
 8005504:	4602      	mov	r2, r0
 8005506:	4b05      	ldr	r3, [pc, #20]	; (800551c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	0adb      	lsrs	r3, r3, #11
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	4903      	ldr	r1, [pc, #12]	; (8005520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005512:	5ccb      	ldrb	r3, [r1, r3]
 8005514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005518:	4618      	mov	r0, r3
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40021000 	.word	0x40021000
 8005520:	0800e628 	.word	0x0800e628

08005524 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	220f      	movs	r2, #15
 8005532:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005534:	4b11      	ldr	r3, [pc, #68]	; (800557c <HAL_RCC_GetClockConfig+0x58>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f003 0203 	and.w	r2, r3, #3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005540:	4b0e      	ldr	r3, [pc, #56]	; (800557c <HAL_RCC_GetClockConfig+0x58>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800554c:	4b0b      	ldr	r3, [pc, #44]	; (800557c <HAL_RCC_GetClockConfig+0x58>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <HAL_RCC_GetClockConfig+0x58>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	08db      	lsrs	r3, r3, #3
 800555e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005566:	4b06      	ldr	r3, [pc, #24]	; (8005580 <HAL_RCC_GetClockConfig+0x5c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0207 	and.w	r2, r3, #7
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr
 800557c:	40021000 	.word	0x40021000
 8005580:	40022000 	.word	0x40022000

08005584 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800558c:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <RCC_Delay+0x34>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <RCC_Delay+0x38>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	0a5b      	lsrs	r3, r3, #9
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	fb02 f303 	mul.w	r3, r2, r3
 800559e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80055a0:	bf00      	nop
  }
  while (Delay --);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	1e5a      	subs	r2, r3, #1
 80055a6:	60fa      	str	r2, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f9      	bne.n	80055a0 <RCC_Delay+0x1c>
}
 80055ac:	bf00      	nop
 80055ae:	bf00      	nop
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bc80      	pop	{r7}
 80055b6:	4770      	bx	lr
 80055b8:	20000010 	.word	0x20000010
 80055bc:	10624dd3 	.word	0x10624dd3

080055c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d07d      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80055dc:	2300      	movs	r3, #0
 80055de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055e0:	4b4f      	ldr	r3, [pc, #316]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10d      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ec:	4b4c      	ldr	r3, [pc, #304]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	4a4b      	ldr	r2, [pc, #300]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f6:	61d3      	str	r3, [r2, #28]
 80055f8:	4b49      	ldr	r3, [pc, #292]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005604:	2301      	movs	r3, #1
 8005606:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005608:	4b46      	ldr	r3, [pc, #280]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005610:	2b00      	cmp	r3, #0
 8005612:	d118      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005614:	4b43      	ldr	r3, [pc, #268]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a42      	ldr	r2, [pc, #264]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800561a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800561e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005620:	f7fd fb34 	bl	8002c8c <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005626:	e008      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005628:	f7fd fb30 	bl	8002c8c <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b64      	cmp	r3, #100	; 0x64
 8005634:	d901      	bls.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e06d      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563a:	4b3a      	ldr	r3, [pc, #232]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0f0      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005646:	4b36      	ldr	r3, [pc, #216]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800564e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d02e      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	429a      	cmp	r2, r3
 8005662:	d027      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005664:	4b2e      	ldr	r3, [pc, #184]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800566c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800566e:	4b2e      	ldr	r3, [pc, #184]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005670:	2201      	movs	r2, #1
 8005672:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005674:	4b2c      	ldr	r3, [pc, #176]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800567a:	4a29      	ldr	r2, [pc, #164]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d014      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800568a:	f7fd faff 	bl	8002c8c <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005690:	e00a      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005692:	f7fd fafb 	bl	8002c8c <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e036      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a8:	4b1d      	ldr	r3, [pc, #116]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0ee      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056b4:	4b1a      	ldr	r3, [pc, #104]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	4917      	ldr	r1, [pc, #92]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056c6:	7dfb      	ldrb	r3, [r7, #23]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d105      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056cc:	4b14      	ldr	r3, [pc, #80]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	4a13      	ldr	r2, [pc, #76]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d008      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056e4:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	490b      	ldr	r1, [pc, #44]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d008      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005702:	4b07      	ldr	r3, [pc, #28]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	4904      	ldr	r1, [pc, #16]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005710:	4313      	orrs	r3, r2
 8005712:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	40021000 	.word	0x40021000
 8005724:	40007000 	.word	0x40007000
 8005728:	42420440 	.word	0x42420440

0800572c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e076      	b.n	800582c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2b00      	cmp	r3, #0
 8005744:	d108      	bne.n	8005758 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800574e:	d009      	beq.n	8005764 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	61da      	str	r2, [r3, #28]
 8005756:	e005      	b.n	8005764 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fd f8a0 	bl	80028c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800579a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e8:	ea42 0103 	orr.w	r1, r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	0c1a      	lsrs	r2, r3, #16
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f002 0204 	and.w	r2, r2, #4
 800580a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800581a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	4613      	mov	r3, r2
 8005842:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_SPI_Transmit+0x22>
 8005852:	2302      	movs	r3, #2
 8005854:	e126      	b.n	8005aa4 <HAL_SPI_Transmit+0x270>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800585e:	f7fd fa15 	bl	8002c8c <HAL_GetTick>
 8005862:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005864:	88fb      	ldrh	r3, [r7, #6]
 8005866:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b01      	cmp	r3, #1
 8005872:	d002      	beq.n	800587a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005874:	2302      	movs	r3, #2
 8005876:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005878:	e10b      	b.n	8005a92 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <HAL_SPI_Transmit+0x52>
 8005880:	88fb      	ldrh	r3, [r7, #6]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d102      	bne.n	800588c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	77fb      	strb	r3, [r7, #31]
    goto error;
 800588a:	e102      	b.n	8005a92 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2203      	movs	r2, #3
 8005890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	88fa      	ldrh	r2, [r7, #6]
 80058a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	88fa      	ldrh	r2, [r7, #6]
 80058aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d2:	d10f      	bne.n	80058f4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d007      	beq.n	8005912 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005910:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800591a:	d14b      	bne.n	80059b4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <HAL_SPI_Transmit+0xf6>
 8005924:	8afb      	ldrh	r3, [r7, #22]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d13e      	bne.n	80059a8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	881a      	ldrh	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	1c9a      	adds	r2, r3, #2
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005944:	b29b      	uxth	r3, r3
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800594e:	e02b      	b.n	80059a8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b02      	cmp	r3, #2
 800595c:	d112      	bne.n	8005984 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	881a      	ldrh	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	1c9a      	adds	r2, r3, #2
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	86da      	strh	r2, [r3, #54]	; 0x36
 8005982:	e011      	b.n	80059a8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005984:	f7fd f982 	bl	8002c8c <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d803      	bhi.n	800599c <HAL_SPI_Transmit+0x168>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599a:	d102      	bne.n	80059a2 <HAL_SPI_Transmit+0x16e>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d102      	bne.n	80059a8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059a6:	e074      	b.n	8005a92 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1ce      	bne.n	8005950 <HAL_SPI_Transmit+0x11c>
 80059b2:	e04c      	b.n	8005a4e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_SPI_Transmit+0x18e>
 80059bc:	8afb      	ldrh	r3, [r7, #22]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d140      	bne.n	8005a44 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	330c      	adds	r3, #12
 80059cc:	7812      	ldrb	r2, [r2, #0]
 80059ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80059e8:	e02c      	b.n	8005a44 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d113      	bne.n	8005a20 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	7812      	ldrb	r2, [r2, #0]
 8005a04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a1e:	e011      	b.n	8005a44 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a20:	f7fd f934 	bl	8002c8c <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d803      	bhi.n	8005a38 <HAL_SPI_Transmit+0x204>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d102      	bne.n	8005a3e <HAL_SPI_Transmit+0x20a>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d102      	bne.n	8005a44 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a42:	e026      	b.n	8005a92 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1cd      	bne.n	80059ea <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f8b2 	bl	8005bbc <SPI_EndRxTxTransaction>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2220      	movs	r2, #32
 8005a62:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	613b      	str	r3, [r7, #16]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	613b      	str	r3, [r7, #16]
 8005a80:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	77fb      	strb	r3, [r7, #31]
 8005a8e:	e000      	b.n	8005a92 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005a90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005aa2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3720      	adds	r7, #32
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b088      	sub	sp, #32
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005abc:	f7fd f8e6 	bl	8002c8c <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	1a9b      	subs	r3, r3, r2
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	4413      	add	r3, r2
 8005aca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005acc:	f7fd f8de 	bl	8002c8c <HAL_GetTick>
 8005ad0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ad2:	4b39      	ldr	r3, [pc, #228]	; (8005bb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	015b      	lsls	r3, r3, #5
 8005ad8:	0d1b      	lsrs	r3, r3, #20
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	fb02 f303 	mul.w	r3, r2, r3
 8005ae0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ae2:	e054      	b.n	8005b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aea:	d050      	beq.n	8005b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005aec:	f7fd f8ce 	bl	8002c8c <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d902      	bls.n	8005b02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d13d      	bne.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b1a:	d111      	bne.n	8005b40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b24:	d004      	beq.n	8005b30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b2e:	d107      	bne.n	8005b40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b48:	d10f      	bne.n	8005b6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e017      	b.n	8005bae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	4013      	ands	r3, r2
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	bf0c      	ite	eq
 8005b9e:	2301      	moveq	r3, #1
 8005ba0:	2300      	movne	r3, #0
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d19b      	bne.n	8005ae4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3720      	adds	r7, #32
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000010 	.word	0x20000010

08005bbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2180      	movs	r1, #128	; 0x80
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f7ff ff6a 	bl	8005aac <SPI_WaitFlagStateUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be2:	f043 0220 	orr.w	r2, r3, #32
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e000      	b.n	8005bf0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e041      	b.n	8005c8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f839 	bl	8005c96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3304      	adds	r3, #4
 8005c34:	4619      	mov	r1, r3
 8005c36:	4610      	mov	r0, r2
 8005c38:	f000 f9b4 	bl	8005fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d001      	beq.n	8005cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e03a      	b.n	8005d36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 0201 	orr.w	r2, r2, #1
 8005cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a18      	ldr	r2, [pc, #96]	; (8005d40 <HAL_TIM_Base_Start_IT+0x98>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00e      	beq.n	8005d00 <HAL_TIM_Base_Start_IT+0x58>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cea:	d009      	beq.n	8005d00 <HAL_TIM_Base_Start_IT+0x58>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a14      	ldr	r2, [pc, #80]	; (8005d44 <HAL_TIM_Base_Start_IT+0x9c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d004      	beq.n	8005d00 <HAL_TIM_Base_Start_IT+0x58>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <HAL_TIM_Base_Start_IT+0xa0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d111      	bne.n	8005d24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b06      	cmp	r3, #6
 8005d10:	d010      	beq.n	8005d34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0201 	orr.w	r2, r2, #1
 8005d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d22:	e007      	b.n	8005d34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr
 8005d40:	40012c00 	.word	0x40012c00
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800

08005d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d122      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d11b      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0202 	mvn.w	r2, #2
 8005d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f8ed 	bl	8005f6e <HAL_TIM_IC_CaptureCallback>
 8005d94:	e005      	b.n	8005da2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f8e0 	bl	8005f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f8ef 	bl	8005f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d122      	bne.n	8005dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d11b      	bne.n	8005dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0204 	mvn.w	r2, #4
 8005dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f8c3 	bl	8005f6e <HAL_TIM_IC_CaptureCallback>
 8005de8:	e005      	b.n	8005df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f8b6 	bl	8005f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f8c5 	bl	8005f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b08      	cmp	r3, #8
 8005e08:	d122      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d11b      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0208 	mvn.w	r2, #8
 8005e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2204      	movs	r2, #4
 8005e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f899 	bl	8005f6e <HAL_TIM_IC_CaptureCallback>
 8005e3c:	e005      	b.n	8005e4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f88c 	bl	8005f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f89b 	bl	8005f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0310 	and.w	r3, r3, #16
 8005e5a:	2b10      	cmp	r3, #16
 8005e5c:	d122      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0310 	and.w	r3, r3, #16
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d11b      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0210 	mvn.w	r2, #16
 8005e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f86f 	bl	8005f6e <HAL_TIM_IC_CaptureCallback>
 8005e90:	e005      	b.n	8005e9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f862 	bl	8005f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f871 	bl	8005f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d10e      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d107      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0201 	mvn.w	r2, #1
 8005ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fa ff66 	bl	8000d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eda:	2b80      	cmp	r3, #128	; 0x80
 8005edc:	d10e      	bne.n	8005efc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee8:	2b80      	cmp	r3, #128	; 0x80
 8005eea:	d107      	bne.n	8005efc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f8bf 	bl	800607a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f06:	2b40      	cmp	r3, #64	; 0x40
 8005f08:	d10e      	bne.n	8005f28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f14:	2b40      	cmp	r3, #64	; 0x40
 8005f16:	d107      	bne.n	8005f28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f835 	bl	8005f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d10e      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b20      	cmp	r3, #32
 8005f42:	d107      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f06f 0220 	mvn.w	r2, #32
 8005f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f88a 	bl	8006068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f54:	bf00      	nop
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bc80      	pop	{r7}
 8005f6c:	4770      	bx	lr

08005f6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr

08005f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bc80      	pop	{r7}
 8005f90:	4770      	bx	lr

08005f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr

08005fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a29      	ldr	r2, [pc, #164]	; (800605c <TIM_Base_SetConfig+0xb8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00b      	beq.n	8005fd4 <TIM_Base_SetConfig+0x30>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc2:	d007      	beq.n	8005fd4 <TIM_Base_SetConfig+0x30>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a26      	ldr	r2, [pc, #152]	; (8006060 <TIM_Base_SetConfig+0xbc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d003      	beq.n	8005fd4 <TIM_Base_SetConfig+0x30>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a25      	ldr	r2, [pc, #148]	; (8006064 <TIM_Base_SetConfig+0xc0>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d108      	bne.n	8005fe6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a1c      	ldr	r2, [pc, #112]	; (800605c <TIM_Base_SetConfig+0xb8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d00b      	beq.n	8006006 <TIM_Base_SetConfig+0x62>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff4:	d007      	beq.n	8006006 <TIM_Base_SetConfig+0x62>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a19      	ldr	r2, [pc, #100]	; (8006060 <TIM_Base_SetConfig+0xbc>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d003      	beq.n	8006006 <TIM_Base_SetConfig+0x62>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a18      	ldr	r2, [pc, #96]	; (8006064 <TIM_Base_SetConfig+0xc0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d108      	bne.n	8006018 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800600c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	4313      	orrs	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a07      	ldr	r2, [pc, #28]	; (800605c <TIM_Base_SetConfig+0xb8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d103      	bne.n	800604c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	691a      	ldr	r2, [r3, #16]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	615a      	str	r2, [r3, #20]
}
 8006052:	bf00      	nop
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	bc80      	pop	{r7}
 800605a:	4770      	bx	lr
 800605c:	40012c00 	.word	0x40012c00
 8006060:	40000400 	.word	0x40000400
 8006064:	40000800 	.word	0x40000800

08006068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	bc80      	pop	{r7}
 8006078:	4770      	bx	lr

0800607a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006082:	bf00      	nop
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	bc80      	pop	{r7}
 800608a:	4770      	bx	lr

0800608c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e03f      	b.n	800611e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fc fd4a 	bl	8002b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2224      	movs	r2, #36	; 0x24
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fba9 	bl	8006828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695a      	ldr	r2, [r3, #20]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	4613      	mov	r3, r2
 8006132:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b20      	cmp	r3, #32
 800613e:	d11d      	bne.n	800617c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <HAL_UART_Receive_IT+0x26>
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e016      	b.n	800617e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_UART_Receive_IT+0x38>
 800615a:	2302      	movs	r3, #2
 800615c:	e00f      	b.n	800617e <HAL_UART_Receive_IT+0x58>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800616c:	88fb      	ldrh	r3, [r7, #6]
 800616e:	461a      	mov	r2, r3
 8006170:	68b9      	ldr	r1, [r7, #8]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 f9cf 	bl	8006516 <UART_Start_Receive_IT>
 8006178:	4603      	mov	r3, r0
 800617a:	e000      	b.n	800617e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800617c:	2302      	movs	r3, #2
  }
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
	...

08006188 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08a      	sub	sp, #40	; 0x28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80061a8:	2300      	movs	r3, #0
 80061aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10d      	bne.n	80061da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d008      	beq.n	80061da <HAL_UART_IRQHandler+0x52>
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fa7f 	bl	80066d6 <UART_Receive_IT>
      return;
 80061d8:	e17b      	b.n	80064d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 80b1 	beq.w	8006344 <HAL_UART_IRQHandler+0x1bc>
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d105      	bne.n	80061f8 <HAL_UART_IRQHandler+0x70>
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 80a6 	beq.w	8006344 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <HAL_UART_IRQHandler+0x90>
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006210:	f043 0201 	orr.w	r2, r3, #1
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	f003 0304 	and.w	r3, r3, #4
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <HAL_UART_IRQHandler+0xb0>
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d005      	beq.n	8006238 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	f043 0202 	orr.w	r2, r3, #2
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <HAL_UART_IRQHandler+0xd0>
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006250:	f043 0204 	orr.w	r2, r3, #4
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00f      	beq.n	8006282 <HAL_UART_IRQHandler+0xfa>
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	f003 0320 	and.w	r3, r3, #32
 8006268:	2b00      	cmp	r3, #0
 800626a:	d104      	bne.n	8006276 <HAL_UART_IRQHandler+0xee>
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f043 0208 	orr.w	r2, r3, #8
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 811e 	beq.w	80064c8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d007      	beq.n	80062a6 <HAL_UART_IRQHandler+0x11e>
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fa18 	bl	80066d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	bf14      	ite	ne
 80062b4:	2301      	movne	r3, #1
 80062b6:	2300      	moveq	r3, #0
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d102      	bne.n	80062ce <HAL_UART_IRQHandler+0x146>
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d031      	beq.n	8006332 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f95a 	bl	8006588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d023      	beq.n	800632a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	695a      	ldr	r2, [r3, #20]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d013      	beq.n	8006322 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	4a76      	ldr	r2, [pc, #472]	; (80064d8 <HAL_UART_IRQHandler+0x350>)
 8006300:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	4618      	mov	r0, r3
 8006308:	f7fc fde4 	bl	8002ed4 <HAL_DMA_Abort_IT>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d016      	beq.n	8006340 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800631c:	4610      	mov	r0, r2
 800631e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006320:	e00e      	b.n	8006340 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f8e3 	bl	80064ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006328:	e00a      	b.n	8006340 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f8df 	bl	80064ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006330:	e006      	b.n	8006340 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f8db 	bl	80064ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800633e:	e0c3      	b.n	80064c8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006340:	bf00      	nop
    return;
 8006342:	e0c1      	b.n	80064c8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	2b01      	cmp	r3, #1
 800634a:	f040 80a1 	bne.w	8006490 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 809b 	beq.w	8006490 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	f003 0310 	and.w	r3, r3, #16
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 8095 	beq.w	8006490 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006366:	2300      	movs	r3, #0
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d04e      	beq.n	8006428 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006394:	8a3b      	ldrh	r3, [r7, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 8098 	beq.w	80064cc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063a0:	8a3a      	ldrh	r2, [r7, #16]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	f080 8092 	bcs.w	80064cc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	8a3a      	ldrh	r2, [r7, #16]
 80063ac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d02b      	beq.n	8006410 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063c6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	695a      	ldr	r2, [r3, #20]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0201 	bic.w	r2, r2, #1
 80063d6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695a      	ldr	r2, [r3, #20]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68da      	ldr	r2, [r3, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0210 	bic.w	r2, r2, #16
 8006404:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640a:	4618      	mov	r0, r3
 800640c:	f7fc fd27 	bl	8002e5e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006418:	b29b      	uxth	r3, r3
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	b29b      	uxth	r3, r3
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f86d 	bl	8006500 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006426:	e051      	b.n	80064cc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006430:	b29b      	uxth	r3, r3
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d047      	beq.n	80064d0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006440:	8a7b      	ldrh	r3, [r7, #18]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d044      	beq.n	80064d0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006454:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	695a      	ldr	r2, [r3, #20]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0201 	bic.w	r2, r2, #1
 8006464:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0210 	bic.w	r2, r2, #16
 8006482:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006484:	8a7b      	ldrh	r3, [r7, #18]
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f839 	bl	8006500 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800648e:	e01f      	b.n	80064d0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006496:	2b00      	cmp	r3, #0
 8006498:	d008      	beq.n	80064ac <HAL_UART_IRQHandler+0x324>
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f8af 	bl	8006608 <UART_Transmit_IT>
    return;
 80064aa:	e012      	b.n	80064d2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00d      	beq.n	80064d2 <HAL_UART_IRQHandler+0x34a>
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d008      	beq.n	80064d2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f8f0 	bl	80066a6 <UART_EndTransmit_IT>
    return;
 80064c6:	e004      	b.n	80064d2 <HAL_UART_IRQHandler+0x34a>
    return;
 80064c8:	bf00      	nop
 80064ca:	e002      	b.n	80064d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80064cc:	bf00      	nop
 80064ce:	e000      	b.n	80064d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80064d0:	bf00      	nop
  }
}
 80064d2:	3728      	adds	r7, #40	; 0x28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	080065e1 	.word	0x080065e1

080064dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc80      	pop	{r7}
 80064ec:	4770      	bx	lr

080064ee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bc80      	pop	{r7}
 80064fe:	4770      	bx	lr

08006500 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	bc80      	pop	{r7}
 8006514:	4770      	bx	lr

08006516 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006516:	b480      	push	{r7}
 8006518:	b085      	sub	sp, #20
 800651a:	af00      	add	r7, sp, #0
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	4613      	mov	r3, r2
 8006522:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	88fa      	ldrh	r2, [r7, #6]
 800652e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	88fa      	ldrh	r2, [r7, #6]
 8006534:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2222      	movs	r2, #34	; 0x22
 8006540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800655a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	695a      	ldr	r2, [r3, #20]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0220 	orr.w	r2, r2, #32
 800657a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	bc80      	pop	{r7}
 8006586:	4770      	bx	lr

08006588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800659e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695a      	ldr	r2, [r3, #20]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0201 	bic.w	r2, r2, #1
 80065ae:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d107      	bne.n	80065c8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0210 	bic.w	r2, r2, #16
 80065c6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	bc80      	pop	{r7}
 80065de:	4770      	bx	lr

080065e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f7ff ff77 	bl	80064ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006600:	bf00      	nop
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b21      	cmp	r3, #33	; 0x21
 800661a:	d13e      	bne.n	800669a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006624:	d114      	bne.n	8006650 <UART_Transmit_IT+0x48>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d110      	bne.n	8006650 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	461a      	mov	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006642:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	1c9a      	adds	r2, r3, #2
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	621a      	str	r2, [r3, #32]
 800664e:	e008      	b.n	8006662 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	1c59      	adds	r1, r3, #1
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	6211      	str	r1, [r2, #32]
 800665a:	781a      	ldrb	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006666:	b29b      	uxth	r3, r3
 8006668:	3b01      	subs	r3, #1
 800666a:	b29b      	uxth	r3, r3
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	4619      	mov	r1, r3
 8006670:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10f      	bne.n	8006696 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006684:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006694:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	e000      	b.n	800669c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800669a:	2302      	movs	r3, #2
  }
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bc80      	pop	{r7}
 80066a4:	4770      	bx	lr

080066a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b082      	sub	sp, #8
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7ff ff08 	bl	80064dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b22      	cmp	r3, #34	; 0x22
 80066e8:	f040 8099 	bne.w	800681e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f4:	d117      	bne.n	8006726 <UART_Receive_IT+0x50>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d113      	bne.n	8006726 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006706:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	b29b      	uxth	r3, r3
 8006710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006714:	b29a      	uxth	r2, r3
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671e:	1c9a      	adds	r2, r3, #2
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	629a      	str	r2, [r3, #40]	; 0x28
 8006724:	e026      	b.n	8006774 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800672c:	2300      	movs	r3, #0
 800672e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006738:	d007      	beq.n	800674a <UART_Receive_IT+0x74>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10a      	bne.n	8006758 <UART_Receive_IT+0x82>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	b2da      	uxtb	r2, r3
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	e008      	b.n	800676a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	b2db      	uxtb	r3, r3
 8006760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006764:	b2da      	uxtb	r2, r3
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006778:	b29b      	uxth	r3, r3
 800677a:	3b01      	subs	r3, #1
 800677c:	b29b      	uxth	r3, r3
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	4619      	mov	r1, r3
 8006782:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006784:	2b00      	cmp	r3, #0
 8006786:	d148      	bne.n	800681a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0220 	bic.w	r2, r2, #32
 8006796:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	695a      	ldr	r2, [r3, #20]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0201 	bic.w	r2, r2, #1
 80067b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d123      	bne.n	8006810 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0210 	bic.w	r2, r2, #16
 80067dc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b10      	cmp	r3, #16
 80067ea:	d10a      	bne.n	8006802 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7ff fe79 	bl	8006500 <HAL_UARTEx_RxEventCallback>
 800680e:	e002      	b.n	8006816 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7fa f901 	bl	8000a18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	e002      	b.n	8006820 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	e000      	b.n	8006820 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800681e:	2302      	movs	r3, #2
  }
}
 8006820:	4618      	mov	r0, r3
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68da      	ldr	r2, [r3, #12]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689a      	ldr	r2, [r3, #8]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	4313      	orrs	r3, r2
 8006856:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006862:	f023 030c 	bic.w	r3, r3, #12
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	68b9      	ldr	r1, [r7, #8]
 800686c:	430b      	orrs	r3, r1
 800686e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a2c      	ldr	r2, [pc, #176]	; (800693c <UART_SetConfig+0x114>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d103      	bne.n	8006898 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006890:	f7fe fe34 	bl	80054fc <HAL_RCC_GetPCLK2Freq>
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	e002      	b.n	800689e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006898:	f7fe fe1c 	bl	80054d4 <HAL_RCC_GetPCLK1Freq>
 800689c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009a      	lsls	r2, r3, #2
 80068a8:	441a      	add	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b4:	4a22      	ldr	r2, [pc, #136]	; (8006940 <UART_SetConfig+0x118>)
 80068b6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ba:	095b      	lsrs	r3, r3, #5
 80068bc:	0119      	lsls	r1, r3, #4
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4613      	mov	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	009a      	lsls	r2, r3, #2
 80068c8:	441a      	add	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80068d4:	4b1a      	ldr	r3, [pc, #104]	; (8006940 <UART_SetConfig+0x118>)
 80068d6:	fba3 0302 	umull	r0, r3, r3, r2
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	2064      	movs	r0, #100	; 0x64
 80068de:	fb00 f303 	mul.w	r3, r0, r3
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	3332      	adds	r3, #50	; 0x32
 80068e8:	4a15      	ldr	r2, [pc, #84]	; (8006940 <UART_SetConfig+0x118>)
 80068ea:	fba2 2303 	umull	r2, r3, r2, r3
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068f4:	4419      	add	r1, r3
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4613      	mov	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	009a      	lsls	r2, r3, #2
 8006900:	441a      	add	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	fbb2 f2f3 	udiv	r2, r2, r3
 800690c:	4b0c      	ldr	r3, [pc, #48]	; (8006940 <UART_SetConfig+0x118>)
 800690e:	fba3 0302 	umull	r0, r3, r3, r2
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	2064      	movs	r0, #100	; 0x64
 8006916:	fb00 f303 	mul.w	r3, r0, r3
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	011b      	lsls	r3, r3, #4
 800691e:	3332      	adds	r3, #50	; 0x32
 8006920:	4a07      	ldr	r2, [pc, #28]	; (8006940 <UART_SetConfig+0x118>)
 8006922:	fba2 2303 	umull	r2, r3, r2, r3
 8006926:	095b      	lsrs	r3, r3, #5
 8006928:	f003 020f 	and.w	r2, r3, #15
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	440a      	add	r2, r1
 8006932:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006934:	bf00      	nop
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	40013800 	.word	0x40013800
 8006940:	51eb851f 	.word	0x51eb851f

08006944 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006944:	b084      	sub	sp, #16
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	f107 0014 	add.w	r0, r7, #20
 8006952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	b004      	add	sp, #16
 8006962:	4770      	bx	lr

08006964 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006974:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006978:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	b29a      	uxth	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	bc80      	pop	{r7}
 800698e:	4770      	bx	lr

08006990 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006998:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800699c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	43db      	mvns	r3, r3
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	4013      	ands	r3, r2
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr

080069c4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr

080069dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069dc:	b084      	sub	sp, #16
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	f107 0014 	add.w	r0, r7, #20
 80069ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bc80      	pop	{r7}
 8006a18:	b004      	add	sp, #16
 8006a1a:	4770      	bx	lr

08006a1c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b09b      	sub	sp, #108	; 0x6c
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a42:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	78db      	ldrb	r3, [r3, #3]
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d81f      	bhi.n	8006a8e <USB_ActivateEndpoint+0x72>
 8006a4e:	a201      	add	r2, pc, #4	; (adr r2, 8006a54 <USB_ActivateEndpoint+0x38>)
 8006a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a54:	08006a65 	.word	0x08006a65
 8006a58:	08006a81 	.word	0x08006a81
 8006a5c:	08006a97 	.word	0x08006a97
 8006a60:	08006a73 	.word	0x08006a73
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006a64:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006a68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a6c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006a70:	e012      	b.n	8006a98 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006a72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006a76:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006a7a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006a7e:	e00b      	b.n	8006a98 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006a80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006a84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a88:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006a8c:	e004      	b.n	8006a98 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006a94:	e000      	b.n	8006a98 <USB_ActivateEndpoint+0x7c>
      break;
 8006a96:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	441a      	add	r2, r3
 8006aa2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	441a      	add	r2, r3
 8006ae8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	7b1b      	ldrb	r3, [r3, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f040 8149 	bne.w	8006d9c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	785b      	ldrb	r3, [r3, #1]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 8084 	beq.w	8006c1c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	461a      	mov	r2, r3
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	4413      	add	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	011a      	lsls	r2, r3, #4
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b36:	613b      	str	r3, [r7, #16]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	88db      	ldrh	r3, [r3, #6]
 8006b3c:	085b      	lsrs	r3, r3, #1
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	81fb      	strh	r3, [r7, #14]
 8006b56:	89fb      	ldrh	r3, [r7, #14]
 8006b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d01b      	beq.n	8006b98 <USB_ActivateEndpoint+0x17c>
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b76:	81bb      	strh	r3, [r7, #12]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	441a      	add	r2, r3
 8006b82:	89bb      	ldrh	r3, [r7, #12]
 8006b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	78db      	ldrb	r3, [r3, #3]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d020      	beq.n	8006be2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb6:	813b      	strh	r3, [r7, #8]
 8006bb8:	893b      	ldrh	r3, [r7, #8]
 8006bba:	f083 0320 	eor.w	r3, r3, #32
 8006bbe:	813b      	strh	r3, [r7, #8]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	441a      	add	r2, r3
 8006bca:	893b      	ldrh	r3, [r7, #8]
 8006bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	8013      	strh	r3, [r2, #0]
 8006be0:	e27f      	b.n	80070e2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bf8:	817b      	strh	r3, [r7, #10]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	441a      	add	r2, r3
 8006c04:	897b      	ldrh	r3, [r7, #10]
 8006c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	8013      	strh	r3, [r2, #0]
 8006c1a:	e262      	b.n	80070e2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2c:	4413      	add	r3, r2
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	011a      	lsls	r2, r3, #4
 8006c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	88db      	ldrh	r3, [r3, #6]
 8006c44:	085b      	lsrs	r3, r3, #1
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	005b      	lsls	r3, r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	4413      	add	r3, r2
 8006c62:	627b      	str	r3, [r7, #36]	; 0x24
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	011a      	lsls	r2, r3, #4
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c72:	623b      	str	r3, [r7, #32]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d112      	bne.n	8006ca2 <USB_ActivateEndpoint+0x286>
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	801a      	strh	r2, [r3, #0]
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	801a      	strh	r2, [r3, #0]
 8006ca0:	e02f      	b.n	8006d02 <USB_ActivateEndpoint+0x2e6>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8006ca8:	d813      	bhi.n	8006cd2 <USB_ActivateEndpoint+0x2b6>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	085b      	lsrs	r3, r3, #1
 8006cb0:	663b      	str	r3, [r7, #96]	; 0x60
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <USB_ActivateEndpoint+0x2a8>
 8006cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	663b      	str	r3, [r7, #96]	; 0x60
 8006cc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	029b      	lsls	r3, r3, #10
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	801a      	strh	r2, [r3, #0]
 8006cd0:	e017      	b.n	8006d02 <USB_ActivateEndpoint+0x2e6>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	095b      	lsrs	r3, r3, #5
 8006cd8:	663b      	str	r3, [r7, #96]	; 0x60
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	f003 031f 	and.w	r3, r3, #31
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d102      	bne.n	8006cec <USB_ActivateEndpoint+0x2d0>
 8006ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	663b      	str	r3, [r7, #96]	; 0x60
 8006cec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	029b      	lsls	r3, r3, #10
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	83fb      	strh	r3, [r7, #30]
 8006d10:	8bfb      	ldrh	r3, [r7, #30]
 8006d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d01b      	beq.n	8006d52 <USB_ActivateEndpoint+0x336>
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d30:	83bb      	strh	r3, [r7, #28]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	441a      	add	r2, r3
 8006d3c:	8bbb      	ldrh	r3, [r7, #28]
 8006d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d68:	837b      	strh	r3, [r7, #26]
 8006d6a:	8b7b      	ldrh	r3, [r7, #26]
 8006d6c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d70:	837b      	strh	r3, [r7, #26]
 8006d72:	8b7b      	ldrh	r3, [r7, #26]
 8006d74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d78:	837b      	strh	r3, [r7, #26]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	441a      	add	r2, r3
 8006d84:	8b7b      	ldrh	r3, [r7, #26]
 8006d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	8013      	strh	r3, [r2, #0]
 8006d9a:	e1a2      	b.n	80070e2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	441a      	add	r2, r3
 8006dc0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dcc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006de8:	4413      	add	r3, r2
 8006dea:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	011a      	lsls	r2, r3, #4
 8006df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	891b      	ldrh	r3, [r3, #8]
 8006e00:	085b      	lsrs	r3, r3, #1
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e0a:	801a      	strh	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	653b      	str	r3, [r7, #80]	; 0x50
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e1c:	4413      	add	r3, r2
 8006e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	011a      	lsls	r2, r3, #4
 8006e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	895b      	ldrh	r3, [r3, #10]
 8006e34:	085b      	lsrs	r3, r3, #1
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e3e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f040 8091 	bne.w	8006f6c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006e58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d01b      	beq.n	8006e9a <USB_ActivateEndpoint+0x47e>
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e78:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	441a      	add	r2, r3
 8006e84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	873b      	strh	r3, [r7, #56]	; 0x38
 8006ea8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d01b      	beq.n	8006eea <USB_ActivateEndpoint+0x4ce>
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	441a      	add	r2, r3
 8006ed4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ee2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f00:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006f02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006f04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f08:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006f0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006f0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f10:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	441a      	add	r2, r3
 8006f1c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f48:	867b      	strh	r3, [r7, #50]	; 0x32
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	441a      	add	r2, r3
 8006f54:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	8013      	strh	r3, [r2, #0]
 8006f6a:	e0ba      	b.n	80070e2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006f7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d01d      	beq.n	8006fc4 <USB_ActivateEndpoint+0x5a8>
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	441a      	add	r2, r3
 8006fac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006fd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01d      	beq.n	800701c <USB_ActivateEndpoint+0x600>
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	441a      	add	r2, r3
 8007004:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800700c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007014:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007018:	b29b      	uxth	r3, r3
 800701a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	78db      	ldrb	r3, [r3, #3]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d024      	beq.n	800706e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	b29b      	uxth	r3, r3
 8007032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800703a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800703e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007042:	f083 0320 	eor.w	r3, r3, #32
 8007046:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	441a      	add	r2, r3
 8007054:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800705c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007068:	b29b      	uxth	r3, r3
 800706a:	8013      	strh	r3, [r2, #0]
 800706c:	e01d      	b.n	80070aa <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	b29b      	uxth	r3, r3
 800707c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007084:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	441a      	add	r2, r3
 8007092:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800709a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800709e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	441a      	add	r2, r3
 80070cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80070ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070de:	b29b      	uxth	r3, r3
 80070e0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80070e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	376c      	adds	r7, #108	; 0x6c
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bc80      	pop	{r7}
 80070ee:	4770      	bx	lr

080070f0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b08d      	sub	sp, #52	; 0x34
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	7b1b      	ldrb	r3, [r3, #12]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f040 808e 	bne.w	8007220 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	785b      	ldrb	r3, [r3, #1]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d044      	beq.n	8007196 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	81bb      	strh	r3, [r7, #12]
 800711a:	89bb      	ldrh	r3, [r7, #12]
 800711c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007120:	2b00      	cmp	r3, #0
 8007122:	d01b      	beq.n	800715c <USB_DeactivateEndpoint+0x6c>
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	b29b      	uxth	r3, r3
 8007132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713a:	817b      	strh	r3, [r7, #10]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	441a      	add	r2, r3
 8007146:	897b      	ldrh	r3, [r7, #10]
 8007148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800714c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007154:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007158:	b29b      	uxth	r3, r3
 800715a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800716e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007172:	813b      	strh	r3, [r7, #8]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	441a      	add	r2, r3
 800717e:	893b      	ldrh	r3, [r7, #8]
 8007180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800718c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007190:	b29b      	uxth	r3, r3
 8007192:	8013      	strh	r3, [r2, #0]
 8007194:	e192      	b.n	80074bc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	827b      	strh	r3, [r7, #18]
 80071a4:	8a7b      	ldrh	r3, [r7, #18]
 80071a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d01b      	beq.n	80071e6 <USB_DeactivateEndpoint+0xf6>
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c4:	823b      	strh	r3, [r7, #16]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	441a      	add	r2, r3
 80071d0:	8a3b      	ldrh	r3, [r7, #16]
 80071d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071fc:	81fb      	strh	r3, [r7, #14]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	441a      	add	r2, r3
 8007208:	89fb      	ldrh	r3, [r7, #14]
 800720a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800720e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800721a:	b29b      	uxth	r3, r3
 800721c:	8013      	strh	r3, [r2, #0]
 800721e:	e14d      	b.n	80074bc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	785b      	ldrb	r3, [r3, #1]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f040 80a5 	bne.w	8007374 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	843b      	strh	r3, [r7, #32]
 8007238:	8c3b      	ldrh	r3, [r7, #32]
 800723a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d01b      	beq.n	800727a <USB_DeactivateEndpoint+0x18a>
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	b29b      	uxth	r3, r3
 8007250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007258:	83fb      	strh	r3, [r7, #30]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	441a      	add	r2, r3
 8007264:	8bfb      	ldrh	r3, [r7, #30]
 8007266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800726e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007276:	b29b      	uxth	r3, r3
 8007278:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	83bb      	strh	r3, [r7, #28]
 8007288:	8bbb      	ldrh	r3, [r7, #28]
 800728a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728e:	2b00      	cmp	r3, #0
 8007290:	d01b      	beq.n	80072ca <USB_DeactivateEndpoint+0x1da>
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	b29b      	uxth	r3, r3
 80072a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a8:	837b      	strh	r3, [r7, #26]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	441a      	add	r2, r3
 80072b4:	8b7b      	ldrh	r3, [r7, #26]
 80072b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e0:	833b      	strh	r3, [r7, #24]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	441a      	add	r2, r3
 80072ec:	8b3b      	ldrh	r3, [r7, #24]
 80072ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072fe:	b29b      	uxth	r3, r3
 8007300:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	b29b      	uxth	r3, r3
 8007310:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007318:	82fb      	strh	r3, [r7, #22]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	441a      	add	r2, r3
 8007324:	8afb      	ldrh	r3, [r7, #22]
 8007326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800732a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800732e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007336:	b29b      	uxth	r3, r3
 8007338:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	b29b      	uxth	r3, r3
 8007348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800734c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007350:	82bb      	strh	r3, [r7, #20]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	441a      	add	r2, r3
 800735c:	8abb      	ldrh	r3, [r7, #20]
 800735e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800736a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800736e:	b29b      	uxth	r3, r3
 8007370:	8013      	strh	r3, [r2, #0]
 8007372:	e0a3      	b.n	80074bc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007382:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01b      	beq.n	80073c4 <USB_DeactivateEndpoint+0x2d4>
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29b      	uxth	r3, r3
 800739a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80073b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	881b      	ldrh	r3, [r3, #0]
 80073d0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80073d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80073d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d01b      	beq.n	8007414 <USB_DeactivateEndpoint+0x324>
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f2:	853b      	strh	r3, [r7, #40]	; 0x28
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	441a      	add	r2, r3
 80073fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800740c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007410:	b29b      	uxth	r3, r3
 8007412:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29b      	uxth	r3, r3
 8007422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	441a      	add	r2, r3
 8007436:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800743c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007448:	b29b      	uxth	r3, r3
 800744a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	b29b      	uxth	r3, r3
 800745a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800745e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007462:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	441a      	add	r2, r3
 800746e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800747c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007480:	b29b      	uxth	r3, r3
 8007482:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	b29b      	uxth	r3, r3
 8007492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749a:	847b      	strh	r3, [r7, #34]	; 0x22
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	441a      	add	r2, r3
 80074a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3734      	adds	r7, #52	; 0x34
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bc80      	pop	{r7}
 80074c6:	4770      	bx	lr

080074c8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b0cc      	sub	sp, #304	; 0x130
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	1d3b      	adds	r3, r7, #4
 80074d0:	6018      	str	r0, [r3, #0]
 80074d2:	463b      	mov	r3, r7
 80074d4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80074d6:	463b      	mov	r3, r7
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	785b      	ldrb	r3, [r3, #1]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	f040 872e 	bne.w	800833e <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80074e2:	463b      	mov	r3, r7
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	699a      	ldr	r2, [r3, #24]
 80074e8:	463b      	mov	r3, r7
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d905      	bls.n	80074fe <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80074f2:	463b      	mov	r3, r7
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80074fc:	e004      	b.n	8007508 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80074fe:	463b      	mov	r3, r7
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007508:	463b      	mov	r3, r7
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	7b1b      	ldrb	r3, [r3, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d134      	bne.n	800757c <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007512:	463b      	mov	r3, r7
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6959      	ldr	r1, [r3, #20]
 8007518:	463b      	mov	r3, r7
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	88da      	ldrh	r2, [r3, #6]
 800751e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007522:	b29b      	uxth	r3, r3
 8007524:	1d38      	adds	r0, r7, #4
 8007526:	6800      	ldr	r0, [r0, #0]
 8007528:	f001 fc03 	bl	8008d32 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800752c:	f107 0310 	add.w	r3, r7, #16
 8007530:	1d3a      	adds	r2, r7, #4
 8007532:	6812      	ldr	r2, [r2, #0]
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	1d3b      	adds	r3, r7, #4
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800753e:	b29b      	uxth	r3, r3
 8007540:	4619      	mov	r1, r3
 8007542:	f107 0310 	add.w	r3, r7, #16
 8007546:	f107 0210 	add.w	r2, r7, #16
 800754a:	6812      	ldr	r2, [r2, #0]
 800754c:	440a      	add	r2, r1
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	463b      	mov	r3, r7
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	011a      	lsls	r2, r3, #4
 8007558:	f107 0310 	add.w	r3, r7, #16
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4413      	add	r3, r2
 8007560:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007564:	f107 030c 	add.w	r3, r7, #12
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800756e:	b29a      	uxth	r2, r3
 8007570:	f107 030c 	add.w	r3, r7, #12
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	801a      	strh	r2, [r3, #0]
 8007578:	f000 beac 	b.w	80082d4 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800757c:	463b      	mov	r3, r7
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	78db      	ldrb	r3, [r3, #3]
 8007582:	2b02      	cmp	r3, #2
 8007584:	f040 838c 	bne.w	8007ca0 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007588:	463b      	mov	r3, r7
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6a1a      	ldr	r2, [r3, #32]
 800758e:	463b      	mov	r3, r7
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	429a      	cmp	r2, r3
 8007596:	f240 8330 	bls.w	8007bfa <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800759a:	1d3b      	adds	r3, r7, #4
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	463b      	mov	r3, r7
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80075b8:	1d3b      	adds	r3, r7, #4
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	463b      	mov	r3, r7
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	441a      	add	r2, r3
 80075c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80075ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80075d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075da:	b29b      	uxth	r3, r3
 80075dc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80075de:	463b      	mov	r3, r7
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6a1a      	ldr	r2, [r3, #32]
 80075e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e8:	1ad2      	subs	r2, r2, r3
 80075ea:	463b      	mov	r3, r7
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80075f0:	1d3b      	adds	r3, r7, #4
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	463b      	mov	r3, r7
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	b29b      	uxth	r3, r3
 8007602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 819e 	beq.w	8007948 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800760c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007610:	1d3a      	adds	r2, r7, #4
 8007612:	6812      	ldr	r2, [r2, #0]
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	463b      	mov	r3, r7
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	785b      	ldrb	r3, [r3, #1]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d17a      	bne.n	8007716 <USB_EPStartXfer+0x24e>
 8007620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007624:	1d3a      	adds	r2, r7, #4
 8007626:	6812      	ldr	r2, [r2, #0]
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	1d3b      	adds	r3, r7, #4
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007632:	b29b      	uxth	r3, r3
 8007634:	4619      	mov	r1, r3
 8007636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800763a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800763e:	6812      	ldr	r2, [r2, #0]
 8007640:	440a      	add	r2, r1
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	463b      	mov	r3, r7
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	011a      	lsls	r2, r3, #4
 800764c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4413      	add	r3, r2
 8007654:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007662:	2b00      	cmp	r3, #0
 8007664:	d11a      	bne.n	800769c <USB_EPStartXfer+0x1d4>
 8007666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007674:	b29a      	uxth	r2, r3
 8007676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	b29b      	uxth	r3, r3
 8007688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800768c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007690:	b29a      	uxth	r2, r3
 8007692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	801a      	strh	r2, [r3, #0]
 800769a:	e062      	b.n	8007762 <USB_EPStartXfer+0x29a>
 800769c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a0:	2b3e      	cmp	r3, #62	; 0x3e
 80076a2:	d819      	bhi.n	80076d8 <USB_EPStartXfer+0x210>
 80076a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a8:	085b      	lsrs	r3, r3, #1
 80076aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80076ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d004      	beq.n	80076c4 <USB_EPStartXfer+0x1fc>
 80076ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076be:	3301      	adds	r3, #1
 80076c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80076c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	029b      	lsls	r3, r3, #10
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	801a      	strh	r2, [r3, #0]
 80076d6:	e044      	b.n	8007762 <USB_EPStartXfer+0x29a>
 80076d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076dc:	095b      	lsrs	r3, r3, #5
 80076de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80076e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e6:	f003 031f 	and.w	r3, r3, #31
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d104      	bne.n	80076f8 <USB_EPStartXfer+0x230>
 80076ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076f2:	3b01      	subs	r3, #1
 80076f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80076f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	029b      	lsls	r3, r3, #10
 8007700:	b29b      	uxth	r3, r3
 8007702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800770a:	b29a      	uxth	r2, r3
 800770c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	801a      	strh	r2, [r3, #0]
 8007714:	e025      	b.n	8007762 <USB_EPStartXfer+0x29a>
 8007716:	463b      	mov	r3, r7
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	785b      	ldrb	r3, [r3, #1]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d120      	bne.n	8007762 <USB_EPStartXfer+0x29a>
 8007720:	1d3b      	adds	r3, r7, #4
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007728:	b29b      	uxth	r3, r3
 800772a:	4619      	mov	r1, r3
 800772c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007730:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007734:	6812      	ldr	r2, [r2, #0]
 8007736:	440a      	add	r2, r1
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	463b      	mov	r3, r7
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	011a      	lsls	r2, r3, #4
 8007742:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4413      	add	r3, r2
 800774a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800774e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007758:	b29a      	uxth	r2, r3
 800775a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007762:	463b      	mov	r3, r7
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	895b      	ldrh	r3, [r3, #10]
 8007768:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800776c:	463b      	mov	r3, r7
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6959      	ldr	r1, [r3, #20]
 8007772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007776:	b29b      	uxth	r3, r3
 8007778:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800777c:	1d38      	adds	r0, r7, #4
 800777e:	6800      	ldr	r0, [r0, #0]
 8007780:	f001 fad7 	bl	8008d32 <USB_WritePMA>
            ep->xfer_buff += len;
 8007784:	463b      	mov	r3, r7
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	695a      	ldr	r2, [r3, #20]
 800778a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800778e:	441a      	add	r2, r3
 8007790:	463b      	mov	r3, r7
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007796:	463b      	mov	r3, r7
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	6a1a      	ldr	r2, [r3, #32]
 800779c:	463b      	mov	r3, r7
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d909      	bls.n	80077ba <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80077a6:	463b      	mov	r3, r7
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6a1a      	ldr	r2, [r3, #32]
 80077ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b0:	1ad2      	subs	r2, r2, r3
 80077b2:	463b      	mov	r3, r7
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	621a      	str	r2, [r3, #32]
 80077b8:	e008      	b.n	80077cc <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80077ba:	463b      	mov	r3, r7
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80077c4:	463b      	mov	r3, r7
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2200      	movs	r2, #0
 80077ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80077cc:	463b      	mov	r3, r7
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	785b      	ldrb	r3, [r3, #1]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d17a      	bne.n	80078cc <USB_EPStartXfer+0x404>
 80077d6:	f107 0318 	add.w	r3, r7, #24
 80077da:	1d3a      	adds	r2, r7, #4
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	1d3b      	adds	r3, r7, #4
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	4619      	mov	r1, r3
 80077ec:	f107 0318 	add.w	r3, r7, #24
 80077f0:	f107 0218 	add.w	r2, r7, #24
 80077f4:	6812      	ldr	r2, [r2, #0]
 80077f6:	440a      	add	r2, r1
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	463b      	mov	r3, r7
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	011a      	lsls	r2, r3, #4
 8007802:	f107 0318 	add.w	r3, r7, #24
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4413      	add	r3, r2
 800780a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800780e:	f107 0314 	add.w	r3, r7, #20
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007818:	2b00      	cmp	r3, #0
 800781a:	d11a      	bne.n	8007852 <USB_EPStartXfer+0x38a>
 800781c:	f107 0314 	add.w	r3, r7, #20
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	b29b      	uxth	r3, r3
 8007826:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800782a:	b29a      	uxth	r2, r3
 800782c:	f107 0314 	add.w	r3, r7, #20
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	801a      	strh	r2, [r3, #0]
 8007834:	f107 0314 	add.w	r3, r7, #20
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	b29b      	uxth	r3, r3
 800783e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007846:	b29a      	uxth	r2, r3
 8007848:	f107 0314 	add.w	r3, r7, #20
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	801a      	strh	r2, [r3, #0]
 8007850:	e067      	b.n	8007922 <USB_EPStartXfer+0x45a>
 8007852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007856:	2b3e      	cmp	r3, #62	; 0x3e
 8007858:	d819      	bhi.n	800788e <USB_EPStartXfer+0x3c6>
 800785a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800785e:	085b      	lsrs	r3, r3, #1
 8007860:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	d004      	beq.n	800787a <USB_EPStartXfer+0x3b2>
 8007870:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007874:	3301      	adds	r3, #1
 8007876:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800787a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800787e:	b29b      	uxth	r3, r3
 8007880:	029b      	lsls	r3, r3, #10
 8007882:	b29a      	uxth	r2, r3
 8007884:	f107 0314 	add.w	r3, r7, #20
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	801a      	strh	r2, [r3, #0]
 800788c:	e049      	b.n	8007922 <USB_EPStartXfer+0x45a>
 800788e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007892:	095b      	lsrs	r3, r3, #5
 8007894:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800789c:	f003 031f 	and.w	r3, r3, #31
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d104      	bne.n	80078ae <USB_EPStartXfer+0x3e6>
 80078a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80078a8:	3b01      	subs	r3, #1
 80078aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80078ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	029b      	lsls	r3, r3, #10
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	f107 0314 	add.w	r3, r7, #20
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	801a      	strh	r2, [r3, #0]
 80078ca:	e02a      	b.n	8007922 <USB_EPStartXfer+0x45a>
 80078cc:	463b      	mov	r3, r7
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	785b      	ldrb	r3, [r3, #1]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d125      	bne.n	8007922 <USB_EPStartXfer+0x45a>
 80078d6:	f107 0320 	add.w	r3, r7, #32
 80078da:	1d3a      	adds	r2, r7, #4
 80078dc:	6812      	ldr	r2, [r2, #0]
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	1d3b      	adds	r3, r7, #4
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	4619      	mov	r1, r3
 80078ec:	f107 0320 	add.w	r3, r7, #32
 80078f0:	f107 0220 	add.w	r2, r7, #32
 80078f4:	6812      	ldr	r2, [r2, #0]
 80078f6:	440a      	add	r2, r1
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	463b      	mov	r3, r7
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	011a      	lsls	r2, r3, #4
 8007902:	f107 0320 	add.w	r3, r7, #32
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4413      	add	r3, r2
 800790a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800790e:	f107 031c 	add.w	r3, r7, #28
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007918:	b29a      	uxth	r2, r3
 800791a:	f107 031c 	add.w	r3, r7, #28
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007922:	463b      	mov	r3, r7
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	891b      	ldrh	r3, [r3, #8]
 8007928:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800792c:	463b      	mov	r3, r7
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6959      	ldr	r1, [r3, #20]
 8007932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007936:	b29b      	uxth	r3, r3
 8007938:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800793c:	1d38      	adds	r0, r7, #4
 800793e:	6800      	ldr	r0, [r0, #0]
 8007940:	f001 f9f7 	bl	8008d32 <USB_WritePMA>
 8007944:	f000 bcc6 	b.w	80082d4 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007948:	463b      	mov	r3, r7
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	785b      	ldrb	r3, [r3, #1]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d164      	bne.n	8007a1c <USB_EPStartXfer+0x554>
 8007952:	1d3b      	adds	r3, r7, #4
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	64bb      	str	r3, [r7, #72]	; 0x48
 8007958:	1d3b      	adds	r3, r7, #4
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007960:	b29b      	uxth	r3, r3
 8007962:	461a      	mov	r2, r3
 8007964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007966:	4413      	add	r3, r2
 8007968:	64bb      	str	r3, [r7, #72]	; 0x48
 800796a:	463b      	mov	r3, r7
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	011a      	lsls	r2, r3, #4
 8007972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007974:	4413      	add	r3, r2
 8007976:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800797a:	647b      	str	r3, [r7, #68]	; 0x44
 800797c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007980:	2b00      	cmp	r3, #0
 8007982:	d112      	bne.n	80079aa <USB_EPStartXfer+0x4e2>
 8007984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	b29b      	uxth	r3, r3
 800798a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800798e:	b29a      	uxth	r2, r3
 8007990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007992:	801a      	strh	r2, [r3, #0]
 8007994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	b29b      	uxth	r3, r3
 800799a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800799e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079a6:	801a      	strh	r2, [r3, #0]
 80079a8:	e057      	b.n	8007a5a <USB_EPStartXfer+0x592>
 80079aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ae:	2b3e      	cmp	r3, #62	; 0x3e
 80079b0:	d817      	bhi.n	80079e2 <USB_EPStartXfer+0x51a>
 80079b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b6:	085b      	lsrs	r3, r3, #1
 80079b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80079bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d004      	beq.n	80079d2 <USB_EPStartXfer+0x50a>
 80079c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80079cc:	3301      	adds	r3, #1
 80079ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80079d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	029b      	lsls	r3, r3, #10
 80079da:	b29a      	uxth	r2, r3
 80079dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079de:	801a      	strh	r2, [r3, #0]
 80079e0:	e03b      	b.n	8007a5a <USB_EPStartXfer+0x592>
 80079e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e6:	095b      	lsrs	r3, r3, #5
 80079e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80079ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079f0:	f003 031f 	and.w	r3, r3, #31
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d104      	bne.n	8007a02 <USB_EPStartXfer+0x53a>
 80079f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80079fc:	3b01      	subs	r3, #1
 80079fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	029b      	lsls	r3, r3, #10
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a18:	801a      	strh	r2, [r3, #0]
 8007a1a:	e01e      	b.n	8007a5a <USB_EPStartXfer+0x592>
 8007a1c:	463b      	mov	r3, r7
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	785b      	ldrb	r3, [r3, #1]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d119      	bne.n	8007a5a <USB_EPStartXfer+0x592>
 8007a26:	1d3b      	adds	r3, r7, #4
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a2c:	1d3b      	adds	r3, r7, #4
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	461a      	mov	r2, r3
 8007a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a3a:	4413      	add	r3, r2
 8007a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8007a3e:	463b      	mov	r3, r7
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	011a      	lsls	r2, r3, #4
 8007a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a48:	4413      	add	r3, r2
 8007a4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a5a:	463b      	mov	r3, r7
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	891b      	ldrh	r3, [r3, #8]
 8007a60:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a64:	463b      	mov	r3, r7
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	6959      	ldr	r1, [r3, #20]
 8007a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a74:	1d38      	adds	r0, r7, #4
 8007a76:	6800      	ldr	r0, [r0, #0]
 8007a78:	f001 f95b 	bl	8008d32 <USB_WritePMA>
            ep->xfer_buff += len;
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	695a      	ldr	r2, [r3, #20]
 8007a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a86:	441a      	add	r2, r3
 8007a88:	463b      	mov	r3, r7
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a8e:	463b      	mov	r3, r7
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6a1a      	ldr	r2, [r3, #32]
 8007a94:	463b      	mov	r3, r7
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d909      	bls.n	8007ab2 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8007a9e:	463b      	mov	r3, r7
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6a1a      	ldr	r2, [r3, #32]
 8007aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa8:	1ad2      	subs	r2, r2, r3
 8007aaa:	463b      	mov	r3, r7
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	621a      	str	r2, [r3, #32]
 8007ab0:	e008      	b.n	8007ac4 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8007ab2:	463b      	mov	r3, r7
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007abc:	463b      	mov	r3, r7
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ac4:	1d3b      	adds	r3, r7, #4
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8007aca:	463b      	mov	r3, r7
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	785b      	ldrb	r3, [r3, #1]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d164      	bne.n	8007b9e <USB_EPStartXfer+0x6d6>
 8007ad4:	1d3b      	adds	r3, r7, #4
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ada:	1d3b      	adds	r3, r7, #4
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	4413      	add	r3, r2
 8007aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aec:	463b      	mov	r3, r7
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	011a      	lsls	r2, r3, #4
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	4413      	add	r3, r2
 8007af8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007afc:	637b      	str	r3, [r7, #52]	; 0x34
 8007afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d112      	bne.n	8007b2c <USB_EPStartXfer+0x664>
 8007b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b14:	801a      	strh	r2, [r3, #0]
 8007b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b28:	801a      	strh	r2, [r3, #0]
 8007b2a:	e054      	b.n	8007bd6 <USB_EPStartXfer+0x70e>
 8007b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b30:	2b3e      	cmp	r3, #62	; 0x3e
 8007b32:	d817      	bhi.n	8007b64 <USB_EPStartXfer+0x69c>
 8007b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b38:	085b      	lsrs	r3, r3, #1
 8007b3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d004      	beq.n	8007b54 <USB_EPStartXfer+0x68c>
 8007b4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007b4e:	3301      	adds	r3, #1
 8007b50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007b54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	029b      	lsls	r3, r3, #10
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b60:	801a      	strh	r2, [r3, #0]
 8007b62:	e038      	b.n	8007bd6 <USB_EPStartXfer+0x70e>
 8007b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b68:	095b      	lsrs	r3, r3, #5
 8007b6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007b6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b72:	f003 031f 	and.w	r3, r3, #31
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d104      	bne.n	8007b84 <USB_EPStartXfer+0x6bc>
 8007b7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007b84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	029b      	lsls	r3, r3, #10
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9a:	801a      	strh	r2, [r3, #0]
 8007b9c:	e01b      	b.n	8007bd6 <USB_EPStartXfer+0x70e>
 8007b9e:	463b      	mov	r3, r7
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	785b      	ldrb	r3, [r3, #1]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d116      	bne.n	8007bd6 <USB_EPStartXfer+0x70e>
 8007ba8:	1d3b      	adds	r3, r7, #4
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb6:	4413      	add	r3, r2
 8007bb8:	643b      	str	r3, [r7, #64]	; 0x40
 8007bba:	463b      	mov	r3, r7
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	011a      	lsls	r2, r3, #4
 8007bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007bd6:	463b      	mov	r3, r7
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	895b      	ldrh	r3, [r3, #10]
 8007bdc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007be0:	463b      	mov	r3, r7
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6959      	ldr	r1, [r3, #20]
 8007be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007bf0:	1d38      	adds	r0, r7, #4
 8007bf2:	6800      	ldr	r0, [r0, #0]
 8007bf4:	f001 f89d 	bl	8008d32 <USB_WritePMA>
 8007bf8:	e36c      	b.n	80082d4 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007bfa:	463b      	mov	r3, r7
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007c04:	1d3b      	adds	r3, r7, #4
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	463b      	mov	r3, r7
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c1e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007c22:	1d3b      	adds	r3, r7, #4
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	463b      	mov	r3, r7
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	441a      	add	r2, r3
 8007c30:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007c48:	1d3b      	adds	r3, r7, #4
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c4e:	1d3b      	adds	r3, r7, #4
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c5c:	4413      	add	r3, r2
 8007c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c60:	463b      	mov	r3, r7
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	011a      	lsls	r2, r3, #4
 8007c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c70:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c7a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c7c:	463b      	mov	r3, r7
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	891b      	ldrh	r3, [r3, #8]
 8007c82:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c86:	463b      	mov	r3, r7
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6959      	ldr	r1, [r3, #20]
 8007c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c96:	1d38      	adds	r0, r7, #4
 8007c98:	6800      	ldr	r0, [r0, #0]
 8007c9a:	f001 f84a 	bl	8008d32 <USB_WritePMA>
 8007c9e:	e319      	b.n	80082d4 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007ca0:	1d3b      	adds	r3, r7, #4
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	463b      	mov	r3, r7
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cba:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007cbe:	1d3b      	adds	r3, r7, #4
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	463b      	mov	r3, r7
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	441a      	add	r2, r3
 8007ccc:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007ce4:	463b      	mov	r3, r7
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6a1a      	ldr	r2, [r3, #32]
 8007cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cee:	1ad2      	subs	r2, r2, r3
 8007cf0:	463b      	mov	r3, r7
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007cf6:	1d3b      	adds	r3, r7, #4
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	463b      	mov	r3, r7
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 8162 	beq.w	8007fd6 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d12:	1d3b      	adds	r3, r7, #4
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d1a:	463b      	mov	r3, r7
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	785b      	ldrb	r3, [r3, #1]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d164      	bne.n	8007dee <USB_EPStartXfer+0x926>
 8007d24:	1d3b      	adds	r3, r7, #4
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d2a:	1d3b      	adds	r3, r7, #4
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	461a      	mov	r2, r3
 8007d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d38:	4413      	add	r3, r2
 8007d3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d3c:	463b      	mov	r3, r7
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	011a      	lsls	r2, r3, #4
 8007d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d46:	4413      	add	r3, r2
 8007d48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d4c:	677b      	str	r3, [r7, #116]	; 0x74
 8007d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d112      	bne.n	8007d7c <USB_EPStartXfer+0x8b4>
 8007d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d64:	801a      	strh	r2, [r3, #0]
 8007d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d78:	801a      	strh	r2, [r3, #0]
 8007d7a:	e057      	b.n	8007e2c <USB_EPStartXfer+0x964>
 8007d7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d80:	2b3e      	cmp	r3, #62	; 0x3e
 8007d82:	d817      	bhi.n	8007db4 <USB_EPStartXfer+0x8ec>
 8007d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d88:	085b      	lsrs	r3, r3, #1
 8007d8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d004      	beq.n	8007da4 <USB_EPStartXfer+0x8dc>
 8007d9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007d9e:	3301      	adds	r3, #1
 8007da0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007da4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	029b      	lsls	r3, r3, #10
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007db0:	801a      	strh	r2, [r3, #0]
 8007db2:	e03b      	b.n	8007e2c <USB_EPStartXfer+0x964>
 8007db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db8:	095b      	lsrs	r3, r3, #5
 8007dba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc2:	f003 031f 	and.w	r3, r3, #31
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d104      	bne.n	8007dd4 <USB_EPStartXfer+0x90c>
 8007dca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007dd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	029b      	lsls	r3, r3, #10
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dea:	801a      	strh	r2, [r3, #0]
 8007dec:	e01e      	b.n	8007e2c <USB_EPStartXfer+0x964>
 8007dee:	463b      	mov	r3, r7
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	785b      	ldrb	r3, [r3, #1]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d119      	bne.n	8007e2c <USB_EPStartXfer+0x964>
 8007df8:	1d3b      	adds	r3, r7, #4
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	461a      	mov	r2, r3
 8007e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e08:	4413      	add	r3, r2
 8007e0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e0e:	463b      	mov	r3, r7
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	011a      	lsls	r2, r3, #4
 8007e16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007e2c:	463b      	mov	r3, r7
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	895b      	ldrh	r3, [r3, #10]
 8007e32:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e36:	463b      	mov	r3, r7
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6959      	ldr	r1, [r3, #20]
 8007e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e46:	1d38      	adds	r0, r7, #4
 8007e48:	6800      	ldr	r0, [r0, #0]
 8007e4a:	f000 ff72 	bl	8008d32 <USB_WritePMA>
          ep->xfer_buff += len;
 8007e4e:	463b      	mov	r3, r7
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	695a      	ldr	r2, [r3, #20]
 8007e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e58:	441a      	add	r2, r3
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007e60:	463b      	mov	r3, r7
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6a1a      	ldr	r2, [r3, #32]
 8007e66:	463b      	mov	r3, r7
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d909      	bls.n	8007e84 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8007e70:	463b      	mov	r3, r7
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6a1a      	ldr	r2, [r3, #32]
 8007e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e7a:	1ad2      	subs	r2, r2, r3
 8007e7c:	463b      	mov	r3, r7
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	621a      	str	r2, [r3, #32]
 8007e82:	e008      	b.n	8007e96 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8007e84:	463b      	mov	r3, r7
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007e8e:	463b      	mov	r3, r7
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2200      	movs	r2, #0
 8007e94:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 821a 	beq.w	80082d4 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ea0:	463b      	mov	r3, r7
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	785b      	ldrb	r3, [r3, #1]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d164      	bne.n	8007f74 <USB_EPStartXfer+0xaac>
 8007eaa:	1d3b      	adds	r3, r7, #4
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	66bb      	str	r3, [r7, #104]	; 0x68
 8007eb0:	1d3b      	adds	r3, r7, #4
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	461a      	mov	r2, r3
 8007ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ebe:	4413      	add	r3, r2
 8007ec0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ec2:	463b      	mov	r3, r7
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	011a      	lsls	r2, r3, #4
 8007eca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ecc:	4413      	add	r3, r2
 8007ece:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ed2:	667b      	str	r3, [r7, #100]	; 0x64
 8007ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d112      	bne.n	8007f02 <USB_EPStartXfer+0xa3a>
 8007edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eea:	801a      	strh	r2, [r3, #0]
 8007eec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eee:	881b      	ldrh	r3, [r3, #0]
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007efe:	801a      	strh	r2, [r3, #0]
 8007f00:	e057      	b.n	8007fb2 <USB_EPStartXfer+0xaea>
 8007f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f06:	2b3e      	cmp	r3, #62	; 0x3e
 8007f08:	d817      	bhi.n	8007f3a <USB_EPStartXfer+0xa72>
 8007f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f0e:	085b      	lsrs	r3, r3, #1
 8007f10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d004      	beq.n	8007f2a <USB_EPStartXfer+0xa62>
 8007f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f24:	3301      	adds	r3, #1
 8007f26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	029b      	lsls	r3, r3, #10
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f36:	801a      	strh	r2, [r3, #0]
 8007f38:	e03b      	b.n	8007fb2 <USB_EPStartXfer+0xaea>
 8007f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f3e:	095b      	lsrs	r3, r3, #5
 8007f40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f48:	f003 031f 	and.w	r3, r3, #31
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d104      	bne.n	8007f5a <USB_EPStartXfer+0xa92>
 8007f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f54:	3b01      	subs	r3, #1
 8007f56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	029b      	lsls	r3, r3, #10
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f70:	801a      	strh	r2, [r3, #0]
 8007f72:	e01e      	b.n	8007fb2 <USB_EPStartXfer+0xaea>
 8007f74:	463b      	mov	r3, r7
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	785b      	ldrb	r3, [r3, #1]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d119      	bne.n	8007fb2 <USB_EPStartXfer+0xaea>
 8007f7e:	1d3b      	adds	r3, r7, #4
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	673b      	str	r3, [r7, #112]	; 0x70
 8007f84:	1d3b      	adds	r3, r7, #4
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	461a      	mov	r2, r3
 8007f90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f92:	4413      	add	r3, r2
 8007f94:	673b      	str	r3, [r7, #112]	; 0x70
 8007f96:	463b      	mov	r3, r7
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	011a      	lsls	r2, r3, #4
 8007f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007fb2:	463b      	mov	r3, r7
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	891b      	ldrh	r3, [r3, #8]
 8007fb8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fbc:	463b      	mov	r3, r7
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6959      	ldr	r1, [r3, #20]
 8007fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007fcc:	1d38      	adds	r0, r7, #4
 8007fce:	6800      	ldr	r0, [r0, #0]
 8007fd0:	f000 feaf 	bl	8008d32 <USB_WritePMA>
 8007fd4:	e17e      	b.n	80082d4 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007fd6:	463b      	mov	r3, r7
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	785b      	ldrb	r3, [r3, #1]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d16f      	bne.n	80080c0 <USB_EPStartXfer+0xbf8>
 8007fe0:	1d3b      	adds	r3, r7, #4
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007fe8:	1d3b      	adds	r3, r7, #4
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ffe:	463b      	mov	r3, r7
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	011a      	lsls	r2, r3, #4
 8008006:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800800a:	4413      	add	r3, r2
 800800c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008018:	2b00      	cmp	r3, #0
 800801a:	d116      	bne.n	800804a <USB_EPStartXfer+0xb82>
 800801c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	b29b      	uxth	r3, r3
 8008024:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008028:	b29a      	uxth	r2, r3
 800802a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800802e:	801a      	strh	r2, [r3, #0]
 8008030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	b29b      	uxth	r3, r3
 8008038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800803c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008040:	b29a      	uxth	r2, r3
 8008042:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008046:	801a      	strh	r2, [r3, #0]
 8008048:	e05f      	b.n	800810a <USB_EPStartXfer+0xc42>
 800804a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800804e:	2b3e      	cmp	r3, #62	; 0x3e
 8008050:	d818      	bhi.n	8008084 <USB_EPStartXfer+0xbbc>
 8008052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008056:	085b      	lsrs	r3, r3, #1
 8008058:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800805c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b00      	cmp	r3, #0
 8008066:	d004      	beq.n	8008072 <USB_EPStartXfer+0xbaa>
 8008068:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800806c:	3301      	adds	r3, #1
 800806e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008072:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008076:	b29b      	uxth	r3, r3
 8008078:	029b      	lsls	r3, r3, #10
 800807a:	b29a      	uxth	r2, r3
 800807c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008080:	801a      	strh	r2, [r3, #0]
 8008082:	e042      	b.n	800810a <USB_EPStartXfer+0xc42>
 8008084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008088:	095b      	lsrs	r3, r3, #5
 800808a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800808e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008092:	f003 031f 	and.w	r3, r3, #31
 8008096:	2b00      	cmp	r3, #0
 8008098:	d104      	bne.n	80080a4 <USB_EPStartXfer+0xbdc>
 800809a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800809e:	3b01      	subs	r3, #1
 80080a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80080a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	029b      	lsls	r3, r3, #10
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	e024      	b.n	800810a <USB_EPStartXfer+0xc42>
 80080c0:	463b      	mov	r3, r7
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	785b      	ldrb	r3, [r3, #1]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d11f      	bne.n	800810a <USB_EPStartXfer+0xc42>
 80080ca:	1d3b      	adds	r3, r7, #4
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80080d2:	1d3b      	adds	r3, r7, #4
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080da:	b29b      	uxth	r3, r3
 80080dc:	461a      	mov	r2, r3
 80080de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80080e2:	4413      	add	r3, r2
 80080e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80080e8:	463b      	mov	r3, r7
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	011a      	lsls	r2, r3, #4
 80080f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80080f4:	4413      	add	r3, r2
 80080f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80080fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008102:	b29a      	uxth	r2, r3
 8008104:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008108:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800810a:	463b      	mov	r3, r7
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	891b      	ldrh	r3, [r3, #8]
 8008110:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008114:	463b      	mov	r3, r7
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6959      	ldr	r1, [r3, #20]
 800811a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800811e:	b29b      	uxth	r3, r3
 8008120:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008124:	1d38      	adds	r0, r7, #4
 8008126:	6800      	ldr	r0, [r0, #0]
 8008128:	f000 fe03 	bl	8008d32 <USB_WritePMA>
          ep->xfer_buff += len;
 800812c:	463b      	mov	r3, r7
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	695a      	ldr	r2, [r3, #20]
 8008132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008136:	441a      	add	r2, r3
 8008138:	463b      	mov	r3, r7
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800813e:	463b      	mov	r3, r7
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6a1a      	ldr	r2, [r3, #32]
 8008144:	463b      	mov	r3, r7
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	429a      	cmp	r2, r3
 800814c:	d909      	bls.n	8008162 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800814e:	463b      	mov	r3, r7
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	6a1a      	ldr	r2, [r3, #32]
 8008154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008158:	1ad2      	subs	r2, r2, r3
 800815a:	463b      	mov	r3, r7
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	621a      	str	r2, [r3, #32]
 8008160:	e008      	b.n	8008174 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8008162:	463b      	mov	r3, r7
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800816c:	463b      	mov	r3, r7
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2200      	movs	r2, #0
 8008172:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 80ab 	beq.w	80082d4 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800817e:	1d3b      	adds	r3, r7, #4
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008186:	463b      	mov	r3, r7
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	785b      	ldrb	r3, [r3, #1]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d16f      	bne.n	8008270 <USB_EPStartXfer+0xda8>
 8008190:	1d3b      	adds	r3, r7, #4
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008198:	1d3b      	adds	r3, r7, #4
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	461a      	mov	r2, r3
 80081a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081a8:	4413      	add	r3, r2
 80081aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081ae:	463b      	mov	r3, r7
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	011a      	lsls	r2, r3, #4
 80081b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081ba:	4413      	add	r3, r2
 80081bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d116      	bne.n	80081fa <USB_EPStartXfer+0xd32>
 80081cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081d8:	b29a      	uxth	r2, r3
 80081da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081de:	801a      	strh	r2, [r3, #0]
 80081e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081f6:	801a      	strh	r2, [r3, #0]
 80081f8:	e05b      	b.n	80082b2 <USB_EPStartXfer+0xdea>
 80081fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081fe:	2b3e      	cmp	r3, #62	; 0x3e
 8008200:	d818      	bhi.n	8008234 <USB_EPStartXfer+0xd6c>
 8008202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008206:	085b      	lsrs	r3, r3, #1
 8008208:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800820c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d004      	beq.n	8008222 <USB_EPStartXfer+0xd5a>
 8008218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800821c:	3301      	adds	r3, #1
 800821e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008222:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008226:	b29b      	uxth	r3, r3
 8008228:	029b      	lsls	r3, r3, #10
 800822a:	b29a      	uxth	r2, r3
 800822c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008230:	801a      	strh	r2, [r3, #0]
 8008232:	e03e      	b.n	80082b2 <USB_EPStartXfer+0xdea>
 8008234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008238:	095b      	lsrs	r3, r3, #5
 800823a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800823e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008242:	f003 031f 	and.w	r3, r3, #31
 8008246:	2b00      	cmp	r3, #0
 8008248:	d104      	bne.n	8008254 <USB_EPStartXfer+0xd8c>
 800824a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800824e:	3b01      	subs	r3, #1
 8008250:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008258:	b29b      	uxth	r3, r3
 800825a:	029b      	lsls	r3, r3, #10
 800825c:	b29b      	uxth	r3, r3
 800825e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008266:	b29a      	uxth	r2, r3
 8008268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800826c:	801a      	strh	r2, [r3, #0]
 800826e:	e020      	b.n	80082b2 <USB_EPStartXfer+0xdea>
 8008270:	463b      	mov	r3, r7
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	785b      	ldrb	r3, [r3, #1]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d11b      	bne.n	80082b2 <USB_EPStartXfer+0xdea>
 800827a:	1d3b      	adds	r3, r7, #4
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008282:	b29b      	uxth	r3, r3
 8008284:	461a      	mov	r2, r3
 8008286:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800828a:	4413      	add	r3, r2
 800828c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008290:	463b      	mov	r3, r7
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	011a      	lsls	r2, r3, #4
 8008298:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800829c:	4413      	add	r3, r2
 800829e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80082a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80082b2:	463b      	mov	r3, r7
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	895b      	ldrh	r3, [r3, #10]
 80082b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082bc:	463b      	mov	r3, r7
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6959      	ldr	r1, [r3, #20]
 80082c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80082cc:	1d38      	adds	r0, r7, #4
 80082ce:	6800      	ldr	r0, [r0, #0]
 80082d0:	f000 fd2f 	bl	8008d32 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80082d4:	1d3b      	adds	r3, r7, #4
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	463b      	mov	r3, r7
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	f107 020a 	add.w	r2, r7, #10
 80082ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082f2:	8013      	strh	r3, [r2, #0]
 80082f4:	f107 030a 	add.w	r3, r7, #10
 80082f8:	f107 020a 	add.w	r2, r7, #10
 80082fc:	8812      	ldrh	r2, [r2, #0]
 80082fe:	f082 0210 	eor.w	r2, r2, #16
 8008302:	801a      	strh	r2, [r3, #0]
 8008304:	f107 030a 	add.w	r3, r7, #10
 8008308:	f107 020a 	add.w	r2, r7, #10
 800830c:	8812      	ldrh	r2, [r2, #0]
 800830e:	f082 0220 	eor.w	r2, r2, #32
 8008312:	801a      	strh	r2, [r3, #0]
 8008314:	1d3b      	adds	r3, r7, #4
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	463b      	mov	r3, r7
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	441a      	add	r2, r3
 8008322:	f107 030a 	add.w	r3, r7, #10
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800832c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008338:	b29b      	uxth	r3, r3
 800833a:	8013      	strh	r3, [r2, #0]
 800833c:	e3b5      	b.n	8008aaa <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800833e:	463b      	mov	r3, r7
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	7b1b      	ldrb	r3, [r3, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	f040 8090 	bne.w	800846a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800834a:	463b      	mov	r3, r7
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	699a      	ldr	r2, [r3, #24]
 8008350:	463b      	mov	r3, r7
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	429a      	cmp	r2, r3
 8008358:	d90e      	bls.n	8008378 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800835a:	463b      	mov	r3, r7
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008364:	463b      	mov	r3, r7
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	699a      	ldr	r2, [r3, #24]
 800836a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800836e:	1ad2      	subs	r2, r2, r3
 8008370:	463b      	mov	r3, r7
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	619a      	str	r2, [r3, #24]
 8008376:	e008      	b.n	800838a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8008378:	463b      	mov	r3, r7
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008382:	463b      	mov	r3, r7
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2200      	movs	r2, #0
 8008388:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800838a:	1d3b      	adds	r3, r7, #4
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008392:	1d3b      	adds	r3, r7, #4
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800839a:	b29b      	uxth	r3, r3
 800839c:	461a      	mov	r2, r3
 800839e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80083a2:	4413      	add	r3, r2
 80083a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083a8:	463b      	mov	r3, r7
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	011a      	lsls	r2, r3, #4
 80083b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80083b4:	4413      	add	r3, r2
 80083b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d116      	bne.n	80083f4 <USB_EPStartXfer+0xf2c>
 80083c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083ca:	881b      	ldrh	r3, [r3, #0]
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083d8:	801a      	strh	r2, [r3, #0]
 80083da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083de:	881b      	ldrh	r3, [r3, #0]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083f0:	801a      	strh	r2, [r3, #0]
 80083f2:	e32c      	b.n	8008a4e <USB_EPStartXfer+0x1586>
 80083f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083f8:	2b3e      	cmp	r3, #62	; 0x3e
 80083fa:	d818      	bhi.n	800842e <USB_EPStartXfer+0xf66>
 80083fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008400:	085b      	lsrs	r3, r3, #1
 8008402:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	d004      	beq.n	800841c <USB_EPStartXfer+0xf54>
 8008412:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008416:	3301      	adds	r3, #1
 8008418:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800841c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008420:	b29b      	uxth	r3, r3
 8008422:	029b      	lsls	r3, r3, #10
 8008424:	b29a      	uxth	r2, r3
 8008426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800842a:	801a      	strh	r2, [r3, #0]
 800842c:	e30f      	b.n	8008a4e <USB_EPStartXfer+0x1586>
 800842e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008432:	095b      	lsrs	r3, r3, #5
 8008434:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800843c:	f003 031f 	and.w	r3, r3, #31
 8008440:	2b00      	cmp	r3, #0
 8008442:	d104      	bne.n	800844e <USB_EPStartXfer+0xf86>
 8008444:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008448:	3b01      	subs	r3, #1
 800844a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800844e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008452:	b29b      	uxth	r3, r3
 8008454:	029b      	lsls	r3, r3, #10
 8008456:	b29b      	uxth	r3, r3
 8008458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800845c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008460:	b29a      	uxth	r2, r3
 8008462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008466:	801a      	strh	r2, [r3, #0]
 8008468:	e2f1      	b.n	8008a4e <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800846a:	463b      	mov	r3, r7
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	78db      	ldrb	r3, [r3, #3]
 8008470:	2b02      	cmp	r3, #2
 8008472:	f040 818f 	bne.w	8008794 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008476:	463b      	mov	r3, r7
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	785b      	ldrb	r3, [r3, #1]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d175      	bne.n	800856c <USB_EPStartXfer+0x10a4>
 8008480:	1d3b      	adds	r3, r7, #4
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008488:	1d3b      	adds	r3, r7, #4
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008490:	b29b      	uxth	r3, r3
 8008492:	461a      	mov	r2, r3
 8008494:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008498:	4413      	add	r3, r2
 800849a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800849e:	463b      	mov	r3, r7
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	011a      	lsls	r2, r3, #4
 80084a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80084aa:	4413      	add	r3, r2
 80084ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084b4:	463b      	mov	r3, r7
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d116      	bne.n	80084ec <USB_EPStartXfer+0x1024>
 80084be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084d0:	801a      	strh	r2, [r3, #0]
 80084d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	b29b      	uxth	r3, r3
 80084da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084e8:	801a      	strh	r2, [r3, #0]
 80084ea:	e065      	b.n	80085b8 <USB_EPStartXfer+0x10f0>
 80084ec:	463b      	mov	r3, r7
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	2b3e      	cmp	r3, #62	; 0x3e
 80084f4:	d81a      	bhi.n	800852c <USB_EPStartXfer+0x1064>
 80084f6:	463b      	mov	r3, r7
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	085b      	lsrs	r3, r3, #1
 80084fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008502:	463b      	mov	r3, r7
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	2b00      	cmp	r3, #0
 800850e:	d004      	beq.n	800851a <USB_EPStartXfer+0x1052>
 8008510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008514:	3301      	adds	r3, #1
 8008516:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800851a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800851e:	b29b      	uxth	r3, r3
 8008520:	029b      	lsls	r3, r3, #10
 8008522:	b29a      	uxth	r2, r3
 8008524:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008528:	801a      	strh	r2, [r3, #0]
 800852a:	e045      	b.n	80085b8 <USB_EPStartXfer+0x10f0>
 800852c:	463b      	mov	r3, r7
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	095b      	lsrs	r3, r3, #5
 8008534:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008538:	463b      	mov	r3, r7
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	f003 031f 	and.w	r3, r3, #31
 8008542:	2b00      	cmp	r3, #0
 8008544:	d104      	bne.n	8008550 <USB_EPStartXfer+0x1088>
 8008546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800854a:	3b01      	subs	r3, #1
 800854c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008554:	b29b      	uxth	r3, r3
 8008556:	029b      	lsls	r3, r3, #10
 8008558:	b29b      	uxth	r3, r3
 800855a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800855e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008562:	b29a      	uxth	r2, r3
 8008564:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008568:	801a      	strh	r2, [r3, #0]
 800856a:	e025      	b.n	80085b8 <USB_EPStartXfer+0x10f0>
 800856c:	463b      	mov	r3, r7
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	785b      	ldrb	r3, [r3, #1]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d120      	bne.n	80085b8 <USB_EPStartXfer+0x10f0>
 8008576:	1d3b      	adds	r3, r7, #4
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800857e:	1d3b      	adds	r3, r7, #4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008586:	b29b      	uxth	r3, r3
 8008588:	461a      	mov	r2, r3
 800858a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800858e:	4413      	add	r3, r2
 8008590:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008594:	463b      	mov	r3, r7
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	011a      	lsls	r2, r3, #4
 800859c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085a0:	4413      	add	r3, r2
 80085a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085aa:	463b      	mov	r3, r7
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80085b6:	801a      	strh	r2, [r3, #0]
 80085b8:	1d3b      	adds	r3, r7, #4
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085c0:	463b      	mov	r3, r7
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	785b      	ldrb	r3, [r3, #1]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d175      	bne.n	80086b6 <USB_EPStartXfer+0x11ee>
 80085ca:	1d3b      	adds	r3, r7, #4
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80085d2:	1d3b      	adds	r3, r7, #4
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085da:	b29b      	uxth	r3, r3
 80085dc:	461a      	mov	r2, r3
 80085de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80085e2:	4413      	add	r3, r2
 80085e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80085e8:	463b      	mov	r3, r7
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	011a      	lsls	r2, r3, #4
 80085f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80085f4:	4413      	add	r3, r2
 80085f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085fe:	463b      	mov	r3, r7
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d116      	bne.n	8008636 <USB_EPStartXfer+0x116e>
 8008608:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	b29b      	uxth	r3, r3
 8008610:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008614:	b29a      	uxth	r2, r3
 8008616:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800861a:	801a      	strh	r2, [r3, #0]
 800861c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	b29b      	uxth	r3, r3
 8008624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800862c:	b29a      	uxth	r2, r3
 800862e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008632:	801a      	strh	r2, [r3, #0]
 8008634:	e061      	b.n	80086fa <USB_EPStartXfer+0x1232>
 8008636:	463b      	mov	r3, r7
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	2b3e      	cmp	r3, #62	; 0x3e
 800863e:	d81a      	bhi.n	8008676 <USB_EPStartXfer+0x11ae>
 8008640:	463b      	mov	r3, r7
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	085b      	lsrs	r3, r3, #1
 8008648:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800864c:	463b      	mov	r3, r7
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	2b00      	cmp	r3, #0
 8008658:	d004      	beq.n	8008664 <USB_EPStartXfer+0x119c>
 800865a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800865e:	3301      	adds	r3, #1
 8008660:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008664:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008668:	b29b      	uxth	r3, r3
 800866a:	029b      	lsls	r3, r3, #10
 800866c:	b29a      	uxth	r2, r3
 800866e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008672:	801a      	strh	r2, [r3, #0]
 8008674:	e041      	b.n	80086fa <USB_EPStartXfer+0x1232>
 8008676:	463b      	mov	r3, r7
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	095b      	lsrs	r3, r3, #5
 800867e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008682:	463b      	mov	r3, r7
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	f003 031f 	and.w	r3, r3, #31
 800868c:	2b00      	cmp	r3, #0
 800868e:	d104      	bne.n	800869a <USB_EPStartXfer+0x11d2>
 8008690:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008694:	3b01      	subs	r3, #1
 8008696:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800869a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800869e:	b29b      	uxth	r3, r3
 80086a0:	029b      	lsls	r3, r3, #10
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086b2:	801a      	strh	r2, [r3, #0]
 80086b4:	e021      	b.n	80086fa <USB_EPStartXfer+0x1232>
 80086b6:	463b      	mov	r3, r7
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	785b      	ldrb	r3, [r3, #1]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d11c      	bne.n	80086fa <USB_EPStartXfer+0x1232>
 80086c0:	1d3b      	adds	r3, r7, #4
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	461a      	mov	r2, r3
 80086cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80086d0:	4413      	add	r3, r2
 80086d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086d6:	463b      	mov	r3, r7
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	011a      	lsls	r2, r3, #4
 80086de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80086e2:	4413      	add	r3, r2
 80086e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086ec:	463b      	mov	r3, r7
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80086f8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80086fa:	463b      	mov	r3, r7
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 81a4 	beq.w	8008a4e <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008706:	1d3b      	adds	r3, r7, #4
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	463b      	mov	r3, r7
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	881b      	ldrh	r3, [r3, #0]
 8008716:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800871a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800871e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d005      	beq.n	8008732 <USB_EPStartXfer+0x126a>
 8008726:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800872a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10d      	bne.n	800874e <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008732:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800873a:	2b00      	cmp	r3, #0
 800873c:	f040 8187 	bne.w	8008a4e <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008740:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008748:	2b00      	cmp	r3, #0
 800874a:	f040 8180 	bne.w	8008a4e <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800874e:	1d3b      	adds	r3, r7, #4
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	463b      	mov	r3, r7
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	b29b      	uxth	r3, r3
 8008760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008768:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800876c:	1d3b      	adds	r3, r7, #4
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	463b      	mov	r3, r7
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	441a      	add	r2, r3
 800877a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800877e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800878a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800878e:	b29b      	uxth	r3, r3
 8008790:	8013      	strh	r3, [r2, #0]
 8008792:	e15c      	b.n	8008a4e <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008794:	463b      	mov	r3, r7
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	78db      	ldrb	r3, [r3, #3]
 800879a:	2b01      	cmp	r3, #1
 800879c:	f040 8155 	bne.w	8008a4a <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80087a0:	463b      	mov	r3, r7
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	699a      	ldr	r2, [r3, #24]
 80087a6:	463b      	mov	r3, r7
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d90e      	bls.n	80087ce <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80087b0:	463b      	mov	r3, r7
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80087ba:	463b      	mov	r3, r7
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	699a      	ldr	r2, [r3, #24]
 80087c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c4:	1ad2      	subs	r2, r2, r3
 80087c6:	463b      	mov	r3, r7
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	619a      	str	r2, [r3, #24]
 80087cc:	e008      	b.n	80087e0 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80087ce:	463b      	mov	r3, r7
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80087d8:	463b      	mov	r3, r7
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2200      	movs	r2, #0
 80087de:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80087e0:	463b      	mov	r3, r7
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	785b      	ldrb	r3, [r3, #1]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d16f      	bne.n	80088ca <USB_EPStartXfer+0x1402>
 80087ea:	1d3b      	adds	r3, r7, #4
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087f2:	1d3b      	adds	r3, r7, #4
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	461a      	mov	r2, r3
 80087fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008802:	4413      	add	r3, r2
 8008804:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008808:	463b      	mov	r3, r7
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	011a      	lsls	r2, r3, #4
 8008810:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008814:	4413      	add	r3, r2
 8008816:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800881a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800881e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008822:	2b00      	cmp	r3, #0
 8008824:	d116      	bne.n	8008854 <USB_EPStartXfer+0x138c>
 8008826:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	b29b      	uxth	r3, r3
 800882e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008832:	b29a      	uxth	r2, r3
 8008834:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008838:	801a      	strh	r2, [r3, #0]
 800883a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800883e:	881b      	ldrh	r3, [r3, #0]
 8008840:	b29b      	uxth	r3, r3
 8008842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800884a:	b29a      	uxth	r2, r3
 800884c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008850:	801a      	strh	r2, [r3, #0]
 8008852:	e05f      	b.n	8008914 <USB_EPStartXfer+0x144c>
 8008854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008858:	2b3e      	cmp	r3, #62	; 0x3e
 800885a:	d818      	bhi.n	800888e <USB_EPStartXfer+0x13c6>
 800885c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008860:	085b      	lsrs	r3, r3, #1
 8008862:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	d004      	beq.n	800887c <USB_EPStartXfer+0x13b4>
 8008872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008876:	3301      	adds	r3, #1
 8008878:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800887c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008880:	b29b      	uxth	r3, r3
 8008882:	029b      	lsls	r3, r3, #10
 8008884:	b29a      	uxth	r2, r3
 8008886:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800888a:	801a      	strh	r2, [r3, #0]
 800888c:	e042      	b.n	8008914 <USB_EPStartXfer+0x144c>
 800888e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008892:	095b      	lsrs	r3, r3, #5
 8008894:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800889c:	f003 031f 	and.w	r3, r3, #31
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d104      	bne.n	80088ae <USB_EPStartXfer+0x13e6>
 80088a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088a8:	3b01      	subs	r3, #1
 80088aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	029b      	lsls	r3, r3, #10
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088c6:	801a      	strh	r2, [r3, #0]
 80088c8:	e024      	b.n	8008914 <USB_EPStartXfer+0x144c>
 80088ca:	463b      	mov	r3, r7
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	785b      	ldrb	r3, [r3, #1]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d11f      	bne.n	8008914 <USB_EPStartXfer+0x144c>
 80088d4:	1d3b      	adds	r3, r7, #4
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088dc:	1d3b      	adds	r3, r7, #4
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	461a      	mov	r2, r3
 80088e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ec:	4413      	add	r3, r2
 80088ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088f2:	463b      	mov	r3, r7
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	011a      	lsls	r2, r3, #4
 80088fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088fe:	4413      	add	r3, r2
 8008900:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008904:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800890c:	b29a      	uxth	r2, r3
 800890e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008912:	801a      	strh	r2, [r3, #0]
 8008914:	1d3b      	adds	r3, r7, #4
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800891c:	463b      	mov	r3, r7
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	785b      	ldrb	r3, [r3, #1]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d16f      	bne.n	8008a06 <USB_EPStartXfer+0x153e>
 8008926:	1d3b      	adds	r3, r7, #4
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800892e:	1d3b      	adds	r3, r7, #4
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008936:	b29b      	uxth	r3, r3
 8008938:	461a      	mov	r2, r3
 800893a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800893e:	4413      	add	r3, r2
 8008940:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008944:	463b      	mov	r3, r7
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	011a      	lsls	r2, r3, #4
 800894c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008950:	4413      	add	r3, r2
 8008952:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008956:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800895a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800895e:	2b00      	cmp	r3, #0
 8008960:	d116      	bne.n	8008990 <USB_EPStartXfer+0x14c8>
 8008962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	b29b      	uxth	r3, r3
 800896a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800896e:	b29a      	uxth	r2, r3
 8008970:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008974:	801a      	strh	r2, [r3, #0]
 8008976:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800897a:	881b      	ldrh	r3, [r3, #0]
 800897c:	b29b      	uxth	r3, r3
 800897e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008986:	b29a      	uxth	r2, r3
 8008988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800898c:	801a      	strh	r2, [r3, #0]
 800898e:	e05e      	b.n	8008a4e <USB_EPStartXfer+0x1586>
 8008990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008994:	2b3e      	cmp	r3, #62	; 0x3e
 8008996:	d818      	bhi.n	80089ca <USB_EPStartXfer+0x1502>
 8008998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800899c:	085b      	lsrs	r3, r3, #1
 800899e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d004      	beq.n	80089b8 <USB_EPStartXfer+0x14f0>
 80089ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089b2:	3301      	adds	r3, #1
 80089b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089bc:	b29b      	uxth	r3, r3
 80089be:	029b      	lsls	r3, r3, #10
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089c6:	801a      	strh	r2, [r3, #0]
 80089c8:	e041      	b.n	8008a4e <USB_EPStartXfer+0x1586>
 80089ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ce:	095b      	lsrs	r3, r3, #5
 80089d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089d8:	f003 031f 	and.w	r3, r3, #31
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d104      	bne.n	80089ea <USB_EPStartXfer+0x1522>
 80089e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089e4:	3b01      	subs	r3, #1
 80089e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	029b      	lsls	r3, r3, #10
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a02:	801a      	strh	r2, [r3, #0]
 8008a04:	e023      	b.n	8008a4e <USB_EPStartXfer+0x1586>
 8008a06:	463b      	mov	r3, r7
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	785b      	ldrb	r3, [r3, #1]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d11e      	bne.n	8008a4e <USB_EPStartXfer+0x1586>
 8008a10:	1d3b      	adds	r3, r7, #4
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a20:	4413      	add	r3, r2
 8008a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a26:	463b      	mov	r3, r7
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	011a      	lsls	r2, r3, #4
 8008a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a32:	4413      	add	r3, r2
 8008a34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a46:	801a      	strh	r2, [r3, #0]
 8008a48:	e001      	b.n	8008a4e <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e02e      	b.n	8008aac <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a4e:	1d3b      	adds	r3, r7, #4
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	463b      	mov	r3, r7
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a68:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008a6c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008a70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008a74:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008a78:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008a7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008a80:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008a84:	1d3b      	adds	r3, r7, #4
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	463b      	mov	r3, r7
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	441a      	add	r2, r3
 8008a92:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b085      	sub	sp, #20
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	785b      	ldrb	r3, [r3, #1]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d020      	beq.n	8008b0a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4413      	add	r3, r2
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ade:	81bb      	strh	r3, [r7, #12]
 8008ae0:	89bb      	ldrh	r3, [r7, #12]
 8008ae2:	f083 0310 	eor.w	r3, r3, #16
 8008ae6:	81bb      	strh	r3, [r7, #12]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	441a      	add	r2, r3
 8008af2:	89bb      	ldrh	r3, [r7, #12]
 8008af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	8013      	strh	r3, [r2, #0]
 8008b08:	e01f      	b.n	8008b4a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b20:	81fb      	strh	r3, [r7, #14]
 8008b22:	89fb      	ldrh	r3, [r7, #14]
 8008b24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b28:	81fb      	strh	r3, [r7, #14]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	441a      	add	r2, r3
 8008b34:	89fb      	ldrh	r3, [r7, #14]
 8008b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr

08008b56 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b087      	sub	sp, #28
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	7b1b      	ldrb	r3, [r3, #12]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f040 809d 	bne.w	8008ca4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	785b      	ldrb	r3, [r3, #1]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d04c      	beq.n	8008c0c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	823b      	strh	r3, [r7, #16]
 8008b80:	8a3b      	ldrh	r3, [r7, #16]
 8008b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d01b      	beq.n	8008bc2 <USB_EPClearStall+0x6c>
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba0:	81fb      	strh	r3, [r7, #14]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	441a      	add	r2, r3
 8008bac:	89fb      	ldrh	r3, [r7, #14]
 8008bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	78db      	ldrb	r3, [r3, #3]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d06c      	beq.n	8008ca4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008be0:	81bb      	strh	r3, [r7, #12]
 8008be2:	89bb      	ldrh	r3, [r7, #12]
 8008be4:	f083 0320 	eor.w	r3, r3, #32
 8008be8:	81bb      	strh	r3, [r7, #12]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	441a      	add	r2, r3
 8008bf4:	89bb      	ldrh	r3, [r7, #12]
 8008bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	8013      	strh	r3, [r2, #0]
 8008c0a:	e04b      	b.n	8008ca4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	82fb      	strh	r3, [r7, #22]
 8008c1a:	8afb      	ldrh	r3, [r7, #22]
 8008c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01b      	beq.n	8008c5c <USB_EPClearStall+0x106>
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	881b      	ldrh	r3, [r3, #0]
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c3a:	82bb      	strh	r3, [r7, #20]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	441a      	add	r2, r3
 8008c46:	8abb      	ldrh	r3, [r7, #20]
 8008c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	4413      	add	r3, r2
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c72:	827b      	strh	r3, [r7, #18]
 8008c74:	8a7b      	ldrh	r3, [r7, #18]
 8008c76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c7a:	827b      	strh	r3, [r7, #18]
 8008c7c:	8a7b      	ldrh	r3, [r7, #18]
 8008c7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c82:	827b      	strh	r3, [r7, #18]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	441a      	add	r2, r3
 8008c8e:	8a7b      	ldrh	r3, [r7, #18]
 8008c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	371c      	adds	r7, #28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bc80      	pop	{r7}
 8008cae:	4770      	bx	lr

08008cb0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008cbc:	78fb      	ldrb	r3, [r7, #3]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d103      	bne.n	8008cca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2280      	movs	r2, #128	; 0x80
 8008cc6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bc80      	pop	{r7}
 8008cd4:	4770      	bx	lr

08008cd6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bc80      	pop	{r7}
 8008ce8:	4770      	bx	lr

08008cea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bc80      	pop	{r7}
 8008cfc:	4770      	bx	lr

08008cfe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b085      	sub	sp, #20
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008d10:	68fb      	ldr	r3, [r7, #12]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bc80      	pop	{r7}
 8008d1a:	4770      	bx	lr

08008d1c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bc80      	pop	{r7}
 8008d30:	4770      	bx	lr

08008d32 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008d32:	b480      	push	{r7}
 8008d34:	b08d      	sub	sp, #52	; 0x34
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	461a      	mov	r2, r3
 8008d40:	460b      	mov	r3, r1
 8008d42:	80fb      	strh	r3, [r7, #6]
 8008d44:	4613      	mov	r3, r2
 8008d46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008d48:	88bb      	ldrh	r3, [r7, #4]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	085b      	lsrs	r3, r3, #1
 8008d4e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d58:	88fb      	ldrh	r3, [r7, #6]
 8008d5a:	005a      	lsls	r2, r3, #1
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d64:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d6a:	e01e      	b.n	8008daa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	3301      	adds	r3, #1
 8008d76:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	021b      	lsls	r3, r3, #8
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	461a      	mov	r2, r3
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d94:	3302      	adds	r3, #2
 8008d96:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9a:	3302      	adds	r3, #2
 8008d9c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	3301      	adds	r3, #1
 8008da2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da6:	3b01      	subs	r3, #1
 8008da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1dd      	bne.n	8008d6c <USB_WritePMA+0x3a>
  }
}
 8008db0:	bf00      	nop
 8008db2:	bf00      	nop
 8008db4:	3734      	adds	r7, #52	; 0x34
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bc80      	pop	{r7}
 8008dba:	4770      	bx	lr

08008dbc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b08b      	sub	sp, #44	; 0x2c
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	461a      	mov	r2, r3
 8008dca:	460b      	mov	r3, r1
 8008dcc:	80fb      	strh	r3, [r7, #6]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008dd2:	88bb      	ldrh	r3, [r7, #4]
 8008dd4:	085b      	lsrs	r3, r3, #1
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008de2:	88fb      	ldrh	r3, [r7, #6]
 8008de4:	005a      	lsls	r2, r3, #1
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dee:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	627b      	str	r3, [r7, #36]	; 0x24
 8008df4:	e01b      	b.n	8008e2e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	3302      	adds	r3, #2
 8008e02:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	0a1b      	lsrs	r3, r3, #8
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	3302      	adds	r3, #2
 8008e26:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e0      	bne.n	8008df6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008e34:	88bb      	ldrh	r3, [r7, #4]
 8008e36:	f003 0301 	and.w	r3, r3, #1
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d007      	beq.n	8008e50 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	881b      	ldrh	r3, [r3, #0]
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	701a      	strb	r2, [r3, #0]
  }
}
 8008e50:	bf00      	nop
 8008e52:	372c      	adds	r7, #44	; 0x2c
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bc80      	pop	{r7}
 8008e58:	4770      	bx	lr

08008e5a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	460b      	mov	r3, r1
 8008e64:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	7c1b      	ldrb	r3, [r3, #16]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d115      	bne.n	8008e9e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e76:	2202      	movs	r2, #2
 8008e78:	2181      	movs	r1, #129	; 0x81
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f004 fddd 	bl	800da3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f004 fdd3 	bl	800da3a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008e9c:	e012      	b.n	8008ec4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008e9e:	2340      	movs	r3, #64	; 0x40
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	2181      	movs	r1, #129	; 0x81
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f004 fdc8 	bl	800da3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008eb0:	2340      	movs	r3, #64	; 0x40
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f004 fdbf 	bl	800da3a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ec4:	2308      	movs	r3, #8
 8008ec6:	2203      	movs	r2, #3
 8008ec8:	2182      	movs	r1, #130	; 0x82
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f004 fdb5 	bl	800da3a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ed6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008eda:	f004 fed5 	bl	800dc88 <USBD_static_malloc>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d102      	bne.n	8008ef6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	73fb      	strb	r3, [r7, #15]
 8008ef4:	e026      	b.n	8008f44 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008efc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	7c1b      	ldrb	r3, [r3, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d109      	bne.n	8008f34 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f2a:	2101      	movs	r1, #1
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f004 fe75 	bl	800dc1c <USBD_LL_PrepareReceive>
 8008f32:	e007      	b.n	8008f44 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f3a:	2340      	movs	r3, #64	; 0x40
 8008f3c:	2101      	movs	r1, #1
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f004 fe6c 	bl	800dc1c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	460b      	mov	r3, r1
 8008f58:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008f5e:	2181      	movs	r1, #129	; 0x81
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f004 fd90 	bl	800da86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008f6c:	2101      	movs	r1, #1
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f004 fd89 	bl	800da86 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008f7c:	2182      	movs	r1, #130	; 0x82
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f004 fd81 	bl	800da86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00e      	beq.n	8008fb2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f004 fe7b 	bl	800dca0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fcc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d039      	beq.n	800905a <USBD_CDC_Setup+0x9e>
 8008fe6:	2b20      	cmp	r3, #32
 8008fe8:	d17f      	bne.n	80090ea <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	88db      	ldrh	r3, [r3, #6]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d029      	beq.n	8009046 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	b25b      	sxtb	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	da11      	bge.n	8009020 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	683a      	ldr	r2, [r7, #0]
 8009006:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009008:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	88d2      	ldrh	r2, [r2, #6]
 800900e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009010:	6939      	ldr	r1, [r7, #16]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	88db      	ldrh	r3, [r3, #6]
 8009016:	461a      	mov	r2, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f001 fa0a 	bl	800a432 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800901e:	e06b      	b.n	80090f8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	785a      	ldrb	r2, [r3, #1]
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	88db      	ldrh	r3, [r3, #6]
 800902e:	b2da      	uxtb	r2, r3
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009036:	6939      	ldr	r1, [r7, #16]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	88db      	ldrh	r3, [r3, #6]
 800903c:	461a      	mov	r2, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f001 fa25 	bl	800a48e <USBD_CtlPrepareRx>
      break;
 8009044:	e058      	b.n	80090f8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	7850      	ldrb	r0, [r2, #1]
 8009052:	2200      	movs	r2, #0
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	4798      	blx	r3
      break;
 8009058:	e04e      	b.n	80090f8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	785b      	ldrb	r3, [r3, #1]
 800905e:	2b0b      	cmp	r3, #11
 8009060:	d02e      	beq.n	80090c0 <USBD_CDC_Setup+0x104>
 8009062:	2b0b      	cmp	r3, #11
 8009064:	dc38      	bgt.n	80090d8 <USBD_CDC_Setup+0x11c>
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <USBD_CDC_Setup+0xb4>
 800906a:	2b0a      	cmp	r3, #10
 800906c:	d014      	beq.n	8009098 <USBD_CDC_Setup+0xdc>
 800906e:	e033      	b.n	80090d8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009076:	2b03      	cmp	r3, #3
 8009078:	d107      	bne.n	800908a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800907a:	f107 030c 	add.w	r3, r7, #12
 800907e:	2202      	movs	r2, #2
 8009080:	4619      	mov	r1, r3
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f001 f9d5 	bl	800a432 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009088:	e02e      	b.n	80090e8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 f966 	bl	800a35e <USBD_CtlError>
            ret = USBD_FAIL;
 8009092:	2302      	movs	r3, #2
 8009094:	75fb      	strb	r3, [r7, #23]
          break;
 8009096:	e027      	b.n	80090e8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d107      	bne.n	80090b2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80090a2:	f107 030f 	add.w	r3, r7, #15
 80090a6:	2201      	movs	r2, #1
 80090a8:	4619      	mov	r1, r3
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f001 f9c1 	bl	800a432 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090b0:	e01a      	b.n	80090e8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80090b2:	6839      	ldr	r1, [r7, #0]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f001 f952 	bl	800a35e <USBD_CtlError>
            ret = USBD_FAIL;
 80090ba:	2302      	movs	r3, #2
 80090bc:	75fb      	strb	r3, [r7, #23]
          break;
 80090be:	e013      	b.n	80090e8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d00d      	beq.n	80090e6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f001 f946 	bl	800a35e <USBD_CtlError>
            ret = USBD_FAIL;
 80090d2:	2302      	movs	r3, #2
 80090d4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80090d6:	e006      	b.n	80090e6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f001 f93f 	bl	800a35e <USBD_CtlError>
          ret = USBD_FAIL;
 80090e0:	2302      	movs	r3, #2
 80090e2:	75fb      	strb	r3, [r7, #23]
          break;
 80090e4:	e000      	b.n	80090e8 <USBD_CDC_Setup+0x12c>
          break;
 80090e6:	bf00      	nop
      }
      break;
 80090e8:	e006      	b.n	80090f8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 f936 	bl	800a35e <USBD_CtlError>
      ret = USBD_FAIL;
 80090f2:	2302      	movs	r3, #2
 80090f4:	75fb      	strb	r3, [r7, #23]
      break;
 80090f6:	bf00      	nop
  }

  return ret;
 80090f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3718      	adds	r7, #24
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	460b      	mov	r3, r1
 800910c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009114:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800911c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009124:	2b00      	cmp	r3, #0
 8009126:	d03a      	beq.n	800919e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009128:	78fa      	ldrb	r2, [r7, #3]
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	4613      	mov	r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4413      	add	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	440b      	add	r3, r1
 8009136:	331c      	adds	r3, #28
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d029      	beq.n	8009192 <USBD_CDC_DataIn+0x90>
 800913e:	78fa      	ldrb	r2, [r7, #3]
 8009140:	6879      	ldr	r1, [r7, #4]
 8009142:	4613      	mov	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	440b      	add	r3, r1
 800914c:	331c      	adds	r3, #28
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	78f9      	ldrb	r1, [r7, #3]
 8009152:	68b8      	ldr	r0, [r7, #8]
 8009154:	460b      	mov	r3, r1
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	440b      	add	r3, r1
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	4403      	add	r3, r0
 800915e:	3338      	adds	r3, #56	; 0x38
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	fbb2 f1f3 	udiv	r1, r2, r3
 8009166:	fb03 f301 	mul.w	r3, r3, r1
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	2b00      	cmp	r3, #0
 800916e:	d110      	bne.n	8009192 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009170:	78fa      	ldrb	r2, [r7, #3]
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	4613      	mov	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	440b      	add	r3, r1
 800917e:	331c      	adds	r3, #28
 8009180:	2200      	movs	r2, #0
 8009182:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009184:	78f9      	ldrb	r1, [r7, #3]
 8009186:	2300      	movs	r3, #0
 8009188:	2200      	movs	r2, #0
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f004 fd23 	bl	800dbd6 <USBD_LL_Transmit>
 8009190:	e003      	b.n	800919a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	e000      	b.n	80091a0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800919e:	2302      	movs	r3, #2
  }
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	460b      	mov	r3, r1
 80091b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80091bc:	78fb      	ldrb	r3, [r7, #3]
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f004 fd4e 	bl	800dc62 <USBD_LL_GetRxDataSize>
 80091c6:	4602      	mov	r2, r0
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00d      	beq.n	80091f4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80091ec:	4611      	mov	r1, r2
 80091ee:	4798      	blx	r3

    return USBD_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	e000      	b.n	80091f6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80091f4:	2302      	movs	r3, #2
  }
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800920c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009214:	2b00      	cmp	r3, #0
 8009216:	d015      	beq.n	8009244 <USBD_CDC_EP0_RxReady+0x46>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800921e:	2bff      	cmp	r3, #255	; 0xff
 8009220:	d010      	beq.n	8009244 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009230:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009238:	b292      	uxth	r2, r2
 800923a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	22ff      	movs	r2, #255	; 0xff
 8009240:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2243      	movs	r2, #67	; 0x43
 800925c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800925e:	4b03      	ldr	r3, [pc, #12]	; (800926c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009260:	4618      	mov	r0, r3
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	bc80      	pop	{r7}
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	200000a4 	.word	0x200000a4

08009270 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2243      	movs	r2, #67	; 0x43
 800927c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800927e:	4b03      	ldr	r3, [pc, #12]	; (800928c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009280:	4618      	mov	r0, r3
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	bc80      	pop	{r7}
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	20000060 	.word	0x20000060

08009290 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2243      	movs	r2, #67	; 0x43
 800929c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800929e:	4b03      	ldr	r3, [pc, #12]	; (80092ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bc80      	pop	{r7}
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	200000e8 	.word	0x200000e8

080092b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	220a      	movs	r2, #10
 80092bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80092be:	4b03      	ldr	r3, [pc, #12]	; (80092cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bc80      	pop	{r7}
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	2000001c 	.word	0x2000001c

080092d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80092da:	2302      	movs	r3, #2
 80092dc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d005      	beq.n	80092f0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bc80      	pop	{r7}
 80092fa:	4770      	bx	lr

080092fc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b087      	sub	sp, #28
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	4613      	mov	r3, r2
 8009308:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009310:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800931a:	88fa      	ldrh	r2, [r7, #6]
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	371c      	adds	r7, #28
 8009328:	46bd      	mov	sp, r7
 800932a:	bc80      	pop	{r7}
 800932c:	4770      	bx	lr

0800932e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800932e:	b480      	push	{r7}
 8009330:	b085      	sub	sp, #20
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800933e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3714      	adds	r7, #20
 800934e:	46bd      	mov	sp, r7
 8009350:	bc80      	pop	{r7}
 8009352:	4770      	bx	lr

08009354 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009362:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936a:	2b00      	cmp	r3, #0
 800936c:	d01c      	beq.n	80093a8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009374:	2b00      	cmp	r3, #0
 8009376:	d115      	bne.n	80093a4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2201      	movs	r2, #1
 800937c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009396:	b29b      	uxth	r3, r3
 8009398:	2181      	movs	r1, #129	; 0x81
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f004 fc1b 	bl	800dbd6 <USBD_LL_Transmit>

      return USBD_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	e002      	b.n	80093aa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e000      	b.n	80093aa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80093a8:	2302      	movs	r3, #2
  }
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d017      	beq.n	80093fc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	7c1b      	ldrb	r3, [r3, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093de:	2101      	movs	r1, #1
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f004 fc1b 	bl	800dc1c <USBD_LL_PrepareReceive>
 80093e6:	e007      	b.n	80093f8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093ee:	2340      	movs	r3, #64	; 0x40
 80093f0:	2101      	movs	r1, #1
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f004 fc12 	bl	800dc1c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	e000      	b.n	80093fe <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80093fc:	2302      	movs	r3, #2
  }
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b084      	sub	sp, #16
 800940a:	af00      	add	r7, sp, #0
 800940c:	60f8      	str	r0, [r7, #12]
 800940e:	60b9      	str	r1, [r7, #8]
 8009410:	4613      	mov	r3, r2
 8009412:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800941a:	2302      	movs	r3, #2
 800941c:	e01a      	b.n	8009454 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009424:	2b00      	cmp	r3, #0
 8009426:	d003      	beq.n	8009430 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	79fa      	ldrb	r2, [r7, #7]
 800944a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f004 fa7f 	bl	800d950 <USBD_LL_Init>

  return USBD_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d006      	beq.n	800947e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
 800947c:	e001      	b.n	8009482 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800947e:	2302      	movs	r3, #2
 8009480:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	bc80      	pop	{r7}
 800948c:	4770      	bx	lr

0800948e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b082      	sub	sp, #8
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f004 fab4 	bl	800da04 <USBD_LL_Start>

  return USBD_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bc80      	pop	{r7}
 80094b8:	4770      	bx	lr

080094ba <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	460b      	mov	r3, r1
 80094c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80094c6:	2302      	movs	r3, #2
 80094c8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00c      	beq.n	80094ee <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	78fa      	ldrb	r2, [r7, #3]
 80094de:	4611      	mov	r1, r2
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	4798      	blx	r3
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	78fa      	ldrb	r2, [r7, #3]
 800950e:	4611      	mov	r1, r2
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	4798      	blx	r3

  return USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b082      	sub	sp, #8
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	4618      	mov	r0, r3
 8009532:	f000 fed8 	bl	800a2e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009544:	461a      	mov	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009552:	f003 031f 	and.w	r3, r3, #31
 8009556:	2b02      	cmp	r3, #2
 8009558:	d016      	beq.n	8009588 <USBD_LL_SetupStage+0x6a>
 800955a:	2b02      	cmp	r3, #2
 800955c:	d81c      	bhi.n	8009598 <USBD_LL_SetupStage+0x7a>
 800955e:	2b00      	cmp	r3, #0
 8009560:	d002      	beq.n	8009568 <USBD_LL_SetupStage+0x4a>
 8009562:	2b01      	cmp	r3, #1
 8009564:	d008      	beq.n	8009578 <USBD_LL_SetupStage+0x5a>
 8009566:	e017      	b.n	8009598 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f9cb 	bl	800990c <USBD_StdDevReq>
      break;
 8009576:	e01a      	b.n	80095ae <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800957e:	4619      	mov	r1, r3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fa2d 	bl	80099e0 <USBD_StdItfReq>
      break;
 8009586:	e012      	b.n	80095ae <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fa6d 	bl	8009a70 <USBD_StdEPReq>
      break;
 8009596:	e00a      	b.n	80095ae <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800959e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f004 fa8c 	bl	800dac4 <USBD_LL_StallEP>
      break;
 80095ac:	bf00      	nop
  }

  return USBD_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	460b      	mov	r3, r1
 80095c2:	607a      	str	r2, [r7, #4]
 80095c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80095c6:	7afb      	ldrb	r3, [r7, #11]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d14b      	bne.n	8009664 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80095d2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095da:	2b03      	cmp	r3, #3
 80095dc:	d134      	bne.n	8009648 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	68da      	ldr	r2, [r3, #12]
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d919      	bls.n	800961e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	68da      	ldr	r2, [r3, #12]
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	1ad2      	subs	r2, r2, r3
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	68da      	ldr	r2, [r3, #12]
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009600:	429a      	cmp	r2, r3
 8009602:	d203      	bcs.n	800960c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009608:	b29b      	uxth	r3, r3
 800960a:	e002      	b.n	8009612 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009610:	b29b      	uxth	r3, r3
 8009612:	461a      	mov	r2, r3
 8009614:	6879      	ldr	r1, [r7, #4]
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f000 ff57 	bl	800a4ca <USBD_CtlContinueRx>
 800961c:	e038      	b.n	8009690 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00a      	beq.n	8009640 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009630:	2b03      	cmp	r3, #3
 8009632:	d105      	bne.n	8009640 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f000 ff54 	bl	800a4ee <USBD_CtlSendStatus>
 8009646:	e023      	b.n	8009690 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800964e:	2b05      	cmp	r3, #5
 8009650:	d11e      	bne.n	8009690 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800965a:	2100      	movs	r1, #0
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f004 fa31 	bl	800dac4 <USBD_LL_StallEP>
 8009662:	e015      	b.n	8009690 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00d      	beq.n	800968c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009676:	2b03      	cmp	r3, #3
 8009678:	d108      	bne.n	800968c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	7afa      	ldrb	r2, [r7, #11]
 8009684:	4611      	mov	r1, r2
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	4798      	blx	r3
 800968a:	e001      	b.n	8009690 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800968c:	2302      	movs	r3, #2
 800968e:	e000      	b.n	8009692 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b086      	sub	sp, #24
 800969e:	af00      	add	r7, sp, #0
 80096a0:	60f8      	str	r0, [r7, #12]
 80096a2:	460b      	mov	r3, r1
 80096a4:	607a      	str	r2, [r7, #4]
 80096a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80096a8:	7afb      	ldrb	r3, [r7, #11]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d17f      	bne.n	80097ae <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	3314      	adds	r3, #20
 80096b2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d15c      	bne.n	8009778 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	68da      	ldr	r2, [r3, #12]
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d915      	bls.n	80096f6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	68da      	ldr	r2, [r3, #12]
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	1ad2      	subs	r2, r2, r3
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	b29b      	uxth	r3, r3
 80096de:	461a      	mov	r2, r3
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f000 fec1 	bl	800a46a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096e8:	2300      	movs	r3, #0
 80096ea:	2200      	movs	r2, #0
 80096ec:	2100      	movs	r1, #0
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f004 fa94 	bl	800dc1c <USBD_LL_PrepareReceive>
 80096f4:	e04e      	b.n	8009794 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	6912      	ldr	r2, [r2, #16]
 80096fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8009702:	fb02 f201 	mul.w	r2, r2, r1
 8009706:	1a9b      	subs	r3, r3, r2
 8009708:	2b00      	cmp	r3, #0
 800970a:	d11c      	bne.n	8009746 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	689a      	ldr	r2, [r3, #8]
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009714:	429a      	cmp	r2, r3
 8009716:	d316      	bcc.n	8009746 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	689a      	ldr	r2, [r3, #8]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009722:	429a      	cmp	r2, r3
 8009724:	d20f      	bcs.n	8009746 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009726:	2200      	movs	r2, #0
 8009728:	2100      	movs	r1, #0
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f000 fe9d 	bl	800a46a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009738:	2300      	movs	r3, #0
 800973a:	2200      	movs	r2, #0
 800973c:	2100      	movs	r1, #0
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	f004 fa6c 	bl	800dc1c <USBD_LL_PrepareReceive>
 8009744:	e026      	b.n	8009794 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00a      	beq.n	8009768 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009758:	2b03      	cmp	r3, #3
 800975a:	d105      	bne.n	8009768 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009768:	2180      	movs	r1, #128	; 0x80
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f004 f9aa 	bl	800dac4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 fecf 	bl	800a514 <USBD_CtlReceiveStatus>
 8009776:	e00d      	b.n	8009794 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800977e:	2b04      	cmp	r3, #4
 8009780:	d004      	beq.n	800978c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009788:	2b00      	cmp	r3, #0
 800978a:	d103      	bne.n	8009794 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800978c:	2180      	movs	r1, #128	; 0x80
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f004 f998 	bl	800dac4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800979a:	2b01      	cmp	r3, #1
 800979c:	d11d      	bne.n	80097da <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f7ff fe81 	bl	80094a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80097ac:	e015      	b.n	80097da <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00d      	beq.n	80097d6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80097c0:	2b03      	cmp	r3, #3
 80097c2:	d108      	bne.n	80097d6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	7afa      	ldrb	r2, [r7, #11]
 80097ce:	4611      	mov	r1, r2
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	4798      	blx	r3
 80097d4:	e001      	b.n	80097da <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80097d6:	2302      	movs	r3, #2
 80097d8:	e000      	b.n	80097dc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097ec:	2340      	movs	r3, #64	; 0x40
 80097ee:	2200      	movs	r2, #0
 80097f0:	2100      	movs	r1, #0
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f004 f921 	bl	800da3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2240      	movs	r2, #64	; 0x40
 8009804:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009808:	2340      	movs	r3, #64	; 0x40
 800980a:	2200      	movs	r2, #0
 800980c:	2180      	movs	r1, #128	; 0x80
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f004 f913 	bl	800da3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2240      	movs	r2, #64	; 0x40
 800981e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009844:	2b00      	cmp	r3, #0
 8009846:	d009      	beq.n	800985c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	6852      	ldr	r2, [r2, #4]
 8009854:	b2d2      	uxtb	r2, r2
 8009856:	4611      	mov	r1, r2
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	4798      	blx	r3
  }

  return USBD_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009866:	b480      	push	{r7}
 8009868:	b083      	sub	sp, #12
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	460b      	mov	r3, r1
 8009870:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	78fa      	ldrb	r2, [r7, #3]
 8009876:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	370c      	adds	r7, #12
 800987e:	46bd      	mov	sp, r7
 8009880:	bc80      	pop	{r7}
 8009882:	4770      	bx	lr

08009884 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2204      	movs	r2, #4
 800989c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bc80      	pop	{r7}
 80098aa:	4770      	bx	lr

080098ac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d105      	bne.n	80098ca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bc80      	pop	{r7}
 80098d4:	4770      	bx	lr

080098d6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b082      	sub	sp, #8
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	d10b      	bne.n	8009900 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ee:	69db      	ldr	r3, [r3, #28]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d005      	beq.n	8009900 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
	...

0800990c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009922:	2b40      	cmp	r3, #64	; 0x40
 8009924:	d005      	beq.n	8009932 <USBD_StdDevReq+0x26>
 8009926:	2b40      	cmp	r3, #64	; 0x40
 8009928:	d84f      	bhi.n	80099ca <USBD_StdDevReq+0xbe>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d009      	beq.n	8009942 <USBD_StdDevReq+0x36>
 800992e:	2b20      	cmp	r3, #32
 8009930:	d14b      	bne.n	80099ca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	4798      	blx	r3
      break;
 8009940:	e048      	b.n	80099d4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	785b      	ldrb	r3, [r3, #1]
 8009946:	2b09      	cmp	r3, #9
 8009948:	d839      	bhi.n	80099be <USBD_StdDevReq+0xb2>
 800994a:	a201      	add	r2, pc, #4	; (adr r2, 8009950 <USBD_StdDevReq+0x44>)
 800994c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009950:	080099a1 	.word	0x080099a1
 8009954:	080099b5 	.word	0x080099b5
 8009958:	080099bf 	.word	0x080099bf
 800995c:	080099ab 	.word	0x080099ab
 8009960:	080099bf 	.word	0x080099bf
 8009964:	08009983 	.word	0x08009983
 8009968:	08009979 	.word	0x08009979
 800996c:	080099bf 	.word	0x080099bf
 8009970:	08009997 	.word	0x08009997
 8009974:	0800998d 	.word	0x0800998d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f9dc 	bl	8009d38 <USBD_GetDescriptor>
          break;
 8009980:	e022      	b.n	80099c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fb3f 	bl	800a008 <USBD_SetAddress>
          break;
 800998a:	e01d      	b.n	80099c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fb7e 	bl	800a090 <USBD_SetConfig>
          break;
 8009994:	e018      	b.n	80099c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fc07 	bl	800a1ac <USBD_GetConfig>
          break;
 800999e:	e013      	b.n	80099c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fc37 	bl	800a216 <USBD_GetStatus>
          break;
 80099a8:	e00e      	b.n	80099c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fc65 	bl	800a27c <USBD_SetFeature>
          break;
 80099b2:	e009      	b.n	80099c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fc74 	bl	800a2a4 <USBD_ClrFeature>
          break;
 80099bc:	e004      	b.n	80099c8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fccc 	bl	800a35e <USBD_CtlError>
          break;
 80099c6:	bf00      	nop
      }
      break;
 80099c8:	e004      	b.n	80099d4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fcc6 	bl	800a35e <USBD_CtlError>
      break;
 80099d2:	bf00      	nop
  }

  return ret;
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop

080099e0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099f6:	2b40      	cmp	r3, #64	; 0x40
 80099f8:	d005      	beq.n	8009a06 <USBD_StdItfReq+0x26>
 80099fa:	2b40      	cmp	r3, #64	; 0x40
 80099fc:	d82e      	bhi.n	8009a5c <USBD_StdItfReq+0x7c>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <USBD_StdItfReq+0x26>
 8009a02:	2b20      	cmp	r3, #32
 8009a04:	d12a      	bne.n	8009a5c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d81d      	bhi.n	8009a4e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	889b      	ldrh	r3, [r3, #4]
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d813      	bhi.n	8009a44 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	4798      	blx	r3
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	88db      	ldrh	r3, [r3, #6]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d110      	bne.n	8009a58 <USBD_StdItfReq+0x78>
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10d      	bne.n	8009a58 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fd56 	bl	800a4ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a42:	e009      	b.n	8009a58 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fc89 	bl	800a35e <USBD_CtlError>
          break;
 8009a4c:	e004      	b.n	8009a58 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fc84 	bl	800a35e <USBD_CtlError>
          break;
 8009a56:	e000      	b.n	8009a5a <USBD_StdItfReq+0x7a>
          break;
 8009a58:	bf00      	nop
      }
      break;
 8009a5a:	e004      	b.n	8009a66 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fc7d 	bl	800a35e <USBD_CtlError>
      break;
 8009a64:	bf00      	nop
  }

  return USBD_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	889b      	ldrh	r3, [r3, #4]
 8009a82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a8c:	2b40      	cmp	r3, #64	; 0x40
 8009a8e:	d007      	beq.n	8009aa0 <USBD_StdEPReq+0x30>
 8009a90:	2b40      	cmp	r3, #64	; 0x40
 8009a92:	f200 8146 	bhi.w	8009d22 <USBD_StdEPReq+0x2b2>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00a      	beq.n	8009ab0 <USBD_StdEPReq+0x40>
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	f040 8141 	bne.w	8009d22 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	4798      	blx	r3
      break;
 8009aae:	e13d      	b.n	8009d2c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ab8:	2b20      	cmp	r3, #32
 8009aba:	d10a      	bne.n	8009ad2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	4798      	blx	r3
 8009aca:	4603      	mov	r3, r0
 8009acc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009ace:	7bfb      	ldrb	r3, [r7, #15]
 8009ad0:	e12d      	b.n	8009d2e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	785b      	ldrb	r3, [r3, #1]
 8009ad6:	2b03      	cmp	r3, #3
 8009ad8:	d007      	beq.n	8009aea <USBD_StdEPReq+0x7a>
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	f300 811b 	bgt.w	8009d16 <USBD_StdEPReq+0x2a6>
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d072      	beq.n	8009bca <USBD_StdEPReq+0x15a>
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d03a      	beq.n	8009b5e <USBD_StdEPReq+0xee>
 8009ae8:	e115      	b.n	8009d16 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d002      	beq.n	8009afa <USBD_StdEPReq+0x8a>
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	d015      	beq.n	8009b24 <USBD_StdEPReq+0xb4>
 8009af8:	e02b      	b.n	8009b52 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00c      	beq.n	8009b1a <USBD_StdEPReq+0xaa>
 8009b00:	7bbb      	ldrb	r3, [r7, #14]
 8009b02:	2b80      	cmp	r3, #128	; 0x80
 8009b04:	d009      	beq.n	8009b1a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b06:	7bbb      	ldrb	r3, [r7, #14]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f003 ffda 	bl	800dac4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b10:	2180      	movs	r1, #128	; 0x80
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f003 ffd6 	bl	800dac4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b18:	e020      	b.n	8009b5c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fc1e 	bl	800a35e <USBD_CtlError>
              break;
 8009b22:	e01b      	b.n	8009b5c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	885b      	ldrh	r3, [r3, #2]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10e      	bne.n	8009b4a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009b2c:	7bbb      	ldrb	r3, [r7, #14]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00b      	beq.n	8009b4a <USBD_StdEPReq+0xda>
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
 8009b34:	2b80      	cmp	r3, #128	; 0x80
 8009b36:	d008      	beq.n	8009b4a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	88db      	ldrh	r3, [r3, #6]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d104      	bne.n	8009b4a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009b40:	7bbb      	ldrb	r3, [r7, #14]
 8009b42:	4619      	mov	r1, r3
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f003 ffbd 	bl	800dac4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fccf 	bl	800a4ee <USBD_CtlSendStatus>

              break;
 8009b50:	e004      	b.n	8009b5c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009b52:	6839      	ldr	r1, [r7, #0]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fc02 	bl	800a35e <USBD_CtlError>
              break;
 8009b5a:	bf00      	nop
          }
          break;
 8009b5c:	e0e0      	b.n	8009d20 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d002      	beq.n	8009b6e <USBD_StdEPReq+0xfe>
 8009b68:	2b03      	cmp	r3, #3
 8009b6a:	d015      	beq.n	8009b98 <USBD_StdEPReq+0x128>
 8009b6c:	e026      	b.n	8009bbc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b6e:	7bbb      	ldrb	r3, [r7, #14]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00c      	beq.n	8009b8e <USBD_StdEPReq+0x11e>
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	2b80      	cmp	r3, #128	; 0x80
 8009b78:	d009      	beq.n	8009b8e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b7a:	7bbb      	ldrb	r3, [r7, #14]
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f003 ffa0 	bl	800dac4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b84:	2180      	movs	r1, #128	; 0x80
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f003 ff9c 	bl	800dac4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b8c:	e01c      	b.n	8009bc8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009b8e:	6839      	ldr	r1, [r7, #0]
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fbe4 	bl	800a35e <USBD_CtlError>
              break;
 8009b96:	e017      	b.n	8009bc8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	885b      	ldrh	r3, [r3, #2]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d112      	bne.n	8009bc6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ba0:	7bbb      	ldrb	r3, [r7, #14]
 8009ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d004      	beq.n	8009bb4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009baa:	7bbb      	ldrb	r3, [r7, #14]
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f003 ffa7 	bl	800db02 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fc9a 	bl	800a4ee <USBD_CtlSendStatus>
              }
              break;
 8009bba:	e004      	b.n	8009bc6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fbcd 	bl	800a35e <USBD_CtlError>
              break;
 8009bc4:	e000      	b.n	8009bc8 <USBD_StdEPReq+0x158>
              break;
 8009bc6:	bf00      	nop
          }
          break;
 8009bc8:	e0aa      	b.n	8009d20 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d002      	beq.n	8009bda <USBD_StdEPReq+0x16a>
 8009bd4:	2b03      	cmp	r3, #3
 8009bd6:	d032      	beq.n	8009c3e <USBD_StdEPReq+0x1ce>
 8009bd8:	e097      	b.n	8009d0a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d007      	beq.n	8009bf0 <USBD_StdEPReq+0x180>
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
 8009be2:	2b80      	cmp	r3, #128	; 0x80
 8009be4:	d004      	beq.n	8009bf0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009be6:	6839      	ldr	r1, [r7, #0]
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fbb8 	bl	800a35e <USBD_CtlError>
                break;
 8009bee:	e091      	b.n	8009d14 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	da0b      	bge.n	8009c10 <USBD_StdEPReq+0x1a0>
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
 8009bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bfe:	4613      	mov	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	3310      	adds	r3, #16
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	e00b      	b.n	8009c28 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c10:	7bbb      	ldrb	r3, [r7, #14]
 8009c12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c16:	4613      	mov	r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	4413      	add	r3, r2
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	4413      	add	r3, r2
 8009c26:	3304      	adds	r3, #4
 8009c28:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2202      	movs	r2, #2
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fbfb 	bl	800a432 <USBD_CtlSendData>
              break;
 8009c3c:	e06a      	b.n	8009d14 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	da11      	bge.n	8009c6a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c46:	7bbb      	ldrb	r3, [r7, #14]
 8009c48:	f003 020f 	and.w	r2, r3, #15
 8009c4c:	6879      	ldr	r1, [r7, #4]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	440b      	add	r3, r1
 8009c58:	3318      	adds	r3, #24
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d117      	bne.n	8009c90 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fb7b 	bl	800a35e <USBD_CtlError>
                  break;
 8009c68:	e054      	b.n	8009d14 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	f003 020f 	and.w	r2, r3, #15
 8009c70:	6879      	ldr	r1, [r7, #4]
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	440b      	add	r3, r1
 8009c7c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d104      	bne.n	8009c90 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c86:	6839      	ldr	r1, [r7, #0]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fb68 	bl	800a35e <USBD_CtlError>
                  break;
 8009c8e:	e041      	b.n	8009d14 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	da0b      	bge.n	8009cb0 <USBD_StdEPReq+0x240>
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
 8009c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4413      	add	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	3310      	adds	r3, #16
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	4413      	add	r3, r2
 8009cac:	3304      	adds	r3, #4
 8009cae:	e00b      	b.n	8009cc8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cb0:	7bbb      	ldrb	r3, [r7, #14]
 8009cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4413      	add	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <USBD_StdEPReq+0x266>
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
 8009cd2:	2b80      	cmp	r3, #128	; 0x80
 8009cd4:	d103      	bne.n	8009cde <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]
 8009cdc:	e00e      	b.n	8009cfc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009cde:	7bbb      	ldrb	r3, [r7, #14]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f003 ff2c 	bl	800db40 <USBD_LL_IsStallEP>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	e002      	b.n	8009cfc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	4619      	mov	r1, r3
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fb95 	bl	800a432 <USBD_CtlSendData>
              break;
 8009d08:	e004      	b.n	8009d14 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fb26 	bl	800a35e <USBD_CtlError>
              break;
 8009d12:	bf00      	nop
          }
          break;
 8009d14:	e004      	b.n	8009d20 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fb20 	bl	800a35e <USBD_CtlError>
          break;
 8009d1e:	bf00      	nop
      }
      break;
 8009d20:	e004      	b.n	8009d2c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fb1a 	bl	800a35e <USBD_CtlError>
      break;
 8009d2a:	bf00      	nop
  }

  return ret;
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
	...

08009d38 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d42:	2300      	movs	r3, #0
 8009d44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	885b      	ldrh	r3, [r3, #2]
 8009d52:	0a1b      	lsrs	r3, r3, #8
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	3b01      	subs	r3, #1
 8009d58:	2b06      	cmp	r3, #6
 8009d5a:	f200 8128 	bhi.w	8009fae <USBD_GetDescriptor+0x276>
 8009d5e:	a201      	add	r2, pc, #4	; (adr r2, 8009d64 <USBD_GetDescriptor+0x2c>)
 8009d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d64:	08009d81 	.word	0x08009d81
 8009d68:	08009d99 	.word	0x08009d99
 8009d6c:	08009dd9 	.word	0x08009dd9
 8009d70:	08009faf 	.word	0x08009faf
 8009d74:	08009faf 	.word	0x08009faf
 8009d78:	08009f4f 	.word	0x08009f4f
 8009d7c:	08009f7b 	.word	0x08009f7b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	7c12      	ldrb	r2, [r2, #16]
 8009d8c:	f107 0108 	add.w	r1, r7, #8
 8009d90:	4610      	mov	r0, r2
 8009d92:	4798      	blx	r3
 8009d94:	60f8      	str	r0, [r7, #12]
      break;
 8009d96:	e112      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	7c1b      	ldrb	r3, [r3, #16]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10d      	bne.n	8009dbc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da8:	f107 0208 	add.w	r2, r7, #8
 8009dac:	4610      	mov	r0, r2
 8009dae:	4798      	blx	r3
 8009db0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3301      	adds	r3, #1
 8009db6:	2202      	movs	r2, #2
 8009db8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009dba:	e100      	b.n	8009fbe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc4:	f107 0208 	add.w	r2, r7, #8
 8009dc8:	4610      	mov	r0, r2
 8009dca:	4798      	blx	r3
 8009dcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	701a      	strb	r2, [r3, #0]
      break;
 8009dd6:	e0f2      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	885b      	ldrh	r3, [r3, #2]
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	2b05      	cmp	r3, #5
 8009de0:	f200 80ac 	bhi.w	8009f3c <USBD_GetDescriptor+0x204>
 8009de4:	a201      	add	r2, pc, #4	; (adr r2, 8009dec <USBD_GetDescriptor+0xb4>)
 8009de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dea:	bf00      	nop
 8009dec:	08009e05 	.word	0x08009e05
 8009df0:	08009e39 	.word	0x08009e39
 8009df4:	08009e6d 	.word	0x08009e6d
 8009df8:	08009ea1 	.word	0x08009ea1
 8009dfc:	08009ed5 	.word	0x08009ed5
 8009e00:	08009f09 	.word	0x08009f09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00b      	beq.n	8009e28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	7c12      	ldrb	r2, [r2, #16]
 8009e1c:	f107 0108 	add.w	r1, r7, #8
 8009e20:	4610      	mov	r0, r2
 8009e22:	4798      	blx	r3
 8009e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e26:	e091      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fa97 	bl	800a35e <USBD_CtlError>
            err++;
 8009e30:	7afb      	ldrb	r3, [r7, #11]
 8009e32:	3301      	adds	r3, #1
 8009e34:	72fb      	strb	r3, [r7, #11]
          break;
 8009e36:	e089      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00b      	beq.n	8009e5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	7c12      	ldrb	r2, [r2, #16]
 8009e50:	f107 0108 	add.w	r1, r7, #8
 8009e54:	4610      	mov	r0, r2
 8009e56:	4798      	blx	r3
 8009e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e5a:	e077      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fa7d 	bl	800a35e <USBD_CtlError>
            err++;
 8009e64:	7afb      	ldrb	r3, [r7, #11]
 8009e66:	3301      	adds	r3, #1
 8009e68:	72fb      	strb	r3, [r7, #11]
          break;
 8009e6a:	e06f      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00b      	beq.n	8009e90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	7c12      	ldrb	r2, [r2, #16]
 8009e84:	f107 0108 	add.w	r1, r7, #8
 8009e88:	4610      	mov	r0, r2
 8009e8a:	4798      	blx	r3
 8009e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e8e:	e05d      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e90:	6839      	ldr	r1, [r7, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fa63 	bl	800a35e <USBD_CtlError>
            err++;
 8009e98:	7afb      	ldrb	r3, [r7, #11]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e9e:	e055      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00b      	beq.n	8009ec4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	7c12      	ldrb	r2, [r2, #16]
 8009eb8:	f107 0108 	add.w	r1, r7, #8
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	4798      	blx	r3
 8009ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ec2:	e043      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fa49 	bl	800a35e <USBD_CtlError>
            err++;
 8009ecc:	7afb      	ldrb	r3, [r7, #11]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ed2:	e03b      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00b      	beq.n	8009ef8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	7c12      	ldrb	r2, [r2, #16]
 8009eec:	f107 0108 	add.w	r1, r7, #8
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	4798      	blx	r3
 8009ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ef6:	e029      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fa2f 	bl	800a35e <USBD_CtlError>
            err++;
 8009f00:	7afb      	ldrb	r3, [r7, #11]
 8009f02:	3301      	adds	r3, #1
 8009f04:	72fb      	strb	r3, [r7, #11]
          break;
 8009f06:	e021      	b.n	8009f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00b      	beq.n	8009f2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	7c12      	ldrb	r2, [r2, #16]
 8009f20:	f107 0108 	add.w	r1, r7, #8
 8009f24:	4610      	mov	r0, r2
 8009f26:	4798      	blx	r3
 8009f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f2a:	e00f      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fa15 	bl	800a35e <USBD_CtlError>
            err++;
 8009f34:	7afb      	ldrb	r3, [r7, #11]
 8009f36:	3301      	adds	r3, #1
 8009f38:	72fb      	strb	r3, [r7, #11]
          break;
 8009f3a:	e007      	b.n	8009f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fa0d 	bl	800a35e <USBD_CtlError>
          err++;
 8009f44:	7afb      	ldrb	r3, [r7, #11]
 8009f46:	3301      	adds	r3, #1
 8009f48:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009f4a:	e038      	b.n	8009fbe <USBD_GetDescriptor+0x286>
 8009f4c:	e037      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	7c1b      	ldrb	r3, [r3, #16]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d109      	bne.n	8009f6a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5e:	f107 0208 	add.w	r2, r7, #8
 8009f62:	4610      	mov	r0, r2
 8009f64:	4798      	blx	r3
 8009f66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f68:	e029      	b.n	8009fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f9f6 	bl	800a35e <USBD_CtlError>
        err++;
 8009f72:	7afb      	ldrb	r3, [r7, #11]
 8009f74:	3301      	adds	r3, #1
 8009f76:	72fb      	strb	r3, [r7, #11]
      break;
 8009f78:	e021      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	7c1b      	ldrb	r3, [r3, #16]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10d      	bne.n	8009f9e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8a:	f107 0208 	add.w	r2, r7, #8
 8009f8e:	4610      	mov	r0, r2
 8009f90:	4798      	blx	r3
 8009f92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	3301      	adds	r3, #1
 8009f98:	2207      	movs	r2, #7
 8009f9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f9c:	e00f      	b.n	8009fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f9dc 	bl	800a35e <USBD_CtlError>
        err++;
 8009fa6:	7afb      	ldrb	r3, [r7, #11]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	72fb      	strb	r3, [r7, #11]
      break;
 8009fac:	e007      	b.n	8009fbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f9d4 	bl	800a35e <USBD_CtlError>
      err++;
 8009fb6:	7afb      	ldrb	r3, [r7, #11]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	72fb      	strb	r3, [r7, #11]
      break;
 8009fbc:	bf00      	nop
  }

  if (err != 0U)
 8009fbe:	7afb      	ldrb	r3, [r7, #11]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d11c      	bne.n	8009ffe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009fc4:	893b      	ldrh	r3, [r7, #8]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d011      	beq.n	8009fee <USBD_GetDescriptor+0x2b6>
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	88db      	ldrh	r3, [r3, #6]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00d      	beq.n	8009fee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	88da      	ldrh	r2, [r3, #6]
 8009fd6:	893b      	ldrh	r3, [r7, #8]
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	bf28      	it	cs
 8009fdc:	4613      	movcs	r3, r2
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fe2:	893b      	ldrh	r3, [r7, #8]
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	68f9      	ldr	r1, [r7, #12]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fa22 	bl	800a432 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	88db      	ldrh	r3, [r3, #6]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d104      	bne.n	800a000 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fa79 	bl	800a4ee <USBD_CtlSendStatus>
 8009ffc:	e000      	b.n	800a000 <USBD_GetDescriptor+0x2c8>
    return;
 8009ffe:	bf00      	nop
    }
  }
}
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop

0800a008 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	889b      	ldrh	r3, [r3, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d130      	bne.n	800a07c <USBD_SetAddress+0x74>
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	88db      	ldrh	r3, [r3, #6]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d12c      	bne.n	800a07c <USBD_SetAddress+0x74>
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	885b      	ldrh	r3, [r3, #2]
 800a026:	2b7f      	cmp	r3, #127	; 0x7f
 800a028:	d828      	bhi.n	800a07c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	885b      	ldrh	r3, [r3, #2]
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a034:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a03c:	2b03      	cmp	r3, #3
 800a03e:	d104      	bne.n	800a04a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a040:	6839      	ldr	r1, [r7, #0]
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f98b 	bl	800a35e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a048:	e01d      	b.n	800a086 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	7bfa      	ldrb	r2, [r7, #15]
 800a04e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a052:	7bfb      	ldrb	r3, [r7, #15]
 800a054:	4619      	mov	r1, r3
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f003 fd9e 	bl	800db98 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fa46 	bl	800a4ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d004      	beq.n	800a072 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2202      	movs	r2, #2
 800a06c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a070:	e009      	b.n	800a086 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a07a:	e004      	b.n	800a086 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f96d 	bl	800a35e <USBD_CtlError>
  }
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
	...

0800a090 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	885b      	ldrh	r3, [r3, #2]
 800a09e:	b2da      	uxtb	r2, r3
 800a0a0:	4b41      	ldr	r3, [pc, #260]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a0a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0a4:	4b40      	ldr	r3, [pc, #256]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d904      	bls.n	800a0b6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a0ac:	6839      	ldr	r1, [r7, #0]
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f955 	bl	800a35e <USBD_CtlError>
 800a0b4:	e075      	b.n	800a1a2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d002      	beq.n	800a0c6 <USBD_SetConfig+0x36>
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d023      	beq.n	800a10c <USBD_SetConfig+0x7c>
 800a0c4:	e062      	b.n	800a18c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a0c6:	4b38      	ldr	r3, [pc, #224]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d01a      	beq.n	800a104 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a0ce:	4b36      	ldr	r3, [pc, #216]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2203      	movs	r2, #3
 800a0dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a0e0:	4b31      	ldr	r3, [pc, #196]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff f9e7 	bl	80094ba <USBD_SetClassConfig>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d104      	bne.n	800a0fc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f932 	bl	800a35e <USBD_CtlError>
            return;
 800a0fa:	e052      	b.n	800a1a2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f9f6 	bl	800a4ee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a102:	e04e      	b.n	800a1a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f9f2 	bl	800a4ee <USBD_CtlSendStatus>
        break;
 800a10a:	e04a      	b.n	800a1a2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a10c:	4b26      	ldr	r3, [pc, #152]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d112      	bne.n	800a13a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2202      	movs	r2, #2
 800a118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a11c:	4b22      	ldr	r3, [pc, #136]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	461a      	mov	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a126:	4b20      	ldr	r3, [pc, #128]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	4619      	mov	r1, r3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff f9e3 	bl	80094f8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f9db 	bl	800a4ee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a138:	e033      	b.n	800a1a2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a13a:	4b1b      	ldr	r3, [pc, #108]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	461a      	mov	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	429a      	cmp	r2, r3
 800a146:	d01d      	beq.n	800a184 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7ff f9d1 	bl	80094f8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a156:	4b14      	ldr	r3, [pc, #80]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a160:	4b11      	ldr	r3, [pc, #68]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	4619      	mov	r1, r3
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7ff f9a7 	bl	80094ba <USBD_SetClassConfig>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d104      	bne.n	800a17c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a172:	6839      	ldr	r1, [r7, #0]
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f8f2 	bl	800a35e <USBD_CtlError>
            return;
 800a17a:	e012      	b.n	800a1a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f9b6 	bl	800a4ee <USBD_CtlSendStatus>
        break;
 800a182:	e00e      	b.n	800a1a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f9b2 	bl	800a4ee <USBD_CtlSendStatus>
        break;
 800a18a:	e00a      	b.n	800a1a2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f8e5 	bl	800a35e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a194:	4b04      	ldr	r3, [pc, #16]	; (800a1a8 <USBD_SetConfig+0x118>)
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	4619      	mov	r1, r3
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f7ff f9ac 	bl	80094f8 <USBD_ClrClassConfig>
        break;
 800a1a0:	bf00      	nop
    }
  }
}
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	200001b2 	.word	0x200001b2

0800a1ac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	88db      	ldrh	r3, [r3, #6]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d004      	beq.n	800a1c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f8cc 	bl	800a35e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1c6:	e022      	b.n	800a20e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	dc02      	bgt.n	800a1d8 <USBD_GetConfig+0x2c>
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	dc03      	bgt.n	800a1de <USBD_GetConfig+0x32>
 800a1d6:	e015      	b.n	800a204 <USBD_GetConfig+0x58>
 800a1d8:	2b03      	cmp	r3, #3
 800a1da:	d00b      	beq.n	800a1f4 <USBD_GetConfig+0x48>
 800a1dc:	e012      	b.n	800a204 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	3308      	adds	r3, #8
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f920 	bl	800a432 <USBD_CtlSendData>
        break;
 800a1f2:	e00c      	b.n	800a20e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f918 	bl	800a432 <USBD_CtlSendData>
        break;
 800a202:	e004      	b.n	800a20e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f8a9 	bl	800a35e <USBD_CtlError>
        break;
 800a20c:	bf00      	nop
}
 800a20e:	bf00      	nop
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b082      	sub	sp, #8
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a226:	3b01      	subs	r3, #1
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d81e      	bhi.n	800a26a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	88db      	ldrh	r3, [r3, #6]
 800a230:	2b02      	cmp	r3, #2
 800a232:	d004      	beq.n	800a23e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f891 	bl	800a35e <USBD_CtlError>
        break;
 800a23c:	e01a      	b.n	800a274 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d005      	beq.n	800a25a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f043 0202 	orr.w	r2, r3, #2
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	330c      	adds	r3, #12
 800a25e:	2202      	movs	r2, #2
 800a260:	4619      	mov	r1, r3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f8e5 	bl	800a432 <USBD_CtlSendData>
      break;
 800a268:	e004      	b.n	800a274 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f876 	bl	800a35e <USBD_CtlError>
      break;
 800a272:	bf00      	nop
  }
}
 800a274:	bf00      	nop
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	885b      	ldrh	r3, [r3, #2]
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d106      	bne.n	800a29c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f929 	bl	800a4ee <USBD_CtlSendStatus>
  }
}
 800a29c:	bf00      	nop
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d80b      	bhi.n	800a2d2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	885b      	ldrh	r3, [r3, #2]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d10c      	bne.n	800a2dc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f90f 	bl	800a4ee <USBD_CtlSendStatus>
      }
      break;
 800a2d0:	e004      	b.n	800a2dc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 f842 	bl	800a35e <USBD_CtlError>
      break;
 800a2da:	e000      	b.n	800a2de <USBD_ClrFeature+0x3a>
      break;
 800a2dc:	bf00      	nop
  }
}
 800a2de:	bf00      	nop
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b083      	sub	sp, #12
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	781a      	ldrb	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	785a      	ldrb	r2, [r3, #1]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	3302      	adds	r3, #2
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	b29a      	uxth	r2, r3
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	3303      	adds	r3, #3
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	b29b      	uxth	r3, r3
 800a310:	021b      	lsls	r3, r3, #8
 800a312:	b29b      	uxth	r3, r3
 800a314:	4413      	add	r3, r2
 800a316:	b29a      	uxth	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	3304      	adds	r3, #4
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	b29a      	uxth	r2, r3
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	3305      	adds	r3, #5
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	b29b      	uxth	r3, r3
 800a330:	4413      	add	r3, r2
 800a332:	b29a      	uxth	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	3306      	adds	r3, #6
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b29a      	uxth	r2, r3
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	3307      	adds	r3, #7
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	b29b      	uxth	r3, r3
 800a348:	021b      	lsls	r3, r3, #8
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	4413      	add	r3, r2
 800a34e:	b29a      	uxth	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	80da      	strh	r2, [r3, #6]

}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	bc80      	pop	{r7}
 800a35c:	4770      	bx	lr

0800a35e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b082      	sub	sp, #8
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a368:	2180      	movs	r1, #128	; 0x80
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f003 fbaa 	bl	800dac4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a370:	2100      	movs	r1, #0
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f003 fba6 	bl	800dac4 <USBD_LL_StallEP>
}
 800a378:	bf00      	nop
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a38c:	2300      	movs	r3, #0
 800a38e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d032      	beq.n	800a3fc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f000 f834 	bl	800a404 <USBD_GetLen>
 800a39c:	4603      	mov	r3, r0
 800a39e:	3301      	adds	r3, #1
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	005b      	lsls	r3, r3, #1
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
 800a3ac:	1c5a      	adds	r2, r3, #1
 800a3ae:	75fa      	strb	r2, [r7, #23]
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	7812      	ldrb	r2, [r2, #0]
 800a3ba:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a3bc:	7dfb      	ldrb	r3, [r7, #23]
 800a3be:	1c5a      	adds	r2, r3, #1
 800a3c0:	75fa      	strb	r2, [r7, #23]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	2203      	movs	r2, #3
 800a3ca:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a3cc:	e012      	b.n	800a3f4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	1c5a      	adds	r2, r3, #1
 800a3d2:	60fa      	str	r2, [r7, #12]
 800a3d4:	7dfa      	ldrb	r2, [r7, #23]
 800a3d6:	1c51      	adds	r1, r2, #1
 800a3d8:	75f9      	strb	r1, [r7, #23]
 800a3da:	4611      	mov	r1, r2
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	440a      	add	r2, r1
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a3e4:	7dfb      	ldrb	r3, [r7, #23]
 800a3e6:	1c5a      	adds	r2, r3, #1
 800a3e8:	75fa      	strb	r2, [r7, #23]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1e8      	bne.n	800a3ce <USBD_GetString+0x4e>
    }
  }
}
 800a3fc:	bf00      	nop
 800a3fe:	3718      	adds	r7, #24
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a40c:	2300      	movs	r3, #0
 800a40e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a410:	e005      	b.n	800a41e <USBD_GetLen+0x1a>
  {
    len++;
 800a412:	7bfb      	ldrb	r3, [r7, #15]
 800a414:	3301      	adds	r3, #1
 800a416:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	3301      	adds	r3, #1
 800a41c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1f5      	bne.n	800a412 <USBD_GetLen+0xe>
  }

  return len;
 800a426:	7bfb      	ldrb	r3, [r7, #15]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3714      	adds	r7, #20
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bc80      	pop	{r7}
 800a430:	4770      	bx	lr

0800a432 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a432:	b580      	push	{r7, lr}
 800a434:	b084      	sub	sp, #16
 800a436:	af00      	add	r7, sp, #0
 800a438:	60f8      	str	r0, [r7, #12]
 800a43a:	60b9      	str	r1, [r7, #8]
 800a43c:	4613      	mov	r3, r2
 800a43e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2202      	movs	r2, #2
 800a444:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a448:	88fa      	ldrh	r2, [r7, #6]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a44e:	88fa      	ldrh	r2, [r7, #6]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a454:	88fb      	ldrh	r3, [r7, #6]
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	2100      	movs	r1, #0
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f003 fbbb 	bl	800dbd6 <USBD_LL_Transmit>

  return USBD_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b084      	sub	sp, #16
 800a46e:	af00      	add	r7, sp, #0
 800a470:	60f8      	str	r0, [r7, #12]
 800a472:	60b9      	str	r1, [r7, #8]
 800a474:	4613      	mov	r3, r2
 800a476:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a478:	88fb      	ldrh	r3, [r7, #6]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	2100      	movs	r1, #0
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f003 fba9 	bl	800dbd6 <USBD_LL_Transmit>

  return USBD_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b084      	sub	sp, #16
 800a492:	af00      	add	r7, sp, #0
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	60b9      	str	r1, [r7, #8]
 800a498:	4613      	mov	r3, r2
 800a49a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2203      	movs	r2, #3
 800a4a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a4a4:	88fa      	ldrh	r2, [r7, #6]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a4ac:	88fa      	ldrh	r2, [r7, #6]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4b4:	88fb      	ldrh	r3, [r7, #6]
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f003 fbae 	bl	800dc1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	60f8      	str	r0, [r7, #12]
 800a4d2:	60b9      	str	r1, [r7, #8]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4d8:	88fb      	ldrh	r3, [r7, #6]
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	2100      	movs	r1, #0
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f003 fb9c 	bl	800dc1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2204      	movs	r2, #4
 800a4fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a4fe:	2300      	movs	r3, #0
 800a500:	2200      	movs	r2, #0
 800a502:	2100      	movs	r1, #0
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f003 fb66 	bl	800dbd6 <USBD_LL_Transmit>

  return USBD_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2205      	movs	r2, #5
 800a520:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a524:	2300      	movs	r3, #0
 800a526:	2200      	movs	r2, #0
 800a528:	2100      	movs	r1, #0
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f003 fb76 	bl	800dc1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
	...

0800a53c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a542:	f3ef 8305 	mrs	r3, IPSR
 800a546:	60bb      	str	r3, [r7, #8]
  return(result);
 800a548:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10f      	bne.n	800a56e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a54e:	f3ef 8310 	mrs	r3, PRIMASK
 800a552:	607b      	str	r3, [r7, #4]
  return(result);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d109      	bne.n	800a56e <osKernelInitialize+0x32>
 800a55a:	4b10      	ldr	r3, [pc, #64]	; (800a59c <osKernelInitialize+0x60>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d109      	bne.n	800a576 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a562:	f3ef 8311 	mrs	r3, BASEPRI
 800a566:	603b      	str	r3, [r7, #0]
  return(result);
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d003      	beq.n	800a576 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a56e:	f06f 0305 	mvn.w	r3, #5
 800a572:	60fb      	str	r3, [r7, #12]
 800a574:	e00c      	b.n	800a590 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a576:	4b09      	ldr	r3, [pc, #36]	; (800a59c <osKernelInitialize+0x60>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d105      	bne.n	800a58a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800a57e:	4b07      	ldr	r3, [pc, #28]	; (800a59c <osKernelInitialize+0x60>)
 800a580:	2201      	movs	r2, #1
 800a582:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a584:	2300      	movs	r3, #0
 800a586:	60fb      	str	r3, [r7, #12]
 800a588:	e002      	b.n	800a590 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a58a:	f04f 33ff 	mov.w	r3, #4294967295
 800a58e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a590:	68fb      	ldr	r3, [r7, #12]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3714      	adds	r7, #20
 800a596:	46bd      	mov	sp, r7
 800a598:	bc80      	pop	{r7}
 800a59a:	4770      	bx	lr
 800a59c:	200001b4 	.word	0x200001b4

0800a5a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5a6:	f3ef 8305 	mrs	r3, IPSR
 800a5aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800a5ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d10f      	bne.n	800a5d2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5b2:	f3ef 8310 	mrs	r3, PRIMASK
 800a5b6:	607b      	str	r3, [r7, #4]
  return(result);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d109      	bne.n	800a5d2 <osKernelStart+0x32>
 800a5be:	4b11      	ldr	r3, [pc, #68]	; (800a604 <osKernelStart+0x64>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d109      	bne.n	800a5da <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a5c6:	f3ef 8311 	mrs	r3, BASEPRI
 800a5ca:	603b      	str	r3, [r7, #0]
  return(result);
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d003      	beq.n	800a5da <osKernelStart+0x3a>
    stat = osErrorISR;
 800a5d2:	f06f 0305 	mvn.w	r3, #5
 800a5d6:	60fb      	str	r3, [r7, #12]
 800a5d8:	e00e      	b.n	800a5f8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800a5da:	4b0a      	ldr	r3, [pc, #40]	; (800a604 <osKernelStart+0x64>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d107      	bne.n	800a5f2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800a5e2:	4b08      	ldr	r3, [pc, #32]	; (800a604 <osKernelStart+0x64>)
 800a5e4:	2202      	movs	r2, #2
 800a5e6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a5e8:	f001 f9ba 	bl	800b960 <vTaskStartScheduler>
      stat = osOK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	e002      	b.n	800a5f8 <osKernelStart+0x58>
    } else {
      stat = osError;
 800a5f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	200001b4 	.word	0x200001b4

0800a608 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a608:	b580      	push	{r7, lr}
 800a60a:	b092      	sub	sp, #72	; 0x48
 800a60c:	af04      	add	r7, sp, #16
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a614:	2300      	movs	r3, #0
 800a616:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a618:	f3ef 8305 	mrs	r3, IPSR
 800a61c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800a620:	2b00      	cmp	r3, #0
 800a622:	f040 8094 	bne.w	800a74e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a626:	f3ef 8310 	mrs	r3, PRIMASK
 800a62a:	623b      	str	r3, [r7, #32]
  return(result);
 800a62c:	6a3b      	ldr	r3, [r7, #32]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f040 808d 	bne.w	800a74e <osThreadNew+0x146>
 800a634:	4b48      	ldr	r3, [pc, #288]	; (800a758 <osThreadNew+0x150>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d106      	bne.n	800a64a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a63c:	f3ef 8311 	mrs	r3, BASEPRI
 800a640:	61fb      	str	r3, [r7, #28]
  return(result);
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	2b00      	cmp	r3, #0
 800a646:	f040 8082 	bne.w	800a74e <osThreadNew+0x146>
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d07e      	beq.n	800a74e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800a650:	2380      	movs	r3, #128	; 0x80
 800a652:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800a654:	2318      	movs	r3, #24
 800a656:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800a658:	2300      	movs	r3, #0
 800a65a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800a65c:	f107 031b 	add.w	r3, r7, #27
 800a660:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800a662:	f04f 33ff 	mov.w	r3, #4294967295
 800a666:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d045      	beq.n	800a6fa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d002      	beq.n	800a67c <osThreadNew+0x74>
        name = attr->name;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d002      	beq.n	800a68a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d008      	beq.n	800a6a2 <osThreadNew+0x9a>
 800a690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a692:	2b38      	cmp	r3, #56	; 0x38
 800a694:	d805      	bhi.n	800a6a2 <osThreadNew+0x9a>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	f003 0301 	and.w	r3, r3, #1
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d001      	beq.n	800a6a6 <osThreadNew+0x9e>
        return (NULL);
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	e054      	b.n	800a750 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	695b      	ldr	r3, [r3, #20]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d003      	beq.n	800a6b6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	089b      	lsrs	r3, r3, #2
 800a6b4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00e      	beq.n	800a6dc <osThreadNew+0xd4>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	2b5b      	cmp	r3, #91	; 0x5b
 800a6c4:	d90a      	bls.n	800a6dc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d006      	beq.n	800a6dc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d002      	beq.n	800a6dc <osThreadNew+0xd4>
        mem = 1;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6da:	e010      	b.n	800a6fe <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d10c      	bne.n	800a6fe <osThreadNew+0xf6>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d108      	bne.n	800a6fe <osThreadNew+0xf6>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d104      	bne.n	800a6fe <osThreadNew+0xf6>
          mem = 0;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6f8:	e001      	b.n	800a6fe <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800a6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a700:	2b01      	cmp	r3, #1
 800a702:	d110      	bne.n	800a726 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a70c:	9202      	str	r2, [sp, #8]
 800a70e:	9301      	str	r3, [sp, #4]
 800a710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a718:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f000 fed6 	bl	800b4cc <xTaskCreateStatic>
 800a720:	4603      	mov	r3, r0
 800a722:	617b      	str	r3, [r7, #20]
 800a724:	e013      	b.n	800a74e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800a726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d110      	bne.n	800a74e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72e:	b29a      	uxth	r2, r3
 800a730:	f107 0314 	add.w	r3, r7, #20
 800a734:	9301      	str	r3, [sp, #4]
 800a736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a738:	9300      	str	r3, [sp, #0]
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a73e:	68f8      	ldr	r0, [r7, #12]
 800a740:	f000 ff20 	bl	800b584 <xTaskCreate>
 800a744:	4603      	mov	r3, r0
 800a746:	2b01      	cmp	r3, #1
 800a748:	d001      	beq.n	800a74e <osThreadNew+0x146>
          hTask = NULL;
 800a74a:	2300      	movs	r3, #0
 800a74c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a74e:	697b      	ldr	r3, [r7, #20]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3738      	adds	r7, #56	; 0x38
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	200001b4 	.word	0x200001b4

0800a75c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b086      	sub	sp, #24
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a764:	f3ef 8305 	mrs	r3, IPSR
 800a768:	613b      	str	r3, [r7, #16]
  return(result);
 800a76a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10f      	bne.n	800a790 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a770:	f3ef 8310 	mrs	r3, PRIMASK
 800a774:	60fb      	str	r3, [r7, #12]
  return(result);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d109      	bne.n	800a790 <osDelay+0x34>
 800a77c:	4b0d      	ldr	r3, [pc, #52]	; (800a7b4 <osDelay+0x58>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b02      	cmp	r3, #2
 800a782:	d109      	bne.n	800a798 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a784:	f3ef 8311 	mrs	r3, BASEPRI
 800a788:	60bb      	str	r3, [r7, #8]
  return(result);
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d003      	beq.n	800a798 <osDelay+0x3c>
    stat = osErrorISR;
 800a790:	f06f 0305 	mvn.w	r3, #5
 800a794:	617b      	str	r3, [r7, #20]
 800a796:	e007      	b.n	800a7a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a798:	2300      	movs	r3, #0
 800a79a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d002      	beq.n	800a7a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f001 f8a8 	bl	800b8f8 <vTaskDelay>
    }
  }

  return (stat);
 800a7a8:	697b      	ldr	r3, [r7, #20]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3718      	adds	r7, #24
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	200001b4 	.word	0x200001b4

0800a7b8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b08c      	sub	sp, #48	; 0x30
 800a7bc:	af02      	add	r7, sp, #8
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7c8:	f3ef 8305 	mrs	r3, IPSR
 800a7cc:	61bb      	str	r3, [r7, #24]
  return(result);
 800a7ce:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d16f      	bne.n	800a8b4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a7d8:	617b      	str	r3, [r7, #20]
  return(result);
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d169      	bne.n	800a8b4 <osMessageQueueNew+0xfc>
 800a7e0:	4b37      	ldr	r3, [pc, #220]	; (800a8c0 <osMessageQueueNew+0x108>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d105      	bne.n	800a7f4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a7e8:	f3ef 8311 	mrs	r3, BASEPRI
 800a7ec:	613b      	str	r3, [r7, #16]
  return(result);
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d15f      	bne.n	800a8b4 <osMessageQueueNew+0xfc>
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d05c      	beq.n	800a8b4 <osMessageQueueNew+0xfc>
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d059      	beq.n	800a8b4 <osMessageQueueNew+0xfc>
    mem = -1;
 800a800:	f04f 33ff 	mov.w	r3, #4294967295
 800a804:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d029      	beq.n	800a860 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d012      	beq.n	800a83a <osMessageQueueNew+0x82>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	2b4f      	cmp	r3, #79	; 0x4f
 800a81a:	d90e      	bls.n	800a83a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00a      	beq.n	800a83a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	695a      	ldr	r2, [r3, #20]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	68b9      	ldr	r1, [r7, #8]
 800a82c:	fb01 f303 	mul.w	r3, r1, r3
 800a830:	429a      	cmp	r2, r3
 800a832:	d302      	bcc.n	800a83a <osMessageQueueNew+0x82>
        mem = 1;
 800a834:	2301      	movs	r3, #1
 800a836:	623b      	str	r3, [r7, #32]
 800a838:	e014      	b.n	800a864 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d110      	bne.n	800a864 <osMessageQueueNew+0xac>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10c      	bne.n	800a864 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d108      	bne.n	800a864 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	695b      	ldr	r3, [r3, #20]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d104      	bne.n	800a864 <osMessageQueueNew+0xac>
          mem = 0;
 800a85a:	2300      	movs	r3, #0
 800a85c:	623b      	str	r3, [r7, #32]
 800a85e:	e001      	b.n	800a864 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a860:	2300      	movs	r3, #0
 800a862:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	2b01      	cmp	r3, #1
 800a868:	d10b      	bne.n	800a882 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	691a      	ldr	r2, [r3, #16]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	2100      	movs	r1, #0
 800a874:	9100      	str	r1, [sp, #0]
 800a876:	68b9      	ldr	r1, [r7, #8]
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f000 f96d 	bl	800ab58 <xQueueGenericCreateStatic>
 800a87e:	6278      	str	r0, [r7, #36]	; 0x24
 800a880:	e008      	b.n	800a894 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a882:	6a3b      	ldr	r3, [r7, #32]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d105      	bne.n	800a894 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a888:	2200      	movs	r2, #0
 800a88a:	68b9      	ldr	r1, [r7, #8]
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 f9da 	bl	800ac46 <xQueueGenericCreate>
 800a892:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00c      	beq.n	800a8b4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d003      	beq.n	800a8a8 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	61fb      	str	r3, [r7, #28]
 800a8a6:	e001      	b.n	800a8ac <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a8ac:	69f9      	ldr	r1, [r7, #28]
 800a8ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8b0:	f000 fdb0 	bl	800b414 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3728      	adds	r7, #40	; 0x28
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	200001b4 	.word	0x200001b4

0800a8c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	4a06      	ldr	r2, [pc, #24]	; (800a8ec <vApplicationGetIdleTaskMemory+0x28>)
 800a8d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	4a05      	ldr	r2, [pc, #20]	; (800a8f0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a8da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2280      	movs	r2, #128	; 0x80
 800a8e0:	601a      	str	r2, [r3, #0]
}
 800a8e2:	bf00      	nop
 800a8e4:	3714      	adds	r7, #20
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bc80      	pop	{r7}
 800a8ea:	4770      	bx	lr
 800a8ec:	200001b8 	.word	0x200001b8
 800a8f0:	20000214 	.word	0x20000214

0800a8f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	4a07      	ldr	r2, [pc, #28]	; (800a920 <vApplicationGetTimerTaskMemory+0x2c>)
 800a904:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	4a06      	ldr	r2, [pc, #24]	; (800a924 <vApplicationGetTimerTaskMemory+0x30>)
 800a90a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a912:	601a      	str	r2, [r3, #0]
}
 800a914:	bf00      	nop
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	bc80      	pop	{r7}
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	20000414 	.word	0x20000414
 800a924:	20000470 	.word	0x20000470

0800a928 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f103 0208 	add.w	r2, r3, #8
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f04f 32ff 	mov.w	r2, #4294967295
 800a940:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f103 0208 	add.w	r2, r3, #8
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f103 0208 	add.w	r2, r3, #8
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	bc80      	pop	{r7}
 800a964:	4770      	bx	lr

0800a966 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a966:	b480      	push	{r7}
 800a968:	b083      	sub	sp, #12
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	bc80      	pop	{r7}
 800a97c:	4770      	bx	lr

0800a97e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a97e:	b480      	push	{r7}
 800a980:	b085      	sub	sp, #20
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	689a      	ldr	r2, [r3, #8]
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	1c5a      	adds	r2, r3, #1
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	601a      	str	r2, [r3, #0]
}
 800a9ba:	bf00      	nop
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bc80      	pop	{r7}
 800a9c2:	4770      	bx	lr

0800a9c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9da:	d103      	bne.n	800a9e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	60fb      	str	r3, [r7, #12]
 800a9e2:	e00c      	b.n	800a9fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	3308      	adds	r3, #8
 800a9e8:	60fb      	str	r3, [r7, #12]
 800a9ea:	e002      	b.n	800a9f2 <vListInsert+0x2e>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	60fb      	str	r3, [r7, #12]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d2f6      	bcs.n	800a9ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	685a      	ldr	r2, [r3, #4]
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	683a      	ldr	r2, [r7, #0]
 800aa18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	1c5a      	adds	r2, r3, #1
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	601a      	str	r2, [r3, #0]
}
 800aa2a:	bf00      	nop
 800aa2c:	3714      	adds	r7, #20
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bc80      	pop	{r7}
 800aa32:	4770      	bx	lr

0800aa34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	6892      	ldr	r2, [r2, #8]
 800aa4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	6852      	ldr	r2, [r2, #4]
 800aa54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d103      	bne.n	800aa68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	689a      	ldr	r2, [r3, #8]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	1e5a      	subs	r2, r3, #1
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bc80      	pop	{r7}
 800aa84:	4770      	bx	lr
	...

0800aa88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10a      	bne.n	800aab2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aa9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa0:	f383 8811 	msr	BASEPRI, r3
 800aaa4:	f3bf 8f6f 	isb	sy
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aaae:	bf00      	nop
 800aab0:	e7fe      	b.n	800aab0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aab2:	f002 f99b 	bl	800cdec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aabe:	68f9      	ldr	r1, [r7, #12]
 800aac0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aac2:	fb01 f303 	mul.w	r3, r1, r3
 800aac6:	441a      	add	r2, r3
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2200      	movs	r2, #0
 800aad0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aae2:	3b01      	subs	r3, #1
 800aae4:	68f9      	ldr	r1, [r7, #12]
 800aae6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aae8:	fb01 f303 	mul.w	r3, r1, r3
 800aaec:	441a      	add	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	22ff      	movs	r2, #255	; 0xff
 800aaf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	22ff      	movs	r2, #255	; 0xff
 800aafe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d114      	bne.n	800ab32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d01a      	beq.n	800ab46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	3310      	adds	r3, #16
 800ab14:	4618      	mov	r0, r3
 800ab16:	f001 f9ad 	bl	800be74 <xTaskRemoveFromEventList>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d012      	beq.n	800ab46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab20:	4b0c      	ldr	r3, [pc, #48]	; (800ab54 <xQueueGenericReset+0xcc>)
 800ab22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab26:	601a      	str	r2, [r3, #0]
 800ab28:	f3bf 8f4f 	dsb	sy
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	e009      	b.n	800ab46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	3310      	adds	r3, #16
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7ff fef6 	bl	800a928 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	3324      	adds	r3, #36	; 0x24
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7ff fef1 	bl	800a928 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab46:	f002 f981 	bl	800ce4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab4a:	2301      	movs	r3, #1
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	e000ed04 	.word	0xe000ed04

0800ab58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b08e      	sub	sp, #56	; 0x38
 800ab5c:	af02      	add	r7, sp, #8
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
 800ab64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d10a      	bne.n	800ab82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ab6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab70:	f383 8811 	msr	BASEPRI, r3
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab7e:	bf00      	nop
 800ab80:	e7fe      	b.n	800ab80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10a      	bne.n	800ab9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ab88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8c:	f383 8811 	msr	BASEPRI, r3
 800ab90:	f3bf 8f6f 	isb	sy
 800ab94:	f3bf 8f4f 	dsb	sy
 800ab98:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab9a:	bf00      	nop
 800ab9c:	e7fe      	b.n	800ab9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d002      	beq.n	800abaa <xQueueGenericCreateStatic+0x52>
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <xQueueGenericCreateStatic+0x56>
 800abaa:	2301      	movs	r3, #1
 800abac:	e000      	b.n	800abb0 <xQueueGenericCreateStatic+0x58>
 800abae:	2300      	movs	r3, #0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10a      	bne.n	800abca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	623b      	str	r3, [r7, #32]
}
 800abc6:	bf00      	nop
 800abc8:	e7fe      	b.n	800abc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d102      	bne.n	800abd6 <xQueueGenericCreateStatic+0x7e>
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d101      	bne.n	800abda <xQueueGenericCreateStatic+0x82>
 800abd6:	2301      	movs	r3, #1
 800abd8:	e000      	b.n	800abdc <xQueueGenericCreateStatic+0x84>
 800abda:	2300      	movs	r3, #0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10a      	bne.n	800abf6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800abe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	61fb      	str	r3, [r7, #28]
}
 800abf2:	bf00      	nop
 800abf4:	e7fe      	b.n	800abf4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800abf6:	2350      	movs	r3, #80	; 0x50
 800abf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	2b50      	cmp	r3, #80	; 0x50
 800abfe:	d00a      	beq.n	800ac16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ac00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac04:	f383 8811 	msr	BASEPRI, r3
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	61bb      	str	r3, [r7, #24]
}
 800ac12:	bf00      	nop
 800ac14:	e7fe      	b.n	800ac14 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ac1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00d      	beq.n	800ac3c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac28:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ac2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	4613      	mov	r3, r2
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	68b9      	ldr	r1, [r7, #8]
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f000 f843 	bl	800acc2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ac3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3730      	adds	r7, #48	; 0x30
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b08a      	sub	sp, #40	; 0x28
 800ac4a:	af02      	add	r7, sp, #8
 800ac4c:	60f8      	str	r0, [r7, #12]
 800ac4e:	60b9      	str	r1, [r7, #8]
 800ac50:	4613      	mov	r3, r2
 800ac52:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10a      	bne.n	800ac70 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ac5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5e:	f383 8811 	msr	BASEPRI, r3
 800ac62:	f3bf 8f6f 	isb	sy
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	613b      	str	r3, [r7, #16]
}
 800ac6c:	bf00      	nop
 800ac6e:	e7fe      	b.n	800ac6e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d102      	bne.n	800ac7c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ac76:	2300      	movs	r3, #0
 800ac78:	61fb      	str	r3, [r7, #28]
 800ac7a:	e004      	b.n	800ac86 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	fb02 f303 	mul.w	r3, r2, r3
 800ac84:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	3350      	adds	r3, #80	; 0x50
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f002 f9ae 	bl	800cfec <pvPortMalloc>
 800ac90:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00f      	beq.n	800acb8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	3350      	adds	r3, #80	; 0x50
 800ac9c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aca6:	79fa      	ldrb	r2, [r7, #7]
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	4613      	mov	r3, r2
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	68b9      	ldr	r1, [r7, #8]
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 f805 	bl	800acc2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800acb8:	69bb      	ldr	r3, [r7, #24]
	}
 800acba:	4618      	mov	r0, r3
 800acbc:	3720      	adds	r7, #32
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b084      	sub	sp, #16
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	60f8      	str	r0, [r7, #12]
 800acca:	60b9      	str	r1, [r7, #8]
 800accc:	607a      	str	r2, [r7, #4]
 800acce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d103      	bne.n	800acde <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	69ba      	ldr	r2, [r7, #24]
 800acda:	601a      	str	r2, [r3, #0]
 800acdc:	e002      	b.n	800ace4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acf0:	2101      	movs	r1, #1
 800acf2:	69b8      	ldr	r0, [r7, #24]
 800acf4:	f7ff fec8 	bl	800aa88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	78fa      	ldrb	r2, [r7, #3]
 800acfc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad00:	bf00      	nop
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b08e      	sub	sp, #56	; 0x38
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
 800ad14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad16:	2300      	movs	r3, #0
 800ad18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10a      	bne.n	800ad3a <xQueueGenericSend+0x32>
	__asm volatile
 800ad24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad28:	f383 8811 	msr	BASEPRI, r3
 800ad2c:	f3bf 8f6f 	isb	sy
 800ad30:	f3bf 8f4f 	dsb	sy
 800ad34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad36:	bf00      	nop
 800ad38:	e7fe      	b.n	800ad38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d103      	bne.n	800ad48 <xQueueGenericSend+0x40>
 800ad40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d101      	bne.n	800ad4c <xQueueGenericSend+0x44>
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e000      	b.n	800ad4e <xQueueGenericSend+0x46>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d10a      	bne.n	800ad68 <xQueueGenericSend+0x60>
	__asm volatile
 800ad52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad64:	bf00      	nop
 800ad66:	e7fe      	b.n	800ad66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d103      	bne.n	800ad76 <xQueueGenericSend+0x6e>
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d101      	bne.n	800ad7a <xQueueGenericSend+0x72>
 800ad76:	2301      	movs	r3, #1
 800ad78:	e000      	b.n	800ad7c <xQueueGenericSend+0x74>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10a      	bne.n	800ad96 <xQueueGenericSend+0x8e>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	623b      	str	r3, [r7, #32]
}
 800ad92:	bf00      	nop
 800ad94:	e7fe      	b.n	800ad94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad96:	f001 fa67 	bl	800c268 <xTaskGetSchedulerState>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d102      	bne.n	800ada6 <xQueueGenericSend+0x9e>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d101      	bne.n	800adaa <xQueueGenericSend+0xa2>
 800ada6:	2301      	movs	r3, #1
 800ada8:	e000      	b.n	800adac <xQueueGenericSend+0xa4>
 800adaa:	2300      	movs	r3, #0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10a      	bne.n	800adc6 <xQueueGenericSend+0xbe>
	__asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	61fb      	str	r3, [r7, #28]
}
 800adc2:	bf00      	nop
 800adc4:	e7fe      	b.n	800adc4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adc6:	f002 f811 	bl	800cdec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add2:	429a      	cmp	r2, r3
 800add4:	d302      	bcc.n	800addc <xQueueGenericSend+0xd4>
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	2b02      	cmp	r3, #2
 800adda:	d129      	bne.n	800ae30 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800addc:	683a      	ldr	r2, [r7, #0]
 800adde:	68b9      	ldr	r1, [r7, #8]
 800ade0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ade2:	f000 fa07 	bl	800b1f4 <prvCopyDataToQueue>
 800ade6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ade8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adec:	2b00      	cmp	r3, #0
 800adee:	d010      	beq.n	800ae12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf2:	3324      	adds	r3, #36	; 0x24
 800adf4:	4618      	mov	r0, r3
 800adf6:	f001 f83d 	bl	800be74 <xTaskRemoveFromEventList>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d013      	beq.n	800ae28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae00:	4b3f      	ldr	r3, [pc, #252]	; (800af00 <xQueueGenericSend+0x1f8>)
 800ae02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae06:	601a      	str	r2, [r3, #0]
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	e00a      	b.n	800ae28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d007      	beq.n	800ae28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae18:	4b39      	ldr	r3, [pc, #228]	; (800af00 <xQueueGenericSend+0x1f8>)
 800ae1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae1e:	601a      	str	r2, [r3, #0]
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae28:	f002 f810 	bl	800ce4c <vPortExitCritical>
				return pdPASS;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e063      	b.n	800aef8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d103      	bne.n	800ae3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae36:	f002 f809 	bl	800ce4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	e05c      	b.n	800aef8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d106      	bne.n	800ae52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae44:	f107 0314 	add.w	r3, r7, #20
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f001 f877 	bl	800bf3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae52:	f001 fffb 	bl	800ce4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae56:	f000 fde9 	bl	800ba2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae5a:	f001 ffc7 	bl	800cdec <vPortEnterCritical>
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae64:	b25b      	sxtb	r3, r3
 800ae66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae6a:	d103      	bne.n	800ae74 <xQueueGenericSend+0x16c>
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae7a:	b25b      	sxtb	r3, r3
 800ae7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae80:	d103      	bne.n	800ae8a <xQueueGenericSend+0x182>
 800ae82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae8a:	f001 ffdf 	bl	800ce4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae8e:	1d3a      	adds	r2, r7, #4
 800ae90:	f107 0314 	add.w	r3, r7, #20
 800ae94:	4611      	mov	r1, r2
 800ae96:	4618      	mov	r0, r3
 800ae98:	f001 f866 	bl	800bf68 <xTaskCheckForTimeOut>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d124      	bne.n	800aeec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aea4:	f000 fa9e 	bl	800b3e4 <prvIsQueueFull>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d018      	beq.n	800aee0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb0:	3310      	adds	r3, #16
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 ff8c 	bl	800bdd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aebe:	f000 fa29 	bl	800b314 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aec2:	f000 fdc1 	bl	800ba48 <xTaskResumeAll>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f47f af7c 	bne.w	800adc6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aece:	4b0c      	ldr	r3, [pc, #48]	; (800af00 <xQueueGenericSend+0x1f8>)
 800aed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aed4:	601a      	str	r2, [r3, #0]
 800aed6:	f3bf 8f4f 	dsb	sy
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	e772      	b.n	800adc6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aee2:	f000 fa17 	bl	800b314 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aee6:	f000 fdaf 	bl	800ba48 <xTaskResumeAll>
 800aeea:	e76c      	b.n	800adc6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aeec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeee:	f000 fa11 	bl	800b314 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aef2:	f000 fda9 	bl	800ba48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aef6:	2300      	movs	r3, #0
		}
	}
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3738      	adds	r7, #56	; 0x38
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	e000ed04 	.word	0xe000ed04

0800af04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b08e      	sub	sp, #56	; 0x38
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
 800af10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d10a      	bne.n	800af32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af20:	f383 8811 	msr	BASEPRI, r3
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	f3bf 8f4f 	dsb	sy
 800af2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af2e:	bf00      	nop
 800af30:	e7fe      	b.n	800af30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d103      	bne.n	800af40 <xQueueGenericSendFromISR+0x3c>
 800af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <xQueueGenericSendFromISR+0x40>
 800af40:	2301      	movs	r3, #1
 800af42:	e000      	b.n	800af46 <xQueueGenericSendFromISR+0x42>
 800af44:	2300      	movs	r3, #0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10a      	bne.n	800af60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	623b      	str	r3, [r7, #32]
}
 800af5c:	bf00      	nop
 800af5e:	e7fe      	b.n	800af5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	2b02      	cmp	r3, #2
 800af64:	d103      	bne.n	800af6e <xQueueGenericSendFromISR+0x6a>
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d101      	bne.n	800af72 <xQueueGenericSendFromISR+0x6e>
 800af6e:	2301      	movs	r3, #1
 800af70:	e000      	b.n	800af74 <xQueueGenericSendFromISR+0x70>
 800af72:	2300      	movs	r3, #0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10a      	bne.n	800af8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800af78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	61fb      	str	r3, [r7, #28]
}
 800af8a:	bf00      	nop
 800af8c:	e7fe      	b.n	800af8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af8e:	f001 ffef 	bl	800cf70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800af92:	f3ef 8211 	mrs	r2, BASEPRI
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	61ba      	str	r2, [r7, #24]
 800afa8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800afaa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d302      	bcc.n	800afc0 <xQueueGenericSendFromISR+0xbc>
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d12c      	bne.n	800b01a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afca:	683a      	ldr	r2, [r7, #0]
 800afcc:	68b9      	ldr	r1, [r7, #8]
 800afce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afd0:	f000 f910 	bl	800b1f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800afd4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800afd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afdc:	d112      	bne.n	800b004 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d016      	beq.n	800b014 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	3324      	adds	r3, #36	; 0x24
 800afea:	4618      	mov	r0, r3
 800afec:	f000 ff42 	bl	800be74 <xTaskRemoveFromEventList>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00e      	beq.n	800b014 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00b      	beq.n	800b014 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	601a      	str	r2, [r3, #0]
 800b002:	e007      	b.n	800b014 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b004:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b008:	3301      	adds	r3, #1
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	b25a      	sxtb	r2, r3
 800b00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b014:	2301      	movs	r3, #1
 800b016:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b018:	e001      	b.n	800b01e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b01a:	2300      	movs	r3, #0
 800b01c:	637b      	str	r3, [r7, #52]	; 0x34
 800b01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b020:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b028:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3738      	adds	r7, #56	; 0x38
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b08c      	sub	sp, #48	; 0x30
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b040:	2300      	movs	r3, #0
 800b042:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10a      	bne.n	800b064 <xQueueReceive+0x30>
	__asm volatile
 800b04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b052:	f383 8811 	msr	BASEPRI, r3
 800b056:	f3bf 8f6f 	isb	sy
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	623b      	str	r3, [r7, #32]
}
 800b060:	bf00      	nop
 800b062:	e7fe      	b.n	800b062 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d103      	bne.n	800b072 <xQueueReceive+0x3e>
 800b06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <xQueueReceive+0x42>
 800b072:	2301      	movs	r3, #1
 800b074:	e000      	b.n	800b078 <xQueueReceive+0x44>
 800b076:	2300      	movs	r3, #0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10a      	bne.n	800b092 <xQueueReceive+0x5e>
	__asm volatile
 800b07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b080:	f383 8811 	msr	BASEPRI, r3
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	61fb      	str	r3, [r7, #28]
}
 800b08e:	bf00      	nop
 800b090:	e7fe      	b.n	800b090 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b092:	f001 f8e9 	bl	800c268 <xTaskGetSchedulerState>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d102      	bne.n	800b0a2 <xQueueReceive+0x6e>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <xQueueReceive+0x72>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e000      	b.n	800b0a8 <xQueueReceive+0x74>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d10a      	bne.n	800b0c2 <xQueueReceive+0x8e>
	__asm volatile
 800b0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b0:	f383 8811 	msr	BASEPRI, r3
 800b0b4:	f3bf 8f6f 	isb	sy
 800b0b8:	f3bf 8f4f 	dsb	sy
 800b0bc:	61bb      	str	r3, [r7, #24]
}
 800b0be:	bf00      	nop
 800b0c0:	e7fe      	b.n	800b0c0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0c2:	f001 fe93 	bl	800cdec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d01f      	beq.n	800b112 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0d2:	68b9      	ldr	r1, [r7, #8]
 800b0d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0d6:	f000 f8f7 	bl	800b2c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0dc:	1e5a      	subs	r2, r3, #1
 800b0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e4:	691b      	ldr	r3, [r3, #16]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00f      	beq.n	800b10a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ec:	3310      	adds	r3, #16
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f000 fec0 	bl	800be74 <xTaskRemoveFromEventList>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d007      	beq.n	800b10a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b0fa:	4b3d      	ldr	r3, [pc, #244]	; (800b1f0 <xQueueReceive+0x1bc>)
 800b0fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b100:	601a      	str	r2, [r3, #0]
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b10a:	f001 fe9f 	bl	800ce4c <vPortExitCritical>
				return pdPASS;
 800b10e:	2301      	movs	r3, #1
 800b110:	e069      	b.n	800b1e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d103      	bne.n	800b120 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b118:	f001 fe98 	bl	800ce4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b11c:	2300      	movs	r3, #0
 800b11e:	e062      	b.n	800b1e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b122:	2b00      	cmp	r3, #0
 800b124:	d106      	bne.n	800b134 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b126:	f107 0310 	add.w	r3, r7, #16
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 ff06 	bl	800bf3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b130:	2301      	movs	r3, #1
 800b132:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b134:	f001 fe8a 	bl	800ce4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b138:	f000 fc78 	bl	800ba2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b13c:	f001 fe56 	bl	800cdec <vPortEnterCritical>
 800b140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b142:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b146:	b25b      	sxtb	r3, r3
 800b148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14c:	d103      	bne.n	800b156 <xQueueReceive+0x122>
 800b14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b150:	2200      	movs	r2, #0
 800b152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b15c:	b25b      	sxtb	r3, r3
 800b15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b162:	d103      	bne.n	800b16c <xQueueReceive+0x138>
 800b164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b166:	2200      	movs	r2, #0
 800b168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b16c:	f001 fe6e 	bl	800ce4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b170:	1d3a      	adds	r2, r7, #4
 800b172:	f107 0310 	add.w	r3, r7, #16
 800b176:	4611      	mov	r1, r2
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 fef5 	bl	800bf68 <xTaskCheckForTimeOut>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d123      	bne.n	800b1cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b186:	f000 f917 	bl	800b3b8 <prvIsQueueEmpty>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d017      	beq.n	800b1c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b192:	3324      	adds	r3, #36	; 0x24
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	4611      	mov	r1, r2
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 fe1b 	bl	800bdd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b19e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1a0:	f000 f8b8 	bl	800b314 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1a4:	f000 fc50 	bl	800ba48 <xTaskResumeAll>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d189      	bne.n	800b0c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b1ae:	4b10      	ldr	r3, [pc, #64]	; (800b1f0 <xQueueReceive+0x1bc>)
 800b1b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1b4:	601a      	str	r2, [r3, #0]
 800b1b6:	f3bf 8f4f 	dsb	sy
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	e780      	b.n	800b0c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1c2:	f000 f8a7 	bl	800b314 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1c6:	f000 fc3f 	bl	800ba48 <xTaskResumeAll>
 800b1ca:	e77a      	b.n	800b0c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b1cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ce:	f000 f8a1 	bl	800b314 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1d2:	f000 fc39 	bl	800ba48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1d8:	f000 f8ee 	bl	800b3b8 <prvIsQueueEmpty>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f43f af6f 	beq.w	800b0c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b1e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3730      	adds	r7, #48	; 0x30
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	e000ed04 	.word	0xe000ed04

0800b1f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b200:	2300      	movs	r3, #0
 800b202:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b208:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d10d      	bne.n	800b22e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d14d      	bne.n	800b2b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	4618      	mov	r0, r3
 800b220:	f001 f840 	bl	800c2a4 <xTaskPriorityDisinherit>
 800b224:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	605a      	str	r2, [r3, #4]
 800b22c:	e043      	b.n	800b2b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d119      	bne.n	800b268 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6898      	ldr	r0, [r3, #8]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b23c:	461a      	mov	r2, r3
 800b23e:	68b9      	ldr	r1, [r7, #8]
 800b240:	f002 fd92 	bl	800dd68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	689a      	ldr	r2, [r3, #8]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24c:	441a      	add	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	689a      	ldr	r2, [r3, #8]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d32b      	bcc.n	800b2b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	609a      	str	r2, [r3, #8]
 800b266:	e026      	b.n	800b2b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	68d8      	ldr	r0, [r3, #12]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b270:	461a      	mov	r2, r3
 800b272:	68b9      	ldr	r1, [r7, #8]
 800b274:	f002 fd78 	bl	800dd68 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	68da      	ldr	r2, [r3, #12]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b280:	425b      	negs	r3, r3
 800b282:	441a      	add	r2, r3
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	68da      	ldr	r2, [r3, #12]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	429a      	cmp	r2, r3
 800b292:	d207      	bcs.n	800b2a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	685a      	ldr	r2, [r3, #4]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29c:	425b      	negs	r3, r3
 800b29e:	441a      	add	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d105      	bne.n	800b2b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	1c5a      	adds	r2, r3, #1
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b2be:	697b      	ldr	r3, [r7, #20]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3718      	adds	r7, #24
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d018      	beq.n	800b30c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	68da      	ldr	r2, [r3, #12]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e2:	441a      	add	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	68da      	ldr	r2, [r3, #12]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d303      	bcc.n	800b2fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	68d9      	ldr	r1, [r3, #12]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b304:	461a      	mov	r2, r3
 800b306:	6838      	ldr	r0, [r7, #0]
 800b308:	f002 fd2e 	bl	800dd68 <memcpy>
	}
}
 800b30c:	bf00      	nop
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b31c:	f001 fd66 	bl	800cdec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b326:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b328:	e011      	b.n	800b34e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d012      	beq.n	800b358 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	3324      	adds	r3, #36	; 0x24
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fd9c 	bl	800be74 <xTaskRemoveFromEventList>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d001      	beq.n	800b346 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b342:	f000 fe73 	bl	800c02c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b346:	7bfb      	ldrb	r3, [r7, #15]
 800b348:	3b01      	subs	r3, #1
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b34e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b352:	2b00      	cmp	r3, #0
 800b354:	dce9      	bgt.n	800b32a <prvUnlockQueue+0x16>
 800b356:	e000      	b.n	800b35a <prvUnlockQueue+0x46>
					break;
 800b358:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	22ff      	movs	r2, #255	; 0xff
 800b35e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b362:	f001 fd73 	bl	800ce4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b366:	f001 fd41 	bl	800cdec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b370:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b372:	e011      	b.n	800b398 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d012      	beq.n	800b3a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	3310      	adds	r3, #16
 800b380:	4618      	mov	r0, r3
 800b382:	f000 fd77 	bl	800be74 <xTaskRemoveFromEventList>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b38c:	f000 fe4e 	bl	800c02c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b390:	7bbb      	ldrb	r3, [r7, #14]
 800b392:	3b01      	subs	r3, #1
 800b394:	b2db      	uxtb	r3, r3
 800b396:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	dce9      	bgt.n	800b374 <prvUnlockQueue+0x60>
 800b3a0:	e000      	b.n	800b3a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b3a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	22ff      	movs	r2, #255	; 0xff
 800b3a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b3ac:	f001 fd4e 	bl	800ce4c <vPortExitCritical>
}
 800b3b0:	bf00      	nop
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3c0:	f001 fd14 	bl	800cdec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d102      	bne.n	800b3d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	60fb      	str	r3, [r7, #12]
 800b3d0:	e001      	b.n	800b3d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3d6:	f001 fd39 	bl	800ce4c <vPortExitCritical>

	return xReturn;
 800b3da:	68fb      	ldr	r3, [r7, #12]
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3710      	adds	r7, #16
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3ec:	f001 fcfe 	bl	800cdec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d102      	bne.n	800b402 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	60fb      	str	r3, [r7, #12]
 800b400:	e001      	b.n	800b406 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b402:	2300      	movs	r3, #0
 800b404:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b406:	f001 fd21 	bl	800ce4c <vPortExitCritical>

	return xReturn;
 800b40a:	68fb      	ldr	r3, [r7, #12]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b41e:	2300      	movs	r3, #0
 800b420:	60fb      	str	r3, [r7, #12]
 800b422:	e014      	b.n	800b44e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b424:	4a0e      	ldr	r2, [pc, #56]	; (800b460 <vQueueAddToRegistry+0x4c>)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10b      	bne.n	800b448 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b430:	490b      	ldr	r1, [pc, #44]	; (800b460 <vQueueAddToRegistry+0x4c>)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	683a      	ldr	r2, [r7, #0]
 800b436:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b43a:	4a09      	ldr	r2, [pc, #36]	; (800b460 <vQueueAddToRegistry+0x4c>)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	4413      	add	r3, r2
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b446:	e006      	b.n	800b456 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3301      	adds	r3, #1
 800b44c:	60fb      	str	r3, [r7, #12]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b07      	cmp	r3, #7
 800b452:	d9e7      	bls.n	800b424 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b454:	bf00      	nop
 800b456:	bf00      	nop
 800b458:	3714      	adds	r7, #20
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bc80      	pop	{r7}
 800b45e:	4770      	bx	lr
 800b460:	20002660 	.word	0x20002660

0800b464 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b474:	f001 fcba 	bl	800cdec <vPortEnterCritical>
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b47e:	b25b      	sxtb	r3, r3
 800b480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b484:	d103      	bne.n	800b48e <vQueueWaitForMessageRestricted+0x2a>
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	2200      	movs	r2, #0
 800b48a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b494:	b25b      	sxtb	r3, r3
 800b496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b49a:	d103      	bne.n	800b4a4 <vQueueWaitForMessageRestricted+0x40>
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4a4:	f001 fcd2 	bl	800ce4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d106      	bne.n	800b4be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	3324      	adds	r3, #36	; 0x24
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	68b9      	ldr	r1, [r7, #8]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f000 fcaf 	bl	800be1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b4be:	6978      	ldr	r0, [r7, #20]
 800b4c0:	f7ff ff28 	bl	800b314 <prvUnlockQueue>
	}
 800b4c4:	bf00      	nop
 800b4c6:	3718      	adds	r7, #24
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b08e      	sub	sp, #56	; 0x38
 800b4d0:	af04      	add	r7, sp, #16
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
 800b4d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10a      	bne.n	800b4f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	623b      	str	r3, [r7, #32]
}
 800b4f2:	bf00      	nop
 800b4f4:	e7fe      	b.n	800b4f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d10a      	bne.n	800b512 <xTaskCreateStatic+0x46>
	__asm volatile
 800b4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b500:	f383 8811 	msr	BASEPRI, r3
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	61fb      	str	r3, [r7, #28]
}
 800b50e:	bf00      	nop
 800b510:	e7fe      	b.n	800b510 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b512:	235c      	movs	r3, #92	; 0x5c
 800b514:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	2b5c      	cmp	r3, #92	; 0x5c
 800b51a:	d00a      	beq.n	800b532 <xTaskCreateStatic+0x66>
	__asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	61bb      	str	r3, [r7, #24]
}
 800b52e:	bf00      	nop
 800b530:	e7fe      	b.n	800b530 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b534:	2b00      	cmp	r3, #0
 800b536:	d01e      	beq.n	800b576 <xTaskCreateStatic+0xaa>
 800b538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d01b      	beq.n	800b576 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b540:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b546:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54a:	2202      	movs	r2, #2
 800b54c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b550:	2300      	movs	r3, #0
 800b552:	9303      	str	r3, [sp, #12]
 800b554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b556:	9302      	str	r3, [sp, #8]
 800b558:	f107 0314 	add.w	r3, r7, #20
 800b55c:	9301      	str	r3, [sp, #4]
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	68b9      	ldr	r1, [r7, #8]
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f000 f850 	bl	800b60e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b56e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b570:	f000 f8d4 	bl	800b71c <prvAddNewTaskToReadyList>
 800b574:	e001      	b.n	800b57a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b576:	2300      	movs	r3, #0
 800b578:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b57a:	697b      	ldr	r3, [r7, #20]
	}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3728      	adds	r7, #40	; 0x28
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b584:	b580      	push	{r7, lr}
 800b586:	b08c      	sub	sp, #48	; 0x30
 800b588:	af04      	add	r7, sp, #16
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	603b      	str	r3, [r7, #0]
 800b590:	4613      	mov	r3, r2
 800b592:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b594:	88fb      	ldrh	r3, [r7, #6]
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	4618      	mov	r0, r3
 800b59a:	f001 fd27 	bl	800cfec <pvPortMalloc>
 800b59e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00e      	beq.n	800b5c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b5a6:	205c      	movs	r0, #92	; 0x5c
 800b5a8:	f001 fd20 	bl	800cfec <pvPortMalloc>
 800b5ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d003      	beq.n	800b5bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	697a      	ldr	r2, [r7, #20]
 800b5b8:	631a      	str	r2, [r3, #48]	; 0x30
 800b5ba:	e005      	b.n	800b5c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5bc:	6978      	ldr	r0, [r7, #20]
 800b5be:	f001 fdd9 	bl	800d174 <vPortFree>
 800b5c2:	e001      	b.n	800b5c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d017      	beq.n	800b5fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b5d6:	88fa      	ldrh	r2, [r7, #6]
 800b5d8:	2300      	movs	r3, #0
 800b5da:	9303      	str	r3, [sp, #12]
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	9302      	str	r3, [sp, #8]
 800b5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e2:	9301      	str	r3, [sp, #4]
 800b5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e6:	9300      	str	r3, [sp, #0]
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	68b9      	ldr	r1, [r7, #8]
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f000 f80e 	bl	800b60e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5f2:	69f8      	ldr	r0, [r7, #28]
 800b5f4:	f000 f892 	bl	800b71c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	61bb      	str	r3, [r7, #24]
 800b5fc:	e002      	b.n	800b604 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b5fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b602:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b604:	69bb      	ldr	r3, [r7, #24]
	}
 800b606:	4618      	mov	r0, r3
 800b608:	3720      	adds	r7, #32
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b088      	sub	sp, #32
 800b612:	af00      	add	r7, sp, #0
 800b614:	60f8      	str	r0, [r7, #12]
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	607a      	str	r2, [r7, #4]
 800b61a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	461a      	mov	r2, r3
 800b626:	21a5      	movs	r1, #165	; 0xa5
 800b628:	f002 fbc6 	bl	800ddb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b636:	3b01      	subs	r3, #1
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	4413      	add	r3, r2
 800b63c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	f023 0307 	bic.w	r3, r3, #7
 800b644:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	f003 0307 	and.w	r3, r3, #7
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00a      	beq.n	800b666 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b654:	f383 8811 	msr	BASEPRI, r3
 800b658:	f3bf 8f6f 	isb	sy
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	617b      	str	r3, [r7, #20]
}
 800b662:	bf00      	nop
 800b664:	e7fe      	b.n	800b664 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b666:	2300      	movs	r3, #0
 800b668:	61fb      	str	r3, [r7, #28]
 800b66a:	e012      	b.n	800b692 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	4413      	add	r3, r2
 800b672:	7819      	ldrb	r1, [r3, #0]
 800b674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	4413      	add	r3, r2
 800b67a:	3334      	adds	r3, #52	; 0x34
 800b67c:	460a      	mov	r2, r1
 800b67e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	4413      	add	r3, r2
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d006      	beq.n	800b69a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	3301      	adds	r3, #1
 800b690:	61fb      	str	r3, [r7, #28]
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	2b0f      	cmp	r3, #15
 800b696:	d9e9      	bls.n	800b66c <prvInitialiseNewTask+0x5e>
 800b698:	e000      	b.n	800b69c <prvInitialiseNewTask+0x8e>
		{
			break;
 800b69a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a6:	2b37      	cmp	r3, #55	; 0x37
 800b6a8:	d901      	bls.n	800b6ae <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6aa:	2337      	movs	r3, #55	; 0x37
 800b6ac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6b2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6b8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6bc:	2200      	movs	r2, #0
 800b6be:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c2:	3304      	adds	r3, #4
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff f94e 	bl	800a966 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6cc:	3318      	adds	r3, #24
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7ff f949 	bl	800a966 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6e8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b6f8:	683a      	ldr	r2, [r7, #0]
 800b6fa:	68f9      	ldr	r1, [r7, #12]
 800b6fc:	69b8      	ldr	r0, [r7, #24]
 800b6fe:	f001 fa81 	bl	800cc04 <pxPortInitialiseStack>
 800b702:	4602      	mov	r2, r0
 800b704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b706:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d002      	beq.n	800b714 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b712:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b714:	bf00      	nop
 800b716:	3720      	adds	r7, #32
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b724:	f001 fb62 	bl	800cdec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b728:	4b2d      	ldr	r3, [pc, #180]	; (800b7e0 <prvAddNewTaskToReadyList+0xc4>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	3301      	adds	r3, #1
 800b72e:	4a2c      	ldr	r2, [pc, #176]	; (800b7e0 <prvAddNewTaskToReadyList+0xc4>)
 800b730:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b732:	4b2c      	ldr	r3, [pc, #176]	; (800b7e4 <prvAddNewTaskToReadyList+0xc8>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d109      	bne.n	800b74e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b73a:	4a2a      	ldr	r2, [pc, #168]	; (800b7e4 <prvAddNewTaskToReadyList+0xc8>)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b740:	4b27      	ldr	r3, [pc, #156]	; (800b7e0 <prvAddNewTaskToReadyList+0xc4>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d110      	bne.n	800b76a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b748:	f000 fc94 	bl	800c074 <prvInitialiseTaskLists>
 800b74c:	e00d      	b.n	800b76a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b74e:	4b26      	ldr	r3, [pc, #152]	; (800b7e8 <prvAddNewTaskToReadyList+0xcc>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d109      	bne.n	800b76a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b756:	4b23      	ldr	r3, [pc, #140]	; (800b7e4 <prvAddNewTaskToReadyList+0xc8>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b760:	429a      	cmp	r2, r3
 800b762:	d802      	bhi.n	800b76a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b764:	4a1f      	ldr	r2, [pc, #124]	; (800b7e4 <prvAddNewTaskToReadyList+0xc8>)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b76a:	4b20      	ldr	r3, [pc, #128]	; (800b7ec <prvAddNewTaskToReadyList+0xd0>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3301      	adds	r3, #1
 800b770:	4a1e      	ldr	r2, [pc, #120]	; (800b7ec <prvAddNewTaskToReadyList+0xd0>)
 800b772:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b774:	4b1d      	ldr	r3, [pc, #116]	; (800b7ec <prvAddNewTaskToReadyList+0xd0>)
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b780:	4b1b      	ldr	r3, [pc, #108]	; (800b7f0 <prvAddNewTaskToReadyList+0xd4>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	429a      	cmp	r2, r3
 800b786:	d903      	bls.n	800b790 <prvAddNewTaskToReadyList+0x74>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78c:	4a18      	ldr	r2, [pc, #96]	; (800b7f0 <prvAddNewTaskToReadyList+0xd4>)
 800b78e:	6013      	str	r3, [r2, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b794:	4613      	mov	r3, r2
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	4413      	add	r3, r2
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	4a15      	ldr	r2, [pc, #84]	; (800b7f4 <prvAddNewTaskToReadyList+0xd8>)
 800b79e:	441a      	add	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	f7ff f8e9 	bl	800a97e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b7ac:	f001 fb4e 	bl	800ce4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b7b0:	4b0d      	ldr	r3, [pc, #52]	; (800b7e8 <prvAddNewTaskToReadyList+0xcc>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00e      	beq.n	800b7d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7b8:	4b0a      	ldr	r3, [pc, #40]	; (800b7e4 <prvAddNewTaskToReadyList+0xc8>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d207      	bcs.n	800b7d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7c6:	4b0c      	ldr	r3, [pc, #48]	; (800b7f8 <prvAddNewTaskToReadyList+0xdc>)
 800b7c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7cc:	601a      	str	r2, [r3, #0]
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7d6:	bf00      	nop
 800b7d8:	3708      	adds	r7, #8
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	20000d44 	.word	0x20000d44
 800b7e4:	20000870 	.word	0x20000870
 800b7e8:	20000d50 	.word	0x20000d50
 800b7ec:	20000d60 	.word	0x20000d60
 800b7f0:	20000d4c 	.word	0x20000d4c
 800b7f4:	20000874 	.word	0x20000874
 800b7f8:	e000ed04 	.word	0xe000ed04

0800b7fc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b08a      	sub	sp, #40	; 0x28
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b806:	2300      	movs	r3, #0
 800b808:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10a      	bne.n	800b826 <vTaskDelayUntil+0x2a>
	__asm volatile
 800b810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	617b      	str	r3, [r7, #20]
}
 800b822:	bf00      	nop
 800b824:	e7fe      	b.n	800b824 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10a      	bne.n	800b842 <vTaskDelayUntil+0x46>
	__asm volatile
 800b82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b830:	f383 8811 	msr	BASEPRI, r3
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	f3bf 8f4f 	dsb	sy
 800b83c:	613b      	str	r3, [r7, #16]
}
 800b83e:	bf00      	nop
 800b840:	e7fe      	b.n	800b840 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b842:	4b2a      	ldr	r3, [pc, #168]	; (800b8ec <vTaskDelayUntil+0xf0>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00a      	beq.n	800b860 <vTaskDelayUntil+0x64>
	__asm volatile
 800b84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84e:	f383 8811 	msr	BASEPRI, r3
 800b852:	f3bf 8f6f 	isb	sy
 800b856:	f3bf 8f4f 	dsb	sy
 800b85a:	60fb      	str	r3, [r7, #12]
}
 800b85c:	bf00      	nop
 800b85e:	e7fe      	b.n	800b85e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b860:	f000 f8e4 	bl	800ba2c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b864:	4b22      	ldr	r3, [pc, #136]	; (800b8f0 <vTaskDelayUntil+0xf4>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	683a      	ldr	r2, [r7, #0]
 800b870:	4413      	add	r3, r2
 800b872:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	6a3a      	ldr	r2, [r7, #32]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d20b      	bcs.n	800b896 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	69fa      	ldr	r2, [r7, #28]
 800b884:	429a      	cmp	r2, r3
 800b886:	d211      	bcs.n	800b8ac <vTaskDelayUntil+0xb0>
 800b888:	69fa      	ldr	r2, [r7, #28]
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d90d      	bls.n	800b8ac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b890:	2301      	movs	r3, #1
 800b892:	627b      	str	r3, [r7, #36]	; 0x24
 800b894:	e00a      	b.n	800b8ac <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	69fa      	ldr	r2, [r7, #28]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d303      	bcc.n	800b8a8 <vTaskDelayUntil+0xac>
 800b8a0:	69fa      	ldr	r2, [r7, #28]
 800b8a2:	6a3b      	ldr	r3, [r7, #32]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d901      	bls.n	800b8ac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	69fa      	ldr	r2, [r7, #28]
 800b8b0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d006      	beq.n	800b8c6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b8b8:	69fa      	ldr	r2, [r7, #28]
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	1ad3      	subs	r3, r2, r3
 800b8be:	2100      	movs	r1, #0
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f000 fe39 	bl	800c538 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b8c6:	f000 f8bf 	bl	800ba48 <xTaskResumeAll>
 800b8ca:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d107      	bne.n	800b8e2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b8d2:	4b08      	ldr	r3, [pc, #32]	; (800b8f4 <vTaskDelayUntil+0xf8>)
 800b8d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8d8:	601a      	str	r2, [r3, #0]
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8e2:	bf00      	nop
 800b8e4:	3728      	adds	r7, #40	; 0x28
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	20000d6c 	.word	0x20000d6c
 800b8f0:	20000d48 	.word	0x20000d48
 800b8f4:	e000ed04 	.word	0xe000ed04

0800b8f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b900:	2300      	movs	r3, #0
 800b902:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d017      	beq.n	800b93a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b90a:	4b13      	ldr	r3, [pc, #76]	; (800b958 <vTaskDelay+0x60>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00a      	beq.n	800b928 <vTaskDelay+0x30>
	__asm volatile
 800b912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	60bb      	str	r3, [r7, #8]
}
 800b924:	bf00      	nop
 800b926:	e7fe      	b.n	800b926 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b928:	f000 f880 	bl	800ba2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b92c:	2100      	movs	r1, #0
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 fe02 	bl	800c538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b934:	f000 f888 	bl	800ba48 <xTaskResumeAll>
 800b938:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d107      	bne.n	800b950 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b940:	4b06      	ldr	r3, [pc, #24]	; (800b95c <vTaskDelay+0x64>)
 800b942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b946:	601a      	str	r2, [r3, #0]
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b950:	bf00      	nop
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	20000d6c 	.word	0x20000d6c
 800b95c:	e000ed04 	.word	0xe000ed04

0800b960 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b08a      	sub	sp, #40	; 0x28
 800b964:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b966:	2300      	movs	r3, #0
 800b968:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b96a:	2300      	movs	r3, #0
 800b96c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b96e:	463a      	mov	r2, r7
 800b970:	1d39      	adds	r1, r7, #4
 800b972:	f107 0308 	add.w	r3, r7, #8
 800b976:	4618      	mov	r0, r3
 800b978:	f7fe ffa4 	bl	800a8c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b97c:	6839      	ldr	r1, [r7, #0]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	9202      	str	r2, [sp, #8]
 800b984:	9301      	str	r3, [sp, #4]
 800b986:	2300      	movs	r3, #0
 800b988:	9300      	str	r3, [sp, #0]
 800b98a:	2300      	movs	r3, #0
 800b98c:	460a      	mov	r2, r1
 800b98e:	4921      	ldr	r1, [pc, #132]	; (800ba14 <vTaskStartScheduler+0xb4>)
 800b990:	4821      	ldr	r0, [pc, #132]	; (800ba18 <vTaskStartScheduler+0xb8>)
 800b992:	f7ff fd9b 	bl	800b4cc <xTaskCreateStatic>
 800b996:	4603      	mov	r3, r0
 800b998:	4a20      	ldr	r2, [pc, #128]	; (800ba1c <vTaskStartScheduler+0xbc>)
 800b99a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b99c:	4b1f      	ldr	r3, [pc, #124]	; (800ba1c <vTaskStartScheduler+0xbc>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d002      	beq.n	800b9aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	617b      	str	r3, [r7, #20]
 800b9a8:	e001      	b.n	800b9ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d102      	bne.n	800b9ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b9b4:	f000 fe14 	bl	800c5e0 <xTimerCreateTimerTask>
 800b9b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d116      	bne.n	800b9ee <vTaskStartScheduler+0x8e>
	__asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	613b      	str	r3, [r7, #16]
}
 800b9d2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b9d4:	4b12      	ldr	r3, [pc, #72]	; (800ba20 <vTaskStartScheduler+0xc0>)
 800b9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b9dc:	4b11      	ldr	r3, [pc, #68]	; (800ba24 <vTaskStartScheduler+0xc4>)
 800b9de:	2201      	movs	r2, #1
 800b9e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b9e2:	4b11      	ldr	r3, [pc, #68]	; (800ba28 <vTaskStartScheduler+0xc8>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b9e8:	f001 f98e 	bl	800cd08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b9ec:	e00e      	b.n	800ba0c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f4:	d10a      	bne.n	800ba0c <vTaskStartScheduler+0xac>
	__asm volatile
 800b9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	60fb      	str	r3, [r7, #12]
}
 800ba08:	bf00      	nop
 800ba0a:	e7fe      	b.n	800ba0a <vTaskStartScheduler+0xaa>
}
 800ba0c:	bf00      	nop
 800ba0e:	3718      	adds	r7, #24
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	0800e018 	.word	0x0800e018
 800ba18:	0800c045 	.word	0x0800c045
 800ba1c:	20000d68 	.word	0x20000d68
 800ba20:	20000d64 	.word	0x20000d64
 800ba24:	20000d50 	.word	0x20000d50
 800ba28:	20000d48 	.word	0x20000d48

0800ba2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ba30:	4b04      	ldr	r3, [pc, #16]	; (800ba44 <vTaskSuspendAll+0x18>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	3301      	adds	r3, #1
 800ba36:	4a03      	ldr	r2, [pc, #12]	; (800ba44 <vTaskSuspendAll+0x18>)
 800ba38:	6013      	str	r3, [r2, #0]
}
 800ba3a:	bf00      	nop
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bc80      	pop	{r7}
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	20000d6c 	.word	0x20000d6c

0800ba48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba52:	2300      	movs	r3, #0
 800ba54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba56:	4b42      	ldr	r3, [pc, #264]	; (800bb60 <xTaskResumeAll+0x118>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10a      	bne.n	800ba74 <xTaskResumeAll+0x2c>
	__asm volatile
 800ba5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	603b      	str	r3, [r7, #0]
}
 800ba70:	bf00      	nop
 800ba72:	e7fe      	b.n	800ba72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba74:	f001 f9ba 	bl	800cdec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba78:	4b39      	ldr	r3, [pc, #228]	; (800bb60 <xTaskResumeAll+0x118>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	4a38      	ldr	r2, [pc, #224]	; (800bb60 <xTaskResumeAll+0x118>)
 800ba80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba82:	4b37      	ldr	r3, [pc, #220]	; (800bb60 <xTaskResumeAll+0x118>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d162      	bne.n	800bb50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba8a:	4b36      	ldr	r3, [pc, #216]	; (800bb64 <xTaskResumeAll+0x11c>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d05e      	beq.n	800bb50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba92:	e02f      	b.n	800baf4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ba94:	4b34      	ldr	r3, [pc, #208]	; (800bb68 <xTaskResumeAll+0x120>)
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	3318      	adds	r3, #24
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7fe ffc7 	bl	800aa34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	3304      	adds	r3, #4
 800baaa:	4618      	mov	r0, r3
 800baac:	f7fe ffc2 	bl	800aa34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab4:	4b2d      	ldr	r3, [pc, #180]	; (800bb6c <xTaskResumeAll+0x124>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d903      	bls.n	800bac4 <xTaskResumeAll+0x7c>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac0:	4a2a      	ldr	r2, [pc, #168]	; (800bb6c <xTaskResumeAll+0x124>)
 800bac2:	6013      	str	r3, [r2, #0]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac8:	4613      	mov	r3, r2
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	4413      	add	r3, r2
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4a27      	ldr	r2, [pc, #156]	; (800bb70 <xTaskResumeAll+0x128>)
 800bad2:	441a      	add	r2, r3
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	3304      	adds	r3, #4
 800bad8:	4619      	mov	r1, r3
 800bada:	4610      	mov	r0, r2
 800badc:	f7fe ff4f 	bl	800a97e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae4:	4b23      	ldr	r3, [pc, #140]	; (800bb74 <xTaskResumeAll+0x12c>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baea:	429a      	cmp	r2, r3
 800baec:	d302      	bcc.n	800baf4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800baee:	4b22      	ldr	r3, [pc, #136]	; (800bb78 <xTaskResumeAll+0x130>)
 800baf0:	2201      	movs	r2, #1
 800baf2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800baf4:	4b1c      	ldr	r3, [pc, #112]	; (800bb68 <xTaskResumeAll+0x120>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1cb      	bne.n	800ba94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bb02:	f000 fb8d 	bl	800c220 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bb06:	4b1d      	ldr	r3, [pc, #116]	; (800bb7c <xTaskResumeAll+0x134>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d010      	beq.n	800bb34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bb12:	f000 f845 	bl	800bba0 <xTaskIncrementTick>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d002      	beq.n	800bb22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bb1c:	4b16      	ldr	r3, [pc, #88]	; (800bb78 <xTaskResumeAll+0x130>)
 800bb1e:	2201      	movs	r2, #1
 800bb20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	3b01      	subs	r3, #1
 800bb26:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1f1      	bne.n	800bb12 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800bb2e:	4b13      	ldr	r3, [pc, #76]	; (800bb7c <xTaskResumeAll+0x134>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb34:	4b10      	ldr	r3, [pc, #64]	; (800bb78 <xTaskResumeAll+0x130>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d009      	beq.n	800bb50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb40:	4b0f      	ldr	r3, [pc, #60]	; (800bb80 <xTaskResumeAll+0x138>)
 800bb42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb46:	601a      	str	r2, [r3, #0]
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb50:	f001 f97c 	bl	800ce4c <vPortExitCritical>

	return xAlreadyYielded;
 800bb54:	68bb      	ldr	r3, [r7, #8]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	20000d6c 	.word	0x20000d6c
 800bb64:	20000d44 	.word	0x20000d44
 800bb68:	20000d04 	.word	0x20000d04
 800bb6c:	20000d4c 	.word	0x20000d4c
 800bb70:	20000874 	.word	0x20000874
 800bb74:	20000870 	.word	0x20000870
 800bb78:	20000d58 	.word	0x20000d58
 800bb7c:	20000d54 	.word	0x20000d54
 800bb80:	e000ed04 	.word	0xe000ed04

0800bb84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb8a:	4b04      	ldr	r3, [pc, #16]	; (800bb9c <xTaskGetTickCount+0x18>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb90:	687b      	ldr	r3, [r7, #4]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bc80      	pop	{r7}
 800bb9a:	4770      	bx	lr
 800bb9c:	20000d48 	.word	0x20000d48

0800bba0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b086      	sub	sp, #24
 800bba4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bba6:	2300      	movs	r3, #0
 800bba8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbaa:	4b51      	ldr	r3, [pc, #324]	; (800bcf0 <xTaskIncrementTick+0x150>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	f040 808e 	bne.w	800bcd0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bbb4:	4b4f      	ldr	r3, [pc, #316]	; (800bcf4 <xTaskIncrementTick+0x154>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bbbc:	4a4d      	ldr	r2, [pc, #308]	; (800bcf4 <xTaskIncrementTick+0x154>)
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d120      	bne.n	800bc0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bbc8:	4b4b      	ldr	r3, [pc, #300]	; (800bcf8 <xTaskIncrementTick+0x158>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00a      	beq.n	800bbe8 <xTaskIncrementTick+0x48>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	603b      	str	r3, [r7, #0]
}
 800bbe4:	bf00      	nop
 800bbe6:	e7fe      	b.n	800bbe6 <xTaskIncrementTick+0x46>
 800bbe8:	4b43      	ldr	r3, [pc, #268]	; (800bcf8 <xTaskIncrementTick+0x158>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	60fb      	str	r3, [r7, #12]
 800bbee:	4b43      	ldr	r3, [pc, #268]	; (800bcfc <xTaskIncrementTick+0x15c>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a41      	ldr	r2, [pc, #260]	; (800bcf8 <xTaskIncrementTick+0x158>)
 800bbf4:	6013      	str	r3, [r2, #0]
 800bbf6:	4a41      	ldr	r2, [pc, #260]	; (800bcfc <xTaskIncrementTick+0x15c>)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6013      	str	r3, [r2, #0]
 800bbfc:	4b40      	ldr	r3, [pc, #256]	; (800bd00 <xTaskIncrementTick+0x160>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	3301      	adds	r3, #1
 800bc02:	4a3f      	ldr	r2, [pc, #252]	; (800bd00 <xTaskIncrementTick+0x160>)
 800bc04:	6013      	str	r3, [r2, #0]
 800bc06:	f000 fb0b 	bl	800c220 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc0a:	4b3e      	ldr	r3, [pc, #248]	; (800bd04 <xTaskIncrementTick+0x164>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	693a      	ldr	r2, [r7, #16]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d34e      	bcc.n	800bcb2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc14:	4b38      	ldr	r3, [pc, #224]	; (800bcf8 <xTaskIncrementTick+0x158>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d101      	bne.n	800bc22 <xTaskIncrementTick+0x82>
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e000      	b.n	800bc24 <xTaskIncrementTick+0x84>
 800bc22:	2300      	movs	r3, #0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d004      	beq.n	800bc32 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc28:	4b36      	ldr	r3, [pc, #216]	; (800bd04 <xTaskIncrementTick+0x164>)
 800bc2a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc2e:	601a      	str	r2, [r3, #0]
					break;
 800bc30:	e03f      	b.n	800bcb2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bc32:	4b31      	ldr	r3, [pc, #196]	; (800bcf8 <xTaskIncrementTick+0x158>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc42:	693a      	ldr	r2, [r7, #16]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d203      	bcs.n	800bc52 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc4a:	4a2e      	ldr	r2, [pc, #184]	; (800bd04 <xTaskIncrementTick+0x164>)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6013      	str	r3, [r2, #0]
						break;
 800bc50:	e02f      	b.n	800bcb2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	3304      	adds	r3, #4
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fe feec 	bl	800aa34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d004      	beq.n	800bc6e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	3318      	adds	r3, #24
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7fe fee3 	bl	800aa34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc72:	4b25      	ldr	r3, [pc, #148]	; (800bd08 <xTaskIncrementTick+0x168>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d903      	bls.n	800bc82 <xTaskIncrementTick+0xe2>
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7e:	4a22      	ldr	r2, [pc, #136]	; (800bd08 <xTaskIncrementTick+0x168>)
 800bc80:	6013      	str	r3, [r2, #0]
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc86:	4613      	mov	r3, r2
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	4413      	add	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4a1f      	ldr	r2, [pc, #124]	; (800bd0c <xTaskIncrementTick+0x16c>)
 800bc90:	441a      	add	r2, r3
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	3304      	adds	r3, #4
 800bc96:	4619      	mov	r1, r3
 800bc98:	4610      	mov	r0, r2
 800bc9a:	f7fe fe70 	bl	800a97e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bca2:	4b1b      	ldr	r3, [pc, #108]	; (800bd10 <xTaskIncrementTick+0x170>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d3b3      	bcc.n	800bc14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bcac:	2301      	movs	r3, #1
 800bcae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcb0:	e7b0      	b.n	800bc14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bcb2:	4b17      	ldr	r3, [pc, #92]	; (800bd10 <xTaskIncrementTick+0x170>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb8:	4914      	ldr	r1, [pc, #80]	; (800bd0c <xTaskIncrementTick+0x16c>)
 800bcba:	4613      	mov	r3, r2
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	4413      	add	r3, r2
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	440b      	add	r3, r1
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d907      	bls.n	800bcda <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bcca:	2301      	movs	r3, #1
 800bccc:	617b      	str	r3, [r7, #20]
 800bcce:	e004      	b.n	800bcda <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bcd0:	4b10      	ldr	r3, [pc, #64]	; (800bd14 <xTaskIncrementTick+0x174>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	4a0f      	ldr	r2, [pc, #60]	; (800bd14 <xTaskIncrementTick+0x174>)
 800bcd8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bcda:	4b0f      	ldr	r3, [pc, #60]	; (800bd18 <xTaskIncrementTick+0x178>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d001      	beq.n	800bce6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800bce2:	2301      	movs	r3, #1
 800bce4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bce6:	697b      	ldr	r3, [r7, #20]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3718      	adds	r7, #24
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	20000d6c 	.word	0x20000d6c
 800bcf4:	20000d48 	.word	0x20000d48
 800bcf8:	20000cfc 	.word	0x20000cfc
 800bcfc:	20000d00 	.word	0x20000d00
 800bd00:	20000d5c 	.word	0x20000d5c
 800bd04:	20000d64 	.word	0x20000d64
 800bd08:	20000d4c 	.word	0x20000d4c
 800bd0c:	20000874 	.word	0x20000874
 800bd10:	20000870 	.word	0x20000870
 800bd14:	20000d54 	.word	0x20000d54
 800bd18:	20000d58 	.word	0x20000d58

0800bd1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd22:	4b27      	ldr	r3, [pc, #156]	; (800bdc0 <vTaskSwitchContext+0xa4>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d003      	beq.n	800bd32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd2a:	4b26      	ldr	r3, [pc, #152]	; (800bdc4 <vTaskSwitchContext+0xa8>)
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd30:	e041      	b.n	800bdb6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bd32:	4b24      	ldr	r3, [pc, #144]	; (800bdc4 <vTaskSwitchContext+0xa8>)
 800bd34:	2200      	movs	r2, #0
 800bd36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800bd38:	4b23      	ldr	r3, [pc, #140]	; (800bdc8 <vTaskSwitchContext+0xac>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	60fb      	str	r3, [r7, #12]
 800bd3e:	e010      	b.n	800bd62 <vTaskSwitchContext+0x46>
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d10a      	bne.n	800bd5c <vTaskSwitchContext+0x40>
	__asm volatile
 800bd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4a:	f383 8811 	msr	BASEPRI, r3
 800bd4e:	f3bf 8f6f 	isb	sy
 800bd52:	f3bf 8f4f 	dsb	sy
 800bd56:	607b      	str	r3, [r7, #4]
}
 800bd58:	bf00      	nop
 800bd5a:	e7fe      	b.n	800bd5a <vTaskSwitchContext+0x3e>
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	60fb      	str	r3, [r7, #12]
 800bd62:	491a      	ldr	r1, [pc, #104]	; (800bdcc <vTaskSwitchContext+0xb0>)
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	4613      	mov	r3, r2
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	4413      	add	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	440b      	add	r3, r1
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d0e4      	beq.n	800bd40 <vTaskSwitchContext+0x24>
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	4413      	add	r3, r2
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	4a12      	ldr	r2, [pc, #72]	; (800bdcc <vTaskSwitchContext+0xb0>)
 800bd82:	4413      	add	r3, r2
 800bd84:	60bb      	str	r3, [r7, #8]
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	685a      	ldr	r2, [r3, #4]
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	605a      	str	r2, [r3, #4]
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	685a      	ldr	r2, [r3, #4]
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	3308      	adds	r3, #8
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d104      	bne.n	800bda6 <vTaskSwitchContext+0x8a>
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	685a      	ldr	r2, [r3, #4]
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	605a      	str	r2, [r3, #4]
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	4a08      	ldr	r2, [pc, #32]	; (800bdd0 <vTaskSwitchContext+0xb4>)
 800bdae:	6013      	str	r3, [r2, #0]
 800bdb0:	4a05      	ldr	r2, [pc, #20]	; (800bdc8 <vTaskSwitchContext+0xac>)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6013      	str	r3, [r2, #0]
}
 800bdb6:	bf00      	nop
 800bdb8:	3714      	adds	r7, #20
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bc80      	pop	{r7}
 800bdbe:	4770      	bx	lr
 800bdc0:	20000d6c 	.word	0x20000d6c
 800bdc4:	20000d58 	.word	0x20000d58
 800bdc8:	20000d4c 	.word	0x20000d4c
 800bdcc:	20000874 	.word	0x20000874
 800bdd0:	20000870 	.word	0x20000870

0800bdd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10a      	bne.n	800bdfa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde8:	f383 8811 	msr	BASEPRI, r3
 800bdec:	f3bf 8f6f 	isb	sy
 800bdf0:	f3bf 8f4f 	dsb	sy
 800bdf4:	60fb      	str	r3, [r7, #12]
}
 800bdf6:	bf00      	nop
 800bdf8:	e7fe      	b.n	800bdf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdfa:	4b07      	ldr	r3, [pc, #28]	; (800be18 <vTaskPlaceOnEventList+0x44>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	3318      	adds	r3, #24
 800be00:	4619      	mov	r1, r3
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f7fe fdde 	bl	800a9c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be08:	2101      	movs	r1, #1
 800be0a:	6838      	ldr	r0, [r7, #0]
 800be0c:	f000 fb94 	bl	800c538 <prvAddCurrentTaskToDelayedList>
}
 800be10:	bf00      	nop
 800be12:	3710      	adds	r7, #16
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	20000870 	.word	0x20000870

0800be1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b086      	sub	sp, #24
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10a      	bne.n	800be44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800be2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	617b      	str	r3, [r7, #20]
}
 800be40:	bf00      	nop
 800be42:	e7fe      	b.n	800be42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be44:	4b0a      	ldr	r3, [pc, #40]	; (800be70 <vTaskPlaceOnEventListRestricted+0x54>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	3318      	adds	r3, #24
 800be4a:	4619      	mov	r1, r3
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f7fe fd96 	bl	800a97e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800be58:	f04f 33ff 	mov.w	r3, #4294967295
 800be5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800be5e:	6879      	ldr	r1, [r7, #4]
 800be60:	68b8      	ldr	r0, [r7, #8]
 800be62:	f000 fb69 	bl	800c538 <prvAddCurrentTaskToDelayedList>
	}
 800be66:	bf00      	nop
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	20000870 	.word	0x20000870

0800be74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10a      	bne.n	800bea0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	60fb      	str	r3, [r7, #12]
}
 800be9c:	bf00      	nop
 800be9e:	e7fe      	b.n	800be9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	3318      	adds	r3, #24
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7fe fdc5 	bl	800aa34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beaa:	4b1e      	ldr	r3, [pc, #120]	; (800bf24 <xTaskRemoveFromEventList+0xb0>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d11d      	bne.n	800beee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	3304      	adds	r3, #4
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fe fdbc 	bl	800aa34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec0:	4b19      	ldr	r3, [pc, #100]	; (800bf28 <xTaskRemoveFromEventList+0xb4>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d903      	bls.n	800bed0 <xTaskRemoveFromEventList+0x5c>
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800becc:	4a16      	ldr	r2, [pc, #88]	; (800bf28 <xTaskRemoveFromEventList+0xb4>)
 800bece:	6013      	str	r3, [r2, #0]
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed4:	4613      	mov	r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4a13      	ldr	r2, [pc, #76]	; (800bf2c <xTaskRemoveFromEventList+0xb8>)
 800bede:	441a      	add	r2, r3
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	3304      	adds	r3, #4
 800bee4:	4619      	mov	r1, r3
 800bee6:	4610      	mov	r0, r2
 800bee8:	f7fe fd49 	bl	800a97e <vListInsertEnd>
 800beec:	e005      	b.n	800befa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	3318      	adds	r3, #24
 800bef2:	4619      	mov	r1, r3
 800bef4:	480e      	ldr	r0, [pc, #56]	; (800bf30 <xTaskRemoveFromEventList+0xbc>)
 800bef6:	f7fe fd42 	bl	800a97e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800befe:	4b0d      	ldr	r3, [pc, #52]	; (800bf34 <xTaskRemoveFromEventList+0xc0>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d905      	bls.n	800bf14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf0c:	4b0a      	ldr	r3, [pc, #40]	; (800bf38 <xTaskRemoveFromEventList+0xc4>)
 800bf0e:	2201      	movs	r2, #1
 800bf10:	601a      	str	r2, [r3, #0]
 800bf12:	e001      	b.n	800bf18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bf14:	2300      	movs	r3, #0
 800bf16:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bf18:	697b      	ldr	r3, [r7, #20]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3718      	adds	r7, #24
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	20000d6c 	.word	0x20000d6c
 800bf28:	20000d4c 	.word	0x20000d4c
 800bf2c:	20000874 	.word	0x20000874
 800bf30:	20000d04 	.word	0x20000d04
 800bf34:	20000870 	.word	0x20000870
 800bf38:	20000d58 	.word	0x20000d58

0800bf3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf44:	4b06      	ldr	r3, [pc, #24]	; (800bf60 <vTaskInternalSetTimeOutState+0x24>)
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf4c:	4b05      	ldr	r3, [pc, #20]	; (800bf64 <vTaskInternalSetTimeOutState+0x28>)
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	605a      	str	r2, [r3, #4]
}
 800bf54:	bf00      	nop
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bc80      	pop	{r7}
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	20000d5c 	.word	0x20000d5c
 800bf64:	20000d48 	.word	0x20000d48

0800bf68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b088      	sub	sp, #32
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10a      	bne.n	800bf8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	613b      	str	r3, [r7, #16]
}
 800bf8a:	bf00      	nop
 800bf8c:	e7fe      	b.n	800bf8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10a      	bne.n	800bfaa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf98:	f383 8811 	msr	BASEPRI, r3
 800bf9c:	f3bf 8f6f 	isb	sy
 800bfa0:	f3bf 8f4f 	dsb	sy
 800bfa4:	60fb      	str	r3, [r7, #12]
}
 800bfa6:	bf00      	nop
 800bfa8:	e7fe      	b.n	800bfa8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bfaa:	f000 ff1f 	bl	800cdec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bfae:	4b1d      	ldr	r3, [pc, #116]	; (800c024 <xTaskCheckForTimeOut+0xbc>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	69ba      	ldr	r2, [r7, #24]
 800bfba:	1ad3      	subs	r3, r2, r3
 800bfbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc6:	d102      	bne.n	800bfce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	61fb      	str	r3, [r7, #28]
 800bfcc:	e023      	b.n	800c016 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	4b15      	ldr	r3, [pc, #84]	; (800c028 <xTaskCheckForTimeOut+0xc0>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d007      	beq.n	800bfea <xTaskCheckForTimeOut+0x82>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	69ba      	ldr	r2, [r7, #24]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d302      	bcc.n	800bfea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	61fb      	str	r3, [r7, #28]
 800bfe8:	e015      	b.n	800c016 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	697a      	ldr	r2, [r7, #20]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d20b      	bcs.n	800c00c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	1ad2      	subs	r2, r2, r3
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f7ff ff9b 	bl	800bf3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c006:	2300      	movs	r3, #0
 800c008:	61fb      	str	r3, [r7, #28]
 800c00a:	e004      	b.n	800c016 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	2200      	movs	r2, #0
 800c010:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c012:	2301      	movs	r3, #1
 800c014:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c016:	f000 ff19 	bl	800ce4c <vPortExitCritical>

	return xReturn;
 800c01a:	69fb      	ldr	r3, [r7, #28]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3720      	adds	r7, #32
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	20000d48 	.word	0x20000d48
 800c028:	20000d5c 	.word	0x20000d5c

0800c02c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c02c:	b480      	push	{r7}
 800c02e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c030:	4b03      	ldr	r3, [pc, #12]	; (800c040 <vTaskMissedYield+0x14>)
 800c032:	2201      	movs	r2, #1
 800c034:	601a      	str	r2, [r3, #0]
}
 800c036:	bf00      	nop
 800c038:	46bd      	mov	sp, r7
 800c03a:	bc80      	pop	{r7}
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	20000d58 	.word	0x20000d58

0800c044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c04c:	f000 f852 	bl	800c0f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c050:	4b06      	ldr	r3, [pc, #24]	; (800c06c <prvIdleTask+0x28>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b01      	cmp	r3, #1
 800c056:	d9f9      	bls.n	800c04c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c058:	4b05      	ldr	r3, [pc, #20]	; (800c070 <prvIdleTask+0x2c>)
 800c05a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c05e:	601a      	str	r2, [r3, #0]
 800c060:	f3bf 8f4f 	dsb	sy
 800c064:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c068:	e7f0      	b.n	800c04c <prvIdleTask+0x8>
 800c06a:	bf00      	nop
 800c06c:	20000874 	.word	0x20000874
 800c070:	e000ed04 	.word	0xe000ed04

0800c074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c07a:	2300      	movs	r3, #0
 800c07c:	607b      	str	r3, [r7, #4]
 800c07e:	e00c      	b.n	800c09a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	4613      	mov	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4413      	add	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4a12      	ldr	r2, [pc, #72]	; (800c0d4 <prvInitialiseTaskLists+0x60>)
 800c08c:	4413      	add	r3, r2
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fe fc4a 	bl	800a928 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	3301      	adds	r3, #1
 800c098:	607b      	str	r3, [r7, #4]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2b37      	cmp	r3, #55	; 0x37
 800c09e:	d9ef      	bls.n	800c080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c0a0:	480d      	ldr	r0, [pc, #52]	; (800c0d8 <prvInitialiseTaskLists+0x64>)
 800c0a2:	f7fe fc41 	bl	800a928 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c0a6:	480d      	ldr	r0, [pc, #52]	; (800c0dc <prvInitialiseTaskLists+0x68>)
 800c0a8:	f7fe fc3e 	bl	800a928 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c0ac:	480c      	ldr	r0, [pc, #48]	; (800c0e0 <prvInitialiseTaskLists+0x6c>)
 800c0ae:	f7fe fc3b 	bl	800a928 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c0b2:	480c      	ldr	r0, [pc, #48]	; (800c0e4 <prvInitialiseTaskLists+0x70>)
 800c0b4:	f7fe fc38 	bl	800a928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c0b8:	480b      	ldr	r0, [pc, #44]	; (800c0e8 <prvInitialiseTaskLists+0x74>)
 800c0ba:	f7fe fc35 	bl	800a928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c0be:	4b0b      	ldr	r3, [pc, #44]	; (800c0ec <prvInitialiseTaskLists+0x78>)
 800c0c0:	4a05      	ldr	r2, [pc, #20]	; (800c0d8 <prvInitialiseTaskLists+0x64>)
 800c0c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c0c4:	4b0a      	ldr	r3, [pc, #40]	; (800c0f0 <prvInitialiseTaskLists+0x7c>)
 800c0c6:	4a05      	ldr	r2, [pc, #20]	; (800c0dc <prvInitialiseTaskLists+0x68>)
 800c0c8:	601a      	str	r2, [r3, #0]
}
 800c0ca:	bf00      	nop
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	20000874 	.word	0x20000874
 800c0d8:	20000cd4 	.word	0x20000cd4
 800c0dc:	20000ce8 	.word	0x20000ce8
 800c0e0:	20000d04 	.word	0x20000d04
 800c0e4:	20000d18 	.word	0x20000d18
 800c0e8:	20000d30 	.word	0x20000d30
 800c0ec:	20000cfc 	.word	0x20000cfc
 800c0f0:	20000d00 	.word	0x20000d00

0800c0f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0fa:	e019      	b.n	800c130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c0fc:	f000 fe76 	bl	800cdec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c100:	4b10      	ldr	r3, [pc, #64]	; (800c144 <prvCheckTasksWaitingTermination+0x50>)
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	3304      	adds	r3, #4
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7fe fc91 	bl	800aa34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c112:	4b0d      	ldr	r3, [pc, #52]	; (800c148 <prvCheckTasksWaitingTermination+0x54>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	3b01      	subs	r3, #1
 800c118:	4a0b      	ldr	r2, [pc, #44]	; (800c148 <prvCheckTasksWaitingTermination+0x54>)
 800c11a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c11c:	4b0b      	ldr	r3, [pc, #44]	; (800c14c <prvCheckTasksWaitingTermination+0x58>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	3b01      	subs	r3, #1
 800c122:	4a0a      	ldr	r2, [pc, #40]	; (800c14c <prvCheckTasksWaitingTermination+0x58>)
 800c124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c126:	f000 fe91 	bl	800ce4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f848 	bl	800c1c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c130:	4b06      	ldr	r3, [pc, #24]	; (800c14c <prvCheckTasksWaitingTermination+0x58>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1e1      	bne.n	800c0fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c138:	bf00      	nop
 800c13a:	bf00      	nop
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	20000d18 	.word	0x20000d18
 800c148:	20000d44 	.word	0x20000d44
 800c14c:	20000d2c 	.word	0x20000d2c

0800c150 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800c158:	2300      	movs	r3, #0
 800c15a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c15c:	e005      	b.n	800c16a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	3301      	adds	r3, #1
 800c162:	607b      	str	r3, [r7, #4]
			ulCount++;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	3301      	adds	r3, #1
 800c168:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	2ba5      	cmp	r3, #165	; 0xa5
 800c170:	d0f5      	beq.n	800c15e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	089b      	lsrs	r3, r3, #2
 800c176:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	b29b      	uxth	r3, r3
	}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3714      	adds	r7, #20
 800c180:	46bd      	mov	sp, r7
 800c182:	bc80      	pop	{r7}
 800c184:	4770      	bx	lr
	...

0800c188 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b086      	sub	sp, #24
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d102      	bne.n	800c19c <uxTaskGetStackHighWaterMark+0x14>
 800c196:	4b09      	ldr	r3, [pc, #36]	; (800c1bc <uxTaskGetStackHighWaterMark+0x34>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	e000      	b.n	800c19e <uxTaskGetStackHighWaterMark+0x16>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1a4:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800c1a6:	6938      	ldr	r0, [r7, #16]
 800c1a8:	f7ff ffd2 	bl	800c150 <prvTaskCheckFreeStackSpace>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
	}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3718      	adds	r7, #24
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20000870 	.word	0x20000870

0800c1c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d108      	bne.n	800c1e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f000 ffcc 	bl	800d174 <vPortFree>
				vPortFree( pxTCB );
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 ffc9 	bl	800d174 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c1e2:	e018      	b.n	800c216 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d103      	bne.n	800c1f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 ffc0 	bl	800d174 <vPortFree>
	}
 800c1f4:	e00f      	b.n	800c216 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	d00a      	beq.n	800c216 <prvDeleteTCB+0x56>
	__asm volatile
 800c200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c204:	f383 8811 	msr	BASEPRI, r3
 800c208:	f3bf 8f6f 	isb	sy
 800c20c:	f3bf 8f4f 	dsb	sy
 800c210:	60fb      	str	r3, [r7, #12]
}
 800c212:	bf00      	nop
 800c214:	e7fe      	b.n	800c214 <prvDeleteTCB+0x54>
	}
 800c216:	bf00      	nop
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
	...

0800c220 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c226:	4b0e      	ldr	r3, [pc, #56]	; (800c260 <prvResetNextTaskUnblockTime+0x40>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d101      	bne.n	800c234 <prvResetNextTaskUnblockTime+0x14>
 800c230:	2301      	movs	r3, #1
 800c232:	e000      	b.n	800c236 <prvResetNextTaskUnblockTime+0x16>
 800c234:	2300      	movs	r3, #0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d004      	beq.n	800c244 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c23a:	4b0a      	ldr	r3, [pc, #40]	; (800c264 <prvResetNextTaskUnblockTime+0x44>)
 800c23c:	f04f 32ff 	mov.w	r2, #4294967295
 800c240:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c242:	e008      	b.n	800c256 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c244:	4b06      	ldr	r3, [pc, #24]	; (800c260 <prvResetNextTaskUnblockTime+0x40>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	4a04      	ldr	r2, [pc, #16]	; (800c264 <prvResetNextTaskUnblockTime+0x44>)
 800c254:	6013      	str	r3, [r2, #0]
}
 800c256:	bf00      	nop
 800c258:	370c      	adds	r7, #12
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bc80      	pop	{r7}
 800c25e:	4770      	bx	lr
 800c260:	20000cfc 	.word	0x20000cfc
 800c264:	20000d64 	.word	0x20000d64

0800c268 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c26e:	4b0b      	ldr	r3, [pc, #44]	; (800c29c <xTaskGetSchedulerState+0x34>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d102      	bne.n	800c27c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c276:	2301      	movs	r3, #1
 800c278:	607b      	str	r3, [r7, #4]
 800c27a:	e008      	b.n	800c28e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c27c:	4b08      	ldr	r3, [pc, #32]	; (800c2a0 <xTaskGetSchedulerState+0x38>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d102      	bne.n	800c28a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c284:	2302      	movs	r3, #2
 800c286:	607b      	str	r3, [r7, #4]
 800c288:	e001      	b.n	800c28e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c28a:	2300      	movs	r3, #0
 800c28c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c28e:	687b      	ldr	r3, [r7, #4]
	}
 800c290:	4618      	mov	r0, r3
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	bc80      	pop	{r7}
 800c298:	4770      	bx	lr
 800c29a:	bf00      	nop
 800c29c:	20000d50 	.word	0x20000d50
 800c2a0:	20000d6c 	.word	0x20000d6c

0800c2a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b086      	sub	sp, #24
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d056      	beq.n	800c368 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c2ba:	4b2e      	ldr	r3, [pc, #184]	; (800c374 <xTaskPriorityDisinherit+0xd0>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	693a      	ldr	r2, [r7, #16]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d00a      	beq.n	800c2da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	60fb      	str	r3, [r7, #12]
}
 800c2d6:	bf00      	nop
 800c2d8:	e7fe      	b.n	800c2d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d10a      	bne.n	800c2f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e6:	f383 8811 	msr	BASEPRI, r3
 800c2ea:	f3bf 8f6f 	isb	sy
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	60bb      	str	r3, [r7, #8]
}
 800c2f4:	bf00      	nop
 800c2f6:	e7fe      	b.n	800c2f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2fc:	1e5a      	subs	r2, r3, #1
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d02c      	beq.n	800c368 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c312:	2b00      	cmp	r3, #0
 800c314:	d128      	bne.n	800c368 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	3304      	adds	r3, #4
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fe fb8a 	bl	800aa34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c32c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c338:	4b0f      	ldr	r3, [pc, #60]	; (800c378 <xTaskPriorityDisinherit+0xd4>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d903      	bls.n	800c348 <xTaskPriorityDisinherit+0xa4>
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c344:	4a0c      	ldr	r2, [pc, #48]	; (800c378 <xTaskPriorityDisinherit+0xd4>)
 800c346:	6013      	str	r3, [r2, #0]
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c34c:	4613      	mov	r3, r2
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	4413      	add	r3, r2
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	4a09      	ldr	r2, [pc, #36]	; (800c37c <xTaskPriorityDisinherit+0xd8>)
 800c356:	441a      	add	r2, r3
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	3304      	adds	r3, #4
 800c35c:	4619      	mov	r1, r3
 800c35e:	4610      	mov	r0, r2
 800c360:	f7fe fb0d 	bl	800a97e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c364:	2301      	movs	r3, #1
 800c366:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c368:	697b      	ldr	r3, [r7, #20]
	}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3718      	adds	r7, #24
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20000870 	.word	0x20000870
 800c378:	20000d4c 	.word	0x20000d4c
 800c37c:	20000874 	.word	0x20000874

0800c380 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c38a:	f000 fd2f 	bl	800cdec <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c38e:	4b1e      	ldr	r3, [pc, #120]	; (800c408 <ulTaskNotifyTake+0x88>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c394:	2b00      	cmp	r3, #0
 800c396:	d113      	bne.n	800c3c0 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c398:	4b1b      	ldr	r3, [pc, #108]	; (800c408 <ulTaskNotifyTake+0x88>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2201      	movs	r2, #1
 800c39e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00b      	beq.n	800c3c0 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	6838      	ldr	r0, [r7, #0]
 800c3ac:	f000 f8c4 	bl	800c538 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c3b0:	4b16      	ldr	r3, [pc, #88]	; (800c40c <ulTaskNotifyTake+0x8c>)
 800c3b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3b6:	601a      	str	r2, [r3, #0]
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c3c0:	f000 fd44 	bl	800ce4c <vPortExitCritical>

		taskENTER_CRITICAL();
 800c3c4:	f000 fd12 	bl	800cdec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c3c8:	4b0f      	ldr	r3, [pc, #60]	; (800c408 <ulTaskNotifyTake+0x88>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ce:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d00c      	beq.n	800c3f0 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d004      	beq.n	800c3e6 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c3dc:	4b0a      	ldr	r3, [pc, #40]	; (800c408 <ulTaskNotifyTake+0x88>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	655a      	str	r2, [r3, #84]	; 0x54
 800c3e4:	e004      	b.n	800c3f0 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c3e6:	4b08      	ldr	r3, [pc, #32]	; (800c408 <ulTaskNotifyTake+0x88>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	68fa      	ldr	r2, [r7, #12]
 800c3ec:	3a01      	subs	r2, #1
 800c3ee:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3f0:	4b05      	ldr	r3, [pc, #20]	; (800c408 <ulTaskNotifyTake+0x88>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c3fa:	f000 fd27 	bl	800ce4c <vPortExitCritical>

		return ulReturn;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
	}
 800c400:	4618      	mov	r0, r3
 800c402:	3710      	adds	r7, #16
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	20000870 	.word	0x20000870
 800c40c:	e000ed04 	.word	0xe000ed04

0800c410 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c410:	b580      	push	{r7, lr}
 800c412:	b08a      	sub	sp, #40	; 0x28
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d10a      	bne.n	800c436 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	61bb      	str	r3, [r7, #24]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c436:	f000 fd9b 	bl	800cf70 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800c43e:	f3ef 8211 	mrs	r2, BASEPRI
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	617a      	str	r2, [r7, #20]
 800c454:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c456:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c458:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c460:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c464:	2202      	movs	r2, #2
 800c466:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c46e:	1c5a      	adds	r2, r3, #1
 800c470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c472:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c474:	7ffb      	ldrb	r3, [r7, #31]
 800c476:	2b01      	cmp	r3, #1
 800c478:	d147      	bne.n	800c50a <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00a      	beq.n	800c498 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 800c482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c486:	f383 8811 	msr	BASEPRI, r3
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	60fb      	str	r3, [r7, #12]
}
 800c494:	bf00      	nop
 800c496:	e7fe      	b.n	800c496 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c498:	4b21      	ldr	r3, [pc, #132]	; (800c520 <vTaskNotifyGiveFromISR+0x110>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d11d      	bne.n	800c4dc <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7fe fac5 	bl	800aa34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ae:	4b1d      	ldr	r3, [pc, #116]	; (800c524 <vTaskNotifyGiveFromISR+0x114>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d903      	bls.n	800c4be <vTaskNotifyGiveFromISR+0xae>
 800c4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ba:	4a1a      	ldr	r2, [pc, #104]	; (800c524 <vTaskNotifyGiveFromISR+0x114>)
 800c4bc:	6013      	str	r3, [r2, #0]
 800c4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	4413      	add	r3, r2
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	4a17      	ldr	r2, [pc, #92]	; (800c528 <vTaskNotifyGiveFromISR+0x118>)
 800c4cc:	441a      	add	r2, r3
 800c4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d0:	3304      	adds	r3, #4
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	4610      	mov	r0, r2
 800c4d6:	f7fe fa52 	bl	800a97e <vListInsertEnd>
 800c4da:	e005      	b.n	800c4e8 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4de:	3318      	adds	r3, #24
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	4812      	ldr	r0, [pc, #72]	; (800c52c <vTaskNotifyGiveFromISR+0x11c>)
 800c4e4:	f7fe fa4b 	bl	800a97e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ec:	4b10      	ldr	r3, [pc, #64]	; (800c530 <vTaskNotifyGiveFromISR+0x120>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d909      	bls.n	800c50a <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d003      	beq.n	800c504 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	2201      	movs	r2, #1
 800c500:	601a      	str	r2, [r3, #0]
 800c502:	e002      	b.n	800c50a <vTaskNotifyGiveFromISR+0xfa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800c504:	4b0b      	ldr	r3, [pc, #44]	; (800c534 <vTaskNotifyGiveFromISR+0x124>)
 800c506:	2201      	movs	r2, #1
 800c508:	601a      	str	r2, [r3, #0]
 800c50a:	6a3b      	ldr	r3, [r7, #32]
 800c50c:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	f383 8811 	msr	BASEPRI, r3
}
 800c514:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c516:	bf00      	nop
 800c518:	3728      	adds	r7, #40	; 0x28
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	20000d6c 	.word	0x20000d6c
 800c524:	20000d4c 	.word	0x20000d4c
 800c528:	20000874 	.word	0x20000874
 800c52c:	20000d04 	.word	0x20000d04
 800c530:	20000870 	.word	0x20000870
 800c534:	20000d58 	.word	0x20000d58

0800c538 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c542:	4b21      	ldr	r3, [pc, #132]	; (800c5c8 <prvAddCurrentTaskToDelayedList+0x90>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c548:	4b20      	ldr	r3, [pc, #128]	; (800c5cc <prvAddCurrentTaskToDelayedList+0x94>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	3304      	adds	r3, #4
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fe fa70 	bl	800aa34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c55a:	d10a      	bne.n	800c572 <prvAddCurrentTaskToDelayedList+0x3a>
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d007      	beq.n	800c572 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c562:	4b1a      	ldr	r3, [pc, #104]	; (800c5cc <prvAddCurrentTaskToDelayedList+0x94>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	3304      	adds	r3, #4
 800c568:	4619      	mov	r1, r3
 800c56a:	4819      	ldr	r0, [pc, #100]	; (800c5d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c56c:	f7fe fa07 	bl	800a97e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c570:	e026      	b.n	800c5c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4413      	add	r3, r2
 800c578:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c57a:	4b14      	ldr	r3, [pc, #80]	; (800c5cc <prvAddCurrentTaskToDelayedList+0x94>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	429a      	cmp	r2, r3
 800c588:	d209      	bcs.n	800c59e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c58a:	4b12      	ldr	r3, [pc, #72]	; (800c5d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	4b0f      	ldr	r3, [pc, #60]	; (800c5cc <prvAddCurrentTaskToDelayedList+0x94>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	3304      	adds	r3, #4
 800c594:	4619      	mov	r1, r3
 800c596:	4610      	mov	r0, r2
 800c598:	f7fe fa14 	bl	800a9c4 <vListInsert>
}
 800c59c:	e010      	b.n	800c5c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c59e:	4b0e      	ldr	r3, [pc, #56]	; (800c5d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	4b0a      	ldr	r3, [pc, #40]	; (800c5cc <prvAddCurrentTaskToDelayedList+0x94>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	4610      	mov	r0, r2
 800c5ac:	f7fe fa0a 	bl	800a9c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5b0:	4b0a      	ldr	r3, [pc, #40]	; (800c5dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d202      	bcs.n	800c5c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c5ba:	4a08      	ldr	r2, [pc, #32]	; (800c5dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	6013      	str	r3, [r2, #0]
}
 800c5c0:	bf00      	nop
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	20000d48 	.word	0x20000d48
 800c5cc:	20000870 	.word	0x20000870
 800c5d0:	20000d30 	.word	0x20000d30
 800c5d4:	20000d00 	.word	0x20000d00
 800c5d8:	20000cfc 	.word	0x20000cfc
 800c5dc:	20000d64 	.word	0x20000d64

0800c5e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b08a      	sub	sp, #40	; 0x28
 800c5e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c5ea:	f000 facb 	bl	800cb84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c5ee:	4b1c      	ldr	r3, [pc, #112]	; (800c660 <xTimerCreateTimerTask+0x80>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d021      	beq.n	800c63a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c5fe:	1d3a      	adds	r2, r7, #4
 800c600:	f107 0108 	add.w	r1, r7, #8
 800c604:	f107 030c 	add.w	r3, r7, #12
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fe f973 	bl	800a8f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c60e:	6879      	ldr	r1, [r7, #4]
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	9202      	str	r2, [sp, #8]
 800c616:	9301      	str	r3, [sp, #4]
 800c618:	2302      	movs	r3, #2
 800c61a:	9300      	str	r3, [sp, #0]
 800c61c:	2300      	movs	r3, #0
 800c61e:	460a      	mov	r2, r1
 800c620:	4910      	ldr	r1, [pc, #64]	; (800c664 <xTimerCreateTimerTask+0x84>)
 800c622:	4811      	ldr	r0, [pc, #68]	; (800c668 <xTimerCreateTimerTask+0x88>)
 800c624:	f7fe ff52 	bl	800b4cc <xTaskCreateStatic>
 800c628:	4603      	mov	r3, r0
 800c62a:	4a10      	ldr	r2, [pc, #64]	; (800c66c <xTimerCreateTimerTask+0x8c>)
 800c62c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c62e:	4b0f      	ldr	r3, [pc, #60]	; (800c66c <xTimerCreateTimerTask+0x8c>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d001      	beq.n	800c63a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c636:	2301      	movs	r3, #1
 800c638:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d10a      	bne.n	800c656 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c644:	f383 8811 	msr	BASEPRI, r3
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	613b      	str	r3, [r7, #16]
}
 800c652:	bf00      	nop
 800c654:	e7fe      	b.n	800c654 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c656:	697b      	ldr	r3, [r7, #20]
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3718      	adds	r7, #24
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	20000da0 	.word	0x20000da0
 800c664:	0800e020 	.word	0x0800e020
 800c668:	0800c78d 	.word	0x0800c78d
 800c66c:	20000da4 	.word	0x20000da4

0800c670 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b08a      	sub	sp, #40	; 0x28
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	607a      	str	r2, [r7, #4]
 800c67c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c67e:	2300      	movs	r3, #0
 800c680:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d10a      	bne.n	800c69e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68c:	f383 8811 	msr	BASEPRI, r3
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	623b      	str	r3, [r7, #32]
}
 800c69a:	bf00      	nop
 800c69c:	e7fe      	b.n	800c69c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c69e:	4b1a      	ldr	r3, [pc, #104]	; (800c708 <xTimerGenericCommand+0x98>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d02a      	beq.n	800c6fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	2b05      	cmp	r3, #5
 800c6b6:	dc18      	bgt.n	800c6ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c6b8:	f7ff fdd6 	bl	800c268 <xTaskGetSchedulerState>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	d109      	bne.n	800c6d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c6c2:	4b11      	ldr	r3, [pc, #68]	; (800c708 <xTimerGenericCommand+0x98>)
 800c6c4:	6818      	ldr	r0, [r3, #0]
 800c6c6:	f107 0110 	add.w	r1, r7, #16
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ce:	f7fe fb1b 	bl	800ad08 <xQueueGenericSend>
 800c6d2:	6278      	str	r0, [r7, #36]	; 0x24
 800c6d4:	e012      	b.n	800c6fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c6d6:	4b0c      	ldr	r3, [pc, #48]	; (800c708 <xTimerGenericCommand+0x98>)
 800c6d8:	6818      	ldr	r0, [r3, #0]
 800c6da:	f107 0110 	add.w	r1, r7, #16
 800c6de:	2300      	movs	r3, #0
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f7fe fb11 	bl	800ad08 <xQueueGenericSend>
 800c6e6:	6278      	str	r0, [r7, #36]	; 0x24
 800c6e8:	e008      	b.n	800c6fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c6ea:	4b07      	ldr	r3, [pc, #28]	; (800c708 <xTimerGenericCommand+0x98>)
 800c6ec:	6818      	ldr	r0, [r3, #0]
 800c6ee:	f107 0110 	add.w	r1, r7, #16
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	683a      	ldr	r2, [r7, #0]
 800c6f6:	f7fe fc05 	bl	800af04 <xQueueGenericSendFromISR>
 800c6fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3728      	adds	r7, #40	; 0x28
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	20000da0 	.word	0x20000da0

0800c70c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b088      	sub	sp, #32
 800c710:	af02      	add	r7, sp, #8
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c716:	4b1c      	ldr	r3, [pc, #112]	; (800c788 <prvProcessExpiredTimer+0x7c>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	3304      	adds	r3, #4
 800c724:	4618      	mov	r0, r3
 800c726:	f7fe f985 	bl	800aa34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	69db      	ldr	r3, [r3, #28]
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d122      	bne.n	800c778 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	699a      	ldr	r2, [r3, #24]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	18d1      	adds	r1, r2, r3
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	683a      	ldr	r2, [r7, #0]
 800c73e:	6978      	ldr	r0, [r7, #20]
 800c740:	f000 f8c8 	bl	800c8d4 <prvInsertTimerInActiveList>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d016      	beq.n	800c778 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c74a:	2300      	movs	r3, #0
 800c74c:	9300      	str	r3, [sp, #0]
 800c74e:	2300      	movs	r3, #0
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	2100      	movs	r1, #0
 800c754:	6978      	ldr	r0, [r7, #20]
 800c756:	f7ff ff8b 	bl	800c670 <xTimerGenericCommand>
 800c75a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10a      	bne.n	800c778 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	60fb      	str	r3, [r7, #12]
}
 800c774:	bf00      	nop
 800c776:	e7fe      	b.n	800c776 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c77c:	6978      	ldr	r0, [r7, #20]
 800c77e:	4798      	blx	r3
}
 800c780:	bf00      	nop
 800c782:	3718      	adds	r7, #24
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	20000d98 	.word	0x20000d98

0800c78c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c794:	f107 0308 	add.w	r3, r7, #8
 800c798:	4618      	mov	r0, r3
 800c79a:	f000 f857 	bl	800c84c <prvGetNextExpireTime>
 800c79e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f000 f803 	bl	800c7b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c7aa:	f000 f8d5 	bl	800c958 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c7ae:	e7f1      	b.n	800c794 <prvTimerTask+0x8>

0800c7b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c7ba:	f7ff f937 	bl	800ba2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7be:	f107 0308 	add.w	r3, r7, #8
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f000 f866 	bl	800c894 <prvSampleTimeNow>
 800c7c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d130      	bne.n	800c832 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d10a      	bne.n	800c7ec <prvProcessTimerOrBlockTask+0x3c>
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d806      	bhi.n	800c7ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c7de:	f7ff f933 	bl	800ba48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c7e2:	68f9      	ldr	r1, [r7, #12]
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f7ff ff91 	bl	800c70c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c7ea:	e024      	b.n	800c836 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d008      	beq.n	800c804 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c7f2:	4b13      	ldr	r3, [pc, #76]	; (800c840 <prvProcessTimerOrBlockTask+0x90>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	bf0c      	ite	eq
 800c7fc:	2301      	moveq	r3, #1
 800c7fe:	2300      	movne	r3, #0
 800c800:	b2db      	uxtb	r3, r3
 800c802:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c804:	4b0f      	ldr	r3, [pc, #60]	; (800c844 <prvProcessTimerOrBlockTask+0x94>)
 800c806:	6818      	ldr	r0, [r3, #0]
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	1ad3      	subs	r3, r2, r3
 800c80e:	683a      	ldr	r2, [r7, #0]
 800c810:	4619      	mov	r1, r3
 800c812:	f7fe fe27 	bl	800b464 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c816:	f7ff f917 	bl	800ba48 <xTaskResumeAll>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10a      	bne.n	800c836 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c820:	4b09      	ldr	r3, [pc, #36]	; (800c848 <prvProcessTimerOrBlockTask+0x98>)
 800c822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c826:	601a      	str	r2, [r3, #0]
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	f3bf 8f6f 	isb	sy
}
 800c830:	e001      	b.n	800c836 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c832:	f7ff f909 	bl	800ba48 <xTaskResumeAll>
}
 800c836:	bf00      	nop
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	20000d9c 	.word	0x20000d9c
 800c844:	20000da0 	.word	0x20000da0
 800c848:	e000ed04 	.word	0xe000ed04

0800c84c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c854:	4b0e      	ldr	r3, [pc, #56]	; (800c890 <prvGetNextExpireTime+0x44>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	bf0c      	ite	eq
 800c85e:	2301      	moveq	r3, #1
 800c860:	2300      	movne	r3, #0
 800c862:	b2db      	uxtb	r3, r3
 800c864:	461a      	mov	r2, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d105      	bne.n	800c87e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c872:	4b07      	ldr	r3, [pc, #28]	; (800c890 <prvGetNextExpireTime+0x44>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	60fb      	str	r3, [r7, #12]
 800c87c:	e001      	b.n	800c882 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c87e:	2300      	movs	r3, #0
 800c880:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c882:	68fb      	ldr	r3, [r7, #12]
}
 800c884:	4618      	mov	r0, r3
 800c886:	3714      	adds	r7, #20
 800c888:	46bd      	mov	sp, r7
 800c88a:	bc80      	pop	{r7}
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	20000d98 	.word	0x20000d98

0800c894 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c89c:	f7ff f972 	bl	800bb84 <xTaskGetTickCount>
 800c8a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c8a2:	4b0b      	ldr	r3, [pc, #44]	; (800c8d0 <prvSampleTimeNow+0x3c>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d205      	bcs.n	800c8b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c8ac:	f000 f908 	bl	800cac0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	601a      	str	r2, [r3, #0]
 800c8b6:	e002      	b.n	800c8be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c8be:	4a04      	ldr	r2, [pc, #16]	; (800c8d0 <prvSampleTimeNow+0x3c>)
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	20000da8 	.word	0x20000da8

0800c8d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b086      	sub	sp, #24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
 800c8e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	68ba      	ldr	r2, [r7, #8]
 800c8ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	68fa      	ldr	r2, [r7, #12]
 800c8f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d812      	bhi.n	800c920 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	1ad2      	subs	r2, r2, r3
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	699b      	ldr	r3, [r3, #24]
 800c904:	429a      	cmp	r2, r3
 800c906:	d302      	bcc.n	800c90e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c908:	2301      	movs	r3, #1
 800c90a:	617b      	str	r3, [r7, #20]
 800c90c:	e01b      	b.n	800c946 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c90e:	4b10      	ldr	r3, [pc, #64]	; (800c950 <prvInsertTimerInActiveList+0x7c>)
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	3304      	adds	r3, #4
 800c916:	4619      	mov	r1, r3
 800c918:	4610      	mov	r0, r2
 800c91a:	f7fe f853 	bl	800a9c4 <vListInsert>
 800c91e:	e012      	b.n	800c946 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	429a      	cmp	r2, r3
 800c926:	d206      	bcs.n	800c936 <prvInsertTimerInActiveList+0x62>
 800c928:	68ba      	ldr	r2, [r7, #8]
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d302      	bcc.n	800c936 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c930:	2301      	movs	r3, #1
 800c932:	617b      	str	r3, [r7, #20]
 800c934:	e007      	b.n	800c946 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c936:	4b07      	ldr	r3, [pc, #28]	; (800c954 <prvInsertTimerInActiveList+0x80>)
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	3304      	adds	r3, #4
 800c93e:	4619      	mov	r1, r3
 800c940:	4610      	mov	r0, r2
 800c942:	f7fe f83f 	bl	800a9c4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c946:	697b      	ldr	r3, [r7, #20]
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3718      	adds	r7, #24
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	20000d9c 	.word	0x20000d9c
 800c954:	20000d98 	.word	0x20000d98

0800c958 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b08e      	sub	sp, #56	; 0x38
 800c95c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c95e:	e09d      	b.n	800ca9c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	da18      	bge.n	800c998 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c966:	1d3b      	adds	r3, r7, #4
 800c968:	3304      	adds	r3, #4
 800c96a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d10a      	bne.n	800c988 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c976:	f383 8811 	msr	BASEPRI, r3
 800c97a:	f3bf 8f6f 	isb	sy
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	61fb      	str	r3, [r7, #28]
}
 800c984:	bf00      	nop
 800c986:	e7fe      	b.n	800c986 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c98e:	6850      	ldr	r0, [r2, #4]
 800c990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c992:	6892      	ldr	r2, [r2, #8]
 800c994:	4611      	mov	r1, r2
 800c996:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	db7d      	blt.n	800ca9a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a4:	695b      	ldr	r3, [r3, #20]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d004      	beq.n	800c9b4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ac:	3304      	adds	r3, #4
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fe f840 	bl	800aa34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c9b4:	463b      	mov	r3, r7
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7ff ff6c 	bl	800c894 <prvSampleTimeNow>
 800c9bc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2b09      	cmp	r3, #9
 800c9c2:	d86b      	bhi.n	800ca9c <prvProcessReceivedCommands+0x144>
 800c9c4:	a201      	add	r2, pc, #4	; (adr r2, 800c9cc <prvProcessReceivedCommands+0x74>)
 800c9c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ca:	bf00      	nop
 800c9cc:	0800c9f5 	.word	0x0800c9f5
 800c9d0:	0800c9f5 	.word	0x0800c9f5
 800c9d4:	0800c9f5 	.word	0x0800c9f5
 800c9d8:	0800ca9d 	.word	0x0800ca9d
 800c9dc:	0800ca51 	.word	0x0800ca51
 800c9e0:	0800ca89 	.word	0x0800ca89
 800c9e4:	0800c9f5 	.word	0x0800c9f5
 800c9e8:	0800c9f5 	.word	0x0800c9f5
 800c9ec:	0800ca9d 	.word	0x0800ca9d
 800c9f0:	0800ca51 	.word	0x0800ca51
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f8:	699b      	ldr	r3, [r3, #24]
 800c9fa:	18d1      	adds	r1, r2, r3
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca02:	f7ff ff67 	bl	800c8d4 <prvInsertTimerInActiveList>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d047      	beq.n	800ca9c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca12:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ca14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca16:	69db      	ldr	r3, [r3, #28]
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d13f      	bne.n	800ca9c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca20:	699b      	ldr	r3, [r3, #24]
 800ca22:	441a      	add	r2, r3
 800ca24:	2300      	movs	r3, #0
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	2300      	movs	r3, #0
 800ca2a:	2100      	movs	r1, #0
 800ca2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca2e:	f7ff fe1f 	bl	800c670 <xTimerGenericCommand>
 800ca32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ca34:	6a3b      	ldr	r3, [r7, #32]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d130      	bne.n	800ca9c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800ca3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	61bb      	str	r3, [r7, #24]
}
 800ca4c:	bf00      	nop
 800ca4e:	e7fe      	b.n	800ca4e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ca50:	68ba      	ldr	r2, [r7, #8]
 800ca52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ca56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca58:	699b      	ldr	r3, [r3, #24]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d10a      	bne.n	800ca74 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	617b      	str	r3, [r7, #20]
}
 800ca70:	bf00      	nop
 800ca72:	e7fe      	b.n	800ca72 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ca74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca76:	699a      	ldr	r2, [r3, #24]
 800ca78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7a:	18d1      	adds	r1, r2, r3
 800ca7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca82:	f7ff ff27 	bl	800c8d4 <prvInsertTimerInActiveList>
					break;
 800ca86:	e009      	b.n	800ca9c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ca88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d104      	bne.n	800ca9c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800ca92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca94:	f000 fb6e 	bl	800d174 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ca98:	e000      	b.n	800ca9c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ca9a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca9c:	4b07      	ldr	r3, [pc, #28]	; (800cabc <prvProcessReceivedCommands+0x164>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	1d39      	adds	r1, r7, #4
 800caa2:	2200      	movs	r2, #0
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7fe fac5 	bl	800b034 <xQueueReceive>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	f47f af57 	bne.w	800c960 <prvProcessReceivedCommands+0x8>
	}
}
 800cab2:	bf00      	nop
 800cab4:	bf00      	nop
 800cab6:	3730      	adds	r7, #48	; 0x30
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	20000da0 	.word	0x20000da0

0800cac0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b088      	sub	sp, #32
 800cac4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cac6:	e045      	b.n	800cb54 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cac8:	4b2c      	ldr	r3, [pc, #176]	; (800cb7c <prvSwitchTimerLists+0xbc>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cad2:	4b2a      	ldr	r3, [pc, #168]	; (800cb7c <prvSwitchTimerLists+0xbc>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	3304      	adds	r3, #4
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fd ffa7 	bl	800aa34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	69db      	ldr	r3, [r3, #28]
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d12e      	bne.n	800cb54 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	699b      	ldr	r3, [r3, #24]
 800cafa:	693a      	ldr	r2, [r7, #16]
 800cafc:	4413      	add	r3, r2
 800cafe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d90e      	bls.n	800cb26 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb14:	4b19      	ldr	r3, [pc, #100]	; (800cb7c <prvSwitchTimerLists+0xbc>)
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	3304      	adds	r3, #4
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	4610      	mov	r0, r2
 800cb20:	f7fd ff50 	bl	800a9c4 <vListInsert>
 800cb24:	e016      	b.n	800cb54 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb26:	2300      	movs	r3, #0
 800cb28:	9300      	str	r3, [sp, #0]
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	693a      	ldr	r2, [r7, #16]
 800cb2e:	2100      	movs	r1, #0
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	f7ff fd9d 	bl	800c670 <xTimerGenericCommand>
 800cb36:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d10a      	bne.n	800cb54 <prvSwitchTimerLists+0x94>
	__asm volatile
 800cb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb42:	f383 8811 	msr	BASEPRI, r3
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	603b      	str	r3, [r7, #0]
}
 800cb50:	bf00      	nop
 800cb52:	e7fe      	b.n	800cb52 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb54:	4b09      	ldr	r3, [pc, #36]	; (800cb7c <prvSwitchTimerLists+0xbc>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d1b4      	bne.n	800cac8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cb5e:	4b07      	ldr	r3, [pc, #28]	; (800cb7c <prvSwitchTimerLists+0xbc>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cb64:	4b06      	ldr	r3, [pc, #24]	; (800cb80 <prvSwitchTimerLists+0xc0>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a04      	ldr	r2, [pc, #16]	; (800cb7c <prvSwitchTimerLists+0xbc>)
 800cb6a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cb6c:	4a04      	ldr	r2, [pc, #16]	; (800cb80 <prvSwitchTimerLists+0xc0>)
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	6013      	str	r3, [r2, #0]
}
 800cb72:	bf00      	nop
 800cb74:	3718      	adds	r7, #24
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	20000d98 	.word	0x20000d98
 800cb80:	20000d9c 	.word	0x20000d9c

0800cb84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cb8a:	f000 f92f 	bl	800cdec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cb8e:	4b15      	ldr	r3, [pc, #84]	; (800cbe4 <prvCheckForValidListAndQueue+0x60>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d120      	bne.n	800cbd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cb96:	4814      	ldr	r0, [pc, #80]	; (800cbe8 <prvCheckForValidListAndQueue+0x64>)
 800cb98:	f7fd fec6 	bl	800a928 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cb9c:	4813      	ldr	r0, [pc, #76]	; (800cbec <prvCheckForValidListAndQueue+0x68>)
 800cb9e:	f7fd fec3 	bl	800a928 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cba2:	4b13      	ldr	r3, [pc, #76]	; (800cbf0 <prvCheckForValidListAndQueue+0x6c>)
 800cba4:	4a10      	ldr	r2, [pc, #64]	; (800cbe8 <prvCheckForValidListAndQueue+0x64>)
 800cba6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cba8:	4b12      	ldr	r3, [pc, #72]	; (800cbf4 <prvCheckForValidListAndQueue+0x70>)
 800cbaa:	4a10      	ldr	r2, [pc, #64]	; (800cbec <prvCheckForValidListAndQueue+0x68>)
 800cbac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cbae:	2300      	movs	r3, #0
 800cbb0:	9300      	str	r3, [sp, #0]
 800cbb2:	4b11      	ldr	r3, [pc, #68]	; (800cbf8 <prvCheckForValidListAndQueue+0x74>)
 800cbb4:	4a11      	ldr	r2, [pc, #68]	; (800cbfc <prvCheckForValidListAndQueue+0x78>)
 800cbb6:	2110      	movs	r1, #16
 800cbb8:	200a      	movs	r0, #10
 800cbba:	f7fd ffcd 	bl	800ab58 <xQueueGenericCreateStatic>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	4a08      	ldr	r2, [pc, #32]	; (800cbe4 <prvCheckForValidListAndQueue+0x60>)
 800cbc2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cbc4:	4b07      	ldr	r3, [pc, #28]	; (800cbe4 <prvCheckForValidListAndQueue+0x60>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d005      	beq.n	800cbd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cbcc:	4b05      	ldr	r3, [pc, #20]	; (800cbe4 <prvCheckForValidListAndQueue+0x60>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	490b      	ldr	r1, [pc, #44]	; (800cc00 <prvCheckForValidListAndQueue+0x7c>)
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fe fc1e 	bl	800b414 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbd8:	f000 f938 	bl	800ce4c <vPortExitCritical>
}
 800cbdc:	bf00      	nop
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	20000da0 	.word	0x20000da0
 800cbe8:	20000d70 	.word	0x20000d70
 800cbec:	20000d84 	.word	0x20000d84
 800cbf0:	20000d98 	.word	0x20000d98
 800cbf4:	20000d9c 	.word	0x20000d9c
 800cbf8:	20000e4c 	.word	0x20000e4c
 800cbfc:	20000dac 	.word	0x20000dac
 800cc00:	0800e028 	.word	0x0800e028

0800cc04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc04:	b480      	push	{r7}
 800cc06:	b085      	sub	sp, #20
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	3b04      	subs	r3, #4
 800cc14:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cc1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	3b04      	subs	r3, #4
 800cc22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	f023 0201 	bic.w	r2, r3, #1
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	3b04      	subs	r3, #4
 800cc32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc34:	4a08      	ldr	r2, [pc, #32]	; (800cc58 <pxPortInitialiseStack+0x54>)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	3b14      	subs	r3, #20
 800cc3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	3b20      	subs	r3, #32
 800cc4a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3714      	adds	r7, #20
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bc80      	pop	{r7}
 800cc56:	4770      	bx	lr
 800cc58:	0800cc5d 	.word	0x0800cc5d

0800cc5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b085      	sub	sp, #20
 800cc60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800cc62:	2300      	movs	r3, #0
 800cc64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cc66:	4b12      	ldr	r3, [pc, #72]	; (800ccb0 <prvTaskExitError+0x54>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc6e:	d00a      	beq.n	800cc86 <prvTaskExitError+0x2a>
	__asm volatile
 800cc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc74:	f383 8811 	msr	BASEPRI, r3
 800cc78:	f3bf 8f6f 	isb	sy
 800cc7c:	f3bf 8f4f 	dsb	sy
 800cc80:	60fb      	str	r3, [r7, #12]
}
 800cc82:	bf00      	nop
 800cc84:	e7fe      	b.n	800cc84 <prvTaskExitError+0x28>
	__asm volatile
 800cc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8a:	f383 8811 	msr	BASEPRI, r3
 800cc8e:	f3bf 8f6f 	isb	sy
 800cc92:	f3bf 8f4f 	dsb	sy
 800cc96:	60bb      	str	r3, [r7, #8]
}
 800cc98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc9a:	bf00      	nop
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d0fc      	beq.n	800cc9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cca2:	bf00      	nop
 800cca4:	bf00      	nop
 800cca6:	3714      	adds	r7, #20
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bc80      	pop	{r7}
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	2000012c 	.word	0x2000012c
	...

0800ccc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ccc0:	4b07      	ldr	r3, [pc, #28]	; (800cce0 <pxCurrentTCBConst2>)
 800ccc2:	6819      	ldr	r1, [r3, #0]
 800ccc4:	6808      	ldr	r0, [r1, #0]
 800ccc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ccca:	f380 8809 	msr	PSP, r0
 800ccce:	f3bf 8f6f 	isb	sy
 800ccd2:	f04f 0000 	mov.w	r0, #0
 800ccd6:	f380 8811 	msr	BASEPRI, r0
 800ccda:	f04e 0e0d 	orr.w	lr, lr, #13
 800ccde:	4770      	bx	lr

0800cce0 <pxCurrentTCBConst2>:
 800cce0:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cce4:	bf00      	nop
 800cce6:	bf00      	nop

0800cce8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800cce8:	4806      	ldr	r0, [pc, #24]	; (800cd04 <prvPortStartFirstTask+0x1c>)
 800ccea:	6800      	ldr	r0, [r0, #0]
 800ccec:	6800      	ldr	r0, [r0, #0]
 800ccee:	f380 8808 	msr	MSP, r0
 800ccf2:	b662      	cpsie	i
 800ccf4:	b661      	cpsie	f
 800ccf6:	f3bf 8f4f 	dsb	sy
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	df00      	svc	0
 800cd00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd02:	bf00      	nop
 800cd04:	e000ed08 	.word	0xe000ed08

0800cd08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd0e:	4b32      	ldr	r3, [pc, #200]	; (800cdd8 <xPortStartScheduler+0xd0>)
 800cd10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	22ff      	movs	r2, #255	; 0xff
 800cd1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd28:	78fb      	ldrb	r3, [r7, #3]
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cd30:	b2da      	uxtb	r2, r3
 800cd32:	4b2a      	ldr	r3, [pc, #168]	; (800cddc <xPortStartScheduler+0xd4>)
 800cd34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cd36:	4b2a      	ldr	r3, [pc, #168]	; (800cde0 <xPortStartScheduler+0xd8>)
 800cd38:	2207      	movs	r2, #7
 800cd3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd3c:	e009      	b.n	800cd52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cd3e:	4b28      	ldr	r3, [pc, #160]	; (800cde0 <xPortStartScheduler+0xd8>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	3b01      	subs	r3, #1
 800cd44:	4a26      	ldr	r2, [pc, #152]	; (800cde0 <xPortStartScheduler+0xd8>)
 800cd46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd48:	78fb      	ldrb	r3, [r7, #3]
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	005b      	lsls	r3, r3, #1
 800cd4e:	b2db      	uxtb	r3, r3
 800cd50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd52:	78fb      	ldrb	r3, [r7, #3]
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd5a:	2b80      	cmp	r3, #128	; 0x80
 800cd5c:	d0ef      	beq.n	800cd3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cd5e:	4b20      	ldr	r3, [pc, #128]	; (800cde0 <xPortStartScheduler+0xd8>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f1c3 0307 	rsb	r3, r3, #7
 800cd66:	2b04      	cmp	r3, #4
 800cd68:	d00a      	beq.n	800cd80 <xPortStartScheduler+0x78>
	__asm volatile
 800cd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6e:	f383 8811 	msr	BASEPRI, r3
 800cd72:	f3bf 8f6f 	isb	sy
 800cd76:	f3bf 8f4f 	dsb	sy
 800cd7a:	60bb      	str	r3, [r7, #8]
}
 800cd7c:	bf00      	nop
 800cd7e:	e7fe      	b.n	800cd7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd80:	4b17      	ldr	r3, [pc, #92]	; (800cde0 <xPortStartScheduler+0xd8>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	021b      	lsls	r3, r3, #8
 800cd86:	4a16      	ldr	r2, [pc, #88]	; (800cde0 <xPortStartScheduler+0xd8>)
 800cd88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd8a:	4b15      	ldr	r3, [pc, #84]	; (800cde0 <xPortStartScheduler+0xd8>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd92:	4a13      	ldr	r2, [pc, #76]	; (800cde0 <xPortStartScheduler+0xd8>)
 800cd94:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	b2da      	uxtb	r2, r3
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd9e:	4b11      	ldr	r3, [pc, #68]	; (800cde4 <xPortStartScheduler+0xdc>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4a10      	ldr	r2, [pc, #64]	; (800cde4 <xPortStartScheduler+0xdc>)
 800cda4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cda8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cdaa:	4b0e      	ldr	r3, [pc, #56]	; (800cde4 <xPortStartScheduler+0xdc>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	4a0d      	ldr	r2, [pc, #52]	; (800cde4 <xPortStartScheduler+0xdc>)
 800cdb0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cdb4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cdb6:	f000 f8b9 	bl	800cf2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cdba:	4b0b      	ldr	r3, [pc, #44]	; (800cde8 <xPortStartScheduler+0xe0>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cdc0:	f7ff ff92 	bl	800cce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cdc4:	f7fe ffaa 	bl	800bd1c <vTaskSwitchContext>
	prvTaskExitError();
 800cdc8:	f7ff ff48 	bl	800cc5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	e000e400 	.word	0xe000e400
 800cddc:	20000e9c 	.word	0x20000e9c
 800cde0:	20000ea0 	.word	0x20000ea0
 800cde4:	e000ed20 	.word	0xe000ed20
 800cde8:	2000012c 	.word	0x2000012c

0800cdec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cdec:	b480      	push	{r7}
 800cdee:	b083      	sub	sp, #12
 800cdf0:	af00      	add	r7, sp, #0
	__asm volatile
 800cdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf6:	f383 8811 	msr	BASEPRI, r3
 800cdfa:	f3bf 8f6f 	isb	sy
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	607b      	str	r3, [r7, #4]
}
 800ce04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce06:	4b0f      	ldr	r3, [pc, #60]	; (800ce44 <vPortEnterCritical+0x58>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	4a0d      	ldr	r2, [pc, #52]	; (800ce44 <vPortEnterCritical+0x58>)
 800ce0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ce10:	4b0c      	ldr	r3, [pc, #48]	; (800ce44 <vPortEnterCritical+0x58>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d10f      	bne.n	800ce38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce18:	4b0b      	ldr	r3, [pc, #44]	; (800ce48 <vPortEnterCritical+0x5c>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00a      	beq.n	800ce38 <vPortEnterCritical+0x4c>
	__asm volatile
 800ce22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce26:	f383 8811 	msr	BASEPRI, r3
 800ce2a:	f3bf 8f6f 	isb	sy
 800ce2e:	f3bf 8f4f 	dsb	sy
 800ce32:	603b      	str	r3, [r7, #0]
}
 800ce34:	bf00      	nop
 800ce36:	e7fe      	b.n	800ce36 <vPortEnterCritical+0x4a>
	}
}
 800ce38:	bf00      	nop
 800ce3a:	370c      	adds	r7, #12
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bc80      	pop	{r7}
 800ce40:	4770      	bx	lr
 800ce42:	bf00      	nop
 800ce44:	2000012c 	.word	0x2000012c
 800ce48:	e000ed04 	.word	0xe000ed04

0800ce4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce52:	4b11      	ldr	r3, [pc, #68]	; (800ce98 <vPortExitCritical+0x4c>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d10a      	bne.n	800ce70 <vPortExitCritical+0x24>
	__asm volatile
 800ce5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5e:	f383 8811 	msr	BASEPRI, r3
 800ce62:	f3bf 8f6f 	isb	sy
 800ce66:	f3bf 8f4f 	dsb	sy
 800ce6a:	607b      	str	r3, [r7, #4]
}
 800ce6c:	bf00      	nop
 800ce6e:	e7fe      	b.n	800ce6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce70:	4b09      	ldr	r3, [pc, #36]	; (800ce98 <vPortExitCritical+0x4c>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	3b01      	subs	r3, #1
 800ce76:	4a08      	ldr	r2, [pc, #32]	; (800ce98 <vPortExitCritical+0x4c>)
 800ce78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce7a:	4b07      	ldr	r3, [pc, #28]	; (800ce98 <vPortExitCritical+0x4c>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d105      	bne.n	800ce8e <vPortExitCritical+0x42>
 800ce82:	2300      	movs	r3, #0
 800ce84:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	f383 8811 	msr	BASEPRI, r3
}
 800ce8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce8e:	bf00      	nop
 800ce90:	370c      	adds	r7, #12
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bc80      	pop	{r7}
 800ce96:	4770      	bx	lr
 800ce98:	2000012c 	.word	0x2000012c
 800ce9c:	00000000 	.word	0x00000000

0800cea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cea0:	f3ef 8009 	mrs	r0, PSP
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	4b0d      	ldr	r3, [pc, #52]	; (800cee0 <pxCurrentTCBConst>)
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ceb0:	6010      	str	r0, [r2, #0]
 800ceb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ceb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ceba:	f380 8811 	msr	BASEPRI, r0
 800cebe:	f7fe ff2d 	bl	800bd1c <vTaskSwitchContext>
 800cec2:	f04f 0000 	mov.w	r0, #0
 800cec6:	f380 8811 	msr	BASEPRI, r0
 800ceca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cece:	6819      	ldr	r1, [r3, #0]
 800ced0:	6808      	ldr	r0, [r1, #0]
 800ced2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ced6:	f380 8809 	msr	PSP, r0
 800ceda:	f3bf 8f6f 	isb	sy
 800cede:	4770      	bx	lr

0800cee0 <pxCurrentTCBConst>:
 800cee0:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cee4:	bf00      	nop
 800cee6:	bf00      	nop

0800cee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
	__asm volatile
 800ceee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef2:	f383 8811 	msr	BASEPRI, r3
 800cef6:	f3bf 8f6f 	isb	sy
 800cefa:	f3bf 8f4f 	dsb	sy
 800cefe:	607b      	str	r3, [r7, #4]
}
 800cf00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf02:	f7fe fe4d 	bl	800bba0 <xTaskIncrementTick>
 800cf06:	4603      	mov	r3, r0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d003      	beq.n	800cf14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf0c:	4b06      	ldr	r3, [pc, #24]	; (800cf28 <SysTick_Handler+0x40>)
 800cf0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf12:	601a      	str	r2, [r3, #0]
 800cf14:	2300      	movs	r3, #0
 800cf16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	f383 8811 	msr	BASEPRI, r3
}
 800cf1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf20:	bf00      	nop
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	e000ed04 	.word	0xe000ed04

0800cf2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf30:	4b0a      	ldr	r3, [pc, #40]	; (800cf5c <vPortSetupTimerInterrupt+0x30>)
 800cf32:	2200      	movs	r2, #0
 800cf34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf36:	4b0a      	ldr	r3, [pc, #40]	; (800cf60 <vPortSetupTimerInterrupt+0x34>)
 800cf38:	2200      	movs	r2, #0
 800cf3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf3c:	4b09      	ldr	r3, [pc, #36]	; (800cf64 <vPortSetupTimerInterrupt+0x38>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a09      	ldr	r2, [pc, #36]	; (800cf68 <vPortSetupTimerInterrupt+0x3c>)
 800cf42:	fba2 2303 	umull	r2, r3, r2, r3
 800cf46:	099b      	lsrs	r3, r3, #6
 800cf48:	4a08      	ldr	r2, [pc, #32]	; (800cf6c <vPortSetupTimerInterrupt+0x40>)
 800cf4a:	3b01      	subs	r3, #1
 800cf4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf4e:	4b03      	ldr	r3, [pc, #12]	; (800cf5c <vPortSetupTimerInterrupt+0x30>)
 800cf50:	2207      	movs	r2, #7
 800cf52:	601a      	str	r2, [r3, #0]
}
 800cf54:	bf00      	nop
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bc80      	pop	{r7}
 800cf5a:	4770      	bx	lr
 800cf5c:	e000e010 	.word	0xe000e010
 800cf60:	e000e018 	.word	0xe000e018
 800cf64:	20000010 	.word	0x20000010
 800cf68:	10624dd3 	.word	0x10624dd3
 800cf6c:	e000e014 	.word	0xe000e014

0800cf70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf70:	b480      	push	{r7}
 800cf72:	b085      	sub	sp, #20
 800cf74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf76:	f3ef 8305 	mrs	r3, IPSR
 800cf7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2b0f      	cmp	r3, #15
 800cf80:	d914      	bls.n	800cfac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf82:	4a16      	ldr	r2, [pc, #88]	; (800cfdc <vPortValidateInterruptPriority+0x6c>)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	4413      	add	r3, r2
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf8c:	4b14      	ldr	r3, [pc, #80]	; (800cfe0 <vPortValidateInterruptPriority+0x70>)
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	7afa      	ldrb	r2, [r7, #11]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d20a      	bcs.n	800cfac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9a:	f383 8811 	msr	BASEPRI, r3
 800cf9e:	f3bf 8f6f 	isb	sy
 800cfa2:	f3bf 8f4f 	dsb	sy
 800cfa6:	607b      	str	r3, [r7, #4]
}
 800cfa8:	bf00      	nop
 800cfaa:	e7fe      	b.n	800cfaa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cfac:	4b0d      	ldr	r3, [pc, #52]	; (800cfe4 <vPortValidateInterruptPriority+0x74>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cfb4:	4b0c      	ldr	r3, [pc, #48]	; (800cfe8 <vPortValidateInterruptPriority+0x78>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d90a      	bls.n	800cfd2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc0:	f383 8811 	msr	BASEPRI, r3
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	603b      	str	r3, [r7, #0]
}
 800cfce:	bf00      	nop
 800cfd0:	e7fe      	b.n	800cfd0 <vPortValidateInterruptPriority+0x60>
	}
 800cfd2:	bf00      	nop
 800cfd4:	3714      	adds	r7, #20
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bc80      	pop	{r7}
 800cfda:	4770      	bx	lr
 800cfdc:	e000e3f0 	.word	0xe000e3f0
 800cfe0:	20000e9c 	.word	0x20000e9c
 800cfe4:	e000ed0c 	.word	0xe000ed0c
 800cfe8:	20000ea0 	.word	0x20000ea0

0800cfec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b08a      	sub	sp, #40	; 0x28
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cff4:	2300      	movs	r3, #0
 800cff6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cff8:	f7fe fd18 	bl	800ba2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cffc:	4b58      	ldr	r3, [pc, #352]	; (800d160 <pvPortMalloc+0x174>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d101      	bne.n	800d008 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d004:	f000 f910 	bl	800d228 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d008:	4b56      	ldr	r3, [pc, #344]	; (800d164 <pvPortMalloc+0x178>)
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	4013      	ands	r3, r2
 800d010:	2b00      	cmp	r3, #0
 800d012:	f040 808e 	bne.w	800d132 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d01d      	beq.n	800d058 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d01c:	2208      	movs	r2, #8
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	4413      	add	r3, r2
 800d022:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f003 0307 	and.w	r3, r3, #7
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d014      	beq.n	800d058 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f023 0307 	bic.w	r3, r3, #7
 800d034:	3308      	adds	r3, #8
 800d036:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f003 0307 	and.w	r3, r3, #7
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d00a      	beq.n	800d058 <pvPortMalloc+0x6c>
	__asm volatile
 800d042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d046:	f383 8811 	msr	BASEPRI, r3
 800d04a:	f3bf 8f6f 	isb	sy
 800d04e:	f3bf 8f4f 	dsb	sy
 800d052:	617b      	str	r3, [r7, #20]
}
 800d054:	bf00      	nop
 800d056:	e7fe      	b.n	800d056 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d069      	beq.n	800d132 <pvPortMalloc+0x146>
 800d05e:	4b42      	ldr	r3, [pc, #264]	; (800d168 <pvPortMalloc+0x17c>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	429a      	cmp	r2, r3
 800d066:	d864      	bhi.n	800d132 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d068:	4b40      	ldr	r3, [pc, #256]	; (800d16c <pvPortMalloc+0x180>)
 800d06a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d06c:	4b3f      	ldr	r3, [pc, #252]	; (800d16c <pvPortMalloc+0x180>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d072:	e004      	b.n	800d07e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	429a      	cmp	r2, r3
 800d086:	d903      	bls.n	800d090 <pvPortMalloc+0xa4>
 800d088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d1f1      	bne.n	800d074 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d090:	4b33      	ldr	r3, [pc, #204]	; (800d160 <pvPortMalloc+0x174>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d096:	429a      	cmp	r2, r3
 800d098:	d04b      	beq.n	800d132 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d09a:	6a3b      	ldr	r3, [r7, #32]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2208      	movs	r2, #8
 800d0a0:	4413      	add	r3, r2
 800d0a2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	6a3b      	ldr	r3, [r7, #32]
 800d0aa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ae:	685a      	ldr	r2, [r3, #4]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	1ad2      	subs	r2, r2, r3
 800d0b4:	2308      	movs	r3, #8
 800d0b6:	005b      	lsls	r3, r3, #1
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d91f      	bls.n	800d0fc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	f003 0307 	and.w	r3, r3, #7
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00a      	beq.n	800d0e4 <pvPortMalloc+0xf8>
	__asm volatile
 800d0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d2:	f383 8811 	msr	BASEPRI, r3
 800d0d6:	f3bf 8f6f 	isb	sy
 800d0da:	f3bf 8f4f 	dsb	sy
 800d0de:	613b      	str	r3, [r7, #16]
}
 800d0e0:	bf00      	nop
 800d0e2:	e7fe      	b.n	800d0e2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e6:	685a      	ldr	r2, [r3, #4]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	1ad2      	subs	r2, r2, r3
 800d0ec:	69bb      	ldr	r3, [r7, #24]
 800d0ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d0f6:	69b8      	ldr	r0, [r7, #24]
 800d0f8:	f000 f8f8 	bl	800d2ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d0fc:	4b1a      	ldr	r3, [pc, #104]	; (800d168 <pvPortMalloc+0x17c>)
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	1ad3      	subs	r3, r2, r3
 800d106:	4a18      	ldr	r2, [pc, #96]	; (800d168 <pvPortMalloc+0x17c>)
 800d108:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d10a:	4b17      	ldr	r3, [pc, #92]	; (800d168 <pvPortMalloc+0x17c>)
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	4b18      	ldr	r3, [pc, #96]	; (800d170 <pvPortMalloc+0x184>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	429a      	cmp	r2, r3
 800d114:	d203      	bcs.n	800d11e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d116:	4b14      	ldr	r3, [pc, #80]	; (800d168 <pvPortMalloc+0x17c>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4a15      	ldr	r2, [pc, #84]	; (800d170 <pvPortMalloc+0x184>)
 800d11c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d120:	685a      	ldr	r2, [r3, #4]
 800d122:	4b10      	ldr	r3, [pc, #64]	; (800d164 <pvPortMalloc+0x178>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	431a      	orrs	r2, r3
 800d128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12e:	2200      	movs	r2, #0
 800d130:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d132:	f7fe fc89 	bl	800ba48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	f003 0307 	and.w	r3, r3, #7
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d00a      	beq.n	800d156 <pvPortMalloc+0x16a>
	__asm volatile
 800d140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d144:	f383 8811 	msr	BASEPRI, r3
 800d148:	f3bf 8f6f 	isb	sy
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	60fb      	str	r3, [r7, #12]
}
 800d152:	bf00      	nop
 800d154:	e7fe      	b.n	800d154 <pvPortMalloc+0x168>
	return pvReturn;
 800d156:	69fb      	ldr	r3, [r7, #28]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3728      	adds	r7, #40	; 0x28
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	20002248 	.word	0x20002248
 800d164:	20002254 	.word	0x20002254
 800d168:	2000224c 	.word	0x2000224c
 800d16c:	20002240 	.word	0x20002240
 800d170:	20002250 	.word	0x20002250

0800d174 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b086      	sub	sp, #24
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d048      	beq.n	800d218 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d186:	2308      	movs	r3, #8
 800d188:	425b      	negs	r3, r3
 800d18a:	697a      	ldr	r2, [r7, #20]
 800d18c:	4413      	add	r3, r2
 800d18e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	685a      	ldr	r2, [r3, #4]
 800d198:	4b21      	ldr	r3, [pc, #132]	; (800d220 <vPortFree+0xac>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4013      	ands	r3, r2
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d10a      	bne.n	800d1b8 <vPortFree+0x44>
	__asm volatile
 800d1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a6:	f383 8811 	msr	BASEPRI, r3
 800d1aa:	f3bf 8f6f 	isb	sy
 800d1ae:	f3bf 8f4f 	dsb	sy
 800d1b2:	60fb      	str	r3, [r7, #12]
}
 800d1b4:	bf00      	nop
 800d1b6:	e7fe      	b.n	800d1b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00a      	beq.n	800d1d6 <vPortFree+0x62>
	__asm volatile
 800d1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c4:	f383 8811 	msr	BASEPRI, r3
 800d1c8:	f3bf 8f6f 	isb	sy
 800d1cc:	f3bf 8f4f 	dsb	sy
 800d1d0:	60bb      	str	r3, [r7, #8]
}
 800d1d2:	bf00      	nop
 800d1d4:	e7fe      	b.n	800d1d4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	685a      	ldr	r2, [r3, #4]
 800d1da:	4b11      	ldr	r3, [pc, #68]	; (800d220 <vPortFree+0xac>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4013      	ands	r3, r2
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d019      	beq.n	800d218 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d115      	bne.n	800d218 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	685a      	ldr	r2, [r3, #4]
 800d1f0:	4b0b      	ldr	r3, [pc, #44]	; (800d220 <vPortFree+0xac>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	43db      	mvns	r3, r3
 800d1f6:	401a      	ands	r2, r3
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d1fc:	f7fe fc16 	bl	800ba2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	685a      	ldr	r2, [r3, #4]
 800d204:	4b07      	ldr	r3, [pc, #28]	; (800d224 <vPortFree+0xb0>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4413      	add	r3, r2
 800d20a:	4a06      	ldr	r2, [pc, #24]	; (800d224 <vPortFree+0xb0>)
 800d20c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d20e:	6938      	ldr	r0, [r7, #16]
 800d210:	f000 f86c 	bl	800d2ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d214:	f7fe fc18 	bl	800ba48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d218:	bf00      	nop
 800d21a:	3718      	adds	r7, #24
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	20002254 	.word	0x20002254
 800d224:	2000224c 	.word	0x2000224c

0800d228 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d22e:	f241 339c 	movw	r3, #5020	; 0x139c
 800d232:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d234:	4b27      	ldr	r3, [pc, #156]	; (800d2d4 <prvHeapInit+0xac>)
 800d236:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f003 0307 	and.w	r3, r3, #7
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00c      	beq.n	800d25c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	3307      	adds	r3, #7
 800d246:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f023 0307 	bic.w	r3, r3, #7
 800d24e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d250:	68ba      	ldr	r2, [r7, #8]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	1ad3      	subs	r3, r2, r3
 800d256:	4a1f      	ldr	r2, [pc, #124]	; (800d2d4 <prvHeapInit+0xac>)
 800d258:	4413      	add	r3, r2
 800d25a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d260:	4a1d      	ldr	r2, [pc, #116]	; (800d2d8 <prvHeapInit+0xb0>)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d266:	4b1c      	ldr	r3, [pc, #112]	; (800d2d8 <prvHeapInit+0xb0>)
 800d268:	2200      	movs	r2, #0
 800d26a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	68ba      	ldr	r2, [r7, #8]
 800d270:	4413      	add	r3, r2
 800d272:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d274:	2208      	movs	r2, #8
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	1a9b      	subs	r3, r3, r2
 800d27a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f023 0307 	bic.w	r3, r3, #7
 800d282:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	4a15      	ldr	r2, [pc, #84]	; (800d2dc <prvHeapInit+0xb4>)
 800d288:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d28a:	4b14      	ldr	r3, [pc, #80]	; (800d2dc <prvHeapInit+0xb4>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	2200      	movs	r2, #0
 800d290:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d292:	4b12      	ldr	r3, [pc, #72]	; (800d2dc <prvHeapInit+0xb4>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	2200      	movs	r2, #0
 800d298:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	68fa      	ldr	r2, [r7, #12]
 800d2a2:	1ad2      	subs	r2, r2, r3
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d2a8:	4b0c      	ldr	r3, [pc, #48]	; (800d2dc <prvHeapInit+0xb4>)
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	4a0a      	ldr	r2, [pc, #40]	; (800d2e0 <prvHeapInit+0xb8>)
 800d2b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	4a09      	ldr	r2, [pc, #36]	; (800d2e4 <prvHeapInit+0xbc>)
 800d2be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d2c0:	4b09      	ldr	r3, [pc, #36]	; (800d2e8 <prvHeapInit+0xc0>)
 800d2c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d2c6:	601a      	str	r2, [r3, #0]
}
 800d2c8:	bf00      	nop
 800d2ca:	3714      	adds	r7, #20
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bc80      	pop	{r7}
 800d2d0:	4770      	bx	lr
 800d2d2:	bf00      	nop
 800d2d4:	20000ea4 	.word	0x20000ea4
 800d2d8:	20002240 	.word	0x20002240
 800d2dc:	20002248 	.word	0x20002248
 800d2e0:	20002250 	.word	0x20002250
 800d2e4:	2000224c 	.word	0x2000224c
 800d2e8:	20002254 	.word	0x20002254

0800d2ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2f4:	4b27      	ldr	r3, [pc, #156]	; (800d394 <prvInsertBlockIntoFreeList+0xa8>)
 800d2f6:	60fb      	str	r3, [r7, #12]
 800d2f8:	e002      	b.n	800d300 <prvInsertBlockIntoFreeList+0x14>
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	60fb      	str	r3, [r7, #12]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	429a      	cmp	r2, r3
 800d308:	d8f7      	bhi.n	800d2fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	68ba      	ldr	r2, [r7, #8]
 800d314:	4413      	add	r3, r2
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d108      	bne.n	800d32e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	685a      	ldr	r2, [r3, #4]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	441a      	add	r2, r3
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	68ba      	ldr	r2, [r7, #8]
 800d338:	441a      	add	r2, r3
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d118      	bne.n	800d374 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681a      	ldr	r2, [r3, #0]
 800d346:	4b14      	ldr	r3, [pc, #80]	; (800d398 <prvInsertBlockIntoFreeList+0xac>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d00d      	beq.n	800d36a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	685a      	ldr	r2, [r3, #4]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	441a      	add	r2, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	601a      	str	r2, [r3, #0]
 800d368:	e008      	b.n	800d37c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d36a:	4b0b      	ldr	r3, [pc, #44]	; (800d398 <prvInsertBlockIntoFreeList+0xac>)
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	601a      	str	r2, [r3, #0]
 800d372:	e003      	b.n	800d37c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d37c:	68fa      	ldr	r2, [r7, #12]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	429a      	cmp	r2, r3
 800d382:	d002      	beq.n	800d38a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d38a:	bf00      	nop
 800d38c:	3714      	adds	r7, #20
 800d38e:	46bd      	mov	sp, r7
 800d390:	bc80      	pop	{r7}
 800d392:	4770      	bx	lr
 800d394:	20002240 	.word	0x20002240
 800d398:	20002248 	.word	0x20002248

0800d39c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	4912      	ldr	r1, [pc, #72]	; (800d3ec <MX_USB_DEVICE_Init+0x50>)
 800d3a4:	4812      	ldr	r0, [pc, #72]	; (800d3f0 <MX_USB_DEVICE_Init+0x54>)
 800d3a6:	f7fc f82e 	bl	8009406 <USBD_Init>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d001      	beq.n	800d3b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d3b0:	f7f3 fd06 	bl	8000dc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d3b4:	490f      	ldr	r1, [pc, #60]	; (800d3f4 <MX_USB_DEVICE_Init+0x58>)
 800d3b6:	480e      	ldr	r0, [pc, #56]	; (800d3f0 <MX_USB_DEVICE_Init+0x54>)
 800d3b8:	f7fc f850 	bl	800945c <USBD_RegisterClass>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d001      	beq.n	800d3c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d3c2:	f7f3 fcfd 	bl	8000dc0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d3c6:	490c      	ldr	r1, [pc, #48]	; (800d3f8 <MX_USB_DEVICE_Init+0x5c>)
 800d3c8:	4809      	ldr	r0, [pc, #36]	; (800d3f0 <MX_USB_DEVICE_Init+0x54>)
 800d3ca:	f7fb ff81 	bl	80092d0 <USBD_CDC_RegisterInterface>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d001      	beq.n	800d3d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d3d4:	f7f3 fcf4 	bl	8000dc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d3d8:	4805      	ldr	r0, [pc, #20]	; (800d3f0 <MX_USB_DEVICE_Init+0x54>)
 800d3da:	f7fc f858 	bl	800948e <USBD_Start>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d001      	beq.n	800d3e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d3e4:	f7f3 fcec 	bl	8000dc0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d3e8:	bf00      	nop
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	20000140 	.word	0x20000140
 800d3f0:	200026a0 	.word	0x200026a0
 800d3f4:	20000028 	.word	0x20000028
 800d3f8:	20000130 	.word	0x20000130

0800d3fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d400:	2200      	movs	r2, #0
 800d402:	4905      	ldr	r1, [pc, #20]	; (800d418 <CDC_Init_FS+0x1c>)
 800d404:	4805      	ldr	r0, [pc, #20]	; (800d41c <CDC_Init_FS+0x20>)
 800d406:	f7fb ff79 	bl	80092fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d40a:	4905      	ldr	r1, [pc, #20]	; (800d420 <CDC_Init_FS+0x24>)
 800d40c:	4803      	ldr	r0, [pc, #12]	; (800d41c <CDC_Init_FS+0x20>)
 800d40e:	f7fb ff8e 	bl	800932e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d412:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d414:	4618      	mov	r0, r3
 800d416:	bd80      	pop	{r7, pc}
 800d418:	20002d4c 	.word	0x20002d4c
 800d41c:	200026a0 	.word	0x200026a0
 800d420:	20002964 	.word	0x20002964

0800d424 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d424:	b480      	push	{r7}
 800d426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d428:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bc80      	pop	{r7}
 800d430:	4770      	bx	lr
	...

0800d434 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	4603      	mov	r3, r0
 800d43c:	6039      	str	r1, [r7, #0]
 800d43e:	71fb      	strb	r3, [r7, #7]
 800d440:	4613      	mov	r3, r2
 800d442:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d444:	79fb      	ldrb	r3, [r7, #7]
 800d446:	2b23      	cmp	r3, #35	; 0x23
 800d448:	d84a      	bhi.n	800d4e0 <CDC_Control_FS+0xac>
 800d44a:	a201      	add	r2, pc, #4	; (adr r2, 800d450 <CDC_Control_FS+0x1c>)
 800d44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d450:	0800d4e1 	.word	0x0800d4e1
 800d454:	0800d4e1 	.word	0x0800d4e1
 800d458:	0800d4e1 	.word	0x0800d4e1
 800d45c:	0800d4e1 	.word	0x0800d4e1
 800d460:	0800d4e1 	.word	0x0800d4e1
 800d464:	0800d4e1 	.word	0x0800d4e1
 800d468:	0800d4e1 	.word	0x0800d4e1
 800d46c:	0800d4e1 	.word	0x0800d4e1
 800d470:	0800d4e1 	.word	0x0800d4e1
 800d474:	0800d4e1 	.word	0x0800d4e1
 800d478:	0800d4e1 	.word	0x0800d4e1
 800d47c:	0800d4e1 	.word	0x0800d4e1
 800d480:	0800d4e1 	.word	0x0800d4e1
 800d484:	0800d4e1 	.word	0x0800d4e1
 800d488:	0800d4e1 	.word	0x0800d4e1
 800d48c:	0800d4e1 	.word	0x0800d4e1
 800d490:	0800d4e1 	.word	0x0800d4e1
 800d494:	0800d4e1 	.word	0x0800d4e1
 800d498:	0800d4e1 	.word	0x0800d4e1
 800d49c:	0800d4e1 	.word	0x0800d4e1
 800d4a0:	0800d4e1 	.word	0x0800d4e1
 800d4a4:	0800d4e1 	.word	0x0800d4e1
 800d4a8:	0800d4e1 	.word	0x0800d4e1
 800d4ac:	0800d4e1 	.word	0x0800d4e1
 800d4b0:	0800d4e1 	.word	0x0800d4e1
 800d4b4:	0800d4e1 	.word	0x0800d4e1
 800d4b8:	0800d4e1 	.word	0x0800d4e1
 800d4bc:	0800d4e1 	.word	0x0800d4e1
 800d4c0:	0800d4e1 	.word	0x0800d4e1
 800d4c4:	0800d4e1 	.word	0x0800d4e1
 800d4c8:	0800d4e1 	.word	0x0800d4e1
 800d4cc:	0800d4e1 	.word	0x0800d4e1
 800d4d0:	0800d4e1 	.word	0x0800d4e1
 800d4d4:	0800d4e1 	.word	0x0800d4e1
 800d4d8:	0800d4e1 	.word	0x0800d4e1
 800d4dc:	0800d4e1 	.word	0x0800d4e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d4e0:	bf00      	nop
  }

  return (USBD_OK);
 800d4e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bc80      	pop	{r7}
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop

0800d4f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800d4fe:	2300      	movs	r3, #0
 800d500:	60fb      	str	r3, [r7, #12]
 800d502:	e00c      	b.n	800d51e <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800d504:	4b14      	ldr	r3, [pc, #80]	; (800d558 <CDC_Receive_FS+0x68>)
 800d506:	6818      	ldr	r0, [r3, #0]
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	18d1      	adds	r1, r2, r3
 800d50e:	f107 0208 	add.w	r2, r7, #8
 800d512:	2300      	movs	r3, #0
 800d514:	f7fd fcf6 	bl	800af04 <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	3301      	adds	r3, #1
 800d51c:	60fb      	str	r3, [r7, #12]
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	68fa      	ldr	r2, [r7, #12]
 800d524:	429a      	cmp	r2, r3
 800d526:	d3ed      	bcc.n	800d504 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d528:	6879      	ldr	r1, [r7, #4]
 800d52a:	480c      	ldr	r0, [pc, #48]	; (800d55c <CDC_Receive_FS+0x6c>)
 800d52c:	f7fb feff 	bl	800932e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d530:	480a      	ldr	r0, [pc, #40]	; (800d55c <CDC_Receive_FS+0x6c>)
 800d532:	f7fb ff3e 	bl	80093b2 <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d007      	beq.n	800d54c <CDC_Receive_FS+0x5c>
 800d53c:	4b08      	ldr	r3, [pc, #32]	; (800d560 <CDC_Receive_FS+0x70>)
 800d53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d542:	601a      	str	r2, [r3, #0]
 800d544:	f3bf 8f4f 	dsb	sy
 800d548:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800d54c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3710      	adds	r7, #16
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	20002490 	.word	0x20002490
 800d55c:	200026a0 	.word	0x200026a0
 800d560:	e000ed04 	.word	0xe000ed04

0800d564 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	460b      	mov	r3, r1
 800d56e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d570:	2300      	movs	r3, #0
 800d572:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d574:	4b0d      	ldr	r3, [pc, #52]	; (800d5ac <CDC_Transmit_FS+0x48>)
 800d576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d57a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d582:	2b00      	cmp	r3, #0
 800d584:	d001      	beq.n	800d58a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d586:	2301      	movs	r3, #1
 800d588:	e00b      	b.n	800d5a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d58a:	887b      	ldrh	r3, [r7, #2]
 800d58c:	461a      	mov	r2, r3
 800d58e:	6879      	ldr	r1, [r7, #4]
 800d590:	4806      	ldr	r0, [pc, #24]	; (800d5ac <CDC_Transmit_FS+0x48>)
 800d592:	f7fb feb3 	bl	80092fc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d596:	4805      	ldr	r0, [pc, #20]	; (800d5ac <CDC_Transmit_FS+0x48>)
 800d598:	f7fb fedc 	bl	8009354 <USBD_CDC_TransmitPacket>
 800d59c:	4603      	mov	r3, r0
 800d59e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	200026a0 	.word	0x200026a0

0800d5b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b083      	sub	sp, #12
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	6039      	str	r1, [r7, #0]
 800d5ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	2212      	movs	r2, #18
 800d5c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d5c2:	4b03      	ldr	r3, [pc, #12]	; (800d5d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	370c      	adds	r7, #12
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bc80      	pop	{r7}
 800d5cc:	4770      	bx	lr
 800d5ce:	bf00      	nop
 800d5d0:	2000015c 	.word	0x2000015c

0800d5d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	4603      	mov	r3, r0
 800d5dc:	6039      	str	r1, [r7, #0]
 800d5de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	2204      	movs	r2, #4
 800d5e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d5e6:	4b03      	ldr	r3, [pc, #12]	; (800d5f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	370c      	adds	r7, #12
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bc80      	pop	{r7}
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop
 800d5f4:	20000170 	.word	0x20000170

0800d5f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	4603      	mov	r3, r0
 800d600:	6039      	str	r1, [r7, #0]
 800d602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d604:	79fb      	ldrb	r3, [r7, #7]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d105      	bne.n	800d616 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	4907      	ldr	r1, [pc, #28]	; (800d62c <USBD_FS_ProductStrDescriptor+0x34>)
 800d60e:	4808      	ldr	r0, [pc, #32]	; (800d630 <USBD_FS_ProductStrDescriptor+0x38>)
 800d610:	f7fc feb6 	bl	800a380 <USBD_GetString>
 800d614:	e004      	b.n	800d620 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d616:	683a      	ldr	r2, [r7, #0]
 800d618:	4904      	ldr	r1, [pc, #16]	; (800d62c <USBD_FS_ProductStrDescriptor+0x34>)
 800d61a:	4805      	ldr	r0, [pc, #20]	; (800d630 <USBD_FS_ProductStrDescriptor+0x38>)
 800d61c:	f7fc feb0 	bl	800a380 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d620:	4b02      	ldr	r3, [pc, #8]	; (800d62c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d622:	4618      	mov	r0, r3
 800d624:	3708      	adds	r7, #8
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	20003134 	.word	0x20003134
 800d630:	0800e030 	.word	0x0800e030

0800d634 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	4603      	mov	r3, r0
 800d63c:	6039      	str	r1, [r7, #0]
 800d63e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d640:	683a      	ldr	r2, [r7, #0]
 800d642:	4904      	ldr	r1, [pc, #16]	; (800d654 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d644:	4804      	ldr	r0, [pc, #16]	; (800d658 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d646:	f7fc fe9b 	bl	800a380 <USBD_GetString>
  return USBD_StrDesc;
 800d64a:	4b02      	ldr	r3, [pc, #8]	; (800d654 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	20003134 	.word	0x20003134
 800d658:	0800e03c 	.word	0x0800e03c

0800d65c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	4603      	mov	r3, r0
 800d664:	6039      	str	r1, [r7, #0]
 800d666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	221a      	movs	r2, #26
 800d66c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d66e:	f000 f843 	bl	800d6f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d672:	4b02      	ldr	r3, [pc, #8]	; (800d67c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d674:	4618      	mov	r0, r3
 800d676:	3708      	adds	r7, #8
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	20000174 	.word	0x20000174

0800d680 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	4603      	mov	r3, r0
 800d688:	6039      	str	r1, [r7, #0]
 800d68a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d68c:	79fb      	ldrb	r3, [r7, #7]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d105      	bne.n	800d69e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d692:	683a      	ldr	r2, [r7, #0]
 800d694:	4907      	ldr	r1, [pc, #28]	; (800d6b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d696:	4808      	ldr	r0, [pc, #32]	; (800d6b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d698:	f7fc fe72 	bl	800a380 <USBD_GetString>
 800d69c:	e004      	b.n	800d6a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d69e:	683a      	ldr	r2, [r7, #0]
 800d6a0:	4904      	ldr	r1, [pc, #16]	; (800d6b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d6a2:	4805      	ldr	r0, [pc, #20]	; (800d6b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d6a4:	f7fc fe6c 	bl	800a380 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6a8:	4b02      	ldr	r3, [pc, #8]	; (800d6b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3708      	adds	r7, #8
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	20003134 	.word	0x20003134
 800d6b8:	0800e050 	.word	0x0800e050

0800d6bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	6039      	str	r1, [r7, #0]
 800d6c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d6c8:	79fb      	ldrb	r3, [r7, #7]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d105      	bne.n	800d6da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d6ce:	683a      	ldr	r2, [r7, #0]
 800d6d0:	4907      	ldr	r1, [pc, #28]	; (800d6f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d6d2:	4808      	ldr	r0, [pc, #32]	; (800d6f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d6d4:	f7fc fe54 	bl	800a380 <USBD_GetString>
 800d6d8:	e004      	b.n	800d6e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d6da:	683a      	ldr	r2, [r7, #0]
 800d6dc:	4904      	ldr	r1, [pc, #16]	; (800d6f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d6de:	4805      	ldr	r0, [pc, #20]	; (800d6f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d6e0:	f7fc fe4e 	bl	800a380 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6e4:	4b02      	ldr	r3, [pc, #8]	; (800d6f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	20003134 	.word	0x20003134
 800d6f4:	0800e05c 	.word	0x0800e05c

0800d6f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d6fe:	4b0f      	ldr	r3, [pc, #60]	; (800d73c <Get_SerialNum+0x44>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d704:	4b0e      	ldr	r3, [pc, #56]	; (800d740 <Get_SerialNum+0x48>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d70a:	4b0e      	ldr	r3, [pc, #56]	; (800d744 <Get_SerialNum+0x4c>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d710:	68fa      	ldr	r2, [r7, #12]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	4413      	add	r3, r2
 800d716:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d009      	beq.n	800d732 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d71e:	2208      	movs	r2, #8
 800d720:	4909      	ldr	r1, [pc, #36]	; (800d748 <Get_SerialNum+0x50>)
 800d722:	68f8      	ldr	r0, [r7, #12]
 800d724:	f000 f814 	bl	800d750 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d728:	2204      	movs	r2, #4
 800d72a:	4908      	ldr	r1, [pc, #32]	; (800d74c <Get_SerialNum+0x54>)
 800d72c:	68b8      	ldr	r0, [r7, #8]
 800d72e:	f000 f80f 	bl	800d750 <IntToUnicode>
  }
}
 800d732:	bf00      	nop
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	1ffff7e8 	.word	0x1ffff7e8
 800d740:	1ffff7ec 	.word	0x1ffff7ec
 800d744:	1ffff7f0 	.word	0x1ffff7f0
 800d748:	20000176 	.word	0x20000176
 800d74c:	20000186 	.word	0x20000186

0800d750 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d750:	b480      	push	{r7}
 800d752:	b087      	sub	sp, #28
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	4613      	mov	r3, r2
 800d75c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d75e:	2300      	movs	r3, #0
 800d760:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d762:	2300      	movs	r3, #0
 800d764:	75fb      	strb	r3, [r7, #23]
 800d766:	e027      	b.n	800d7b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	0f1b      	lsrs	r3, r3, #28
 800d76c:	2b09      	cmp	r3, #9
 800d76e:	d80b      	bhi.n	800d788 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	0f1b      	lsrs	r3, r3, #28
 800d774:	b2da      	uxtb	r2, r3
 800d776:	7dfb      	ldrb	r3, [r7, #23]
 800d778:	005b      	lsls	r3, r3, #1
 800d77a:	4619      	mov	r1, r3
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	440b      	add	r3, r1
 800d780:	3230      	adds	r2, #48	; 0x30
 800d782:	b2d2      	uxtb	r2, r2
 800d784:	701a      	strb	r2, [r3, #0]
 800d786:	e00a      	b.n	800d79e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	0f1b      	lsrs	r3, r3, #28
 800d78c:	b2da      	uxtb	r2, r3
 800d78e:	7dfb      	ldrb	r3, [r7, #23]
 800d790:	005b      	lsls	r3, r3, #1
 800d792:	4619      	mov	r1, r3
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	440b      	add	r3, r1
 800d798:	3237      	adds	r2, #55	; 0x37
 800d79a:	b2d2      	uxtb	r2, r2
 800d79c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	011b      	lsls	r3, r3, #4
 800d7a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d7a4:	7dfb      	ldrb	r3, [r7, #23]
 800d7a6:	005b      	lsls	r3, r3, #1
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	68ba      	ldr	r2, [r7, #8]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d7b2:	7dfb      	ldrb	r3, [r7, #23]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	75fb      	strb	r3, [r7, #23]
 800d7b8:	7dfa      	ldrb	r2, [r7, #23]
 800d7ba:	79fb      	ldrb	r3, [r7, #7]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d3d3      	bcc.n	800d768 <IntToUnicode+0x18>
  }
}
 800d7c0:	bf00      	nop
 800d7c2:	bf00      	nop
 800d7c4:	371c      	adds	r7, #28
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bc80      	pop	{r7}
 800d7ca:	4770      	bx	lr

0800d7cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b084      	sub	sp, #16
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4a0d      	ldr	r2, [pc, #52]	; (800d810 <HAL_PCD_MspInit+0x44>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d113      	bne.n	800d806 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d7de:	4b0d      	ldr	r3, [pc, #52]	; (800d814 <HAL_PCD_MspInit+0x48>)
 800d7e0:	69db      	ldr	r3, [r3, #28]
 800d7e2:	4a0c      	ldr	r2, [pc, #48]	; (800d814 <HAL_PCD_MspInit+0x48>)
 800d7e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d7e8:	61d3      	str	r3, [r2, #28]
 800d7ea:	4b0a      	ldr	r3, [pc, #40]	; (800d814 <HAL_PCD_MspInit+0x48>)
 800d7ec:	69db      	ldr	r3, [r3, #28]
 800d7ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7f2:	60fb      	str	r3, [r7, #12]
 800d7f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	2105      	movs	r1, #5
 800d7fa:	2014      	movs	r0, #20
 800d7fc:	f7f5 fb05 	bl	8002e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d800:	2014      	movs	r0, #20
 800d802:	f7f5 fb1e 	bl	8002e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d806:	bf00      	nop
 800d808:	3710      	adds	r7, #16
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	40005c00 	.word	0x40005c00
 800d814:	40021000 	.word	0x40021000

0800d818 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d82c:	4619      	mov	r1, r3
 800d82e:	4610      	mov	r0, r2
 800d830:	f7fb fe75 	bl	800951e <USBD_LL_SetupStage>
}
 800d834:	bf00      	nop
 800d836:	3708      	adds	r7, #8
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	460b      	mov	r3, r1
 800d846:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d84e:	78fa      	ldrb	r2, [r7, #3]
 800d850:	6879      	ldr	r1, [r7, #4]
 800d852:	4613      	mov	r3, r2
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	4413      	add	r3, r2
 800d858:	00db      	lsls	r3, r3, #3
 800d85a:	440b      	add	r3, r1
 800d85c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	78fb      	ldrb	r3, [r7, #3]
 800d864:	4619      	mov	r1, r3
 800d866:	f7fb fea7 	bl	80095b8 <USBD_LL_DataOutStage>
}
 800d86a:	bf00      	nop
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d872:	b580      	push	{r7, lr}
 800d874:	b082      	sub	sp, #8
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
 800d87a:	460b      	mov	r3, r1
 800d87c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d884:	78fa      	ldrb	r2, [r7, #3]
 800d886:	6879      	ldr	r1, [r7, #4]
 800d888:	4613      	mov	r3, r2
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	4413      	add	r3, r2
 800d88e:	00db      	lsls	r3, r3, #3
 800d890:	440b      	add	r3, r1
 800d892:	333c      	adds	r3, #60	; 0x3c
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	78fb      	ldrb	r3, [r7, #3]
 800d898:	4619      	mov	r1, r3
 800d89a:	f7fb fefe 	bl	800969a <USBD_LL_DataInStage>
}
 800d89e:	bf00      	nop
 800d8a0:	3708      	adds	r7, #8
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b082      	sub	sp, #8
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7fc f80e 	bl	80098d6 <USBD_LL_SOF>
}
 800d8ba:	bf00      	nop
 800d8bc:	3708      	adds	r7, #8
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}

0800d8c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8c2:	b580      	push	{r7, lr}
 800d8c4:	b084      	sub	sp, #16
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	2b02      	cmp	r3, #2
 800d8d4:	d001      	beq.n	800d8da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d8d6:	f7f3 fa73 	bl	8000dc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d8e0:	7bfa      	ldrb	r2, [r7, #15]
 800d8e2:	4611      	mov	r1, r2
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7fb ffbe 	bl	8009866 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7fb ff77 	bl	80097e4 <USBD_LL_Reset>
}
 800d8f6:	bf00      	nop
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
	...

0800d900 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d90e:	4618      	mov	r0, r3
 800d910:	f7fb ffb8 	bl	8009884 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	699b      	ldr	r3, [r3, #24]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d005      	beq.n	800d928 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d91c:	4b04      	ldr	r3, [pc, #16]	; (800d930 <HAL_PCD_SuspendCallback+0x30>)
 800d91e:	691b      	ldr	r3, [r3, #16]
 800d920:	4a03      	ldr	r2, [pc, #12]	; (800d930 <HAL_PCD_SuspendCallback+0x30>)
 800d922:	f043 0306 	orr.w	r3, r3, #6
 800d926:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d928:	bf00      	nop
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	e000ed00 	.word	0xe000ed00

0800d934 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d942:	4618      	mov	r0, r3
 800d944:	f7fb ffb2 	bl	80098ac <USBD_LL_Resume>
}
 800d948:	bf00      	nop
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d958:	4a28      	ldr	r2, [pc, #160]	; (800d9fc <USBD_LL_Init+0xac>)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	4a26      	ldr	r2, [pc, #152]	; (800d9fc <USBD_LL_Init+0xac>)
 800d964:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d968:	4b24      	ldr	r3, [pc, #144]	; (800d9fc <USBD_LL_Init+0xac>)
 800d96a:	4a25      	ldr	r2, [pc, #148]	; (800da00 <USBD_LL_Init+0xb0>)
 800d96c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d96e:	4b23      	ldr	r3, [pc, #140]	; (800d9fc <USBD_LL_Init+0xac>)
 800d970:	2208      	movs	r2, #8
 800d972:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d974:	4b21      	ldr	r3, [pc, #132]	; (800d9fc <USBD_LL_Init+0xac>)
 800d976:	2202      	movs	r2, #2
 800d978:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d97a:	4b20      	ldr	r3, [pc, #128]	; (800d9fc <USBD_LL_Init+0xac>)
 800d97c:	2200      	movs	r2, #0
 800d97e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d980:	4b1e      	ldr	r3, [pc, #120]	; (800d9fc <USBD_LL_Init+0xac>)
 800d982:	2200      	movs	r2, #0
 800d984:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d986:	4b1d      	ldr	r3, [pc, #116]	; (800d9fc <USBD_LL_Init+0xac>)
 800d988:	2200      	movs	r2, #0
 800d98a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d98c:	481b      	ldr	r0, [pc, #108]	; (800d9fc <USBD_LL_Init+0xac>)
 800d98e:	f7f5 fd05 	bl	800339c <HAL_PCD_Init>
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d001      	beq.n	800d99c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d998:	f7f3 fa12 	bl	8000dc0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d9a2:	2318      	movs	r3, #24
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	2100      	movs	r1, #0
 800d9a8:	f7f7 f97b 	bl	8004ca2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d9b2:	2358      	movs	r3, #88	; 0x58
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	2180      	movs	r1, #128	; 0x80
 800d9b8:	f7f7 f973 	bl	8004ca2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d9c2:	23c0      	movs	r3, #192	; 0xc0
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	2181      	movs	r1, #129	; 0x81
 800d9c8:	f7f7 f96b 	bl	8004ca2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d9d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	2101      	movs	r1, #1
 800d9da:	f7f7 f962 	bl	8004ca2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d9e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	2182      	movs	r1, #130	; 0x82
 800d9ec:	f7f7 f959 	bl	8004ca2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d9f0:	2300      	movs	r3, #0
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3708      	adds	r7, #8
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	20003334 	.word	0x20003334
 800da00:	40005c00 	.word	0x40005c00

0800da04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da0c:	2300      	movs	r3, #0
 800da0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da10:	2300      	movs	r3, #0
 800da12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7f5 fdc9 	bl	80035b2 <HAL_PCD_Start>
 800da20:	4603      	mov	r3, r0
 800da22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da24:	7bfb      	ldrb	r3, [r7, #15]
 800da26:	4618      	mov	r0, r3
 800da28:	f000 f94e 	bl	800dcc8 <USBD_Get_USB_Status>
 800da2c:	4603      	mov	r3, r0
 800da2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da30:	7bbb      	ldrb	r3, [r7, #14]
}
 800da32:	4618      	mov	r0, r3
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b084      	sub	sp, #16
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
 800da42:	4608      	mov	r0, r1
 800da44:	4611      	mov	r1, r2
 800da46:	461a      	mov	r2, r3
 800da48:	4603      	mov	r3, r0
 800da4a:	70fb      	strb	r3, [r7, #3]
 800da4c:	460b      	mov	r3, r1
 800da4e:	70bb      	strb	r3, [r7, #2]
 800da50:	4613      	mov	r3, r2
 800da52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da54:	2300      	movs	r3, #0
 800da56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da58:	2300      	movs	r3, #0
 800da5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da62:	78bb      	ldrb	r3, [r7, #2]
 800da64:	883a      	ldrh	r2, [r7, #0]
 800da66:	78f9      	ldrb	r1, [r7, #3]
 800da68:	f7f5 ff43 	bl	80038f2 <HAL_PCD_EP_Open>
 800da6c:	4603      	mov	r3, r0
 800da6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da70:	7bfb      	ldrb	r3, [r7, #15]
 800da72:	4618      	mov	r0, r3
 800da74:	f000 f928 	bl	800dcc8 <USBD_Get_USB_Status>
 800da78:	4603      	mov	r3, r0
 800da7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}

0800da86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da86:	b580      	push	{r7, lr}
 800da88:	b084      	sub	sp, #16
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	6078      	str	r0, [r7, #4]
 800da8e:	460b      	mov	r3, r1
 800da90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da92:	2300      	movs	r3, #0
 800da94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da96:	2300      	movs	r3, #0
 800da98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800daa0:	78fa      	ldrb	r2, [r7, #3]
 800daa2:	4611      	mov	r1, r2
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7f5 ff8a 	bl	80039be <HAL_PCD_EP_Close>
 800daaa:	4603      	mov	r3, r0
 800daac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800daae:	7bfb      	ldrb	r3, [r7, #15]
 800dab0:	4618      	mov	r0, r3
 800dab2:	f000 f909 	bl	800dcc8 <USBD_Get_USB_Status>
 800dab6:	4603      	mov	r3, r0
 800dab8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daba:	7bbb      	ldrb	r3, [r7, #14]
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3710      	adds	r7, #16
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	460b      	mov	r3, r1
 800dace:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dad0:	2300      	movs	r3, #0
 800dad2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dad4:	2300      	movs	r3, #0
 800dad6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dade:	78fa      	ldrb	r2, [r7, #3]
 800dae0:	4611      	mov	r1, r2
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7f6 f84a 	bl	8003b7c <HAL_PCD_EP_SetStall>
 800dae8:	4603      	mov	r3, r0
 800daea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800daec:	7bfb      	ldrb	r3, [r7, #15]
 800daee:	4618      	mov	r0, r3
 800daf0:	f000 f8ea 	bl	800dcc8 <USBD_Get_USB_Status>
 800daf4:	4603      	mov	r3, r0
 800daf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3710      	adds	r7, #16
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}

0800db02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db02:	b580      	push	{r7, lr}
 800db04:	b084      	sub	sp, #16
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
 800db0a:	460b      	mov	r3, r1
 800db0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db0e:	2300      	movs	r3, #0
 800db10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db12:	2300      	movs	r3, #0
 800db14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db1c:	78fa      	ldrb	r2, [r7, #3]
 800db1e:	4611      	mov	r1, r2
 800db20:	4618      	mov	r0, r3
 800db22:	f7f6 f88b 	bl	8003c3c <HAL_PCD_EP_ClrStall>
 800db26:	4603      	mov	r3, r0
 800db28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db2a:	7bfb      	ldrb	r3, [r7, #15]
 800db2c:	4618      	mov	r0, r3
 800db2e:	f000 f8cb 	bl	800dcc8 <USBD_Get_USB_Status>
 800db32:	4603      	mov	r3, r0
 800db34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db36:	7bbb      	ldrb	r3, [r7, #14]
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3710      	adds	r7, #16
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db40:	b480      	push	{r7}
 800db42:	b085      	sub	sp, #20
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	460b      	mov	r3, r1
 800db4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800db54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	da0c      	bge.n	800db76 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800db5c:	78fb      	ldrb	r3, [r7, #3]
 800db5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db62:	68f9      	ldr	r1, [r7, #12]
 800db64:	1c5a      	adds	r2, r3, #1
 800db66:	4613      	mov	r3, r2
 800db68:	009b      	lsls	r3, r3, #2
 800db6a:	4413      	add	r3, r2
 800db6c:	00db      	lsls	r3, r3, #3
 800db6e:	440b      	add	r3, r1
 800db70:	3302      	adds	r3, #2
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	e00b      	b.n	800db8e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800db76:	78fb      	ldrb	r3, [r7, #3]
 800db78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db7c:	68f9      	ldr	r1, [r7, #12]
 800db7e:	4613      	mov	r3, r2
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	4413      	add	r3, r2
 800db84:	00db      	lsls	r3, r3, #3
 800db86:	440b      	add	r3, r1
 800db88:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800db8c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3714      	adds	r7, #20
 800db92:	46bd      	mov	sp, r7
 800db94:	bc80      	pop	{r7}
 800db96:	4770      	bx	lr

0800db98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	460b      	mov	r3, r1
 800dba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dba4:	2300      	movs	r3, #0
 800dba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbb2:	78fa      	ldrb	r2, [r7, #3]
 800dbb4:	4611      	mov	r1, r2
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7f5 fe76 	bl	80038a8 <HAL_PCD_SetAddress>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbc0:	7bfb      	ldrb	r3, [r7, #15]
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f000 f880 	bl	800dcc8 <USBD_Get_USB_Status>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3710      	adds	r7, #16
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}

0800dbd6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dbd6:	b580      	push	{r7, lr}
 800dbd8:	b086      	sub	sp, #24
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	60f8      	str	r0, [r7, #12]
 800dbde:	607a      	str	r2, [r7, #4]
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	72fb      	strb	r3, [r7, #11]
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbea:	2300      	movs	r3, #0
 800dbec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dbf8:	893b      	ldrh	r3, [r7, #8]
 800dbfa:	7af9      	ldrb	r1, [r7, #11]
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	f7f5 ff7a 	bl	8003af6 <HAL_PCD_EP_Transmit>
 800dc02:	4603      	mov	r3, r0
 800dc04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc06:	7dfb      	ldrb	r3, [r7, #23]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f000 f85d 	bl	800dcc8 <USBD_Get_USB_Status>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc12:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3718      	adds	r7, #24
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b086      	sub	sp, #24
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	607a      	str	r2, [r7, #4]
 800dc26:	461a      	mov	r2, r3
 800dc28:	460b      	mov	r3, r1
 800dc2a:	72fb      	strb	r3, [r7, #11]
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc30:	2300      	movs	r3, #0
 800dc32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc34:	2300      	movs	r3, #0
 800dc36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dc3e:	893b      	ldrh	r3, [r7, #8]
 800dc40:	7af9      	ldrb	r1, [r7, #11]
 800dc42:	687a      	ldr	r2, [r7, #4]
 800dc44:	f7f5 ff03 	bl	8003a4e <HAL_PCD_EP_Receive>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc4c:	7dfb      	ldrb	r3, [r7, #23]
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f000 f83a 	bl	800dcc8 <USBD_Get_USB_Status>
 800dc54:	4603      	mov	r3, r0
 800dc56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc58:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3718      	adds	r7, #24
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}

0800dc62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc62:	b580      	push	{r7, lr}
 800dc64:	b082      	sub	sp, #8
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
 800dc6a:	460b      	mov	r3, r1
 800dc6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc74:	78fa      	ldrb	r2, [r7, #3]
 800dc76:	4611      	mov	r1, r2
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7f5 ff25 	bl	8003ac8 <HAL_PCD_EP_GetRxCount>
 800dc7e:	4603      	mov	r3, r0
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dc90:	4b02      	ldr	r3, [pc, #8]	; (800dc9c <USBD_static_malloc+0x14>)
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	370c      	adds	r7, #12
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bc80      	pop	{r7}
 800dc9a:	4770      	bx	lr
 800dc9c:	20002258 	.word	0x20002258

0800dca0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]

}
 800dca8:	bf00      	nop
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bc80      	pop	{r7}
 800dcb0:	4770      	bx	lr

0800dcb2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcb2:	b480      	push	{r7}
 800dcb4:	b083      	sub	sp, #12
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
 800dcba:	460b      	mov	r3, r1
 800dcbc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800dcbe:	bf00      	nop
 800dcc0:	370c      	adds	r7, #12
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bc80      	pop	{r7}
 800dcc6:	4770      	bx	lr

0800dcc8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b085      	sub	sp, #20
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	4603      	mov	r3, r0
 800dcd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dcd6:	79fb      	ldrb	r3, [r7, #7]
 800dcd8:	2b03      	cmp	r3, #3
 800dcda:	d817      	bhi.n	800dd0c <USBD_Get_USB_Status+0x44>
 800dcdc:	a201      	add	r2, pc, #4	; (adr r2, 800dce4 <USBD_Get_USB_Status+0x1c>)
 800dcde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dce2:	bf00      	nop
 800dce4:	0800dcf5 	.word	0x0800dcf5
 800dce8:	0800dcfb 	.word	0x0800dcfb
 800dcec:	0800dd01 	.word	0x0800dd01
 800dcf0:	0800dd07 	.word	0x0800dd07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	73fb      	strb	r3, [r7, #15]
    break;
 800dcf8:	e00b      	b.n	800dd12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dcfa:	2302      	movs	r3, #2
 800dcfc:	73fb      	strb	r3, [r7, #15]
    break;
 800dcfe:	e008      	b.n	800dd12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd00:	2301      	movs	r3, #1
 800dd02:	73fb      	strb	r3, [r7, #15]
    break;
 800dd04:	e005      	b.n	800dd12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd06:	2302      	movs	r3, #2
 800dd08:	73fb      	strb	r3, [r7, #15]
    break;
 800dd0a:	e002      	b.n	800dd12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dd0c:	2302      	movs	r3, #2
 800dd0e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd10:	bf00      	nop
  }
  return usb_status;
 800dd12:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3714      	adds	r7, #20
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bc80      	pop	{r7}
 800dd1c:	4770      	bx	lr
 800dd1e:	bf00      	nop

0800dd20 <__libc_init_array>:
 800dd20:	b570      	push	{r4, r5, r6, lr}
 800dd22:	2600      	movs	r6, #0
 800dd24:	4d0c      	ldr	r5, [pc, #48]	; (800dd58 <__libc_init_array+0x38>)
 800dd26:	4c0d      	ldr	r4, [pc, #52]	; (800dd5c <__libc_init_array+0x3c>)
 800dd28:	1b64      	subs	r4, r4, r5
 800dd2a:	10a4      	asrs	r4, r4, #2
 800dd2c:	42a6      	cmp	r6, r4
 800dd2e:	d109      	bne.n	800dd44 <__libc_init_array+0x24>
 800dd30:	f000 f862 	bl	800ddf8 <_init>
 800dd34:	2600      	movs	r6, #0
 800dd36:	4d0a      	ldr	r5, [pc, #40]	; (800dd60 <__libc_init_array+0x40>)
 800dd38:	4c0a      	ldr	r4, [pc, #40]	; (800dd64 <__libc_init_array+0x44>)
 800dd3a:	1b64      	subs	r4, r4, r5
 800dd3c:	10a4      	asrs	r4, r4, #2
 800dd3e:	42a6      	cmp	r6, r4
 800dd40:	d105      	bne.n	800dd4e <__libc_init_array+0x2e>
 800dd42:	bd70      	pop	{r4, r5, r6, pc}
 800dd44:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd48:	4798      	blx	r3
 800dd4a:	3601      	adds	r6, #1
 800dd4c:	e7ee      	b.n	800dd2c <__libc_init_array+0xc>
 800dd4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd52:	4798      	blx	r3
 800dd54:	3601      	adds	r6, #1
 800dd56:	e7f2      	b.n	800dd3e <__libc_init_array+0x1e>
 800dd58:	0800e630 	.word	0x0800e630
 800dd5c:	0800e630 	.word	0x0800e630
 800dd60:	0800e630 	.word	0x0800e630
 800dd64:	0800e634 	.word	0x0800e634

0800dd68 <memcpy>:
 800dd68:	440a      	add	r2, r1
 800dd6a:	4291      	cmp	r1, r2
 800dd6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd70:	d100      	bne.n	800dd74 <memcpy+0xc>
 800dd72:	4770      	bx	lr
 800dd74:	b510      	push	{r4, lr}
 800dd76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd7a:	4291      	cmp	r1, r2
 800dd7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd80:	d1f9      	bne.n	800dd76 <memcpy+0xe>
 800dd82:	bd10      	pop	{r4, pc}

0800dd84 <memmove>:
 800dd84:	4288      	cmp	r0, r1
 800dd86:	b510      	push	{r4, lr}
 800dd88:	eb01 0402 	add.w	r4, r1, r2
 800dd8c:	d902      	bls.n	800dd94 <memmove+0x10>
 800dd8e:	4284      	cmp	r4, r0
 800dd90:	4623      	mov	r3, r4
 800dd92:	d807      	bhi.n	800dda4 <memmove+0x20>
 800dd94:	1e43      	subs	r3, r0, #1
 800dd96:	42a1      	cmp	r1, r4
 800dd98:	d008      	beq.n	800ddac <memmove+0x28>
 800dd9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dda2:	e7f8      	b.n	800dd96 <memmove+0x12>
 800dda4:	4601      	mov	r1, r0
 800dda6:	4402      	add	r2, r0
 800dda8:	428a      	cmp	r2, r1
 800ddaa:	d100      	bne.n	800ddae <memmove+0x2a>
 800ddac:	bd10      	pop	{r4, pc}
 800ddae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ddb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ddb6:	e7f7      	b.n	800dda8 <memmove+0x24>

0800ddb8 <memset>:
 800ddb8:	4603      	mov	r3, r0
 800ddba:	4402      	add	r2, r0
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d100      	bne.n	800ddc2 <memset+0xa>
 800ddc0:	4770      	bx	lr
 800ddc2:	f803 1b01 	strb.w	r1, [r3], #1
 800ddc6:	e7f9      	b.n	800ddbc <memset+0x4>

0800ddc8 <strstr>:
 800ddc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddca:	780c      	ldrb	r4, [r1, #0]
 800ddcc:	b164      	cbz	r4, 800dde8 <strstr+0x20>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	781a      	ldrb	r2, [r3, #0]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	1c5e      	adds	r6, r3, #1
 800ddd6:	b90a      	cbnz	r2, 800dddc <strstr+0x14>
 800ddd8:	4610      	mov	r0, r2
 800ddda:	e005      	b.n	800dde8 <strstr+0x20>
 800dddc:	4294      	cmp	r4, r2
 800ddde:	d108      	bne.n	800ddf2 <strstr+0x2a>
 800dde0:	460d      	mov	r5, r1
 800dde2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800dde6:	b902      	cbnz	r2, 800ddea <strstr+0x22>
 800dde8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddea:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800ddee:	4297      	cmp	r7, r2
 800ddf0:	d0f7      	beq.n	800dde2 <strstr+0x1a>
 800ddf2:	4633      	mov	r3, r6
 800ddf4:	e7ec      	b.n	800ddd0 <strstr+0x8>
	...

0800ddf8 <_init>:
 800ddf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddfa:	bf00      	nop
 800ddfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddfe:	bc08      	pop	{r3}
 800de00:	469e      	mov	lr, r3
 800de02:	4770      	bx	lr

0800de04 <_fini>:
 800de04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de06:	bf00      	nop
 800de08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de0a:	bc08      	pop	{r3}
 800de0c:	469e      	mov	lr, r3
 800de0e:	4770      	bx	lr
