
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed10  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e0  0800ee20  0800ee20  0001ee20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f600  0800f600  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800f600  0800f600  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f600  0800f600  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f600  0800f600  0001f600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f604  0800f604  0001f604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800f608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034c0  20000190  0800f798  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003650  0800f798  00023650  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d532  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e2c  00000000  00000000  0004d6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e40  00000000  00000000  00053518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c10  00000000  00000000  00055358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eaa3  00000000  00000000  00056f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026341  00000000  00000000  00075a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c6a4  00000000  00000000  0009bd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001383f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d7c  00000000  00000000  00138444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000190 	.word	0x20000190
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ee08 	.word	0x0800ee08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000194 	.word	0x20000194
 800014c:	0800ee08 	.word	0x0800ee08

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <d3231_get_time>:

#define D3231_ADDRESS (0b1101000 << 1)
uint8_t d3231_mem[19];

uint8_t * d3231_get_time(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b084      	sub	sp, #16
 8000178:	af04      	add	r7, sp, #16
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 800017a:	4b0f      	ldr	r3, [pc, #60]	; (80001b8 <d3231_get_time+0x44>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	f04f 31ff 	mov.w	r1, #4294967295
 8000182:	4618      	mov	r0, r3
 8000184:	f00b feee 	bl	800bf64 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(&hi2c1, D3231_ADDRESS, 0, 1, d3231_mem, 3, 10);
 8000188:	230a      	movs	r3, #10
 800018a:	9302      	str	r3, [sp, #8]
 800018c:	2303      	movs	r3, #3
 800018e:	9301      	str	r3, [sp, #4]
 8000190:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <d3231_get_time+0x48>)
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2301      	movs	r3, #1
 8000196:	2200      	movs	r2, #0
 8000198:	21d0      	movs	r1, #208	; 0xd0
 800019a:	4809      	ldr	r0, [pc, #36]	; (80001c0 <d3231_get_time+0x4c>)
 800019c:	f003 fd68 	bl	8003c70 <HAL_I2C_Mem_Read>
	xSemaphoreGive(muI2CHandle);
 80001a0:	4b05      	ldr	r3, [pc, #20]	; (80001b8 <d3231_get_time+0x44>)
 80001a2:	6818      	ldr	r0, [r3, #0]
 80001a4:	2300      	movs	r3, #0
 80001a6:	2200      	movs	r2, #0
 80001a8:	2100      	movs	r1, #0
 80001aa:	f00b fc65 	bl	800ba78 <xQueueGenericSend>
	return d3231_mem;
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <d3231_get_time+0x48>)
}
 80001b0:	4618      	mov	r0, r3
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	2000248c 	.word	0x2000248c
 80001bc:	20002478 	.word	0x20002478
 80001c0:	200024ac 	.word	0x200024ac

080001c4 <d3231_get_temp>:

uint8_t * d3231_get_temp(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af04      	add	r7, sp, #16
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 80001ca:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <d3231_get_temp+0x44>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f04f 31ff 	mov.w	r1, #4294967295
 80001d2:	4618      	mov	r0, r3
 80001d4:	f00b fec6 	bl	800bf64 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(&hi2c1, D3231_ADDRESS, 0x11, 1, d3231_mem+0x11, 2, 10);
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <d3231_get_temp+0x48>)
 80001da:	220a      	movs	r2, #10
 80001dc:	9202      	str	r2, [sp, #8]
 80001de:	2202      	movs	r2, #2
 80001e0:	9201      	str	r2, [sp, #4]
 80001e2:	9300      	str	r3, [sp, #0]
 80001e4:	2301      	movs	r3, #1
 80001e6:	2211      	movs	r2, #17
 80001e8:	21d0      	movs	r1, #208	; 0xd0
 80001ea:	4809      	ldr	r0, [pc, #36]	; (8000210 <d3231_get_temp+0x4c>)
 80001ec:	f003 fd40 	bl	8003c70 <HAL_I2C_Mem_Read>
	xSemaphoreGive(muI2CHandle);
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <d3231_get_temp+0x44>)
 80001f2:	6818      	ldr	r0, [r3, #0]
 80001f4:	2300      	movs	r3, #0
 80001f6:	2200      	movs	r2, #0
 80001f8:	2100      	movs	r1, #0
 80001fa:	f00b fc3d 	bl	800ba78 <xQueueGenericSend>
	return d3231_mem+0x11;
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <d3231_get_temp+0x48>)
}
 8000200:	4618      	mov	r0, r3
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	2000248c 	.word	0x2000248c
 800020c:	20002489 	.word	0x20002489
 8000210:	200024ac 	.word	0x200024ac

08000214 <d3231_get_all>:

uint8_t * d3231_get_all(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af04      	add	r7, sp, #16
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 800021a:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <d3231_get_all+0x44>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f04f 31ff 	mov.w	r1, #4294967295
 8000222:	4618      	mov	r0, r3
 8000224:	f00b fe9e 	bl	800bf64 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(&hi2c1, D3231_ADDRESS, 0, 1, d3231_mem, 19, 100);
 8000228:	2364      	movs	r3, #100	; 0x64
 800022a:	9302      	str	r3, [sp, #8]
 800022c:	2313      	movs	r3, #19
 800022e:	9301      	str	r3, [sp, #4]
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <d3231_get_all+0x48>)
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	2301      	movs	r3, #1
 8000236:	2200      	movs	r2, #0
 8000238:	21d0      	movs	r1, #208	; 0xd0
 800023a:	4809      	ldr	r0, [pc, #36]	; (8000260 <d3231_get_all+0x4c>)
 800023c:	f003 fd18 	bl	8003c70 <HAL_I2C_Mem_Read>
	xSemaphoreGive(muI2CHandle);
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <d3231_get_all+0x44>)
 8000242:	6818      	ldr	r0, [r3, #0]
 8000244:	2300      	movs	r3, #0
 8000246:	2200      	movs	r2, #0
 8000248:	2100      	movs	r1, #0
 800024a:	f00b fc15 	bl	800ba78 <xQueueGenericSend>
	return d3231_mem;
 800024e:	4b03      	ldr	r3, [pc, #12]	; (800025c <d3231_get_all+0x48>)
}
 8000250:	4618      	mov	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	2000248c 	.word	0x2000248c
 800025c:	20002478 	.word	0x20002478
 8000260:	200024ac 	.word	0x200024ac

08000264 <d3231_set>:

void d3231_set(uint8_t * arr, bool date)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af04      	add	r7, sp, #16
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	460b      	mov	r3, r1
 800026e:	70fb      	strb	r3, [r7, #3]
	xSemaphoreTake(muI2CHandle, portMAX_DELAY);
 8000270:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <d3231_set+0x50>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f04f 31ff 	mov.w	r1, #4294967295
 8000278:	4618      	mov	r0, r3
 800027a:	f00b fe73 	bl	800bf64 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Write(&hi2c1, D3231_ADDRESS, date<<2, 1, arr, 3, 100);
 800027e:	78fb      	ldrb	r3, [r7, #3]
 8000280:	b29b      	uxth	r3, r3
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	b29a      	uxth	r2, r3
 8000286:	2364      	movs	r3, #100	; 0x64
 8000288:	9302      	str	r3, [sp, #8]
 800028a:	2303      	movs	r3, #3
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2301      	movs	r3, #1
 8000294:	21d0      	movs	r1, #208	; 0xd0
 8000296:	4808      	ldr	r0, [pc, #32]	; (80002b8 <d3231_set+0x54>)
 8000298:	f003 fbf0 	bl	8003a7c <HAL_I2C_Mem_Write>
	xSemaphoreGive(muI2CHandle);
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <d3231_set+0x50>)
 800029e:	6818      	ldr	r0, [r3, #0]
 80002a0:	2300      	movs	r3, #0
 80002a2:	2200      	movs	r2, #0
 80002a4:	2100      	movs	r1, #0
 80002a6:	f00b fbe7 	bl	800ba78 <xQueueGenericSend>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	2000248c 	.word	0x2000248c
 80002b8:	200024ac 	.word	0x200024ac

080002bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of muI2C */
  muI2CHandle = osMutexNew(&muI2C_attributes);
 80002c0:	481d      	ldr	r0, [pc, #116]	; (8000338 <MX_FREERTOS_Init+0x7c>)
 80002c2:	f00b f849 	bl	800b358 <osMutexNew>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4a1c      	ldr	r2, [pc, #112]	; (800033c <MX_FREERTOS_Init+0x80>)
 80002ca:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (32, sizeof(uint8_t), &qUSB_rcv_attributes);
 80002cc:	4a1c      	ldr	r2, [pc, #112]	; (8000340 <MX_FREERTOS_Init+0x84>)
 80002ce:	2101      	movs	r1, #1
 80002d0:	2020      	movs	r0, #32
 80002d2:	f00b f8db 	bl	800b48c <osMessageQueueNew>
 80002d6:	4603      	mov	r3, r0
 80002d8:	4a1a      	ldr	r2, [pc, #104]	; (8000344 <MX_FREERTOS_Init+0x88>)
 80002da:	6013      	str	r3, [r2, #0]

  /* creation of qVFD */
  qVFDHandle = osMessageQueueNew (16, sizeof(uint16_t), &qVFD_attributes);
 80002dc:	4a1a      	ldr	r2, [pc, #104]	; (8000348 <MX_FREERTOS_Init+0x8c>)
 80002de:	2102      	movs	r1, #2
 80002e0:	2010      	movs	r0, #16
 80002e2:	f00b f8d3 	bl	800b48c <osMessageQueueNew>
 80002e6:	4603      	mov	r3, r0
 80002e8:	4a18      	ldr	r2, [pc, #96]	; (800034c <MX_FREERTOS_Init+0x90>)
 80002ea:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002ec:	4a18      	ldr	r2, [pc, #96]	; (8000350 <MX_FREERTOS_Init+0x94>)
 80002ee:	2100      	movs	r1, #0
 80002f0:	4818      	ldr	r0, [pc, #96]	; (8000354 <MX_FREERTOS_Init+0x98>)
 80002f2:	f00a ff59 	bl	800b1a8 <osThreadNew>
 80002f6:	4603      	mov	r3, r0
 80002f8:	4a17      	ldr	r2, [pc, #92]	; (8000358 <MX_FREERTOS_Init+0x9c>)
 80002fa:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 80002fc:	4a17      	ldr	r2, [pc, #92]	; (800035c <MX_FREERTOS_Init+0xa0>)
 80002fe:	2100      	movs	r1, #0
 8000300:	4817      	ldr	r0, [pc, #92]	; (8000360 <MX_FREERTOS_Init+0xa4>)
 8000302:	f00a ff51 	bl	800b1a8 <osThreadNew>
 8000306:	4603      	mov	r3, r0
 8000308:	4a16      	ldr	r2, [pc, #88]	; (8000364 <MX_FREERTOS_Init+0xa8>)
 800030a:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 800030c:	4a16      	ldr	r2, [pc, #88]	; (8000368 <MX_FREERTOS_Init+0xac>)
 800030e:	2100      	movs	r1, #0
 8000310:	4816      	ldr	r0, [pc, #88]	; (800036c <MX_FREERTOS_Init+0xb0>)
 8000312:	f00a ff49 	bl	800b1a8 <osThreadNew>
 8000316:	4603      	mov	r3, r0
 8000318:	4a15      	ldr	r2, [pc, #84]	; (8000370 <MX_FREERTOS_Init+0xb4>)
 800031a:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(StartEncoder, NULL, &Encoder_attributes);
 800031c:	4a15      	ldr	r2, [pc, #84]	; (8000374 <MX_FREERTOS_Init+0xb8>)
 800031e:	2100      	movs	r1, #0
 8000320:	4815      	ldr	r0, [pc, #84]	; (8000378 <MX_FREERTOS_Init+0xbc>)
 8000322:	f00a ff41 	bl	800b1a8 <osThreadNew>
 8000326:	4603      	mov	r3, r0
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <MX_FREERTOS_Init+0xc0>)
 800032a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <MX_FREERTOS_Init+0x88>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a13      	ldr	r2, [pc, #76]	; (8000380 <MX_FREERTOS_Init+0xc4>)
 8000332:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	0800f134 	.word	0x0800f134
 800033c:	2000248c 	.word	0x2000248c
 8000340:	0800f104 	.word	0x0800f104
 8000344:	200024a4 	.word	0x200024a4
 8000348:	0800f11c 	.word	0x0800f11c
 800034c:	20002490 	.word	0x20002490
 8000350:	0800f074 	.word	0x0800f074
 8000354:	08000385 	.word	0x08000385
 8000358:	20002498 	.word	0x20002498
 800035c:	0800f098 	.word	0x0800f098
 8000360:	080003b9 	.word	0x080003b9
 8000364:	2000249c 	.word	0x2000249c
 8000368:	0800f0bc 	.word	0x0800f0bc
 800036c:	08000415 	.word	0x08000415
 8000370:	200024a0 	.word	0x200024a0
 8000374:	0800f0e0 	.word	0x0800f0e0
 8000378:	0800045d 	.word	0x0800045d
 800037c:	200024a8 	.word	0x200024a8
 8000380:	20002494 	.word	0x20002494

08000384 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800038c:	f00e f80e 	bl	800e3ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000396:	4807      	ldr	r0, [pc, #28]	; (80003b4 <StartDefaultTask+0x30>)
 8000398:	f003 f9d9 	bl	800374e <HAL_GPIO_WritePin>
  osDelay(10);
 800039c:	200a      	movs	r0, #10
 800039e:	f00a ffad 	bl	800b2fc <osDelay>
  init_microrl();
 80003a2:	f002 fad7 	bl	8002954 <init_microrl>
  set_CDC_ready(); // allow to send
 80003a6:	f002 fb0f 	bl	80029c8 <set_CDC_ready>
  for(;;)
  {
#if USE_ENCODER
    process_encoder();
#endif
    osDelay(1);
 80003aa:	2001      	movs	r0, #1
 80003ac:	f00a ffa6 	bl	800b2fc <osDelay>
 80003b0:	e7fb      	b.n	80003aa <StartDefaultTask+0x26>
 80003b2:	bf00      	nop
 80003b4:	40010800 	.word	0x40010800

080003b8 <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 80003c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003c4:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 80003c6:	f00c fbb9 	bl	800cb3c <xTaskGetTickCount>
 80003ca:	4603      	mov	r3, r0
 80003cc:	60bb      	str	r3, [r7, #8]

		if (use_leds)
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <StartLEDheartbeat+0x50>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d005      	beq.n	80003e2 <StartLEDheartbeat+0x2a>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80003d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003da:	480c      	ldr	r0, [pc, #48]	; (800040c <StartLEDheartbeat+0x54>)
 80003dc:	f003 f9cf 	bl	800377e <HAL_GPIO_TogglePin>
 80003e0:	e005      	b.n	80003ee <StartLEDheartbeat+0x36>
		else
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80003e2:	2201      	movs	r2, #1
 80003e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e8:	4808      	ldr	r0, [pc, #32]	; (800040c <StartLEDheartbeat+0x54>)
 80003ea:	f003 f9b0 	bl	800374e <HAL_GPIO_WritePin>

		tick_counter++;
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <StartLEDheartbeat+0x58>)
 80003f0:	881b      	ldrh	r3, [r3, #0]
 80003f2:	3301      	adds	r3, #1
 80003f4:	b29a      	uxth	r2, r3
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <StartLEDheartbeat+0x58>)
 80003f8:	801a      	strh	r2, [r3, #0]

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80003fa:	f107 0308 	add.w	r3, r7, #8
 80003fe:	68f9      	ldr	r1, [r7, #12]
 8000400:	4618      	mov	r0, r3
 8000402:	f00c f9d7 	bl	800c7b4 <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000406:	e7de      	b.n	80003c6 <StartLEDheartbeat+0xe>
 8000408:	200001b0 	.word	0x200001b0
 800040c:	40011000 	.word	0x40011000
 8000410:	200001ac 	.word	0x200001ac

08000414 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 800041c:	2000      	movs	r0, #0
 800041e:	f00c fe8f 	bl	800d140 <uxTaskGetStackHighWaterMark>
 8000422:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <StartUSB_rcv+0x44>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f107 010f 	add.w	r1, r7, #15
 8000430:	f04f 32ff 	mov.w	r2, #4294967295
 8000434:	4618      	mov	r0, r3
 8000436:	f00b fcb5 	bl	800bda4 <xQueueReceive>
	  microrl_print_char(buf);
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	4618      	mov	r0, r3
 800043e:	f001 ff15 	bl	800226c <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 8000442:	2000      	movs	r0, #0
 8000444:	f00c fe7c 	bl	800d140 <uxTaskGetStackHighWaterMark>
 8000448:	6138      	str	r0, [r7, #16]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 800044a:	693a      	ldr	r2, [r7, #16]
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	429a      	cmp	r2, r3
 8000450:	d2ea      	bcs.n	8000428 <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 8000452:	693b      	ldr	r3, [r7, #16]
 8000454:	617b      	str	r3, [r7, #20]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000456:	e7e7      	b.n	8000428 <StartUSB_rcv+0x14>
 8000458:	20002494 	.word	0x20002494

0800045c <StartEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoder */
void StartEncoder(void *argument)
{
 800045c:	b5b0      	push	{r4, r5, r7, lr}
 800045e:	b0b2      	sub	sp, #200	; 0xc8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]

	static bool invert = true;
	static bool released = true;


  osDelay(500);
 8000464:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000468:	f00a ff48 	bl	800b2fc <osDelay>
  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 800046c:	2201      	movs	r2, #1
 800046e:	2120      	movs	r1, #32
 8000470:	48d8      	ldr	r0, [pc, #864]	; (80007d4 <StartEncoder+0x378>)
 8000472:	f003 f96c 	bl	800374e <HAL_GPIO_WritePin>
  union VFD {
	  uint8_t arr2[11][3];
	  uint8_t arr1[11*3];
  } vfd;

  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000476:	2300      	movs	r3, #0
 8000478:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800047c:	e00b      	b.n	8000496 <StartEncoder+0x3a>
  {
	  vfd.arr1[i] = 0xFF;
 800047e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000482:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000486:	4413      	add	r3, r2
 8000488:	22ff      	movs	r2, #255	; 0xff
 800048a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(vfd.arr1); i++)
 800048c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000490:	3301      	adds	r3, #1
 8000492:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000496:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800049a:	2b20      	cmp	r3, #32
 800049c:	d9ef      	bls.n	800047e <StartEncoder+0x22>
  }
  uint8_t data;

  data = 0b01000001; // command 2, write to LED port
 800049e:	2341      	movs	r3, #65	; 0x41
 80004a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004aa:	48ca      	ldr	r0, [pc, #808]	; (80007d4 <StartEncoder+0x378>)
 80004ac:	f003 f94f 	bl	800374e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004b0:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295
 80004b8:	2201      	movs	r2, #1
 80004ba:	48c7      	ldr	r0, [pc, #796]	; (80007d8 <StartEncoder+0x37c>)
 80004bc:	f006 fbe6 	bl	8006c8c <HAL_SPI_Transmit>
  osDelay(10);
 80004c0:	200a      	movs	r0, #10
 80004c2:	f00a ff1b 	bl	800b2fc <osDelay>

  data = 0b1111; // disable LEDs
 80004c6:	230f      	movs	r3, #15
 80004c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004cc:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 80004d0:	f04f 33ff 	mov.w	r3, #4294967295
 80004d4:	2201      	movs	r2, #1
 80004d6:	48c0      	ldr	r0, [pc, #768]	; (80007d8 <StartEncoder+0x37c>)
 80004d8:	f006 fbd8 	bl	8006c8c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80004dc:	2201      	movs	r2, #1
 80004de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e2:	48bc      	ldr	r0, [pc, #752]	; (80007d4 <StartEncoder+0x378>)
 80004e4:	f003 f933 	bl	800374e <HAL_GPIO_WritePin>


  data = 0b01000000; // command 2, write to Display port
 80004e8:	2340      	movs	r3, #64	; 0x40
 80004ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f4:	48b7      	ldr	r0, [pc, #732]	; (80007d4 <StartEncoder+0x378>)
 80004f6:	f003 f92a 	bl	800374e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004fa:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000502:	2201      	movs	r2, #1
 8000504:	48b4      	ldr	r0, [pc, #720]	; (80007d8 <StartEncoder+0x37c>)
 8000506:	f006 fbc1 	bl	8006c8c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800050a:	2201      	movs	r2, #1
 800050c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000510:	48b0      	ldr	r0, [pc, #704]	; (80007d4 <StartEncoder+0x378>)
 8000512:	f003 f91c 	bl	800374e <HAL_GPIO_WritePin>
  osDelay(10);
 8000516:	200a      	movs	r0, #10
 8000518:	f00a fef0 	bl	800b2fc <osDelay>
  data = 0b11000000; // command 3, set address to 0
 800051c:	23c0      	movs	r3, #192	; 0xc0
 800051e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000528:	48aa      	ldr	r0, [pc, #680]	; (80007d4 <StartEncoder+0x378>)
 800052a:	f003 f910 	bl	800374e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800052e:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8000532:	f04f 33ff 	mov.w	r3, #4294967295
 8000536:	2201      	movs	r2, #1
 8000538:	48a7      	ldr	r0, [pc, #668]	; (80007d8 <StartEncoder+0x37c>)
 800053a:	f006 fba7 	bl	8006c8c <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 800053e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	2221      	movs	r2, #33	; 0x21
 8000548:	48a3      	ldr	r0, [pc, #652]	; (80007d8 <StartEncoder+0x37c>)
 800054a:	f006 fb9f 	bl	8006c8c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000554:	489f      	ldr	r0, [pc, #636]	; (80007d4 <StartEncoder+0x378>)
 8000556:	f003 f8fa 	bl	800374e <HAL_GPIO_WritePin>
  osDelay(10);
 800055a:	200a      	movs	r0, #10
 800055c:	f00a fece 	bl	800b2fc <osDelay>
  // init display, 11 digits 17 segments
  data = 0b00000111; // command 1, 11 digits 17 segments
 8000560:	2307      	movs	r3, #7
 8000562:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056c:	4899      	ldr	r0, [pc, #612]	; (80007d4 <StartEncoder+0x378>)
 800056e:	f003 f8ee 	bl	800374e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000572:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	2201      	movs	r2, #1
 800057c:	4896      	ldr	r0, [pc, #600]	; (80007d8 <StartEncoder+0x37c>)
 800057e:	f006 fb85 	bl	8006c8c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	4892      	ldr	r0, [pc, #584]	; (80007d4 <StartEncoder+0x378>)
 800058a:	f003 f8e0 	bl	800374e <HAL_GPIO_WritePin>
  osDelay(10);
 800058e:	200a      	movs	r0, #10
 8000590:	f00a feb4 	bl	800b2fc <osDelay>

  for (uint8_t i = 0; i <= 0b111; i++)
 8000594:	2300      	movs	r3, #0
 8000596:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 800059a:	e02d      	b.n	80005f8 <StartEncoder+0x19c>
  {
	  data = 0b10000000; // command 4
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  data |= 1<<3; // enable/disable display
 80005a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80005a6:	f043 0308 	orr.w	r3, r3, #8
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  data |= i; // set brightness
 80005b0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80005b4:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80005b8:	4313      	orrs	r3, r2
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c6:	4883      	ldr	r0, [pc, #524]	; (80007d4 <StartEncoder+0x378>)
 80005c8:	f003 f8c1 	bl	800374e <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80005cc:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	2201      	movs	r2, #1
 80005d6:	4880      	ldr	r0, [pc, #512]	; (80007d8 <StartEncoder+0x37c>)
 80005d8:	f006 fb58 	bl	8006c8c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e2:	487c      	ldr	r0, [pc, #496]	; (80007d4 <StartEncoder+0x378>)
 80005e4:	f003 f8b3 	bl	800374e <HAL_GPIO_WritePin>
	  osDelay(250);
 80005e8:	20fa      	movs	r0, #250	; 0xfa
 80005ea:	f00a fe87 	bl	800b2fc <osDelay>
  for (uint8_t i = 0; i <= 0b111; i++)
 80005ee:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80005f2:	3301      	adds	r3, #1
 80005f4:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 80005f8:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80005fc:	2b07      	cmp	r3, #7
 80005fe:	d9cd      	bls.n	800059c <StartEncoder+0x140>
  }



  for (int i = 0; i < 11; i++)
 8000600:	2300      	movs	r3, #0
 8000602:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000606:	e041      	b.n	800068c <StartEncoder+0x230>
  {
	  for (int b = 0; b < 3; b++) // erasing from right to left
 8000608:	2300      	movs	r3, #0
 800060a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800060e:	e012      	b.n	8000636 <StartEncoder+0x1da>
	  {
		  vfd.arr2[i][b] = 0;
 8000610:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000614:	4613      	mov	r3, r2
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4413      	add	r3, r2
 800061a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800061e:	441a      	add	r2, r3
 8000620:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000624:	4413      	add	r3, r2
 8000626:	3b78      	subs	r3, #120	; 0x78
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
	  for (int b = 0; b < 3; b++) // erasing from right to left
 800062c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000630:	3301      	adds	r3, #1
 8000632:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000636:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800063a:	2b02      	cmp	r3, #2
 800063c:	dde8      	ble.n	8000610 <StartEncoder+0x1b4>
	  }
	  data = 0b11000000; // command 3, set address to 0
 800063e:	23c0      	movs	r3, #192	; 0xc0
 8000640:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064a:	4862      	ldr	r0, [pc, #392]	; (80007d4 <StartEncoder+0x378>)
 800064c:	f003 f87f 	bl	800374e <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000650:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	2201      	movs	r2, #1
 800065a:	485f      	ldr	r0, [pc, #380]	; (80007d8 <StartEncoder+0x37c>)
 800065c:	f006 fb16 	bl	8006c8c <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000660:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	2221      	movs	r2, #33	; 0x21
 800066a:	485b      	ldr	r0, [pc, #364]	; (80007d8 <StartEncoder+0x37c>)
 800066c:	f006 fb0e 	bl	8006c8c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000676:	4857      	ldr	r0, [pc, #348]	; (80007d4 <StartEncoder+0x378>)
 8000678:	f003 f869 	bl	800374e <HAL_GPIO_WritePin>
	  osDelay(150);
 800067c:	2096      	movs	r0, #150	; 0x96
 800067e:	f00a fe3d 	bl	800b2fc <osDelay>
  for (int i = 0; i < 11; i++)
 8000682:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000686:	3301      	adds	r3, #1
 8000688:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800068c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000690:	2b0a      	cmp	r3, #10
 8000692:	ddb9      	ble.n	8000608 <StartEncoder+0x1ac>
  }
  osDelay (500);
 8000694:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000698:	f00a fe30 	bl	800b2fc <osDelay>

  //erase everything... just in case
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 800069c:	2300      	movs	r3, #0
 800069e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80006a2:	e00b      	b.n	80006bc <StartEncoder+0x260>
	  vfd.arr1[a] = 0;
 80006a4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80006a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80006ac:	4413      	add	r3, r2
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 80006b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80006b6:	3301      	adds	r3, #1
 80006b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80006bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80006c0:	2b20      	cmp	r3, #32
 80006c2:	d9ef      	bls.n	80006a4 <StartEncoder+0x248>


  // fill everything
    for (int j = 1; j < 15; j++)
 80006c4:	2301      	movs	r3, #1
 80006c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80006ca:	e06a      	b.n	80007a2 <StartEncoder+0x346>
    {
  	  uint32_t temp = 1<<j;
 80006cc:	2201      	movs	r2, #1
 80006ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80006d2:	fa02 f303 	lsl.w	r3, r2, r3
 80006d6:	677b      	str	r3, [r7, #116]	; 0x74
  	  for (int i = 1; i < 11; i++)
 80006d8:	2301      	movs	r3, #1
 80006da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80006de:	e035      	b.n	800074c <StartEncoder+0x2f0>
  	  {
  		  for (int b = 0; b < 3; b++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80006e6:	e028      	b.n	800073a <StartEncoder+0x2de>
  		  {
  			  vfd.arr2[i][b] |= (temp>>(b<<3))&0xFF;
 80006e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80006ec:	4613      	mov	r3, r2
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	4413      	add	r3, r2
 80006f2:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80006f6:	441a      	add	r2, r3
 80006f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006fc:	4413      	add	r3, r2
 80006fe:	3b78      	subs	r3, #120	; 0x78
 8000700:	781a      	ldrb	r2, [r3, #0]
 8000702:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800070a:	fa21 f303 	lsr.w	r3, r1, r3
 800070e:	b2db      	uxtb	r3, r3
 8000710:	4313      	orrs	r3, r2
 8000712:	b2d9      	uxtb	r1, r3
 8000714:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000718:	4613      	mov	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4413      	add	r3, r2
 800071e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000722:	441a      	add	r2, r3
 8000724:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000728:	4413      	add	r3, r2
 800072a:	3b78      	subs	r3, #120	; 0x78
 800072c:	460a      	mov	r2, r1
 800072e:	701a      	strb	r2, [r3, #0]
  		  for (int b = 0; b < 3; b++)
 8000730:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000734:	3301      	adds	r3, #1
 8000736:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800073a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800073e:	2b02      	cmp	r3, #2
 8000740:	ddd2      	ble.n	80006e8 <StartEncoder+0x28c>
  	  for (int i = 1; i < 11; i++)
 8000742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000746:	3301      	adds	r3, #1
 8000748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800074c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000750:	2b0a      	cmp	r3, #10
 8000752:	ddc5      	ble.n	80006e0 <StartEncoder+0x284>
  		  }
  	  }
  	  data = 0b11000000; // command 3, set address to 0
 8000754:	23c0      	movs	r3, #192	; 0xc0
 8000756:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000760:	481c      	ldr	r0, [pc, #112]	; (80007d4 <StartEncoder+0x378>)
 8000762:	f002 fff4 	bl	800374e <HAL_GPIO_WritePin>
  	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000766:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	2201      	movs	r2, #1
 8000770:	4819      	ldr	r0, [pc, #100]	; (80007d8 <StartEncoder+0x37c>)
 8000772:	f006 fa8b 	bl	8006c8c <HAL_SPI_Transmit>
  	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000776:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	2221      	movs	r2, #33	; 0x21
 8000780:	4815      	ldr	r0, [pc, #84]	; (80007d8 <StartEncoder+0x37c>)
 8000782:	f006 fa83 	bl	8006c8c <HAL_SPI_Transmit>
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <StartEncoder+0x378>)
 800078e:	f002 ffde 	bl	800374e <HAL_GPIO_WritePin>
  	  osDelay(100);
 8000792:	2064      	movs	r0, #100	; 0x64
 8000794:	f00a fdb2 	bl	800b2fc <osDelay>
    for (int j = 1; j < 15; j++)
 8000798:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800079c:	3301      	adds	r3, #1
 800079e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80007a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80007a6:	2b0e      	cmp	r3, #14
 80007a8:	dd90      	ble.n	80006cc <StartEncoder+0x270>
    }

    const uint8_t arr[][2] = {{6, 0},
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <StartEncoder+0x380>)
 80007ac:	f107 041c 	add.w	r4, r7, #28
 80007b0:	461d      	mov	r5, r3
 80007b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007be:	682b      	ldr	r3, [r5, #0]
 80007c0:	8023      	strh	r3, [r4, #0]
					   {9, 16},
					   {10, 16},
					   {10, 15},
    };

    for (int j = 0; j < sizeof(arr)/2; j++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80007c8:	e079      	b.n	80008be <StartEncoder+0x462>
    {
		for (int b = 0; b < 3; b++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80007d0:	e04a      	b.n	8000868 <StartEncoder+0x40c>
 80007d2:	bf00      	nop
 80007d4:	40010c00 	.word	0x40010c00
 80007d8:	200025ec 	.word	0x200025ec
 80007dc:	0800ee78 	.word	0x0800ee78
		  vfd.arr2[arr[j][0]][b] |= ((1<<arr[j][1])>>(b<<3))&0xFF;
 80007e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80007ea:	4413      	add	r3, r2
 80007ec:	f813 3cac 	ldrb.w	r3, [r3, #-172]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4613      	mov	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	4413      	add	r3, r2
 80007f8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80007fc:	441a      	add	r2, r3
 80007fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000802:	4413      	add	r3, r2
 8000804:	3b78      	subs	r3, #120	; 0x78
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b25a      	sxtb	r2, r3
 800080a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000814:	440b      	add	r3, r1
 8000816:	f813 3cab 	ldrb.w	r3, [r3, #-171]
 800081a:	4619      	mov	r1, r3
 800081c:	2301      	movs	r3, #1
 800081e:	fa03 f101 	lsl.w	r1, r3, r1
 8000822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	fa41 f303 	asr.w	r3, r1, r3
 800082c:	b25b      	sxtb	r3, r3
 800082e:	4313      	orrs	r3, r2
 8000830:	b259      	sxtb	r1, r3
 8000832:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800083c:	4413      	add	r3, r2
 800083e:	f813 3cac 	ldrb.w	r3, [r3, #-172]
 8000842:	461a      	mov	r2, r3
 8000844:	b2c9      	uxtb	r1, r1
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000850:	441a      	add	r2, r3
 8000852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000856:	4413      	add	r3, r2
 8000858:	3b78      	subs	r3, #120	; 0x78
 800085a:	460a      	mov	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++)
 800085e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000862:	3301      	adds	r3, #1
 8000864:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000868:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800086c:	2b02      	cmp	r3, #2
 800086e:	ddb7      	ble.n	80007e0 <StartEncoder+0x384>
		data = 0b11000000; // command 3, set address to 0
 8000870:	23c0      	movs	r3, #192	; 0xc0
 8000872:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087c:	48d3      	ldr	r0, [pc, #844]	; (8000bcc <StartEncoder+0x770>)
 800087e:	f002 ff66 	bl	800374e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000882:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
 800088a:	2201      	movs	r2, #1
 800088c:	48d0      	ldr	r0, [pc, #832]	; (8000bd0 <StartEncoder+0x774>)
 800088e:	f006 f9fd 	bl	8006c8c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000892:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	2221      	movs	r2, #33	; 0x21
 800089c:	48cc      	ldr	r0, [pc, #816]	; (8000bd0 <StartEncoder+0x774>)
 800089e:	f006 f9f5 	bl	8006c8c <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a8:	48c8      	ldr	r0, [pc, #800]	; (8000bcc <StartEncoder+0x770>)
 80008aa:	f002 ff50 	bl	800374e <HAL_GPIO_WritePin>
		osDelay(100);
 80008ae:	2064      	movs	r0, #100	; 0x64
 80008b0:	f00a fd24 	bl	800b2fc <osDelay>
    for (int j = 0; j < sizeof(arr)/2; j++)
 80008b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80008b8:	3301      	adds	r3, #1
 80008ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80008be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80008c2:	2b18      	cmp	r3, #24
 80008c4:	d981      	bls.n	80007ca <StartEncoder+0x36e>
    }

    osDelay(500);
 80008c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ca:	f00a fd17 	bl	800b2fc <osDelay>

    //erase everything... just in case
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80008d4:	e00b      	b.n	80008ee <StartEncoder+0x492>
  	  vfd.arr1[a] = 0;
 80008d6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80008da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80008de:	4413      	add	r3, r2
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 80008e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80008e8:	3301      	adds	r3, #1
 80008ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80008ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80008f2:	2b20      	cmp	r3, #32
 80008f4:	d9ef      	bls.n	80008d6 <StartEncoder+0x47a>
//    {
//        vfd.arr2[i+1][0] = vfd_digits[i]&0xFF;
//        vfd.arr2[i+1][1] = (vfd_digits[i]>>8)&0xFF;
//    }

	data = 0b11000000; // command 3, set address to 0
 80008f6:	23c0      	movs	r3, #192	; 0xc0
 80008f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000902:	48b2      	ldr	r0, [pc, #712]	; (8000bcc <StartEncoder+0x770>)
 8000904:	f002 ff23 	bl	800374e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000908:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 800090c:	f04f 33ff 	mov.w	r3, #4294967295
 8000910:	2201      	movs	r2, #1
 8000912:	48af      	ldr	r0, [pc, #700]	; (8000bd0 <StartEncoder+0x774>)
 8000914:	f006 f9ba 	bl	8006c8c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000918:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	2221      	movs	r2, #33	; 0x21
 8000922:	48ab      	ldr	r0, [pc, #684]	; (8000bd0 <StartEncoder+0x774>)
 8000924:	f006 f9b2 	bl	8006c8c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092e:	48a7      	ldr	r0, [pc, #668]	; (8000bcc <StartEncoder+0x770>)
 8000930:	f002 ff0d 	bl	800374e <HAL_GPIO_WritePin>
	//osDelay(100);


	const char * demo = "VFD FV651G";
 8000934:	4ba7      	ldr	r3, [pc, #668]	; (8000bd4 <StartEncoder+0x778>)
 8000936:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	while (*demo)
 800093a:	e012      	b.n	8000962 <StartEncoder+0x506>
	{
		uint16_t temp = get_char(*(demo++));
 800093c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000940:	1c5a      	adds	r2, r3, #1
 8000942:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f002 fbc1 	bl	80030d0 <get_char>
 800094e:	4603      	mov	r3, r0
 8000950:	837b      	strh	r3, [r7, #26]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 8000952:	4ba1      	ldr	r3, [pc, #644]	; (8000bd8 <StartEncoder+0x77c>)
 8000954:	6818      	ldr	r0, [r3, #0]
 8000956:	f107 011a 	add.w	r1, r7, #26
 800095a:	2300      	movs	r3, #0
 800095c:	2264      	movs	r2, #100	; 0x64
 800095e:	f00b f88b 	bl	800ba78 <xQueueGenericSend>
	while (*demo)
 8000962:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1e7      	bne.n	800093c <StartEncoder+0x4e0>
	}


  /* Infinite loop */
  d3231_get_all();
 800096c:	f7ff fc52 	bl	8000214 <d3231_get_all>
  for(;;)
  {
	  uint16_t buf;
	  if (HAL_GPIO_ReadPin(PB1_GPIO_Port, PB1_Pin))
 8000970:	2102      	movs	r1, #2
 8000972:	4896      	ldr	r0, [pc, #600]	; (8000bcc <StartEncoder+0x770>)
 8000974:	f002 fed4 	bl	8003720 <HAL_GPIO_ReadPin>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	f000 80b0 	beq.w	8000ae0 <StartEncoder+0x684>
	  {
		  //erase everything...
		  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000980:	2300      	movs	r3, #0
 8000982:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000986:	e00b      	b.n	80009a0 <StartEncoder+0x544>
			  vfd.arr1[a] = 0;
 8000988:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800098c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000990:	4413      	add	r3, r2
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
		  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000996:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800099a:	3301      	adds	r3, #1
 800099c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80009a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80009a4:	2b20      	cmp	r3, #32
 80009a6:	d9ef      	bls.n	8000988 <StartEncoder+0x52c>

		  uint8_t td3231 = *d3231_get_temp();
 80009a8:	f7ff fc0c 	bl	80001c4 <d3231_get_temp>
 80009ac:	4603      	mov	r3, r0
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		  uint8_t td [6];
		  td[0] = 'C';
 80009b4:	2343      	movs	r3, #67	; 0x43
 80009b6:	743b      	strb	r3, [r7, #16]
		  td[1] = 176; //°
 80009b8:	23b0      	movs	r3, #176	; 0xb0
 80009ba:	747b      	strb	r3, [r7, #17]
		  uint8_t i = 2;
 80009bc:	2302      	movs	r3, #2
 80009be:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		  while (td3231)
 80009c2:	e01e      	b.n	8000a02 <StartEncoder+0x5a6>
		  {
			  td[i++] = td3231 %10;
 80009c4:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	f887 2092 	strb.w	r2, [r7, #146]	; 0x92
 80009ce:	4618      	mov	r0, r3
 80009d0:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 80009d4:	4b81      	ldr	r3, [pc, #516]	; (8000bdc <StartEncoder+0x780>)
 80009d6:	fba3 1302 	umull	r1, r3, r3, r2
 80009da:	08d9      	lsrs	r1, r3, #3
 80009dc:	460b      	mov	r3, r1
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	440b      	add	r3, r1
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80009ec:	4403      	add	r3, r0
 80009ee:	f803 2cb8 	strb.w	r2, [r3, #-184]
			  td3231 /= 10;
 80009f2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80009f6:	4a79      	ldr	r2, [pc, #484]	; (8000bdc <StartEncoder+0x780>)
 80009f8:	fba2 2303 	umull	r2, r3, r2, r3
 80009fc:	08db      	lsrs	r3, r3, #3
 80009fe:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		  while (td3231)
 8000a02:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1dc      	bne.n	80009c4 <StartEncoder+0x568>
		  }
		  if (i>2)
 8000a0a:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d90d      	bls.n	8000a2e <StartEncoder+0x5d2>
			  td[i] = td3231&(1<<7)?'-':'+';
 8000a12:	f997 3093 	ldrsb.w	r3, [r7, #147]	; 0x93
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	da01      	bge.n	8000a1e <StartEncoder+0x5c2>
 8000a1a:	222d      	movs	r2, #45	; 0x2d
 8000a1c:	e000      	b.n	8000a20 <StartEncoder+0x5c4>
 8000a1e:	222b      	movs	r2, #43	; 0x2b
 8000a20:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8000a24:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000a28:	440b      	add	r3, r1
 8000a2a:	f803 2cb8 	strb.w	r2, [r3, #-184]

		  for (int i = 0; i < 6; i++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000a34:	e02d      	b.n	8000a92 <StartEncoder+0x636>
		  {
			  buf = get_char(td[i]);
 8000a36:	f107 0210 	add.w	r2, r7, #16
 8000a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a3e:	4413      	add	r3, r2
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fb44 	bl	80030d0 <get_char>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	833b      	strh	r3, [r7, #24]

			  vfd.arr2[i+1][0] = buf & 0xFF;
 8000a4c:	8b39      	ldrh	r1, [r7, #24]
 8000a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	b2c9      	uxtb	r1, r1
 8000a56:	4613      	mov	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000a60:	4413      	add	r3, r2
 8000a62:	3b78      	subs	r3, #120	; 0x78
 8000a64:	460a      	mov	r2, r1
 8000a66:	701a      	strb	r2, [r3, #0]
			  vfd.arr2[i+1][1] = (buf>>8)&0xFF;
 8000a68:	8b3b      	ldrh	r3, [r7, #24]
 8000a6a:	0a1b      	lsrs	r3, r3, #8
 8000a6c:	b299      	uxth	r1, r3
 8000a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	b2c9      	uxtb	r1, r1
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000a80:	4413      	add	r3, r2
 8000a82:	3b77      	subs	r3, #119	; 0x77
 8000a84:	460a      	mov	r2, r1
 8000a86:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 6; i++)
 8000a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a96:	2b05      	cmp	r3, #5
 8000a98:	ddcd      	ble.n	8000a36 <StartEncoder+0x5da>
		  }

		  data = 0b11000000; // command 3, set address to 0
 8000a9a:	23c0      	movs	r3, #192	; 0xc0
 8000a9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa6:	4849      	ldr	r0, [pc, #292]	; (8000bcc <StartEncoder+0x770>)
 8000aa8:	f002 fe51 	bl	800374e <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000aac:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4846      	ldr	r0, [pc, #280]	; (8000bd0 <StartEncoder+0x774>)
 8000ab8:	f006 f8e8 	bl	8006c8c <HAL_SPI_Transmit>
		  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000abc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac4:	2221      	movs	r2, #33	; 0x21
 8000ac6:	4842      	ldr	r0, [pc, #264]	; (8000bd0 <StartEncoder+0x774>)
 8000ac8:	f006 f8e0 	bl	8006c8c <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad2:	483e      	ldr	r0, [pc, #248]	; (8000bcc <StartEncoder+0x770>)
 8000ad4:	f002 fe3b 	bl	800374e <HAL_GPIO_WritePin>
		  osDelay(3000);
 8000ad8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000adc:	f00a fc0e 	bl	800b2fc <osDelay>
	  }
	  if (show_clock)
 8000ae0:	4b3f      	ldr	r3, [pc, #252]	; (8000be0 <StartEncoder+0x784>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	f000 80be 	beq.w	8000c66 <StartEncoder+0x80a>
	  {
		  uint8_t * time = d3231_get_time();
 8000aea:	f7ff fb43 	bl	8000174 <d3231_get_time>
 8000aee:	67b8      	str	r0, [r7, #120]	; 0x78
		  uint8_t clock [4];
		  clock[0] = time[1] & 0xF;
 8000af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000af2:	3301      	adds	r3, #1
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	733b      	strb	r3, [r7, #12]
		  clock[1] = (time[1] >> 4) & 0xF;
 8000afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b00:	3301      	adds	r3, #1
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	091b      	lsrs	r3, r3, #4
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	737b      	strb	r3, [r7, #13]
		  clock[2] = time[2] & 0xF;
 8000b0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	f003 030f 	and.w	r3, r3, #15
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	73bb      	strb	r3, [r7, #14]
		  clock[3] = (time[2] >> 4) & 0xF;
 8000b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	091b      	lsrs	r3, r3, #4
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	73fb      	strb	r3, [r7, #15]

		  //erase everything...
		  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000b2a:	e00b      	b.n	8000b44 <StartEncoder+0x6e8>
			  vfd.arr1[a] = 0;
 8000b2c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b34:	4413      	add	r3, r2
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
		  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000b3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b3e:	3301      	adds	r3, #1
 8000b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000b44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b48:	2b20      	cmp	r3, #32
 8000b4a:	d9ef      	bls.n	8000b2c <StartEncoder+0x6d0>


		  for (int i = 0; i < 4; i++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000b52:	e02d      	b.n	8000bb0 <StartEncoder+0x754>
		  {
			  buf = get_char(clock[i]);
 8000b54:	f107 020c 	add.w	r2, r7, #12
 8000b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b5c:	4413      	add	r3, r2
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f002 fab5 	bl	80030d0 <get_char>
 8000b66:	4603      	mov	r3, r0
 8000b68:	833b      	strh	r3, [r7, #24]

			  vfd.arr2[4+i][0] = buf & 0xFF;
 8000b6a:	8b39      	ldrh	r1, [r7, #24]
 8000b6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b70:	1d1a      	adds	r2, r3, #4
 8000b72:	b2c9      	uxtb	r1, r1
 8000b74:	4613      	mov	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	4413      	add	r3, r2
 8000b7a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000b7e:	4413      	add	r3, r2
 8000b80:	3b78      	subs	r3, #120	; 0x78
 8000b82:	460a      	mov	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
			  vfd.arr2[4+i][1] = (buf>>8)&0xFF;
 8000b86:	8b3b      	ldrh	r3, [r7, #24]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	b299      	uxth	r1, r3
 8000b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b90:	1d1a      	adds	r2, r3, #4
 8000b92:	b2c9      	uxtb	r1, r1
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000b9e:	4413      	add	r3, r2
 8000ba0:	3b77      	subs	r3, #119	; 0x77
 8000ba2:	460a      	mov	r2, r1
 8000ba4:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 4; i++)
 8000ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000baa:	3301      	adds	r3, #1
 8000bac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	ddcd      	ble.n	8000b54 <StartEncoder+0x6f8>
		  }

		  if ((time[0]&0b1) == 0)
 8000bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d130      	bne.n	8000c26 <StartEncoder+0x7ca>
		  {
				for (int b = 0; b < 3; b++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000bca:	e028      	b.n	8000c1e <StartEncoder+0x7c2>
 8000bcc:	40010c00 	.word	0x40010c00
 8000bd0:	200025ec 	.word	0x200025ec
 8000bd4:	0800ee6c 	.word	0x0800ee6c
 8000bd8:	20002490 	.word	0x20002490
 8000bdc:	cccccccd 	.word	0xcccccccd
 8000be0:	2000000d 	.word	0x2000000d
				  vfd.arr2[6][b] |= ((1<<0)>>(b<<3))&0xFF;
 8000be4:	f107 0262 	add.w	r2, r7, #98	; 0x62
 8000be8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000bec:	4413      	add	r3, r2
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b25a      	sxtb	r2, r3
 8000bf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	fa41 f303 	asr.w	r3, r1, r3
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b25b      	sxtb	r3, r3
 8000c04:	b2d9      	uxtb	r1, r3
 8000c06:	f107 0262 	add.w	r2, r7, #98	; 0x62
 8000c0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c0e:	4413      	add	r3, r2
 8000c10:	460a      	mov	r2, r1
 8000c12:	701a      	strb	r2, [r3, #0]
				for (int b = 0; b < 3; b++)
 8000c14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c18:	3301      	adds	r3, #1
 8000c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000c1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	ddde      	ble.n	8000be4 <StartEncoder+0x788>
		  }

		  data = 0b11000000; // command 3, set address to 0
 8000c26:	23c0      	movs	r3, #192	; 0xc0
 8000c28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c32:	4872      	ldr	r0, [pc, #456]	; (8000dfc <StartEncoder+0x9a0>)
 8000c34:	f002 fd8b 	bl	800374e <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000c38:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	2201      	movs	r2, #1
 8000c42:	486f      	ldr	r0, [pc, #444]	; (8000e00 <StartEncoder+0x9a4>)
 8000c44:	f006 f822 	bl	8006c8c <HAL_SPI_Transmit>
		  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000c48:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c50:	2221      	movs	r2, #33	; 0x21
 8000c52:	486b      	ldr	r0, [pc, #428]	; (8000e00 <StartEncoder+0x9a4>)
 8000c54:	f006 f81a 	bl	8006c8c <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5e:	4867      	ldr	r0, [pc, #412]	; (8000dfc <StartEncoder+0x9a0>)
 8000c60:	f002 fd75 	bl	800374e <HAL_GPIO_WritePin>
 8000c64:	e068      	b.n	8000d38 <StartEncoder+0x8dc>


	  }
	  else
	  {
		  if(qVFDHandle && xQueueReceive(qVFDHandle, &buf, 1))
 8000c66:	4b67      	ldr	r3, [pc, #412]	; (8000e04 <StartEncoder+0x9a8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d064      	beq.n	8000d38 <StartEncoder+0x8dc>
 8000c6e:	4b65      	ldr	r3, [pc, #404]	; (8000e04 <StartEncoder+0x9a8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f107 0118 	add.w	r1, r7, #24
 8000c76:	2201      	movs	r2, #1
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f00b f893 	bl	800bda4 <xQueueReceive>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d059      	beq.n	8000d38 <StartEncoder+0x8dc>
		  {
				for (int i = 10; i > 1; i--)
 8000c84:	230a      	movs	r3, #10
 8000c86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000c88:	e02a      	b.n	8000ce0 <StartEncoder+0x884>
				{
					vfd.arr2[i][0] = vfd.arr2[i-1][0];
 8000c8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c8c:	1e5a      	subs	r2, r3, #1
 8000c8e:	4613      	mov	r3, r2
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	4413      	add	r3, r2
 8000c94:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000c98:	4413      	add	r3, r2
 8000c9a:	3b78      	subs	r3, #120	; 0x78
 8000c9c:	7819      	ldrb	r1, [r3, #0]
 8000c9e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4413      	add	r3, r2
 8000ca6:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000caa:	4413      	add	r3, r2
 8000cac:	3b78      	subs	r3, #120	; 0x78
 8000cae:	460a      	mov	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
					vfd.arr2[i][1] = vfd.arr2[i-1][1];
 8000cb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cb4:	1e5a      	subs	r2, r3, #1
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000cc0:	4413      	add	r3, r2
 8000cc2:	3b77      	subs	r3, #119	; 0x77
 8000cc4:	7819      	ldrb	r1, [r3, #0]
 8000cc6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000cc8:	4613      	mov	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4413      	add	r3, r2
 8000cce:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000cd2:	4413      	add	r3, r2
 8000cd4:	3b77      	subs	r3, #119	; 0x77
 8000cd6:	460a      	mov	r2, r1
 8000cd8:	701a      	strb	r2, [r3, #0]
				for (int i = 10; i > 1; i--)
 8000cda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ce0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	dcd1      	bgt.n	8000c8a <StartEncoder+0x82e>
				}
				vfd.arr2[1][0] = buf & 0xFF;
 8000ce6:	8b3b      	ldrh	r3, [r7, #24]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
				vfd.arr2[1][1] = (buf>>8)&0xFF;
 8000cee:	8b3b      	ldrh	r3, [r7, #24]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
				data = 0b11000000; // command 3, set address to 0
 8000cfa:	23c0      	movs	r3, #192	; 0xc0
 8000cfc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d06:	483d      	ldr	r0, [pc, #244]	; (8000dfc <StartEncoder+0x9a0>)
 8000d08:	f002 fd21 	bl	800374e <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000d0c:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
 8000d14:	2201      	movs	r2, #1
 8000d16:	483a      	ldr	r0, [pc, #232]	; (8000e00 <StartEncoder+0x9a4>)
 8000d18:	f005 ffb8 	bl	8006c8c <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000d1c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	2221      	movs	r2, #33	; 0x21
 8000d26:	4836      	ldr	r0, [pc, #216]	; (8000e00 <StartEncoder+0x9a4>)
 8000d28:	f005 ffb0 	bl	8006c8c <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d32:	4832      	ldr	r0, [pc, #200]	; (8000dfc <StartEncoder+0x9a0>)
 8000d34:	f002 fd0b 	bl	800374e <HAL_GPIO_WritePin>
		  }
	  }

	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 8000d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3c:	482f      	ldr	r0, [pc, #188]	; (8000dfc <StartEncoder+0x9a0>)
 8000d3e:	f002 fcef 	bl	8003720 <HAL_GPIO_ReadPin>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d003      	beq.n	8000d50 <StartEncoder+0x8f4>
	  {
		  released = true;
 8000d48:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <StartEncoder+0x9ac>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	e015      	b.n	8000d7c <StartEncoder+0x920>
	  } else if (released)
 8000d50:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <StartEncoder+0x9ac>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d011      	beq.n	8000d7c <StartEncoder+0x920>
	  {
		  released = false;
 8000d58:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <StartEncoder+0x9ac>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
		  invert = !invert;
 8000d5e:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <StartEncoder+0x9b0>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bf14      	ite	ne
 8000d66:	2301      	movne	r3, #1
 8000d68:	2300      	moveq	r3, #0
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	f083 0301 	eor.w	r3, r3, #1
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <StartEncoder+0x9b0>)
 8000d7a:	701a      	strb	r2, [r3, #0]
	  }

	if(use_leds)
 8000d7c:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <StartEncoder+0x9b4>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d036      	beq.n	8000df2 <StartEncoder+0x996>
	{
		  data = 0b01000001; // command 2, write to LED port
 8000d84:	2341      	movs	r3, #65	; 0x41
 8000d86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d90:	481a      	ldr	r0, [pc, #104]	; (8000dfc <StartEncoder+0x9a0>)
 8000d92:	f002 fcdc 	bl	800374e <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000d96:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4817      	ldr	r0, [pc, #92]	; (8000e00 <StartEncoder+0x9a4>)
 8000da2:	f005 ff73 	bl	8006c8c <HAL_SPI_Transmit>
		  osDelay(10);
 8000da6:	200a      	movs	r0, #10
 8000da8:	f00a faa8 	bl	800b2fc <osDelay>

		  data = ~(1<<((tick_counter >> 1)&0b11));
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <StartEncoder+0x9b8>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	085b      	lsrs	r3, r3, #1
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2201      	movs	r2, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	//	  if (invert)
	//		  data =~data;
		  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, invert);
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <StartEncoder+0x9b0>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	2120      	movs	r1, #32
 8000dd0:	480a      	ldr	r0, [pc, #40]	; (8000dfc <StartEncoder+0x9a0>)
 8000dd2:	f002 fcbc 	bl	800374e <HAL_GPIO_WritePin>

		  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000dd6:	f107 014f 	add.w	r1, r7, #79	; 0x4f
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	2201      	movs	r2, #1
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <StartEncoder+0x9a4>)
 8000de2:	f005 ff53 	bl	8006c8c <HAL_SPI_Transmit>
		  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000de6:	2201      	movs	r2, #1
 8000de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <StartEncoder+0x9a0>)
 8000dee:	f002 fcae 	bl	800374e <HAL_GPIO_WritePin>
	  data |= ((encoder_value >> 2) - 1)&0b111; // set brightness
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
#endif
	  osDelay(10);
 8000df2:	200a      	movs	r0, #10
 8000df4:	f00a fa82 	bl	800b2fc <osDelay>
  {
 8000df8:	e5ba      	b.n	8000970 <StartEncoder+0x514>
 8000dfa:	bf00      	nop
 8000dfc:	40010c00 	.word	0x40010c00
 8000e00:	200025ec 	.word	0x200025ec
 8000e04:	20002490 	.word	0x20002490
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000001 	.word	0x20000001
 8000e10:	200001b0 	.word	0x200001b0
 8000e14:	200001ac 	.word	0x200001ac

08000e18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2c:	4b4f      	ldr	r3, [pc, #316]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a4e      	ldr	r2, [pc, #312]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b4c      	ldr	r3, [pc, #304]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0310 	and.w	r3, r3, #16
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e44:	4b49      	ldr	r3, [pc, #292]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a48      	ldr	r2, [pc, #288]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000e4a:	f043 0320 	orr.w	r3, r3, #32
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b46      	ldr	r3, [pc, #280]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0320 	and.w	r3, r3, #32
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b43      	ldr	r3, [pc, #268]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a42      	ldr	r2, [pc, #264]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b40      	ldr	r3, [pc, #256]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	4b3d      	ldr	r3, [pc, #244]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a3c      	ldr	r2, [pc, #240]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b3a      	ldr	r3, [pc, #232]	; (8000f6c <MX_GPIO_Init+0x154>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e92:	4837      	ldr	r0, [pc, #220]	; (8000f70 <MX_GPIO_Init+0x158>)
 8000e94:	f002 fc5b 	bl	800374e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 8000e9e:	4835      	ldr	r0, [pc, #212]	; (8000f74 <MX_GPIO_Init+0x15c>)
 8000ea0:	f002 fc55 	bl	800374e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eaa:	4833      	ldr	r0, [pc, #204]	; (8000f78 <MX_GPIO_Init+0x160>)
 8000eac:	f002 fc4f 	bl	800374e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4829      	ldr	r0, [pc, #164]	; (8000f70 <MX_GPIO_Init+0x158>)
 8000eca:	f002 faa5 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <MX_GPIO_Init+0x164>)
 8000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4825      	ldr	r0, [pc, #148]	; (8000f78 <MX_GPIO_Init+0x160>)
 8000ee2:	f002 fa99 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PB1_Pin|PB2_Pin;
 8000ee6:	2306      	movs	r3, #6
 8000ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	481e      	ldr	r0, [pc, #120]	; (8000f74 <MX_GPIO_Init+0x15c>)
 8000efa:	f002 fa8d 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin|enc_s_Pin;
 8000efe:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4619      	mov	r1, r3
 8000f12:	4818      	ldr	r0, [pc, #96]	; (8000f74 <MX_GPIO_Init+0x15c>)
 8000f14:	f002 fa80 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000f18:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 8000f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4810      	ldr	r0, [pc, #64]	; (8000f74 <MX_GPIO_Init+0x15c>)
 8000f32:	f002 fa71 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480a      	ldr	r0, [pc, #40]	; (8000f78 <MX_GPIO_Init+0x160>)
 8000f50:	f002 fa62 	bl	8003418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2105      	movs	r1, #5
 8000f58:	2006      	movs	r0, #6
 8000f5a:	f002 fa32 	bl	80033c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f5e:	2006      	movs	r0, #6
 8000f60:	f002 fa4b 	bl	80033fa <HAL_NVIC_EnableIRQ>

}
 8000f64:	bf00      	nop
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40011000 	.word	0x40011000
 8000f74:	40010c00 	.word	0x40010c00
 8000f78:	40010800 	.word	0x40010800
 8000f7c:	10110000 	.word	0x10110000

08000f80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000f86:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <MX_I2C1_Init+0x54>)
 8000f88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000f8c:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <MX_I2C1_Init+0x58>)
 8000f8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000f9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fa2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <MX_I2C1_Init+0x50>)
 8000fbe:	f002 fc19 	bl	80037f4 <HAL_I2C_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fc8:	f000 f8c6 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200024ac 	.word	0x200024ac
 8000fd4:	40005400 	.word	0x40005400
 8000fd8:	000186a0 	.word	0x000186a0

08000fdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a15      	ldr	r2, [pc, #84]	; (800104c <HAL_I2C_MspInit+0x70>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d123      	bne.n	8001044 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_I2C_MspInit+0x74>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <HAL_I2C_MspInit+0x74>)
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_I2C_MspInit+0x74>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001014:	23c0      	movs	r3, #192	; 0xc0
 8001016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001018:	2312      	movs	r3, #18
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	480b      	ldr	r0, [pc, #44]	; (8001054 <HAL_I2C_MspInit+0x78>)
 8001028:	f002 f9f6 	bl	8003418 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_I2C_MspInit+0x74>)
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <HAL_I2C_MspInit+0x74>)
 8001032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001036:	61d3      	str	r3, [r2, #28]
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_I2C_MspInit+0x74>)
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40005400 	.word	0x40005400
 8001050:	40021000 	.word	0x40021000
 8001054:	40010c00 	.word	0x40010c00

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f002 f8ca 	bl	80031f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f80d 	bl	800107e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f7ff fed8 	bl	8000e18 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001068:	f001 feec 	bl	8002e44 <MX_SPI2_Init>
  MX_I2C1_Init();
 800106c:	f7ff ff88 	bl	8000f80 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001070:	f00a f834 	bl	800b0dc <osKernelInitialize>
  MX_FREERTOS_Init();
 8001074:	f7ff f922 	bl	80002bc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001078:	f00a f862 	bl	800b140 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800107c:	e7fe      	b.n	800107c <main+0x24>

0800107e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b094      	sub	sp, #80	; 0x50
 8001082:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001084:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001088:	2228      	movs	r2, #40	; 0x28
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f00d fe9b 	bl	800edc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ae:	2301      	movs	r3, #1
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80010b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010be:	2301      	movs	r3, #1
 80010c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d6:	4618      	mov	r0, r3
 80010d8:	f005 f852 	bl	8006180 <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80010e2:	f000 f839 	bl	8001158 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	230f      	movs	r3, #15
 80010e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ea:	2302      	movs	r3, #2
 80010ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2102      	movs	r1, #2
 8001102:	4618      	mov	r0, r3
 8001104:	f005 fabc 	bl	8006680 <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800110e:	f000 f823 	bl	8001158 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001112:	2310      	movs	r3, #16
 8001114:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	4618      	mov	r0, r3
 800111e:	f005 fc7b 	bl	8006a18 <HAL_RCCEx_PeriphCLKConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001128:	f000 f816 	bl	8001158 <Error_Handler>
  }
}
 800112c:	bf00      	nop
 800112e:	3750      	adds	r7, #80	; 0x50
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001146:	f002 f86b 	bl	8003220 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40012c00 	.word	0x40012c00

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	e7fe      	b.n	8001160 <Error_Handler+0x8>

08001162 <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8001162:	b480      	push	{r7}
 8001164:	b085      	sub	sp, #20
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	5c8a      	ldrb	r2, [r1, r2]
 8001176:	4413      	add	r3, r2
 8001178:	3301      	adds	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b3f      	cmp	r3, #63	; 0x3f
 8001180:	dd02      	ble.n	8001188 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3b40      	subs	r3, #64	; 0x40
 8001186:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	5cd3      	ldrb	r3, [r2, r3]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <hist_is_space_for_new+0x1a>
		return true;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e01e      	b.n	80011f0 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	429a      	cmp	r2, r3
 80011bc:	db0c      	blt.n	80011d8 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4413      	add	r3, r2
 80011cc:	3b01      	subs	r3, #1
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	da0c      	bge.n	80011ee <hist_is_space_for_new+0x56>
			return true;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e00b      	b.n	80011f0 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	3b01      	subs	r3, #1
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	da01      	bge.n	80011ee <hist_is_space_for_new+0x56>
			return true;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <hist_is_space_for_new+0x58>
	}
	return false;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b3e      	cmp	r3, #62	; 0x3e
 800120a:	dc61      	bgt.n	80012d0 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 800120c:	e002      	b.n	8001214 <hist_save_line+0x1a>
		hist_erase_older (pThis);
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f7ff ffa7 	bl	8001162 <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f7ff ffbe 	bl	8001198 <hist_is_space_for_new>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f5      	beq.n	800120e <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	5cd3      	ldrb	r3, [r2, r3]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d105      	bne.n	800123a <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	b2d1      	uxtb	r1, r2
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	da0a      	bge.n	800125e <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	3301      	adds	r3, #1
 8001250:	4413      	add	r3, r2
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	4618      	mov	r0, r3
 8001258:	f00d fd8e 	bl	800ed78 <memcpy>
 800125c:	e018      	b.n	8001290 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001266:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	3301      	adds	r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	4618      	mov	r0, r3
 8001278:	f00d fd7e 	bl	800ed78 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	18d1      	adds	r1, r2, r3
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	461a      	mov	r2, r3
 800128c:	f00d fd74 	bl	800ed78 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	b2d1      	uxtb	r1, r2
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	2b3f      	cmp	r3, #63	; 0x3f
 80012b0:	dd05      	ble.n	80012be <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	2100      	movs	r1, #0
 80012c6:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	649a      	str	r2, [r3, #72]	; 0x48
 80012ce:	e000      	b.n	80012d2 <hist_save_line+0xd8>
		return;
 80012d0:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	; 0x30
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 80012ee:	e010      	b.n	8001312 <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012fc:	4413      	add	r3, r2
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8001300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001302:	2b3f      	cmp	r3, #63	; 0x3f
 8001304:	dd02      	ble.n	800130c <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8001306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001308:	3b40      	subs	r3, #64	; 0x40
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 800130c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130e:	3301      	adds	r3, #1
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001316:	4413      	add	r3, r2
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1e8      	bne.n	80012f0 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d176      	bne.n	8001412 <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800132a:	429a      	cmp	r2, r3
 800132c:	f2c0 80d6 	blt.w	80014dc <hist_restore_line+0x204>
			int header = pThis->begin;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 800133a:	e010      	b.n	800135e <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	4413      	add	r3, r2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001348:	4413      	add	r3, r2
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	2b3f      	cmp	r3, #63	; 0x3f
 8001350:	dd02      	ble.n	8001358 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	3b40      	subs	r3, #64	; 0x40
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	3301      	adds	r3, #1
 800135c:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	4413      	add	r3, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <hist_restore_line+0xa2>
 800136a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	1e5a      	subs	r2, r3, #1
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001376:	429a      	cmp	r2, r3
 8001378:	d1e0      	bne.n	800133c <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	4413      	add	r3, r2
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 80aa 	beq.w	80014dc <hist_restore_line+0x204>
					pThis->cur++;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	4413      	add	r3, r2
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	4413      	add	r3, r2
 80013a0:	2b3f      	cmp	r3, #63	; 0x3f
 80013a2:	dc11      	bgt.n	80013c8 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 80013a4:	2233      	movs	r2, #51	; 0x33
 80013a6:	2100      	movs	r1, #0
 80013a8:	68b8      	ldr	r0, [r7, #8]
 80013aa:	f00d fd0d 	bl	800edc8 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	3301      	adds	r3, #1
 80013b4:	18d1      	adds	r1, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	68b8      	ldr	r0, [r7, #8]
 80013c2:	f00d fcd9 	bl	800ed78 <memcpy>
 80013c6:	e01f      	b.n	8001408 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80013ce:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 80013d0:	2233      	movs	r2, #51	; 0x33
 80013d2:	2100      	movs	r1, #0
 80013d4:	68b8      	ldr	r0, [r7, #8]
 80013d6:	f00d fcf7 	bl	800edc8 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	3301      	adds	r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4619      	mov	r1, r3
 80013e6:	68b8      	ldr	r0, [r7, #8]
 80013e8:	f00d fcc6 	bl	800ed78 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	18d0      	adds	r0, r2, r3
 80013f2:	68f9      	ldr	r1, [r7, #12]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	4413      	add	r3, r2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	461a      	mov	r2, r3
 8001404:	f00d fcb8 	bl	800ed78 <memcpy>
				}
				return pThis->ring_buf[header];
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	4413      	add	r3, r2
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	e066      	b.n	80014e0 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001416:	2b00      	cmp	r3, #0
 8001418:	dd5e      	ble.n	80014d8 <hist_restore_line+0x200>
				pThis->cur--;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	61fb      	str	r3, [r7, #28]
			int j = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 800142e:	e010      	b.n	8001452 <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	4413      	add	r3, r2
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	4413      	add	r3, r2
 800143e:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	2b3f      	cmp	r3, #63	; 0x3f
 8001444:	dd02      	ble.n	800144c <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3b40      	subs	r3, #64	; 0x40
 800144a:	61fb      	str	r3, [r7, #28]
				j++;
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	3301      	adds	r3, #1
 8001450:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	4413      	add	r3, r2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d006      	beq.n	800146c <hist_restore_line+0x194>
 800145e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	1ad2      	subs	r2, r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001468:	429a      	cmp	r2, r3
 800146a:	d1e1      	bne.n	8001430 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	4413      	add	r3, r2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	4413      	add	r3, r2
 800147a:	2b3f      	cmp	r3, #63	; 0x3f
 800147c:	dc0c      	bgt.n	8001498 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	3301      	adds	r3, #1
 8001484:	18d1      	adds	r1, r2, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	68b8      	ldr	r0, [r7, #8]
 8001492:	f00d fc71 	bl	800ed78 <memcpy>
 8001496:	e01a      	b.n	80014ce <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800149e:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3301      	adds	r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	4619      	mov	r1, r3
 80014ac:	68b8      	ldr	r0, [r7, #8]
 80014ae:	f00d fc63 	bl	800ed78 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	18d0      	adds	r0, r2, r3
 80014b8:	68f9      	ldr	r1, [r7, #12]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	4413      	add	r3, r2
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	f00d fc55 	bl	800ed78 <memcpy>
			}
			return pThis->ring_buf[header];
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	e003      	b.n	80014e0 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	e001      	b.n	80014e0 <hist_restore_line+0x208>
		}
	}
	return -1;
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3730      	adds	r7, #48	; 0x30
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
	int i = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
	int ind = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 80014fc:	e002      	b.n	8001504 <split+0x1c>
			ind++;
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	3301      	adds	r3, #1
 8001502:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4413      	add	r3, r2
 800150a:	3354      	adds	r3, #84	; 0x54
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d103      	bne.n	800151a <split+0x32>
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	429a      	cmp	r2, r3
 8001518:	dbf1      	blt.n	80014fe <split+0x16>
		}
		if (!(ind < limit)) return i;
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	429a      	cmp	r2, r3
 8001520:	db01      	blt.n	8001526 <split+0x3e>
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	e024      	b.n	8001570 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	1c58      	adds	r0, r3, #1
 8001532:	6178      	str	r0, [r7, #20]
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	4403      	add	r3, r0
 800153a:	440a      	add	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2b04      	cmp	r3, #4
 8001542:	dd05      	ble.n	8001550 <split+0x68>
			return -1;
 8001544:	f04f 33ff 	mov.w	r3, #4294967295
 8001548:	e012      	b.n	8001570 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	3301      	adds	r3, #1
 800154e:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4413      	add	r3, r2
 8001556:	3354      	adds	r3, #84	; 0x54
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <split+0x7e>
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	429a      	cmp	r2, r3
 8001564:	dbf1      	blt.n	800154a <split+0x62>
		}
		if (!(ind < limit)) return i;
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	429a      	cmp	r2, r3
 800156c:	dbca      	blt.n	8001504 <split+0x1c>
 800156e:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8001570:	4618      	mov	r0, r3
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800158c:	4610      	mov	r0, r2
 800158e:	4798      	blx	r3
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015a6:	4803      	ldr	r0, [pc, #12]	; (80015b4 <terminal_backspace+0x1c>)
 80015a8:	4798      	blx	r3
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	0800eebc 	.word	0x0800eebc

080015b8 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015c6:	4803      	ldr	r0, [pc, #12]	; (80015d4 <terminal_newline+0x1c>)
 80015c8:	4798      	blx	r3
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	0800eec4 	.word	0x0800eec4

080015d8 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	2300      	movs	r3, #0
 80015e8:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f4:	d235      	bcs.n	8001662 <u16bit_to_str+0x8a>
		while (nmb > 0) {
 80015f6:	e01a      	b.n	800162e <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <u16bit_to_str+0x9c>)
 80015fc:	fba3 2301 	umull	r2, r3, r3, r1
 8001600:	08da      	lsrs	r2, r3, #3
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	1aca      	subs	r2, r1, r3
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	1c59      	adds	r1, r3, #1
 8001612:	6179      	str	r1, [r7, #20]
 8001614:	3230      	adds	r2, #48	; 0x30
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	f107 0118 	add.w	r1, r7, #24
 800161c:	440b      	add	r3, r1
 800161e:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a13      	ldr	r2, [pc, #76]	; (8001674 <u16bit_to_str+0x9c>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	08db      	lsrs	r3, r3, #3
 800162c:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1e1      	bne.n	80015f8 <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	e00f      	b.n	800165a <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	1e5a      	subs	r2, r3, #1
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	1c59      	adds	r1, r3, #1
 8001646:	6039      	str	r1, [r7, #0]
 8001648:	f107 0118 	add.w	r1, r7, #24
 800164c:	440a      	add	r2, r1
 800164e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001652:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	3301      	adds	r3, #1
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	429a      	cmp	r2, r3
 8001660:	dbeb      	blt.n	800163a <u16bit_to_str+0x62>
	}
	*buf = '\0';
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
	return buf;
 8001668:	683b      	ldr	r3, [r7, #0]
}
 800166a:	4618      	mov	r0, r3
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	cccccccd 	.word	0xcccccccd

08001678 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	4a1d      	ldr	r2, [pc, #116]	; (800170c <terminal_move_cursor+0x94>)
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	4611      	mov	r1, r2
 800169c:	8019      	strh	r1, [r3, #0]
 800169e:	3302      	adds	r3, #2
 80016a0:	0c12      	lsrs	r2, r2, #16
 80016a2:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	dd0f      	ble.n	80016ca <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	3302      	adds	r3, #2
 80016b2:	4619      	mov	r1, r3
 80016b4:	4610      	mov	r0, r2
 80016b6:	f7ff ff8f 	bl	80015d8 <u16bit_to_str>
 80016ba:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	4914      	ldr	r1, [pc, #80]	; (8001710 <terminal_move_cursor+0x98>)
 80016c0:	461a      	mov	r2, r3
 80016c2:	460b      	mov	r3, r1
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	8013      	strh	r3, [r2, #0]
 80016c8:	e013      	b.n	80016f2 <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da18      	bge.n	8001702 <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	425b      	negs	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	3302      	adds	r3, #2
 80016dc:	4619      	mov	r1, r3
 80016de:	4610      	mov	r0, r2
 80016e0:	f7ff ff7a 	bl	80015d8 <u16bit_to_str>
 80016e4:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	490a      	ldr	r1, [pc, #40]	; (8001714 <terminal_move_cursor+0x9c>)
 80016ea:	461a      	mov	r2, r3
 80016ec:	460b      	mov	r3, r1
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016f8:	f107 020c 	add.w	r2, r7, #12
 80016fc:	4610      	mov	r0, r2
 80016fe:	4798      	blx	r3
 8001700:	e000      	b.n	8001704 <terminal_move_cursor+0x8c>
		return;
 8001702:	bf00      	nop
}
 8001704:	3720      	adds	r7, #32
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	0800eec8 	.word	0x0800eec8
 8001710:	0800eecc 	.word	0x0800eecc
 8001714:	0800eed0 	.word	0x0800eed0

08001718 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	4a15      	ldr	r2, [pc, #84]	; (800177c <terminal_reset_cursor+0x64>)
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	4611      	mov	r1, r2
 800172a:	8019      	strh	r1, [r3, #0]
 800172c:	3302      	adds	r3, #2
 800172e:	0c12      	lsrs	r2, r2, #16
 8001730:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	3302      	adds	r3, #2
 8001738:	4619      	mov	r1, r3
 800173a:	203a      	movs	r0, #58	; 0x3a
 800173c:	f7ff ff4c 	bl	80015d8 <u16bit_to_str>
 8001740:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <terminal_reset_cursor+0x68>)
 8001746:	6810      	ldr	r0, [r2, #0]
 8001748:	6018      	str	r0, [r3, #0]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3303      	adds	r3, #3
 800174e:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 8001750:	69f9      	ldr	r1, [r7, #28]
 8001752:	2005      	movs	r0, #5
 8001754:	f7ff ff40 	bl	80015d8 <u16bit_to_str>
 8001758:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	4909      	ldr	r1, [pc, #36]	; (8001784 <terminal_reset_cursor+0x6c>)
 800175e:	461a      	mov	r2, r3
 8001760:	460b      	mov	r3, r1
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800176c:	f107 020c 	add.w	r2, r7, #12
 8001770:	4610      	mov	r0, r2
 8001772:	4798      	blx	r3
}
 8001774:	bf00      	nop
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	0800eec8 	.word	0x0800eec8
 8001780:	0800eed4 	.word	0x0800eed4
 8001784:	0800eecc 	.word	0x0800eecc

08001788 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800179a:	4816      	ldr	r0, [pc, #88]	; (80017f4 <terminal_print_line+0x6c>)
 800179c:	4798      	blx	r3

	char nch [] = {0,0};
 800179e:	2300      	movs	r3, #0
 80017a0:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e014      	b.n	80017d2 <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	4413      	add	r3, r2
 80017ae:	3354      	adds	r3, #84	; 0x54
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 80017b4:	7c3b      	ldrb	r3, [r7, #16]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <terminal_print_line+0x36>
			nch[0] = ' ';
 80017ba:	2320      	movs	r3, #32
 80017bc:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017c4:	f107 0210 	add.w	r2, r7, #16
 80017c8:	4610      	mov	r0, r2
 80017ca:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	429a      	cmp	r2, r3
 80017dc:	dbe4      	blt.n	80017a8 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f7ff ff9a 	bl	8001718 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f7ff ff46 	bl	8001678 <terminal_move_cursor>
}
 80017ec:	bf00      	nop
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	0800eed8 	.word	0x0800eed8

080017f8 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3354      	adds	r3, #84	; 0x54
 8001806:	2233      	movs	r2, #51	; 0x33
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f00d fadc 	bl	800edc8 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3304      	adds	r3, #4
 8001814:	2240      	movs	r2, #64	; 0x40
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f00d fad5 	bl	800edc8 <memset>
	pThis->ring_hist.begin = 0;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pThis->execute = NULL;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	pThis->get_completion = NULL;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
	pThis->prompt_str = prompt_default;
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <microrl_init+0x78>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000004 	.word	0x20000004

08001874 <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	1d18      	adds	r0, r3, #4
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3354      	adds	r3, #84	; 0x54
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	f7ff fcfb 	bl	80012d8 <hist_restore_line>
 80018e2:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db1a      	blt.n	8001920 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	3354      	adds	r3, #84	; 0x54
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		terminal_reset_cursor (pThis);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ff04 	bl	8001718 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001916:	461a      	mov	r2, r3
 8001918:	2100      	movs	r1, #0
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ff34 	bl	8001788 <terminal_print_line>
	}
}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	2b5b      	cmp	r3, #91	; 0x5b
 8001938:	d104      	bne.n	8001944 <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
		return 0;
 8001940:	2300      	movs	r3, #0
 8001942:	e07b      	b.n	8001a3c <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d14f      	bne.n	80019ec <escape_process+0xc4>
		if (ch == 'A') {
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	2b41      	cmp	r3, #65	; 0x41
 8001950:	d105      	bne.n	800195e <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 8001952:	2100      	movs	r1, #0
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ffb7 	bl	80018c8 <hist_search>
#endif
			return 1;
 800195a:	2301      	movs	r3, #1
 800195c:	e06e      	b.n	8001a3c <escape_process+0x114>
		} else if (ch == 'B') {
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	2b42      	cmp	r3, #66	; 0x42
 8001962:	d105      	bne.n	8001970 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 8001964:	2101      	movs	r1, #1
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffae 	bl	80018c8 <hist_search>
#endif
			return 1;
 800196c:	2301      	movs	r3, #1
 800196e:	e065      	b.n	8001a3c <escape_process+0x114>
		} else if (ch == 'C') {
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	2b43      	cmp	r3, #67	; 0x43
 8001974:	d114      	bne.n	80019a0 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001982:	429a      	cmp	r2, r3
 8001984:	da0a      	bge.n	800199c <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 8001986:	2101      	movs	r1, #1
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fe75 	bl	8001678 <terminal_move_cursor>
				pThis->cursor++;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 800199c:	2301      	movs	r3, #1
 800199e:	e04d      	b.n	8001a3c <escape_process+0x114>
		} else if (ch == 'D') {
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	2b44      	cmp	r3, #68	; 0x44
 80019a4:	d112      	bne.n	80019cc <escape_process+0xa4>
			if (pThis->cursor > 0) {
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	dd0b      	ble.n	80019c8 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff fe5f 	bl	8001678 <terminal_move_cursor>
				pThis->cursor--;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019c0:	1e5a      	subs	r2, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e037      	b.n	8001a3c <escape_process+0x114>
		} else if (ch == '7') {
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	2b37      	cmp	r3, #55	; 0x37
 80019d0:	d104      	bne.n	80019dc <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2202      	movs	r2, #2
 80019d6:	701a      	strb	r2, [r3, #0]
			return 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	e02f      	b.n	8001a3c <escape_process+0x114>
		} else if (ch == '8') {
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	2b38      	cmp	r3, #56	; 0x38
 80019e0:	d12b      	bne.n	8001a3a <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2203      	movs	r2, #3
 80019e6:	701a      	strb	r2, [r3, #0]
			return 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e027      	b.n	8001a3c <escape_process+0x114>
		} 
	} else if (ch == '~') {
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	2b7e      	cmp	r3, #126	; 0x7e
 80019f0:	d123      	bne.n	8001a3a <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d108      	bne.n	8001a0c <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff fe8c 	bl	8001718 <terminal_reset_cursor>
			pThis->cursor = 0;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e017      	b.n	8001a3c <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d112      	bne.n	8001a3a <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	4619      	mov	r1, r3
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff fe27 	bl	8001678 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8001a3a:	2301      	movs	r3, #1
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	2b32      	cmp	r3, #50	; 0x32
 8001a5c:	dc60      	bgt.n	8001b20 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	440b      	add	r3, r1
 8001a70:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3354      	adds	r3, #84	; 0x54
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor + len,
 8001a7c:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a8a:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f00d f981 	bl	800ed94 <memmove>
		for (i = 0; i < len; i++) {
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e025      	b.n	8001ae4 <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	441a      	add	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	440b      	add	r3, r1
 8001aa8:	7811      	ldrb	r1, [r2, #0]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4413      	add	r3, r2
 8001aae:	460a      	mov	r2, r1
 8001ab0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	4413      	add	r3, r2
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	d109      	bne.n	8001ade <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbd5      	blt.n	8001a98 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	441a      	add	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdlen += len;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	441a      	add	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	4413      	add	r3, r2
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <microrl_insert_text+0xde>
	}
	return false;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	dd31      	ble.n	8001ba0 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff fd2b 	bl	8001598 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3354      	adds	r3, #84	; 0x54
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor-1,
 8001b5c:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f00d f910 	bl	800ed94 <memmove>
		pThis->cursor--;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b7a:	1e5a      	subs	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b98:	1e5a      	subs	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f7fe fad4 	bl	8000164 <strlen>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e019      	b.n	8001bfa <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fac7 	bl	8000164 <strlen>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d20a      	bcs.n	8001bf4 <common_len+0x4c>
			shortest = arr[i];
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7fe faba 	bl	8000164 <strlen>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1de      	bne.n	8001bc6 <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	e01f      	b.n	8001c4e <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	e012      	b.n	8001c3a <common_len+0x92>
			if (shortest[i] != arr[j][i])
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4413      	add	r3, r2
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	440b      	add	r3, r1
 8001c24:	6819      	ldr	r1, [r3, #0]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	440b      	add	r3, r1
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <common_len+0x8c>
				return i;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	e011      	b.n	8001c58 <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	3301      	adds	r3, #1
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1e5      	bne.n	8001c14 <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	dbdb      	blt.n	8001c0e <common_len+0x66>

	return i;
 8001c56:	697b      	ldr	r3, [r7, #20]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 8001c60:	b5b0      	push	{r4, r5, r7, lr}
 8001c62:	b08c      	sub	sp, #48	; 0x30
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 809c 	beq.w	8001dac <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c7a:	f107 020c 	add.w	r2, r7, #12
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fc31 	bl	80014e8 <split>
 8001c86:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d109      	bne.n	8001cb0 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 8001c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a42      	ldr	r2, [pc, #264]	; (8001db4 <microrl_get_complite+0x154>)
 8001cac:	f843 2c24 	str.w	r2, [r3, #-36]
	compl_token = pThis->get_completion (status, tkn_arr);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb6:	f107 020c 	add.w	r2, r7, #12
 8001cba:	4611      	mov	r1, r2
 8001cbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001cbe:	4798      	blx	r3
 8001cc0:	6238      	str	r0, [r7, #32]
	if (compl_token[0] != NULL) {
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d071      	beq.n	8001dae <microrl_get_complite+0x14e>
		int i = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
		int len;

		if (compl_token[1] == NULL) {
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d107      	bne.n	8001ce8 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fa41 	bl	8000164 <strlen>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce6:	e026      	b.n	8001d36 <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8001ce8:	6a38      	ldr	r0, [r7, #32]
 8001cea:	f7ff ff5d 	bl	8001ba8 <common_len>
 8001cee:	6278      	str	r0, [r7, #36]	; 0x24
			terminal_newline (pThis);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff fc61 	bl	80015b8 <terminal_newline>
			while (compl_token [i] != NULL) {
 8001cf6:	e011      	b.n	8001d1c <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d00:	0092      	lsls	r2, r2, #2
 8001d02:	6a39      	ldr	r1, [r7, #32]
 8001d04:	440a      	add	r2, r1
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4798      	blx	r3
				pThis->print (" ");
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d12:	4829      	ldr	r0, [pc, #164]	; (8001db8 <microrl_get_complite+0x158>)
 8001d14:	4798      	blx	r3
				i++;
 8001d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d18:	3301      	adds	r3, #1
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
			while (compl_token [i] != NULL) {
 8001d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	6a3a      	ldr	r2, [r7, #32]
 8001d22:	4413      	add	r3, r2
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1e6      	bne.n	8001cf8 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff fc44 	bl	80015b8 <terminal_newline>
			print_prompt (pThis);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fc22 	bl	800157a <print_prompt>
		}
		
		if (len) {
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d02b      	beq.n	8001d94 <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	681c      	ldr	r4, [r3, #0]
 8001d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d42:	3b01      	subs	r3, #1
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fa07 	bl	8000164 <strlen>
 8001d56:	4603      	mov	r3, r0
 8001d58:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 8001d5a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d66:	4413      	add	r3, r2
 8001d68:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe f9f9 	bl	8000164 <strlen>
 8001d72:	4603      	mov	r3, r0
 8001d74:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001d76:	461a      	mov	r2, r3
 8001d78:	4629      	mov	r1, r5
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fe62 	bl	8001a44 <microrl_insert_text>
			if (compl_token[1] == NULL) 
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	3304      	adds	r3, #4
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d104      	bne.n	8001d94 <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	490a      	ldr	r1, [pc, #40]	; (8001db8 <microrl_get_complite+0x158>)
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff fe58 	bl	8001a44 <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff fcbf 	bl	8001718 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001da0:	461a      	mov	r2, r3
 8001da2:	2100      	movs	r1, #0
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff fcef 	bl	8001788 <terminal_print_line>
 8001daa:	e000      	b.n	8001dae <microrl_get_complite+0x14e>
		return;
 8001dac:	bf00      	nop
	} 
}
 8001dae:	3730      	adds	r7, #48	; 0x30
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bdb0      	pop	{r4, r5, r7, pc}
 8001db4:	0800eedc 	.word	0x0800eedc
 8001db8:	0800eee0 	.word	0x0800eee0

08001dbc <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff fbf7 	bl	80015b8 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	dd0a      	ble.n	8001dea <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	1d18      	adds	r0, r3, #4
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de4:	461a      	mov	r2, r3
 8001de6:	f7ff fa08 	bl	80011fa <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df0:	f107 0208 	add.w	r2, r7, #8
 8001df4:	4619      	mov	r1, r3
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff fb76 	bl	80014e8 <split>
 8001dfc:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d109      	bne.n	8001e1a <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e0c:	4817      	ldr	r0, [pc, #92]	; (8001e6c <new_line_handler+0xb0>)
 8001e0e:	4798      	blx	r3
		pThis->print (ENDL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e16:	4816      	ldr	r0, [pc, #88]	; (8001e70 <new_line_handler+0xb4>)
 8001e18:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	dd0c      	ble.n	8001e3a <new_line_handler+0x7e>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e30:	f107 0208 	add.w	r2, r7, #8
 8001e34:	4611      	mov	r1, r2
 8001e36:	69f8      	ldr	r0, [r7, #28]
 8001e38:	4798      	blx	r3
	print_prompt (pThis);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff fb9d 	bl	800157a <print_prompt>
	pThis->cmdlen = 0;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3354      	adds	r3, #84	; 0x54
 8001e54:	2233      	movs	r2, #51	; 0x33
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f00c ffb5 	bl	800edc8 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8001e64:	bf00      	nop
 8001e66:	3720      	adds	r7, #32
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	0800eee4 	.word	0x0800eee4
 8001e70:	0800eec4 	.word	0x0800eec4

08001e74 <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	785b      	ldrb	r3, [r3, #1]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00d      	beq.n	8001ea2 <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff fd4b 	bl	8001928 <escape_process>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 81e3 	beq.w	8002260 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8001ea0:	e1de      	b.n	8002260 <microrl_insert_char+0x3ec>
		switch (ch) {
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	2b7e      	cmp	r3, #126	; 0x7e
 8001ea8:	f200 81af 	bhi.w	800220a <microrl_insert_char+0x396>
 8001eac:	a201      	add	r2, pc, #4	; (adr r2, 8001eb4 <microrl_insert_char+0x40>)
 8001eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb2:	bf00      	nop
 8001eb4:	08002147 	.word	0x08002147
 8001eb8:	0800217f 	.word	0x0800217f
 8001ebc:	080021f7 	.word	0x080021f7
 8001ec0:	0800220b 	.word	0x0800220b
 8001ec4:	08002123 	.word	0x08002123
 8001ec8:	08002157 	.word	0x08002157
 8001ecc:	0800220b 	.word	0x0800220b
 8001ed0:	080021b7 	.word	0x080021b7
 8001ed4:	080020d9 	.word	0x080020d9
 8001ed8:	080020b1 	.word	0x080020b1
 8001edc:	0800210b 	.word	0x0800210b
 8001ee0:	0800220b 	.word	0x0800220b
 8001ee4:	080020b1 	.word	0x080020b1
 8001ee8:	080021ad 	.word	0x080021ad
 8001eec:	0800220b 	.word	0x0800220b
 8001ef0:	080021a3 	.word	0x080021a3
 8001ef4:	0800220b 	.word	0x0800220b
 8001ef8:	080021d3 	.word	0x080021d3
 8001efc:	0800220b 	.word	0x0800220b
 8001f00:	0800220b 	.word	0x0800220b
 8001f04:	080020ef 	.word	0x080020ef
 8001f08:	0800220b 	.word	0x0800220b
 8001f0c:	0800220b 	.word	0x0800220b
 8001f10:	0800220b 	.word	0x0800220b
 8001f14:	0800220b 	.word	0x0800220b
 8001f18:	0800220b 	.word	0x0800220b
 8001f1c:	080020e1 	.word	0x080020e1
 8001f20:	0800220b 	.word	0x0800220b
 8001f24:	0800220b 	.word	0x0800220b
 8001f28:	0800220b 	.word	0x0800220b
 8001f2c:	0800220b 	.word	0x0800220b
 8001f30:	0800220b 	.word	0x0800220b
 8001f34:	0800220b 	.word	0x0800220b
 8001f38:	0800220b 	.word	0x0800220b
 8001f3c:	0800220b 	.word	0x0800220b
 8001f40:	0800220b 	.word	0x0800220b
 8001f44:	0800220b 	.word	0x0800220b
 8001f48:	0800220b 	.word	0x0800220b
 8001f4c:	0800220b 	.word	0x0800220b
 8001f50:	0800220b 	.word	0x0800220b
 8001f54:	0800220b 	.word	0x0800220b
 8001f58:	0800220b 	.word	0x0800220b
 8001f5c:	0800220b 	.word	0x0800220b
 8001f60:	0800220b 	.word	0x0800220b
 8001f64:	0800220b 	.word	0x0800220b
 8001f68:	0800220b 	.word	0x0800220b
 8001f6c:	0800220b 	.word	0x0800220b
 8001f70:	0800220b 	.word	0x0800220b
 8001f74:	0800220b 	.word	0x0800220b
 8001f78:	0800220b 	.word	0x0800220b
 8001f7c:	0800220b 	.word	0x0800220b
 8001f80:	0800220b 	.word	0x0800220b
 8001f84:	0800220b 	.word	0x0800220b
 8001f88:	0800220b 	.word	0x0800220b
 8001f8c:	0800220b 	.word	0x0800220b
 8001f90:	0800220b 	.word	0x0800220b
 8001f94:	0800220b 	.word	0x0800220b
 8001f98:	0800220b 	.word	0x0800220b
 8001f9c:	0800220b 	.word	0x0800220b
 8001fa0:	0800220b 	.word	0x0800220b
 8001fa4:	0800220b 	.word	0x0800220b
 8001fa8:	0800220b 	.word	0x0800220b
 8001fac:	0800220b 	.word	0x0800220b
 8001fb0:	0800220b 	.word	0x0800220b
 8001fb4:	0800220b 	.word	0x0800220b
 8001fb8:	0800220b 	.word	0x0800220b
 8001fbc:	0800220b 	.word	0x0800220b
 8001fc0:	0800220b 	.word	0x0800220b
 8001fc4:	0800220b 	.word	0x0800220b
 8001fc8:	0800220b 	.word	0x0800220b
 8001fcc:	0800220b 	.word	0x0800220b
 8001fd0:	0800220b 	.word	0x0800220b
 8001fd4:	0800220b 	.word	0x0800220b
 8001fd8:	0800220b 	.word	0x0800220b
 8001fdc:	0800220b 	.word	0x0800220b
 8001fe0:	0800220b 	.word	0x0800220b
 8001fe4:	0800220b 	.word	0x0800220b
 8001fe8:	0800220b 	.word	0x0800220b
 8001fec:	0800220b 	.word	0x0800220b
 8001ff0:	0800220b 	.word	0x0800220b
 8001ff4:	0800220b 	.word	0x0800220b
 8001ff8:	0800220b 	.word	0x0800220b
 8001ffc:	0800220b 	.word	0x0800220b
 8002000:	0800220b 	.word	0x0800220b
 8002004:	0800220b 	.word	0x0800220b
 8002008:	0800220b 	.word	0x0800220b
 800200c:	0800220b 	.word	0x0800220b
 8002010:	0800220b 	.word	0x0800220b
 8002014:	0800220b 	.word	0x0800220b
 8002018:	0800220b 	.word	0x0800220b
 800201c:	0800220b 	.word	0x0800220b
 8002020:	0800220b 	.word	0x0800220b
 8002024:	0800220b 	.word	0x0800220b
 8002028:	0800220b 	.word	0x0800220b
 800202c:	0800220b 	.word	0x0800220b
 8002030:	0800220b 	.word	0x0800220b
 8002034:	0800220b 	.word	0x0800220b
 8002038:	0800220b 	.word	0x0800220b
 800203c:	0800220b 	.word	0x0800220b
 8002040:	0800220b 	.word	0x0800220b
 8002044:	0800220b 	.word	0x0800220b
 8002048:	0800220b 	.word	0x0800220b
 800204c:	0800220b 	.word	0x0800220b
 8002050:	0800220b 	.word	0x0800220b
 8002054:	0800220b 	.word	0x0800220b
 8002058:	0800220b 	.word	0x0800220b
 800205c:	0800220b 	.word	0x0800220b
 8002060:	0800220b 	.word	0x0800220b
 8002064:	0800220b 	.word	0x0800220b
 8002068:	0800220b 	.word	0x0800220b
 800206c:	0800220b 	.word	0x0800220b
 8002070:	0800220b 	.word	0x0800220b
 8002074:	0800220b 	.word	0x0800220b
 8002078:	0800220b 	.word	0x0800220b
 800207c:	0800220b 	.word	0x0800220b
 8002080:	0800220b 	.word	0x0800220b
 8002084:	0800220b 	.word	0x0800220b
 8002088:	0800220b 	.word	0x0800220b
 800208c:	0800220b 	.word	0x0800220b
 8002090:	0800220b 	.word	0x0800220b
 8002094:	0800220b 	.word	0x0800220b
 8002098:	0800220b 	.word	0x0800220b
 800209c:	0800220b 	.word	0x0800220b
 80020a0:	0800220b 	.word	0x0800220b
 80020a4:	0800220b 	.word	0x0800220b
 80020a8:	0800220b 	.word	0x0800220b
 80020ac:	080021b7 	.word	0x080021b7
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	789b      	ldrb	r3, [r3, #2]
 80020b4:	461a      	mov	r2, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b0d      	cmp	r3, #13
 80020ba:	d101      	bne.n	80020c0 <microrl_insert_char+0x24c>
 80020bc:	230a      	movs	r3, #10
 80020be:	e000      	b.n	80020c2 <microrl_insert_char+0x24e>
 80020c0:	230d      	movs	r3, #13
 80020c2:	4293      	cmp	r3, r2
 80020c4:	f000 80c1 	beq.w	800224a <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff fe73 	bl	8001dbc <new_line_handler>
				break;
 80020d6:	e0c3      	b.n	8002260 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff fdc1 	bl	8001c60 <microrl_get_complite>
			break;
 80020de:	e0bf      	b.n	8002260 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	705a      	strb	r2, [r3, #1]
			break;
 80020e6:	e0bb      	b.n	8002260 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff fd1e 	bl	8001b2a <microrl_backspace>
					while (pThis->cursor > 0) {
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	dcf7      	bgt.n	80020e8 <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020fe:	461a      	mov	r2, r3
 8002100:	2100      	movs	r1, #0
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff fb40 	bl	8001788 <terminal_print_line>
			break;
 8002108:	e0aa      	b.n	8002260 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002110:	4855      	ldr	r0, [pc, #340]	; (8002268 <microrl_insert_char+0x3f4>)
 8002112:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8002120:	e09e      	b.n	8002260 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff faa0 	bl	8001678 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8002144:	e08c      	b.n	8002260 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fae6 	bl	8001718 <terminal_reset_cursor>
				pThis->cursor = 0;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8002154:	e084      	b.n	8002260 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	429a      	cmp	r2, r3
 8002164:	da73      	bge.n	800224e <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 8002166:	2101      	movs	r1, #1
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fa85 	bl	8001678 <terminal_move_cursor>
				pThis->cursor++;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800217c:	e067      	b.n	800224e <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d064      	beq.n	8002252 <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 8002188:	f04f 31ff 	mov.w	r1, #4294967295
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff fa73 	bl	8001678 <terminal_move_cursor>
				pThis->cursor--;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002198:	1e5a      	subs	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80021a0:	e057      	b.n	8002252 <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 80021a2:	2100      	movs	r1, #0
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff fb8f 	bl	80018c8 <hist_search>
			break;
 80021aa:	e059      	b.n	8002260 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 80021ac:	2101      	movs	r1, #1
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fb8a 	bl	80018c8 <hist_search>
			break;
 80021b4:	e054      	b.n	8002260 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff fcb7 	bl	8001b2a <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021c8:	461a      	mov	r2, r3
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fadc 	bl	8001788 <terminal_print_line>
			break;
 80021d0:	e046      	b.n	8002260 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff f9f0 	bl	80015b8 <terminal_newline>
				print_prompt (pThis);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff f9ce 	bl	800157a <print_prompt>
				terminal_reset_cursor (pThis);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fa9a 	bl	8001718 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021ea:	461a      	mov	r2, r3
 80021ec:	2100      	movs	r1, #0
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff faca 	bl	8001788 <terminal_print_line>
			break;
 80021f4:	e034      	b.n	8002260 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d02a      	beq.n	8002256 <microrl_insert_char+0x3e2>
				pThis->sigint();
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002206:	4798      	blx	r3
			break;
 8002208:	e025      	b.n	8002256 <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b20      	cmp	r3, #32
 800220e:	d104      	bne.n	800221a <microrl_insert_char+0x3a6>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01f      	beq.n	800225a <microrl_insert_char+0x3e6>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b1f      	cmp	r3, #31
 800221e:	dd1c      	ble.n	800225a <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8002220:	463b      	mov	r3, r7
 8002222:	2201      	movs	r2, #1
 8002224:	4619      	mov	r1, r3
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff fc0c 	bl	8001a44 <microrl_insert_text>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d015      	beq.n	800225e <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002238:	1e59      	subs	r1, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002240:	461a      	mov	r2, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff faa0 	bl	8001788 <terminal_print_line>
			break;
 8002248:	e009      	b.n	800225e <microrl_insert_char+0x3ea>
					break;
 800224a:	bf00      	nop
 800224c:	e008      	b.n	8002260 <microrl_insert_char+0x3ec>
			break;
 800224e:	bf00      	nop
 8002250:	e006      	b.n	8002260 <microrl_insert_char+0x3ec>
			break;
 8002252:	bf00      	nop
 8002254:	e004      	b.n	8002260 <microrl_insert_char+0x3ec>
			break;
 8002256:	bf00      	nop
 8002258:	e002      	b.n	8002260 <microrl_insert_char+0x3ec>
	}
 800225a:	bf00      	nop
 800225c:	e000      	b.n	8002260 <microrl_insert_char+0x3ec>
			break;
 800225e:	bf00      	nop
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	0800eed8 	.word	0x0800eed8

0800226c <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 8002276:	4b05      	ldr	r3, [pc, #20]	; (800228c <microrl_print_char+0x20>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	79fa      	ldrb	r2, [r7, #7]
 800227c:	4611      	mov	r1, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fdf8 	bl	8001e74 <microrl_insert_char>
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000008 	.word	0x20000008

08002290 <print>:

void print (const char * str)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 8002298:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <print+0x84>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	f083 0301 	eor.w	r3, r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <print+0x1e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b1b      	cmp	r3, #27
 80022ac:	d02b      	beq.n	8002306 <print+0x76>
		return;
	if (!CDC_is_ready)
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <print+0x88>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	f083 0301 	eor.w	r3, r3, #1
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d126      	bne.n	800230a <print+0x7a>
		return;
	uint16_t len = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 80022c0:	89fb      	ldrh	r3, [r7, #14]
 80022c2:	3301      	adds	r3, #1
 80022c4:	81fb      	strh	r3, [r7, #14]
 80022c6:	89fb      	ldrh	r3, [r7, #14]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	4413      	add	r3, r2
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f6      	bne.n	80022c0 <print+0x30>
	uint32_t timeout = HAL_GetTick();
 80022d2:	f000 ffb7 	bl	8003244 <HAL_GetTick>
 80022d6:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 80022d8:	e006      	b.n	80022e8 <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 80022da:	f000 ffb3 	bl	8003244 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d807      	bhi.n	80022f8 <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <print+0x8c>)
 80022ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80022ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f1      	bne.n	80022da <print+0x4a>
 80022f6:	e000      	b.n	80022fa <print+0x6a>
			break;
 80022f8:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 80022fa:	89fb      	ldrh	r3, [r7, #14]
 80022fc:	4619      	mov	r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f00c f938 	bl	800e574 <CDC_Transmit_FS>
 8002304:	e002      	b.n	800230c <print+0x7c>
		return;
 8002306:	bf00      	nop
 8002308:	e000      	b.n	800230c <print+0x7c>
		return;
 800230a:	bf00      	nop
}
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	2000000c 	.word	0x2000000c
 8002318:	200001ae 	.word	0x200001ae
 800231c:	200026d0 	.word	0x200026d0

08002320 <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	e010      	b.n	8002352 <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 8002330:	490c      	ldr	r1, [pc, #48]	; (8002364 <find_color_by_name+0x44>)
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	440b      	add	r3, r1
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	79fa      	ldrb	r2, [r7, #7]
 8002344:	429a      	cmp	r2, r3
 8002346:	d101      	bne.n	800234c <find_color_by_name+0x2c>
		{
			return i;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	e006      	b.n	800235a <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	3301      	adds	r3, #1
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b10      	cmp	r3, #16
 8002356:	d9eb      	bls.n	8002330 <find_color_by_name+0x10>
		}
	}
	return 0;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	0800f45c 	.word	0x0800f45c

08002368 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ffd2 	bl	8002320 <find_color_by_name>
 800237c:	4602      	mov	r2, r0
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	4a08      	ldr	r2, [pc, #32]	; (80023ac <print_color+0x44>)
 800238a:	4413      	add	r3, r2
 800238c:	3301      	adds	r3, #1
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff7e 	bl	8002290 <print>
	print(str);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff7b 	bl	8002290 <print>
	print(COLOR_NC);
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <print_color+0x48>)
 800239c:	f7ff ff78 	bl	8002290 <print>
	return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	0800f45c 	.word	0x0800f45c
 80023b0:	0800eefc 	.word	0x0800eefc

080023b4 <str_length>:

int str_length(const char * str)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	int i = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
	while (str[i])
 80023c0:	e002      	b.n	80023c8 <str_length+0x14>
		i++;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3301      	adds	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
	while (str[i])
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f6      	bne.n	80023c2 <str_length+0xe>
	return i;
 80023d4:	68fb      	ldr	r3, [r7, #12]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <print_help>:


int print_help(int argc, const char * const * argv)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
	print(_VER);
 80023ea:	4862      	ldr	r0, [pc, #392]	; (8002574 <print_help+0x194>)
 80023ec:	f7ff ff50 	bl	8002290 <print>
	print(ENDL);
 80023f0:	4861      	ldr	r0, [pc, #388]	; (8002578 <print_help+0x198>)
 80023f2:	f7ff ff4d 	bl	8002290 <print>
	print ("Use ");
 80023f6:	4861      	ldr	r0, [pc, #388]	; (800257c <print_help+0x19c>)
 80023f8:	f7ff ff4a 	bl	8002290 <print>
	print_color("TAB", C_GREEN);
 80023fc:	2105      	movs	r1, #5
 80023fe:	4860      	ldr	r0, [pc, #384]	; (8002580 <print_help+0x1a0>)
 8002400:	f7ff ffb2 	bl	8002368 <print_color>
	print(" key for completion");
 8002404:	485f      	ldr	r0, [pc, #380]	; (8002584 <print_help+0x1a4>)
 8002406:	f7ff ff43 	bl	8002290 <print>
	print (ENDL);
 800240a:	485b      	ldr	r0, [pc, #364]	; (8002578 <print_help+0x198>)
 800240c:	f7ff ff40 	bl	8002290 <print>
	print ("Available commands:");
 8002410:	485d      	ldr	r0, [pc, #372]	; (8002588 <print_help+0x1a8>)
 8002412:	f7ff ff3d 	bl	8002290 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	e09e      	b.n	800255a <print_help+0x17a>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 800241c:	4a5b      	ldr	r2, [pc, #364]	; (800258c <print_help+0x1ac>)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242e:	d11f      	bne.n	8002470 <print_help+0x90>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	3b01      	subs	r3, #1
 8002434:	4a55      	ldr	r2, [pc, #340]	; (800258c <print_help+0x1ac>)
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d004      	beq.n	8002450 <print_help+0x70>
				print_color(" aka ", C_L_PURPLE);
 8002446:	210c      	movs	r1, #12
 8002448:	4851      	ldr	r0, [pc, #324]	; (8002590 <print_help+0x1b0>)
 800244a:	f7ff ff8d 	bl	8002368 <print_color>
 800244e:	e003      	b.n	8002458 <print_help+0x78>
			else
				print_color("/", C_L_PURPLE);
 8002450:	210c      	movs	r1, #12
 8002452:	4850      	ldr	r0, [pc, #320]	; (8002594 <print_help+0x1b4>)
 8002454:	f7ff ff88 	bl	8002368 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	222c      	movs	r2, #44	; 0x2c
 800245c:	fb02 f303 	mul.w	r3, r2, r3
 8002460:	4a4a      	ldr	r2, [pc, #296]	; (800258c <print_help+0x1ac>)
 8002462:	4413      	add	r3, r2
 8002464:	3304      	adds	r3, #4
 8002466:	210b      	movs	r1, #11
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff7d 	bl	8002368 <print_color>
 800246e:	e071      	b.n	8002554 <print_help+0x174>
		}
		else
		{
			print(ENDL);
 8002470:	4841      	ldr	r0, [pc, #260]	; (8002578 <print_help+0x198>)
 8002472:	f7ff ff0d 	bl	8002290 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8002476:	f06f 0303 	mvn.w	r3, #3
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	e005      	b.n	800248a <print_help+0xaa>
				print(" ");
 800247e:	4846      	ldr	r0, [pc, #280]	; (8002598 <print_help+0x1b8>)
 8002480:	f7ff ff06 	bl	8002290 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	3301      	adds	r3, #1
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	4a40      	ldr	r2, [pc, #256]	; (800258c <print_help+0x1ac>)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	429a      	cmp	r2, r3
 800249c:	dbef      	blt.n	800247e <print_help+0x9e>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	222c      	movs	r2, #44	; 0x2c
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	4a39      	ldr	r2, [pc, #228]	; (800258c <print_help+0x1ac>)
 80024a8:	4413      	add	r3, r2
 80024aa:	1d1a      	adds	r2, r3, #4
 80024ac:	4937      	ldr	r1, [pc, #220]	; (800258c <print_help+0x1ac>)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	202c      	movs	r0, #44	; 0x2c
 80024b2:	fb00 f303 	mul.w	r3, r0, r3
 80024b6:	440b      	add	r3, r1
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4938      	ldr	r1, [pc, #224]	; (800259c <print_help+0x1bc>)
 80024bc:	5ccb      	ldrb	r3, [r1, r3]
 80024be:	4619      	mov	r1, r3
 80024c0:	4610      	mov	r0, r2
 80024c2:	f7ff ff51 	bl	8002368 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	e005      	b.n	80024d8 <print_help+0xf8>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 80024cc:	4832      	ldr	r0, [pc, #200]	; (8002598 <print_help+0x1b8>)
 80024ce:	f7ff fedf 	bl	8002290 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	3301      	adds	r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	4a2c      	ldr	r2, [pc, #176]	; (800258c <print_help+0x1ac>)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80024e6:	f1c3 040b 	rsb	r4, r3, #11
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	222c      	movs	r2, #44	; 0x2c
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	4a26      	ldr	r2, [pc, #152]	; (800258c <print_help+0x1ac>)
 80024f4:	4413      	add	r3, r2
 80024f6:	3304      	adds	r3, #4
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff5b 	bl	80023b4 <str_length>
 80024fe:	4603      	mov	r3, r0
 8002500:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	429a      	cmp	r2, r3
 8002506:	dbe1      	blt.n	80024cc <print_help+0xec>
			switch (microrl_actions[i].level){
 8002508:	4a20      	ldr	r2, [pc, #128]	; (800258c <print_help+0x1ac>)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <print_help+0x140>
 800251a:	2b01      	cmp	r3, #1
 800251c:	d004      	beq.n	8002528 <print_help+0x148>
 800251e:	e007      	b.n	8002530 <print_help+0x150>
			case 0:
				print ("-");
 8002520:	481f      	ldr	r0, [pc, #124]	; (80025a0 <print_help+0x1c0>)
 8002522:	f7ff feb5 	bl	8002290 <print>
				break;
 8002526:	e007      	b.n	8002538 <print_help+0x158>
			case 1:
				print ("^");
 8002528:	481e      	ldr	r0, [pc, #120]	; (80025a4 <print_help+0x1c4>)
 800252a:	f7ff feb1 	bl	8002290 <print>
				break;
 800252e:	e003      	b.n	8002538 <print_help+0x158>
			default:
				print ("#");
 8002530:	481d      	ldr	r0, [pc, #116]	; (80025a8 <print_help+0x1c8>)
 8002532:	f7ff fead 	bl	8002290 <print>
				break;
 8002536:	bf00      	nop
			}
			print (" ");
 8002538:	4817      	ldr	r0, [pc, #92]	; (8002598 <print_help+0x1b8>)
 800253a:	f7ff fea9 	bl	8002290 <print>
			print (microrl_actions[i].help_msg);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	222c      	movs	r2, #44	; 0x2c
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	3308      	adds	r3, #8
 8002548:	4a10      	ldr	r2, [pc, #64]	; (800258c <print_help+0x1ac>)
 800254a:	4413      	add	r3, r2
 800254c:	3305      	adds	r3, #5
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fe9e 	bl	8002290 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3301      	adds	r3, #1
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2b11      	cmp	r3, #17
 800255e:	f67f af5d 	bls.w	800241c <print_help+0x3c>
		}
	}
	print(ENDL);
 8002562:	4805      	ldr	r0, [pc, #20]	; (8002578 <print_help+0x198>)
 8002564:	f7ff fe94 	bl	8002290 <print>
	return 0;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	371c      	adds	r7, #28
 800256e:	46bd      	mov	sp, r7
 8002570:	bd90      	pop	{r4, r7, pc}
 8002572:	bf00      	nop
 8002574:	0800ef04 	.word	0x0800ef04
 8002578:	0800ef14 	.word	0x0800ef14
 800257c:	0800ef18 	.word	0x0800ef18
 8002580:	0800ef20 	.word	0x0800ef20
 8002584:	0800ef24 	.word	0x0800ef24
 8002588:	0800ef38 	.word	0x0800ef38
 800258c:	0800f144 	.word	0x0800f144
 8002590:	0800ef4c 	.word	0x0800ef4c
 8002594:	0800ef54 	.word	0x0800ef54
 8002598:	0800ef58 	.word	0x0800ef58
 800259c:	0800f518 	.word	0x0800f518
 80025a0:	0800ef5c 	.word	0x0800ef5c
 80025a4:	0800ef60 	.word	0x0800ef60
 80025a8:	0800ef64 	.word	0x0800ef64

080025ac <execute>:



int execute (int argc, const char * const * argv)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 80025c2:	2300      	movs	r3, #0
 80025c4:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e056      	b.n	800267a <execute+0xce>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	e045      	b.n	800265e <execute+0xb2>
		{
			tokens_found = false;
 80025d2:	2300      	movs	r3, #0
 80025d4:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 80025d6:	4a55      	ldr	r2, [pc, #340]	; (800272c <execute+0x180>)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d001      	beq.n	80025f2 <execute+0x46>
				synonym_level = current_level; // save the synonym level
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d003      	beq.n	8002602 <execute+0x56>
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	429a      	cmp	r2, r3
 8002600:	db31      	blt.n	8002666 <execute+0xba>
				break;
			if (current_level == i)
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	429a      	cmp	r2, r3
 8002608:	d101      	bne.n	800260e <execute+0x62>
				last_main_synonym = n;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	4413      	add	r3, r2
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4942      	ldr	r1, [pc, #264]	; (800272c <execute+0x180>)
 8002622:	440b      	add	r3, r1
 8002624:	3304      	adds	r3, #4
 8002626:	4619      	mov	r1, r3
 8002628:	4610      	mov	r0, r2
 800262a:	f7fd fd91 	bl	8000150 <strcmp>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d111      	bne.n	8002658 <execute+0xac>
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	429a      	cmp	r2, r3
 800263a:	d10d      	bne.n	8002658 <execute+0xac>
					(i == synonym_level))
			{
				tokens_found = true;
 800263c:	2301      	movs	r3, #1
 800263e:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	623a      	str	r2, [r7, #32]
 8002646:	4a39      	ldr	r2, [pc, #228]	; (800272c <execute+0x180>)
 8002648:	212c      	movs	r1, #44	; 0x2c
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	4413      	add	r3, r2
 8002650:	3328      	adds	r3, #40	; 0x28
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8002656:	e007      	b.n	8002668 <execute+0xbc>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	3301      	adds	r3, #1
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b11      	cmp	r3, #17
 8002662:	d9b6      	bls.n	80025d2 <execute+0x26>
 8002664:	e000      	b.n	8002668 <execute+0xbc>
				break;
 8002666:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8002668:	7efb      	ldrb	r3, [r7, #27]
 800266a:	f083 0301 	eor.w	r3, r3, #1
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d107      	bne.n	8002684 <execute+0xd8>
	for (int i = 0; i < argc; i++)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3301      	adds	r3, #1
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	dba4      	blt.n	80025cc <execute+0x20>
 8002682:	e000      	b.n	8002686 <execute+0xda>
			break;
 8002684:	bf00      	nop
	}

	if (func != NULL)
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <execute+0xec>
	{
		return func(argc, argv); // function found
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	6839      	ldr	r1, [r7, #0]
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
 8002694:	4603      	mov	r3, r0
 8002696:	e045      	b.n	8002724 <execute+0x178>
	} else if (tokens_found)
 8002698:	7efb      	ldrb	r3, [r7, #27]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d021      	beq.n	80026e2 <execute+0x136>
	{
		print_color ("command: '", C_L_RED);
 800269e:	210a      	movs	r1, #10
 80026a0:	4823      	ldr	r0, [pc, #140]	; (8002730 <execute+0x184>)
 80026a2:	f7ff fe61 	bl	8002368 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	210a      	movs	r1, #10
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fe5b 	bl	8002368 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 80026b2:	210a      	movs	r1, #10
 80026b4:	481f      	ldr	r0, [pc, #124]	; (8002734 <execute+0x188>)
 80026b6:	f7ff fe57 	bl	8002368 <print_color>
		print(ENDL);
 80026ba:	481f      	ldr	r0, [pc, #124]	; (8002738 <execute+0x18c>)
 80026bc:	f7ff fde8 	bl	8002290 <print>
		print_color ("use '", C_NC);
 80026c0:	2100      	movs	r1, #0
 80026c2:	481e      	ldr	r0, [pc, #120]	; (800273c <execute+0x190>)
 80026c4:	f7ff fe50 	bl	8002368 <print_color>
		print_color ("?", C_GREEN);
 80026c8:	2105      	movs	r1, #5
 80026ca:	481d      	ldr	r0, [pc, #116]	; (8002740 <execute+0x194>)
 80026cc:	f7ff fe4c 	bl	8002368 <print_color>
		print_color ("' for help", C_NC);
 80026d0:	2100      	movs	r1, #0
 80026d2:	481c      	ldr	r0, [pc, #112]	; (8002744 <execute+0x198>)
 80026d4:	f7ff fe48 	bl	8002368 <print_color>
		print (ENDL);
 80026d8:	4817      	ldr	r0, [pc, #92]	; (8002738 <execute+0x18c>)
 80026da:	f7ff fdd9 	bl	8002290 <print>
		return 1;
 80026de:	2301      	movs	r3, #1
 80026e0:	e020      	b.n	8002724 <execute+0x178>
	}
	else
	{
		print_color ("command: '", C_RED);
 80026e2:	2109      	movs	r1, #9
 80026e4:	4812      	ldr	r0, [pc, #72]	; (8002730 <execute+0x184>)
 80026e6:	f7ff fe3f 	bl	8002368 <print_color>
		print_color ((char*)argv[0], C_RED);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2109      	movs	r1, #9
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fe39 	bl	8002368 <print_color>
		print_color ("' not found", C_RED);
 80026f6:	2109      	movs	r1, #9
 80026f8:	4813      	ldr	r0, [pc, #76]	; (8002748 <execute+0x19c>)
 80026fa:	f7ff fe35 	bl	8002368 <print_color>
		print(ENDL);
 80026fe:	480e      	ldr	r0, [pc, #56]	; (8002738 <execute+0x18c>)
 8002700:	f7ff fdc6 	bl	8002290 <print>
		print_color ("use '", C_NC);
 8002704:	2100      	movs	r1, #0
 8002706:	480d      	ldr	r0, [pc, #52]	; (800273c <execute+0x190>)
 8002708:	f7ff fe2e 	bl	8002368 <print_color>
		print_color ("?", C_GREEN);
 800270c:	2105      	movs	r1, #5
 800270e:	480c      	ldr	r0, [pc, #48]	; (8002740 <execute+0x194>)
 8002710:	f7ff fe2a 	bl	8002368 <print_color>
		print_color ("' for help", C_NC);
 8002714:	2100      	movs	r1, #0
 8002716:	480b      	ldr	r0, [pc, #44]	; (8002744 <execute+0x198>)
 8002718:	f7ff fe26 	bl	8002368 <print_color>
		print (ENDL);
 800271c:	4806      	ldr	r0, [pc, #24]	; (8002738 <execute+0x18c>)
 800271e:	f7ff fdb7 	bl	8002290 <print>
		return 1;
 8002722:	2301      	movs	r3, #1

	}
}
 8002724:	4618      	mov	r0, r3
 8002726:	3728      	adds	r7, #40	; 0x28
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	0800f144 	.word	0x0800f144
 8002730:	0800ef68 	.word	0x0800ef68
 8002734:	0800ef74 	.word	0x0800ef74
 8002738:	0800ef14 	.word	0x0800ef14
 800273c:	0800ef94 	.word	0x0800ef94
 8002740:	0800ef9c 	.word	0x0800ef9c
 8002744:	0800efa0 	.word	0x0800efa0
 8002748:	0800efac 	.word	0x0800efac

0800274c <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08c      	sub	sp, #48	; 0x30
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
	int j = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 800275a:	4b63      	ldr	r3, [pc, #396]	; (80028e8 <complet+0x19c>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d11f      	bne.n	80027a6 <complet+0x5a>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 8002766:	2300      	movs	r3, #0
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
 800276a:	e018      	b.n	800279e <complet+0x52>
			if (microrl_actions[i].level == 0)
 800276c:	4a5f      	ldr	r2, [pc, #380]	; (80028ec <complet+0x1a0>)
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	4413      	add	r3, r2
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10c      	bne.n	8002798 <complet+0x4c>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002786:	212c      	movs	r1, #44	; 0x2c
 8002788:	fb01 f202 	mul.w	r2, r1, r2
 800278c:	4957      	ldr	r1, [pc, #348]	; (80028ec <complet+0x1a0>)
 800278e:	440a      	add	r2, r1
 8002790:	3204      	adds	r2, #4
 8002792:	4955      	ldr	r1, [pc, #340]	; (80028e8 <complet+0x19c>)
 8002794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 8002798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279a:	3301      	adds	r3, #1
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	2b11      	cmp	r3, #17
 80027a2:	d9e3      	bls.n	800276c <complet+0x20>
 80027a4:	e095      	b.n	80028d2 <complet+0x186>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027ac:	3b01      	subs	r3, #1
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 80027c0:	2300      	movs	r3, #0
 80027c2:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 80027c4:	2300      	movs	r3, #0
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	e07c      	b.n	80028c4 <complet+0x178>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e06b      	b.n	80028a8 <complet+0x15c>
			{
				tokens_found = false;
 80027d0:	2300      	movs	r3, #0
 80027d2:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 80027d4:	4a45      	ldr	r2, [pc, #276]	; (80028ec <complet+0x1a0>)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ea:	d001      	beq.n	80027f0 <complet+0xa4>
					synonym_level = current_level; // save the synonym level
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f6:	d003      	beq.n	8002800 <complet+0xb4>
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	db57      	blt.n	80028b0 <complet+0x164>
					break;
				if (current_level == i)
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	429a      	cmp	r2, r3
 8002806:	d101      	bne.n	800280c <complet+0xc0>
					last_main_synonym = n;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3b01      	subs	r3, #1
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	429a      	cmp	r2, r3
 8002814:	d128      	bne.n	8002868 <complet+0x11c>
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	222c      	movs	r2, #44	; 0x2c
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	4a33      	ldr	r2, [pc, #204]	; (80028ec <complet+0x1a0>)
 8002820:	4413      	add	r3, r2
 8002822:	3304      	adds	r3, #4
 8002824:	6939      	ldr	r1, [r7, #16]
 8002826:	4618      	mov	r0, r3
 8002828:	f00c fad6 	bl	800edd8 <strstr>
 800282c:	4602      	mov	r2, r0
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	492d      	ldr	r1, [pc, #180]	; (80028ec <complet+0x1a0>)
 8002838:	440b      	add	r3, r1
 800283a:	3304      	adds	r3, #4
 800283c:	429a      	cmp	r2, r3
 800283e:	d113      	bne.n	8002868 <complet+0x11c>
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	429a      	cmp	r2, r3
 8002846:	d10f      	bne.n	8002868 <complet+0x11c>
										(i == synonym_level))
				{
					tokens_found = true;
 8002848:	2301      	movs	r3, #1
 800284a:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f202 	mul.w	r2, r1, r2
 800285a:	4924      	ldr	r1, [pc, #144]	; (80028ec <complet+0x1a0>)
 800285c:	440a      	add	r2, r1
 800285e:	3204      	adds	r2, #4
 8002860:	4921      	ldr	r1, [pc, #132]	; (80028e8 <complet+0x19c>)
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002866:	e01c      	b.n	80028a2 <complet+0x156>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	4413      	add	r3, r2
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	212c      	movs	r1, #44	; 0x2c
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	491c      	ldr	r1, [pc, #112]	; (80028ec <complet+0x1a0>)
 800287c:	440b      	add	r3, r1
 800287e:	3304      	adds	r3, #4
 8002880:	4619      	mov	r1, r3
 8002882:	4610      	mov	r0, r2
 8002884:	f7fd fc64 	bl	8000150 <strcmp>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <complet+0x156>
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	429a      	cmp	r2, r3
 8002894:	d105      	bne.n	80028a2 <complet+0x156>
				{
					last_main_synonym++;
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	3301      	adds	r3, #1
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 800289c:	2301      	movs	r3, #1
 800289e:	77fb      	strb	r3, [r7, #31]
					break;
 80028a0:	e007      	b.n	80028b2 <complet+0x166>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	3301      	adds	r3, #1
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b11      	cmp	r3, #17
 80028ac:	d990      	bls.n	80027d0 <complet+0x84>
 80028ae:	e000      	b.n	80028b2 <complet+0x166>
					break;
 80028b0:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 80028b2:	7ffb      	ldrb	r3, [r7, #31]
 80028b4:	f083 0301 	eor.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d108      	bne.n	80028d0 <complet+0x184>
		for (int i = 0; i < argc; i++)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	3301      	adds	r3, #1
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	f6ff af7e 	blt.w	80027ca <complet+0x7e>
 80028ce:	e000      	b.n	80028d2 <complet+0x186>
				break;
 80028d0:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 80028d2:	4a05      	ldr	r2, [pc, #20]	; (80028e8 <complet+0x19c>)
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d6:	2100      	movs	r1, #0
 80028d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 80028dc:	4b02      	ldr	r3, [pc, #8]	; (80028e8 <complet+0x19c>)
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3730      	adds	r7, #48	; 0x30
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20002500 	.word	0x20002500
 80028ec:	0800f144 	.word	0x0800f144

080028f0 <sigint>:
#endif


void sigint (void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <sigint+0x50>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
	show_clock = true;
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <sigint+0x54>)
 80028fe:	2201      	movs	r2, #1
 8002900:	701a      	strb	r2, [r3, #0]

	print (ENDL);
 8002902:	4811      	ldr	r0, [pc, #68]	; (8002948 <sigint+0x58>)
 8002904:	f7ff fcc4 	bl	8002290 <print>
	print ("^C catched!");
 8002908:	4810      	ldr	r0, [pc, #64]	; (800294c <sigint+0x5c>)
 800290a:	f7ff fcc1 	bl	8002290 <print>
	int i = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 8002912:	e009      	b.n	8002928 <sigint+0x38>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 8002914:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <sigint+0x60>)
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <sigint+0x58>)
 8002920:	5cd3      	ldrb	r3, [r2, r3]
 8002922:	4619      	mov	r1, r3
 8002924:	f7ff faa6 	bl	8001e74 <microrl_insert_char>
	while (ENTER[i])
 8002928:	4a07      	ldr	r2, [pc, #28]	; (8002948 <sigint+0x58>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ef      	bne.n	8002914 <sigint+0x24>
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200001af 	.word	0x200001af
 8002944:	2000000d 	.word	0x2000000d
 8002948:	0800ef14 	.word	0x0800ef14
 800294c:	0800efb8 	.word	0x0800efb8
 8002950:	20000008 	.word	0x20000008

08002954 <init_microrl>:

void init_microrl(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <init_microrl+0x38>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	490c      	ldr	r1, [pc, #48]	; (8002990 <init_microrl+0x3c>)
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe ff4a 	bl	80017f8 <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <init_microrl+0x38>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	490a      	ldr	r1, [pc, #40]	; (8002994 <init_microrl+0x40>)
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe ff90 	bl	8001890 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <init_microrl+0x38>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4908      	ldr	r1, [pc, #32]	; (8002998 <init_microrl+0x44>)
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe ff7c 	bl	8001874 <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <init_microrl+0x38>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4906      	ldr	r1, [pc, #24]	; (800299c <init_microrl+0x48>)
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe ff92 	bl	80018ac <microrl_set_sigint_callback>
}
 8002988:	bf00      	nop
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000008 	.word	0x20000008
 8002990:	08002291 	.word	0x08002291
 8002994:	080025ad 	.word	0x080025ad
 8002998:	0800274d 	.word	0x0800274d
 800299c:	080028f1 	.word	0x080028f1

080029a0 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 80029aa:	4805      	ldr	r0, [pc, #20]	; (80029c0 <clear_screen+0x20>)
 80029ac:	f7ff fc70 	bl	8002290 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 80029b0:	4804      	ldr	r0, [pc, #16]	; (80029c4 <clear_screen+0x24>)
 80029b2:	f7ff fc6d 	bl	8002290 <print>
	return 0;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	0800efc4 	.word	0x0800efc4
 80029c4:	0800efcc 	.word	0x0800efcc

080029c8 <set_CDC_ready>:


void set_CDC_ready(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <set_CDC_ready+0x14>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	200001ae 	.word	0x200001ae

080029e0 <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <color_toggle+0x30>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	f083 0301 	eor.w	r3, r3, #1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf14      	ite	ne
 80029f8:	2301      	movne	r3, #1
 80029fa:	2300      	moveq	r3, #0
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <color_toggle+0x30>)
 8002a00:	701a      	strb	r2, [r3, #0]
	return 0;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	2000000c 	.word	0x2000000c

08002a14 <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
	color_out = 1;
 8002a1e:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <color_on+0x28>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 8002a24:	2105      	movs	r1, #5
 8002a26:	4806      	ldr	r0, [pc, #24]	; (8002a40 <color_on+0x2c>)
 8002a28:	f7ff fc9e 	bl	8002368 <print_color>
	print(ENDL);
 8002a2c:	4805      	ldr	r0, [pc, #20]	; (8002a44 <color_on+0x30>)
 8002a2e:	f7ff fc2f 	bl	8002290 <print>
	return 0;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	2000000c 	.word	0x2000000c
 8002a40:	0800efd0 	.word	0x0800efd0
 8002a44:	0800ef14 	.word	0x0800ef14

08002a48 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
	color_out = 0;
 8002a52:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <color_off+0x28>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8002a58:	4806      	ldr	r0, [pc, #24]	; (8002a74 <color_off+0x2c>)
 8002a5a:	f7ff fc19 	bl	8002290 <print>
	print(ENDL);
 8002a5e:	4806      	ldr	r0, [pc, #24]	; (8002a78 <color_off+0x30>)
 8002a60:	f7ff fc16 	bl	8002290 <print>
	return 0;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2000000c 	.word	0x2000000c
 8002a74:	0800efe4 	.word	0x0800efe4
 8002a78:	0800ef14 	.word	0x0800ef14

08002a7c <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
	if (color_out)
 8002a86:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <color_show+0x34>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d004      	beq.n	8002a98 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8002a8e:	2105      	movs	r1, #5
 8002a90:	4808      	ldr	r0, [pc, #32]	; (8002ab4 <color_show+0x38>)
 8002a92:	f7ff fc69 	bl	8002368 <print_color>
 8002a96:	e002      	b.n	8002a9e <color_show+0x22>
	else
		print ("Color output is OFF");
 8002a98:	4807      	ldr	r0, [pc, #28]	; (8002ab8 <color_show+0x3c>)
 8002a9a:	f7ff fbf9 	bl	8002290 <print>
	print(ENDL);
 8002a9e:	4807      	ldr	r0, [pc, #28]	; (8002abc <color_show+0x40>)
 8002aa0:	f7ff fbf6 	bl	8002290 <print>
	return 0;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	2000000c 	.word	0x2000000c
 8002ab4:	0800efd0 	.word	0x0800efd0
 8002ab8:	0800efe4 	.word	0x0800efe4
 8002abc:	0800ef14 	.word	0x0800ef14

08002ac0 <vfd>:
	print(ENDL);
	return 0;
}

int vfd (int argc, const char * const * argv)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
	show_clock = false;
 8002aca:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <vfd+0x7c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < argc; i++)
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	e028      	b.n	8002b28 <vfd+0x68>
	{
		uint16_t temp = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	81fb      	strh	r3, [r7, #14]
		char * pchar = (char*)argv[i];
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	613b      	str	r3, [r7, #16]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <vfd+0x80>)
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	f107 010e 	add.w	r1, r7, #14
 8002aee:	2300      	movs	r3, #0
 8002af0:	2264      	movs	r2, #100	; 0x64
 8002af2:	f008 ffc1 	bl	800ba78 <xQueueGenericSend>
		while (*pchar)
 8002af6:	e010      	b.n	8002b1a <vfd+0x5a>
		{
			temp = get_char(*(pchar++));
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	613a      	str	r2, [r7, #16]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fae5 	bl	80030d0 <get_char>
 8002b06:	4603      	mov	r3, r0
 8002b08:	81fb      	strh	r3, [r7, #14]
			xQueueSendToBack(qVFDHandle, &temp, 100);
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <vfd+0x80>)
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	f107 010e 	add.w	r1, r7, #14
 8002b12:	2300      	movs	r3, #0
 8002b14:	2264      	movs	r2, #100	; 0x64
 8002b16:	f008 ffaf 	bl	800ba78 <xQueueGenericSend>
		while (*pchar)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1ea      	bne.n	8002af8 <vfd+0x38>
	for (int i = 1; i < argc; i++)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	3301      	adds	r3, #1
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	dbd2      	blt.n	8002ad6 <vfd+0x16>
		}
	}
	return 0;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	2000000d 	.word	0x2000000d
 8002b40:	20002490 	.word	0x20002490

08002b44 <leds_toggle>:
	return nema_out;
}


int leds_toggle		(int argc, const char * const * argv)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
	use_leds ^= 1;
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <leds_toggle+0x3c>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	f083 0301 	eor.w	r3, r3, #1
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <leds_toggle+0x3c>)
 8002b64:	701a      	strb	r2, [r3, #0]
	print_color("Done", C_GREEN);
 8002b66:	2105      	movs	r1, #5
 8002b68:	4806      	ldr	r0, [pc, #24]	; (8002b84 <leds_toggle+0x40>)
 8002b6a:	f7ff fbfd 	bl	8002368 <print_color>
	print(ENDL);
 8002b6e:	4806      	ldr	r0, [pc, #24]	; (8002b88 <leds_toggle+0x44>)
 8002b70:	f7ff fb8e 	bl	8002290 <print>
	return 0;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	200001b0 	.word	0x200001b0
 8002b84:	0800eff8 	.word	0x0800eff8
 8002b88:	0800ef14 	.word	0x0800ef14

08002b8c <set_td>:



int set_td		(int argc, const char * const * argv)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
	if (argc == 3 && str_length(argv[2]) == 6)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d140      	bne.n	8002c1e <set_td+0x92>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	3308      	adds	r3, #8
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fc06 	bl	80023b4 <str_length>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d137      	bne.n	8002c1e <set_td+0x92>
	{
		uint8_t arr [3];
		for (int i = 0; i < 3; i++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	e021      	b.n	8002bf8 <set_td+0x6c>
		{
			arr[2-i] = (argv[2][i*2+1]-'0')+((argv[2][i*2]-'0')<<4);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	3308      	adds	r3, #8
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	781a      	ldrb	r2, [r3, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	3308      	adds	r3, #8
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68f9      	ldr	r1, [r7, #12]
 8002bcc:	0049      	lsls	r1, r1, #1
 8002bce:	440b      	add	r3, r1
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	3b30      	subs	r3, #48	; 0x30
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f1c3 0302 	rsb	r3, r3, #2
 8002be4:	3a30      	subs	r2, #48	; 0x30
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	f107 0110 	add.w	r1, r7, #16
 8002bec:	440b      	add	r3, r1
 8002bee:	f803 2c08 	strb.w	r2, [r3, #-8]
		for (int i = 0; i < 3; i++)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	ddda      	ble.n	8002bb4 <set_td+0x28>
		}
		d3231_set(arr, argv[0][0] == 'd');
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b64      	cmp	r3, #100	; 0x64
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	f107 0308 	add.w	r3, r7, #8
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fb25 	bl	8000264 <d3231_set>
		return 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e007      	b.n	8002c2e <set_td+0xa2>
	}
	print_color("wrong format", C_RED);
 8002c1e:	2109      	movs	r1, #9
 8002c20:	4805      	ldr	r0, [pc, #20]	; (8002c38 <set_td+0xac>)
 8002c22:	f7ff fba1 	bl	8002368 <print_color>
	print(ENDL);
 8002c26:	4805      	ldr	r0, [pc, #20]	; (8002c3c <set_td+0xb0>)
 8002c28:	f7ff fb32 	bl	8002290 <print>
	return 0;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	0800f000 	.word	0x0800f000
 8002c3c:	0800ef14 	.word	0x0800ef14

08002c40 <get_td>:

int get_td		(int argc, const char * const * argv)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
	bool date = argv[0][0] == 'd';
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b64      	cmp	r3, #100	; 0x64
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	77fb      	strb	r3, [r7, #31]
	char str[9];
	uint8_t * d3231 = d3231_get_all();
 8002c5a:	f7fd fadb 	bl	8000214 <d3231_get_all>
 8002c5e:	61b8      	str	r0, [r7, #24]
	uint8_t offset = date*4;
 8002c60:	7ffb      	ldrb	r3, [r7, #31]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	75fb      	strb	r3, [r7, #23]
	str[8] = '\0';
 8002c66:	2300      	movs	r3, #0
 8002c68:	753b      	strb	r3, [r7, #20]
	str[7] = (d3231[offset + 0]&0xF) + '0';
 8002c6a:	7dfb      	ldrb	r3, [r7, #23]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4413      	add	r3, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	3330      	adds	r3, #48	; 0x30
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	74fb      	strb	r3, [r7, #19]
	str[6] = ((d3231[offset + 0]>>4)&0xF) + '0';
 8002c7e:	7dfb      	ldrb	r3, [r7, #23]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4413      	add	r3, r2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	091b      	lsrs	r3, r3, #4
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	3330      	adds	r3, #48	; 0x30
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	74bb      	strb	r3, [r7, #18]
	str[4] = (d3231[offset + 1]&0xF) + '0';
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	3301      	adds	r3, #1
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4413      	add	r3, r2
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	3330      	adds	r3, #48	; 0x30
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	743b      	strb	r3, [r7, #16]
	str[3] = ((d3231[offset + 1]>>4)&0xF) + '0';
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4413      	add	r3, r2
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	3330      	adds	r3, #48	; 0x30
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	73fb      	strb	r3, [r7, #15]
	str[1] = (d3231[offset + 2]&0xF) + '0';
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	3330      	adds	r3, #48	; 0x30
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	737b      	strb	r3, [r7, #13]
	str[0] = ((d3231[offset + 2]>>4)&0xF) + '0';
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	3330      	adds	r3, #48	; 0x30
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	733b      	strb	r3, [r7, #12]
	str[5] = str[2] = date?'-':':';
 8002ce4:	7ffb      	ldrb	r3, [r7, #31]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <get_td+0xae>
 8002cea:	232d      	movs	r3, #45	; 0x2d
 8002cec:	e000      	b.n	8002cf0 <get_td+0xb0>
 8002cee:	233a      	movs	r3, #58	; 0x3a
 8002cf0:	73bb      	strb	r3, [r7, #14]
 8002cf2:	7bbb      	ldrb	r3, [r7, #14]
 8002cf4:	747b      	strb	r3, [r7, #17]
	print_color(str, C_L_BLUE);
 8002cf6:	f107 030c 	add.w	r3, r7, #12
 8002cfa:	2104      	movs	r1, #4
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fb33 	bl	8002368 <print_color>
	print(ENDL);
 8002d02:	4804      	ldr	r0, [pc, #16]	; (8002d14 <get_td+0xd4>)
 8002d04:	f7ff fac4 	bl	8002290 <print>
	return 0;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3720      	adds	r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	0800ef14 	.word	0x0800ef14

08002d18 <get_temp>:

int get_temp		(int argc, const char * const * argv)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	; 0x28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
	uint8_t * d3231 = d3231_get_temp();
 8002d22:	f7fd fa4f 	bl	80001c4 <d3231_get_temp>
 8002d26:	61b8      	str	r0, [r7, #24]

	bool negative = d3231[0]&(1<<7);
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	75fb      	strb	r3, [r7, #23]
	uint16_t temp = d3231[0]&(~(1<<7));
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d44:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t dec   = d3231[1]>>6;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	099b      	lsrs	r3, r3, #6
 8002d4e:	75bb      	strb	r3, [r7, #22]

	dec *= 25; // calculate decimal part
 8002d50:	7dbb      	ldrb	r3, [r7, #22]
 8002d52:	461a      	mov	r2, r3
 8002d54:	0092      	lsls	r2, r2, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	0091      	lsls	r1, r2, #2
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4413      	add	r3, r2
 8002d62:	75bb      	strb	r3, [r7, #22]
	temp *= 1000;
 8002d64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d66:	461a      	mov	r2, r3
 8002d68:	0152      	lsls	r2, r2, #5
 8002d6a:	1ad2      	subs	r2, r2, r3
 8002d6c:	0092      	lsls	r2, r2, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	84fb      	strh	r3, [r7, #38]	; 0x26
	temp += dec;
 8002d74:	7dbb      	ldrb	r3, [r7, #22]
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d7a:	4413      	add	r3, r2
 8002d7c:	84fb      	strh	r3, [r7, #38]	; 0x26


	char str[8];
	str[7] = '\0';
 8002d7e:	2300      	movs	r3, #0
 8002d80:	74fb      	strb	r3, [r7, #19]
	for (int i = 6; i >= 0; i--)
 8002d82:	2306      	movs	r3, #6
 8002d84:	623b      	str	r3, [r7, #32]
 8002d86:	e01c      	b.n	8002dc2 <get_temp+0xaa>
	{
		str[i] = (temp % 10) + '0';
 8002d88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d8a:	4b2c      	ldr	r3, [pc, #176]	; (8002e3c <get_temp+0x124>)
 8002d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d90:	08d9      	lsrs	r1, r3, #3
 8002d92:	460b      	mov	r3, r1
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	3330      	adds	r3, #48	; 0x30
 8002da2:	b2d9      	uxtb	r1, r3
 8002da4:	f107 020c 	add.w	r2, r7, #12
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	4413      	add	r3, r2
 8002dac:	460a      	mov	r2, r1
 8002dae:	701a      	strb	r2, [r3, #0]
		temp /= 10;
 8002db0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002db2:	4a22      	ldr	r2, [pc, #136]	; (8002e3c <get_temp+0x124>)
 8002db4:	fba2 2303 	umull	r2, r3, r2, r3
 8002db8:	08db      	lsrs	r3, r3, #3
 8002dba:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 6; i >= 0; i--)
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	623b      	str	r3, [r7, #32]
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	dadf      	bge.n	8002d88 <get_temp+0x70>
	}
	str[4] = '.';
 8002dc8:	232e      	movs	r3, #46	; 0x2e
 8002dca:	743b      	strb	r3, [r7, #16]
	for (int i = 0; i < 7; i++)
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	e020      	b.n	8002e14 <get_temp+0xfc>
	{
		if (str[i] != '0')
 8002dd2:	f107 020c 	add.w	r2, r7, #12
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	4413      	add	r3, r2
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b30      	cmp	r3, #48	; 0x30
 8002dde:	d010      	beq.n	8002e02 <get_temp+0xea>
		{
			if (i > 0)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	dd1a      	ble.n	8002e1c <get_temp+0x104>
				str[i-1] = negative?'-':'+';
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <get_temp+0xd8>
 8002dec:	222d      	movs	r2, #45	; 0x2d
 8002dee:	e000      	b.n	8002df2 <get_temp+0xda>
 8002df0:	222b      	movs	r2, #43	; 0x2b
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f803 2c1c 	strb.w	r2, [r3, #-28]
			break;
 8002e00:	e00c      	b.n	8002e1c <get_temp+0x104>
		}
		str[i] = ' ';
 8002e02:	f107 020c 	add.w	r2, r7, #12
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4413      	add	r3, r2
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 7; i++)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3301      	adds	r3, #1
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	dddb      	ble.n	8002dd2 <get_temp+0xba>
 8002e1a:	e000      	b.n	8002e1e <get_temp+0x106>
			break;
 8002e1c:	bf00      	nop
	}
	print_color(str, C_GREEN);
 8002e1e:	f107 030c 	add.w	r3, r7, #12
 8002e22:	2105      	movs	r1, #5
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fa9f 	bl	8002368 <print_color>
	print(ENDL);
 8002e2a:	4805      	ldr	r0, [pc, #20]	; (8002e40 <get_temp+0x128>)
 8002e2c:	f7ff fa30 	bl	8002290 <print>
	return 0;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3728      	adds	r7, #40	; 0x28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	cccccccd 	.word	0xcccccccd
 8002e40:	0800ef14 	.word	0x0800ef14

08002e44 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002e48:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <MX_SPI2_Init+0x64>)
 8002e4a:	4a18      	ldr	r2, [pc, #96]	; (8002eac <MX_SPI2_Init+0x68>)
 8002e4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <MX_SPI2_Init+0x64>)
 8002e50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <MX_SPI2_Init+0x64>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e5c:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <MX_SPI2_Init+0x64>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002e62:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <MX_SPI2_Init+0x64>)
 8002e64:	2202      	movs	r2, #2
 8002e66:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <MX_SPI2_Init+0x64>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <MX_SPI2_Init+0x64>)
 8002e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e74:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e76:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <MX_SPI2_Init+0x64>)
 8002e78:	2218      	movs	r2, #24
 8002e7a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <MX_SPI2_Init+0x64>)
 8002e7e:	2280      	movs	r2, #128	; 0x80
 8002e80:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <MX_SPI2_Init+0x64>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e88:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <MX_SPI2_Init+0x64>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002e8e:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <MX_SPI2_Init+0x64>)
 8002e90:	220a      	movs	r2, #10
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e94:	4804      	ldr	r0, [pc, #16]	; (8002ea8 <MX_SPI2_Init+0x64>)
 8002e96:	f003 fe75 	bl	8006b84 <HAL_SPI_Init>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002ea0:	f7fe f95a 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200025ec 	.word	0x200025ec
 8002eac:	40003800 	.word	0x40003800

08002eb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	f107 0310 	add.w	r3, r7, #16
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <HAL_SPI_MspInit+0x8c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d131      	bne.n	8002f34 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <HAL_SPI_MspInit+0x90>)
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	4a1a      	ldr	r2, [pc, #104]	; (8002f40 <HAL_SPI_MspInit+0x90>)
 8002ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eda:	61d3      	str	r3, [r2, #28]
 8002edc:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <HAL_SPI_MspInit+0x90>)
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee8:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <HAL_SPI_MspInit+0x90>)
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <HAL_SPI_MspInit+0x90>)
 8002eee:	f043 0308 	orr.w	r3, r3, #8
 8002ef2:	6193      	str	r3, [r2, #24]
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_SPI_MspInit+0x90>)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002f00:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002f04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f0e:	f107 0310 	add.w	r3, r7, #16
 8002f12:	4619      	mov	r1, r3
 8002f14:	480b      	ldr	r0, [pc, #44]	; (8002f44 <HAL_SPI_MspInit+0x94>)
 8002f16:	f000 fa7f 	bl	8003418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002f1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f28:	f107 0310 	add.w	r3, r7, #16
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4805      	ldr	r0, [pc, #20]	; (8002f44 <HAL_SPI_MspInit+0x94>)
 8002f30:	f000 fa72 	bl	8003418 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002f34:	bf00      	nop
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40003800 	.word	0x40003800
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40010c00 	.word	0x40010c00

08002f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f4e:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <HAL_MspInit+0x68>)
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	4a17      	ldr	r2, [pc, #92]	; (8002fb0 <HAL_MspInit+0x68>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6193      	str	r3, [r2, #24]
 8002f5a:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <HAL_MspInit+0x68>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <HAL_MspInit+0x68>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <HAL_MspInit+0x68>)
 8002f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f70:	61d3      	str	r3, [r2, #28]
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <HAL_MspInit+0x68>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	607b      	str	r3, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	210f      	movs	r1, #15
 8002f82:	f06f 0001 	mvn.w	r0, #1
 8002f86:	f000 fa1c 	bl	80033c2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_MspInit+0x6c>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <HAL_MspInit+0x6c>)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40010000 	.word	0x40010000

08002fb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08c      	sub	sp, #48	; 0x30
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	2019      	movs	r0, #25
 8002fce:	f000 f9f8 	bl	80033c2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002fd2:	2019      	movs	r0, #25
 8002fd4:	f000 fa11 	bl	80033fa <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002fd8:	4b1e      	ldr	r3, [pc, #120]	; (8003054 <HAL_InitTick+0x9c>)
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	4a1d      	ldr	r2, [pc, #116]	; (8003054 <HAL_InitTick+0x9c>)
 8002fde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fe2:	6193      	str	r3, [r2, #24]
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <HAL_InitTick+0x9c>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ff0:	f107 0210 	add.w	r2, r7, #16
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 fcbe 	bl	800697c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003000:	f003 fca8 	bl	8006954 <HAL_RCC_GetPCLK2Freq>
 8003004:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	4a13      	ldr	r2, [pc, #76]	; (8003058 <HAL_InitTick+0xa0>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0c9b      	lsrs	r3, r3, #18
 8003010:	3b01      	subs	r3, #1
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_InitTick+0xa4>)
 8003016:	4a12      	ldr	r2, [pc, #72]	; (8003060 <HAL_InitTick+0xa8>)
 8003018:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <HAL_InitTick+0xa4>)
 800301c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003020:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003022:	4a0e      	ldr	r2, [pc, #56]	; (800305c <HAL_InitTick+0xa4>)
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <HAL_InitTick+0xa4>)
 800302a:	2200      	movs	r2, #0
 800302c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_InitTick+0xa4>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003034:	4809      	ldr	r0, [pc, #36]	; (800305c <HAL_InitTick+0xa4>)
 8003036:	f004 f80b 	bl	8007050 <HAL_TIM_Base_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d104      	bne.n	800304a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003040:	4806      	ldr	r0, [pc, #24]	; (800305c <HAL_InitTick+0xa4>)
 8003042:	f004 f85d 	bl	8007100 <HAL_TIM_Base_Start_IT>
 8003046:	4603      	mov	r3, r0
 8003048:	e000      	b.n	800304c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
}
 800304c:	4618      	mov	r0, r3
 800304e:	3730      	adds	r7, #48	; 0x30
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	431bde83 	.word	0x431bde83
 800305c:	20002644 	.word	0x20002644
 8003060:	40012c00 	.word	0x40012c00

08003064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003068:	e7fe      	b.n	8003068 <NMI_Handler+0x4>

0800306a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800306e:	e7fe      	b.n	800306e <HardFault_Handler+0x4>

08003070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003074:	e7fe      	b.n	8003074 <MemManage_Handler+0x4>

08003076 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003076:	b480      	push	{r7}
 8003078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800307a:	e7fe      	b.n	800307a <BusFault_Handler+0x4>

0800307c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003080:	e7fe      	b.n	8003080 <UsageFault_Handler+0x4>

08003082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003092:	2001      	movs	r0, #1
 8003094:	f000 fb8c 	bl	80037b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}

0800309c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80030a0:	4802      	ldr	r0, [pc, #8]	; (80030ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80030a2:	f001 fcd8 	bl	8004a56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20003364 	.word	0x20003364

080030b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030b4:	4802      	ldr	r0, [pc, #8]	; (80030c0 <TIM1_UP_IRQHandler+0x10>)
 80030b6:	f004 f875 	bl	80071a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20002644 	.word	0x20002644

080030c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <get_char>:
const uint8_t ALPHAS = (sizeof(vfd_alpha)/sizeof(vfd_alpha[0]));
const uint8_t ALPHAR = (sizeof(vfd_alpha_ru)/sizeof(vfd_alpha_ru[0]));
const uint8_t SPECIAL = (sizeof(vfd_special)/sizeof(vfd_special[0]));

uint16_t get_char(char input)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
	if ('0' <= input && input <= '9')
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	2b2f      	cmp	r3, #47	; 0x2f
 80030de:	d908      	bls.n	80030f2 <get_char+0x22>
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	2b39      	cmp	r3, #57	; 0x39
 80030e4:	d805      	bhi.n	80030f2 <get_char+0x22>
		return vfd_digits[input - '0'];
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	3b30      	subs	r3, #48	; 0x30
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <get_char+0xc4>)
 80030ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030f0:	e04a      	b.n	8003188 <get_char+0xb8>
	if (0 <= input && input <= 9)
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	2b09      	cmp	r3, #9
 80030f6:	d804      	bhi.n	8003102 <get_char+0x32>
		return vfd_digits[(uint8_t)input];
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	4a26      	ldr	r2, [pc, #152]	; (8003194 <get_char+0xc4>)
 80030fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003100:	e042      	b.n	8003188 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	e00e      	b.n	8003126 <get_char+0x56>
		if (vfd_special_char[i] == input)
 8003108:	4a23      	ldr	r2, [pc, #140]	; (8003198 <get_char+0xc8>)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4413      	add	r3, r2
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	79fa      	ldrb	r2, [r7, #7]
 8003112:	429a      	cmp	r2, r3
 8003114:	d104      	bne.n	8003120 <get_char+0x50>
			return vfd_special[i];
 8003116:	4a21      	ldr	r2, [pc, #132]	; (800319c <get_char+0xcc>)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800311e:	e033      	b.n	8003188 <get_char+0xb8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	3301      	adds	r3, #1
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b15      	cmp	r3, #21
 800312a:	d9ed      	bls.n	8003108 <get_char+0x38>
	if ('a' <= input && input <= 'z')
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	2b60      	cmp	r3, #96	; 0x60
 8003130:	d908      	bls.n	8003144 <get_char+0x74>
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	2b7a      	cmp	r3, #122	; 0x7a
 8003136:	d805      	bhi.n	8003144 <get_char+0x74>
		return vfd_alpha[input - 'a'];
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	3b61      	subs	r3, #97	; 0x61
 800313c:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <get_char+0xd0>)
 800313e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003142:	e021      	b.n	8003188 <get_char+0xb8>
	if ('A' <= input && input <= 'Z')
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	2b40      	cmp	r3, #64	; 0x40
 8003148:	d908      	bls.n	800315c <get_char+0x8c>
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	2b5a      	cmp	r3, #90	; 0x5a
 800314e:	d805      	bhi.n	800315c <get_char+0x8c>
		return vfd_alpha[input - 'A'];
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	3b41      	subs	r3, #65	; 0x41
 8003154:	4a12      	ldr	r2, [pc, #72]	; (80031a0 <get_char+0xd0>)
 8003156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800315a:	e015      	b.n	8003188 <get_char+0xb8>
	if (192 <= input && input <= 223)
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	2bbf      	cmp	r3, #191	; 0xbf
 8003160:	d908      	bls.n	8003174 <get_char+0xa4>
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	2bdf      	cmp	r3, #223	; 0xdf
 8003166:	d805      	bhi.n	8003174 <get_char+0xa4>
		return vfd_alpha_ru[input - 192];
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	3bc0      	subs	r3, #192	; 0xc0
 800316c:	4a0d      	ldr	r2, [pc, #52]	; (80031a4 <get_char+0xd4>)
 800316e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003172:	e009      	b.n	8003188 <get_char+0xb8>
	if (224 <= input && input <= 255)
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	2bdf      	cmp	r3, #223	; 0xdf
 8003178:	d905      	bls.n	8003186 <get_char+0xb6>
		return vfd_alpha_ru[input - 224];
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	3be0      	subs	r3, #224	; 0xe0
 800317e:	4a09      	ldr	r2, [pc, #36]	; (80031a4 <get_char+0xd4>)
 8003180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003184:	e000      	b.n	8003188 <get_char+0xb8>
	return 0;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	0800f534 	.word	0x0800f534
 8003198:	0800f5e8 	.word	0x0800f5e8
 800319c:	0800f5bc 	.word	0x0800f5bc
 80031a0:	0800f548 	.word	0x0800f548
 80031a4:	0800f57c 	.word	0x0800f57c

080031a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031a8:	480c      	ldr	r0, [pc, #48]	; (80031dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031aa:	490d      	ldr	r1, [pc, #52]	; (80031e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031ac:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b0:	e002      	b.n	80031b8 <LoopCopyDataInit>

080031b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031b6:	3304      	adds	r3, #4

080031b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031bc:	d3f9      	bcc.n	80031b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031be:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031c0:	4c0a      	ldr	r4, [pc, #40]	; (80031ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80031c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c4:	e001      	b.n	80031ca <LoopFillZerobss>

080031c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031c8:	3204      	adds	r2, #4

080031ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031cc:	d3fb      	bcc.n	80031c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031ce:	f7ff ff79 	bl	80030c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031d2:	f00b fdad 	bl	800ed30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031d6:	f7fd ff3f 	bl	8001058 <main>
  bx lr
 80031da:	4770      	bx	lr
  ldr r0, =_sdata
 80031dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e0:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80031e4:	0800f608 	.word	0x0800f608
  ldr r2, =_sbss
 80031e8:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80031ec:	20003650 	.word	0x20003650

080031f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031f0:	e7fe      	b.n	80031f0 <ADC1_2_IRQHandler>
	...

080031f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <HAL_Init+0x28>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a07      	ldr	r2, [pc, #28]	; (800321c <HAL_Init+0x28>)
 80031fe:	f043 0310 	orr.w	r3, r3, #16
 8003202:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003204:	2003      	movs	r0, #3
 8003206:	f000 f8d1 	bl	80033ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800320a:	2000      	movs	r0, #0
 800320c:	f7ff fed4 	bl	8002fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003210:	f7ff fe9a 	bl	8002f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40022000 	.word	0x40022000

08003220 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_IncTick+0x1c>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_IncTick+0x20>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4413      	add	r3, r2
 8003230:	4a03      	ldr	r2, [pc, #12]	; (8003240 <HAL_IncTick+0x20>)
 8003232:	6013      	str	r3, [r2, #0]
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	20000018 	.word	0x20000018
 8003240:	2000268c 	.word	0x2000268c

08003244 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return uwTick;
 8003248:	4b02      	ldr	r3, [pc, #8]	; (8003254 <HAL_GetTick+0x10>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	2000268c 	.word	0x2000268c

08003258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <__NVIC_SetPriorityGrouping+0x44>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003274:	4013      	ands	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800328a:	4a04      	ldr	r2, [pc, #16]	; (800329c <__NVIC_SetPriorityGrouping+0x44>)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	60d3      	str	r3, [r2, #12]
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032a4:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <__NVIC_GetPriorityGrouping+0x18>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	0a1b      	lsrs	r3, r3, #8
 80032aa:	f003 0307 	and.w	r3, r3, #7
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	db0b      	blt.n	80032e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	f003 021f 	and.w	r2, r3, #31
 80032d4:	4906      	ldr	r1, [pc, #24]	; (80032f0 <__NVIC_EnableIRQ+0x34>)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2001      	movs	r0, #1
 80032de:	fa00 f202 	lsl.w	r2, r0, r2
 80032e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	e000e100 	.word	0xe000e100

080032f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	6039      	str	r1, [r7, #0]
 80032fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003304:	2b00      	cmp	r3, #0
 8003306:	db0a      	blt.n	800331e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	b2da      	uxtb	r2, r3
 800330c:	490c      	ldr	r1, [pc, #48]	; (8003340 <__NVIC_SetPriority+0x4c>)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	0112      	lsls	r2, r2, #4
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	440b      	add	r3, r1
 8003318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800331c:	e00a      	b.n	8003334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	b2da      	uxtb	r2, r3
 8003322:	4908      	ldr	r1, [pc, #32]	; (8003344 <__NVIC_SetPriority+0x50>)
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	3b04      	subs	r3, #4
 800332c:	0112      	lsls	r2, r2, #4
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	440b      	add	r3, r1
 8003332:	761a      	strb	r2, [r3, #24]
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000e100 	.word	0xe000e100
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003348:	b480      	push	{r7}
 800334a:	b089      	sub	sp, #36	; 0x24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f1c3 0307 	rsb	r3, r3, #7
 8003362:	2b04      	cmp	r3, #4
 8003364:	bf28      	it	cs
 8003366:	2304      	movcs	r3, #4
 8003368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3304      	adds	r3, #4
 800336e:	2b06      	cmp	r3, #6
 8003370:	d902      	bls.n	8003378 <NVIC_EncodePriority+0x30>
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3b03      	subs	r3, #3
 8003376:	e000      	b.n	800337a <NVIC_EncodePriority+0x32>
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800337c:	f04f 32ff 	mov.w	r2, #4294967295
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43da      	mvns	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	401a      	ands	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003390:	f04f 31ff 	mov.w	r1, #4294967295
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	fa01 f303 	lsl.w	r3, r1, r3
 800339a:	43d9      	mvns	r1, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a0:	4313      	orrs	r3, r2
         );
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3724      	adds	r7, #36	; 0x24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff4f 	bl	8003258 <__NVIC_SetPriorityGrouping>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b086      	sub	sp, #24
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033d4:	f7ff ff64 	bl	80032a0 <__NVIC_GetPriorityGrouping>
 80033d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	6978      	ldr	r0, [r7, #20]
 80033e0:	f7ff ffb2 	bl	8003348 <NVIC_EncodePriority>
 80033e4:	4602      	mov	r2, r0
 80033e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff81 	bl	80032f4 <__NVIC_SetPriority>
}
 80033f2:	bf00      	nop
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff57 	bl	80032bc <__NVIC_EnableIRQ>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003418:	b480      	push	{r7}
 800341a:	b08b      	sub	sp, #44	; 0x2c
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003422:	2300      	movs	r3, #0
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003426:	2300      	movs	r3, #0
 8003428:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800342a:	e169      	b.n	8003700 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800342c:	2201      	movs	r2, #1
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	429a      	cmp	r2, r3
 8003446:	f040 8158 	bne.w	80036fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4a9a      	ldr	r2, [pc, #616]	; (80036b8 <HAL_GPIO_Init+0x2a0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d05e      	beq.n	8003512 <HAL_GPIO_Init+0xfa>
 8003454:	4a98      	ldr	r2, [pc, #608]	; (80036b8 <HAL_GPIO_Init+0x2a0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d875      	bhi.n	8003546 <HAL_GPIO_Init+0x12e>
 800345a:	4a98      	ldr	r2, [pc, #608]	; (80036bc <HAL_GPIO_Init+0x2a4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d058      	beq.n	8003512 <HAL_GPIO_Init+0xfa>
 8003460:	4a96      	ldr	r2, [pc, #600]	; (80036bc <HAL_GPIO_Init+0x2a4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d86f      	bhi.n	8003546 <HAL_GPIO_Init+0x12e>
 8003466:	4a96      	ldr	r2, [pc, #600]	; (80036c0 <HAL_GPIO_Init+0x2a8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d052      	beq.n	8003512 <HAL_GPIO_Init+0xfa>
 800346c:	4a94      	ldr	r2, [pc, #592]	; (80036c0 <HAL_GPIO_Init+0x2a8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d869      	bhi.n	8003546 <HAL_GPIO_Init+0x12e>
 8003472:	4a94      	ldr	r2, [pc, #592]	; (80036c4 <HAL_GPIO_Init+0x2ac>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d04c      	beq.n	8003512 <HAL_GPIO_Init+0xfa>
 8003478:	4a92      	ldr	r2, [pc, #584]	; (80036c4 <HAL_GPIO_Init+0x2ac>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d863      	bhi.n	8003546 <HAL_GPIO_Init+0x12e>
 800347e:	4a92      	ldr	r2, [pc, #584]	; (80036c8 <HAL_GPIO_Init+0x2b0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d046      	beq.n	8003512 <HAL_GPIO_Init+0xfa>
 8003484:	4a90      	ldr	r2, [pc, #576]	; (80036c8 <HAL_GPIO_Init+0x2b0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d85d      	bhi.n	8003546 <HAL_GPIO_Init+0x12e>
 800348a:	2b12      	cmp	r3, #18
 800348c:	d82a      	bhi.n	80034e4 <HAL_GPIO_Init+0xcc>
 800348e:	2b12      	cmp	r3, #18
 8003490:	d859      	bhi.n	8003546 <HAL_GPIO_Init+0x12e>
 8003492:	a201      	add	r2, pc, #4	; (adr r2, 8003498 <HAL_GPIO_Init+0x80>)
 8003494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003498:	08003513 	.word	0x08003513
 800349c:	080034ed 	.word	0x080034ed
 80034a0:	080034ff 	.word	0x080034ff
 80034a4:	08003541 	.word	0x08003541
 80034a8:	08003547 	.word	0x08003547
 80034ac:	08003547 	.word	0x08003547
 80034b0:	08003547 	.word	0x08003547
 80034b4:	08003547 	.word	0x08003547
 80034b8:	08003547 	.word	0x08003547
 80034bc:	08003547 	.word	0x08003547
 80034c0:	08003547 	.word	0x08003547
 80034c4:	08003547 	.word	0x08003547
 80034c8:	08003547 	.word	0x08003547
 80034cc:	08003547 	.word	0x08003547
 80034d0:	08003547 	.word	0x08003547
 80034d4:	08003547 	.word	0x08003547
 80034d8:	08003547 	.word	0x08003547
 80034dc:	080034f5 	.word	0x080034f5
 80034e0:	08003509 	.word	0x08003509
 80034e4:	4a79      	ldr	r2, [pc, #484]	; (80036cc <HAL_GPIO_Init+0x2b4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034ea:	e02c      	b.n	8003546 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	623b      	str	r3, [r7, #32]
          break;
 80034f2:	e029      	b.n	8003548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	3304      	adds	r3, #4
 80034fa:	623b      	str	r3, [r7, #32]
          break;
 80034fc:	e024      	b.n	8003548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	3308      	adds	r3, #8
 8003504:	623b      	str	r3, [r7, #32]
          break;
 8003506:	e01f      	b.n	8003548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	330c      	adds	r3, #12
 800350e:	623b      	str	r3, [r7, #32]
          break;
 8003510:	e01a      	b.n	8003548 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800351a:	2304      	movs	r3, #4
 800351c:	623b      	str	r3, [r7, #32]
          break;
 800351e:	e013      	b.n	8003548 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d105      	bne.n	8003534 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003528:	2308      	movs	r3, #8
 800352a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	611a      	str	r2, [r3, #16]
          break;
 8003532:	e009      	b.n	8003548 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003534:	2308      	movs	r3, #8
 8003536:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	615a      	str	r2, [r3, #20]
          break;
 800353e:	e003      	b.n	8003548 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003540:	2300      	movs	r3, #0
 8003542:	623b      	str	r3, [r7, #32]
          break;
 8003544:	e000      	b.n	8003548 <HAL_GPIO_Init+0x130>
          break;
 8003546:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2bff      	cmp	r3, #255	; 0xff
 800354c:	d801      	bhi.n	8003552 <HAL_GPIO_Init+0x13a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	e001      	b.n	8003556 <HAL_GPIO_Init+0x13e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3304      	adds	r3, #4
 8003556:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2bff      	cmp	r3, #255	; 0xff
 800355c:	d802      	bhi.n	8003564 <HAL_GPIO_Init+0x14c>
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	e002      	b.n	800356a <HAL_GPIO_Init+0x152>
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	3b08      	subs	r3, #8
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	210f      	movs	r1, #15
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	fa01 f303 	lsl.w	r3, r1, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	401a      	ands	r2, r3
 800357c:	6a39      	ldr	r1, [r7, #32]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	431a      	orrs	r2, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80b1 	beq.w	80036fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003598:	4b4d      	ldr	r3, [pc, #308]	; (80036d0 <HAL_GPIO_Init+0x2b8>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	4a4c      	ldr	r2, [pc, #304]	; (80036d0 <HAL_GPIO_Init+0x2b8>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6193      	str	r3, [r2, #24]
 80035a4:	4b4a      	ldr	r3, [pc, #296]	; (80036d0 <HAL_GPIO_Init+0x2b8>)
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035b0:	4a48      	ldr	r2, [pc, #288]	; (80036d4 <HAL_GPIO_Init+0x2bc>)
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	089b      	lsrs	r3, r3, #2
 80035b6:	3302      	adds	r3, #2
 80035b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	220f      	movs	r2, #15
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4013      	ands	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a40      	ldr	r2, [pc, #256]	; (80036d8 <HAL_GPIO_Init+0x2c0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d013      	beq.n	8003604 <HAL_GPIO_Init+0x1ec>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a3f      	ldr	r2, [pc, #252]	; (80036dc <HAL_GPIO_Init+0x2c4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00d      	beq.n	8003600 <HAL_GPIO_Init+0x1e8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a3e      	ldr	r2, [pc, #248]	; (80036e0 <HAL_GPIO_Init+0x2c8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d007      	beq.n	80035fc <HAL_GPIO_Init+0x1e4>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a3d      	ldr	r2, [pc, #244]	; (80036e4 <HAL_GPIO_Init+0x2cc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d101      	bne.n	80035f8 <HAL_GPIO_Init+0x1e0>
 80035f4:	2303      	movs	r3, #3
 80035f6:	e006      	b.n	8003606 <HAL_GPIO_Init+0x1ee>
 80035f8:	2304      	movs	r3, #4
 80035fa:	e004      	b.n	8003606 <HAL_GPIO_Init+0x1ee>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e002      	b.n	8003606 <HAL_GPIO_Init+0x1ee>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <HAL_GPIO_Init+0x1ee>
 8003604:	2300      	movs	r3, #0
 8003606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003608:	f002 0203 	and.w	r2, r2, #3
 800360c:	0092      	lsls	r2, r2, #2
 800360e:	4093      	lsls	r3, r2
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003616:	492f      	ldr	r1, [pc, #188]	; (80036d4 <HAL_GPIO_Init+0x2bc>)
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	089b      	lsrs	r3, r3, #2
 800361c:	3302      	adds	r3, #2
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d006      	beq.n	800363e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003630:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	492c      	ldr	r1, [pc, #176]	; (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	4313      	orrs	r3, r2
 800363a:	600b      	str	r3, [r1, #0]
 800363c:	e006      	b.n	800364c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800363e:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	43db      	mvns	r3, r3
 8003646:	4928      	ldr	r1, [pc, #160]	; (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003648:	4013      	ands	r3, r2
 800364a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d006      	beq.n	8003666 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003658:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <HAL_GPIO_Init+0x2d0>)
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	4922      	ldr	r1, [pc, #136]	; (80036e8 <HAL_GPIO_Init+0x2d0>)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
 8003664:	e006      	b.n	8003674 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	43db      	mvns	r3, r3
 800366e:	491e      	ldr	r1, [pc, #120]	; (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003670:	4013      	ands	r3, r2
 8003672:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d006      	beq.n	800368e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003680:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	4918      	ldr	r1, [pc, #96]	; (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	4313      	orrs	r3, r2
 800368a:	608b      	str	r3, [r1, #8]
 800368c:	e006      	b.n	800369c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800368e:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	43db      	mvns	r3, r3
 8003696:	4914      	ldr	r1, [pc, #80]	; (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003698:	4013      	ands	r3, r2
 800369a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d021      	beq.n	80036ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036a8:	4b0f      	ldr	r3, [pc, #60]	; (80036e8 <HAL_GPIO_Init+0x2d0>)
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	490e      	ldr	r1, [pc, #56]	; (80036e8 <HAL_GPIO_Init+0x2d0>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60cb      	str	r3, [r1, #12]
 80036b4:	e021      	b.n	80036fa <HAL_GPIO_Init+0x2e2>
 80036b6:	bf00      	nop
 80036b8:	10320000 	.word	0x10320000
 80036bc:	10310000 	.word	0x10310000
 80036c0:	10220000 	.word	0x10220000
 80036c4:	10210000 	.word	0x10210000
 80036c8:	10120000 	.word	0x10120000
 80036cc:	10110000 	.word	0x10110000
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40010000 	.word	0x40010000
 80036d8:	40010800 	.word	0x40010800
 80036dc:	40010c00 	.word	0x40010c00
 80036e0:	40011000 	.word	0x40011000
 80036e4:	40011400 	.word	0x40011400
 80036e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_GPIO_Init+0x304>)
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	43db      	mvns	r3, r3
 80036f4:	4909      	ldr	r1, [pc, #36]	; (800371c <HAL_GPIO_Init+0x304>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	3301      	adds	r3, #1
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	fa22 f303 	lsr.w	r3, r2, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	f47f ae8e 	bne.w	800342c <HAL_GPIO_Init+0x14>
  }
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	372c      	adds	r7, #44	; 0x2c
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	40010400 	.word	0x40010400

08003720 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	887b      	ldrh	r3, [r7, #2]
 8003732:	4013      	ands	r3, r2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	e001      	b.n	8003742 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003742:	7bfb      	ldrb	r3, [r7, #15]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	460b      	mov	r3, r1
 8003758:	807b      	strh	r3, [r7, #2]
 800375a:	4613      	mov	r3, r2
 800375c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800375e:	787b      	ldrb	r3, [r7, #1]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003764:	887a      	ldrh	r2, [r7, #2]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800376a:	e003      	b.n	8003774 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800376c:	887b      	ldrh	r3, [r7, #2]
 800376e:	041a      	lsls	r2, r3, #16
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	611a      	str	r2, [r3, #16]
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	460b      	mov	r3, r1
 8003788:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003790:	887a      	ldrh	r2, [r7, #2]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4013      	ands	r3, r2
 8003796:	041a      	lsls	r2, r3, #16
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	43d9      	mvns	r1, r3
 800379c:	887b      	ldrh	r3, [r7, #2]
 800379e:	400b      	ands	r3, r1
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	611a      	str	r2, [r3, #16]
}
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037ba:	4b08      	ldr	r3, [pc, #32]	; (80037dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d006      	beq.n	80037d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037c6:	4a05      	ldr	r2, [pc, #20]	; (80037dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037c8:	88fb      	ldrh	r3, [r7, #6]
 80037ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 f806 	bl	80037e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40010400 	.word	0x40010400

080037e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr

080037f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e12b      	b.n	8003a5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd fbde 	bl	8000fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2224      	movs	r2, #36	; 0x24
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003846:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003856:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003858:	f003 f868 	bl	800692c <HAL_RCC_GetPCLK1Freq>
 800385c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4a81      	ldr	r2, [pc, #516]	; (8003a68 <HAL_I2C_Init+0x274>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d807      	bhi.n	8003878 <HAL_I2C_Init+0x84>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4a80      	ldr	r2, [pc, #512]	; (8003a6c <HAL_I2C_Init+0x278>)
 800386c:	4293      	cmp	r3, r2
 800386e:	bf94      	ite	ls
 8003870:	2301      	movls	r3, #1
 8003872:	2300      	movhi	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e006      	b.n	8003886 <HAL_I2C_Init+0x92>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4a7d      	ldr	r2, [pc, #500]	; (8003a70 <HAL_I2C_Init+0x27c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	bf94      	ite	ls
 8003880:	2301      	movls	r3, #1
 8003882:	2300      	movhi	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e0e7      	b.n	8003a5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4a78      	ldr	r2, [pc, #480]	; (8003a74 <HAL_I2C_Init+0x280>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	0c9b      	lsrs	r3, r3, #18
 8003898:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4a6a      	ldr	r2, [pc, #424]	; (8003a68 <HAL_I2C_Init+0x274>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d802      	bhi.n	80038c8 <HAL_I2C_Init+0xd4>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	3301      	adds	r3, #1
 80038c6:	e009      	b.n	80038dc <HAL_I2C_Init+0xe8>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038ce:	fb02 f303 	mul.w	r3, r2, r3
 80038d2:	4a69      	ldr	r2, [pc, #420]	; (8003a78 <HAL_I2C_Init+0x284>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	099b      	lsrs	r3, r3, #6
 80038da:	3301      	adds	r3, #1
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	495c      	ldr	r1, [pc, #368]	; (8003a68 <HAL_I2C_Init+0x274>)
 80038f8:	428b      	cmp	r3, r1
 80038fa:	d819      	bhi.n	8003930 <HAL_I2C_Init+0x13c>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1e59      	subs	r1, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	fbb1 f3f3 	udiv	r3, r1, r3
 800390a:	1c59      	adds	r1, r3, #1
 800390c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003910:	400b      	ands	r3, r1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_I2C_Init+0x138>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1e59      	subs	r1, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	fbb1 f3f3 	udiv	r3, r1, r3
 8003924:	3301      	adds	r3, #1
 8003926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392a:	e051      	b.n	80039d0 <HAL_I2C_Init+0x1dc>
 800392c:	2304      	movs	r3, #4
 800392e:	e04f      	b.n	80039d0 <HAL_I2C_Init+0x1dc>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d111      	bne.n	800395c <HAL_I2C_Init+0x168>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1e58      	subs	r0, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6859      	ldr	r1, [r3, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	440b      	add	r3, r1
 8003946:	fbb0 f3f3 	udiv	r3, r0, r3
 800394a:	3301      	adds	r3, #1
 800394c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003950:	2b00      	cmp	r3, #0
 8003952:	bf0c      	ite	eq
 8003954:	2301      	moveq	r3, #1
 8003956:	2300      	movne	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e012      	b.n	8003982 <HAL_I2C_Init+0x18e>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	1e58      	subs	r0, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6859      	ldr	r1, [r3, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	0099      	lsls	r1, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003972:	3301      	adds	r3, #1
 8003974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003978:	2b00      	cmp	r3, #0
 800397a:	bf0c      	ite	eq
 800397c:	2301      	moveq	r3, #1
 800397e:	2300      	movne	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_I2C_Init+0x196>
 8003986:	2301      	movs	r3, #1
 8003988:	e022      	b.n	80039d0 <HAL_I2C_Init+0x1dc>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10e      	bne.n	80039b0 <HAL_I2C_Init+0x1bc>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1e58      	subs	r0, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6859      	ldr	r1, [r3, #4]
 800399a:	460b      	mov	r3, r1
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	440b      	add	r3, r1
 80039a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a4:	3301      	adds	r3, #1
 80039a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ae:	e00f      	b.n	80039d0 <HAL_I2C_Init+0x1dc>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1e58      	subs	r0, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	0099      	lsls	r1, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c6:	3301      	adds	r3, #1
 80039c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	6809      	ldr	r1, [r1, #0]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69da      	ldr	r2, [r3, #28]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6911      	ldr	r1, [r2, #16]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68d2      	ldr	r2, [r2, #12]
 8003a0a:	4311      	orrs	r1, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	430b      	orrs	r3, r1
 8003a12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	000186a0 	.word	0x000186a0
 8003a6c:	001e847f 	.word	0x001e847f
 8003a70:	003d08ff 	.word	0x003d08ff
 8003a74:	431bde83 	.word	0x431bde83
 8003a78:	10624dd3 	.word	0x10624dd3

08003a7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	4608      	mov	r0, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	817b      	strh	r3, [r7, #10]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	813b      	strh	r3, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a96:	f7ff fbd5 	bl	8003244 <HAL_GetTick>
 8003a9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	f040 80d9 	bne.w	8003c5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	2319      	movs	r3, #25
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	496d      	ldr	r1, [pc, #436]	; (8003c68 <HAL_I2C_Mem_Write+0x1ec>)
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 fcc1 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e0cc      	b.n	8003c5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_I2C_Mem_Write+0x56>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e0c5      	b.n	8003c5e <HAL_I2C_Mem_Write+0x1e2>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d007      	beq.n	8003af8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2221      	movs	r2, #33	; 0x21
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2240      	movs	r2, #64	; 0x40
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a3a      	ldr	r2, [r7, #32]
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a4d      	ldr	r2, [pc, #308]	; (8003c6c <HAL_I2C_Mem_Write+0x1f0>)
 8003b38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b3a:	88f8      	ldrh	r0, [r7, #6]
 8003b3c:	893a      	ldrh	r2, [r7, #8]
 8003b3e:	8979      	ldrh	r1, [r7, #10]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	4603      	mov	r3, r0
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 faf8 	bl	8004140 <I2C_RequestMemoryWrite>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d052      	beq.n	8003bfc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e081      	b.n	8003c5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fd42 	bl	80045e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00d      	beq.n	8003b86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d107      	bne.n	8003b82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e06b      	b.n	8003c5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	781a      	ldrb	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d11b      	bne.n	8003bfc <HAL_I2C_Mem_Write+0x180>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d017      	beq.n	8003bfc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	781a      	ldrb	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1aa      	bne.n	8003b5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 fd2e 	bl	800466a <I2C_WaitOnBTFFlagUntilTimeout>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00d      	beq.n	8003c30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d107      	bne.n	8003c2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e016      	b.n	8003c5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e000      	b.n	8003c5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c5c:	2302      	movs	r3, #2
  }
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	00100002 	.word	0x00100002
 8003c6c:	ffff0000 	.word	0xffff0000

08003c70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08c      	sub	sp, #48	; 0x30
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	4608      	mov	r0, r1
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4603      	mov	r3, r0
 8003c80:	817b      	strh	r3, [r7, #10]
 8003c82:	460b      	mov	r3, r1
 8003c84:	813b      	strh	r3, [r7, #8]
 8003c86:	4613      	mov	r3, r2
 8003c88:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c8e:	f7ff fad9 	bl	8003244 <HAL_GetTick>
 8003c92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	f040 8244 	bne.w	800412a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	2319      	movs	r3, #25
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4982      	ldr	r1, [pc, #520]	; (8003eb4 <HAL_I2C_Mem_Read+0x244>)
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fbc5 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e237      	b.n	800412c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_I2C_Mem_Read+0x5a>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e230      	b.n	800412c <HAL_I2C_Mem_Read+0x4bc>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d007      	beq.n	8003cf0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2222      	movs	r2, #34	; 0x22
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2240      	movs	r2, #64	; 0x40
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4a62      	ldr	r2, [pc, #392]	; (8003eb8 <HAL_I2C_Mem_Read+0x248>)
 8003d30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d32:	88f8      	ldrh	r0, [r7, #6]
 8003d34:	893a      	ldrh	r2, [r7, #8]
 8003d36:	8979      	ldrh	r1, [r7, #10]
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	9301      	str	r3, [sp, #4]
 8003d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	4603      	mov	r3, r0
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fa92 	bl	800426c <I2C_RequestMemoryRead>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e1ec      	b.n	800412c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d113      	bne.n	8003d82 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	61fb      	str	r3, [r7, #28]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	e1c0      	b.n	8004104 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d11e      	bne.n	8003dc8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d9a:	b672      	cpsid	i
}
 8003d9c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61bb      	str	r3, [r7, #24]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003dc4:	b662      	cpsie	i
}
 8003dc6:	e035      	b.n	8003e34 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d11e      	bne.n	8003e0e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003de0:	b672      	cpsid	i
}
 8003de2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e0a:	b662      	cpsie	i
}
 8003e0c:	e012      	b.n	8003e34 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e1c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003e34:	e166      	b.n	8004104 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	f200 811f 	bhi.w	800407e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d123      	bne.n	8003e90 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fc4d 	bl	80046ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e167      	b.n	800412c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e8e:	e139      	b.n	8004104 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d152      	bne.n	8003f3e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	4906      	ldr	r1, [pc, #24]	; (8003ebc <HAL_I2C_Mem_Read+0x24c>)
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 faca 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e13c      	b.n	800412c <HAL_I2C_Mem_Read+0x4bc>
 8003eb2:	bf00      	nop
 8003eb4:	00100002 	.word	0x00100002
 8003eb8:	ffff0000 	.word	0xffff0000
 8003ebc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ec0:	b672      	cpsid	i
}
 8003ec2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f06:	b662      	cpsie	i
}
 8003f08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f3c:	e0e2      	b.n	8004104 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f44:	2200      	movs	r2, #0
 8003f46:	497b      	ldr	r1, [pc, #492]	; (8004134 <HAL_I2C_Mem_Read+0x4c4>)
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 fa77 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0e9      	b.n	800412c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f68:	b672      	cpsid	i
}
 8003f6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f9e:	4b66      	ldr	r3, [pc, #408]	; (8004138 <HAL_I2C_Mem_Read+0x4c8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	08db      	lsrs	r3, r3, #3
 8003fa4:	4a65      	ldr	r2, [pc, #404]	; (800413c <HAL_I2C_Mem_Read+0x4cc>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	0a1a      	lsrs	r2, r3, #8
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	00da      	lsls	r2, r3, #3
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d118      	bne.n	8003ff6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f043 0220 	orr.w	r2, r3, #32
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003fe6:	b662      	cpsie	i
}
 8003fe8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e09a      	b.n	800412c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b04      	cmp	r3, #4
 8004002:	d1d9      	bne.n	8003fb8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004046:	b662      	cpsie	i
}
 8004048:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800407c:	e042      	b.n	8004104 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004080:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fb32 	bl	80046ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e04c      	b.n	800412c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d118      	bne.n	8004104 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004108:	2b00      	cmp	r3, #0
 800410a:	f47f ae94 	bne.w	8003e36 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e000      	b.n	800412c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800412a:	2302      	movs	r3, #2
  }
}
 800412c:	4618      	mov	r0, r3
 800412e:	3728      	adds	r7, #40	; 0x28
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	00010004 	.word	0x00010004
 8004138:	20000010 	.word	0x20000010
 800413c:	14f8b589 	.word	0x14f8b589

08004140 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	4608      	mov	r0, r1
 800414a:	4611      	mov	r1, r2
 800414c:	461a      	mov	r2, r3
 800414e:	4603      	mov	r3, r0
 8004150:	817b      	strh	r3, [r7, #10]
 8004152:	460b      	mov	r3, r1
 8004154:	813b      	strh	r3, [r7, #8]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004168:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	2200      	movs	r2, #0
 8004172:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f960 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004190:	d103      	bne.n	800419a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e05f      	b.n	800425e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800419e:	897b      	ldrh	r3, [r7, #10]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	461a      	mov	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	6a3a      	ldr	r2, [r7, #32]
 80041b2:	492d      	ldr	r1, [pc, #180]	; (8004268 <I2C_RequestMemoryWrite+0x128>)
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f998 	bl	80044ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e04c      	b.n	800425e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041dc:	6a39      	ldr	r1, [r7, #32]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fa02 	bl	80045e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00d      	beq.n	8004206 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d107      	bne.n	8004202 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004200:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e02b      	b.n	800425e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d105      	bne.n	8004218 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800420c:	893b      	ldrh	r3, [r7, #8]
 800420e:	b2da      	uxtb	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	611a      	str	r2, [r3, #16]
 8004216:	e021      	b.n	800425c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004218:	893b      	ldrh	r3, [r7, #8]
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	b29b      	uxth	r3, r3
 800421e:	b2da      	uxtb	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004228:	6a39      	ldr	r1, [r7, #32]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f9dc 	bl	80045e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00d      	beq.n	8004252 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	2b04      	cmp	r3, #4
 800423c:	d107      	bne.n	800424e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800424c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e005      	b.n	800425e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004252:	893b      	ldrh	r3, [r7, #8]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	00010002 	.word	0x00010002

0800426c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	4608      	mov	r0, r1
 8004276:	4611      	mov	r1, r2
 8004278:	461a      	mov	r2, r3
 800427a:	4603      	mov	r3, r0
 800427c:	817b      	strh	r3, [r7, #10]
 800427e:	460b      	mov	r3, r1
 8004280:	813b      	strh	r3, [r7, #8]
 8004282:	4613      	mov	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004294:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f8c2 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00d      	beq.n	80042da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042cc:	d103      	bne.n	80042d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e0aa      	b.n	8004430 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042da:	897b      	ldrh	r3, [r7, #10]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	6a3a      	ldr	r2, [r7, #32]
 80042ee:	4952      	ldr	r1, [pc, #328]	; (8004438 <I2C_RequestMemoryRead+0x1cc>)
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f8fa 	bl	80044ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e097      	b.n	8004430 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004318:	6a39      	ldr	r1, [r7, #32]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f964 	bl	80045e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00d      	beq.n	8004342 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	2b04      	cmp	r3, #4
 800432c:	d107      	bne.n	800433e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e076      	b.n	8004430 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d105      	bne.n	8004354 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004348:	893b      	ldrh	r3, [r7, #8]
 800434a:	b2da      	uxtb	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	611a      	str	r2, [r3, #16]
 8004352:	e021      	b.n	8004398 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004354:	893b      	ldrh	r3, [r7, #8]
 8004356:	0a1b      	lsrs	r3, r3, #8
 8004358:	b29b      	uxth	r3, r3
 800435a:	b2da      	uxtb	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004364:	6a39      	ldr	r1, [r7, #32]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f93e 	bl	80045e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	2b04      	cmp	r3, #4
 8004378:	d107      	bne.n	800438a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004388:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e050      	b.n	8004430 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800438e:	893b      	ldrh	r3, [r7, #8]
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439a:	6a39      	ldr	r1, [r7, #32]
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f923 	bl	80045e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00d      	beq.n	80043c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d107      	bne.n	80043c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e035      	b.n	8004430 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	2200      	movs	r2, #0
 80043dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f82b 	bl	800443c <I2C_WaitOnFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00d      	beq.n	8004408 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fa:	d103      	bne.n	8004404 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004402:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e013      	b.n	8004430 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004408:	897b      	ldrh	r3, [r7, #10]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	b2da      	uxtb	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	6a3a      	ldr	r2, [r7, #32]
 800441c:	4906      	ldr	r1, [pc, #24]	; (8004438 <I2C_RequestMemoryRead+0x1cc>)
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f863 	bl	80044ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	00010002 	.word	0x00010002

0800443c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	4613      	mov	r3, r2
 800444a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800444c:	e025      	b.n	800449a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d021      	beq.n	800449a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004456:	f7fe fef5 	bl	8003244 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d302      	bcc.n	800446c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d116      	bne.n	800449a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f043 0220 	orr.w	r2, r3, #32
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e023      	b.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	0c1b      	lsrs	r3, r3, #16
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d10d      	bne.n	80044c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	43da      	mvns	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bf0c      	ite	eq
 80044b6:	2301      	moveq	r3, #1
 80044b8:	2300      	movne	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	e00c      	b.n	80044da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	43da      	mvns	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4013      	ands	r3, r2
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf0c      	ite	eq
 80044d2:	2301      	moveq	r3, #1
 80044d4:	2300      	movne	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	461a      	mov	r2, r3
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d0b6      	beq.n	800444e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044f8:	e051      	b.n	800459e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004508:	d123      	bne.n	8004552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004518:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004522:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f043 0204 	orr.w	r2, r3, #4
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e046      	b.n	80045e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d021      	beq.n	800459e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455a:	f7fe fe73 	bl	8003244 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d116      	bne.n	800459e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f043 0220 	orr.w	r2, r3, #32
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e020      	b.n	80045e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	0c1b      	lsrs	r3, r3, #16
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d10c      	bne.n	80045c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	43da      	mvns	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bf14      	ite	ne
 80045ba:	2301      	movne	r3, #1
 80045bc:	2300      	moveq	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	e00b      	b.n	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	43da      	mvns	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4013      	ands	r3, r2
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d18d      	bne.n	80044fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045f4:	e02d      	b.n	8004652 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f8ce 	bl	8004798 <I2C_IsAcknowledgeFailed>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e02d      	b.n	8004662 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460c:	d021      	beq.n	8004652 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460e:	f7fe fe19 	bl	8003244 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	429a      	cmp	r2, r3
 800461c:	d302      	bcc.n	8004624 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d116      	bne.n	8004652 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f043 0220 	orr.w	r2, r3, #32
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e007      	b.n	8004662 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465c:	2b80      	cmp	r3, #128	; 0x80
 800465e:	d1ca      	bne.n	80045f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004676:	e02d      	b.n	80046d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f88d 	bl	8004798 <I2C_IsAcknowledgeFailed>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e02d      	b.n	80046e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468e:	d021      	beq.n	80046d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004690:	f7fe fdd8 	bl	8003244 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	429a      	cmp	r2, r3
 800469e:	d302      	bcc.n	80046a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d116      	bne.n	80046d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	f043 0220 	orr.w	r2, r3, #32
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e007      	b.n	80046e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d1ca      	bne.n	8004678 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046f8:	e042      	b.n	8004780 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	2b10      	cmp	r3, #16
 8004706:	d119      	bne.n	800473c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0210 	mvn.w	r2, #16
 8004710:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e029      	b.n	8004790 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473c:	f7fe fd82 	bl	8003244 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d116      	bne.n	8004780 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	f043 0220 	orr.w	r2, r3, #32
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e007      	b.n	8004790 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b40      	cmp	r3, #64	; 0x40
 800478c:	d1b5      	bne.n	80046fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ae:	d11b      	bne.n	80047e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	f043 0204 	orr.w	r2, r3, #4
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f6:	b08b      	sub	sp, #44	; 0x2c
 80047f8:	af06      	add	r7, sp, #24
 80047fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e0fd      	b.n	8004a02 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f009 ffde 	bl	800e7dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2203      	movs	r2, #3
 8004824:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f002 fe7f 	bl	8007530 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	687e      	ldr	r6, [r7, #4]
 800483a:	466d      	mov	r5, sp
 800483c:	f106 0410 	add.w	r4, r6, #16
 8004840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	602b      	str	r3, [r5, #0]
 8004848:	1d33      	adds	r3, r6, #4
 800484a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800484c:	6838      	ldr	r0, [r7, #0]
 800484e:	f002 fe49 	bl	80074e4 <USB_CoreInit>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0ce      	b.n	8004a02 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f002 fe7a 	bl	8007564 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004870:	2300      	movs	r3, #0
 8004872:	73fb      	strb	r3, [r7, #15]
 8004874:	e04c      	b.n	8004910 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004876:	7bfb      	ldrb	r3, [r7, #15]
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	440b      	add	r3, r1
 8004886:	3301      	adds	r3, #1
 8004888:	2201      	movs	r2, #1
 800488a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	440b      	add	r3, r1
 800489c:	7bfa      	ldrb	r2, [r7, #15]
 800489e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048a0:	7bfa      	ldrb	r2, [r7, #15]
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	b298      	uxth	r0, r3
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	440b      	add	r3, r1
 80048b2:	3336      	adds	r3, #54	; 0x36
 80048b4:	4602      	mov	r2, r0
 80048b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	440b      	add	r3, r1
 80048c8:	3303      	adds	r3, #3
 80048ca:	2200      	movs	r2, #0
 80048cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048ce:	7bfa      	ldrb	r2, [r7, #15]
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	440b      	add	r3, r1
 80048dc:	3338      	adds	r3, #56	; 0x38
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048e2:	7bfa      	ldrb	r2, [r7, #15]
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	440b      	add	r3, r1
 80048f0:	333c      	adds	r3, #60	; 0x3c
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048f6:	7bfa      	ldrb	r2, [r7, #15]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	440b      	add	r3, r1
 8004904:	3340      	adds	r3, #64	; 0x40
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	3301      	adds	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
 8004910:	7bfa      	ldrb	r2, [r7, #15]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	429a      	cmp	r2, r3
 8004918:	d3ad      	bcc.n	8004876 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800491a:	2300      	movs	r3, #0
 800491c:	73fb      	strb	r3, [r7, #15]
 800491e:	e044      	b.n	80049aa <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004920:	7bfa      	ldrb	r2, [r7, #15]
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	440b      	add	r3, r1
 800492e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004932:	2200      	movs	r2, #0
 8004934:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004936:	7bfa      	ldrb	r2, [r7, #15]
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	440b      	add	r3, r1
 8004944:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004948:	7bfa      	ldrb	r2, [r7, #15]
 800494a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800494c:	7bfa      	ldrb	r2, [r7, #15]
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	440b      	add	r3, r1
 800495a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800495e:	2200      	movs	r2, #0
 8004960:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004962:	7bfa      	ldrb	r2, [r7, #15]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	440b      	add	r3, r1
 8004970:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004978:	7bfa      	ldrb	r2, [r7, #15]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	440b      	add	r3, r1
 8004986:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800498e:	7bfa      	ldrb	r2, [r7, #15]
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	440b      	add	r3, r1
 800499c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	3301      	adds	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
 80049aa:	7bfa      	ldrb	r2, [r7, #15]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d3b5      	bcc.n	8004920 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	687e      	ldr	r6, [r7, #4]
 80049bc:	466d      	mov	r5, sp
 80049be:	f106 0410 	add.w	r4, r6, #16
 80049c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	602b      	str	r3, [r5, #0]
 80049ca:	1d33      	adds	r3, r6, #4
 80049cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049ce:	6838      	ldr	r0, [r7, #0]
 80049d0:	f002 fdd4 	bl	800757c <USB_DevInit>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2202      	movs	r2, #2
 80049de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e00d      	b.n	8004a02 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f004 ff45 	bl	800988a <USB_DevDisconnect>

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_PCD_Start+0x16>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e016      	b.n	8004a4e <HAL_PCD_Start+0x44>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f002 fd69 	bl	8007504 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004a32:	2101      	movs	r1, #1
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f00a f944 	bl	800ecc2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f004 ff19 	bl	8009876 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b088      	sub	sp, #32
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f004 ff1b 	bl	800989e <USB_ReadInterrupts>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a72:	d102      	bne.n	8004a7a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fb61 	bl	800513c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f004 ff0d 	bl	800989e <USB_ReadInterrupts>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8e:	d112      	bne.n	8004ab6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa2:	b292      	uxth	r2, r2
 8004aa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f009 ff12 	bl	800e8d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004aae:	2100      	movs	r1, #0
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f925 	bl	8004d00 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f004 feef 	bl	800989e <USB_ReadInterrupts>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aca:	d10b      	bne.n	8004ae4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ade:	b292      	uxth	r2, r2
 8004ae0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f004 fed8 	bl	800989e <USB_ReadInterrupts>
 8004aee:	4603      	mov	r3, r0
 8004af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af8:	d10b      	bne.n	8004b12 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b0c:	b292      	uxth	r2, r2
 8004b0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f004 fec1 	bl	800989e <USB_ReadInterrupts>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b26:	d126      	bne.n	8004b76 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0204 	bic.w	r2, r2, #4
 8004b3a:	b292      	uxth	r2, r2
 8004b3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0208 	bic.w	r2, r2, #8
 8004b52:	b292      	uxth	r2, r2
 8004b54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f009 fef3 	bl	800e944 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b70:	b292      	uxth	r2, r2
 8004b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f004 fe8f 	bl	800989e <USB_ReadInterrupts>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8a:	f040 8084 	bne.w	8004c96 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004b8e:	2300      	movs	r3, #0
 8004b90:	77fb      	strb	r3, [r7, #31]
 8004b92:	e011      	b.n	8004bb8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	7ffb      	ldrb	r3, [r7, #31]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	441a      	add	r2, r3
 8004ba0:	7ffb      	ldrb	r3, [r7, #31]
 8004ba2:	8812      	ldrh	r2, [r2, #0]
 8004ba4:	b292      	uxth	r2, r2
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	f107 0120 	add.w	r1, r7, #32
 8004bac:	440b      	add	r3, r1
 8004bae:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004bb2:	7ffb      	ldrb	r3, [r7, #31]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	7ffb      	ldrb	r3, [r7, #31]
 8004bba:	2b07      	cmp	r3, #7
 8004bbc:	d9ea      	bls.n	8004b94 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0201 	orr.w	r2, r2, #1
 8004bd0:	b292      	uxth	r2, r2
 8004bd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0201 	bic.w	r2, r2, #1
 8004be8:	b292      	uxth	r2, r2
 8004bea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004bee:	bf00      	nop
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f6      	beq.n	8004bf0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c14:	b292      	uxth	r2, r2
 8004c16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	77fb      	strb	r3, [r7, #31]
 8004c1e:	e010      	b.n	8004c42 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004c20:	7ffb      	ldrb	r3, [r7, #31]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6812      	ldr	r2, [r2, #0]
 8004c26:	4611      	mov	r1, r2
 8004c28:	7ffa      	ldrb	r2, [r7, #31]
 8004c2a:	0092      	lsls	r2, r2, #2
 8004c2c:	440a      	add	r2, r1
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	f107 0120 	add.w	r1, r7, #32
 8004c34:	440b      	add	r3, r1
 8004c36:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004c3a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004c3c:	7ffb      	ldrb	r3, [r7, #31]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	77fb      	strb	r3, [r7, #31]
 8004c42:	7ffb      	ldrb	r3, [r7, #31]
 8004c44:	2b07      	cmp	r3, #7
 8004c46:	d9eb      	bls.n	8004c20 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0208 	orr.w	r2, r2, #8
 8004c5a:	b292      	uxth	r2, r2
 8004c5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c72:	b292      	uxth	r2, r2
 8004c74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0204 	orr.w	r2, r2, #4
 8004c8a:	b292      	uxth	r2, r2
 8004c8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f009 fe3d 	bl	800e910 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f004 fdff 	bl	800989e <USB_ReadInterrupts>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004caa:	d10e      	bne.n	8004cca <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cbe:	b292      	uxth	r2, r2
 8004cc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f009 fdf6 	bl	800e8b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f004 fde5 	bl	800989e <USB_ReadInterrupts>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cde:	d10b      	bne.n	8004cf8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cf2:	b292      	uxth	r2, r2
 8004cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	3720      	adds	r7, #32
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_PCD_SetAddress+0x1a>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e013      	b.n	8004d42 <HAL_PCD_SetAddress+0x42>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	78fa      	ldrb	r2, [r7, #3]
 8004d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	78fa      	ldrb	r2, [r7, #3]
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f004 fd8c 	bl	8009850 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	4608      	mov	r0, r1
 8004d54:	4611      	mov	r1, r2
 8004d56:	461a      	mov	r2, r3
 8004d58:	4603      	mov	r3, r0
 8004d5a:	70fb      	strb	r3, [r7, #3]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	803b      	strh	r3, [r7, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	da0e      	bge.n	8004d8e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	4413      	add	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	705a      	strb	r2, [r3, #1]
 8004d8c:	e00e      	b.n	8004dac <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	f003 0207 	and.w	r2, r3, #7
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	4413      	add	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004db8:	883a      	ldrh	r2, [r7, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	78ba      	ldrb	r2, [r7, #2]
 8004dc2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	785b      	ldrb	r3, [r3, #1]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d004      	beq.n	8004dd6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004dd6:	78bb      	ldrb	r3, [r7, #2]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d102      	bne.n	8004de2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_PCD_EP_Open+0xa6>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e00e      	b.n	8004e0e <HAL_PCD_EP_Open+0xc4>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68f9      	ldr	r1, [r7, #12]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f002 fbdc 	bl	80075bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004e0c:	7afb      	ldrb	r3, [r7, #11]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	da0e      	bge.n	8004e48 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	705a      	strb	r2, [r3, #1]
 8004e46:	e00e      	b.n	8004e66 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	f003 0207 	and.w	r2, r3, #7
 8004e4e:	4613      	mov	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_PCD_EP_Close+0x6a>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e00e      	b.n	8004e9e <HAL_PCD_EP_Close+0x88>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68f9      	ldr	r1, [r7, #12]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f002 fefe 	bl	8007c90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b086      	sub	sp, #24
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eb6:	7afb      	ldrb	r3, [r7, #11]
 8004eb8:	f003 0207 	and.w	r2, r3, #7
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2200      	movs	r2, #0
 8004ede:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ee6:	7afb      	ldrb	r3, [r7, #11]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ef2:	7afb      	ldrb	r3, [r7, #11]
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d106      	bne.n	8004f0a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6979      	ldr	r1, [r7, #20]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f003 f8b0 	bl	8008068 <USB_EPStartXfer>
 8004f08:	e005      	b.n	8004f16 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6979      	ldr	r1, [r7, #20]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f003 f8a9 	bl	8008068 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	f003 0207 	and.w	r2, r3, #7
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	440b      	add	r3, r1
 8004f3e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004f42:	681b      	ldr	r3, [r3, #0]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr

08004f4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b086      	sub	sp, #24
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f5e:	7afb      	ldrb	r3, [r7, #11]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	4413      	add	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2200      	movs	r2, #0
 8004f92:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2201      	movs	r2, #1
 8004f98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f9a:	7afb      	ldrb	r3, [r7, #11]
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fa6:	7afb      	ldrb	r3, [r7, #11]
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6979      	ldr	r1, [r7, #20]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f003 f856 	bl	8008068 <USB_EPStartXfer>
 8004fbc:	e005      	b.n	8004fca <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6979      	ldr	r1, [r7, #20]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f003 f84f 	bl	8008068 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	f003 0207 	and.w	r2, r3, #7
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d901      	bls.n	8004ff2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e04c      	b.n	800508c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ff2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	da0e      	bge.n	8005018 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	4413      	add	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2201      	movs	r2, #1
 8005014:	705a      	strb	r2, [r3, #1]
 8005016:	e00c      	b.n	8005032 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	4613      	mov	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	4413      	add	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	b2da      	uxtb	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_PCD_EP_SetStall+0x7e>
 800504e:	2302      	movs	r3, #2
 8005050:	e01c      	b.n	800508c <HAL_PCD_EP_SetStall+0xb8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68f9      	ldr	r1, [r7, #12]
 8005060:	4618      	mov	r0, r3
 8005062:	f004 faf8 	bl	8009656 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005066:	78fb      	ldrb	r3, [r7, #3]
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	2b00      	cmp	r3, #0
 800506e:	d108      	bne.n	8005082 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f004 fc1d 	bl	80098bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	f003 020f 	and.w	r2, r3, #15
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d901      	bls.n	80050b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e040      	b.n	8005134 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	da0e      	bge.n	80050d8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	4413      	add	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2201      	movs	r2, #1
 80050d4:	705a      	strb	r2, [r3, #1]
 80050d6:	e00e      	b.n	80050f6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	f003 0207 	and.w	r2, r3, #7
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	b2da      	uxtb	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_PCD_EP_ClrStall+0x82>
 8005112:	2302      	movs	r3, #2
 8005114:	e00e      	b.n	8005134 <HAL_PCD_EP_ClrStall+0xa0>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68f9      	ldr	r1, [r7, #12]
 8005124:	4618      	mov	r0, r3
 8005126:	f004 fae6 	bl	80096f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08e      	sub	sp, #56	; 0x38
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005144:	e2ec      	b.n	8005720 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800514e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005150:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005152:	b2db      	uxtb	r3, r3
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800515c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005160:	2b00      	cmp	r3, #0
 8005162:	f040 8161 	bne.w	8005428 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005166:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	2b00      	cmp	r3, #0
 800516e:	d152      	bne.n	8005216 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800517c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005180:	81fb      	strh	r3, [r7, #14]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	89fb      	ldrh	r3, [r7, #14]
 8005188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800518c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005190:	b29b      	uxth	r3, r3
 8005192:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3328      	adds	r3, #40	; 0x28
 8005198:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	4413      	add	r3, r2
 80051ae:	3302      	adds	r3, #2
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6812      	ldr	r2, [r2, #0]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	441a      	add	r2, r3
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80051d4:	2100      	movs	r1, #0
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f009 fb53 	bl	800e882 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 829b 	beq.w	8005720 <PCD_EP_ISR_Handler+0x5e4>
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f040 8296 	bne.w	8005720 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005200:	b2da      	uxtb	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	b292      	uxth	r2, r2
 8005208:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005214:	e284      	b.n	8005720 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005226:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800522c:	2b00      	cmp	r3, #0
 800522e:	d034      	beq.n	800529a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005238:	b29b      	uxth	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	4413      	add	r3, r2
 8005244:	3306      	adds	r3, #6
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6812      	ldr	r2, [r2, #0]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800526e:	b29b      	uxth	r3, r3
 8005270:	f004 fb74 	bl	800995c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29a      	uxth	r2, r3
 800527c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005280:	4013      	ands	r3, r2
 8005282:	823b      	strh	r3, [r7, #16]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	8a3a      	ldrh	r2, [r7, #16]
 800528a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800528e:	b292      	uxth	r2, r2
 8005290:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f009 fac8 	bl	800e828 <HAL_PCD_SetupStageCallback>
 8005298:	e242      	b.n	8005720 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800529a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f280 823e 	bge.w	8005720 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80052b0:	4013      	ands	r3, r2
 80052b2:	83bb      	strh	r3, [r7, #28]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	8bba      	ldrh	r2, [r7, #28]
 80052ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052be:	b292      	uxth	r2, r2
 80052c0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	4413      	add	r3, r2
 80052d6:	3306      	adds	r3, #6
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d019      	beq.n	800532a <PCD_EP_ISR_Handler+0x1ee>
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d015      	beq.n	800532a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	6959      	ldr	r1, [r3, #20]
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800530e:	b29b      	uxth	r3, r3
 8005310:	f004 fb24 	bl	800995c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	695a      	ldr	r2, [r3, #20]
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	441a      	add	r2, r3
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005322:	2100      	movs	r1, #0
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f009 fa91 	bl	800e84c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29b      	uxth	r3, r3
 8005332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005336:	2b00      	cmp	r3, #0
 8005338:	f040 81f2 	bne.w	8005720 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800534a:	b29b      	uxth	r3, r3
 800534c:	461a      	mov	r2, r3
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	4413      	add	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d112      	bne.n	800538a <PCD_EP_ISR_Handler+0x24e>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	b29b      	uxth	r3, r3
 800536a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800536e:	b29a      	uxth	r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	801a      	strh	r2, [r3, #0]
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	b29b      	uxth	r3, r3
 800537a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800537e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005382:	b29a      	uxth	r2, r3
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	801a      	strh	r2, [r3, #0]
 8005388:	e02f      	b.n	80053ea <PCD_EP_ISR_Handler+0x2ae>
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b3e      	cmp	r3, #62	; 0x3e
 8005390:	d813      	bhi.n	80053ba <PCD_EP_ISR_Handler+0x27e>
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	085b      	lsrs	r3, r3, #1
 8005398:	633b      	str	r3, [r7, #48]	; 0x30
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <PCD_EP_ISR_Handler+0x270>
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	3301      	adds	r3, #1
 80053aa:	633b      	str	r3, [r7, #48]	; 0x30
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	029b      	lsls	r3, r3, #10
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	801a      	strh	r2, [r3, #0]
 80053b8:	e017      	b.n	80053ea <PCD_EP_ISR_Handler+0x2ae>
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	633b      	str	r3, [r7, #48]	; 0x30
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d102      	bne.n	80053d4 <PCD_EP_ISR_Handler+0x298>
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	3b01      	subs	r3, #1
 80053d2:	633b      	str	r3, [r7, #48]	; 0x30
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	029b      	lsls	r3, r3, #10
 80053da:	b29b      	uxth	r3, r3
 80053dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fa:	827b      	strh	r3, [r7, #18]
 80053fc:	8a7b      	ldrh	r3, [r7, #18]
 80053fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005402:	827b      	strh	r3, [r7, #18]
 8005404:	8a7b      	ldrh	r3, [r7, #18]
 8005406:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800540a:	827b      	strh	r3, [r7, #18]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	8a7b      	ldrh	r3, [r7, #18]
 8005412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005422:	b29b      	uxth	r3, r3
 8005424:	8013      	strh	r3, [r2, #0]
 8005426:	e17b      	b.n	8005720 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800543a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800543e:	2b00      	cmp	r3, #0
 8005440:	f280 80ea 	bge.w	8005618 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29a      	uxth	r2, r3
 8005456:	f640 738f 	movw	r3, #3983	; 0xf8f
 800545a:	4013      	ands	r3, r2
 800545c:	853b      	strh	r3, [r7, #40]	; 0x28
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800546e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005472:	b292      	uxth	r2, r2
 8005474:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005476:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4413      	add	r3, r2
 800548a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	7b1b      	ldrb	r3, [r3, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d122      	bne.n	80054da <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800549c:	b29b      	uxth	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	4413      	add	r3, r2
 80054a8:	3306      	adds	r3, #6
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054bc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80054be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8087 	beq.w	80055d4 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	6959      	ldr	r1, [r3, #20]
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	88da      	ldrh	r2, [r3, #6]
 80054d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054d4:	f004 fa42 	bl	800995c <USB_ReadPMA>
 80054d8:	e07c      	b.n	80055d4 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	78db      	ldrb	r3, [r3, #3]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d108      	bne.n	80054f4 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80054e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054e4:	461a      	mov	r2, r3
 80054e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f927 	bl	800573c <HAL_PCD_EP_DB_Receive>
 80054ee:	4603      	mov	r3, r0
 80054f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80054f2:	e06f      	b.n	80055d4 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800550a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	441a      	add	r2, r3
 800551e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800552c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005530:	b29b      	uxth	r3, r3
 8005532:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d021      	beq.n	8005592 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005556:	b29b      	uxth	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4413      	add	r3, r2
 8005562:	3302      	adds	r3, #2
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6812      	ldr	r2, [r2, #0]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005576:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005578:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800557a:	2b00      	cmp	r3, #0
 800557c:	d02a      	beq.n	80055d4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	6959      	ldr	r1, [r3, #20]
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	891a      	ldrh	r2, [r3, #8]
 800558a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800558c:	f004 f9e6 	bl	800995c <USB_ReadPMA>
 8005590:	e020      	b.n	80055d4 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800559a:	b29b      	uxth	r3, r3
 800559c:	461a      	mov	r2, r3
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	4413      	add	r3, r2
 80055a6:	3306      	adds	r3, #6
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6812      	ldr	r2, [r2, #0]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ba:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80055bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d008      	beq.n	80055d4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	6959      	ldr	r1, [r3, #20]
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	895a      	ldrh	r2, [r3, #10]
 80055ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055d0:	f004 f9c4 	bl	800995c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	69da      	ldr	r2, [r3, #28]
 80055d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055da:	441a      	add	r2, r3
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	695a      	ldr	r2, [r3, #20]
 80055e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055e6:	441a      	add	r2, r3
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d004      	beq.n	80055fe <PCD_EP_ISR_Handler+0x4c2>
 80055f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d206      	bcs.n	800560c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	4619      	mov	r1, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f009 f921 	bl	800e84c <HAL_PCD_DataOutStageCallback>
 800560a:	e005      	b.n	8005618 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005612:	4618      	mov	r0, r3
 8005614:	f002 fd28 	bl	8008068 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005618:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800561a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561e:	2b00      	cmp	r3, #0
 8005620:	d07e      	beq.n	8005720 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005622:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	4413      	add	r3, r2
 8005634:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800564c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005650:	843b      	strh	r3, [r7, #32]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	441a      	add	r2, r3
 8005660:	8c3b      	ldrh	r3, [r7, #32]
 8005662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800566a:	b29b      	uxth	r3, r3
 800566c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	78db      	ldrb	r3, [r3, #3]
 8005672:	2b03      	cmp	r3, #3
 8005674:	d00c      	beq.n	8005690 <PCD_EP_ISR_Handler+0x554>
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	78db      	ldrb	r3, [r3, #3]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005682:	2b02      	cmp	r3, #2
 8005684:	d146      	bne.n	8005714 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005686:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d141      	bne.n	8005714 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005698:	b29b      	uxth	r3, r3
 800569a:	461a      	mov	r2, r3
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	4413      	add	r3, r2
 80056a4:	3302      	adds	r3, #2
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056b8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	8bfb      	ldrh	r3, [r7, #30]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d906      	bls.n	80056d2 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	699a      	ldr	r2, [r3, #24]
 80056c8:	8bfb      	ldrh	r3, [r7, #30]
 80056ca:	1ad2      	subs	r2, r2, r3
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	619a      	str	r2, [r3, #24]
 80056d0:	e002      	b.n	80056d8 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	2200      	movs	r2, #0
 80056d6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d106      	bne.n	80056ee <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	4619      	mov	r1, r3
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f009 f8cb 	bl	800e882 <HAL_PCD_DataInStageCallback>
 80056ec:	e018      	b.n	8005720 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	695a      	ldr	r2, [r3, #20]
 80056f2:	8bfb      	ldrh	r3, [r7, #30]
 80056f4:	441a      	add	r2, r3
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	69da      	ldr	r2, [r3, #28]
 80056fe:	8bfb      	ldrh	r3, [r7, #30]
 8005700:	441a      	add	r2, r3
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800570c:	4618      	mov	r0, r3
 800570e:	f002 fcab 	bl	8008068 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005712:	e005      	b.n	8005720 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005714:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005716:	461a      	mov	r2, r3
 8005718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f91b 	bl	8005956 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005728:	b29b      	uxth	r3, r3
 800572a:	b21b      	sxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	f6ff ad0a 	blt.w	8005146 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3738      	adds	r7, #56	; 0x38
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	4613      	mov	r3, r2
 8005748:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d07e      	beq.n	8005852 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800575c:	b29b      	uxth	r3, r3
 800575e:	461a      	mov	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	4413      	add	r3, r2
 8005768:	3302      	adds	r3, #2
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800577c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	699a      	ldr	r2, [r3, #24]
 8005782:	8b7b      	ldrh	r3, [r7, #26]
 8005784:	429a      	cmp	r2, r3
 8005786:	d306      	bcc.n	8005796 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	699a      	ldr	r2, [r3, #24]
 800578c:	8b7b      	ldrh	r3, [r7, #26]
 800578e:	1ad2      	subs	r2, r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	619a      	str	r2, [r3, #24]
 8005794:	e002      	b.n	800579c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2200      	movs	r2, #0
 800579a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d123      	bne.n	80057ec <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	461a      	mov	r2, r3
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057be:	833b      	strh	r3, [r7, #24]
 80057c0:	8b3b      	ldrh	r3, [r7, #24]
 80057c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057c6:	833b      	strh	r3, [r7, #24]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	441a      	add	r2, r3
 80057d6:	8b3b      	ldrh	r3, [r7, #24]
 80057d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057ec:	88fb      	ldrh	r3, [r7, #6]
 80057ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d01f      	beq.n	8005836 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	b29b      	uxth	r3, r3
 8005808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800580c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005810:	82fb      	strh	r3, [r7, #22]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	441a      	add	r2, r3
 8005820:	8afb      	ldrh	r3, [r7, #22]
 8005822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800582a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800582e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005832:	b29b      	uxth	r3, r3
 8005834:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005836:	8b7b      	ldrh	r3, [r7, #26]
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 8087 	beq.w	800594c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	6959      	ldr	r1, [r3, #20]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	891a      	ldrh	r2, [r3, #8]
 800584a:	8b7b      	ldrh	r3, [r7, #26]
 800584c:	f004 f886 	bl	800995c <USB_ReadPMA>
 8005850:	e07c      	b.n	800594c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585a:	b29b      	uxth	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4413      	add	r3, r2
 8005866:	3306      	adds	r3, #6
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	6812      	ldr	r2, [r2, #0]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800587a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	699a      	ldr	r2, [r3, #24]
 8005880:	8b7b      	ldrh	r3, [r7, #26]
 8005882:	429a      	cmp	r2, r3
 8005884:	d306      	bcc.n	8005894 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	8b7b      	ldrh	r3, [r7, #26]
 800588c:	1ad2      	subs	r2, r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	619a      	str	r2, [r3, #24]
 8005892:	e002      	b.n	800589a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2200      	movs	r2, #0
 8005898:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d123      	bne.n	80058ea <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058bc:	83fb      	strh	r3, [r7, #30]
 80058be:	8bfb      	ldrh	r3, [r7, #30]
 80058c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058c4:	83fb      	strh	r3, [r7, #30]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	441a      	add	r2, r3
 80058d4:	8bfb      	ldrh	r3, [r7, #30]
 80058d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80058ea:	88fb      	ldrh	r3, [r7, #6]
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d11f      	bne.n	8005934 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	461a      	mov	r2, r3
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	b29b      	uxth	r3, r3
 8005906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590e:	83bb      	strh	r3, [r7, #28]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	441a      	add	r2, r3
 800591e:	8bbb      	ldrh	r3, [r7, #28]
 8005920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800592c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005930:	b29b      	uxth	r3, r3
 8005932:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005934:	8b7b      	ldrh	r3, [r7, #26]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d008      	beq.n	800594c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6959      	ldr	r1, [r3, #20]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	895a      	ldrh	r2, [r3, #10]
 8005946:	8b7b      	ldrh	r3, [r7, #26]
 8005948:	f004 f808 	bl	800995c <USB_ReadPMA>
    }
  }

  return count;
 800594c:	8b7b      	ldrh	r3, [r7, #26]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b0a2      	sub	sp, #136	; 0x88
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	4613      	mov	r3, r2
 8005962:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 81c7 	beq.w	8005cfe <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005978:	b29b      	uxth	r3, r3
 800597a:	461a      	mov	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	4413      	add	r3, r2
 8005984:	3302      	adds	r3, #2
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	6812      	ldr	r2, [r2, #0]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005998:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d907      	bls.n	80059b8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	699a      	ldr	r2, [r3, #24]
 80059ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059b0:	1ad2      	subs	r2, r2, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	619a      	str	r2, [r3, #24]
 80059b6:	e002      	b.n	80059be <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2200      	movs	r2, #0
 80059bc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f040 80b9 	bne.w	8005b3a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d126      	bne.n	8005a1e <HAL_PCD_EP_DB_Transmit+0xc8>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059de:	b29b      	uxth	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	4413      	add	r3, r2
 80059e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	011a      	lsls	r2, r3, #4
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	4413      	add	r3, r2
 80059f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	801a      	strh	r2, [r3, #0]
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	801a      	strh	r2, [r3, #0]
 8005a1c:	e01a      	b.n	8005a54 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d116      	bne.n	8005a54 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	4413      	add	r3, r2
 8005a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	011a      	lsls	r2, r3, #4
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	4413      	add	r3, r2
 8005a48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	2200      	movs	r2, #0
 8005a52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	623b      	str	r3, [r7, #32]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	785b      	ldrb	r3, [r3, #1]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d126      	bne.n	8005ab0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	61bb      	str	r3, [r7, #24]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	4413      	add	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	011a      	lsls	r2, r3, #4
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	4413      	add	r3, r2
 8005a84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	e017      	b.n	8005ae0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d113      	bne.n	8005ae0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	623b      	str	r3, [r7, #32]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	011a      	lsls	r2, r3, #4
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	2200      	movs	r2, #0
 8005ade:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f008 fecb 	bl	800e882 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 82d4 	beq.w	80060a0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b12:	827b      	strh	r3, [r7, #18]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	441a      	add	r2, r3
 8005b22:	8a7b      	ldrh	r3, [r7, #18]
 8005b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	8013      	strh	r3, [r2, #0]
 8005b38:	e2b2      	b.n	80060a0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b3a:	88fb      	ldrh	r3, [r7, #6]
 8005b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d021      	beq.n	8005b88 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	441a      	add	r2, r3
 8005b70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	f040 8286 	bne.w	80060a0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	695a      	ldr	r2, [r3, #20]
 8005b98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b9c:	441a      	add	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	69da      	ldr	r2, [r3, #28]
 8005ba6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005baa:	441a      	add	r2, r3
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	6a1a      	ldr	r2, [r3, #32]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d309      	bcc.n	8005bd0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6a1a      	ldr	r2, [r3, #32]
 8005bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc8:	1ad2      	subs	r2, r2, r3
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	621a      	str	r2, [r3, #32]
 8005bce:	e015      	b.n	8005bfc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d107      	bne.n	8005be8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005bd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bdc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005be6:	e009      	b.n	8005bfc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d155      	bne.n	8005cb0 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c18:	4413      	add	r3, r2
 8005c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	011a      	lsls	r2, r3, #4
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	4413      	add	r3, r2
 8005c26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d112      	bne.n	8005c58 <HAL_PCD_EP_DB_Transmit+0x302>
 8005c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	e047      	b.n	8005ce8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c5a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c5c:	d811      	bhi.n	8005c82 <HAL_PCD_EP_DB_Transmit+0x32c>
 8005c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c70:	3301      	adds	r3, #1
 8005c72:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	029b      	lsls	r3, r3, #10
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7e:	801a      	strh	r2, [r3, #0]
 8005c80:	e032      	b.n	8005ce8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c8a:	f003 031f 	and.w	r3, r3, #31
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d102      	bne.n	8005c98 <HAL_PCD_EP_DB_Transmit+0x342>
 8005c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c94:	3b01      	subs	r3, #1
 8005c96:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	029b      	lsls	r3, r3, #10
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	e01b      	b.n	8005ce8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	785b      	ldrb	r3, [r3, #1]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d117      	bne.n	8005ce8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	643b      	str	r3, [r7, #64]	; 0x40
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ccc:	4413      	add	r3, r2
 8005cce:	643b      	str	r3, [r7, #64]	; 0x40
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	011a      	lsls	r2, r3, #4
 8005cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd8:	4413      	add	r3, r2
 8005cda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6818      	ldr	r0, [r3, #0]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	6959      	ldr	r1, [r3, #20]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	891a      	ldrh	r2, [r3, #8]
 8005cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	f003 fdeb 	bl	80098d2 <USB_WritePMA>
 8005cfc:	e1d0      	b.n	80060a0 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	461a      	mov	r2, r3
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	4413      	add	r3, r2
 8005d12:	3306      	adds	r3, #6
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	6812      	ldr	r2, [r2, #0]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d307      	bcc.n	8005d46 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d3e:	1ad2      	subs	r2, r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	619a      	str	r2, [r3, #24]
 8005d44:	e002      	b.n	8005d4c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f040 80c4 	bne.w	8005ede <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	785b      	ldrb	r3, [r3, #1]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d126      	bne.n	8005dac <HAL_PCD_EP_DB_Transmit+0x456>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d72:	4413      	add	r3, r2
 8005d74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	011a      	lsls	r2, r3, #4
 8005d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7e:	4413      	add	r3, r2
 8005d80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d84:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d94:	801a      	strh	r2, [r3, #0]
 8005d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005da8:	801a      	strh	r2, [r3, #0]
 8005daa:	e01a      	b.n	8005de2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d116      	bne.n	8005de2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	677b      	str	r3, [r7, #116]	; 0x74
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dc8:	4413      	add	r3, r2
 8005dca:	677b      	str	r3, [r7, #116]	; 0x74
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	011a      	lsls	r2, r3, #4
 8005dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dda:	673b      	str	r3, [r7, #112]	; 0x70
 8005ddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dde:	2200      	movs	r2, #0
 8005de0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	785b      	ldrb	r3, [r3, #1]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d12f      	bne.n	8005e50 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e08:	4413      	add	r3, r2
 8005e0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	011a      	lsls	r2, r3, #4
 8005e14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e18:	4413      	add	r3, r2
 8005e1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e34:	801a      	strh	r2, [r3, #0]
 8005e36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e4c:	801a      	strh	r2, [r3, #0]
 8005e4e:	e017      	b.n	8005e80 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	785b      	ldrb	r3, [r3, #1]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d113      	bne.n	8005e80 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	461a      	mov	r2, r3
 8005e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e66:	4413      	add	r3, r2
 8005e68:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	011a      	lsls	r2, r3, #4
 8005e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e72:	4413      	add	r3, r2
 8005e74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	4619      	mov	r1, r3
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f008 fcfb 	bl	800e882 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e8c:	88fb      	ldrh	r3, [r7, #6]
 8005e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f040 8104 	bne.w	80060a0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	441a      	add	r2, r3
 8005ec4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	8013      	strh	r3, [r2, #0]
 8005edc:	e0e0      	b.n	80060a0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d121      	bne.n	8005f2c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f02:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	441a      	add	r2, r3
 8005f14:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	f040 80b4 	bne.w	80060a0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	695a      	ldr	r2, [r3, #20]
 8005f3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f40:	441a      	add	r2, r3
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	69da      	ldr	r2, [r3, #28]
 8005f4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f4e:	441a      	add	r2, r3
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	6a1a      	ldr	r2, [r3, #32]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d309      	bcc.n	8005f74 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	6a1a      	ldr	r2, [r3, #32]
 8005f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f6c:	1ad2      	subs	r2, r2, r3
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	621a      	str	r2, [r3, #32]
 8005f72:	e015      	b.n	8005fa0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d107      	bne.n	8005f8c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005f7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f80:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005f8a:	e009      	b.n	8005fa0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2200      	movs	r2, #0
 8005f96:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	667b      	str	r3, [r7, #100]	; 0x64
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	785b      	ldrb	r3, [r3, #1]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d155      	bne.n	800605a <HAL_PCD_EP_DB_Transmit+0x704>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fc2:	4413      	add	r3, r2
 8005fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	011a      	lsls	r2, r3, #4
 8005fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fce:	4413      	add	r3, r2
 8005fd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d112      	bne.n	8006002 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fea:	801a      	strh	r2, [r3, #0]
 8005fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	e044      	b.n	800608c <HAL_PCD_EP_DB_Transmit+0x736>
 8006002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006004:	2b3e      	cmp	r3, #62	; 0x3e
 8006006:	d811      	bhi.n	800602c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	657b      	str	r3, [r7, #84]	; 0x54
 800600e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601a:	3301      	adds	r3, #1
 800601c:	657b      	str	r3, [r7, #84]	; 0x54
 800601e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006020:	b29b      	uxth	r3, r3
 8006022:	029b      	lsls	r3, r3, #10
 8006024:	b29a      	uxth	r2, r3
 8006026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006028:	801a      	strh	r2, [r3, #0]
 800602a:	e02f      	b.n	800608c <HAL_PCD_EP_DB_Transmit+0x736>
 800602c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	657b      	str	r3, [r7, #84]	; 0x54
 8006032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006034:	f003 031f 	and.w	r3, r3, #31
 8006038:	2b00      	cmp	r3, #0
 800603a:	d102      	bne.n	8006042 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800603c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800603e:	3b01      	subs	r3, #1
 8006040:	657b      	str	r3, [r7, #84]	; 0x54
 8006042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006044:	b29b      	uxth	r3, r3
 8006046:	029b      	lsls	r3, r3, #10
 8006048:	b29b      	uxth	r3, r3
 800604a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800604e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006052:	b29a      	uxth	r2, r3
 8006054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006056:	801a      	strh	r2, [r3, #0]
 8006058:	e018      	b.n	800608c <HAL_PCD_EP_DB_Transmit+0x736>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d114      	bne.n	800608c <HAL_PCD_EP_DB_Transmit+0x736>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800606a:	b29b      	uxth	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006070:	4413      	add	r3, r2
 8006072:	667b      	str	r3, [r7, #100]	; 0x64
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	011a      	lsls	r2, r3, #4
 800607a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800607c:	4413      	add	r3, r2
 800607e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006082:	663b      	str	r3, [r7, #96]	; 0x60
 8006084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006086:	b29a      	uxth	r2, r3
 8006088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800608a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6818      	ldr	r0, [r3, #0]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	6959      	ldr	r1, [r3, #20]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	895a      	ldrh	r2, [r3, #10]
 8006098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800609a:	b29b      	uxth	r3, r3
 800609c:	f003 fc19 	bl	80098d2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	461a      	mov	r2, r3
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ba:	823b      	strh	r3, [r7, #16]
 80060bc:	8a3b      	ldrh	r3, [r7, #16]
 80060be:	f083 0310 	eor.w	r3, r3, #16
 80060c2:	823b      	strh	r3, [r7, #16]
 80060c4:	8a3b      	ldrh	r3, [r7, #16]
 80060c6:	f083 0320 	eor.w	r3, r3, #32
 80060ca:	823b      	strh	r3, [r7, #16]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	461a      	mov	r2, r3
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	441a      	add	r2, r3
 80060da:	8a3b      	ldrh	r3, [r7, #16]
 80060dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3788      	adds	r7, #136	; 0x88
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b087      	sub	sp, #28
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	607b      	str	r3, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	817b      	strh	r3, [r7, #10]
 8006108:	4613      	mov	r3, r2
 800610a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800610c:	897b      	ldrh	r3, [r7, #10]
 800610e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006112:	b29b      	uxth	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00b      	beq.n	8006130 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006118:	897b      	ldrh	r3, [r7, #10]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4413      	add	r3, r2
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	e009      	b.n	8006144 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006130:	897a      	ldrh	r2, [r7, #10]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4413      	add	r3, r2
 8006142:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006144:	893b      	ldrh	r3, [r7, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d107      	bne.n	800615a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2200      	movs	r2, #0
 800614e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	b29a      	uxth	r2, r3
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	80da      	strh	r2, [r3, #6]
 8006158:	e00b      	b.n	8006172 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2201      	movs	r2, #1
 800615e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	b29a      	uxth	r2, r3
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	0c1b      	lsrs	r3, r3, #16
 800616c:	b29a      	uxth	r2, r3
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	bc80      	pop	{r7}
 800617c:	4770      	bx	lr
	...

08006180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e26c      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 8087 	beq.w	80062ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061a0:	4b92      	ldr	r3, [pc, #584]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f003 030c 	and.w	r3, r3, #12
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d00c      	beq.n	80061c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061ac:	4b8f      	ldr	r3, [pc, #572]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f003 030c 	and.w	r3, r3, #12
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d112      	bne.n	80061de <HAL_RCC_OscConfig+0x5e>
 80061b8:	4b8c      	ldr	r3, [pc, #560]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c4:	d10b      	bne.n	80061de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c6:	4b89      	ldr	r3, [pc, #548]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d06c      	beq.n	80062ac <HAL_RCC_OscConfig+0x12c>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d168      	bne.n	80062ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e246      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e6:	d106      	bne.n	80061f6 <HAL_RCC_OscConfig+0x76>
 80061e8:	4b80      	ldr	r3, [pc, #512]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a7f      	ldr	r2, [pc, #508]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 80061ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f2:	6013      	str	r3, [r2, #0]
 80061f4:	e02e      	b.n	8006254 <HAL_RCC_OscConfig+0xd4>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10c      	bne.n	8006218 <HAL_RCC_OscConfig+0x98>
 80061fe:	4b7b      	ldr	r3, [pc, #492]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a7a      	ldr	r2, [pc, #488]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 8006204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	4b78      	ldr	r3, [pc, #480]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a77      	ldr	r2, [pc, #476]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 8006210:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	e01d      	b.n	8006254 <HAL_RCC_OscConfig+0xd4>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006220:	d10c      	bne.n	800623c <HAL_RCC_OscConfig+0xbc>
 8006222:	4b72      	ldr	r3, [pc, #456]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a71      	ldr	r2, [pc, #452]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 8006228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800622c:	6013      	str	r3, [r2, #0]
 800622e:	4b6f      	ldr	r3, [pc, #444]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a6e      	ldr	r2, [pc, #440]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 8006234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	e00b      	b.n	8006254 <HAL_RCC_OscConfig+0xd4>
 800623c:	4b6b      	ldr	r3, [pc, #428]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a6a      	ldr	r2, [pc, #424]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 8006242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	4b68      	ldr	r3, [pc, #416]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a67      	ldr	r2, [pc, #412]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 800624e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006252:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d013      	beq.n	8006284 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800625c:	f7fc fff2 	bl	8003244 <HAL_GetTick>
 8006260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006262:	e008      	b.n	8006276 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006264:	f7fc ffee 	bl	8003244 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b64      	cmp	r3, #100	; 0x64
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e1fa      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006276:	4b5d      	ldr	r3, [pc, #372]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0f0      	beq.n	8006264 <HAL_RCC_OscConfig+0xe4>
 8006282:	e014      	b.n	80062ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006284:	f7fc ffde 	bl	8003244 <HAL_GetTick>
 8006288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800628a:	e008      	b.n	800629e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800628c:	f7fc ffda 	bl	8003244 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b64      	cmp	r3, #100	; 0x64
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e1e6      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800629e:	4b53      	ldr	r3, [pc, #332]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1f0      	bne.n	800628c <HAL_RCC_OscConfig+0x10c>
 80062aa:	e000      	b.n	80062ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d063      	beq.n	8006382 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062ba:	4b4c      	ldr	r3, [pc, #304]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f003 030c 	and.w	r3, r3, #12
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00b      	beq.n	80062de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80062c6:	4b49      	ldr	r3, [pc, #292]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f003 030c 	and.w	r3, r3, #12
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d11c      	bne.n	800630c <HAL_RCC_OscConfig+0x18c>
 80062d2:	4b46      	ldr	r3, [pc, #280]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d116      	bne.n	800630c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062de:	4b43      	ldr	r3, [pc, #268]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d005      	beq.n	80062f6 <HAL_RCC_OscConfig+0x176>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d001      	beq.n	80062f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e1ba      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062f6:	4b3d      	ldr	r3, [pc, #244]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	4939      	ldr	r1, [pc, #228]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 8006306:	4313      	orrs	r3, r2
 8006308:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800630a:	e03a      	b.n	8006382 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d020      	beq.n	8006356 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006314:	4b36      	ldr	r3, [pc, #216]	; (80063f0 <HAL_RCC_OscConfig+0x270>)
 8006316:	2201      	movs	r2, #1
 8006318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800631a:	f7fc ff93 	bl	8003244 <HAL_GetTick>
 800631e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006320:	e008      	b.n	8006334 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006322:	f7fc ff8f 	bl	8003244 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d901      	bls.n	8006334 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e19b      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006334:	4b2d      	ldr	r3, [pc, #180]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0f0      	beq.n	8006322 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006340:	4b2a      	ldr	r3, [pc, #168]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	00db      	lsls	r3, r3, #3
 800634e:	4927      	ldr	r1, [pc, #156]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 8006350:	4313      	orrs	r3, r2
 8006352:	600b      	str	r3, [r1, #0]
 8006354:	e015      	b.n	8006382 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006356:	4b26      	ldr	r3, [pc, #152]	; (80063f0 <HAL_RCC_OscConfig+0x270>)
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800635c:	f7fc ff72 	bl	8003244 <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006364:	f7fc ff6e 	bl	8003244 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e17a      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006376:	4b1d      	ldr	r3, [pc, #116]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1f0      	bne.n	8006364 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d03a      	beq.n	8006404 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d019      	beq.n	80063ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006396:	4b17      	ldr	r3, [pc, #92]	; (80063f4 <HAL_RCC_OscConfig+0x274>)
 8006398:	2201      	movs	r2, #1
 800639a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800639c:	f7fc ff52 	bl	8003244 <HAL_GetTick>
 80063a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063a4:	f7fc ff4e 	bl	8003244 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e15a      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063b6:	4b0d      	ldr	r3, [pc, #52]	; (80063ec <HAL_RCC_OscConfig+0x26c>)
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0f0      	beq.n	80063a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80063c2:	2001      	movs	r0, #1
 80063c4:	f000 fb0a 	bl	80069dc <RCC_Delay>
 80063c8:	e01c      	b.n	8006404 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063ca:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <HAL_RCC_OscConfig+0x274>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063d0:	f7fc ff38 	bl	8003244 <HAL_GetTick>
 80063d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063d6:	e00f      	b.n	80063f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063d8:	f7fc ff34 	bl	8003244 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d908      	bls.n	80063f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e140      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>
 80063ea:	bf00      	nop
 80063ec:	40021000 	.word	0x40021000
 80063f0:	42420000 	.word	0x42420000
 80063f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063f8:	4b9e      	ldr	r3, [pc, #632]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e9      	bne.n	80063d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 80a6 	beq.w	800655e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006412:	2300      	movs	r3, #0
 8006414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006416:	4b97      	ldr	r3, [pc, #604]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10d      	bne.n	800643e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006422:	4b94      	ldr	r3, [pc, #592]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	4a93      	ldr	r2, [pc, #588]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 8006428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800642c:	61d3      	str	r3, [r2, #28]
 800642e:	4b91      	ldr	r3, [pc, #580]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006436:	60bb      	str	r3, [r7, #8]
 8006438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800643a:	2301      	movs	r3, #1
 800643c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800643e:	4b8e      	ldr	r3, [pc, #568]	; (8006678 <HAL_RCC_OscConfig+0x4f8>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006446:	2b00      	cmp	r3, #0
 8006448:	d118      	bne.n	800647c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800644a:	4b8b      	ldr	r3, [pc, #556]	; (8006678 <HAL_RCC_OscConfig+0x4f8>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a8a      	ldr	r2, [pc, #552]	; (8006678 <HAL_RCC_OscConfig+0x4f8>)
 8006450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006456:	f7fc fef5 	bl	8003244 <HAL_GetTick>
 800645a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800645c:	e008      	b.n	8006470 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800645e:	f7fc fef1 	bl	8003244 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b64      	cmp	r3, #100	; 0x64
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e0fd      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006470:	4b81      	ldr	r3, [pc, #516]	; (8006678 <HAL_RCC_OscConfig+0x4f8>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0f0      	beq.n	800645e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d106      	bne.n	8006492 <HAL_RCC_OscConfig+0x312>
 8006484:	4b7b      	ldr	r3, [pc, #492]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	4a7a      	ldr	r2, [pc, #488]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 800648a:	f043 0301 	orr.w	r3, r3, #1
 800648e:	6213      	str	r3, [r2, #32]
 8006490:	e02d      	b.n	80064ee <HAL_RCC_OscConfig+0x36e>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10c      	bne.n	80064b4 <HAL_RCC_OscConfig+0x334>
 800649a:	4b76      	ldr	r3, [pc, #472]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	4a75      	ldr	r2, [pc, #468]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80064a0:	f023 0301 	bic.w	r3, r3, #1
 80064a4:	6213      	str	r3, [r2, #32]
 80064a6:	4b73      	ldr	r3, [pc, #460]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	4a72      	ldr	r2, [pc, #456]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80064ac:	f023 0304 	bic.w	r3, r3, #4
 80064b0:	6213      	str	r3, [r2, #32]
 80064b2:	e01c      	b.n	80064ee <HAL_RCC_OscConfig+0x36e>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	2b05      	cmp	r3, #5
 80064ba:	d10c      	bne.n	80064d6 <HAL_RCC_OscConfig+0x356>
 80064bc:	4b6d      	ldr	r3, [pc, #436]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	4a6c      	ldr	r2, [pc, #432]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80064c2:	f043 0304 	orr.w	r3, r3, #4
 80064c6:	6213      	str	r3, [r2, #32]
 80064c8:	4b6a      	ldr	r3, [pc, #424]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	4a69      	ldr	r2, [pc, #420]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80064ce:	f043 0301 	orr.w	r3, r3, #1
 80064d2:	6213      	str	r3, [r2, #32]
 80064d4:	e00b      	b.n	80064ee <HAL_RCC_OscConfig+0x36e>
 80064d6:	4b67      	ldr	r3, [pc, #412]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	4a66      	ldr	r2, [pc, #408]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80064dc:	f023 0301 	bic.w	r3, r3, #1
 80064e0:	6213      	str	r3, [r2, #32]
 80064e2:	4b64      	ldr	r3, [pc, #400]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	4a63      	ldr	r2, [pc, #396]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80064e8:	f023 0304 	bic.w	r3, r3, #4
 80064ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d015      	beq.n	8006522 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064f6:	f7fc fea5 	bl	8003244 <HAL_GetTick>
 80064fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064fc:	e00a      	b.n	8006514 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064fe:	f7fc fea1 	bl	8003244 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	f241 3288 	movw	r2, #5000	; 0x1388
 800650c:	4293      	cmp	r3, r2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e0ab      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006514:	4b57      	ldr	r3, [pc, #348]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0ee      	beq.n	80064fe <HAL_RCC_OscConfig+0x37e>
 8006520:	e014      	b.n	800654c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006522:	f7fc fe8f 	bl	8003244 <HAL_GetTick>
 8006526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006528:	e00a      	b.n	8006540 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800652a:	f7fc fe8b 	bl	8003244 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	f241 3288 	movw	r2, #5000	; 0x1388
 8006538:	4293      	cmp	r3, r2
 800653a:	d901      	bls.n	8006540 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e095      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006540:	4b4c      	ldr	r3, [pc, #304]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1ee      	bne.n	800652a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800654c:	7dfb      	ldrb	r3, [r7, #23]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d105      	bne.n	800655e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006552:	4b48      	ldr	r3, [pc, #288]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	4a47      	ldr	r2, [pc, #284]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 8006558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800655c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 8081 	beq.w	800666a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006568:	4b42      	ldr	r3, [pc, #264]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f003 030c 	and.w	r3, r3, #12
 8006570:	2b08      	cmp	r3, #8
 8006572:	d061      	beq.n	8006638 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	2b02      	cmp	r3, #2
 800657a:	d146      	bne.n	800660a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800657c:	4b3f      	ldr	r3, [pc, #252]	; (800667c <HAL_RCC_OscConfig+0x4fc>)
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006582:	f7fc fe5f 	bl	8003244 <HAL_GetTick>
 8006586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006588:	e008      	b.n	800659c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800658a:	f7fc fe5b 	bl	8003244 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d901      	bls.n	800659c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e067      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800659c:	4b35      	ldr	r3, [pc, #212]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1f0      	bne.n	800658a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065b0:	d108      	bne.n	80065c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80065b2:	4b30      	ldr	r3, [pc, #192]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	492d      	ldr	r1, [pc, #180]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065c4:	4b2b      	ldr	r3, [pc, #172]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a19      	ldr	r1, [r3, #32]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	430b      	orrs	r3, r1
 80065d6:	4927      	ldr	r1, [pc, #156]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065dc:	4b27      	ldr	r3, [pc, #156]	; (800667c <HAL_RCC_OscConfig+0x4fc>)
 80065de:	2201      	movs	r2, #1
 80065e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e2:	f7fc fe2f 	bl	8003244 <HAL_GetTick>
 80065e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065e8:	e008      	b.n	80065fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065ea:	f7fc fe2b 	bl	8003244 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e037      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065fc:	4b1d      	ldr	r3, [pc, #116]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <HAL_RCC_OscConfig+0x46a>
 8006608:	e02f      	b.n	800666a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800660a:	4b1c      	ldr	r3, [pc, #112]	; (800667c <HAL_RCC_OscConfig+0x4fc>)
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006610:	f7fc fe18 	bl	8003244 <HAL_GetTick>
 8006614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006618:	f7fc fe14 	bl	8003244 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e020      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800662a:	4b12      	ldr	r3, [pc, #72]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1f0      	bne.n	8006618 <HAL_RCC_OscConfig+0x498>
 8006636:	e018      	b.n	800666a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e013      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006644:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <HAL_RCC_OscConfig+0x4f4>)
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	429a      	cmp	r2, r3
 8006656:	d106      	bne.n	8006666 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006662:	429a      	cmp	r2, r3
 8006664:	d001      	beq.n	800666a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3718      	adds	r7, #24
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	40021000 	.word	0x40021000
 8006678:	40007000 	.word	0x40007000
 800667c:	42420060 	.word	0x42420060

08006680 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e0d0      	b.n	8006836 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006694:	4b6a      	ldr	r3, [pc, #424]	; (8006840 <HAL_RCC_ClockConfig+0x1c0>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d910      	bls.n	80066c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066a2:	4b67      	ldr	r3, [pc, #412]	; (8006840 <HAL_RCC_ClockConfig+0x1c0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f023 0207 	bic.w	r2, r3, #7
 80066aa:	4965      	ldr	r1, [pc, #404]	; (8006840 <HAL_RCC_ClockConfig+0x1c0>)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066b2:	4b63      	ldr	r3, [pc, #396]	; (8006840 <HAL_RCC_ClockConfig+0x1c0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d001      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e0b8      	b.n	8006836 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d020      	beq.n	8006712 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066dc:	4b59      	ldr	r3, [pc, #356]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	4a58      	ldr	r2, [pc, #352]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 80066e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0308 	and.w	r3, r3, #8
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066f4:	4b53      	ldr	r3, [pc, #332]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	4a52      	ldr	r2, [pc, #328]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 80066fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80066fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006700:	4b50      	ldr	r3, [pc, #320]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	494d      	ldr	r1, [pc, #308]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 800670e:	4313      	orrs	r3, r2
 8006710:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d040      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d107      	bne.n	8006736 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006726:	4b47      	ldr	r3, [pc, #284]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d115      	bne.n	800675e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e07f      	b.n	8006836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d107      	bne.n	800674e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800673e:	4b41      	ldr	r3, [pc, #260]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d109      	bne.n	800675e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e073      	b.n	8006836 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800674e:	4b3d      	ldr	r3, [pc, #244]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e06b      	b.n	8006836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800675e:	4b39      	ldr	r3, [pc, #228]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f023 0203 	bic.w	r2, r3, #3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	4936      	ldr	r1, [pc, #216]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 800676c:	4313      	orrs	r3, r2
 800676e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006770:	f7fc fd68 	bl	8003244 <HAL_GetTick>
 8006774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006776:	e00a      	b.n	800678e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006778:	f7fc fd64 	bl	8003244 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	f241 3288 	movw	r2, #5000	; 0x1388
 8006786:	4293      	cmp	r3, r2
 8006788:	d901      	bls.n	800678e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e053      	b.n	8006836 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800678e:	4b2d      	ldr	r3, [pc, #180]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f003 020c 	and.w	r2, r3, #12
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	429a      	cmp	r2, r3
 800679e:	d1eb      	bne.n	8006778 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067a0:	4b27      	ldr	r3, [pc, #156]	; (8006840 <HAL_RCC_ClockConfig+0x1c0>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d210      	bcs.n	80067d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ae:	4b24      	ldr	r3, [pc, #144]	; (8006840 <HAL_RCC_ClockConfig+0x1c0>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f023 0207 	bic.w	r2, r3, #7
 80067b6:	4922      	ldr	r1, [pc, #136]	; (8006840 <HAL_RCC_ClockConfig+0x1c0>)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067be:	4b20      	ldr	r3, [pc, #128]	; (8006840 <HAL_RCC_ClockConfig+0x1c0>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d001      	beq.n	80067d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e032      	b.n	8006836 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d008      	beq.n	80067ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067dc:	4b19      	ldr	r3, [pc, #100]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	4916      	ldr	r1, [pc, #88]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0308 	and.w	r3, r3, #8
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d009      	beq.n	800680e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80067fa:	4b12      	ldr	r3, [pc, #72]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	490e      	ldr	r1, [pc, #56]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 800680a:	4313      	orrs	r3, r2
 800680c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800680e:	f000 f821 	bl	8006854 <HAL_RCC_GetSysClockFreq>
 8006812:	4602      	mov	r2, r0
 8006814:	4b0b      	ldr	r3, [pc, #44]	; (8006844 <HAL_RCC_ClockConfig+0x1c4>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	091b      	lsrs	r3, r3, #4
 800681a:	f003 030f 	and.w	r3, r3, #15
 800681e:	490a      	ldr	r1, [pc, #40]	; (8006848 <HAL_RCC_ClockConfig+0x1c8>)
 8006820:	5ccb      	ldrb	r3, [r1, r3]
 8006822:	fa22 f303 	lsr.w	r3, r2, r3
 8006826:	4a09      	ldr	r2, [pc, #36]	; (800684c <HAL_RCC_ClockConfig+0x1cc>)
 8006828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800682a:	4b09      	ldr	r3, [pc, #36]	; (8006850 <HAL_RCC_ClockConfig+0x1d0>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f7fc fbc2 	bl	8002fb8 <HAL_InitTick>

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	40022000 	.word	0x40022000
 8006844:	40021000 	.word	0x40021000
 8006848:	0800f51c 	.word	0x0800f51c
 800684c:	20000010 	.word	0x20000010
 8006850:	20000014 	.word	0x20000014

08006854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006854:	b490      	push	{r4, r7}
 8006856:	b08a      	sub	sp, #40	; 0x28
 8006858:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800685a:	4b2a      	ldr	r3, [pc, #168]	; (8006904 <HAL_RCC_GetSysClockFreq+0xb0>)
 800685c:	1d3c      	adds	r4, r7, #4
 800685e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006860:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006864:	f240 2301 	movw	r3, #513	; 0x201
 8006868:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	61fb      	str	r3, [r7, #28]
 800686e:	2300      	movs	r3, #0
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	2300      	movs	r3, #0
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
 8006876:	2300      	movs	r3, #0
 8006878:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800687e:	4b22      	ldr	r3, [pc, #136]	; (8006908 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f003 030c 	and.w	r3, r3, #12
 800688a:	2b04      	cmp	r3, #4
 800688c:	d002      	beq.n	8006894 <HAL_RCC_GetSysClockFreq+0x40>
 800688e:	2b08      	cmp	r3, #8
 8006890:	d003      	beq.n	800689a <HAL_RCC_GetSysClockFreq+0x46>
 8006892:	e02d      	b.n	80068f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006894:	4b1d      	ldr	r3, [pc, #116]	; (800690c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006896:	623b      	str	r3, [r7, #32]
      break;
 8006898:	e02d      	b.n	80068f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	0c9b      	lsrs	r3, r3, #18
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80068a6:	4413      	add	r3, r2
 80068a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80068ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d013      	beq.n	80068e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80068b8:	4b13      	ldr	r3, [pc, #76]	; (8006908 <HAL_RCC_GetSysClockFreq+0xb4>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	0c5b      	lsrs	r3, r3, #17
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80068c6:	4413      	add	r3, r2
 80068c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80068cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	4a0e      	ldr	r2, [pc, #56]	; (800690c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068d2:	fb02 f203 	mul.w	r2, r2, r3
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
 80068de:	e004      	b.n	80068ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	4a0b      	ldr	r2, [pc, #44]	; (8006910 <HAL_RCC_GetSysClockFreq+0xbc>)
 80068e4:	fb02 f303 	mul.w	r3, r2, r3
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	623b      	str	r3, [r7, #32]
      break;
 80068ee:	e002      	b.n	80068f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068f0:	4b08      	ldr	r3, [pc, #32]	; (8006914 <HAL_RCC_GetSysClockFreq+0xc0>)
 80068f2:	623b      	str	r3, [r7, #32]
      break;
 80068f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068f6:	6a3b      	ldr	r3, [r7, #32]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3728      	adds	r7, #40	; 0x28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bc90      	pop	{r4, r7}
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	0800f010 	.word	0x0800f010
 8006908:	40021000 	.word	0x40021000
 800690c:	00f42400 	.word	0x00f42400
 8006910:	003d0900 	.word	0x003d0900
 8006914:	007a1200 	.word	0x007a1200

08006918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800691c:	4b02      	ldr	r3, [pc, #8]	; (8006928 <HAL_RCC_GetHCLKFreq+0x10>)
 800691e:	681b      	ldr	r3, [r3, #0]
}
 8006920:	4618      	mov	r0, r3
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr
 8006928:	20000010 	.word	0x20000010

0800692c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006930:	f7ff fff2 	bl	8006918 <HAL_RCC_GetHCLKFreq>
 8006934:	4602      	mov	r2, r0
 8006936:	4b05      	ldr	r3, [pc, #20]	; (800694c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	0a1b      	lsrs	r3, r3, #8
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	4903      	ldr	r1, [pc, #12]	; (8006950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006942:	5ccb      	ldrb	r3, [r1, r3]
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006948:	4618      	mov	r0, r3
 800694a:	bd80      	pop	{r7, pc}
 800694c:	40021000 	.word	0x40021000
 8006950:	0800f52c 	.word	0x0800f52c

08006954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006958:	f7ff ffde 	bl	8006918 <HAL_RCC_GetHCLKFreq>
 800695c:	4602      	mov	r2, r0
 800695e:	4b05      	ldr	r3, [pc, #20]	; (8006974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	0adb      	lsrs	r3, r3, #11
 8006964:	f003 0307 	and.w	r3, r3, #7
 8006968:	4903      	ldr	r1, [pc, #12]	; (8006978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800696a:	5ccb      	ldrb	r3, [r1, r3]
 800696c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006970:	4618      	mov	r0, r3
 8006972:	bd80      	pop	{r7, pc}
 8006974:	40021000 	.word	0x40021000
 8006978:	0800f52c 	.word	0x0800f52c

0800697c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	220f      	movs	r2, #15
 800698a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800698c:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <HAL_RCC_GetClockConfig+0x58>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f003 0203 	and.w	r2, r3, #3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006998:	4b0e      	ldr	r3, [pc, #56]	; (80069d4 <HAL_RCC_GetClockConfig+0x58>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80069a4:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <HAL_RCC_GetClockConfig+0x58>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80069b0:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <HAL_RCC_GetClockConfig+0x58>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	08db      	lsrs	r3, r3, #3
 80069b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80069be:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <HAL_RCC_GetClockConfig+0x5c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0207 	and.w	r2, r3, #7
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bc80      	pop	{r7}
 80069d2:	4770      	bx	lr
 80069d4:	40021000 	.word	0x40021000
 80069d8:	40022000 	.word	0x40022000

080069dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80069e4:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <RCC_Delay+0x34>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a0a      	ldr	r2, [pc, #40]	; (8006a14 <RCC_Delay+0x38>)
 80069ea:	fba2 2303 	umull	r2, r3, r2, r3
 80069ee:	0a5b      	lsrs	r3, r3, #9
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	fb02 f303 	mul.w	r3, r2, r3
 80069f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80069f8:	bf00      	nop
  }
  while (Delay --);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	1e5a      	subs	r2, r3, #1
 80069fe:	60fa      	str	r2, [r7, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1f9      	bne.n	80069f8 <RCC_Delay+0x1c>
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr
 8006a10:	20000010 	.word	0x20000010
 8006a14:	10624dd3 	.word	0x10624dd3

08006a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d07d      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006a34:	2300      	movs	r3, #0
 8006a36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a38:	4b4f      	ldr	r3, [pc, #316]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a3a:	69db      	ldr	r3, [r3, #28]
 8006a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10d      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a44:	4b4c      	ldr	r3, [pc, #304]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	4a4b      	ldr	r2, [pc, #300]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a4e:	61d3      	str	r3, [r2, #28]
 8006a50:	4b49      	ldr	r3, [pc, #292]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a60:	4b46      	ldr	r3, [pc, #280]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d118      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a6c:	4b43      	ldr	r3, [pc, #268]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a42      	ldr	r2, [pc, #264]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a78:	f7fc fbe4 	bl	8003244 <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a7e:	e008      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a80:	f7fc fbe0 	bl	8003244 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b64      	cmp	r3, #100	; 0x64
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e06d      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a92:	4b3a      	ldr	r3, [pc, #232]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d0f0      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a9e:	4b36      	ldr	r3, [pc, #216]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d02e      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d027      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006abc:	4b2e      	ldr	r3, [pc, #184]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ac6:	4b2e      	ldr	r3, [pc, #184]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ac8:	2201      	movs	r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006acc:	4b2c      	ldr	r3, [pc, #176]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006ad2:	4a29      	ldr	r2, [pc, #164]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d014      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae2:	f7fc fbaf 	bl	8003244 <HAL_GetTick>
 8006ae6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ae8:	e00a      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aea:	f7fc fbab 	bl	8003244 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d901      	bls.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e036      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b00:	4b1d      	ldr	r3, [pc, #116]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0ee      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b0c:	4b1a      	ldr	r3, [pc, #104]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4917      	ldr	r1, [pc, #92]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d105      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b24:	4b14      	ldr	r3, [pc, #80]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	4a13      	ldr	r2, [pc, #76]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d008      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b3c:	4b0e      	ldr	r3, [pc, #56]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	490b      	ldr	r1, [pc, #44]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0310 	and.w	r3, r3, #16
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d008      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b5a:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	4904      	ldr	r1, [pc, #16]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	40021000 	.word	0x40021000
 8006b7c:	40007000 	.word	0x40007000
 8006b80:	42420440 	.word	0x42420440

08006b84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e076      	b.n	8006c84 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d108      	bne.n	8006bb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ba6:	d009      	beq.n	8006bbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	61da      	str	r2, [r3, #28]
 8006bae:	e005      	b.n	8006bbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fc f96a 	bl	8002eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bf2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c40:	ea42 0103 	orr.w	r1, r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	0c1a      	lsrs	r2, r3, #16
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f002 0204 	and.w	r2, r2, #4
 8006c62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	69da      	ldr	r2, [r3, #28]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b088      	sub	sp, #32
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d101      	bne.n	8006cae <HAL_SPI_Transmit+0x22>
 8006caa:	2302      	movs	r3, #2
 8006cac:	e126      	b.n	8006efc <HAL_SPI_Transmit+0x270>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cb6:	f7fc fac5 	bl	8003244 <HAL_GetTick>
 8006cba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d002      	beq.n	8006cd2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ccc:	2302      	movs	r3, #2
 8006cce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cd0:	e10b      	b.n	8006eea <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_SPI_Transmit+0x52>
 8006cd8:	88fb      	ldrh	r3, [r7, #6]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d102      	bne.n	8006ce4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ce2:	e102      	b.n	8006eea <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2203      	movs	r2, #3
 8006ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	88fa      	ldrh	r2, [r7, #6]
 8006cfc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	88fa      	ldrh	r2, [r7, #6]
 8006d02:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d2a:	d10f      	bne.n	8006d4c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d56:	2b40      	cmp	r3, #64	; 0x40
 8006d58:	d007      	beq.n	8006d6a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d72:	d14b      	bne.n	8006e0c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <HAL_SPI_Transmit+0xf6>
 8006d7c:	8afb      	ldrh	r3, [r7, #22]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d13e      	bne.n	8006e00 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	881a      	ldrh	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d92:	1c9a      	adds	r2, r3, #2
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006da6:	e02b      	b.n	8006e00 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d112      	bne.n	8006ddc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dba:	881a      	ldrh	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc6:	1c9a      	adds	r2, r3, #2
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	86da      	strh	r2, [r3, #54]	; 0x36
 8006dda:	e011      	b.n	8006e00 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ddc:	f7fc fa32 	bl	8003244 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d803      	bhi.n	8006df4 <HAL_SPI_Transmit+0x168>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d102      	bne.n	8006dfa <HAL_SPI_Transmit+0x16e>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d102      	bne.n	8006e00 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006dfe:	e074      	b.n	8006eea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1ce      	bne.n	8006da8 <HAL_SPI_Transmit+0x11c>
 8006e0a:	e04c      	b.n	8006ea6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <HAL_SPI_Transmit+0x18e>
 8006e14:	8afb      	ldrh	r3, [r7, #22]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d140      	bne.n	8006e9c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	330c      	adds	r3, #12
 8006e24:	7812      	ldrb	r2, [r2, #0]
 8006e26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e40:	e02c      	b.n	8006e9c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d113      	bne.n	8006e78 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	330c      	adds	r3, #12
 8006e5a:	7812      	ldrb	r2, [r2, #0]
 8006e5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e76:	e011      	b.n	8006e9c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e78:	f7fc f9e4 	bl	8003244 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d803      	bhi.n	8006e90 <HAL_SPI_Transmit+0x204>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8e:	d102      	bne.n	8006e96 <HAL_SPI_Transmit+0x20a>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d102      	bne.n	8006e9c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e9a:	e026      	b.n	8006eea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1cd      	bne.n	8006e42 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 f8b2 	bl	8007014 <SPI_EndRxTxTransaction>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10a      	bne.n	8006eda <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	613b      	str	r3, [r7, #16]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	613b      	str	r3, [r7, #16]
 8006ed8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d002      	beq.n	8006ee8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	77fb      	strb	r3, [r7, #31]
 8006ee6:	e000      	b.n	8006eea <HAL_SPI_Transmit+0x25e>
  }

error:
 8006ee8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006efa:	7ffb      	ldrb	r3, [r7, #31]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3720      	adds	r7, #32
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b088      	sub	sp, #32
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	4613      	mov	r3, r2
 8006f12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f14:	f7fc f996 	bl	8003244 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	1a9b      	subs	r3, r3, r2
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	4413      	add	r3, r2
 8006f22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f24:	f7fc f98e 	bl	8003244 <HAL_GetTick>
 8006f28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f2a:	4b39      	ldr	r3, [pc, #228]	; (8007010 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	015b      	lsls	r3, r3, #5
 8006f30:	0d1b      	lsrs	r3, r3, #20
 8006f32:	69fa      	ldr	r2, [r7, #28]
 8006f34:	fb02 f303 	mul.w	r3, r2, r3
 8006f38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f3a:	e054      	b.n	8006fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f42:	d050      	beq.n	8006fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f44:	f7fc f97e 	bl	8003244 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	69fa      	ldr	r2, [r7, #28]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d902      	bls.n	8006f5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d13d      	bne.n	8006fd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f72:	d111      	bne.n	8006f98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f7c:	d004      	beq.n	8006f88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f86:	d107      	bne.n	8006f98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fa0:	d10f      	bne.n	8006fc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e017      	b.n	8007006 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	4013      	ands	r3, r2
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	bf0c      	ite	eq
 8006ff6:	2301      	moveq	r3, #1
 8006ff8:	2300      	movne	r3, #0
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	79fb      	ldrb	r3, [r7, #7]
 8007000:	429a      	cmp	r2, r3
 8007002:	d19b      	bne.n	8006f3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3720      	adds	r7, #32
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	20000010 	.word	0x20000010

08007014 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af02      	add	r7, sp, #8
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2200      	movs	r2, #0
 8007028:	2180      	movs	r1, #128	; 0x80
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f7ff ff6a 	bl	8006f04 <SPI_WaitFlagStateUntilTimeout>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d007      	beq.n	8007046 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703a:	f043 0220 	orr.w	r2, r3, #32
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e000      	b.n	8007048 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e041      	b.n	80070e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d106      	bne.n	800707c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f839 	bl	80070ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2202      	movs	r2, #2
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3304      	adds	r3, #4
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	f000 f9b4 	bl	80073fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bc80      	pop	{r7}
 80070fe:	4770      	bx	lr

08007100 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b01      	cmp	r3, #1
 8007112:	d001      	beq.n	8007118 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e03a      	b.n	800718e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68da      	ldr	r2, [r3, #12]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0201 	orr.w	r2, r2, #1
 800712e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a18      	ldr	r2, [pc, #96]	; (8007198 <HAL_TIM_Base_Start_IT+0x98>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d00e      	beq.n	8007158 <HAL_TIM_Base_Start_IT+0x58>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007142:	d009      	beq.n	8007158 <HAL_TIM_Base_Start_IT+0x58>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a14      	ldr	r2, [pc, #80]	; (800719c <HAL_TIM_Base_Start_IT+0x9c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d004      	beq.n	8007158 <HAL_TIM_Base_Start_IT+0x58>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a13      	ldr	r2, [pc, #76]	; (80071a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d111      	bne.n	800717c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f003 0307 	and.w	r3, r3, #7
 8007162:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b06      	cmp	r3, #6
 8007168:	d010      	beq.n	800718c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f042 0201 	orr.w	r2, r2, #1
 8007178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800717a:	e007      	b.n	800718c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0201 	orr.w	r2, r2, #1
 800718a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	bc80      	pop	{r7}
 8007196:	4770      	bx	lr
 8007198:	40012c00 	.word	0x40012c00
 800719c:	40000400 	.word	0x40000400
 80071a0:	40000800 	.word	0x40000800

080071a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d122      	bne.n	8007200 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d11b      	bne.n	8007200 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0202 	mvn.w	r2, #2
 80071d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f8ed 	bl	80073c6 <HAL_TIM_IC_CaptureCallback>
 80071ec:	e005      	b.n	80071fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f8e0 	bl	80073b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f8ef 	bl	80073d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b04      	cmp	r3, #4
 800720c:	d122      	bne.n	8007254 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b04      	cmp	r3, #4
 800721a:	d11b      	bne.n	8007254 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f06f 0204 	mvn.w	r2, #4
 8007224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2202      	movs	r2, #2
 800722a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f8c3 	bl	80073c6 <HAL_TIM_IC_CaptureCallback>
 8007240:	e005      	b.n	800724e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f8b6 	bl	80073b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f8c5 	bl	80073d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0308 	and.w	r3, r3, #8
 800725e:	2b08      	cmp	r3, #8
 8007260:	d122      	bne.n	80072a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f003 0308 	and.w	r3, r3, #8
 800726c:	2b08      	cmp	r3, #8
 800726e:	d11b      	bne.n	80072a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f06f 0208 	mvn.w	r2, #8
 8007278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2204      	movs	r2, #4
 800727e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f899 	bl	80073c6 <HAL_TIM_IC_CaptureCallback>
 8007294:	e005      	b.n	80072a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f88c 	bl	80073b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f89b 	bl	80073d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f003 0310 	and.w	r3, r3, #16
 80072b2:	2b10      	cmp	r3, #16
 80072b4:	d122      	bne.n	80072fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	2b10      	cmp	r3, #16
 80072c2:	d11b      	bne.n	80072fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f06f 0210 	mvn.w	r2, #16
 80072cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2208      	movs	r2, #8
 80072d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f86f 	bl	80073c6 <HAL_TIM_IC_CaptureCallback>
 80072e8:	e005      	b.n	80072f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f862 	bl	80073b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f871 	bl	80073d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b01      	cmp	r3, #1
 8007308:	d10e      	bne.n	8007328 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b01      	cmp	r3, #1
 8007316:	d107      	bne.n	8007328 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f06f 0201 	mvn.w	r2, #1
 8007320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7f9 ff06 	bl	8001134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007332:	2b80      	cmp	r3, #128	; 0x80
 8007334:	d10e      	bne.n	8007354 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007340:	2b80      	cmp	r3, #128	; 0x80
 8007342:	d107      	bne.n	8007354 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800734c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f8bf 	bl	80074d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735e:	2b40      	cmp	r3, #64	; 0x40
 8007360:	d10e      	bne.n	8007380 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736c:	2b40      	cmp	r3, #64	; 0x40
 800736e:	d107      	bne.n	8007380 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f835 	bl	80073ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b20      	cmp	r3, #32
 800738c:	d10e      	bne.n	80073ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f003 0320 	and.w	r3, r3, #32
 8007398:	2b20      	cmp	r3, #32
 800739a:	d107      	bne.n	80073ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f06f 0220 	mvn.w	r2, #32
 80073a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f88a 	bl	80074c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073ac:	bf00      	nop
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bc80      	pop	{r7}
 80073c4:	4770      	bx	lr

080073c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bc80      	pop	{r7}
 80073d6:	4770      	bx	lr

080073d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bc80      	pop	{r7}
 80073e8:	4770      	bx	lr

080073ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bc80      	pop	{r7}
 80073fa:	4770      	bx	lr

080073fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a29      	ldr	r2, [pc, #164]	; (80074b4 <TIM_Base_SetConfig+0xb8>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00b      	beq.n	800742c <TIM_Base_SetConfig+0x30>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800741a:	d007      	beq.n	800742c <TIM_Base_SetConfig+0x30>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a26      	ldr	r2, [pc, #152]	; (80074b8 <TIM_Base_SetConfig+0xbc>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d003      	beq.n	800742c <TIM_Base_SetConfig+0x30>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a25      	ldr	r2, [pc, #148]	; (80074bc <TIM_Base_SetConfig+0xc0>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d108      	bne.n	800743e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a1c      	ldr	r2, [pc, #112]	; (80074b4 <TIM_Base_SetConfig+0xb8>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00b      	beq.n	800745e <TIM_Base_SetConfig+0x62>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800744c:	d007      	beq.n	800745e <TIM_Base_SetConfig+0x62>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a19      	ldr	r2, [pc, #100]	; (80074b8 <TIM_Base_SetConfig+0xbc>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d003      	beq.n	800745e <TIM_Base_SetConfig+0x62>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a18      	ldr	r2, [pc, #96]	; (80074bc <TIM_Base_SetConfig+0xc0>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d108      	bne.n	8007470 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	4313      	orrs	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a07      	ldr	r2, [pc, #28]	; (80074b4 <TIM_Base_SetConfig+0xb8>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d103      	bne.n	80074a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	691a      	ldr	r2, [r3, #16]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	615a      	str	r2, [r3, #20]
}
 80074aa:	bf00      	nop
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bc80      	pop	{r7}
 80074b2:	4770      	bx	lr
 80074b4:	40012c00 	.word	0x40012c00
 80074b8:	40000400 	.word	0x40000400
 80074bc:	40000800 	.word	0x40000800

080074c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bc80      	pop	{r7}
 80074d0:	4770      	bx	lr

080074d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	bc80      	pop	{r7}
 80074e2:	4770      	bx	lr

080074e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80074e4:	b084      	sub	sp, #16
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	f107 0014 	add.w	r0, r7, #20
 80074f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	b004      	add	sp, #16
 8007502:	4770      	bx	lr

08007504 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007514:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007518:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	b29a      	uxth	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	bc80      	pop	{r7}
 800752e:	4770      	bx	lr

08007530 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007538:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800753c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007544:	b29a      	uxth	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	b29b      	uxth	r3, r3
 800754a:	43db      	mvns	r3, r3
 800754c:	b29b      	uxth	r3, r3
 800754e:	4013      	ands	r3, r2
 8007550:	b29a      	uxth	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	bc80      	pop	{r7}
 8007562:	4770      	bx	lr

08007564 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	460b      	mov	r3, r1
 800756e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	bc80      	pop	{r7}
 800757a:	4770      	bx	lr

0800757c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800757c:	b084      	sub	sp, #16
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	f107 0014 	add.w	r0, r7, #20
 800758a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bc80      	pop	{r7}
 80075b8:	b004      	add	sp, #16
 80075ba:	4770      	bx	lr

080075bc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075bc:	b480      	push	{r7}
 80075be:	b09b      	sub	sp, #108	; 0x6c
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	881b      	ldrh	r3, [r3, #0]
 80075d8:	b29b      	uxth	r3, r3
 80075da:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80075de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	78db      	ldrb	r3, [r3, #3]
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d81f      	bhi.n	800762e <USB_ActivateEndpoint+0x72>
 80075ee:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <USB_ActivateEndpoint+0x38>)
 80075f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f4:	08007605 	.word	0x08007605
 80075f8:	08007621 	.word	0x08007621
 80075fc:	08007637 	.word	0x08007637
 8007600:	08007613 	.word	0x08007613
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007604:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007608:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800760c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007610:	e012      	b.n	8007638 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007612:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007616:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800761a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800761e:	e00b      	b.n	8007638 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007620:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007624:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007628:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800762c:	e004      	b.n	8007638 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007634:	e000      	b.n	8007638 <USB_ActivateEndpoint+0x7c>
      break;
 8007636:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	441a      	add	r2, r3
 8007642:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800764a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800764e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007656:	b29b      	uxth	r3, r3
 8007658:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007670:	b29a      	uxth	r2, r3
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	b29b      	uxth	r3, r3
 8007678:	4313      	orrs	r3, r2
 800767a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	441a      	add	r2, r3
 8007688:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800768c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800769c:	b29b      	uxth	r3, r3
 800769e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	7b1b      	ldrb	r3, [r3, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f040 8149 	bne.w	800793c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	785b      	ldrb	r3, [r3, #1]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 8084 	beq.w	80077bc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	617b      	str	r3, [r7, #20]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076be:	b29b      	uxth	r3, r3
 80076c0:	461a      	mov	r2, r3
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	4413      	add	r3, r2
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	011a      	lsls	r2, r3, #4
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076d6:	613b      	str	r3, [r7, #16]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	88db      	ldrh	r3, [r3, #6]
 80076dc:	085b      	lsrs	r3, r3, #1
 80076de:	b29b      	uxth	r3, r3
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	81fb      	strh	r3, [r7, #14]
 80076f6:	89fb      	ldrh	r3, [r7, #14]
 80076f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d01b      	beq.n	8007738 <USB_ActivateEndpoint+0x17c>
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	b29b      	uxth	r3, r3
 800770e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007716:	81bb      	strh	r3, [r7, #12]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	441a      	add	r2, r3
 8007722:	89bb      	ldrh	r3, [r7, #12]
 8007724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800772c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007730:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007734:	b29b      	uxth	r3, r3
 8007736:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	78db      	ldrb	r3, [r3, #3]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d020      	beq.n	8007782 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	b29b      	uxth	r3, r3
 800774e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007756:	813b      	strh	r3, [r7, #8]
 8007758:	893b      	ldrh	r3, [r7, #8]
 800775a:	f083 0320 	eor.w	r3, r3, #32
 800775e:	813b      	strh	r3, [r7, #8]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	441a      	add	r2, r3
 800776a:	893b      	ldrh	r3, [r7, #8]
 800776c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800777c:	b29b      	uxth	r3, r3
 800777e:	8013      	strh	r3, [r2, #0]
 8007780:	e27f      	b.n	8007c82 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	b29b      	uxth	r3, r3
 8007790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007798:	817b      	strh	r3, [r7, #10]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	441a      	add	r2, r3
 80077a4:	897b      	ldrh	r3, [r7, #10]
 80077a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	8013      	strh	r3, [r2, #0]
 80077ba:	e262      	b.n	8007c82 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	461a      	mov	r2, r3
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	4413      	add	r3, r2
 80077ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	011a      	lsls	r2, r3, #4
 80077d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	88db      	ldrh	r3, [r3, #6]
 80077e4:	085b      	lsrs	r3, r3, #1
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	461a      	mov	r2, r3
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	4413      	add	r3, r2
 8007802:	627b      	str	r3, [r7, #36]	; 0x24
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	011a      	lsls	r2, r3, #4
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	4413      	add	r3, r2
 800780e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007812:	623b      	str	r3, [r7, #32]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d112      	bne.n	8007842 <USB_ActivateEndpoint+0x286>
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	b29b      	uxth	r3, r3
 8007822:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007826:	b29a      	uxth	r2, r3
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	801a      	strh	r2, [r3, #0]
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800783a:	b29a      	uxth	r2, r3
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	801a      	strh	r2, [r3, #0]
 8007840:	e02f      	b.n	80078a2 <USB_ActivateEndpoint+0x2e6>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b3e      	cmp	r3, #62	; 0x3e
 8007848:	d813      	bhi.n	8007872 <USB_ActivateEndpoint+0x2b6>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	085b      	lsrs	r3, r3, #1
 8007850:	663b      	str	r3, [r7, #96]	; 0x60
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <USB_ActivateEndpoint+0x2a8>
 800785e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007860:	3301      	adds	r3, #1
 8007862:	663b      	str	r3, [r7, #96]	; 0x60
 8007864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007866:	b29b      	uxth	r3, r3
 8007868:	029b      	lsls	r3, r3, #10
 800786a:	b29a      	uxth	r2, r3
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	801a      	strh	r2, [r3, #0]
 8007870:	e017      	b.n	80078a2 <USB_ActivateEndpoint+0x2e6>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	095b      	lsrs	r3, r3, #5
 8007878:	663b      	str	r3, [r7, #96]	; 0x60
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 031f 	and.w	r3, r3, #31
 8007882:	2b00      	cmp	r3, #0
 8007884:	d102      	bne.n	800788c <USB_ActivateEndpoint+0x2d0>
 8007886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007888:	3b01      	subs	r3, #1
 800788a:	663b      	str	r3, [r7, #96]	; 0x60
 800788c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800788e:	b29b      	uxth	r3, r3
 8007890:	029b      	lsls	r3, r3, #10
 8007892:	b29b      	uxth	r3, r3
 8007894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800789c:	b29a      	uxth	r2, r3
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	83fb      	strh	r3, [r7, #30]
 80078b0:	8bfb      	ldrh	r3, [r7, #30]
 80078b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d01b      	beq.n	80078f2 <USB_ActivateEndpoint+0x336>
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d0:	83bb      	strh	r3, [r7, #28]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	441a      	add	r2, r3
 80078dc:	8bbb      	ldrh	r3, [r7, #28]
 80078de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007908:	837b      	strh	r3, [r7, #26]
 800790a:	8b7b      	ldrh	r3, [r7, #26]
 800790c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007910:	837b      	strh	r3, [r7, #26]
 8007912:	8b7b      	ldrh	r3, [r7, #26]
 8007914:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007918:	837b      	strh	r3, [r7, #26]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	441a      	add	r2, r3
 8007924:	8b7b      	ldrh	r3, [r7, #26]
 8007926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800792a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800792e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007936:	b29b      	uxth	r3, r3
 8007938:	8013      	strh	r3, [r2, #0]
 800793a:	e1a2      	b.n	8007c82 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	881b      	ldrh	r3, [r3, #0]
 8007948:	b29b      	uxth	r3, r3
 800794a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800794e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007952:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	441a      	add	r2, r3
 8007960:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800796c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007974:	b29b      	uxth	r3, r3
 8007976:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	65bb      	str	r3, [r7, #88]	; 0x58
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007982:	b29b      	uxth	r3, r3
 8007984:	461a      	mov	r2, r3
 8007986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007988:	4413      	add	r3, r2
 800798a:	65bb      	str	r3, [r7, #88]	; 0x58
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	011a      	lsls	r2, r3, #4
 8007992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007994:	4413      	add	r3, r2
 8007996:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800799a:	657b      	str	r3, [r7, #84]	; 0x54
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	891b      	ldrh	r3, [r3, #8]
 80079a0:	085b      	lsrs	r3, r3, #1
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079aa:	801a      	strh	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	653b      	str	r3, [r7, #80]	; 0x50
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	461a      	mov	r2, r3
 80079ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079bc:	4413      	add	r3, r2
 80079be:	653b      	str	r3, [r7, #80]	; 0x50
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	011a      	lsls	r2, r3, #4
 80079c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079c8:	4413      	add	r3, r2
 80079ca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80079ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	895b      	ldrh	r3, [r3, #10]
 80079d4:	085b      	lsrs	r3, r3, #1
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	b29a      	uxth	r2, r3
 80079dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	785b      	ldrb	r3, [r3, #1]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f040 8091 	bne.w	8007b0c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80079f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d01b      	beq.n	8007a3a <USB_ActivateEndpoint+0x47e>
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a18:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	441a      	add	r2, r3
 8007a24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	873b      	strh	r3, [r7, #56]	; 0x38
 8007a48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d01b      	beq.n	8007a8a <USB_ActivateEndpoint+0x4ce>
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a68:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	441a      	add	r2, r3
 8007a74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007aa2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007aa4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007aa8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007aaa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007aac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ab0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	441a      	add	r2, r3
 8007abc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae8:	867b      	strh	r3, [r7, #50]	; 0x32
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	441a      	add	r2, r3
 8007af4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	8013      	strh	r3, [r2, #0]
 8007b0a:	e0ba      	b.n	8007c82 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007b1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d01d      	beq.n	8007b64 <USB_ActivateEndpoint+0x5a8>
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b3e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	441a      	add	r2, r3
 8007b4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007b74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d01d      	beq.n	8007bbc <USB_ActivateEndpoint+0x600>
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	441a      	add	r2, r3
 8007ba4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	78db      	ldrb	r3, [r3, #3]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d024      	beq.n	8007c0e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007bde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007be2:	f083 0320 	eor.w	r3, r3, #32
 8007be6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	441a      	add	r2, r3
 8007bf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	8013      	strh	r3, [r2, #0]
 8007c0c:	e01d      	b.n	8007c4a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	441a      	add	r2, r3
 8007c32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c60:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	441a      	add	r2, r3
 8007c6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007c82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	376c      	adds	r7, #108	; 0x6c
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bc80      	pop	{r7}
 8007c8e:	4770      	bx	lr

08007c90 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b08d      	sub	sp, #52	; 0x34
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	7b1b      	ldrb	r3, [r3, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f040 808e 	bne.w	8007dc0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	785b      	ldrb	r3, [r3, #1]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d044      	beq.n	8007d36 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	81bb      	strh	r3, [r7, #12]
 8007cba:	89bb      	ldrh	r3, [r7, #12]
 8007cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01b      	beq.n	8007cfc <USB_DeactivateEndpoint+0x6c>
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cda:	817b      	strh	r3, [r7, #10]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	441a      	add	r2, r3
 8007ce6:	897b      	ldrh	r3, [r7, #10]
 8007ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d12:	813b      	strh	r3, [r7, #8]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	441a      	add	r2, r3
 8007d1e:	893b      	ldrh	r3, [r7, #8]
 8007d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	8013      	strh	r3, [r2, #0]
 8007d34:	e192      	b.n	800805c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4413      	add	r3, r2
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	827b      	strh	r3, [r7, #18]
 8007d44:	8a7b      	ldrh	r3, [r7, #18]
 8007d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d01b      	beq.n	8007d86 <USB_DeactivateEndpoint+0xf6>
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d64:	823b      	strh	r3, [r7, #16]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	441a      	add	r2, r3
 8007d70:	8a3b      	ldrh	r3, [r7, #16]
 8007d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9c:	81fb      	strh	r3, [r7, #14]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	441a      	add	r2, r3
 8007da8:	89fb      	ldrh	r3, [r7, #14]
 8007daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	8013      	strh	r3, [r2, #0]
 8007dbe:	e14d      	b.n	800805c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	785b      	ldrb	r3, [r3, #1]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f040 80a5 	bne.w	8007f14 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	843b      	strh	r3, [r7, #32]
 8007dd8:	8c3b      	ldrh	r3, [r7, #32]
 8007dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d01b      	beq.n	8007e1a <USB_DeactivateEndpoint+0x18a>
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df8:	83fb      	strh	r3, [r7, #30]
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	441a      	add	r2, r3
 8007e04:	8bfb      	ldrh	r3, [r7, #30]
 8007e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	83bb      	strh	r3, [r7, #28]
 8007e28:	8bbb      	ldrh	r3, [r7, #28]
 8007e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d01b      	beq.n	8007e6a <USB_DeactivateEndpoint+0x1da>
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e48:	837b      	strh	r3, [r7, #26]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	441a      	add	r2, r3
 8007e54:	8b7b      	ldrh	r3, [r7, #26]
 8007e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e80:	833b      	strh	r3, [r7, #24]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	441a      	add	r2, r3
 8007e8c:	8b3b      	ldrh	r3, [r7, #24]
 8007e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb8:	82fb      	strh	r3, [r7, #22]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	441a      	add	r2, r3
 8007ec4:	8afb      	ldrh	r3, [r7, #22]
 8007ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ef0:	82bb      	strh	r3, [r7, #20]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	441a      	add	r2, r3
 8007efc:	8abb      	ldrh	r3, [r7, #20]
 8007efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	8013      	strh	r3, [r2, #0]
 8007f12:	e0a3      	b.n	800805c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007f22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d01b      	beq.n	8007f64 <USB_DeactivateEndpoint+0x2d4>
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f42:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	441a      	add	r2, r3
 8007f4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007f72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d01b      	beq.n	8007fb4 <USB_DeactivateEndpoint+0x324>
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f92:	853b      	strh	r3, [r7, #40]	; 0x28
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	441a      	add	r2, r3
 8007f9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fca:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	441a      	add	r2, r3
 8007fd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fe0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008002:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	441a      	add	r2, r3
 800800e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800801c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008020:	b29b      	uxth	r3, r3
 8008022:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29b      	uxth	r3, r3
 8008032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803a:	847b      	strh	r3, [r7, #34]	; 0x22
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	441a      	add	r2, r3
 8008046:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800804c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008058:	b29b      	uxth	r3, r3
 800805a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3734      	adds	r7, #52	; 0x34
 8008062:	46bd      	mov	sp, r7
 8008064:	bc80      	pop	{r7}
 8008066:	4770      	bx	lr

08008068 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b0cc      	sub	sp, #304	; 0x130
 800806c:	af00      	add	r7, sp, #0
 800806e:	1d3b      	adds	r3, r7, #4
 8008070:	6018      	str	r0, [r3, #0]
 8008072:	463b      	mov	r3, r7
 8008074:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008076:	463b      	mov	r3, r7
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	785b      	ldrb	r3, [r3, #1]
 800807c:	2b01      	cmp	r3, #1
 800807e:	f040 872e 	bne.w	8008ede <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008082:	463b      	mov	r3, r7
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	699a      	ldr	r2, [r3, #24]
 8008088:	463b      	mov	r3, r7
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	429a      	cmp	r2, r3
 8008090:	d905      	bls.n	800809e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008092:	463b      	mov	r3, r7
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800809c:	e004      	b.n	80080a8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800809e:	463b      	mov	r3, r7
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80080a8:	463b      	mov	r3, r7
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	7b1b      	ldrb	r3, [r3, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d134      	bne.n	800811c <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80080b2:	463b      	mov	r3, r7
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6959      	ldr	r1, [r3, #20]
 80080b8:	463b      	mov	r3, r7
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	88da      	ldrh	r2, [r3, #6]
 80080be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	1d38      	adds	r0, r7, #4
 80080c6:	6800      	ldr	r0, [r0, #0]
 80080c8:	f001 fc03 	bl	80098d2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80080cc:	f107 0310 	add.w	r3, r7, #16
 80080d0:	1d3a      	adds	r2, r7, #4
 80080d2:	6812      	ldr	r2, [r2, #0]
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	1d3b      	adds	r3, r7, #4
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080de:	b29b      	uxth	r3, r3
 80080e0:	4619      	mov	r1, r3
 80080e2:	f107 0310 	add.w	r3, r7, #16
 80080e6:	f107 0210 	add.w	r2, r7, #16
 80080ea:	6812      	ldr	r2, [r2, #0]
 80080ec:	440a      	add	r2, r1
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	463b      	mov	r3, r7
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	011a      	lsls	r2, r3, #4
 80080f8:	f107 0310 	add.w	r3, r7, #16
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4413      	add	r3, r2
 8008100:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008104:	f107 030c 	add.w	r3, r7, #12
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800810e:	b29a      	uxth	r2, r3
 8008110:	f107 030c 	add.w	r3, r7, #12
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	801a      	strh	r2, [r3, #0]
 8008118:	f000 beac 	b.w	8008e74 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800811c:	463b      	mov	r3, r7
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	78db      	ldrb	r3, [r3, #3]
 8008122:	2b02      	cmp	r3, #2
 8008124:	f040 838c 	bne.w	8008840 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008128:	463b      	mov	r3, r7
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6a1a      	ldr	r2, [r3, #32]
 800812e:	463b      	mov	r3, r7
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	429a      	cmp	r2, r3
 8008136:	f240 8330 	bls.w	800879a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800813a:	1d3b      	adds	r3, r7, #4
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	463b      	mov	r3, r7
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	b29b      	uxth	r3, r3
 800814c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008154:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008158:	1d3b      	adds	r3, r7, #4
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	463b      	mov	r3, r7
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	441a      	add	r2, r3
 8008166:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800816a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800816e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008172:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817a:	b29b      	uxth	r3, r3
 800817c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800817e:	463b      	mov	r3, r7
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6a1a      	ldr	r2, [r3, #32]
 8008184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008188:	1ad2      	subs	r2, r2, r3
 800818a:	463b      	mov	r3, r7
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008190:	1d3b      	adds	r3, r7, #4
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	463b      	mov	r3, r7
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 819e 	beq.w	80084e8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80081b0:	1d3a      	adds	r2, r7, #4
 80081b2:	6812      	ldr	r2, [r2, #0]
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	463b      	mov	r3, r7
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	785b      	ldrb	r3, [r3, #1]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d17a      	bne.n	80082b6 <USB_EPStartXfer+0x24e>
 80081c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081c4:	1d3a      	adds	r2, r7, #4
 80081c6:	6812      	ldr	r2, [r2, #0]
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	1d3b      	adds	r3, r7, #4
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	4619      	mov	r1, r3
 80081d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80081de:	6812      	ldr	r2, [r2, #0]
 80081e0:	440a      	add	r2, r1
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	463b      	mov	r3, r7
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	011a      	lsls	r2, r3, #4
 80081ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4413      	add	r3, r2
 80081f4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80081f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008202:	2b00      	cmp	r3, #0
 8008204:	d11a      	bne.n	800823c <USB_EPStartXfer+0x1d4>
 8008206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008214:	b29a      	uxth	r2, r3
 8008216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	801a      	strh	r2, [r3, #0]
 800821e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	b29b      	uxth	r3, r3
 8008228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800822c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008230:	b29a      	uxth	r2, r3
 8008232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	801a      	strh	r2, [r3, #0]
 800823a:	e062      	b.n	8008302 <USB_EPStartXfer+0x29a>
 800823c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008240:	2b3e      	cmp	r3, #62	; 0x3e
 8008242:	d819      	bhi.n	8008278 <USB_EPStartXfer+0x210>
 8008244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008248:	085b      	lsrs	r3, r3, #1
 800824a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800824e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b00      	cmp	r3, #0
 8008258:	d004      	beq.n	8008264 <USB_EPStartXfer+0x1fc>
 800825a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800825e:	3301      	adds	r3, #1
 8008260:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008264:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008268:	b29b      	uxth	r3, r3
 800826a:	029b      	lsls	r3, r3, #10
 800826c:	b29a      	uxth	r2, r3
 800826e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	801a      	strh	r2, [r3, #0]
 8008276:	e044      	b.n	8008302 <USB_EPStartXfer+0x29a>
 8008278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800827c:	095b      	lsrs	r3, r3, #5
 800827e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008286:	f003 031f 	and.w	r3, r3, #31
 800828a:	2b00      	cmp	r3, #0
 800828c:	d104      	bne.n	8008298 <USB_EPStartXfer+0x230>
 800828e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008292:	3b01      	subs	r3, #1
 8008294:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008298:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800829c:	b29b      	uxth	r3, r3
 800829e:	029b      	lsls	r3, r3, #10
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	801a      	strh	r2, [r3, #0]
 80082b4:	e025      	b.n	8008302 <USB_EPStartXfer+0x29a>
 80082b6:	463b      	mov	r3, r7
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	785b      	ldrb	r3, [r3, #1]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d120      	bne.n	8008302 <USB_EPStartXfer+0x29a>
 80082c0:	1d3b      	adds	r3, r7, #4
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	4619      	mov	r1, r3
 80082cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082d0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80082d4:	6812      	ldr	r2, [r2, #0]
 80082d6:	440a      	add	r2, r1
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	463b      	mov	r3, r7
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	011a      	lsls	r2, r3, #4
 80082e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4413      	add	r3, r2
 80082ea:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80082ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008302:	463b      	mov	r3, r7
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	895b      	ldrh	r3, [r3, #10]
 8008308:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800830c:	463b      	mov	r3, r7
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6959      	ldr	r1, [r3, #20]
 8008312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008316:	b29b      	uxth	r3, r3
 8008318:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800831c:	1d38      	adds	r0, r7, #4
 800831e:	6800      	ldr	r0, [r0, #0]
 8008320:	f001 fad7 	bl	80098d2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008324:	463b      	mov	r3, r7
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	695a      	ldr	r2, [r3, #20]
 800832a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800832e:	441a      	add	r2, r3
 8008330:	463b      	mov	r3, r7
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008336:	463b      	mov	r3, r7
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6a1a      	ldr	r2, [r3, #32]
 800833c:	463b      	mov	r3, r7
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	429a      	cmp	r2, r3
 8008344:	d909      	bls.n	800835a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8008346:	463b      	mov	r3, r7
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6a1a      	ldr	r2, [r3, #32]
 800834c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008350:	1ad2      	subs	r2, r2, r3
 8008352:	463b      	mov	r3, r7
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	621a      	str	r2, [r3, #32]
 8008358:	e008      	b.n	800836c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800835a:	463b      	mov	r3, r7
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6a1b      	ldr	r3, [r3, #32]
 8008360:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008364:	463b      	mov	r3, r7
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2200      	movs	r2, #0
 800836a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800836c:	463b      	mov	r3, r7
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	785b      	ldrb	r3, [r3, #1]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d17a      	bne.n	800846c <USB_EPStartXfer+0x404>
 8008376:	f107 0318 	add.w	r3, r7, #24
 800837a:	1d3a      	adds	r2, r7, #4
 800837c:	6812      	ldr	r2, [r2, #0]
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	1d3b      	adds	r3, r7, #4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008388:	b29b      	uxth	r3, r3
 800838a:	4619      	mov	r1, r3
 800838c:	f107 0318 	add.w	r3, r7, #24
 8008390:	f107 0218 	add.w	r2, r7, #24
 8008394:	6812      	ldr	r2, [r2, #0]
 8008396:	440a      	add	r2, r1
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	463b      	mov	r3, r7
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	011a      	lsls	r2, r3, #4
 80083a2:	f107 0318 	add.w	r3, r7, #24
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4413      	add	r3, r2
 80083aa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80083ae:	f107 0314 	add.w	r3, r7, #20
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d11a      	bne.n	80083f2 <USB_EPStartXfer+0x38a>
 80083bc:	f107 0314 	add.w	r3, r7, #20
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	f107 0314 	add.w	r3, r7, #20
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	801a      	strh	r2, [r3, #0]
 80083d4:	f107 0314 	add.w	r3, r7, #20
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	f107 0314 	add.w	r3, r7, #20
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	801a      	strh	r2, [r3, #0]
 80083f0:	e067      	b.n	80084c2 <USB_EPStartXfer+0x45a>
 80083f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083f6:	2b3e      	cmp	r3, #62	; 0x3e
 80083f8:	d819      	bhi.n	800842e <USB_EPStartXfer+0x3c6>
 80083fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083fe:	085b      	lsrs	r3, r3, #1
 8008400:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	d004      	beq.n	800841a <USB_EPStartXfer+0x3b2>
 8008410:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008414:	3301      	adds	r3, #1
 8008416:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800841a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800841e:	b29b      	uxth	r3, r3
 8008420:	029b      	lsls	r3, r3, #10
 8008422:	b29a      	uxth	r2, r3
 8008424:	f107 0314 	add.w	r3, r7, #20
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	801a      	strh	r2, [r3, #0]
 800842c:	e049      	b.n	80084c2 <USB_EPStartXfer+0x45a>
 800842e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008432:	095b      	lsrs	r3, r3, #5
 8008434:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800843c:	f003 031f 	and.w	r3, r3, #31
 8008440:	2b00      	cmp	r3, #0
 8008442:	d104      	bne.n	800844e <USB_EPStartXfer+0x3e6>
 8008444:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008448:	3b01      	subs	r3, #1
 800844a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800844e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008452:	b29b      	uxth	r3, r3
 8008454:	029b      	lsls	r3, r3, #10
 8008456:	b29b      	uxth	r3, r3
 8008458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800845c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008460:	b29a      	uxth	r2, r3
 8008462:	f107 0314 	add.w	r3, r7, #20
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	801a      	strh	r2, [r3, #0]
 800846a:	e02a      	b.n	80084c2 <USB_EPStartXfer+0x45a>
 800846c:	463b      	mov	r3, r7
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	785b      	ldrb	r3, [r3, #1]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d125      	bne.n	80084c2 <USB_EPStartXfer+0x45a>
 8008476:	f107 0320 	add.w	r3, r7, #32
 800847a:	1d3a      	adds	r2, r7, #4
 800847c:	6812      	ldr	r2, [r2, #0]
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	1d3b      	adds	r3, r7, #4
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008488:	b29b      	uxth	r3, r3
 800848a:	4619      	mov	r1, r3
 800848c:	f107 0320 	add.w	r3, r7, #32
 8008490:	f107 0220 	add.w	r2, r7, #32
 8008494:	6812      	ldr	r2, [r2, #0]
 8008496:	440a      	add	r2, r1
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	463b      	mov	r3, r7
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	011a      	lsls	r2, r3, #4
 80084a2:	f107 0320 	add.w	r3, r7, #32
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4413      	add	r3, r2
 80084aa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80084ae:	f107 031c 	add.w	r3, r7, #28
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	f107 031c 	add.w	r3, r7, #28
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80084c2:	463b      	mov	r3, r7
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	891b      	ldrh	r3, [r3, #8]
 80084c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084cc:	463b      	mov	r3, r7
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6959      	ldr	r1, [r3, #20]
 80084d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80084dc:	1d38      	adds	r0, r7, #4
 80084de:	6800      	ldr	r0, [r0, #0]
 80084e0:	f001 f9f7 	bl	80098d2 <USB_WritePMA>
 80084e4:	f000 bcc6 	b.w	8008e74 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80084e8:	463b      	mov	r3, r7
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	785b      	ldrb	r3, [r3, #1]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d164      	bne.n	80085bc <USB_EPStartXfer+0x554>
 80084f2:	1d3b      	adds	r3, r7, #4
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80084f8:	1d3b      	adds	r3, r7, #4
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008500:	b29b      	uxth	r3, r3
 8008502:	461a      	mov	r2, r3
 8008504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008506:	4413      	add	r3, r2
 8008508:	64bb      	str	r3, [r7, #72]	; 0x48
 800850a:	463b      	mov	r3, r7
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	011a      	lsls	r2, r3, #4
 8008512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008514:	4413      	add	r3, r2
 8008516:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800851a:	647b      	str	r3, [r7, #68]	; 0x44
 800851c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d112      	bne.n	800854a <USB_EPStartXfer+0x4e2>
 8008524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800852e:	b29a      	uxth	r2, r3
 8008530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008532:	801a      	strh	r2, [r3, #0]
 8008534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008536:	881b      	ldrh	r3, [r3, #0]
 8008538:	b29b      	uxth	r3, r3
 800853a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800853e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008542:	b29a      	uxth	r2, r3
 8008544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008546:	801a      	strh	r2, [r3, #0]
 8008548:	e057      	b.n	80085fa <USB_EPStartXfer+0x592>
 800854a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800854e:	2b3e      	cmp	r3, #62	; 0x3e
 8008550:	d817      	bhi.n	8008582 <USB_EPStartXfer+0x51a>
 8008552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008556:	085b      	lsrs	r3, r3, #1
 8008558:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800855c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	2b00      	cmp	r3, #0
 8008566:	d004      	beq.n	8008572 <USB_EPStartXfer+0x50a>
 8008568:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800856c:	3301      	adds	r3, #1
 800856e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008572:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008576:	b29b      	uxth	r3, r3
 8008578:	029b      	lsls	r3, r3, #10
 800857a:	b29a      	uxth	r2, r3
 800857c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800857e:	801a      	strh	r2, [r3, #0]
 8008580:	e03b      	b.n	80085fa <USB_EPStartXfer+0x592>
 8008582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008586:	095b      	lsrs	r3, r3, #5
 8008588:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800858c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008590:	f003 031f 	and.w	r3, r3, #31
 8008594:	2b00      	cmp	r3, #0
 8008596:	d104      	bne.n	80085a2 <USB_EPStartXfer+0x53a>
 8008598:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800859c:	3b01      	subs	r3, #1
 800859e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80085a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	029b      	lsls	r3, r3, #10
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085b8:	801a      	strh	r2, [r3, #0]
 80085ba:	e01e      	b.n	80085fa <USB_EPStartXfer+0x592>
 80085bc:	463b      	mov	r3, r7
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	785b      	ldrb	r3, [r3, #1]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d119      	bne.n	80085fa <USB_EPStartXfer+0x592>
 80085c6:	1d3b      	adds	r3, r7, #4
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	653b      	str	r3, [r7, #80]	; 0x50
 80085cc:	1d3b      	adds	r3, r7, #4
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	461a      	mov	r2, r3
 80085d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085da:	4413      	add	r3, r2
 80085dc:	653b      	str	r3, [r7, #80]	; 0x50
 80085de:	463b      	mov	r3, r7
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	011a      	lsls	r2, r3, #4
 80085e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085e8:	4413      	add	r3, r2
 80085ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80085fa:	463b      	mov	r3, r7
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	891b      	ldrh	r3, [r3, #8]
 8008600:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008604:	463b      	mov	r3, r7
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6959      	ldr	r1, [r3, #20]
 800860a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800860e:	b29b      	uxth	r3, r3
 8008610:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008614:	1d38      	adds	r0, r7, #4
 8008616:	6800      	ldr	r0, [r0, #0]
 8008618:	f001 f95b 	bl	80098d2 <USB_WritePMA>
            ep->xfer_buff += len;
 800861c:	463b      	mov	r3, r7
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	695a      	ldr	r2, [r3, #20]
 8008622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008626:	441a      	add	r2, r3
 8008628:	463b      	mov	r3, r7
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800862e:	463b      	mov	r3, r7
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	6a1a      	ldr	r2, [r3, #32]
 8008634:	463b      	mov	r3, r7
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	429a      	cmp	r2, r3
 800863c:	d909      	bls.n	8008652 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800863e:	463b      	mov	r3, r7
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6a1a      	ldr	r2, [r3, #32]
 8008644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008648:	1ad2      	subs	r2, r2, r3
 800864a:	463b      	mov	r3, r7
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	621a      	str	r2, [r3, #32]
 8008650:	e008      	b.n	8008664 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8008652:	463b      	mov	r3, r7
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6a1b      	ldr	r3, [r3, #32]
 8008658:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800865c:	463b      	mov	r3, r7
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2200      	movs	r2, #0
 8008662:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008664:	1d3b      	adds	r3, r7, #4
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	643b      	str	r3, [r7, #64]	; 0x40
 800866a:	463b      	mov	r3, r7
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	785b      	ldrb	r3, [r3, #1]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d164      	bne.n	800873e <USB_EPStartXfer+0x6d6>
 8008674:	1d3b      	adds	r3, r7, #4
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	63bb      	str	r3, [r7, #56]	; 0x38
 800867a:	1d3b      	adds	r3, r7, #4
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008682:	b29b      	uxth	r3, r3
 8008684:	461a      	mov	r2, r3
 8008686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008688:	4413      	add	r3, r2
 800868a:	63bb      	str	r3, [r7, #56]	; 0x38
 800868c:	463b      	mov	r3, r7
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	011a      	lsls	r2, r3, #4
 8008694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008696:	4413      	add	r3, r2
 8008698:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800869c:	637b      	str	r3, [r7, #52]	; 0x34
 800869e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d112      	bne.n	80086cc <USB_EPStartXfer+0x664>
 80086a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b4:	801a      	strh	r2, [r3, #0]
 80086b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c8:	801a      	strh	r2, [r3, #0]
 80086ca:	e054      	b.n	8008776 <USB_EPStartXfer+0x70e>
 80086cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086d0:	2b3e      	cmp	r3, #62	; 0x3e
 80086d2:	d817      	bhi.n	8008704 <USB_EPStartXfer+0x69c>
 80086d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086d8:	085b      	lsrs	r3, r3, #1
 80086da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80086de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d004      	beq.n	80086f4 <USB_EPStartXfer+0x68c>
 80086ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80086ee:	3301      	adds	r3, #1
 80086f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80086f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	029b      	lsls	r3, r3, #10
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008700:	801a      	strh	r2, [r3, #0]
 8008702:	e038      	b.n	8008776 <USB_EPStartXfer+0x70e>
 8008704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008708:	095b      	lsrs	r3, r3, #5
 800870a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800870e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008712:	f003 031f 	and.w	r3, r3, #31
 8008716:	2b00      	cmp	r3, #0
 8008718:	d104      	bne.n	8008724 <USB_EPStartXfer+0x6bc>
 800871a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800871e:	3b01      	subs	r3, #1
 8008720:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008724:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008728:	b29b      	uxth	r3, r3
 800872a:	029b      	lsls	r3, r3, #10
 800872c:	b29b      	uxth	r3, r3
 800872e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008736:	b29a      	uxth	r2, r3
 8008738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873a:	801a      	strh	r2, [r3, #0]
 800873c:	e01b      	b.n	8008776 <USB_EPStartXfer+0x70e>
 800873e:	463b      	mov	r3, r7
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	785b      	ldrb	r3, [r3, #1]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d116      	bne.n	8008776 <USB_EPStartXfer+0x70e>
 8008748:	1d3b      	adds	r3, r7, #4
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008750:	b29b      	uxth	r3, r3
 8008752:	461a      	mov	r2, r3
 8008754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008756:	4413      	add	r3, r2
 8008758:	643b      	str	r3, [r7, #64]	; 0x40
 800875a:	463b      	mov	r3, r7
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	011a      	lsls	r2, r3, #4
 8008762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008764:	4413      	add	r3, r2
 8008766:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800876a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800876c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008770:	b29a      	uxth	r2, r3
 8008772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008774:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008776:	463b      	mov	r3, r7
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	895b      	ldrh	r3, [r3, #10]
 800877c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008780:	463b      	mov	r3, r7
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6959      	ldr	r1, [r3, #20]
 8008786:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800878a:	b29b      	uxth	r3, r3
 800878c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008790:	1d38      	adds	r0, r7, #4
 8008792:	6800      	ldr	r0, [r0, #0]
 8008794:	f001 f89d 	bl	80098d2 <USB_WritePMA>
 8008798:	e36c      	b.n	8008e74 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800879a:	463b      	mov	r3, r7
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6a1b      	ldr	r3, [r3, #32]
 80087a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80087a4:	1d3b      	adds	r3, r7, #4
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	463b      	mov	r3, r7
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80087ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087be:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80087c2:	1d3b      	adds	r3, r7, #4
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	463b      	mov	r3, r7
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	441a      	add	r2, r3
 80087d0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80087d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80087e8:	1d3b      	adds	r3, r7, #4
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087ee:	1d3b      	adds	r3, r7, #4
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	461a      	mov	r2, r3
 80087fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087fc:	4413      	add	r3, r2
 80087fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008800:	463b      	mov	r3, r7
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	011a      	lsls	r2, r3, #4
 8008808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800880a:	4413      	add	r3, r2
 800880c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008810:	65bb      	str	r3, [r7, #88]	; 0x58
 8008812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008816:	b29a      	uxth	r2, r3
 8008818:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800881a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800881c:	463b      	mov	r3, r7
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	891b      	ldrh	r3, [r3, #8]
 8008822:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008826:	463b      	mov	r3, r7
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	6959      	ldr	r1, [r3, #20]
 800882c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008830:	b29b      	uxth	r3, r3
 8008832:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008836:	1d38      	adds	r0, r7, #4
 8008838:	6800      	ldr	r0, [r0, #0]
 800883a:	f001 f84a 	bl	80098d2 <USB_WritePMA>
 800883e:	e319      	b.n	8008e74 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8008840:	1d3b      	adds	r3, r7, #4
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	463b      	mov	r3, r7
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	b29b      	uxth	r3, r3
 8008852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800885e:	1d3b      	adds	r3, r7, #4
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	463b      	mov	r3, r7
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	441a      	add	r2, r3
 800886c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008878:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800887c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008880:	b29b      	uxth	r3, r3
 8008882:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008884:	463b      	mov	r3, r7
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6a1a      	ldr	r2, [r3, #32]
 800888a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800888e:	1ad2      	subs	r2, r2, r3
 8008890:	463b      	mov	r3, r7
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008896:	1d3b      	adds	r3, r7, #4
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	463b      	mov	r3, r7
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f000 8162 	beq.w	8008b76 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088b2:	1d3b      	adds	r3, r7, #4
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088ba:	463b      	mov	r3, r7
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	785b      	ldrb	r3, [r3, #1]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d164      	bne.n	800898e <USB_EPStartXfer+0x926>
 80088c4:	1d3b      	adds	r3, r7, #4
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80088ca:	1d3b      	adds	r3, r7, #4
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	461a      	mov	r2, r3
 80088d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088d8:	4413      	add	r3, r2
 80088da:	67bb      	str	r3, [r7, #120]	; 0x78
 80088dc:	463b      	mov	r3, r7
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	011a      	lsls	r2, r3, #4
 80088e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088e6:	4413      	add	r3, r2
 80088e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088ec:	677b      	str	r3, [r7, #116]	; 0x74
 80088ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d112      	bne.n	800891c <USB_EPStartXfer+0x8b4>
 80088f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008900:	b29a      	uxth	r2, r3
 8008902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008904:	801a      	strh	r2, [r3, #0]
 8008906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	b29b      	uxth	r3, r3
 800890c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008914:	b29a      	uxth	r2, r3
 8008916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008918:	801a      	strh	r2, [r3, #0]
 800891a:	e057      	b.n	80089cc <USB_EPStartXfer+0x964>
 800891c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008920:	2b3e      	cmp	r3, #62	; 0x3e
 8008922:	d817      	bhi.n	8008954 <USB_EPStartXfer+0x8ec>
 8008924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008928:	085b      	lsrs	r3, r3, #1
 800892a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800892e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d004      	beq.n	8008944 <USB_EPStartXfer+0x8dc>
 800893a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800893e:	3301      	adds	r3, #1
 8008940:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008944:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008948:	b29b      	uxth	r3, r3
 800894a:	029b      	lsls	r3, r3, #10
 800894c:	b29a      	uxth	r2, r3
 800894e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008950:	801a      	strh	r2, [r3, #0]
 8008952:	e03b      	b.n	80089cc <USB_EPStartXfer+0x964>
 8008954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008958:	095b      	lsrs	r3, r3, #5
 800895a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800895e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008962:	f003 031f 	and.w	r3, r3, #31
 8008966:	2b00      	cmp	r3, #0
 8008968:	d104      	bne.n	8008974 <USB_EPStartXfer+0x90c>
 800896a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800896e:	3b01      	subs	r3, #1
 8008970:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008974:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008978:	b29b      	uxth	r3, r3
 800897a:	029b      	lsls	r3, r3, #10
 800897c:	b29b      	uxth	r3, r3
 800897e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008986:	b29a      	uxth	r2, r3
 8008988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800898a:	801a      	strh	r2, [r3, #0]
 800898c:	e01e      	b.n	80089cc <USB_EPStartXfer+0x964>
 800898e:	463b      	mov	r3, r7
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	785b      	ldrb	r3, [r3, #1]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d119      	bne.n	80089cc <USB_EPStartXfer+0x964>
 8008998:	1d3b      	adds	r3, r7, #4
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	461a      	mov	r2, r3
 80089a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089a8:	4413      	add	r3, r2
 80089aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089ae:	463b      	mov	r3, r7
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	011a      	lsls	r2, r3, #4
 80089b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089ba:	4413      	add	r3, r2
 80089bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80089cc:	463b      	mov	r3, r7
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	895b      	ldrh	r3, [r3, #10]
 80089d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089d6:	463b      	mov	r3, r7
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6959      	ldr	r1, [r3, #20]
 80089dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80089e6:	1d38      	adds	r0, r7, #4
 80089e8:	6800      	ldr	r0, [r0, #0]
 80089ea:	f000 ff72 	bl	80098d2 <USB_WritePMA>
          ep->xfer_buff += len;
 80089ee:	463b      	mov	r3, r7
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	695a      	ldr	r2, [r3, #20]
 80089f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089f8:	441a      	add	r2, r3
 80089fa:	463b      	mov	r3, r7
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008a00:	463b      	mov	r3, r7
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6a1a      	ldr	r2, [r3, #32]
 8008a06:	463b      	mov	r3, r7
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d909      	bls.n	8008a24 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8008a10:	463b      	mov	r3, r7
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6a1a      	ldr	r2, [r3, #32]
 8008a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a1a:	1ad2      	subs	r2, r2, r3
 8008a1c:	463b      	mov	r3, r7
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	621a      	str	r2, [r3, #32]
 8008a22:	e008      	b.n	8008a36 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8008a24:	463b      	mov	r3, r7
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008a2e:	463b      	mov	r3, r7
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2200      	movs	r2, #0
 8008a34:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 821a 	beq.w	8008e74 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a40:	463b      	mov	r3, r7
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	785b      	ldrb	r3, [r3, #1]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d164      	bne.n	8008b14 <USB_EPStartXfer+0xaac>
 8008a4a:	1d3b      	adds	r3, r7, #4
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a50:	1d3b      	adds	r3, r7, #4
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a5e:	4413      	add	r3, r2
 8008a60:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a62:	463b      	mov	r3, r7
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	011a      	lsls	r2, r3, #4
 8008a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a72:	667b      	str	r3, [r7, #100]	; 0x64
 8008a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d112      	bne.n	8008aa2 <USB_EPStartXfer+0xa3a>
 8008a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a8a:	801a      	strh	r2, [r3, #0]
 8008a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a8e:	881b      	ldrh	r3, [r3, #0]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a9e:	801a      	strh	r2, [r3, #0]
 8008aa0:	e057      	b.n	8008b52 <USB_EPStartXfer+0xaea>
 8008aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aa6:	2b3e      	cmp	r3, #62	; 0x3e
 8008aa8:	d817      	bhi.n	8008ada <USB_EPStartXfer+0xa72>
 8008aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aae:	085b      	lsrs	r3, r3, #1
 8008ab0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d004      	beq.n	8008aca <USB_EPStartXfer+0xa62>
 8008ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	029b      	lsls	r3, r3, #10
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ad6:	801a      	strh	r2, [r3, #0]
 8008ad8:	e03b      	b.n	8008b52 <USB_EPStartXfer+0xaea>
 8008ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ade:	095b      	lsrs	r3, r3, #5
 8008ae0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ae8:	f003 031f 	and.w	r3, r3, #31
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d104      	bne.n	8008afa <USB_EPStartXfer+0xa92>
 8008af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008af4:	3b01      	subs	r3, #1
 8008af6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	029b      	lsls	r3, r3, #10
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b10:	801a      	strh	r2, [r3, #0]
 8008b12:	e01e      	b.n	8008b52 <USB_EPStartXfer+0xaea>
 8008b14:	463b      	mov	r3, r7
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	785b      	ldrb	r3, [r3, #1]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d119      	bne.n	8008b52 <USB_EPStartXfer+0xaea>
 8008b1e:	1d3b      	adds	r3, r7, #4
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	673b      	str	r3, [r7, #112]	; 0x70
 8008b24:	1d3b      	adds	r3, r7, #4
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	461a      	mov	r2, r3
 8008b30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b32:	4413      	add	r3, r2
 8008b34:	673b      	str	r3, [r7, #112]	; 0x70
 8008b36:	463b      	mov	r3, r7
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	011a      	lsls	r2, r3, #4
 8008b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b40:	4413      	add	r3, r2
 8008b42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008b52:	463b      	mov	r3, r7
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	891b      	ldrh	r3, [r3, #8]
 8008b58:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b5c:	463b      	mov	r3, r7
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6959      	ldr	r1, [r3, #20]
 8008b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b6c:	1d38      	adds	r0, r7, #4
 8008b6e:	6800      	ldr	r0, [r0, #0]
 8008b70:	f000 feaf 	bl	80098d2 <USB_WritePMA>
 8008b74:	e17e      	b.n	8008e74 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b76:	463b      	mov	r3, r7
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	785b      	ldrb	r3, [r3, #1]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d16f      	bne.n	8008c60 <USB_EPStartXfer+0xbf8>
 8008b80:	1d3b      	adds	r3, r7, #4
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b88:	1d3b      	adds	r3, r7, #4
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	461a      	mov	r2, r3
 8008b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b98:	4413      	add	r3, r2
 8008b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b9e:	463b      	mov	r3, r7
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	011a      	lsls	r2, r3, #4
 8008ba6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008baa:	4413      	add	r3, r2
 8008bac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d116      	bne.n	8008bea <USB_EPStartXfer+0xb82>
 8008bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bce:	801a      	strh	r2, [r3, #0]
 8008bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008be6:	801a      	strh	r2, [r3, #0]
 8008be8:	e05f      	b.n	8008caa <USB_EPStartXfer+0xc42>
 8008bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bee:	2b3e      	cmp	r3, #62	; 0x3e
 8008bf0:	d818      	bhi.n	8008c24 <USB_EPStartXfer+0xbbc>
 8008bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bf6:	085b      	lsrs	r3, r3, #1
 8008bf8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d004      	beq.n	8008c12 <USB_EPStartXfer+0xbaa>
 8008c08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008c12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	029b      	lsls	r3, r3, #10
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c20:	801a      	strh	r2, [r3, #0]
 8008c22:	e042      	b.n	8008caa <USB_EPStartXfer+0xc42>
 8008c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c28:	095b      	lsrs	r3, r3, #5
 8008c2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c32:	f003 031f 	and.w	r3, r3, #31
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d104      	bne.n	8008c44 <USB_EPStartXfer+0xbdc>
 8008c3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008c44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	029b      	lsls	r3, r3, #10
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c5c:	801a      	strh	r2, [r3, #0]
 8008c5e:	e024      	b.n	8008caa <USB_EPStartXfer+0xc42>
 8008c60:	463b      	mov	r3, r7
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	785b      	ldrb	r3, [r3, #1]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d11f      	bne.n	8008caa <USB_EPStartXfer+0xc42>
 8008c6a:	1d3b      	adds	r3, r7, #4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008c72:	1d3b      	adds	r3, r7, #4
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c82:	4413      	add	r3, r2
 8008c84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008c88:	463b      	mov	r3, r7
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	011a      	lsls	r2, r3, #4
 8008c90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c94:	4413      	add	r3, r2
 8008c96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ca8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008caa:	463b      	mov	r3, r7
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	891b      	ldrh	r3, [r3, #8]
 8008cb0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cb4:	463b      	mov	r3, r7
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6959      	ldr	r1, [r3, #20]
 8008cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008cc4:	1d38      	adds	r0, r7, #4
 8008cc6:	6800      	ldr	r0, [r0, #0]
 8008cc8:	f000 fe03 	bl	80098d2 <USB_WritePMA>
          ep->xfer_buff += len;
 8008ccc:	463b      	mov	r3, r7
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	695a      	ldr	r2, [r3, #20]
 8008cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cd6:	441a      	add	r2, r3
 8008cd8:	463b      	mov	r3, r7
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008cde:	463b      	mov	r3, r7
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	6a1a      	ldr	r2, [r3, #32]
 8008ce4:	463b      	mov	r3, r7
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d909      	bls.n	8008d02 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8008cee:	463b      	mov	r3, r7
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6a1a      	ldr	r2, [r3, #32]
 8008cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cf8:	1ad2      	subs	r2, r2, r3
 8008cfa:	463b      	mov	r3, r7
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	621a      	str	r2, [r3, #32]
 8008d00:	e008      	b.n	8008d14 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8008d02:	463b      	mov	r3, r7
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008d0c:	463b      	mov	r3, r7
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2200      	movs	r2, #0
 8008d12:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 80ab 	beq.w	8008e74 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d1e:	1d3b      	adds	r3, r7, #4
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d26:	463b      	mov	r3, r7
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	785b      	ldrb	r3, [r3, #1]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d16f      	bne.n	8008e10 <USB_EPStartXfer+0xda8>
 8008d30:	1d3b      	adds	r3, r7, #4
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d38:	1d3b      	adds	r3, r7, #4
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	461a      	mov	r2, r3
 8008d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d48:	4413      	add	r3, r2
 8008d4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d4e:	463b      	mov	r3, r7
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	011a      	lsls	r2, r3, #4
 8008d56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d116      	bne.n	8008d9a <USB_EPStartXfer+0xd32>
 8008d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d7e:	801a      	strh	r2, [r3, #0]
 8008d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d96:	801a      	strh	r2, [r3, #0]
 8008d98:	e05b      	b.n	8008e52 <USB_EPStartXfer+0xdea>
 8008d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8008da0:	d818      	bhi.n	8008dd4 <USB_EPStartXfer+0xd6c>
 8008da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008da6:	085b      	lsrs	r3, r3, #1
 8008da8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d004      	beq.n	8008dc2 <USB_EPStartXfer+0xd5a>
 8008db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	029b      	lsls	r3, r3, #10
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008dd0:	801a      	strh	r2, [r3, #0]
 8008dd2:	e03e      	b.n	8008e52 <USB_EPStartXfer+0xdea>
 8008dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dd8:	095b      	lsrs	r3, r3, #5
 8008dda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008de2:	f003 031f 	and.w	r3, r3, #31
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d104      	bne.n	8008df4 <USB_EPStartXfer+0xd8c>
 8008dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dee:	3b01      	subs	r3, #1
 8008df0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	029b      	lsls	r3, r3, #10
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e0c:	801a      	strh	r2, [r3, #0]
 8008e0e:	e020      	b.n	8008e52 <USB_EPStartXfer+0xdea>
 8008e10:	463b      	mov	r3, r7
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	785b      	ldrb	r3, [r3, #1]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d11b      	bne.n	8008e52 <USB_EPStartXfer+0xdea>
 8008e1a:	1d3b      	adds	r3, r7, #4
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	461a      	mov	r2, r3
 8008e26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e30:	463b      	mov	r3, r7
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	011a      	lsls	r2, r3, #4
 8008e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e52:	463b      	mov	r3, r7
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	895b      	ldrh	r3, [r3, #10]
 8008e58:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e5c:	463b      	mov	r3, r7
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6959      	ldr	r1, [r3, #20]
 8008e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008e6c:	1d38      	adds	r0, r7, #4
 8008e6e:	6800      	ldr	r0, [r0, #0]
 8008e70:	f000 fd2f 	bl	80098d2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008e74:	1d3b      	adds	r3, r7, #4
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	463b      	mov	r3, r7
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	f107 020a 	add.w	r2, r7, #10
 8008e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e92:	8013      	strh	r3, [r2, #0]
 8008e94:	f107 030a 	add.w	r3, r7, #10
 8008e98:	f107 020a 	add.w	r2, r7, #10
 8008e9c:	8812      	ldrh	r2, [r2, #0]
 8008e9e:	f082 0210 	eor.w	r2, r2, #16
 8008ea2:	801a      	strh	r2, [r3, #0]
 8008ea4:	f107 030a 	add.w	r3, r7, #10
 8008ea8:	f107 020a 	add.w	r2, r7, #10
 8008eac:	8812      	ldrh	r2, [r2, #0]
 8008eae:	f082 0220 	eor.w	r2, r2, #32
 8008eb2:	801a      	strh	r2, [r3, #0]
 8008eb4:	1d3b      	adds	r3, r7, #4
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	463b      	mov	r3, r7
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	441a      	add	r2, r3
 8008ec2:	f107 030a 	add.w	r3, r7, #10
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	8013      	strh	r3, [r2, #0]
 8008edc:	e3b5      	b.n	800964a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008ede:	463b      	mov	r3, r7
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	7b1b      	ldrb	r3, [r3, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f040 8090 	bne.w	800900a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008eea:	463b      	mov	r3, r7
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	699a      	ldr	r2, [r3, #24]
 8008ef0:	463b      	mov	r3, r7
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d90e      	bls.n	8008f18 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8008efa:	463b      	mov	r3, r7
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008f04:	463b      	mov	r3, r7
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	699a      	ldr	r2, [r3, #24]
 8008f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f0e:	1ad2      	subs	r2, r2, r3
 8008f10:	463b      	mov	r3, r7
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	619a      	str	r2, [r3, #24]
 8008f16:	e008      	b.n	8008f2a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8008f18:	463b      	mov	r3, r7
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008f22:	463b      	mov	r3, r7
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2200      	movs	r2, #0
 8008f28:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008f2a:	1d3b      	adds	r3, r7, #4
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f32:	1d3b      	adds	r3, r7, #4
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008f42:	4413      	add	r3, r2
 8008f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f48:	463b      	mov	r3, r7
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	011a      	lsls	r2, r3, #4
 8008f50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008f54:	4413      	add	r3, r2
 8008f56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d116      	bne.n	8008f94 <USB_EPStartXfer+0xf2c>
 8008f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f78:	801a      	strh	r2, [r3, #0]
 8008f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f7e:	881b      	ldrh	r3, [r3, #0]
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f90:	801a      	strh	r2, [r3, #0]
 8008f92:	e32c      	b.n	80095ee <USB_EPStartXfer+0x1586>
 8008f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f98:	2b3e      	cmp	r3, #62	; 0x3e
 8008f9a:	d818      	bhi.n	8008fce <USB_EPStartXfer+0xf66>
 8008f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa0:	085b      	lsrs	r3, r3, #1
 8008fa2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008faa:	f003 0301 	and.w	r3, r3, #1
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d004      	beq.n	8008fbc <USB_EPStartXfer+0xf54>
 8008fb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008fbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	029b      	lsls	r3, r3, #10
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fca:	801a      	strh	r2, [r3, #0]
 8008fcc:	e30f      	b.n	80095ee <USB_EPStartXfer+0x1586>
 8008fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fd2:	095b      	lsrs	r3, r3, #5
 8008fd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fdc:	f003 031f 	and.w	r3, r3, #31
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d104      	bne.n	8008fee <USB_EPStartXfer+0xf86>
 8008fe4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008fee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	029b      	lsls	r3, r3, #10
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009000:	b29a      	uxth	r2, r3
 8009002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009006:	801a      	strh	r2, [r3, #0]
 8009008:	e2f1      	b.n	80095ee <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800900a:	463b      	mov	r3, r7
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	78db      	ldrb	r3, [r3, #3]
 8009010:	2b02      	cmp	r3, #2
 8009012:	f040 818f 	bne.w	8009334 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009016:	463b      	mov	r3, r7
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	785b      	ldrb	r3, [r3, #1]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d175      	bne.n	800910c <USB_EPStartXfer+0x10a4>
 8009020:	1d3b      	adds	r3, r7, #4
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009028:	1d3b      	adds	r3, r7, #4
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009030:	b29b      	uxth	r3, r3
 8009032:	461a      	mov	r2, r3
 8009034:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009038:	4413      	add	r3, r2
 800903a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800903e:	463b      	mov	r3, r7
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	011a      	lsls	r2, r3, #4
 8009046:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800904a:	4413      	add	r3, r2
 800904c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009050:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009054:	463b      	mov	r3, r7
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d116      	bne.n	800908c <USB_EPStartXfer+0x1024>
 800905e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	b29b      	uxth	r3, r3
 8009066:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800906a:	b29a      	uxth	r2, r3
 800906c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009070:	801a      	strh	r2, [r3, #0]
 8009072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	b29b      	uxth	r3, r3
 800907a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800907e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009082:	b29a      	uxth	r2, r3
 8009084:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009088:	801a      	strh	r2, [r3, #0]
 800908a:	e065      	b.n	8009158 <USB_EPStartXfer+0x10f0>
 800908c:	463b      	mov	r3, r7
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	2b3e      	cmp	r3, #62	; 0x3e
 8009094:	d81a      	bhi.n	80090cc <USB_EPStartXfer+0x1064>
 8009096:	463b      	mov	r3, r7
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	085b      	lsrs	r3, r3, #1
 800909e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80090a2:	463b      	mov	r3, r7
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d004      	beq.n	80090ba <USB_EPStartXfer+0x1052>
 80090b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b4:	3301      	adds	r3, #1
 80090b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80090ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090be:	b29b      	uxth	r3, r3
 80090c0:	029b      	lsls	r3, r3, #10
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80090c8:	801a      	strh	r2, [r3, #0]
 80090ca:	e045      	b.n	8009158 <USB_EPStartXfer+0x10f0>
 80090cc:	463b      	mov	r3, r7
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	095b      	lsrs	r3, r3, #5
 80090d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80090d8:	463b      	mov	r3, r7
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	f003 031f 	and.w	r3, r3, #31
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d104      	bne.n	80090f0 <USB_EPStartXfer+0x1088>
 80090e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ea:	3b01      	subs	r3, #1
 80090ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80090f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	029b      	lsls	r3, r3, #10
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009102:	b29a      	uxth	r2, r3
 8009104:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009108:	801a      	strh	r2, [r3, #0]
 800910a:	e025      	b.n	8009158 <USB_EPStartXfer+0x10f0>
 800910c:	463b      	mov	r3, r7
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	785b      	ldrb	r3, [r3, #1]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d120      	bne.n	8009158 <USB_EPStartXfer+0x10f0>
 8009116:	1d3b      	adds	r3, r7, #4
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800911e:	1d3b      	adds	r3, r7, #4
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009126:	b29b      	uxth	r3, r3
 8009128:	461a      	mov	r2, r3
 800912a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800912e:	4413      	add	r3, r2
 8009130:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009134:	463b      	mov	r3, r7
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	011a      	lsls	r2, r3, #4
 800913c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009140:	4413      	add	r3, r2
 8009142:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009146:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800914a:	463b      	mov	r3, r7
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	b29a      	uxth	r2, r3
 8009152:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009156:	801a      	strh	r2, [r3, #0]
 8009158:	1d3b      	adds	r3, r7, #4
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009160:	463b      	mov	r3, r7
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	785b      	ldrb	r3, [r3, #1]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d175      	bne.n	8009256 <USB_EPStartXfer+0x11ee>
 800916a:	1d3b      	adds	r3, r7, #4
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009172:	1d3b      	adds	r3, r7, #4
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800917a:	b29b      	uxth	r3, r3
 800917c:	461a      	mov	r2, r3
 800917e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009182:	4413      	add	r3, r2
 8009184:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009188:	463b      	mov	r3, r7
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	011a      	lsls	r2, r3, #4
 8009190:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009194:	4413      	add	r3, r2
 8009196:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800919a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800919e:	463b      	mov	r3, r7
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d116      	bne.n	80091d6 <USB_EPStartXfer+0x116e>
 80091a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091ac:	881b      	ldrh	r3, [r3, #0]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091ba:	801a      	strh	r2, [r3, #0]
 80091bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091c0:	881b      	ldrh	r3, [r3, #0]
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091d2:	801a      	strh	r2, [r3, #0]
 80091d4:	e061      	b.n	800929a <USB_EPStartXfer+0x1232>
 80091d6:	463b      	mov	r3, r7
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	2b3e      	cmp	r3, #62	; 0x3e
 80091de:	d81a      	bhi.n	8009216 <USB_EPStartXfer+0x11ae>
 80091e0:	463b      	mov	r3, r7
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	085b      	lsrs	r3, r3, #1
 80091e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80091ec:	463b      	mov	r3, r7
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d004      	beq.n	8009204 <USB_EPStartXfer+0x119c>
 80091fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80091fe:	3301      	adds	r3, #1
 8009200:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009204:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009208:	b29b      	uxth	r3, r3
 800920a:	029b      	lsls	r3, r3, #10
 800920c:	b29a      	uxth	r2, r3
 800920e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009212:	801a      	strh	r2, [r3, #0]
 8009214:	e041      	b.n	800929a <USB_EPStartXfer+0x1232>
 8009216:	463b      	mov	r3, r7
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	095b      	lsrs	r3, r3, #5
 800921e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009222:	463b      	mov	r3, r7
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	f003 031f 	and.w	r3, r3, #31
 800922c:	2b00      	cmp	r3, #0
 800922e:	d104      	bne.n	800923a <USB_EPStartXfer+0x11d2>
 8009230:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009234:	3b01      	subs	r3, #1
 8009236:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800923a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800923e:	b29b      	uxth	r3, r3
 8009240:	029b      	lsls	r3, r3, #10
 8009242:	b29b      	uxth	r3, r3
 8009244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800924c:	b29a      	uxth	r2, r3
 800924e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009252:	801a      	strh	r2, [r3, #0]
 8009254:	e021      	b.n	800929a <USB_EPStartXfer+0x1232>
 8009256:	463b      	mov	r3, r7
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	785b      	ldrb	r3, [r3, #1]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d11c      	bne.n	800929a <USB_EPStartXfer+0x1232>
 8009260:	1d3b      	adds	r3, r7, #4
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009268:	b29b      	uxth	r3, r3
 800926a:	461a      	mov	r2, r3
 800926c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009270:	4413      	add	r3, r2
 8009272:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009276:	463b      	mov	r3, r7
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	011a      	lsls	r2, r3, #4
 800927e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009282:	4413      	add	r3, r2
 8009284:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009288:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800928c:	463b      	mov	r3, r7
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	b29a      	uxth	r2, r3
 8009294:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009298:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800929a:	463b      	mov	r3, r7
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 81a4 	beq.w	80095ee <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80092a6:	1d3b      	adds	r3, r7, #4
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	463b      	mov	r3, r7
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	881b      	ldrh	r3, [r3, #0]
 80092b6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80092ba:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80092be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d005      	beq.n	80092d2 <USB_EPStartXfer+0x126a>
 80092c6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80092ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10d      	bne.n	80092ee <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80092d2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80092d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f040 8187 	bne.w	80095ee <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80092e0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80092e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f040 8180 	bne.w	80095ee <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80092ee:	1d3b      	adds	r3, r7, #4
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	463b      	mov	r3, r7
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4413      	add	r3, r2
 80092fc:	881b      	ldrh	r3, [r3, #0]
 80092fe:	b29b      	uxth	r3, r3
 8009300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009308:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800930c:	1d3b      	adds	r3, r7, #4
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	463b      	mov	r3, r7
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	441a      	add	r2, r3
 800931a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800931e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800932a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800932e:	b29b      	uxth	r3, r3
 8009330:	8013      	strh	r3, [r2, #0]
 8009332:	e15c      	b.n	80095ee <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009334:	463b      	mov	r3, r7
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	78db      	ldrb	r3, [r3, #3]
 800933a:	2b01      	cmp	r3, #1
 800933c:	f040 8155 	bne.w	80095ea <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009340:	463b      	mov	r3, r7
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	699a      	ldr	r2, [r3, #24]
 8009346:	463b      	mov	r3, r7
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	429a      	cmp	r2, r3
 800934e:	d90e      	bls.n	800936e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8009350:	463b      	mov	r3, r7
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800935a:	463b      	mov	r3, r7
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	699a      	ldr	r2, [r3, #24]
 8009360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009364:	1ad2      	subs	r2, r2, r3
 8009366:	463b      	mov	r3, r7
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	619a      	str	r2, [r3, #24]
 800936c:	e008      	b.n	8009380 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800936e:	463b      	mov	r3, r7
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8009378:	463b      	mov	r3, r7
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2200      	movs	r2, #0
 800937e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009380:	463b      	mov	r3, r7
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	785b      	ldrb	r3, [r3, #1]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d16f      	bne.n	800946a <USB_EPStartXfer+0x1402>
 800938a:	1d3b      	adds	r3, r7, #4
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009392:	1d3b      	adds	r3, r7, #4
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800939a:	b29b      	uxth	r3, r3
 800939c:	461a      	mov	r2, r3
 800939e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80093a2:	4413      	add	r3, r2
 80093a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80093a8:	463b      	mov	r3, r7
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	011a      	lsls	r2, r3, #4
 80093b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80093b4:	4413      	add	r3, r2
 80093b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80093be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d116      	bne.n	80093f4 <USB_EPStartXfer+0x138c>
 80093c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093d8:	801a      	strh	r2, [r3, #0]
 80093da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093f0:	801a      	strh	r2, [r3, #0]
 80093f2:	e05f      	b.n	80094b4 <USB_EPStartXfer+0x144c>
 80093f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093f8:	2b3e      	cmp	r3, #62	; 0x3e
 80093fa:	d818      	bhi.n	800942e <USB_EPStartXfer+0x13c6>
 80093fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009400:	085b      	lsrs	r3, r3, #1
 8009402:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800940a:	f003 0301 	and.w	r3, r3, #1
 800940e:	2b00      	cmp	r3, #0
 8009410:	d004      	beq.n	800941c <USB_EPStartXfer+0x13b4>
 8009412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009416:	3301      	adds	r3, #1
 8009418:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800941c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009420:	b29b      	uxth	r3, r3
 8009422:	029b      	lsls	r3, r3, #10
 8009424:	b29a      	uxth	r2, r3
 8009426:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800942a:	801a      	strh	r2, [r3, #0]
 800942c:	e042      	b.n	80094b4 <USB_EPStartXfer+0x144c>
 800942e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009432:	095b      	lsrs	r3, r3, #5
 8009434:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800943c:	f003 031f 	and.w	r3, r3, #31
 8009440:	2b00      	cmp	r3, #0
 8009442:	d104      	bne.n	800944e <USB_EPStartXfer+0x13e6>
 8009444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009448:	3b01      	subs	r3, #1
 800944a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800944e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009452:	b29b      	uxth	r3, r3
 8009454:	029b      	lsls	r3, r3, #10
 8009456:	b29b      	uxth	r3, r3
 8009458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800945c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009460:	b29a      	uxth	r2, r3
 8009462:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009466:	801a      	strh	r2, [r3, #0]
 8009468:	e024      	b.n	80094b4 <USB_EPStartXfer+0x144c>
 800946a:	463b      	mov	r3, r7
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	785b      	ldrb	r3, [r3, #1]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d11f      	bne.n	80094b4 <USB_EPStartXfer+0x144c>
 8009474:	1d3b      	adds	r3, r7, #4
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800947c:	1d3b      	adds	r3, r7, #4
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009484:	b29b      	uxth	r3, r3
 8009486:	461a      	mov	r2, r3
 8009488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800948c:	4413      	add	r3, r2
 800948e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009492:	463b      	mov	r3, r7
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	011a      	lsls	r2, r3, #4
 800949a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800949e:	4413      	add	r3, r2
 80094a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80094a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80094b2:	801a      	strh	r2, [r3, #0]
 80094b4:	1d3b      	adds	r3, r7, #4
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80094bc:	463b      	mov	r3, r7
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	785b      	ldrb	r3, [r3, #1]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d16f      	bne.n	80095a6 <USB_EPStartXfer+0x153e>
 80094c6:	1d3b      	adds	r3, r7, #4
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80094ce:	1d3b      	adds	r3, r7, #4
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	461a      	mov	r2, r3
 80094da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094de:	4413      	add	r3, r2
 80094e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80094e4:	463b      	mov	r3, r7
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	011a      	lsls	r2, r3, #4
 80094ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094f0:	4413      	add	r3, r2
 80094f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80094fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d116      	bne.n	8009530 <USB_EPStartXfer+0x14c8>
 8009502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	b29b      	uxth	r3, r3
 800950a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800950e:	b29a      	uxth	r2, r3
 8009510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009514:	801a      	strh	r2, [r3, #0]
 8009516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	b29b      	uxth	r3, r3
 800951e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009526:	b29a      	uxth	r2, r3
 8009528:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800952c:	801a      	strh	r2, [r3, #0]
 800952e:	e05e      	b.n	80095ee <USB_EPStartXfer+0x1586>
 8009530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009534:	2b3e      	cmp	r3, #62	; 0x3e
 8009536:	d818      	bhi.n	800956a <USB_EPStartXfer+0x1502>
 8009538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800953c:	085b      	lsrs	r3, r3, #1
 800953e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b00      	cmp	r3, #0
 800954c:	d004      	beq.n	8009558 <USB_EPStartXfer+0x14f0>
 800954e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009552:	3301      	adds	r3, #1
 8009554:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009558:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800955c:	b29b      	uxth	r3, r3
 800955e:	029b      	lsls	r3, r3, #10
 8009560:	b29a      	uxth	r2, r3
 8009562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009566:	801a      	strh	r2, [r3, #0]
 8009568:	e041      	b.n	80095ee <USB_EPStartXfer+0x1586>
 800956a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800956e:	095b      	lsrs	r3, r3, #5
 8009570:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009578:	f003 031f 	and.w	r3, r3, #31
 800957c:	2b00      	cmp	r3, #0
 800957e:	d104      	bne.n	800958a <USB_EPStartXfer+0x1522>
 8009580:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009584:	3b01      	subs	r3, #1
 8009586:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800958a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800958e:	b29b      	uxth	r3, r3
 8009590:	029b      	lsls	r3, r3, #10
 8009592:	b29b      	uxth	r3, r3
 8009594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800959c:	b29a      	uxth	r2, r3
 800959e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095a2:	801a      	strh	r2, [r3, #0]
 80095a4:	e023      	b.n	80095ee <USB_EPStartXfer+0x1586>
 80095a6:	463b      	mov	r3, r7
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	785b      	ldrb	r3, [r3, #1]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d11e      	bne.n	80095ee <USB_EPStartXfer+0x1586>
 80095b0:	1d3b      	adds	r3, r7, #4
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	461a      	mov	r2, r3
 80095bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095c0:	4413      	add	r3, r2
 80095c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80095c6:	463b      	mov	r3, r7
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	011a      	lsls	r2, r3, #4
 80095ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095d2:	4413      	add	r3, r2
 80095d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80095d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80095dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095e6:	801a      	strh	r2, [r3, #0]
 80095e8:	e001      	b.n	80095ee <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e02e      	b.n	800964c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80095ee:	1d3b      	adds	r3, r7, #4
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	463b      	mov	r3, r7
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	881b      	ldrh	r3, [r3, #0]
 80095fe:	b29b      	uxth	r3, r3
 8009600:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009608:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800960c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009610:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009614:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009618:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800961c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009620:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009624:	1d3b      	adds	r3, r7, #4
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	463b      	mov	r3, r7
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	441a      	add	r2, r3
 8009632:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800963a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800963e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009646:	b29b      	uxth	r3, r3
 8009648:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009656:	b480      	push	{r7}
 8009658:	b085      	sub	sp, #20
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	785b      	ldrb	r3, [r3, #1]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d020      	beq.n	80096aa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	b29b      	uxth	r3, r3
 8009676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800967a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800967e:	81bb      	strh	r3, [r7, #12]
 8009680:	89bb      	ldrh	r3, [r7, #12]
 8009682:	f083 0310 	eor.w	r3, r3, #16
 8009686:	81bb      	strh	r3, [r7, #12]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	441a      	add	r2, r3
 8009692:	89bb      	ldrh	r3, [r7, #12]
 8009694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800969c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	8013      	strh	r3, [r2, #0]
 80096a8:	e01f      	b.n	80096ea <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096c0:	81fb      	strh	r3, [r7, #14]
 80096c2:	89fb      	ldrh	r3, [r7, #14]
 80096c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80096c8:	81fb      	strh	r3, [r7, #14]
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	441a      	add	r2, r3
 80096d4:	89fb      	ldrh	r3, [r7, #14]
 80096d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3714      	adds	r7, #20
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bc80      	pop	{r7}
 80096f4:	4770      	bx	lr

080096f6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80096f6:	b480      	push	{r7}
 80096f8:	b087      	sub	sp, #28
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	7b1b      	ldrb	r3, [r3, #12]
 8009704:	2b00      	cmp	r3, #0
 8009706:	f040 809d 	bne.w	8009844 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	785b      	ldrb	r3, [r3, #1]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d04c      	beq.n	80097ac <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	881b      	ldrh	r3, [r3, #0]
 800971e:	823b      	strh	r3, [r7, #16]
 8009720:	8a3b      	ldrh	r3, [r7, #16]
 8009722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009726:	2b00      	cmp	r3, #0
 8009728:	d01b      	beq.n	8009762 <USB_EPClearStall+0x6c>
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	b29b      	uxth	r3, r3
 8009738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800973c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009740:	81fb      	strh	r3, [r7, #14]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	441a      	add	r2, r3
 800974c:	89fb      	ldrh	r3, [r7, #14]
 800974e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800975a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800975e:	b29b      	uxth	r3, r3
 8009760:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	78db      	ldrb	r3, [r3, #3]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d06c      	beq.n	8009844 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	881b      	ldrh	r3, [r3, #0]
 8009776:	b29b      	uxth	r3, r3
 8009778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800977c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009780:	81bb      	strh	r3, [r7, #12]
 8009782:	89bb      	ldrh	r3, [r7, #12]
 8009784:	f083 0320 	eor.w	r3, r3, #32
 8009788:	81bb      	strh	r3, [r7, #12]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	441a      	add	r2, r3
 8009794:	89bb      	ldrh	r3, [r7, #12]
 8009796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800979a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800979e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	8013      	strh	r3, [r2, #0]
 80097aa:	e04b      	b.n	8009844 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	82fb      	strh	r3, [r7, #22]
 80097ba:	8afb      	ldrh	r3, [r7, #22]
 80097bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d01b      	beq.n	80097fc <USB_EPClearStall+0x106>
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097da:	82bb      	strh	r3, [r7, #20]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	441a      	add	r2, r3
 80097e6:	8abb      	ldrh	r3, [r7, #20]
 80097e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80097f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	881b      	ldrh	r3, [r3, #0]
 8009808:	b29b      	uxth	r3, r3
 800980a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800980e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009812:	827b      	strh	r3, [r7, #18]
 8009814:	8a7b      	ldrh	r3, [r7, #18]
 8009816:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800981a:	827b      	strh	r3, [r7, #18]
 800981c:	8a7b      	ldrh	r3, [r7, #18]
 800981e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009822:	827b      	strh	r3, [r7, #18]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	441a      	add	r2, r3
 800982e:	8a7b      	ldrh	r3, [r7, #18]
 8009830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800983c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009840:	b29b      	uxth	r3, r3
 8009842:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	371c      	adds	r7, #28
 800984a:	46bd      	mov	sp, r7
 800984c:	bc80      	pop	{r7}
 800984e:	4770      	bx	lr

08009850 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800985c:	78fb      	ldrb	r3, [r7, #3]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d103      	bne.n	800986a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2280      	movs	r2, #128	; 0x80
 8009866:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	bc80      	pop	{r7}
 8009874:	4770      	bx	lr

08009876 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	bc80      	pop	{r7}
 8009888:	4770      	bx	lr

0800988a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800988a:	b480      	push	{r7}
 800988c:	b083      	sub	sp, #12
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	bc80      	pop	{r7}
 800989c:	4770      	bx	lr

0800989e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800989e:	b480      	push	{r7}
 80098a0:	b085      	sub	sp, #20
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80098b0:	68fb      	ldr	r3, [r7, #12]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bc80      	pop	{r7}
 80098ba:	4770      	bx	lr

080098bc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bc80      	pop	{r7}
 80098d0:	4770      	bx	lr

080098d2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b08d      	sub	sp, #52	; 0x34
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	60b9      	str	r1, [r7, #8]
 80098dc:	4611      	mov	r1, r2
 80098de:	461a      	mov	r2, r3
 80098e0:	460b      	mov	r3, r1
 80098e2:	80fb      	strh	r3, [r7, #6]
 80098e4:	4613      	mov	r3, r2
 80098e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80098e8:	88bb      	ldrh	r3, [r7, #4]
 80098ea:	3301      	adds	r3, #1
 80098ec:	085b      	lsrs	r3, r3, #1
 80098ee:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80098f8:	88fb      	ldrh	r3, [r7, #6]
 80098fa:	005a      	lsls	r2, r3, #1
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	4413      	add	r3, r2
 8009900:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009904:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800990a:	e01e      	b.n	800994a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	3301      	adds	r3, #1
 8009916:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	b29b      	uxth	r3, r3
 800991e:	021b      	lsls	r3, r3, #8
 8009920:	b29b      	uxth	r3, r3
 8009922:	461a      	mov	r2, r3
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	4313      	orrs	r3, r2
 8009928:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	b29a      	uxth	r2, r3
 800992e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009930:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009934:	3302      	adds	r3, #2
 8009936:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	3302      	adds	r3, #2
 800993c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800993e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009940:	3301      	adds	r3, #1
 8009942:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009946:	3b01      	subs	r3, #1
 8009948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800994a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1dd      	bne.n	800990c <USB_WritePMA+0x3a>
  }
}
 8009950:	bf00      	nop
 8009952:	bf00      	nop
 8009954:	3734      	adds	r7, #52	; 0x34
 8009956:	46bd      	mov	sp, r7
 8009958:	bc80      	pop	{r7}
 800995a:	4770      	bx	lr

0800995c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800995c:	b480      	push	{r7}
 800995e:	b08b      	sub	sp, #44	; 0x2c
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	4611      	mov	r1, r2
 8009968:	461a      	mov	r2, r3
 800996a:	460b      	mov	r3, r1
 800996c:	80fb      	strh	r3, [r7, #6]
 800996e:	4613      	mov	r3, r2
 8009970:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009972:	88bb      	ldrh	r3, [r7, #4]
 8009974:	085b      	lsrs	r3, r3, #1
 8009976:	b29b      	uxth	r3, r3
 8009978:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009982:	88fb      	ldrh	r3, [r7, #6]
 8009984:	005a      	lsls	r2, r3, #1
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	4413      	add	r3, r2
 800998a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800998e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	627b      	str	r3, [r7, #36]	; 0x24
 8009994:	e01b      	b.n	80099ce <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	b29b      	uxth	r3, r3
 800999c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	3302      	adds	r3, #2
 80099a2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	3301      	adds	r3, #1
 80099b0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	0a1b      	lsrs	r3, r3, #8
 80099b6:	b2da      	uxtb	r2, r3
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	3301      	adds	r3, #1
 80099c0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	3302      	adds	r3, #2
 80099c6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	3b01      	subs	r3, #1
 80099cc:	627b      	str	r3, [r7, #36]	; 0x24
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e0      	bne.n	8009996 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80099d4:	88bb      	ldrh	r3, [r7, #4]
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	b29b      	uxth	r3, r3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d007      	beq.n	80099f0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80099e0:	6a3b      	ldr	r3, [r7, #32]
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	701a      	strb	r2, [r3, #0]
  }
}
 80099f0:	bf00      	nop
 80099f2:	372c      	adds	r7, #44	; 0x2c
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bc80      	pop	{r7}
 80099f8:	4770      	bx	lr

080099fa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	460b      	mov	r3, r1
 8009a04:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009a06:	2300      	movs	r3, #0
 8009a08:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	7c1b      	ldrb	r3, [r3, #16]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d115      	bne.n	8009a3e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a16:	2202      	movs	r2, #2
 8009a18:	2181      	movs	r1, #129	; 0x81
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f005 f815 	bl	800ea4a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	2101      	movs	r1, #1
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f005 f80b 	bl	800ea4a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009a3c:	e012      	b.n	8009a64 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a3e:	2340      	movs	r3, #64	; 0x40
 8009a40:	2202      	movs	r2, #2
 8009a42:	2181      	movs	r1, #129	; 0x81
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f005 f800 	bl	800ea4a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a50:	2340      	movs	r3, #64	; 0x40
 8009a52:	2202      	movs	r2, #2
 8009a54:	2101      	movs	r1, #1
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f004 fff7 	bl	800ea4a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009a64:	2308      	movs	r3, #8
 8009a66:	2203      	movs	r2, #3
 8009a68:	2182      	movs	r1, #130	; 0x82
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f004 ffed 	bl	800ea4a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a76:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009a7a:	f005 f90d 	bl	800ec98 <USBD_static_malloc>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d102      	bne.n	8009a96 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009a90:	2301      	movs	r3, #1
 8009a92:	73fb      	strb	r3, [r7, #15]
 8009a94:	e026      	b.n	8009ae4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a9c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	7c1b      	ldrb	r3, [r3, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d109      	bne.n	8009ad4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009aca:	2101      	movs	r1, #1
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f005 f8ad 	bl	800ec2c <USBD_LL_PrepareReceive>
 8009ad2:	e007      	b.n	8009ae4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ada:	2340      	movs	r3, #64	; 0x40
 8009adc:	2101      	movs	r1, #1
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f005 f8a4 	bl	800ec2c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	460b      	mov	r3, r1
 8009af8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009afa:	2300      	movs	r3, #0
 8009afc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009afe:	2181      	movs	r1, #129	; 0x81
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f004 ffc8 	bl	800ea96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009b0c:	2101      	movs	r1, #1
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f004 ffc1 	bl	800ea96 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009b1c:	2182      	movs	r1, #130	; 0x82
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f004 ffb9 	bl	800ea96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00e      	beq.n	8009b52 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b44:	4618      	mov	r0, r3
 8009b46:	f005 f8b3 	bl	800ecb0 <USBD_static_free>
    pdev->pClassData = NULL;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b6c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d039      	beq.n	8009bfa <USBD_CDC_Setup+0x9e>
 8009b86:	2b20      	cmp	r3, #32
 8009b88:	d17f      	bne.n	8009c8a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	88db      	ldrh	r3, [r3, #6]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d029      	beq.n	8009be6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	b25b      	sxtb	r3, r3
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	da11      	bge.n	8009bc0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	683a      	ldr	r2, [r7, #0]
 8009ba6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009ba8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	88d2      	ldrh	r2, [r2, #6]
 8009bae:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009bb0:	6939      	ldr	r1, [r7, #16]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	88db      	ldrh	r3, [r3, #6]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f001 fa0a 	bl	800afd2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009bbe:	e06b      	b.n	8009c98 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	785a      	ldrb	r2, [r3, #1]
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	88db      	ldrh	r3, [r3, #6]
 8009bce:	b2da      	uxtb	r2, r3
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009bd6:	6939      	ldr	r1, [r7, #16]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	88db      	ldrh	r3, [r3, #6]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f001 fa25 	bl	800b02e <USBD_CtlPrepareRx>
      break;
 8009be4:	e058      	b.n	8009c98 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	7850      	ldrb	r0, [r2, #1]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	4798      	blx	r3
      break;
 8009bf8:	e04e      	b.n	8009c98 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	785b      	ldrb	r3, [r3, #1]
 8009bfe:	2b0b      	cmp	r3, #11
 8009c00:	d02e      	beq.n	8009c60 <USBD_CDC_Setup+0x104>
 8009c02:	2b0b      	cmp	r3, #11
 8009c04:	dc38      	bgt.n	8009c78 <USBD_CDC_Setup+0x11c>
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d002      	beq.n	8009c10 <USBD_CDC_Setup+0xb4>
 8009c0a:	2b0a      	cmp	r3, #10
 8009c0c:	d014      	beq.n	8009c38 <USBD_CDC_Setup+0xdc>
 8009c0e:	e033      	b.n	8009c78 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c16:	2b03      	cmp	r3, #3
 8009c18:	d107      	bne.n	8009c2a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009c1a:	f107 030c 	add.w	r3, r7, #12
 8009c1e:	2202      	movs	r2, #2
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f001 f9d5 	bl	800afd2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c28:	e02e      	b.n	8009c88 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 f966 	bl	800aefe <USBD_CtlError>
            ret = USBD_FAIL;
 8009c32:	2302      	movs	r3, #2
 8009c34:	75fb      	strb	r3, [r7, #23]
          break;
 8009c36:	e027      	b.n	8009c88 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c3e:	2b03      	cmp	r3, #3
 8009c40:	d107      	bne.n	8009c52 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c42:	f107 030f 	add.w	r3, r7, #15
 8009c46:	2201      	movs	r2, #1
 8009c48:	4619      	mov	r1, r3
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f001 f9c1 	bl	800afd2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c50:	e01a      	b.n	8009c88 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f001 f952 	bl	800aefe <USBD_CtlError>
            ret = USBD_FAIL;
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	75fb      	strb	r3, [r7, #23]
          break;
 8009c5e:	e013      	b.n	8009c88 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	d00d      	beq.n	8009c86 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f001 f946 	bl	800aefe <USBD_CtlError>
            ret = USBD_FAIL;
 8009c72:	2302      	movs	r3, #2
 8009c74:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009c76:	e006      	b.n	8009c86 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f001 f93f 	bl	800aefe <USBD_CtlError>
          ret = USBD_FAIL;
 8009c80:	2302      	movs	r3, #2
 8009c82:	75fb      	strb	r3, [r7, #23]
          break;
 8009c84:	e000      	b.n	8009c88 <USBD_CDC_Setup+0x12c>
          break;
 8009c86:	bf00      	nop
      }
      break;
 8009c88:	e006      	b.n	8009c98 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009c8a:	6839      	ldr	r1, [r7, #0]
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f001 f936 	bl	800aefe <USBD_CtlError>
      ret = USBD_FAIL;
 8009c92:	2302      	movs	r3, #2
 8009c94:	75fb      	strb	r3, [r7, #23]
      break;
 8009c96:	bf00      	nop
  }

  return ret;
 8009c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3718      	adds	r7, #24
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b084      	sub	sp, #16
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
 8009caa:	460b      	mov	r3, r1
 8009cac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cb4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cbc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d03a      	beq.n	8009d3e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009cc8:	78fa      	ldrb	r2, [r7, #3]
 8009cca:	6879      	ldr	r1, [r7, #4]
 8009ccc:	4613      	mov	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	440b      	add	r3, r1
 8009cd6:	331c      	adds	r3, #28
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d029      	beq.n	8009d32 <USBD_CDC_DataIn+0x90>
 8009cde:	78fa      	ldrb	r2, [r7, #3]
 8009ce0:	6879      	ldr	r1, [r7, #4]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	440b      	add	r3, r1
 8009cec:	331c      	adds	r3, #28
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	78f9      	ldrb	r1, [r7, #3]
 8009cf2:	68b8      	ldr	r0, [r7, #8]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	440b      	add	r3, r1
 8009cfa:	00db      	lsls	r3, r3, #3
 8009cfc:	4403      	add	r3, r0
 8009cfe:	3338      	adds	r3, #56	; 0x38
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d06:	fb03 f301 	mul.w	r3, r3, r1
 8009d0a:	1ad3      	subs	r3, r2, r3
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d110      	bne.n	8009d32 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009d10:	78fa      	ldrb	r2, [r7, #3]
 8009d12:	6879      	ldr	r1, [r7, #4]
 8009d14:	4613      	mov	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	440b      	add	r3, r1
 8009d1e:	331c      	adds	r3, #28
 8009d20:	2200      	movs	r2, #0
 8009d22:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d24:	78f9      	ldrb	r1, [r7, #3]
 8009d26:	2300      	movs	r3, #0
 8009d28:	2200      	movs	r2, #0
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f004 ff5b 	bl	800ebe6 <USBD_LL_Transmit>
 8009d30:	e003      	b.n	8009d3a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	e000      	b.n	8009d40 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009d3e:	2302      	movs	r3, #2
  }
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d5a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009d5c:	78fb      	ldrb	r3, [r7, #3]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f004 ff86 	bl	800ec72 <USBD_LL_GetRxDataSize>
 8009d66:	4602      	mov	r2, r0
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00d      	beq.n	8009d94 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	4798      	blx	r3

    return USBD_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	e000      	b.n	8009d96 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009d94:	2302      	movs	r3, #2
  }
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dac:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d015      	beq.n	8009de4 <USBD_CDC_EP0_RxReady+0x46>
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009dbe:	2bff      	cmp	r3, #255	; 0xff
 8009dc0:	d010      	beq.n	8009de4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009dd0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009dd8:	b292      	uxth	r2, r2
 8009dda:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	22ff      	movs	r2, #255	; 0xff
 8009de0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
	...

08009df0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2243      	movs	r2, #67	; 0x43
 8009dfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009dfe:	4b03      	ldr	r3, [pc, #12]	; (8009e0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bc80      	pop	{r7}
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	200000a4 	.word	0x200000a4

08009e10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2243      	movs	r2, #67	; 0x43
 8009e1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009e1e:	4b03      	ldr	r3, [pc, #12]	; (8009e2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bc80      	pop	{r7}
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	20000060 	.word	0x20000060

08009e30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2243      	movs	r2, #67	; 0x43
 8009e3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009e3e:	4b03      	ldr	r3, [pc, #12]	; (8009e4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bc80      	pop	{r7}
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	200000e8 	.word	0x200000e8

08009e50 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	220a      	movs	r2, #10
 8009e5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009e5e:	4b03      	ldr	r3, [pc, #12]	; (8009e6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bc80      	pop	{r7}
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	2000001c 	.word	0x2000001c

08009e70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d005      	beq.n	8009e90 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bc80      	pop	{r7}
 8009e9a:	4770      	bx	lr

08009e9c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b087      	sub	sp, #28
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009eba:	88fa      	ldrh	r2, [r7, #6]
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	371c      	adds	r7, #28
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bc80      	pop	{r7}
 8009ecc:	4770      	bx	lr

08009ece <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009ece:	b480      	push	{r7}
 8009ed0:	b085      	sub	sp, #20
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ede:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3714      	adds	r7, #20
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bc80      	pop	{r7}
 8009ef2:	4770      	bx	lr

08009ef4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d01c      	beq.n	8009f48 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d115      	bne.n	8009f44 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	2181      	movs	r1, #129	; 0x81
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f004 fe53 	bl	800ebe6 <USBD_LL_Transmit>

      return USBD_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	e002      	b.n	8009f4a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e000      	b.n	8009f4a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009f48:	2302      	movs	r3, #2
  }
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f60:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d017      	beq.n	8009f9c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	7c1b      	ldrb	r3, [r3, #16]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d109      	bne.n	8009f88 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f7e:	2101      	movs	r1, #1
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f004 fe53 	bl	800ec2c <USBD_LL_PrepareReceive>
 8009f86:	e007      	b.n	8009f98 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f8e:	2340      	movs	r3, #64	; 0x40
 8009f90:	2101      	movs	r1, #1
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f004 fe4a 	bl	800ec2c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	e000      	b.n	8009f9e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009f9c:	2302      	movs	r3, #2
  }
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b084      	sub	sp, #16
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	60f8      	str	r0, [r7, #12]
 8009fae:	60b9      	str	r1, [r7, #8]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009fba:	2302      	movs	r3, #2
 8009fbc:	e01a      	b.n	8009ff4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	79fa      	ldrb	r2, [r7, #7]
 8009fea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f004 fcb7 	bl	800e960 <USBD_LL_Init>

  return USBD_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a006:	2300      	movs	r3, #0
 800a008:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d006      	beq.n	800a01e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]
 800a01c:	e001      	b.n	800a022 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a01e:	2302      	movs	r3, #2
 800a020:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a022:	7bfb      	ldrb	r3, [r7, #15]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	bc80      	pop	{r7}
 800a02c:	4770      	bx	lr

0800a02e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b082      	sub	sp, #8
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f004 fcec 	bl	800ea14 <USBD_LL_Start>

  return USBD_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a046:	b480      	push	{r7}
 800a048:	b083      	sub	sp, #12
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	bc80      	pop	{r7}
 800a058:	4770      	bx	lr

0800a05a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b084      	sub	sp, #16
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	460b      	mov	r3, r1
 800a064:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a066:	2302      	movs	r3, #2
 800a068:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00c      	beq.n	800a08e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	78fa      	ldrb	r2, [r7, #3]
 800a07e:	4611      	mov	r1, r2
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	4798      	blx	r3
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d101      	bne.n	800a08e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a08a:	2300      	movs	r3, #0
 800a08c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	78fa      	ldrb	r2, [r7, #3]
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	4798      	blx	r3

  return USBD_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 fed8 	bl	800ae86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a0f2:	f003 031f 	and.w	r3, r3, #31
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d016      	beq.n	800a128 <USBD_LL_SetupStage+0x6a>
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d81c      	bhi.n	800a138 <USBD_LL_SetupStage+0x7a>
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d002      	beq.n	800a108 <USBD_LL_SetupStage+0x4a>
 800a102:	2b01      	cmp	r3, #1
 800a104:	d008      	beq.n	800a118 <USBD_LL_SetupStage+0x5a>
 800a106:	e017      	b.n	800a138 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f9cb 	bl	800a4ac <USBD_StdDevReq>
      break;
 800a116:	e01a      	b.n	800a14e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fa2d 	bl	800a580 <USBD_StdItfReq>
      break;
 800a126:	e012      	b.n	800a14e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 fa6d 	bl	800a610 <USBD_StdEPReq>
      break;
 800a136:	e00a      	b.n	800a14e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a13e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a142:	b2db      	uxtb	r3, r3
 800a144:	4619      	mov	r1, r3
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f004 fcc4 	bl	800ead4 <USBD_LL_StallEP>
      break;
 800a14c:	bf00      	nop
  }

  return USBD_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	460b      	mov	r3, r1
 800a162:	607a      	str	r2, [r7, #4]
 800a164:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a166:	7afb      	ldrb	r3, [r7, #11]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d14b      	bne.n	800a204 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a172:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d134      	bne.n	800a1e8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	68da      	ldr	r2, [r3, #12]
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	429a      	cmp	r2, r3
 800a188:	d919      	bls.n	800a1be <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	68da      	ldr	r2, [r3, #12]
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	1ad2      	subs	r2, r2, r3
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	68da      	ldr	r2, [r3, #12]
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d203      	bcs.n	800a1ac <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	e002      	b.n	800a1b2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	6879      	ldr	r1, [r7, #4]
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 ff57 	bl	800b06a <USBD_CtlContinueRx>
 800a1bc:	e038      	b.n	800a230 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00a      	beq.n	800a1e0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a1d0:	2b03      	cmp	r3, #3
 800a1d2:	d105      	bne.n	800a1e0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f000 ff54 	bl	800b08e <USBD_CtlSendStatus>
 800a1e6:	e023      	b.n	800a230 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1ee:	2b05      	cmp	r3, #5
 800a1f0:	d11e      	bne.n	800a230 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f004 fc69 	bl	800ead4 <USBD_LL_StallEP>
 800a202:	e015      	b.n	800a230 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a20a:	699b      	ldr	r3, [r3, #24]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00d      	beq.n	800a22c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a216:	2b03      	cmp	r3, #3
 800a218:	d108      	bne.n	800a22c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	7afa      	ldrb	r2, [r7, #11]
 800a224:	4611      	mov	r1, r2
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	4798      	blx	r3
 800a22a:	e001      	b.n	800a230 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a22c:	2302      	movs	r3, #2
 800a22e:	e000      	b.n	800a232 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3718      	adds	r7, #24
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b086      	sub	sp, #24
 800a23e:	af00      	add	r7, sp, #0
 800a240:	60f8      	str	r0, [r7, #12]
 800a242:	460b      	mov	r3, r1
 800a244:	607a      	str	r2, [r7, #4]
 800a246:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a248:	7afb      	ldrb	r3, [r7, #11]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d17f      	bne.n	800a34e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3314      	adds	r3, #20
 800a252:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d15c      	bne.n	800a318 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	68da      	ldr	r2, [r3, #12]
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	429a      	cmp	r2, r3
 800a268:	d915      	bls.n	800a296 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	68da      	ldr	r2, [r3, #12]
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	1ad2      	subs	r2, r2, r3
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	461a      	mov	r2, r3
 800a280:	6879      	ldr	r1, [r7, #4]
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f000 fec1 	bl	800b00a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a288:	2300      	movs	r3, #0
 800a28a:	2200      	movs	r2, #0
 800a28c:	2100      	movs	r1, #0
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f004 fccc 	bl	800ec2c <USBD_LL_PrepareReceive>
 800a294:	e04e      	b.n	800a334 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	6912      	ldr	r2, [r2, #16]
 800a29e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2a2:	fb02 f201 	mul.w	r2, r2, r1
 800a2a6:	1a9b      	subs	r3, r3, r2
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d11c      	bne.n	800a2e6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	689a      	ldr	r2, [r3, #8]
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d316      	bcc.n	800a2e6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	689a      	ldr	r2, [r3, #8]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d20f      	bcs.n	800a2e6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f000 fe9d 	bl	800b00a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2d8:	2300      	movs	r3, #0
 800a2da:	2200      	movs	r2, #0
 800a2dc:	2100      	movs	r1, #0
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f004 fca4 	bl	800ec2c <USBD_LL_PrepareReceive>
 800a2e4:	e026      	b.n	800a334 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00a      	beq.n	800a308 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d105      	bne.n	800a308 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a308:	2180      	movs	r1, #128	; 0x80
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f004 fbe2 	bl	800ead4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f000 fecf 	bl	800b0b4 <USBD_CtlReceiveStatus>
 800a316:	e00d      	b.n	800a334 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a31e:	2b04      	cmp	r3, #4
 800a320:	d004      	beq.n	800a32c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d103      	bne.n	800a334 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a32c:	2180      	movs	r1, #128	; 0x80
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f004 fbd0 	bl	800ead4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d11d      	bne.n	800a37a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f7ff fe81 	bl	800a046 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a34c:	e015      	b.n	800a37a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a354:	695b      	ldr	r3, [r3, #20]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00d      	beq.n	800a376 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a360:	2b03      	cmp	r3, #3
 800a362:	d108      	bne.n	800a376 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a36a:	695b      	ldr	r3, [r3, #20]
 800a36c:	7afa      	ldrb	r2, [r7, #11]
 800a36e:	4611      	mov	r1, r2
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	4798      	blx	r3
 800a374:	e001      	b.n	800a37a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a376:	2302      	movs	r3, #2
 800a378:	e000      	b.n	800a37c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3718      	adds	r7, #24
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a38c:	2340      	movs	r3, #64	; 0x40
 800a38e:	2200      	movs	r2, #0
 800a390:	2100      	movs	r1, #0
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f004 fb59 	bl	800ea4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2240      	movs	r2, #64	; 0x40
 800a3a4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3a8:	2340      	movs	r3, #64	; 0x40
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	2180      	movs	r1, #128	; 0x80
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f004 fb4b 	bl	800ea4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2240      	movs	r2, #64	; 0x40
 800a3be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d009      	beq.n	800a3fc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	6852      	ldr	r2, [r2, #4]
 800a3f4:	b2d2      	uxtb	r2, r2
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	4798      	blx	r3
  }

  return USBD_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a406:	b480      	push	{r7}
 800a408:	b083      	sub	sp, #12
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	460b      	mov	r3, r1
 800a410:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	78fa      	ldrb	r2, [r7, #3]
 800a416:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	bc80      	pop	{r7}
 800a422:	4770      	bx	lr

0800a424 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2204      	movs	r2, #4
 800a43c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	370c      	adds	r7, #12
 800a446:	46bd      	mov	sp, r7
 800a448:	bc80      	pop	{r7}
 800a44a:	4770      	bx	lr

0800a44c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a45a:	2b04      	cmp	r3, #4
 800a45c:	d105      	bne.n	800a46a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	bc80      	pop	{r7}
 800a474:	4770      	bx	lr

0800a476 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b082      	sub	sp, #8
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a484:	2b03      	cmp	r3, #3
 800a486:	d10b      	bne.n	800a4a0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a48e:	69db      	ldr	r3, [r3, #28]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d005      	beq.n	800a4a0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a49a:	69db      	ldr	r3, [r3, #28]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
	...

0800a4ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4c2:	2b40      	cmp	r3, #64	; 0x40
 800a4c4:	d005      	beq.n	800a4d2 <USBD_StdDevReq+0x26>
 800a4c6:	2b40      	cmp	r3, #64	; 0x40
 800a4c8:	d84f      	bhi.n	800a56a <USBD_StdDevReq+0xbe>
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d009      	beq.n	800a4e2 <USBD_StdDevReq+0x36>
 800a4ce:	2b20      	cmp	r3, #32
 800a4d0:	d14b      	bne.n	800a56a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	6839      	ldr	r1, [r7, #0]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	4798      	blx	r3
      break;
 800a4e0:	e048      	b.n	800a574 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	785b      	ldrb	r3, [r3, #1]
 800a4e6:	2b09      	cmp	r3, #9
 800a4e8:	d839      	bhi.n	800a55e <USBD_StdDevReq+0xb2>
 800a4ea:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <USBD_StdDevReq+0x44>)
 800a4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f0:	0800a541 	.word	0x0800a541
 800a4f4:	0800a555 	.word	0x0800a555
 800a4f8:	0800a55f 	.word	0x0800a55f
 800a4fc:	0800a54b 	.word	0x0800a54b
 800a500:	0800a55f 	.word	0x0800a55f
 800a504:	0800a523 	.word	0x0800a523
 800a508:	0800a519 	.word	0x0800a519
 800a50c:	0800a55f 	.word	0x0800a55f
 800a510:	0800a537 	.word	0x0800a537
 800a514:	0800a52d 	.word	0x0800a52d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a518:	6839      	ldr	r1, [r7, #0]
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f9dc 	bl	800a8d8 <USBD_GetDescriptor>
          break;
 800a520:	e022      	b.n	800a568 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a522:	6839      	ldr	r1, [r7, #0]
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fb3f 	bl	800aba8 <USBD_SetAddress>
          break;
 800a52a:	e01d      	b.n	800a568 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a52c:	6839      	ldr	r1, [r7, #0]
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fb7e 	bl	800ac30 <USBD_SetConfig>
          break;
 800a534:	e018      	b.n	800a568 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a536:	6839      	ldr	r1, [r7, #0]
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 fc07 	bl	800ad4c <USBD_GetConfig>
          break;
 800a53e:	e013      	b.n	800a568 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 fc37 	bl	800adb6 <USBD_GetStatus>
          break;
 800a548:	e00e      	b.n	800a568 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fc65 	bl	800ae1c <USBD_SetFeature>
          break;
 800a552:	e009      	b.n	800a568 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a554:	6839      	ldr	r1, [r7, #0]
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 fc74 	bl	800ae44 <USBD_ClrFeature>
          break;
 800a55c:	e004      	b.n	800a568 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a55e:	6839      	ldr	r1, [r7, #0]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 fccc 	bl	800aefe <USBD_CtlError>
          break;
 800a566:	bf00      	nop
      }
      break;
 800a568:	e004      	b.n	800a574 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fcc6 	bl	800aefe <USBD_CtlError>
      break;
 800a572:	bf00      	nop
  }

  return ret;
 800a574:	7bfb      	ldrb	r3, [r7, #15]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop

0800a580 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a58a:	2300      	movs	r3, #0
 800a58c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a596:	2b40      	cmp	r3, #64	; 0x40
 800a598:	d005      	beq.n	800a5a6 <USBD_StdItfReq+0x26>
 800a59a:	2b40      	cmp	r3, #64	; 0x40
 800a59c:	d82e      	bhi.n	800a5fc <USBD_StdItfReq+0x7c>
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d001      	beq.n	800a5a6 <USBD_StdItfReq+0x26>
 800a5a2:	2b20      	cmp	r3, #32
 800a5a4:	d12a      	bne.n	800a5fc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d81d      	bhi.n	800a5ee <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	889b      	ldrh	r3, [r3, #4]
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d813      	bhi.n	800a5e4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	6839      	ldr	r1, [r7, #0]
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	4798      	blx	r3
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	88db      	ldrh	r3, [r3, #6]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d110      	bne.n	800a5f8 <USBD_StdItfReq+0x78>
 800a5d6:	7bfb      	ldrb	r3, [r7, #15]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10d      	bne.n	800a5f8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 fd56 	bl	800b08e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a5e2:	e009      	b.n	800a5f8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a5e4:	6839      	ldr	r1, [r7, #0]
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fc89 	bl	800aefe <USBD_CtlError>
          break;
 800a5ec:	e004      	b.n	800a5f8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a5ee:	6839      	ldr	r1, [r7, #0]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 fc84 	bl	800aefe <USBD_CtlError>
          break;
 800a5f6:	e000      	b.n	800a5fa <USBD_StdItfReq+0x7a>
          break;
 800a5f8:	bf00      	nop
      }
      break;
 800a5fa:	e004      	b.n	800a606 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fc7d 	bl	800aefe <USBD_CtlError>
      break;
 800a604:	bf00      	nop
  }

  return USBD_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	889b      	ldrh	r3, [r3, #4]
 800a622:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a62c:	2b40      	cmp	r3, #64	; 0x40
 800a62e:	d007      	beq.n	800a640 <USBD_StdEPReq+0x30>
 800a630:	2b40      	cmp	r3, #64	; 0x40
 800a632:	f200 8146 	bhi.w	800a8c2 <USBD_StdEPReq+0x2b2>
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00a      	beq.n	800a650 <USBD_StdEPReq+0x40>
 800a63a:	2b20      	cmp	r3, #32
 800a63c:	f040 8141 	bne.w	800a8c2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	4798      	blx	r3
      break;
 800a64e:	e13d      	b.n	800a8cc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a658:	2b20      	cmp	r3, #32
 800a65a:	d10a      	bne.n	800a672 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	6839      	ldr	r1, [r7, #0]
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	4798      	blx	r3
 800a66a:	4603      	mov	r3, r0
 800a66c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
 800a670:	e12d      	b.n	800a8ce <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	785b      	ldrb	r3, [r3, #1]
 800a676:	2b03      	cmp	r3, #3
 800a678:	d007      	beq.n	800a68a <USBD_StdEPReq+0x7a>
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	f300 811b 	bgt.w	800a8b6 <USBD_StdEPReq+0x2a6>
 800a680:	2b00      	cmp	r3, #0
 800a682:	d072      	beq.n	800a76a <USBD_StdEPReq+0x15a>
 800a684:	2b01      	cmp	r3, #1
 800a686:	d03a      	beq.n	800a6fe <USBD_StdEPReq+0xee>
 800a688:	e115      	b.n	800a8b6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a690:	2b02      	cmp	r3, #2
 800a692:	d002      	beq.n	800a69a <USBD_StdEPReq+0x8a>
 800a694:	2b03      	cmp	r3, #3
 800a696:	d015      	beq.n	800a6c4 <USBD_StdEPReq+0xb4>
 800a698:	e02b      	b.n	800a6f2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a69a:	7bbb      	ldrb	r3, [r7, #14]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d00c      	beq.n	800a6ba <USBD_StdEPReq+0xaa>
 800a6a0:	7bbb      	ldrb	r3, [r7, #14]
 800a6a2:	2b80      	cmp	r3, #128	; 0x80
 800a6a4:	d009      	beq.n	800a6ba <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a6a6:	7bbb      	ldrb	r3, [r7, #14]
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f004 fa12 	bl	800ead4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a6b0:	2180      	movs	r1, #128	; 0x80
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f004 fa0e 	bl	800ead4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6b8:	e020      	b.n	800a6fc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fc1e 	bl	800aefe <USBD_CtlError>
              break;
 800a6c2:	e01b      	b.n	800a6fc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	885b      	ldrh	r3, [r3, #2]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10e      	bne.n	800a6ea <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a6cc:	7bbb      	ldrb	r3, [r7, #14]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00b      	beq.n	800a6ea <USBD_StdEPReq+0xda>
 800a6d2:	7bbb      	ldrb	r3, [r7, #14]
 800a6d4:	2b80      	cmp	r3, #128	; 0x80
 800a6d6:	d008      	beq.n	800a6ea <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	88db      	ldrh	r3, [r3, #6]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d104      	bne.n	800a6ea <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a6e0:	7bbb      	ldrb	r3, [r7, #14]
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f004 f9f5 	bl	800ead4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fccf 	bl	800b08e <USBD_CtlSendStatus>

              break;
 800a6f0:	e004      	b.n	800a6fc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a6f2:	6839      	ldr	r1, [r7, #0]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fc02 	bl	800aefe <USBD_CtlError>
              break;
 800a6fa:	bf00      	nop
          }
          break;
 800a6fc:	e0e0      	b.n	800a8c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a704:	2b02      	cmp	r3, #2
 800a706:	d002      	beq.n	800a70e <USBD_StdEPReq+0xfe>
 800a708:	2b03      	cmp	r3, #3
 800a70a:	d015      	beq.n	800a738 <USBD_StdEPReq+0x128>
 800a70c:	e026      	b.n	800a75c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a70e:	7bbb      	ldrb	r3, [r7, #14]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00c      	beq.n	800a72e <USBD_StdEPReq+0x11e>
 800a714:	7bbb      	ldrb	r3, [r7, #14]
 800a716:	2b80      	cmp	r3, #128	; 0x80
 800a718:	d009      	beq.n	800a72e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a71a:	7bbb      	ldrb	r3, [r7, #14]
 800a71c:	4619      	mov	r1, r3
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f004 f9d8 	bl	800ead4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a724:	2180      	movs	r1, #128	; 0x80
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f004 f9d4 	bl	800ead4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a72c:	e01c      	b.n	800a768 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fbe4 	bl	800aefe <USBD_CtlError>
              break;
 800a736:	e017      	b.n	800a768 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	885b      	ldrh	r3, [r3, #2]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d112      	bne.n	800a766 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a740:	7bbb      	ldrb	r3, [r7, #14]
 800a742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a746:	2b00      	cmp	r3, #0
 800a748:	d004      	beq.n	800a754 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	4619      	mov	r1, r3
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f004 f9df 	bl	800eb12 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fc9a 	bl	800b08e <USBD_CtlSendStatus>
              }
              break;
 800a75a:	e004      	b.n	800a766 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a75c:	6839      	ldr	r1, [r7, #0]
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 fbcd 	bl	800aefe <USBD_CtlError>
              break;
 800a764:	e000      	b.n	800a768 <USBD_StdEPReq+0x158>
              break;
 800a766:	bf00      	nop
          }
          break;
 800a768:	e0aa      	b.n	800a8c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a770:	2b02      	cmp	r3, #2
 800a772:	d002      	beq.n	800a77a <USBD_StdEPReq+0x16a>
 800a774:	2b03      	cmp	r3, #3
 800a776:	d032      	beq.n	800a7de <USBD_StdEPReq+0x1ce>
 800a778:	e097      	b.n	800a8aa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a77a:	7bbb      	ldrb	r3, [r7, #14]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d007      	beq.n	800a790 <USBD_StdEPReq+0x180>
 800a780:	7bbb      	ldrb	r3, [r7, #14]
 800a782:	2b80      	cmp	r3, #128	; 0x80
 800a784:	d004      	beq.n	800a790 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a786:	6839      	ldr	r1, [r7, #0]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 fbb8 	bl	800aefe <USBD_CtlError>
                break;
 800a78e:	e091      	b.n	800a8b4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a794:	2b00      	cmp	r3, #0
 800a796:	da0b      	bge.n	800a7b0 <USBD_StdEPReq+0x1a0>
 800a798:	7bbb      	ldrb	r3, [r7, #14]
 800a79a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a79e:	4613      	mov	r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	4413      	add	r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	3310      	adds	r3, #16
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	3304      	adds	r3, #4
 800a7ae:	e00b      	b.n	800a7c8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
 800a7b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	3304      	adds	r3, #4
 800a7c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	2202      	movs	r2, #2
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fbfb 	bl	800afd2 <USBD_CtlSendData>
              break;
 800a7dc:	e06a      	b.n	800a8b4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a7de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	da11      	bge.n	800a80a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a7e6:	7bbb      	ldrb	r3, [r7, #14]
 800a7e8:	f003 020f 	and.w	r2, r3, #15
 800a7ec:	6879      	ldr	r1, [r7, #4]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	440b      	add	r3, r1
 800a7f8:	3318      	adds	r3, #24
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d117      	bne.n	800a830 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 fb7b 	bl	800aefe <USBD_CtlError>
                  break;
 800a808:	e054      	b.n	800a8b4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a80a:	7bbb      	ldrb	r3, [r7, #14]
 800a80c:	f003 020f 	and.w	r2, r3, #15
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	4613      	mov	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	440b      	add	r3, r1
 800a81c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d104      	bne.n	800a830 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a826:	6839      	ldr	r1, [r7, #0]
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fb68 	bl	800aefe <USBD_CtlError>
                  break;
 800a82e:	e041      	b.n	800a8b4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a830:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a834:	2b00      	cmp	r3, #0
 800a836:	da0b      	bge.n	800a850 <USBD_StdEPReq+0x240>
 800a838:	7bbb      	ldrb	r3, [r7, #14]
 800a83a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a83e:	4613      	mov	r3, r2
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	4413      	add	r3, r2
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	3310      	adds	r3, #16
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	4413      	add	r3, r2
 800a84c:	3304      	adds	r3, #4
 800a84e:	e00b      	b.n	800a868 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a850:	7bbb      	ldrb	r3, [r7, #14]
 800a852:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a856:	4613      	mov	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	4413      	add	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	4413      	add	r3, r2
 800a866:	3304      	adds	r3, #4
 800a868:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a86a:	7bbb      	ldrb	r3, [r7, #14]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d002      	beq.n	800a876 <USBD_StdEPReq+0x266>
 800a870:	7bbb      	ldrb	r3, [r7, #14]
 800a872:	2b80      	cmp	r3, #128	; 0x80
 800a874:	d103      	bne.n	800a87e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	2200      	movs	r2, #0
 800a87a:	601a      	str	r2, [r3, #0]
 800a87c:	e00e      	b.n	800a89c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
 800a880:	4619      	mov	r1, r3
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f004 f964 	bl	800eb50 <USBD_LL_IsStallEP>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d003      	beq.n	800a896 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	2201      	movs	r2, #1
 800a892:	601a      	str	r2, [r3, #0]
 800a894:	e002      	b.n	800a89c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	2200      	movs	r2, #0
 800a89a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2202      	movs	r2, #2
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fb95 	bl	800afd2 <USBD_CtlSendData>
              break;
 800a8a8:	e004      	b.n	800a8b4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a8aa:	6839      	ldr	r1, [r7, #0]
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 fb26 	bl	800aefe <USBD_CtlError>
              break;
 800a8b2:	bf00      	nop
          }
          break;
 800a8b4:	e004      	b.n	800a8c0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a8b6:	6839      	ldr	r1, [r7, #0]
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fb20 	bl	800aefe <USBD_CtlError>
          break;
 800a8be:	bf00      	nop
      }
      break;
 800a8c0:	e004      	b.n	800a8cc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a8c2:	6839      	ldr	r1, [r7, #0]
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 fb1a 	bl	800aefe <USBD_CtlError>
      break;
 800a8ca:	bf00      	nop
  }

  return ret;
 800a8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
	...

0800a8d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	885b      	ldrh	r3, [r3, #2]
 800a8f2:	0a1b      	lsrs	r3, r3, #8
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	2b06      	cmp	r3, #6
 800a8fa:	f200 8128 	bhi.w	800ab4e <USBD_GetDescriptor+0x276>
 800a8fe:	a201      	add	r2, pc, #4	; (adr r2, 800a904 <USBD_GetDescriptor+0x2c>)
 800a900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a904:	0800a921 	.word	0x0800a921
 800a908:	0800a939 	.word	0x0800a939
 800a90c:	0800a979 	.word	0x0800a979
 800a910:	0800ab4f 	.word	0x0800ab4f
 800a914:	0800ab4f 	.word	0x0800ab4f
 800a918:	0800aaef 	.word	0x0800aaef
 800a91c:	0800ab1b 	.word	0x0800ab1b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	7c12      	ldrb	r2, [r2, #16]
 800a92c:	f107 0108 	add.w	r1, r7, #8
 800a930:	4610      	mov	r0, r2
 800a932:	4798      	blx	r3
 800a934:	60f8      	str	r0, [r7, #12]
      break;
 800a936:	e112      	b.n	800ab5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	7c1b      	ldrb	r3, [r3, #16]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10d      	bne.n	800a95c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a948:	f107 0208 	add.w	r2, r7, #8
 800a94c:	4610      	mov	r0, r2
 800a94e:	4798      	blx	r3
 800a950:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3301      	adds	r3, #1
 800a956:	2202      	movs	r2, #2
 800a958:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a95a:	e100      	b.n	800ab5e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a964:	f107 0208 	add.w	r2, r7, #8
 800a968:	4610      	mov	r0, r2
 800a96a:	4798      	blx	r3
 800a96c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3301      	adds	r3, #1
 800a972:	2202      	movs	r2, #2
 800a974:	701a      	strb	r2, [r3, #0]
      break;
 800a976:	e0f2      	b.n	800ab5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	885b      	ldrh	r3, [r3, #2]
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	2b05      	cmp	r3, #5
 800a980:	f200 80ac 	bhi.w	800aadc <USBD_GetDescriptor+0x204>
 800a984:	a201      	add	r2, pc, #4	; (adr r2, 800a98c <USBD_GetDescriptor+0xb4>)
 800a986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98a:	bf00      	nop
 800a98c:	0800a9a5 	.word	0x0800a9a5
 800a990:	0800a9d9 	.word	0x0800a9d9
 800a994:	0800aa0d 	.word	0x0800aa0d
 800a998:	0800aa41 	.word	0x0800aa41
 800a99c:	0800aa75 	.word	0x0800aa75
 800a9a0:	0800aaa9 	.word	0x0800aaa9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00b      	beq.n	800a9c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	7c12      	ldrb	r2, [r2, #16]
 800a9bc:	f107 0108 	add.w	r1, r7, #8
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	4798      	blx	r3
 800a9c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9c6:	e091      	b.n	800aaec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9c8:	6839      	ldr	r1, [r7, #0]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fa97 	bl	800aefe <USBD_CtlError>
            err++;
 800a9d0:	7afb      	ldrb	r3, [r7, #11]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a9d6:	e089      	b.n	800aaec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00b      	beq.n	800a9fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	7c12      	ldrb	r2, [r2, #16]
 800a9f0:	f107 0108 	add.w	r1, r7, #8
 800a9f4:	4610      	mov	r0, r2
 800a9f6:	4798      	blx	r3
 800a9f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9fa:	e077      	b.n	800aaec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fa7d 	bl	800aefe <USBD_CtlError>
            err++;
 800aa04:	7afb      	ldrb	r3, [r7, #11]
 800aa06:	3301      	adds	r3, #1
 800aa08:	72fb      	strb	r3, [r7, #11]
          break;
 800aa0a:	e06f      	b.n	800aaec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00b      	beq.n	800aa30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	7c12      	ldrb	r2, [r2, #16]
 800aa24:	f107 0108 	add.w	r1, r7, #8
 800aa28:	4610      	mov	r0, r2
 800aa2a:	4798      	blx	r3
 800aa2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa2e:	e05d      	b.n	800aaec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fa63 	bl	800aefe <USBD_CtlError>
            err++;
 800aa38:	7afb      	ldrb	r3, [r7, #11]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa3e:	e055      	b.n	800aaec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00b      	beq.n	800aa64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	7c12      	ldrb	r2, [r2, #16]
 800aa58:	f107 0108 	add.w	r1, r7, #8
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	4798      	blx	r3
 800aa60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa62:	e043      	b.n	800aaec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa64:	6839      	ldr	r1, [r7, #0]
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fa49 	bl	800aefe <USBD_CtlError>
            err++;
 800aa6c:	7afb      	ldrb	r3, [r7, #11]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	72fb      	strb	r3, [r7, #11]
          break;
 800aa72:	e03b      	b.n	800aaec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00b      	beq.n	800aa98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa86:	695b      	ldr	r3, [r3, #20]
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	7c12      	ldrb	r2, [r2, #16]
 800aa8c:	f107 0108 	add.w	r1, r7, #8
 800aa90:	4610      	mov	r0, r2
 800aa92:	4798      	blx	r3
 800aa94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa96:	e029      	b.n	800aaec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa98:	6839      	ldr	r1, [r7, #0]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fa2f 	bl	800aefe <USBD_CtlError>
            err++;
 800aaa0:	7afb      	ldrb	r3, [r7, #11]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	72fb      	strb	r3, [r7, #11]
          break;
 800aaa6:	e021      	b.n	800aaec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aaae:	699b      	ldr	r3, [r3, #24]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00b      	beq.n	800aacc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	7c12      	ldrb	r2, [r2, #16]
 800aac0:	f107 0108 	add.w	r1, r7, #8
 800aac4:	4610      	mov	r0, r2
 800aac6:	4798      	blx	r3
 800aac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaca:	e00f      	b.n	800aaec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fa15 	bl	800aefe <USBD_CtlError>
            err++;
 800aad4:	7afb      	ldrb	r3, [r7, #11]
 800aad6:	3301      	adds	r3, #1
 800aad8:	72fb      	strb	r3, [r7, #11]
          break;
 800aada:	e007      	b.n	800aaec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fa0d 	bl	800aefe <USBD_CtlError>
          err++;
 800aae4:	7afb      	ldrb	r3, [r7, #11]
 800aae6:	3301      	adds	r3, #1
 800aae8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800aaea:	e038      	b.n	800ab5e <USBD_GetDescriptor+0x286>
 800aaec:	e037      	b.n	800ab5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	7c1b      	ldrb	r3, [r3, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d109      	bne.n	800ab0a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aafe:	f107 0208 	add.w	r2, r7, #8
 800ab02:	4610      	mov	r0, r2
 800ab04:	4798      	blx	r3
 800ab06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab08:	e029      	b.n	800ab5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f9f6 	bl	800aefe <USBD_CtlError>
        err++;
 800ab12:	7afb      	ldrb	r3, [r7, #11]
 800ab14:	3301      	adds	r3, #1
 800ab16:	72fb      	strb	r3, [r7, #11]
      break;
 800ab18:	e021      	b.n	800ab5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	7c1b      	ldrb	r3, [r3, #16]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10d      	bne.n	800ab3e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab2a:	f107 0208 	add.w	r2, r7, #8
 800ab2e:	4610      	mov	r0, r2
 800ab30:	4798      	blx	r3
 800ab32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	3301      	adds	r3, #1
 800ab38:	2207      	movs	r2, #7
 800ab3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab3c:	e00f      	b.n	800ab5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab3e:	6839      	ldr	r1, [r7, #0]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f9dc 	bl	800aefe <USBD_CtlError>
        err++;
 800ab46:	7afb      	ldrb	r3, [r7, #11]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	72fb      	strb	r3, [r7, #11]
      break;
 800ab4c:	e007      	b.n	800ab5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f9d4 	bl	800aefe <USBD_CtlError>
      err++;
 800ab56:	7afb      	ldrb	r3, [r7, #11]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	72fb      	strb	r3, [r7, #11]
      break;
 800ab5c:	bf00      	nop
  }

  if (err != 0U)
 800ab5e:	7afb      	ldrb	r3, [r7, #11]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d11c      	bne.n	800ab9e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ab64:	893b      	ldrh	r3, [r7, #8]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d011      	beq.n	800ab8e <USBD_GetDescriptor+0x2b6>
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	88db      	ldrh	r3, [r3, #6]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00d      	beq.n	800ab8e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	88da      	ldrh	r2, [r3, #6]
 800ab76:	893b      	ldrh	r3, [r7, #8]
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	bf28      	it	cs
 800ab7c:	4613      	movcs	r3, r2
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab82:	893b      	ldrh	r3, [r7, #8]
 800ab84:	461a      	mov	r2, r3
 800ab86:	68f9      	ldr	r1, [r7, #12]
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 fa22 	bl	800afd2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	88db      	ldrh	r3, [r3, #6]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d104      	bne.n	800aba0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 fa79 	bl	800b08e <USBD_CtlSendStatus>
 800ab9c:	e000      	b.n	800aba0 <USBD_GetDescriptor+0x2c8>
    return;
 800ab9e:	bf00      	nop
    }
  }
}
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop

0800aba8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	889b      	ldrh	r3, [r3, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d130      	bne.n	800ac1c <USBD_SetAddress+0x74>
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	88db      	ldrh	r3, [r3, #6]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d12c      	bne.n	800ac1c <USBD_SetAddress+0x74>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	885b      	ldrh	r3, [r3, #2]
 800abc6:	2b7f      	cmp	r3, #127	; 0x7f
 800abc8:	d828      	bhi.n	800ac1c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	885b      	ldrh	r3, [r3, #2]
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abdc:	2b03      	cmp	r3, #3
 800abde:	d104      	bne.n	800abea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f98b 	bl	800aefe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abe8:	e01d      	b.n	800ac26 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	7bfa      	ldrb	r2, [r7, #15]
 800abee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800abf2:	7bfb      	ldrb	r3, [r7, #15]
 800abf4:	4619      	mov	r1, r3
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f003 ffd6 	bl	800eba8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fa46 	bl	800b08e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d004      	beq.n	800ac12 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac10:	e009      	b.n	800ac26 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac1a:	e004      	b.n	800ac26 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac1c:	6839      	ldr	r1, [r7, #0]
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f96d 	bl	800aefe <USBD_CtlError>
  }
}
 800ac24:	bf00      	nop
 800ac26:	bf00      	nop
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
	...

0800ac30 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	885b      	ldrh	r3, [r3, #2]
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	4b41      	ldr	r3, [pc, #260]	; (800ad48 <USBD_SetConfig+0x118>)
 800ac42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac44:	4b40      	ldr	r3, [pc, #256]	; (800ad48 <USBD_SetConfig+0x118>)
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d904      	bls.n	800ac56 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f955 	bl	800aefe <USBD_CtlError>
 800ac54:	e075      	b.n	800ad42 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d002      	beq.n	800ac66 <USBD_SetConfig+0x36>
 800ac60:	2b03      	cmp	r3, #3
 800ac62:	d023      	beq.n	800acac <USBD_SetConfig+0x7c>
 800ac64:	e062      	b.n	800ad2c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ac66:	4b38      	ldr	r3, [pc, #224]	; (800ad48 <USBD_SetConfig+0x118>)
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d01a      	beq.n	800aca4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ac6e:	4b36      	ldr	r3, [pc, #216]	; (800ad48 <USBD_SetConfig+0x118>)
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	461a      	mov	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2203      	movs	r2, #3
 800ac7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ac80:	4b31      	ldr	r3, [pc, #196]	; (800ad48 <USBD_SetConfig+0x118>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	4619      	mov	r1, r3
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f7ff f9e7 	bl	800a05a <USBD_SetClassConfig>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d104      	bne.n	800ac9c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ac92:	6839      	ldr	r1, [r7, #0]
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f932 	bl	800aefe <USBD_CtlError>
            return;
 800ac9a:	e052      	b.n	800ad42 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f9f6 	bl	800b08e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aca2:	e04e      	b.n	800ad42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 f9f2 	bl	800b08e <USBD_CtlSendStatus>
        break;
 800acaa:	e04a      	b.n	800ad42 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800acac:	4b26      	ldr	r3, [pc, #152]	; (800ad48 <USBD_SetConfig+0x118>)
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d112      	bne.n	800acda <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2202      	movs	r2, #2
 800acb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800acbc:	4b22      	ldr	r3, [pc, #136]	; (800ad48 <USBD_SetConfig+0x118>)
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	461a      	mov	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800acc6:	4b20      	ldr	r3, [pc, #128]	; (800ad48 <USBD_SetConfig+0x118>)
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	4619      	mov	r1, r3
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f7ff f9e3 	bl	800a098 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 f9db 	bl	800b08e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800acd8:	e033      	b.n	800ad42 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800acda:	4b1b      	ldr	r3, [pc, #108]	; (800ad48 <USBD_SetConfig+0x118>)
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	461a      	mov	r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d01d      	beq.n	800ad24 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	b2db      	uxtb	r3, r3
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7ff f9d1 	bl	800a098 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800acf6:	4b14      	ldr	r3, [pc, #80]	; (800ad48 <USBD_SetConfig+0x118>)
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ad00:	4b11      	ldr	r3, [pc, #68]	; (800ad48 <USBD_SetConfig+0x118>)
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7ff f9a7 	bl	800a05a <USBD_SetClassConfig>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d104      	bne.n	800ad1c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ad12:	6839      	ldr	r1, [r7, #0]
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 f8f2 	bl	800aefe <USBD_CtlError>
            return;
 800ad1a:	e012      	b.n	800ad42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 f9b6 	bl	800b08e <USBD_CtlSendStatus>
        break;
 800ad22:	e00e      	b.n	800ad42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 f9b2 	bl	800b08e <USBD_CtlSendStatus>
        break;
 800ad2a:	e00a      	b.n	800ad42 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ad2c:	6839      	ldr	r1, [r7, #0]
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 f8e5 	bl	800aefe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ad34:	4b04      	ldr	r3, [pc, #16]	; (800ad48 <USBD_SetConfig+0x118>)
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	4619      	mov	r1, r3
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7ff f9ac 	bl	800a098 <USBD_ClrClassConfig>
        break;
 800ad40:	bf00      	nop
    }
  }
}
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	200001b1 	.word	0x200001b1

0800ad4c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	88db      	ldrh	r3, [r3, #6]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d004      	beq.n	800ad68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f8cc 	bl	800aefe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad66:	e022      	b.n	800adae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	dc02      	bgt.n	800ad78 <USBD_GetConfig+0x2c>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	dc03      	bgt.n	800ad7e <USBD_GetConfig+0x32>
 800ad76:	e015      	b.n	800ada4 <USBD_GetConfig+0x58>
 800ad78:	2b03      	cmp	r3, #3
 800ad7a:	d00b      	beq.n	800ad94 <USBD_GetConfig+0x48>
 800ad7c:	e012      	b.n	800ada4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2200      	movs	r2, #0
 800ad82:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	3308      	adds	r3, #8
 800ad88:	2201      	movs	r2, #1
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f920 	bl	800afd2 <USBD_CtlSendData>
        break;
 800ad92:	e00c      	b.n	800adae <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	3304      	adds	r3, #4
 800ad98:	2201      	movs	r2, #1
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 f918 	bl	800afd2 <USBD_CtlSendData>
        break;
 800ada2:	e004      	b.n	800adae <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f8a9 	bl	800aefe <USBD_CtlError>
        break;
 800adac:	bf00      	nop
}
 800adae:	bf00      	nop
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b082      	sub	sp, #8
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
 800adbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adc6:	3b01      	subs	r3, #1
 800adc8:	2b02      	cmp	r3, #2
 800adca:	d81e      	bhi.n	800ae0a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	88db      	ldrh	r3, [r3, #6]
 800add0:	2b02      	cmp	r3, #2
 800add2:	d004      	beq.n	800adde <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800add4:	6839      	ldr	r1, [r7, #0]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f891 	bl	800aefe <USBD_CtlError>
        break;
 800addc:	e01a      	b.n	800ae14 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800adea:	2b00      	cmp	r3, #0
 800adec:	d005      	beq.n	800adfa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	f043 0202 	orr.w	r2, r3, #2
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	330c      	adds	r3, #12
 800adfe:	2202      	movs	r2, #2
 800ae00:	4619      	mov	r1, r3
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f8e5 	bl	800afd2 <USBD_CtlSendData>
      break;
 800ae08:	e004      	b.n	800ae14 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f876 	bl	800aefe <USBD_CtlError>
      break;
 800ae12:	bf00      	nop
  }
}
 800ae14:	bf00      	nop
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	885b      	ldrh	r3, [r3, #2]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d106      	bne.n	800ae3c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2201      	movs	r2, #1
 800ae32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f929 	bl	800b08e <USBD_CtlSendStatus>
  }
}
 800ae3c:	bf00      	nop
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae54:	3b01      	subs	r3, #1
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d80b      	bhi.n	800ae72 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	885b      	ldrh	r3, [r3, #2]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d10c      	bne.n	800ae7c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f90f 	bl	800b08e <USBD_CtlSendStatus>
      }
      break;
 800ae70:	e004      	b.n	800ae7c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 f842 	bl	800aefe <USBD_CtlError>
      break;
 800ae7a:	e000      	b.n	800ae7e <USBD_ClrFeature+0x3a>
      break;
 800ae7c:	bf00      	nop
  }
}
 800ae7e:	bf00      	nop
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae86:	b480      	push	{r7}
 800ae88:	b083      	sub	sp, #12
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	781a      	ldrb	r2, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	785a      	ldrb	r2, [r3, #1]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	3302      	adds	r3, #2
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	3303      	adds	r3, #3
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	021b      	lsls	r3, r3, #8
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	4413      	add	r3, r2
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	3304      	adds	r3, #4
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	3305      	adds	r3, #5
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	021b      	lsls	r3, r3, #8
 800aece:	b29b      	uxth	r3, r3
 800aed0:	4413      	add	r3, r2
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	3306      	adds	r3, #6
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	b29a      	uxth	r2, r3
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	3307      	adds	r3, #7
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	021b      	lsls	r3, r3, #8
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	4413      	add	r3, r2
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	80da      	strh	r2, [r3, #6]

}
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bc80      	pop	{r7}
 800aefc:	4770      	bx	lr

0800aefe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b082      	sub	sp, #8
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800af08:	2180      	movs	r1, #128	; 0x80
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f003 fde2 	bl	800ead4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800af10:	2100      	movs	r1, #0
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f003 fdde 	bl	800ead4 <USBD_LL_StallEP>
}
 800af18:	bf00      	nop
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d032      	beq.n	800af9c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f000 f834 	bl	800afa4 <USBD_GetLen>
 800af3c:	4603      	mov	r3, r0
 800af3e:	3301      	adds	r3, #1
 800af40:	b29b      	uxth	r3, r3
 800af42:	005b      	lsls	r3, r3, #1
 800af44:	b29a      	uxth	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800af4a:	7dfb      	ldrb	r3, [r7, #23]
 800af4c:	1c5a      	adds	r2, r3, #1
 800af4e:	75fa      	strb	r2, [r7, #23]
 800af50:	461a      	mov	r2, r3
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	4413      	add	r3, r2
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	7812      	ldrb	r2, [r2, #0]
 800af5a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800af5c:	7dfb      	ldrb	r3, [r7, #23]
 800af5e:	1c5a      	adds	r2, r3, #1
 800af60:	75fa      	strb	r2, [r7, #23]
 800af62:	461a      	mov	r2, r3
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	4413      	add	r3, r2
 800af68:	2203      	movs	r2, #3
 800af6a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800af6c:	e012      	b.n	800af94 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	1c5a      	adds	r2, r3, #1
 800af72:	60fa      	str	r2, [r7, #12]
 800af74:	7dfa      	ldrb	r2, [r7, #23]
 800af76:	1c51      	adds	r1, r2, #1
 800af78:	75f9      	strb	r1, [r7, #23]
 800af7a:	4611      	mov	r1, r2
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	440a      	add	r2, r1
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800af84:	7dfb      	ldrb	r3, [r7, #23]
 800af86:	1c5a      	adds	r2, r3, #1
 800af88:	75fa      	strb	r2, [r7, #23]
 800af8a:	461a      	mov	r2, r3
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	4413      	add	r3, r2
 800af90:	2200      	movs	r2, #0
 800af92:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d1e8      	bne.n	800af6e <USBD_GetString+0x4e>
    }
  }
}
 800af9c:	bf00      	nop
 800af9e:	3718      	adds	r7, #24
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800afac:	2300      	movs	r3, #0
 800afae:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800afb0:	e005      	b.n	800afbe <USBD_GetLen+0x1a>
  {
    len++;
 800afb2:	7bfb      	ldrb	r3, [r7, #15]
 800afb4:	3301      	adds	r3, #1
 800afb6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3301      	adds	r3, #1
 800afbc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d1f5      	bne.n	800afb2 <USBD_GetLen+0xe>
  }

  return len;
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3714      	adds	r7, #20
 800afcc:	46bd      	mov	sp, r7
 800afce:	bc80      	pop	{r7}
 800afd0:	4770      	bx	lr

0800afd2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b084      	sub	sp, #16
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	60f8      	str	r0, [r7, #12]
 800afda:	60b9      	str	r1, [r7, #8]
 800afdc:	4613      	mov	r3, r2
 800afde:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2202      	movs	r2, #2
 800afe4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800afe8:	88fa      	ldrh	r2, [r7, #6]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800afee:	88fa      	ldrh	r2, [r7, #6]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aff4:	88fb      	ldrh	r3, [r7, #6]
 800aff6:	68ba      	ldr	r2, [r7, #8]
 800aff8:	2100      	movs	r1, #0
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f003 fdf3 	bl	800ebe6 <USBD_LL_Transmit>

  return USBD_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b084      	sub	sp, #16
 800b00e:	af00      	add	r7, sp, #0
 800b010:	60f8      	str	r0, [r7, #12]
 800b012:	60b9      	str	r1, [r7, #8]
 800b014:	4613      	mov	r3, r2
 800b016:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b018:	88fb      	ldrh	r3, [r7, #6]
 800b01a:	68ba      	ldr	r2, [r7, #8]
 800b01c:	2100      	movs	r1, #0
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f003 fde1 	bl	800ebe6 <USBD_LL_Transmit>

  return USBD_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b084      	sub	sp, #16
 800b032:	af00      	add	r7, sp, #0
 800b034:	60f8      	str	r0, [r7, #12]
 800b036:	60b9      	str	r1, [r7, #8]
 800b038:	4613      	mov	r3, r2
 800b03a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2203      	movs	r2, #3
 800b040:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b044:	88fa      	ldrh	r2, [r7, #6]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b04c:	88fa      	ldrh	r2, [r7, #6]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b054:	88fb      	ldrh	r3, [r7, #6]
 800b056:	68ba      	ldr	r2, [r7, #8]
 800b058:	2100      	movs	r1, #0
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f003 fde6 	bl	800ec2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b084      	sub	sp, #16
 800b06e:	af00      	add	r7, sp, #0
 800b070:	60f8      	str	r0, [r7, #12]
 800b072:	60b9      	str	r1, [r7, #8]
 800b074:	4613      	mov	r3, r2
 800b076:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b078:	88fb      	ldrh	r3, [r7, #6]
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	2100      	movs	r1, #0
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f003 fdd4 	bl	800ec2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b082      	sub	sp, #8
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2204      	movs	r2, #4
 800b09a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b09e:	2300      	movs	r3, #0
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f003 fd9e 	bl	800ebe6 <USBD_LL_Transmit>

  return USBD_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2205      	movs	r2, #5
 800b0c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f003 fdae 	bl	800ec2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
	...

0800b0dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b0dc:	b480      	push	{r7}
 800b0de:	b085      	sub	sp, #20
 800b0e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0e2:	f3ef 8305 	mrs	r3, IPSR
 800b0e6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b0e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d10f      	bne.n	800b10e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b0f2:	607b      	str	r3, [r7, #4]
  return(result);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d109      	bne.n	800b10e <osKernelInitialize+0x32>
 800b0fa:	4b10      	ldr	r3, [pc, #64]	; (800b13c <osKernelInitialize+0x60>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d109      	bne.n	800b116 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b102:	f3ef 8311 	mrs	r3, BASEPRI
 800b106:	603b      	str	r3, [r7, #0]
  return(result);
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d003      	beq.n	800b116 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b10e:	f06f 0305 	mvn.w	r3, #5
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	e00c      	b.n	800b130 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b116:	4b09      	ldr	r3, [pc, #36]	; (800b13c <osKernelInitialize+0x60>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d105      	bne.n	800b12a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800b11e:	4b07      	ldr	r3, [pc, #28]	; (800b13c <osKernelInitialize+0x60>)
 800b120:	2201      	movs	r2, #1
 800b122:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b124:	2300      	movs	r3, #0
 800b126:	60fb      	str	r3, [r7, #12]
 800b128:	e002      	b.n	800b130 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b12a:	f04f 33ff 	mov.w	r3, #4294967295
 800b12e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b130:	68fb      	ldr	r3, [r7, #12]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3714      	adds	r7, #20
 800b136:	46bd      	mov	sp, r7
 800b138:	bc80      	pop	{r7}
 800b13a:	4770      	bx	lr
 800b13c:	200001b4 	.word	0x200001b4

0800b140 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b146:	f3ef 8305 	mrs	r3, IPSR
 800b14a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b14c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10f      	bne.n	800b172 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b152:	f3ef 8310 	mrs	r3, PRIMASK
 800b156:	607b      	str	r3, [r7, #4]
  return(result);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d109      	bne.n	800b172 <osKernelStart+0x32>
 800b15e:	4b11      	ldr	r3, [pc, #68]	; (800b1a4 <osKernelStart+0x64>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2b02      	cmp	r3, #2
 800b164:	d109      	bne.n	800b17a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b166:	f3ef 8311 	mrs	r3, BASEPRI
 800b16a:	603b      	str	r3, [r7, #0]
  return(result);
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d003      	beq.n	800b17a <osKernelStart+0x3a>
    stat = osErrorISR;
 800b172:	f06f 0305 	mvn.w	r3, #5
 800b176:	60fb      	str	r3, [r7, #12]
 800b178:	e00e      	b.n	800b198 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800b17a:	4b0a      	ldr	r3, [pc, #40]	; (800b1a4 <osKernelStart+0x64>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d107      	bne.n	800b192 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800b182:	4b08      	ldr	r3, [pc, #32]	; (800b1a4 <osKernelStart+0x64>)
 800b184:	2202      	movs	r2, #2
 800b186:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800b188:	f001 fbc6 	bl	800c918 <vTaskStartScheduler>
      stat = osOK;
 800b18c:	2300      	movs	r3, #0
 800b18e:	60fb      	str	r3, [r7, #12]
 800b190:	e002      	b.n	800b198 <osKernelStart+0x58>
    } else {
      stat = osError;
 800b192:	f04f 33ff 	mov.w	r3, #4294967295
 800b196:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b198:	68fb      	ldr	r3, [r7, #12]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	200001b4 	.word	0x200001b4

0800b1a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b092      	sub	sp, #72	; 0x48
 800b1ac:	af04      	add	r7, sp, #16
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1b8:	f3ef 8305 	mrs	r3, IPSR
 800b1bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f040 8094 	bne.w	800b2ee <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1c6:	f3ef 8310 	mrs	r3, PRIMASK
 800b1ca:	623b      	str	r3, [r7, #32]
  return(result);
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f040 808d 	bne.w	800b2ee <osThreadNew+0x146>
 800b1d4:	4b48      	ldr	r3, [pc, #288]	; (800b2f8 <osThreadNew+0x150>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d106      	bne.n	800b1ea <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b1dc:	f3ef 8311 	mrs	r3, BASEPRI
 800b1e0:	61fb      	str	r3, [r7, #28]
  return(result);
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f040 8082 	bne.w	800b2ee <osThreadNew+0x146>
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d07e      	beq.n	800b2ee <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800b1f0:	2380      	movs	r3, #128	; 0x80
 800b1f2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800b1f4:	2318      	movs	r3, #24
 800b1f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800b1fc:	f107 031b 	add.w	r3, r7, #27
 800b200:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800b202:	f04f 33ff 	mov.w	r3, #4294967295
 800b206:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d045      	beq.n	800b29a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d002      	beq.n	800b21c <osThreadNew+0x74>
        name = attr->name;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	699b      	ldr	r3, [r3, #24]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	699b      	ldr	r3, [r3, #24]
 800b228:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d008      	beq.n	800b242 <osThreadNew+0x9a>
 800b230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b232:	2b38      	cmp	r3, #56	; 0x38
 800b234:	d805      	bhi.n	800b242 <osThreadNew+0x9a>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	f003 0301 	and.w	r3, r3, #1
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d001      	beq.n	800b246 <osThreadNew+0x9e>
        return (NULL);
 800b242:	2300      	movs	r3, #0
 800b244:	e054      	b.n	800b2f0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	695b      	ldr	r3, [r3, #20]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d003      	beq.n	800b256 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	695b      	ldr	r3, [r3, #20]
 800b252:	089b      	lsrs	r3, r3, #2
 800b254:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00e      	beq.n	800b27c <osThreadNew+0xd4>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	2b5b      	cmp	r3, #91	; 0x5b
 800b264:	d90a      	bls.n	800b27c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d006      	beq.n	800b27c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	695b      	ldr	r3, [r3, #20]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d002      	beq.n	800b27c <osThreadNew+0xd4>
        mem = 1;
 800b276:	2301      	movs	r3, #1
 800b278:	62bb      	str	r3, [r7, #40]	; 0x28
 800b27a:	e010      	b.n	800b29e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d10c      	bne.n	800b29e <osThreadNew+0xf6>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d108      	bne.n	800b29e <osThreadNew+0xf6>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d104      	bne.n	800b29e <osThreadNew+0xf6>
          mem = 0;
 800b294:	2300      	movs	r3, #0
 800b296:	62bb      	str	r3, [r7, #40]	; 0x28
 800b298:	e001      	b.n	800b29e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d110      	bne.n	800b2c6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b2ac:	9202      	str	r2, [sp, #8]
 800b2ae:	9301      	str	r3, [sp, #4]
 800b2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f001 f8e2 	bl	800c484 <xTaskCreateStatic>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	617b      	str	r3, [r7, #20]
 800b2c4:	e013      	b.n	800b2ee <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800b2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d110      	bne.n	800b2ee <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	f107 0314 	add.w	r3, r7, #20
 800b2d4:	9301      	str	r3, [sp, #4]
 800b2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f001 f92c 	bl	800c53c <xTaskCreate>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d001      	beq.n	800b2ee <osThreadNew+0x146>
          hTask = NULL;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b2ee:	697b      	ldr	r3, [r7, #20]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3738      	adds	r7, #56	; 0x38
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	200001b4 	.word	0x200001b4

0800b2fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b086      	sub	sp, #24
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b304:	f3ef 8305 	mrs	r3, IPSR
 800b308:	613b      	str	r3, [r7, #16]
  return(result);
 800b30a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10f      	bne.n	800b330 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b310:	f3ef 8310 	mrs	r3, PRIMASK
 800b314:	60fb      	str	r3, [r7, #12]
  return(result);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d109      	bne.n	800b330 <osDelay+0x34>
 800b31c:	4b0d      	ldr	r3, [pc, #52]	; (800b354 <osDelay+0x58>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b02      	cmp	r3, #2
 800b322:	d109      	bne.n	800b338 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b324:	f3ef 8311 	mrs	r3, BASEPRI
 800b328:	60bb      	str	r3, [r7, #8]
  return(result);
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d003      	beq.n	800b338 <osDelay+0x3c>
    stat = osErrorISR;
 800b330:	f06f 0305 	mvn.w	r3, #5
 800b334:	617b      	str	r3, [r7, #20]
 800b336:	e007      	b.n	800b348 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b338:	2300      	movs	r3, #0
 800b33a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d002      	beq.n	800b348 <osDelay+0x4c>
      vTaskDelay(ticks);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f001 fab4 	bl	800c8b0 <vTaskDelay>
    }
  }

  return (stat);
 800b348:	697b      	ldr	r3, [r7, #20]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3718      	adds	r7, #24
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	200001b4 	.word	0x200001b4

0800b358 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b358:	b580      	push	{r7, lr}
 800b35a:	b08a      	sub	sp, #40	; 0x28
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b360:	2300      	movs	r3, #0
 800b362:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b364:	f3ef 8305 	mrs	r3, IPSR
 800b368:	613b      	str	r3, [r7, #16]
  return(result);
 800b36a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f040 8085 	bne.w	800b47c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b372:	f3ef 8310 	mrs	r3, PRIMASK
 800b376:	60fb      	str	r3, [r7, #12]
  return(result);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d17e      	bne.n	800b47c <osMutexNew+0x124>
 800b37e:	4b42      	ldr	r3, [pc, #264]	; (800b488 <osMutexNew+0x130>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b02      	cmp	r3, #2
 800b384:	d105      	bne.n	800b392 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b386:	f3ef 8311 	mrs	r3, BASEPRI
 800b38a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d174      	bne.n	800b47c <osMutexNew+0x124>
    if (attr != NULL) {
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d003      	beq.n	800b3a0 <osMutexNew+0x48>
      type = attr->attr_bits;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	623b      	str	r3, [r7, #32]
 800b39e:	e001      	b.n	800b3a4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b3a4:	6a3b      	ldr	r3, [r7, #32]
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d002      	beq.n	800b3b4 <osMutexNew+0x5c>
      rmtx = 1U;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	61fb      	str	r3, [r7, #28]
 800b3b2:	e001      	b.n	800b3b8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b3b8:	6a3b      	ldr	r3, [r7, #32]
 800b3ba:	f003 0308 	and.w	r3, r3, #8
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d15c      	bne.n	800b47c <osMutexNew+0x124>
      mem = -1;
 800b3c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3c6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d015      	beq.n	800b3fa <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d006      	beq.n	800b3e4 <osMutexNew+0x8c>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	2b4f      	cmp	r3, #79	; 0x4f
 800b3dc:	d902      	bls.n	800b3e4 <osMutexNew+0x8c>
          mem = 1;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	61bb      	str	r3, [r7, #24]
 800b3e2:	e00c      	b.n	800b3fe <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d108      	bne.n	800b3fe <osMutexNew+0xa6>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d104      	bne.n	800b3fe <osMutexNew+0xa6>
            mem = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	61bb      	str	r3, [r7, #24]
 800b3f8:	e001      	b.n	800b3fe <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	2b01      	cmp	r3, #1
 800b402:	d112      	bne.n	800b42a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d007      	beq.n	800b41a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	4619      	mov	r1, r3
 800b410:	2004      	movs	r0, #4
 800b412:	f000 fb15 	bl	800ba40 <xQueueCreateMutexStatic>
 800b416:	6278      	str	r0, [r7, #36]	; 0x24
 800b418:	e016      	b.n	800b448 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	4619      	mov	r1, r3
 800b420:	2001      	movs	r0, #1
 800b422:	f000 fb0d 	bl	800ba40 <xQueueCreateMutexStatic>
 800b426:	6278      	str	r0, [r7, #36]	; 0x24
 800b428:	e00e      	b.n	800b448 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10b      	bne.n	800b448 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d004      	beq.n	800b440 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b436:	2004      	movs	r0, #4
 800b438:	f000 faea 	bl	800ba10 <xQueueCreateMutex>
 800b43c:	6278      	str	r0, [r7, #36]	; 0x24
 800b43e:	e003      	b.n	800b448 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800b440:	2001      	movs	r0, #1
 800b442:	f000 fae5 	bl	800ba10 <xQueueCreateMutex>
 800b446:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00c      	beq.n	800b468 <osMutexNew+0x110>
        if (attr != NULL) {
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d003      	beq.n	800b45c <osMutexNew+0x104>
          name = attr->name;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	617b      	str	r3, [r7, #20]
 800b45a:	e001      	b.n	800b460 <osMutexNew+0x108>
        } else {
          name = NULL;
 800b45c:	2300      	movs	r3, #0
 800b45e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800b460:	6979      	ldr	r1, [r7, #20]
 800b462:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b464:	f000 ffb2 	bl	800c3cc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d006      	beq.n	800b47c <osMutexNew+0x124>
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d003      	beq.n	800b47c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	f043 0301 	orr.w	r3, r3, #1
 800b47a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3728      	adds	r7, #40	; 0x28
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	200001b4 	.word	0x200001b4

0800b48c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b08c      	sub	sp, #48	; 0x30
 800b490:	af02      	add	r7, sp, #8
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b498:	2300      	movs	r3, #0
 800b49a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b49c:	f3ef 8305 	mrs	r3, IPSR
 800b4a0:	61bb      	str	r3, [r7, #24]
  return(result);
 800b4a2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d16f      	bne.n	800b588 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4a8:	f3ef 8310 	mrs	r3, PRIMASK
 800b4ac:	617b      	str	r3, [r7, #20]
  return(result);
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d169      	bne.n	800b588 <osMessageQueueNew+0xfc>
 800b4b4:	4b37      	ldr	r3, [pc, #220]	; (800b594 <osMessageQueueNew+0x108>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	d105      	bne.n	800b4c8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b4bc:	f3ef 8311 	mrs	r3, BASEPRI
 800b4c0:	613b      	str	r3, [r7, #16]
  return(result);
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d15f      	bne.n	800b588 <osMessageQueueNew+0xfc>
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d05c      	beq.n	800b588 <osMessageQueueNew+0xfc>
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d059      	beq.n	800b588 <osMessageQueueNew+0xfc>
    mem = -1;
 800b4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d029      	beq.n	800b534 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d012      	beq.n	800b50e <osMessageQueueNew+0x82>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	2b4f      	cmp	r3, #79	; 0x4f
 800b4ee:	d90e      	bls.n	800b50e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00a      	beq.n	800b50e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	695a      	ldr	r2, [r3, #20]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	68b9      	ldr	r1, [r7, #8]
 800b500:	fb01 f303 	mul.w	r3, r1, r3
 800b504:	429a      	cmp	r2, r3
 800b506:	d302      	bcc.n	800b50e <osMessageQueueNew+0x82>
        mem = 1;
 800b508:	2301      	movs	r3, #1
 800b50a:	623b      	str	r3, [r7, #32]
 800b50c:	e014      	b.n	800b538 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d110      	bne.n	800b538 <osMessageQueueNew+0xac>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d10c      	bne.n	800b538 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b522:	2b00      	cmp	r3, #0
 800b524:	d108      	bne.n	800b538 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	695b      	ldr	r3, [r3, #20]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d104      	bne.n	800b538 <osMessageQueueNew+0xac>
          mem = 0;
 800b52e:	2300      	movs	r3, #0
 800b530:	623b      	str	r3, [r7, #32]
 800b532:	e001      	b.n	800b538 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800b534:	2300      	movs	r3, #0
 800b536:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b538:	6a3b      	ldr	r3, [r7, #32]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d10b      	bne.n	800b556 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	691a      	ldr	r2, [r3, #16]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	2100      	movs	r1, #0
 800b548:	9100      	str	r1, [sp, #0]
 800b54a:	68b9      	ldr	r1, [r7, #8]
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f000 f96d 	bl	800b82c <xQueueGenericCreateStatic>
 800b552:	6278      	str	r0, [r7, #36]	; 0x24
 800b554:	e008      	b.n	800b568 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800b556:	6a3b      	ldr	r3, [r7, #32]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d105      	bne.n	800b568 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b55c:	2200      	movs	r2, #0
 800b55e:	68b9      	ldr	r1, [r7, #8]
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f000 f9da 	bl	800b91a <xQueueGenericCreate>
 800b566:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00c      	beq.n	800b588 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d003      	beq.n	800b57c <osMessageQueueNew+0xf0>
        name = attr->name;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	61fb      	str	r3, [r7, #28]
 800b57a:	e001      	b.n	800b580 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800b57c:	2300      	movs	r3, #0
 800b57e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800b580:	69f9      	ldr	r1, [r7, #28]
 800b582:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b584:	f000 ff22 	bl	800c3cc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3728      	adds	r7, #40	; 0x28
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	200001b4 	.word	0x200001b4

0800b598 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	4a06      	ldr	r2, [pc, #24]	; (800b5c0 <vApplicationGetIdleTaskMemory+0x28>)
 800b5a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	4a05      	ldr	r2, [pc, #20]	; (800b5c4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b5ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2280      	movs	r2, #128	; 0x80
 800b5b4:	601a      	str	r2, [r3, #0]
}
 800b5b6:	bf00      	nop
 800b5b8:	3714      	adds	r7, #20
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bc80      	pop	{r7}
 800b5be:	4770      	bx	lr
 800b5c0:	200001b8 	.word	0x200001b8
 800b5c4:	20000214 	.word	0x20000214

0800b5c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b5c8:	b480      	push	{r7}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	4a07      	ldr	r2, [pc, #28]	; (800b5f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800b5d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	4a06      	ldr	r2, [pc, #24]	; (800b5f8 <vApplicationGetTimerTaskMemory+0x30>)
 800b5de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5e6:	601a      	str	r2, [r3, #0]
}
 800b5e8:	bf00      	nop
 800b5ea:	3714      	adds	r7, #20
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bc80      	pop	{r7}
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	20000414 	.word	0x20000414
 800b5f8:	20000470 	.word	0x20000470

0800b5fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f103 0208 	add.w	r2, r3, #8
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f04f 32ff 	mov.w	r2, #4294967295
 800b614:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f103 0208 	add.w	r2, r3, #8
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f103 0208 	add.w	r2, r3, #8
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	bc80      	pop	{r7}
 800b638:	4770      	bx	lr

0800b63a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b63a:	b480      	push	{r7}
 800b63c:	b083      	sub	sp, #12
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b648:	bf00      	nop
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bc80      	pop	{r7}
 800b650:	4770      	bx	lr

0800b652 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b652:	b480      	push	{r7}
 800b654:	b085      	sub	sp, #20
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	689a      	ldr	r2, [r3, #8]
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	683a      	ldr	r2, [r7, #0]
 800b676:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	683a      	ldr	r2, [r7, #0]
 800b67c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	1c5a      	adds	r2, r3, #1
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	601a      	str	r2, [r3, #0]
}
 800b68e:	bf00      	nop
 800b690:	3714      	adds	r7, #20
 800b692:	46bd      	mov	sp, r7
 800b694:	bc80      	pop	{r7}
 800b696:	4770      	bx	lr

0800b698 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ae:	d103      	bne.n	800b6b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	60fb      	str	r3, [r7, #12]
 800b6b6:	e00c      	b.n	800b6d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	3308      	adds	r3, #8
 800b6bc:	60fb      	str	r3, [r7, #12]
 800b6be:	e002      	b.n	800b6c6 <vListInsert+0x2e>
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	60fb      	str	r3, [r7, #12]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d2f6      	bcs.n	800b6c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	685a      	ldr	r2, [r3, #4]
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	683a      	ldr	r2, [r7, #0]
 800b6e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	683a      	ldr	r2, [r7, #0]
 800b6ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	1c5a      	adds	r2, r3, #1
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	601a      	str	r2, [r3, #0]
}
 800b6fe:	bf00      	nop
 800b700:	3714      	adds	r7, #20
 800b702:	46bd      	mov	sp, r7
 800b704:	bc80      	pop	{r7}
 800b706:	4770      	bx	lr

0800b708 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	6892      	ldr	r2, [r2, #8]
 800b71e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	6852      	ldr	r2, [r2, #4]
 800b728:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	429a      	cmp	r2, r3
 800b732:	d103      	bne.n	800b73c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	689a      	ldr	r2, [r3, #8]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	1e5a      	subs	r2, r3, #1
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3714      	adds	r7, #20
 800b754:	46bd      	mov	sp, r7
 800b756:	bc80      	pop	{r7}
 800b758:	4770      	bx	lr
	...

0800b75c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d10a      	bne.n	800b786 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b774:	f383 8811 	msr	BASEPRI, r3
 800b778:	f3bf 8f6f 	isb	sy
 800b77c:	f3bf 8f4f 	dsb	sy
 800b780:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b782:	bf00      	nop
 800b784:	e7fe      	b.n	800b784 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b786:	f002 fb39 	bl	800ddfc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b792:	68f9      	ldr	r1, [r7, #12]
 800b794:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b796:	fb01 f303 	mul.w	r3, r1, r3
 800b79a:	441a      	add	r2, r3
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	68f9      	ldr	r1, [r7, #12]
 800b7ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b7bc:	fb01 f303 	mul.w	r3, r1, r3
 800b7c0:	441a      	add	r2, r3
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	22ff      	movs	r2, #255	; 0xff
 800b7ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	22ff      	movs	r2, #255	; 0xff
 800b7d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d114      	bne.n	800b806 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	691b      	ldr	r3, [r3, #16]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d01a      	beq.n	800b81a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	3310      	adds	r3, #16
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f001 fb1f 	bl	800ce2c <xTaskRemoveFromEventList>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d012      	beq.n	800b81a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b7f4:	4b0c      	ldr	r3, [pc, #48]	; (800b828 <xQueueGenericReset+0xcc>)
 800b7f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7fa:	601a      	str	r2, [r3, #0]
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	f3bf 8f6f 	isb	sy
 800b804:	e009      	b.n	800b81a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	3310      	adds	r3, #16
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff fef6 	bl	800b5fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	3324      	adds	r3, #36	; 0x24
 800b814:	4618      	mov	r0, r3
 800b816:	f7ff fef1 	bl	800b5fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b81a:	f002 fb1f 	bl	800de5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b81e:	2301      	movs	r3, #1
}
 800b820:	4618      	mov	r0, r3
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	e000ed04 	.word	0xe000ed04

0800b82c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b08e      	sub	sp, #56	; 0x38
 800b830:	af02      	add	r7, sp, #8
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
 800b838:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10a      	bne.n	800b856 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b852:	bf00      	nop
 800b854:	e7fe      	b.n	800b854 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d10a      	bne.n	800b872 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b860:	f383 8811 	msr	BASEPRI, r3
 800b864:	f3bf 8f6f 	isb	sy
 800b868:	f3bf 8f4f 	dsb	sy
 800b86c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b86e:	bf00      	nop
 800b870:	e7fe      	b.n	800b870 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d002      	beq.n	800b87e <xQueueGenericCreateStatic+0x52>
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d001      	beq.n	800b882 <xQueueGenericCreateStatic+0x56>
 800b87e:	2301      	movs	r3, #1
 800b880:	e000      	b.n	800b884 <xQueueGenericCreateStatic+0x58>
 800b882:	2300      	movs	r3, #0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d10a      	bne.n	800b89e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88c:	f383 8811 	msr	BASEPRI, r3
 800b890:	f3bf 8f6f 	isb	sy
 800b894:	f3bf 8f4f 	dsb	sy
 800b898:	623b      	str	r3, [r7, #32]
}
 800b89a:	bf00      	nop
 800b89c:	e7fe      	b.n	800b89c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d102      	bne.n	800b8aa <xQueueGenericCreateStatic+0x7e>
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <xQueueGenericCreateStatic+0x82>
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e000      	b.n	800b8b0 <xQueueGenericCreateStatic+0x84>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d10a      	bne.n	800b8ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b8:	f383 8811 	msr	BASEPRI, r3
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	61fb      	str	r3, [r7, #28]
}
 800b8c6:	bf00      	nop
 800b8c8:	e7fe      	b.n	800b8c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b8ca:	2350      	movs	r3, #80	; 0x50
 800b8cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	2b50      	cmp	r3, #80	; 0x50
 800b8d2:	d00a      	beq.n	800b8ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d8:	f383 8811 	msr	BASEPRI, r3
 800b8dc:	f3bf 8f6f 	isb	sy
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	61bb      	str	r3, [r7, #24]
}
 800b8e6:	bf00      	nop
 800b8e8:	e7fe      	b.n	800b8e8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00d      	beq.n	800b910 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b8fc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b902:	9300      	str	r3, [sp, #0]
 800b904:	4613      	mov	r3, r2
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	68b9      	ldr	r1, [r7, #8]
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	f000 f843 	bl	800b996 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b912:	4618      	mov	r0, r3
 800b914:	3730      	adds	r7, #48	; 0x30
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b08a      	sub	sp, #40	; 0x28
 800b91e:	af02      	add	r7, sp, #8
 800b920:	60f8      	str	r0, [r7, #12]
 800b922:	60b9      	str	r1, [r7, #8]
 800b924:	4613      	mov	r3, r2
 800b926:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d10a      	bne.n	800b944 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	613b      	str	r3, [r7, #16]
}
 800b940:	bf00      	nop
 800b942:	e7fe      	b.n	800b942 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d102      	bne.n	800b950 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b94a:	2300      	movs	r3, #0
 800b94c:	61fb      	str	r3, [r7, #28]
 800b94e:	e004      	b.n	800b95a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	fb02 f303 	mul.w	r3, r2, r3
 800b958:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	3350      	adds	r3, #80	; 0x50
 800b95e:	4618      	mov	r0, r3
 800b960:	f002 fb4c 	bl	800dffc <pvPortMalloc>
 800b964:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00f      	beq.n	800b98c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	3350      	adds	r3, #80	; 0x50
 800b970:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	2200      	movs	r2, #0
 800b976:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b97a:	79fa      	ldrb	r2, [r7, #7]
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	4613      	mov	r3, r2
 800b982:	697a      	ldr	r2, [r7, #20]
 800b984:	68b9      	ldr	r1, [r7, #8]
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 f805 	bl	800b996 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b98c:	69bb      	ldr	r3, [r7, #24]
	}
 800b98e:	4618      	mov	r0, r3
 800b990:	3720      	adds	r7, #32
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}

0800b996 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b084      	sub	sp, #16
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	60f8      	str	r0, [r7, #12]
 800b99e:	60b9      	str	r1, [r7, #8]
 800b9a0:	607a      	str	r2, [r7, #4]
 800b9a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d103      	bne.n	800b9b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	69ba      	ldr	r2, [r7, #24]
 800b9ae:	601a      	str	r2, [r3, #0]
 800b9b0:	e002      	b.n	800b9b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	69b8      	ldr	r0, [r7, #24]
 800b9c8:	f7ff fec8 	bl	800b75c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	78fa      	ldrb	r2, [r7, #3]
 800b9d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b9d4:	bf00      	nop
 800b9d6:	3710      	adds	r7, #16
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00e      	beq.n	800ba08 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	2200      	movs	r2, #0
 800ba00:	2100      	movs	r1, #0
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f838 	bl	800ba78 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ba08:	bf00      	nop
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	4603      	mov	r3, r0
 800ba18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	617b      	str	r3, [r7, #20]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ba22:	79fb      	ldrb	r3, [r7, #7]
 800ba24:	461a      	mov	r2, r3
 800ba26:	6939      	ldr	r1, [r7, #16]
 800ba28:	6978      	ldr	r0, [r7, #20]
 800ba2a:	f7ff ff76 	bl	800b91a <xQueueGenericCreate>
 800ba2e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f7ff ffd3 	bl	800b9dc <prvInitialiseMutex>

		return pxNewQueue;
 800ba36:	68fb      	ldr	r3, [r7, #12]
	}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3718      	adds	r7, #24
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b088      	sub	sp, #32
 800ba44:	af02      	add	r7, sp, #8
 800ba46:	4603      	mov	r3, r0
 800ba48:	6039      	str	r1, [r7, #0]
 800ba4a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	617b      	str	r3, [r7, #20]
 800ba50:	2300      	movs	r3, #0
 800ba52:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ba54:	79fb      	ldrb	r3, [r7, #7]
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	6939      	ldr	r1, [r7, #16]
 800ba5e:	6978      	ldr	r0, [r7, #20]
 800ba60:	f7ff fee4 	bl	800b82c <xQueueGenericCreateStatic>
 800ba64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f7ff ffb8 	bl	800b9dc <prvInitialiseMutex>

		return pxNewQueue;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
	}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3718      	adds	r7, #24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
	...

0800ba78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b08e      	sub	sp, #56	; 0x38
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
 800ba84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba86:	2300      	movs	r3, #0
 800ba88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d10a      	bne.n	800baaa <xQueueGenericSend+0x32>
	__asm volatile
 800ba94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba98:	f383 8811 	msr	BASEPRI, r3
 800ba9c:	f3bf 8f6f 	isb	sy
 800baa0:	f3bf 8f4f 	dsb	sy
 800baa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800baa6:	bf00      	nop
 800baa8:	e7fe      	b.n	800baa8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d103      	bne.n	800bab8 <xQueueGenericSend+0x40>
 800bab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d101      	bne.n	800babc <xQueueGenericSend+0x44>
 800bab8:	2301      	movs	r3, #1
 800baba:	e000      	b.n	800babe <xQueueGenericSend+0x46>
 800babc:	2300      	movs	r3, #0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d10a      	bne.n	800bad8 <xQueueGenericSend+0x60>
	__asm volatile
 800bac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac6:	f383 8811 	msr	BASEPRI, r3
 800baca:	f3bf 8f6f 	isb	sy
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bad4:	bf00      	nop
 800bad6:	e7fe      	b.n	800bad6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2b02      	cmp	r3, #2
 800badc:	d103      	bne.n	800bae6 <xQueueGenericSend+0x6e>
 800bade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d101      	bne.n	800baea <xQueueGenericSend+0x72>
 800bae6:	2301      	movs	r3, #1
 800bae8:	e000      	b.n	800baec <xQueueGenericSend+0x74>
 800baea:	2300      	movs	r3, #0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10a      	bne.n	800bb06 <xQueueGenericSend+0x8e>
	__asm volatile
 800baf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf4:	f383 8811 	msr	BASEPRI, r3
 800baf8:	f3bf 8f6f 	isb	sy
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	623b      	str	r3, [r7, #32]
}
 800bb02:	bf00      	nop
 800bb04:	e7fe      	b.n	800bb04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb06:	f001 fb8b 	bl	800d220 <xTaskGetSchedulerState>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d102      	bne.n	800bb16 <xQueueGenericSend+0x9e>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d101      	bne.n	800bb1a <xQueueGenericSend+0xa2>
 800bb16:	2301      	movs	r3, #1
 800bb18:	e000      	b.n	800bb1c <xQueueGenericSend+0xa4>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d10a      	bne.n	800bb36 <xQueueGenericSend+0xbe>
	__asm volatile
 800bb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	61fb      	str	r3, [r7, #28]
}
 800bb32:	bf00      	nop
 800bb34:	e7fe      	b.n	800bb34 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb36:	f002 f961 	bl	800ddfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d302      	bcc.n	800bb4c <xQueueGenericSend+0xd4>
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	d129      	bne.n	800bba0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb4c:	683a      	ldr	r2, [r7, #0]
 800bb4e:	68b9      	ldr	r1, [r7, #8]
 800bb50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb52:	f000 fb2a 	bl	800c1aa <prvCopyDataToQueue>
 800bb56:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d010      	beq.n	800bb82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb62:	3324      	adds	r3, #36	; 0x24
 800bb64:	4618      	mov	r0, r3
 800bb66:	f001 f961 	bl	800ce2c <xTaskRemoveFromEventList>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d013      	beq.n	800bb98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bb70:	4b3f      	ldr	r3, [pc, #252]	; (800bc70 <xQueueGenericSend+0x1f8>)
 800bb72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb76:	601a      	str	r2, [r3, #0]
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	e00a      	b.n	800bb98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d007      	beq.n	800bb98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bb88:	4b39      	ldr	r3, [pc, #228]	; (800bc70 <xQueueGenericSend+0x1f8>)
 800bb8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb8e:	601a      	str	r2, [r3, #0]
 800bb90:	f3bf 8f4f 	dsb	sy
 800bb94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb98:	f002 f960 	bl	800de5c <vPortExitCritical>
				return pdPASS;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e063      	b.n	800bc68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d103      	bne.n	800bbae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bba6:	f002 f959 	bl	800de5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	e05c      	b.n	800bc68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d106      	bne.n	800bbc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbb4:	f107 0314 	add.w	r3, r7, #20
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f001 f99b 	bl	800cef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbc2:	f002 f94b 	bl	800de5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbc6:	f000 ff0d 	bl	800c9e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbca:	f002 f917 	bl	800ddfc <vPortEnterCritical>
 800bbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbd4:	b25b      	sxtb	r3, r3
 800bbd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbda:	d103      	bne.n	800bbe4 <xQueueGenericSend+0x16c>
 800bbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbea:	b25b      	sxtb	r3, r3
 800bbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf0:	d103      	bne.n	800bbfa <xQueueGenericSend+0x182>
 800bbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbfa:	f002 f92f 	bl	800de5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbfe:	1d3a      	adds	r2, r7, #4
 800bc00:	f107 0314 	add.w	r3, r7, #20
 800bc04:	4611      	mov	r1, r2
 800bc06:	4618      	mov	r0, r3
 800bc08:	f001 f98a 	bl	800cf20 <xTaskCheckForTimeOut>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d124      	bne.n	800bc5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bc12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc14:	f000 fbc1 	bl	800c39a <prvIsQueueFull>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d018      	beq.n	800bc50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc20:	3310      	adds	r3, #16
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	4611      	mov	r1, r2
 800bc26:	4618      	mov	r0, r3
 800bc28:	f001 f8b0 	bl	800cd8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bc2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc2e:	f000 fb4c 	bl	800c2ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bc32:	f000 fee5 	bl	800ca00 <xTaskResumeAll>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f47f af7c 	bne.w	800bb36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bc3e:	4b0c      	ldr	r3, [pc, #48]	; (800bc70 <xQueueGenericSend+0x1f8>)
 800bc40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc44:	601a      	str	r2, [r3, #0]
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	e772      	b.n	800bb36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bc50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc52:	f000 fb3a 	bl	800c2ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc56:	f000 fed3 	bl	800ca00 <xTaskResumeAll>
 800bc5a:	e76c      	b.n	800bb36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bc5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc5e:	f000 fb34 	bl	800c2ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc62:	f000 fecd 	bl	800ca00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bc66:	2300      	movs	r3, #0
		}
	}
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3738      	adds	r7, #56	; 0x38
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	e000ed04 	.word	0xe000ed04

0800bc74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b08e      	sub	sp, #56	; 0x38
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	607a      	str	r2, [r7, #4]
 800bc80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10a      	bne.n	800bca2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc90:	f383 8811 	msr	BASEPRI, r3
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc9e:	bf00      	nop
 800bca0:	e7fe      	b.n	800bca0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d103      	bne.n	800bcb0 <xQueueGenericSendFromISR+0x3c>
 800bca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d101      	bne.n	800bcb4 <xQueueGenericSendFromISR+0x40>
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e000      	b.n	800bcb6 <xQueueGenericSendFromISR+0x42>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d10a      	bne.n	800bcd0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcbe:	f383 8811 	msr	BASEPRI, r3
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	f3bf 8f4f 	dsb	sy
 800bcca:	623b      	str	r3, [r7, #32]
}
 800bccc:	bf00      	nop
 800bcce:	e7fe      	b.n	800bcce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d103      	bne.n	800bcde <xQueueGenericSendFromISR+0x6a>
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d101      	bne.n	800bce2 <xQueueGenericSendFromISR+0x6e>
 800bcde:	2301      	movs	r3, #1
 800bce0:	e000      	b.n	800bce4 <xQueueGenericSendFromISR+0x70>
 800bce2:	2300      	movs	r3, #0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10a      	bne.n	800bcfe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	61fb      	str	r3, [r7, #28]
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcfe:	f002 f93f 	bl	800df80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bd02:	f3ef 8211 	mrs	r2, BASEPRI
 800bd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0a:	f383 8811 	msr	BASEPRI, r3
 800bd0e:	f3bf 8f6f 	isb	sy
 800bd12:	f3bf 8f4f 	dsb	sy
 800bd16:	61ba      	str	r2, [r7, #24]
 800bd18:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bd1a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d302      	bcc.n	800bd30 <xQueueGenericSendFromISR+0xbc>
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d12c      	bne.n	800bd8a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	68b9      	ldr	r1, [r7, #8]
 800bd3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd40:	f000 fa33 	bl	800c1aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bd44:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd4c:	d112      	bne.n	800bd74 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d016      	beq.n	800bd84 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd58:	3324      	adds	r3, #36	; 0x24
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f001 f866 	bl	800ce2c <xTaskRemoveFromEventList>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00e      	beq.n	800bd84 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00b      	beq.n	800bd84 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	e007      	b.n	800bd84 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd78:	3301      	adds	r3, #1
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	b25a      	sxtb	r2, r3
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd84:	2301      	movs	r3, #1
 800bd86:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bd88:	e001      	b.n	800bd8e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd90:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bd98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3738      	adds	r7, #56	; 0x38
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b08c      	sub	sp, #48	; 0x30
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10a      	bne.n	800bdd4 <xQueueReceive+0x30>
	__asm volatile
 800bdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	623b      	str	r3, [r7, #32]
}
 800bdd0:	bf00      	nop
 800bdd2:	e7fe      	b.n	800bdd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d103      	bne.n	800bde2 <xQueueReceive+0x3e>
 800bdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d101      	bne.n	800bde6 <xQueueReceive+0x42>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e000      	b.n	800bde8 <xQueueReceive+0x44>
 800bde6:	2300      	movs	r3, #0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10a      	bne.n	800be02 <xQueueReceive+0x5e>
	__asm volatile
 800bdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf0:	f383 8811 	msr	BASEPRI, r3
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	f3bf 8f4f 	dsb	sy
 800bdfc:	61fb      	str	r3, [r7, #28]
}
 800bdfe:	bf00      	nop
 800be00:	e7fe      	b.n	800be00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be02:	f001 fa0d 	bl	800d220 <xTaskGetSchedulerState>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d102      	bne.n	800be12 <xQueueReceive+0x6e>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d101      	bne.n	800be16 <xQueueReceive+0x72>
 800be12:	2301      	movs	r3, #1
 800be14:	e000      	b.n	800be18 <xQueueReceive+0x74>
 800be16:	2300      	movs	r3, #0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d10a      	bne.n	800be32 <xQueueReceive+0x8e>
	__asm volatile
 800be1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be20:	f383 8811 	msr	BASEPRI, r3
 800be24:	f3bf 8f6f 	isb	sy
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	61bb      	str	r3, [r7, #24]
}
 800be2e:	bf00      	nop
 800be30:	e7fe      	b.n	800be30 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800be32:	f001 ffe3 	bl	800ddfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d01f      	beq.n	800be82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be42:	68b9      	ldr	r1, [r7, #8]
 800be44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be46:	f000 fa1a 	bl	800c27e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4c:	1e5a      	subs	r2, r3, #1
 800be4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be54:	691b      	ldr	r3, [r3, #16]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00f      	beq.n	800be7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5c:	3310      	adds	r3, #16
 800be5e:	4618      	mov	r0, r3
 800be60:	f000 ffe4 	bl	800ce2c <xTaskRemoveFromEventList>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d007      	beq.n	800be7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be6a:	4b3d      	ldr	r3, [pc, #244]	; (800bf60 <xQueueReceive+0x1bc>)
 800be6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be70:	601a      	str	r2, [r3, #0]
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be7a:	f001 ffef 	bl	800de5c <vPortExitCritical>
				return pdPASS;
 800be7e:	2301      	movs	r3, #1
 800be80:	e069      	b.n	800bf56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d103      	bne.n	800be90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be88:	f001 ffe8 	bl	800de5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be8c:	2300      	movs	r3, #0
 800be8e:	e062      	b.n	800bf56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be92:	2b00      	cmp	r3, #0
 800be94:	d106      	bne.n	800bea4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be96:	f107 0310 	add.w	r3, r7, #16
 800be9a:	4618      	mov	r0, r3
 800be9c:	f001 f82a 	bl	800cef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bea0:	2301      	movs	r3, #1
 800bea2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bea4:	f001 ffda 	bl	800de5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bea8:	f000 fd9c 	bl	800c9e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800beac:	f001 ffa6 	bl	800ddfc <vPortEnterCritical>
 800beb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800beb6:	b25b      	sxtb	r3, r3
 800beb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bebc:	d103      	bne.n	800bec6 <xQueueReceive+0x122>
 800bebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800becc:	b25b      	sxtb	r3, r3
 800bece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed2:	d103      	bne.n	800bedc <xQueueReceive+0x138>
 800bed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed6:	2200      	movs	r2, #0
 800bed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bedc:	f001 ffbe 	bl	800de5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bee0:	1d3a      	adds	r2, r7, #4
 800bee2:	f107 0310 	add.w	r3, r7, #16
 800bee6:	4611      	mov	r1, r2
 800bee8:	4618      	mov	r0, r3
 800beea:	f001 f819 	bl	800cf20 <xTaskCheckForTimeOut>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d123      	bne.n	800bf3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bef6:	f000 fa3a 	bl	800c36e <prvIsQueueEmpty>
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	d017      	beq.n	800bf30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf02:	3324      	adds	r3, #36	; 0x24
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	4611      	mov	r1, r2
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f000 ff3f 	bl	800cd8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf10:	f000 f9db 	bl	800c2ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf14:	f000 fd74 	bl	800ca00 <xTaskResumeAll>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d189      	bne.n	800be32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bf1e:	4b10      	ldr	r3, [pc, #64]	; (800bf60 <xQueueReceive+0x1bc>)
 800bf20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf24:	601a      	str	r2, [r3, #0]
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	e780      	b.n	800be32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bf30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf32:	f000 f9ca 	bl	800c2ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf36:	f000 fd63 	bl	800ca00 <xTaskResumeAll>
 800bf3a:	e77a      	b.n	800be32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bf3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf3e:	f000 f9c4 	bl	800c2ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf42:	f000 fd5d 	bl	800ca00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf48:	f000 fa11 	bl	800c36e <prvIsQueueEmpty>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	f43f af6f 	beq.w	800be32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3730      	adds	r7, #48	; 0x30
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	e000ed04 	.word	0xe000ed04

0800bf64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b08e      	sub	sp, #56	; 0x38
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bf76:	2300      	movs	r3, #0
 800bf78:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d10a      	bne.n	800bf96 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	623b      	str	r3, [r7, #32]
}
 800bf92:	bf00      	nop
 800bf94:	e7fe      	b.n	800bf94 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00a      	beq.n	800bfb4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa2:	f383 8811 	msr	BASEPRI, r3
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	f3bf 8f4f 	dsb	sy
 800bfae:	61fb      	str	r3, [r7, #28]
}
 800bfb0:	bf00      	nop
 800bfb2:	e7fe      	b.n	800bfb2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfb4:	f001 f934 	bl	800d220 <xTaskGetSchedulerState>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d102      	bne.n	800bfc4 <xQueueSemaphoreTake+0x60>
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d101      	bne.n	800bfc8 <xQueueSemaphoreTake+0x64>
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e000      	b.n	800bfca <xQueueSemaphoreTake+0x66>
 800bfc8:	2300      	movs	r3, #0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10a      	bne.n	800bfe4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	61bb      	str	r3, [r7, #24]
}
 800bfe0:	bf00      	nop
 800bfe2:	e7fe      	b.n	800bfe2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800bfe4:	f001 ff0a 	bl	800ddfc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d024      	beq.n	800c03e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff6:	1e5a      	subs	r2, r3, #1
 800bff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d104      	bne.n	800c00e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800c004:	f001 fa8c 	bl	800d520 <pvTaskIncrementMutexHeldCount>
 800c008:	4602      	mov	r2, r0
 800c00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00f      	beq.n	800c036 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c018:	3310      	adds	r3, #16
 800c01a:	4618      	mov	r0, r3
 800c01c:	f000 ff06 	bl	800ce2c <xTaskRemoveFromEventList>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d007      	beq.n	800c036 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c026:	4b54      	ldr	r3, [pc, #336]	; (800c178 <xQueueSemaphoreTake+0x214>)
 800c028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c036:	f001 ff11 	bl	800de5c <vPortExitCritical>
				return pdPASS;
 800c03a:	2301      	movs	r3, #1
 800c03c:	e097      	b.n	800c16e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d111      	bne.n	800c068 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00a      	beq.n	800c060 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	617b      	str	r3, [r7, #20]
}
 800c05c:	bf00      	nop
 800c05e:	e7fe      	b.n	800c05e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c060:	f001 fefc 	bl	800de5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c064:	2300      	movs	r3, #0
 800c066:	e082      	b.n	800c16e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d106      	bne.n	800c07c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c06e:	f107 030c 	add.w	r3, r7, #12
 800c072:	4618      	mov	r0, r3
 800c074:	f000 ff3e 	bl	800cef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c078:	2301      	movs	r3, #1
 800c07a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c07c:	f001 feee 	bl	800de5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c080:	f000 fcb0 	bl	800c9e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c084:	f001 feba 	bl	800ddfc <vPortEnterCritical>
 800c088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c08e:	b25b      	sxtb	r3, r3
 800c090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c094:	d103      	bne.n	800c09e <xQueueSemaphoreTake+0x13a>
 800c096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c098:	2200      	movs	r2, #0
 800c09a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0a4:	b25b      	sxtb	r3, r3
 800c0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0aa:	d103      	bne.n	800c0b4 <xQueueSemaphoreTake+0x150>
 800c0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0b4:	f001 fed2 	bl	800de5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0b8:	463a      	mov	r2, r7
 800c0ba:	f107 030c 	add.w	r3, r7, #12
 800c0be:	4611      	mov	r1, r2
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f000 ff2d 	bl	800cf20 <xTaskCheckForTimeOut>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d132      	bne.n	800c132 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0ce:	f000 f94e 	bl	800c36e <prvIsQueueEmpty>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d026      	beq.n	800c126 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d109      	bne.n	800c0f4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c0e0:	f001 fe8c 	bl	800ddfc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800c0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f001 f8b7 	bl	800d25c <xTaskPriorityInherit>
 800c0ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c0f0:	f001 feb4 	bl	800de5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f6:	3324      	adds	r3, #36	; 0x24
 800c0f8:	683a      	ldr	r2, [r7, #0]
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 fe45 	bl	800cd8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c102:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c104:	f000 f8e1 	bl	800c2ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c108:	f000 fc7a 	bl	800ca00 <xTaskResumeAll>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f47f af68 	bne.w	800bfe4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c114:	4b18      	ldr	r3, [pc, #96]	; (800c178 <xQueueSemaphoreTake+0x214>)
 800c116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c11a:	601a      	str	r2, [r3, #0]
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	f3bf 8f6f 	isb	sy
 800c124:	e75e      	b.n	800bfe4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c128:	f000 f8cf 	bl	800c2ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c12c:	f000 fc68 	bl	800ca00 <xTaskResumeAll>
 800c130:	e758      	b.n	800bfe4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c134:	f000 f8c9 	bl	800c2ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c138:	f000 fc62 	bl	800ca00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c13c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c13e:	f000 f916 	bl	800c36e <prvIsQueueEmpty>
 800c142:	4603      	mov	r3, r0
 800c144:	2b00      	cmp	r3, #0
 800c146:	f43f af4d 	beq.w	800bfe4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d00d      	beq.n	800c16c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c150:	f001 fe54 	bl	800ddfc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c154:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c156:	f000 f811 	bl	800c17c <prvGetDisinheritPriorityAfterTimeout>
 800c15a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800c15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c162:	4618      	mov	r0, r3
 800c164:	f001 f956 	bl	800d414 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c168:	f001 fe78 	bl	800de5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c16c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3738      	adds	r7, #56	; 0x38
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	e000ed04 	.word	0xe000ed04

0800c17c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c17c:	b480      	push	{r7}
 800c17e:	b085      	sub	sp, #20
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d006      	beq.n	800c19a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c196:	60fb      	str	r3, [r7, #12]
 800c198:	e001      	b.n	800c19e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c19a:	2300      	movs	r3, #0
 800c19c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c19e:	68fb      	ldr	r3, [r7, #12]
	}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3714      	adds	r7, #20
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bc80      	pop	{r7}
 800c1a8:	4770      	bx	lr

0800c1aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b086      	sub	sp, #24
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	60f8      	str	r0, [r7, #12]
 800c1b2:	60b9      	str	r1, [r7, #8]
 800c1b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10d      	bne.n	800c1e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d14d      	bne.n	800c26c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f001 f8af 	bl	800d338 <xTaskPriorityDisinherit>
 800c1da:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	605a      	str	r2, [r3, #4]
 800c1e2:	e043      	b.n	800c26c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d119      	bne.n	800c21e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6898      	ldr	r0, [r3, #8]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	68b9      	ldr	r1, [r7, #8]
 800c1f6:	f002 fdbf 	bl	800ed78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	689a      	ldr	r2, [r3, #8]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c202:	441a      	add	r2, r3
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	689a      	ldr	r2, [r3, #8]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	429a      	cmp	r2, r3
 800c212:	d32b      	bcc.n	800c26c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	609a      	str	r2, [r3, #8]
 800c21c:	e026      	b.n	800c26c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	68d8      	ldr	r0, [r3, #12]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c226:	461a      	mov	r2, r3
 800c228:	68b9      	ldr	r1, [r7, #8]
 800c22a:	f002 fda5 	bl	800ed78 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	68da      	ldr	r2, [r3, #12]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c236:	425b      	negs	r3, r3
 800c238:	441a      	add	r2, r3
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	68da      	ldr	r2, [r3, #12]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	429a      	cmp	r2, r3
 800c248:	d207      	bcs.n	800c25a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	685a      	ldr	r2, [r3, #4]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c252:	425b      	negs	r3, r3
 800c254:	441a      	add	r2, r3
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2b02      	cmp	r3, #2
 800c25e:	d105      	bne.n	800c26c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d002      	beq.n	800c26c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	3b01      	subs	r3, #1
 800c26a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	1c5a      	adds	r2, r3, #1
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c274:	697b      	ldr	r3, [r7, #20]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3718      	adds	r7, #24
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c27e:	b580      	push	{r7, lr}
 800c280:	b082      	sub	sp, #8
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
 800c286:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d018      	beq.n	800c2c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	68da      	ldr	r2, [r3, #12]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c298:	441a      	add	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	68da      	ldr	r2, [r3, #12]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d303      	bcc.n	800c2b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	68d9      	ldr	r1, [r3, #12]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	6838      	ldr	r0, [r7, #0]
 800c2be:	f002 fd5b 	bl	800ed78 <memcpy>
	}
}
 800c2c2:	bf00      	nop
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b084      	sub	sp, #16
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c2d2:	f001 fd93 	bl	800ddfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2de:	e011      	b.n	800c304 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d012      	beq.n	800c30e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	3324      	adds	r3, #36	; 0x24
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 fd9d 	bl	800ce2c <xTaskRemoveFromEventList>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d001      	beq.n	800c2fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2f8:	f000 fe74 	bl	800cfe4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2fc:	7bfb      	ldrb	r3, [r7, #15]
 800c2fe:	3b01      	subs	r3, #1
 800c300:	b2db      	uxtb	r3, r3
 800c302:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	dce9      	bgt.n	800c2e0 <prvUnlockQueue+0x16>
 800c30c:	e000      	b.n	800c310 <prvUnlockQueue+0x46>
					break;
 800c30e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	22ff      	movs	r2, #255	; 0xff
 800c314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c318:	f001 fda0 	bl	800de5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c31c:	f001 fd6e 	bl	800ddfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c326:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c328:	e011      	b.n	800c34e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	691b      	ldr	r3, [r3, #16]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d012      	beq.n	800c358 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	3310      	adds	r3, #16
 800c336:	4618      	mov	r0, r3
 800c338:	f000 fd78 	bl	800ce2c <xTaskRemoveFromEventList>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d001      	beq.n	800c346 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c342:	f000 fe4f 	bl	800cfe4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c346:	7bbb      	ldrb	r3, [r7, #14]
 800c348:	3b01      	subs	r3, #1
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c34e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c352:	2b00      	cmp	r3, #0
 800c354:	dce9      	bgt.n	800c32a <prvUnlockQueue+0x60>
 800c356:	e000      	b.n	800c35a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c358:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	22ff      	movs	r2, #255	; 0xff
 800c35e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c362:	f001 fd7b 	bl	800de5c <vPortExitCritical>
}
 800c366:	bf00      	nop
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b084      	sub	sp, #16
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c376:	f001 fd41 	bl	800ddfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d102      	bne.n	800c388 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c382:	2301      	movs	r3, #1
 800c384:	60fb      	str	r3, [r7, #12]
 800c386:	e001      	b.n	800c38c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c388:	2300      	movs	r3, #0
 800c38a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c38c:	f001 fd66 	bl	800de5c <vPortExitCritical>

	return xReturn;
 800c390:	68fb      	ldr	r3, [r7, #12]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b084      	sub	sp, #16
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3a2:	f001 fd2b 	bl	800ddfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d102      	bne.n	800c3b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	60fb      	str	r3, [r7, #12]
 800c3b6:	e001      	b.n	800c3bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3bc:	f001 fd4e 	bl	800de5c <vPortExitCritical>

	return xReturn;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3710      	adds	r7, #16
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
	...

0800c3cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	60fb      	str	r3, [r7, #12]
 800c3da:	e014      	b.n	800c406 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c3dc:	4a0e      	ldr	r2, [pc, #56]	; (800c418 <vQueueAddToRegistry+0x4c>)
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d10b      	bne.n	800c400 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c3e8:	490b      	ldr	r1, [pc, #44]	; (800c418 <vQueueAddToRegistry+0x4c>)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	683a      	ldr	r2, [r7, #0]
 800c3ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c3f2:	4a09      	ldr	r2, [pc, #36]	; (800c418 <vQueueAddToRegistry+0x4c>)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	00db      	lsls	r3, r3, #3
 800c3f8:	4413      	add	r3, r2
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c3fe:	e006      	b.n	800c40e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	3301      	adds	r3, #1
 800c404:	60fb      	str	r3, [r7, #12]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2b07      	cmp	r3, #7
 800c40a:	d9e7      	bls.n	800c3dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c40c:	bf00      	nop
 800c40e:	bf00      	nop
 800c410:	3714      	adds	r7, #20
 800c412:	46bd      	mov	sp, r7
 800c414:	bc80      	pop	{r7}
 800c416:	4770      	bx	lr
 800c418:	20002690 	.word	0x20002690

0800c41c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b086      	sub	sp, #24
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c42c:	f001 fce6 	bl	800ddfc <vPortEnterCritical>
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c436:	b25b      	sxtb	r3, r3
 800c438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c43c:	d103      	bne.n	800c446 <vQueueWaitForMessageRestricted+0x2a>
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	2200      	movs	r2, #0
 800c442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c44c:	b25b      	sxtb	r3, r3
 800c44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c452:	d103      	bne.n	800c45c <vQueueWaitForMessageRestricted+0x40>
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c45c:	f001 fcfe 	bl	800de5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c464:	2b00      	cmp	r3, #0
 800c466:	d106      	bne.n	800c476 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	3324      	adds	r3, #36	; 0x24
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	68b9      	ldr	r1, [r7, #8]
 800c470:	4618      	mov	r0, r3
 800c472:	f000 fcaf 	bl	800cdd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c476:	6978      	ldr	r0, [r7, #20]
 800c478:	f7ff ff27 	bl	800c2ca <prvUnlockQueue>
	}
 800c47c:	bf00      	nop
 800c47e:	3718      	adds	r7, #24
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c484:	b580      	push	{r7, lr}
 800c486:	b08e      	sub	sp, #56	; 0x38
 800c488:	af04      	add	r7, sp, #16
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	607a      	str	r2, [r7, #4]
 800c490:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c494:	2b00      	cmp	r3, #0
 800c496:	d10a      	bne.n	800c4ae <xTaskCreateStatic+0x2a>
	__asm volatile
 800c498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49c:	f383 8811 	msr	BASEPRI, r3
 800c4a0:	f3bf 8f6f 	isb	sy
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	623b      	str	r3, [r7, #32]
}
 800c4aa:	bf00      	nop
 800c4ac:	e7fe      	b.n	800c4ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d10a      	bne.n	800c4ca <xTaskCreateStatic+0x46>
	__asm volatile
 800c4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	61fb      	str	r3, [r7, #28]
}
 800c4c6:	bf00      	nop
 800c4c8:	e7fe      	b.n	800c4c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c4ca:	235c      	movs	r3, #92	; 0x5c
 800c4cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	2b5c      	cmp	r3, #92	; 0x5c
 800c4d2:	d00a      	beq.n	800c4ea <xTaskCreateStatic+0x66>
	__asm volatile
 800c4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	61bb      	str	r3, [r7, #24]
}
 800c4e6:	bf00      	nop
 800c4e8:	e7fe      	b.n	800c4e8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d01e      	beq.n	800c52e <xTaskCreateStatic+0xaa>
 800c4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d01b      	beq.n	800c52e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c502:	2202      	movs	r2, #2
 800c504:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c508:	2300      	movs	r3, #0
 800c50a:	9303      	str	r3, [sp, #12]
 800c50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50e:	9302      	str	r3, [sp, #8]
 800c510:	f107 0314 	add.w	r3, r7, #20
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c518:	9300      	str	r3, [sp, #0]
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	68b9      	ldr	r1, [r7, #8]
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f000 f850 	bl	800c5c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c526:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c528:	f000 f8d4 	bl	800c6d4 <prvAddNewTaskToReadyList>
 800c52c:	e001      	b.n	800c532 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800c52e:	2300      	movs	r3, #0
 800c530:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c532:	697b      	ldr	r3, [r7, #20]
	}
 800c534:	4618      	mov	r0, r3
 800c536:	3728      	adds	r7, #40	; 0x28
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b08c      	sub	sp, #48	; 0x30
 800c540:	af04      	add	r7, sp, #16
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	603b      	str	r3, [r7, #0]
 800c548:	4613      	mov	r3, r2
 800c54a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c54c:	88fb      	ldrh	r3, [r7, #6]
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	4618      	mov	r0, r3
 800c552:	f001 fd53 	bl	800dffc <pvPortMalloc>
 800c556:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00e      	beq.n	800c57c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800c55e:	205c      	movs	r0, #92	; 0x5c
 800c560:	f001 fd4c 	bl	800dffc <pvPortMalloc>
 800c564:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d003      	beq.n	800c574 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	697a      	ldr	r2, [r7, #20]
 800c570:	631a      	str	r2, [r3, #48]	; 0x30
 800c572:	e005      	b.n	800c580 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c574:	6978      	ldr	r0, [r7, #20]
 800c576:	f001 fe05 	bl	800e184 <vPortFree>
 800c57a:	e001      	b.n	800c580 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c57c:	2300      	movs	r3, #0
 800c57e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d017      	beq.n	800c5b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	2200      	movs	r2, #0
 800c58a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c58e:	88fa      	ldrh	r2, [r7, #6]
 800c590:	2300      	movs	r3, #0
 800c592:	9303      	str	r3, [sp, #12]
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	9302      	str	r3, [sp, #8]
 800c598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	68b9      	ldr	r1, [r7, #8]
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f000 f80e 	bl	800c5c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c5aa:	69f8      	ldr	r0, [r7, #28]
 800c5ac:	f000 f892 	bl	800c6d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	61bb      	str	r3, [r7, #24]
 800c5b4:	e002      	b.n	800c5bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c5bc:	69bb      	ldr	r3, [r7, #24]
	}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3720      	adds	r7, #32
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b088      	sub	sp, #32
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	60f8      	str	r0, [r7, #12]
 800c5ce:	60b9      	str	r1, [r7, #8]
 800c5d0:	607a      	str	r2, [r7, #4]
 800c5d2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	461a      	mov	r2, r3
 800c5de:	21a5      	movs	r1, #165	; 0xa5
 800c5e0:	f002 fbf2 	bl	800edc8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c5ee:	3b01      	subs	r3, #1
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	4413      	add	r3, r2
 800c5f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	f023 0307 	bic.w	r3, r3, #7
 800c5fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	f003 0307 	and.w	r3, r3, #7
 800c604:	2b00      	cmp	r3, #0
 800c606:	d00a      	beq.n	800c61e <prvInitialiseNewTask+0x58>
	__asm volatile
 800c608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60c:	f383 8811 	msr	BASEPRI, r3
 800c610:	f3bf 8f6f 	isb	sy
 800c614:	f3bf 8f4f 	dsb	sy
 800c618:	617b      	str	r3, [r7, #20]
}
 800c61a:	bf00      	nop
 800c61c:	e7fe      	b.n	800c61c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c61e:	2300      	movs	r3, #0
 800c620:	61fb      	str	r3, [r7, #28]
 800c622:	e012      	b.n	800c64a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	69fb      	ldr	r3, [r7, #28]
 800c628:	4413      	add	r3, r2
 800c62a:	7819      	ldrb	r1, [r3, #0]
 800c62c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	4413      	add	r3, r2
 800c632:	3334      	adds	r3, #52	; 0x34
 800c634:	460a      	mov	r2, r1
 800c636:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	4413      	add	r3, r2
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d006      	beq.n	800c652 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	3301      	adds	r3, #1
 800c648:	61fb      	str	r3, [r7, #28]
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	2b0f      	cmp	r3, #15
 800c64e:	d9e9      	bls.n	800c624 <prvInitialiseNewTask+0x5e>
 800c650:	e000      	b.n	800c654 <prvInitialiseNewTask+0x8e>
		{
			break;
 800c652:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c656:	2200      	movs	r2, #0
 800c658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65e:	2b37      	cmp	r3, #55	; 0x37
 800c660:	d901      	bls.n	800c666 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c662:	2337      	movs	r3, #55	; 0x37
 800c664:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c66a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c670:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c674:	2200      	movs	r2, #0
 800c676:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67a:	3304      	adds	r3, #4
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fe ffdc 	bl	800b63a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c684:	3318      	adds	r3, #24
 800c686:	4618      	mov	r0, r3
 800c688:	f7fe ffd7 	bl	800b63a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c690:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c694:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c6b0:	683a      	ldr	r2, [r7, #0]
 800c6b2:	68f9      	ldr	r1, [r7, #12]
 800c6b4:	69b8      	ldr	r0, [r7, #24]
 800c6b6:	f001 faad 	bl	800dc14 <pxPortInitialiseStack>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800c6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d002      	beq.n	800c6cc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6cc:	bf00      	nop
 800c6ce:	3720      	adds	r7, #32
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c6dc:	f001 fb8e 	bl	800ddfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c6e0:	4b2d      	ldr	r3, [pc, #180]	; (800c798 <prvAddNewTaskToReadyList+0xc4>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	4a2c      	ldr	r2, [pc, #176]	; (800c798 <prvAddNewTaskToReadyList+0xc4>)
 800c6e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c6ea:	4b2c      	ldr	r3, [pc, #176]	; (800c79c <prvAddNewTaskToReadyList+0xc8>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d109      	bne.n	800c706 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c6f2:	4a2a      	ldr	r2, [pc, #168]	; (800c79c <prvAddNewTaskToReadyList+0xc8>)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c6f8:	4b27      	ldr	r3, [pc, #156]	; (800c798 <prvAddNewTaskToReadyList+0xc4>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d110      	bne.n	800c722 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c700:	f000 fc94 	bl	800d02c <prvInitialiseTaskLists>
 800c704:	e00d      	b.n	800c722 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c706:	4b26      	ldr	r3, [pc, #152]	; (800c7a0 <prvAddNewTaskToReadyList+0xcc>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d109      	bne.n	800c722 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c70e:	4b23      	ldr	r3, [pc, #140]	; (800c79c <prvAddNewTaskToReadyList+0xc8>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c718:	429a      	cmp	r2, r3
 800c71a:	d802      	bhi.n	800c722 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c71c:	4a1f      	ldr	r2, [pc, #124]	; (800c79c <prvAddNewTaskToReadyList+0xc8>)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c722:	4b20      	ldr	r3, [pc, #128]	; (800c7a4 <prvAddNewTaskToReadyList+0xd0>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	3301      	adds	r3, #1
 800c728:	4a1e      	ldr	r2, [pc, #120]	; (800c7a4 <prvAddNewTaskToReadyList+0xd0>)
 800c72a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c72c:	4b1d      	ldr	r3, [pc, #116]	; (800c7a4 <prvAddNewTaskToReadyList+0xd0>)
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c738:	4b1b      	ldr	r3, [pc, #108]	; (800c7a8 <prvAddNewTaskToReadyList+0xd4>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d903      	bls.n	800c748 <prvAddNewTaskToReadyList+0x74>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c744:	4a18      	ldr	r2, [pc, #96]	; (800c7a8 <prvAddNewTaskToReadyList+0xd4>)
 800c746:	6013      	str	r3, [r2, #0]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c74c:	4613      	mov	r3, r2
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	4413      	add	r3, r2
 800c752:	009b      	lsls	r3, r3, #2
 800c754:	4a15      	ldr	r2, [pc, #84]	; (800c7ac <prvAddNewTaskToReadyList+0xd8>)
 800c756:	441a      	add	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	3304      	adds	r3, #4
 800c75c:	4619      	mov	r1, r3
 800c75e:	4610      	mov	r0, r2
 800c760:	f7fe ff77 	bl	800b652 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c764:	f001 fb7a 	bl	800de5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c768:	4b0d      	ldr	r3, [pc, #52]	; (800c7a0 <prvAddNewTaskToReadyList+0xcc>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00e      	beq.n	800c78e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c770:	4b0a      	ldr	r3, [pc, #40]	; (800c79c <prvAddNewTaskToReadyList+0xc8>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d207      	bcs.n	800c78e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c77e:	4b0c      	ldr	r3, [pc, #48]	; (800c7b0 <prvAddNewTaskToReadyList+0xdc>)
 800c780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c784:	601a      	str	r2, [r3, #0]
 800c786:	f3bf 8f4f 	dsb	sy
 800c78a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c78e:	bf00      	nop
 800c790:	3708      	adds	r7, #8
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	20000d44 	.word	0x20000d44
 800c79c:	20000870 	.word	0x20000870
 800c7a0:	20000d50 	.word	0x20000d50
 800c7a4:	20000d60 	.word	0x20000d60
 800c7a8:	20000d4c 	.word	0x20000d4c
 800c7ac:	20000874 	.word	0x20000874
 800c7b0:	e000ed04 	.word	0xe000ed04

0800c7b4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b08a      	sub	sp, #40	; 0x28
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10a      	bne.n	800c7de <vTaskDelayUntil+0x2a>
	__asm volatile
 800c7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7cc:	f383 8811 	msr	BASEPRI, r3
 800c7d0:	f3bf 8f6f 	isb	sy
 800c7d4:	f3bf 8f4f 	dsb	sy
 800c7d8:	617b      	str	r3, [r7, #20]
}
 800c7da:	bf00      	nop
 800c7dc:	e7fe      	b.n	800c7dc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10a      	bne.n	800c7fa <vTaskDelayUntil+0x46>
	__asm volatile
 800c7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	613b      	str	r3, [r7, #16]
}
 800c7f6:	bf00      	nop
 800c7f8:	e7fe      	b.n	800c7f8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c7fa:	4b2a      	ldr	r3, [pc, #168]	; (800c8a4 <vTaskDelayUntil+0xf0>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d00a      	beq.n	800c818 <vTaskDelayUntil+0x64>
	__asm volatile
 800c802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c806:	f383 8811 	msr	BASEPRI, r3
 800c80a:	f3bf 8f6f 	isb	sy
 800c80e:	f3bf 8f4f 	dsb	sy
 800c812:	60fb      	str	r3, [r7, #12]
}
 800c814:	bf00      	nop
 800c816:	e7fe      	b.n	800c816 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c818:	f000 f8e4 	bl	800c9e4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c81c:	4b22      	ldr	r3, [pc, #136]	; (800c8a8 <vTaskDelayUntil+0xf4>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	683a      	ldr	r2, [r7, #0]
 800c828:	4413      	add	r3, r2
 800c82a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	6a3a      	ldr	r2, [r7, #32]
 800c832:	429a      	cmp	r2, r3
 800c834:	d20b      	bcs.n	800c84e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	69fa      	ldr	r2, [r7, #28]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d211      	bcs.n	800c864 <vTaskDelayUntil+0xb0>
 800c840:	69fa      	ldr	r2, [r7, #28]
 800c842:	6a3b      	ldr	r3, [r7, #32]
 800c844:	429a      	cmp	r2, r3
 800c846:	d90d      	bls.n	800c864 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c848:	2301      	movs	r3, #1
 800c84a:	627b      	str	r3, [r7, #36]	; 0x24
 800c84c:	e00a      	b.n	800c864 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	69fa      	ldr	r2, [r7, #28]
 800c854:	429a      	cmp	r2, r3
 800c856:	d303      	bcc.n	800c860 <vTaskDelayUntil+0xac>
 800c858:	69fa      	ldr	r2, [r7, #28]
 800c85a:	6a3b      	ldr	r3, [r7, #32]
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d901      	bls.n	800c864 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c860:	2301      	movs	r3, #1
 800c862:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	69fa      	ldr	r2, [r7, #28]
 800c868:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d006      	beq.n	800c87e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c870:	69fa      	ldr	r2, [r7, #28]
 800c872:	6a3b      	ldr	r3, [r7, #32]
 800c874:	1ad3      	subs	r3, r2, r3
 800c876:	2100      	movs	r1, #0
 800c878:	4618      	mov	r0, r3
 800c87a:	f000 fe65 	bl	800d548 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c87e:	f000 f8bf 	bl	800ca00 <xTaskResumeAll>
 800c882:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c884:	69bb      	ldr	r3, [r7, #24]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d107      	bne.n	800c89a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c88a:	4b08      	ldr	r3, [pc, #32]	; (800c8ac <vTaskDelayUntil+0xf8>)
 800c88c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c890:	601a      	str	r2, [r3, #0]
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c89a:	bf00      	nop
 800c89c:	3728      	adds	r7, #40	; 0x28
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	20000d6c 	.word	0x20000d6c
 800c8a8:	20000d48 	.word	0x20000d48
 800c8ac:	e000ed04 	.word	0xe000ed04

0800c8b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d017      	beq.n	800c8f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c8c2:	4b13      	ldr	r3, [pc, #76]	; (800c910 <vTaskDelay+0x60>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00a      	beq.n	800c8e0 <vTaskDelay+0x30>
	__asm volatile
 800c8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	60bb      	str	r3, [r7, #8]
}
 800c8dc:	bf00      	nop
 800c8de:	e7fe      	b.n	800c8de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c8e0:	f000 f880 	bl	800c9e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 fe2e 	bl	800d548 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c8ec:	f000 f888 	bl	800ca00 <xTaskResumeAll>
 800c8f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d107      	bne.n	800c908 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c8f8:	4b06      	ldr	r3, [pc, #24]	; (800c914 <vTaskDelay+0x64>)
 800c8fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8fe:	601a      	str	r2, [r3, #0]
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c908:	bf00      	nop
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	20000d6c 	.word	0x20000d6c
 800c914:	e000ed04 	.word	0xe000ed04

0800c918 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b08a      	sub	sp, #40	; 0x28
 800c91c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c91e:	2300      	movs	r3, #0
 800c920:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c922:	2300      	movs	r3, #0
 800c924:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c926:	463a      	mov	r2, r7
 800c928:	1d39      	adds	r1, r7, #4
 800c92a:	f107 0308 	add.w	r3, r7, #8
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fe fe32 	bl	800b598 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c934:	6839      	ldr	r1, [r7, #0]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	9202      	str	r2, [sp, #8]
 800c93c:	9301      	str	r3, [sp, #4]
 800c93e:	2300      	movs	r3, #0
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	2300      	movs	r3, #0
 800c944:	460a      	mov	r2, r1
 800c946:	4921      	ldr	r1, [pc, #132]	; (800c9cc <vTaskStartScheduler+0xb4>)
 800c948:	4821      	ldr	r0, [pc, #132]	; (800c9d0 <vTaskStartScheduler+0xb8>)
 800c94a:	f7ff fd9b 	bl	800c484 <xTaskCreateStatic>
 800c94e:	4603      	mov	r3, r0
 800c950:	4a20      	ldr	r2, [pc, #128]	; (800c9d4 <vTaskStartScheduler+0xbc>)
 800c952:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c954:	4b1f      	ldr	r3, [pc, #124]	; (800c9d4 <vTaskStartScheduler+0xbc>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d002      	beq.n	800c962 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c95c:	2301      	movs	r3, #1
 800c95e:	617b      	str	r3, [r7, #20]
 800c960:	e001      	b.n	800c966 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c962:	2300      	movs	r3, #0
 800c964:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d102      	bne.n	800c972 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c96c:	f000 fe40 	bl	800d5f0 <xTimerCreateTimerTask>
 800c970:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	2b01      	cmp	r3, #1
 800c976:	d116      	bne.n	800c9a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97c:	f383 8811 	msr	BASEPRI, r3
 800c980:	f3bf 8f6f 	isb	sy
 800c984:	f3bf 8f4f 	dsb	sy
 800c988:	613b      	str	r3, [r7, #16]
}
 800c98a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c98c:	4b12      	ldr	r3, [pc, #72]	; (800c9d8 <vTaskStartScheduler+0xc0>)
 800c98e:	f04f 32ff 	mov.w	r2, #4294967295
 800c992:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c994:	4b11      	ldr	r3, [pc, #68]	; (800c9dc <vTaskStartScheduler+0xc4>)
 800c996:	2201      	movs	r2, #1
 800c998:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800c99a:	4b11      	ldr	r3, [pc, #68]	; (800c9e0 <vTaskStartScheduler+0xc8>)
 800c99c:	2200      	movs	r2, #0
 800c99e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c9a0:	f001 f9ba 	bl	800dd18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c9a4:	e00e      	b.n	800c9c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ac:	d10a      	bne.n	800c9c4 <vTaskStartScheduler+0xac>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	60fb      	str	r3, [r7, #12]
}
 800c9c0:	bf00      	nop
 800c9c2:	e7fe      	b.n	800c9c2 <vTaskStartScheduler+0xaa>
}
 800c9c4:	bf00      	nop
 800c9c6:	3718      	adds	r7, #24
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	0800f020 	.word	0x0800f020
 800c9d0:	0800cffd 	.word	0x0800cffd
 800c9d4:	20000d68 	.word	0x20000d68
 800c9d8:	20000d64 	.word	0x20000d64
 800c9dc:	20000d50 	.word	0x20000d50
 800c9e0:	20000d48 	.word	0x20000d48

0800c9e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c9e8:	4b04      	ldr	r3, [pc, #16]	; (800c9fc <vTaskSuspendAll+0x18>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	4a03      	ldr	r2, [pc, #12]	; (800c9fc <vTaskSuspendAll+0x18>)
 800c9f0:	6013      	str	r3, [r2, #0]
}
 800c9f2:	bf00      	nop
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bc80      	pop	{r7}
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	20000d6c 	.word	0x20000d6c

0800ca00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca06:	2300      	movs	r3, #0
 800ca08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca0e:	4b42      	ldr	r3, [pc, #264]	; (800cb18 <xTaskResumeAll+0x118>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d10a      	bne.n	800ca2c <xTaskResumeAll+0x2c>
	__asm volatile
 800ca16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1a:	f383 8811 	msr	BASEPRI, r3
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f3bf 8f4f 	dsb	sy
 800ca26:	603b      	str	r3, [r7, #0]
}
 800ca28:	bf00      	nop
 800ca2a:	e7fe      	b.n	800ca2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca2c:	f001 f9e6 	bl	800ddfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca30:	4b39      	ldr	r3, [pc, #228]	; (800cb18 <xTaskResumeAll+0x118>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	3b01      	subs	r3, #1
 800ca36:	4a38      	ldr	r2, [pc, #224]	; (800cb18 <xTaskResumeAll+0x118>)
 800ca38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca3a:	4b37      	ldr	r3, [pc, #220]	; (800cb18 <xTaskResumeAll+0x118>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d162      	bne.n	800cb08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca42:	4b36      	ldr	r3, [pc, #216]	; (800cb1c <xTaskResumeAll+0x11c>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d05e      	beq.n	800cb08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca4a:	e02f      	b.n	800caac <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ca4c:	4b34      	ldr	r3, [pc, #208]	; (800cb20 <xTaskResumeAll+0x120>)
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	3318      	adds	r3, #24
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fe fe55 	bl	800b708 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3304      	adds	r3, #4
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fe fe50 	bl	800b708 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6c:	4b2d      	ldr	r3, [pc, #180]	; (800cb24 <xTaskResumeAll+0x124>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d903      	bls.n	800ca7c <xTaskResumeAll+0x7c>
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca78:	4a2a      	ldr	r2, [pc, #168]	; (800cb24 <xTaskResumeAll+0x124>)
 800ca7a:	6013      	str	r3, [r2, #0]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca80:	4613      	mov	r3, r2
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	4413      	add	r3, r2
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	4a27      	ldr	r2, [pc, #156]	; (800cb28 <xTaskResumeAll+0x128>)
 800ca8a:	441a      	add	r2, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	3304      	adds	r3, #4
 800ca90:	4619      	mov	r1, r3
 800ca92:	4610      	mov	r0, r2
 800ca94:	f7fe fddd 	bl	800b652 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca9c:	4b23      	ldr	r3, [pc, #140]	; (800cb2c <xTaskResumeAll+0x12c>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d302      	bcc.n	800caac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800caa6:	4b22      	ldr	r3, [pc, #136]	; (800cb30 <xTaskResumeAll+0x130>)
 800caa8:	2201      	movs	r2, #1
 800caaa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800caac:	4b1c      	ldr	r3, [pc, #112]	; (800cb20 <xTaskResumeAll+0x120>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1cb      	bne.n	800ca4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d001      	beq.n	800cabe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800caba:	f000 fb8d 	bl	800d1d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cabe:	4b1d      	ldr	r3, [pc, #116]	; (800cb34 <xTaskResumeAll+0x134>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d010      	beq.n	800caec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800caca:	f000 f845 	bl	800cb58 <xTaskIncrementTick>
 800cace:	4603      	mov	r3, r0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d002      	beq.n	800cada <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cad4:	4b16      	ldr	r3, [pc, #88]	; (800cb30 <xTaskResumeAll+0x130>)
 800cad6:	2201      	movs	r2, #1
 800cad8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	3b01      	subs	r3, #1
 800cade:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d1f1      	bne.n	800caca <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800cae6:	4b13      	ldr	r3, [pc, #76]	; (800cb34 <xTaskResumeAll+0x134>)
 800cae8:	2200      	movs	r2, #0
 800caea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800caec:	4b10      	ldr	r3, [pc, #64]	; (800cb30 <xTaskResumeAll+0x130>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d009      	beq.n	800cb08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800caf4:	2301      	movs	r3, #1
 800caf6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800caf8:	4b0f      	ldr	r3, [pc, #60]	; (800cb38 <xTaskResumeAll+0x138>)
 800cafa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cafe:	601a      	str	r2, [r3, #0]
 800cb00:	f3bf 8f4f 	dsb	sy
 800cb04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb08:	f001 f9a8 	bl	800de5c <vPortExitCritical>

	return xAlreadyYielded;
 800cb0c:	68bb      	ldr	r3, [r7, #8]
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	20000d6c 	.word	0x20000d6c
 800cb1c:	20000d44 	.word	0x20000d44
 800cb20:	20000d04 	.word	0x20000d04
 800cb24:	20000d4c 	.word	0x20000d4c
 800cb28:	20000874 	.word	0x20000874
 800cb2c:	20000870 	.word	0x20000870
 800cb30:	20000d58 	.word	0x20000d58
 800cb34:	20000d54 	.word	0x20000d54
 800cb38:	e000ed04 	.word	0xe000ed04

0800cb3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cb42:	4b04      	ldr	r3, [pc, #16]	; (800cb54 <xTaskGetTickCount+0x18>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cb48:	687b      	ldr	r3, [r7, #4]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	370c      	adds	r7, #12
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bc80      	pop	{r7}
 800cb52:	4770      	bx	lr
 800cb54:	20000d48 	.word	0x20000d48

0800cb58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b086      	sub	sp, #24
 800cb5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb62:	4b51      	ldr	r3, [pc, #324]	; (800cca8 <xTaskIncrementTick+0x150>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f040 808e 	bne.w	800cc88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb6c:	4b4f      	ldr	r3, [pc, #316]	; (800ccac <xTaskIncrementTick+0x154>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	3301      	adds	r3, #1
 800cb72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb74:	4a4d      	ldr	r2, [pc, #308]	; (800ccac <xTaskIncrementTick+0x154>)
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d120      	bne.n	800cbc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb80:	4b4b      	ldr	r3, [pc, #300]	; (800ccb0 <xTaskIncrementTick+0x158>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00a      	beq.n	800cba0 <xTaskIncrementTick+0x48>
	__asm volatile
 800cb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	603b      	str	r3, [r7, #0]
}
 800cb9c:	bf00      	nop
 800cb9e:	e7fe      	b.n	800cb9e <xTaskIncrementTick+0x46>
 800cba0:	4b43      	ldr	r3, [pc, #268]	; (800ccb0 <xTaskIncrementTick+0x158>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	60fb      	str	r3, [r7, #12]
 800cba6:	4b43      	ldr	r3, [pc, #268]	; (800ccb4 <xTaskIncrementTick+0x15c>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a41      	ldr	r2, [pc, #260]	; (800ccb0 <xTaskIncrementTick+0x158>)
 800cbac:	6013      	str	r3, [r2, #0]
 800cbae:	4a41      	ldr	r2, [pc, #260]	; (800ccb4 <xTaskIncrementTick+0x15c>)
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6013      	str	r3, [r2, #0]
 800cbb4:	4b40      	ldr	r3, [pc, #256]	; (800ccb8 <xTaskIncrementTick+0x160>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	4a3f      	ldr	r2, [pc, #252]	; (800ccb8 <xTaskIncrementTick+0x160>)
 800cbbc:	6013      	str	r3, [r2, #0]
 800cbbe:	f000 fb0b 	bl	800d1d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cbc2:	4b3e      	ldr	r3, [pc, #248]	; (800ccbc <xTaskIncrementTick+0x164>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	693a      	ldr	r2, [r7, #16]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d34e      	bcc.n	800cc6a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbcc:	4b38      	ldr	r3, [pc, #224]	; (800ccb0 <xTaskIncrementTick+0x158>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d101      	bne.n	800cbda <xTaskIncrementTick+0x82>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e000      	b.n	800cbdc <xTaskIncrementTick+0x84>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d004      	beq.n	800cbea <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbe0:	4b36      	ldr	r3, [pc, #216]	; (800ccbc <xTaskIncrementTick+0x164>)
 800cbe2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe6:	601a      	str	r2, [r3, #0]
					break;
 800cbe8:	e03f      	b.n	800cc6a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800cbea:	4b31      	ldr	r3, [pc, #196]	; (800ccb0 <xTaskIncrementTick+0x158>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	68db      	ldr	r3, [r3, #12]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cbfa:	693a      	ldr	r2, [r7, #16]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d203      	bcs.n	800cc0a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc02:	4a2e      	ldr	r2, [pc, #184]	; (800ccbc <xTaskIncrementTick+0x164>)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6013      	str	r3, [r2, #0]
						break;
 800cc08:	e02f      	b.n	800cc6a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	3304      	adds	r3, #4
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7fe fd7a 	bl	800b708 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d004      	beq.n	800cc26 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	3318      	adds	r3, #24
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fe fd71 	bl	800b708 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc2a:	4b25      	ldr	r3, [pc, #148]	; (800ccc0 <xTaskIncrementTick+0x168>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d903      	bls.n	800cc3a <xTaskIncrementTick+0xe2>
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc36:	4a22      	ldr	r2, [pc, #136]	; (800ccc0 <xTaskIncrementTick+0x168>)
 800cc38:	6013      	str	r3, [r2, #0]
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc3e:	4613      	mov	r3, r2
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	4413      	add	r3, r2
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	4a1f      	ldr	r2, [pc, #124]	; (800ccc4 <xTaskIncrementTick+0x16c>)
 800cc48:	441a      	add	r2, r3
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	3304      	adds	r3, #4
 800cc4e:	4619      	mov	r1, r3
 800cc50:	4610      	mov	r0, r2
 800cc52:	f7fe fcfe 	bl	800b652 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc5a:	4b1b      	ldr	r3, [pc, #108]	; (800ccc8 <xTaskIncrementTick+0x170>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d3b3      	bcc.n	800cbcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cc64:	2301      	movs	r3, #1
 800cc66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc68:	e7b0      	b.n	800cbcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc6a:	4b17      	ldr	r3, [pc, #92]	; (800ccc8 <xTaskIncrementTick+0x170>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc70:	4914      	ldr	r1, [pc, #80]	; (800ccc4 <xTaskIncrementTick+0x16c>)
 800cc72:	4613      	mov	r3, r2
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	4413      	add	r3, r2
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	440b      	add	r3, r1
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d907      	bls.n	800cc92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cc82:	2301      	movs	r3, #1
 800cc84:	617b      	str	r3, [r7, #20]
 800cc86:	e004      	b.n	800cc92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cc88:	4b10      	ldr	r3, [pc, #64]	; (800cccc <xTaskIncrementTick+0x174>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	4a0f      	ldr	r2, [pc, #60]	; (800cccc <xTaskIncrementTick+0x174>)
 800cc90:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cc92:	4b0f      	ldr	r3, [pc, #60]	; (800ccd0 <xTaskIncrementTick+0x178>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d001      	beq.n	800cc9e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cc9e:	697b      	ldr	r3, [r7, #20]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3718      	adds	r7, #24
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	20000d6c 	.word	0x20000d6c
 800ccac:	20000d48 	.word	0x20000d48
 800ccb0:	20000cfc 	.word	0x20000cfc
 800ccb4:	20000d00 	.word	0x20000d00
 800ccb8:	20000d5c 	.word	0x20000d5c
 800ccbc:	20000d64 	.word	0x20000d64
 800ccc0:	20000d4c 	.word	0x20000d4c
 800ccc4:	20000874 	.word	0x20000874
 800ccc8:	20000870 	.word	0x20000870
 800cccc:	20000d54 	.word	0x20000d54
 800ccd0:	20000d58 	.word	0x20000d58

0800ccd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b085      	sub	sp, #20
 800ccd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ccda:	4b27      	ldr	r3, [pc, #156]	; (800cd78 <vTaskSwitchContext+0xa4>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d003      	beq.n	800ccea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cce2:	4b26      	ldr	r3, [pc, #152]	; (800cd7c <vTaskSwitchContext+0xa8>)
 800cce4:	2201      	movs	r2, #1
 800cce6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cce8:	e041      	b.n	800cd6e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ccea:	4b24      	ldr	r3, [pc, #144]	; (800cd7c <vTaskSwitchContext+0xa8>)
 800ccec:	2200      	movs	r2, #0
 800ccee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ccf0:	4b23      	ldr	r3, [pc, #140]	; (800cd80 <vTaskSwitchContext+0xac>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	60fb      	str	r3, [r7, #12]
 800ccf6:	e010      	b.n	800cd1a <vTaskSwitchContext+0x46>
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d10a      	bne.n	800cd14 <vTaskSwitchContext+0x40>
	__asm volatile
 800ccfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd02:	f383 8811 	msr	BASEPRI, r3
 800cd06:	f3bf 8f6f 	isb	sy
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	607b      	str	r3, [r7, #4]
}
 800cd10:	bf00      	nop
 800cd12:	e7fe      	b.n	800cd12 <vTaskSwitchContext+0x3e>
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	3b01      	subs	r3, #1
 800cd18:	60fb      	str	r3, [r7, #12]
 800cd1a:	491a      	ldr	r1, [pc, #104]	; (800cd84 <vTaskSwitchContext+0xb0>)
 800cd1c:	68fa      	ldr	r2, [r7, #12]
 800cd1e:	4613      	mov	r3, r2
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	4413      	add	r3, r2
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	440b      	add	r3, r1
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d0e4      	beq.n	800ccf8 <vTaskSwitchContext+0x24>
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	4613      	mov	r3, r2
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	4413      	add	r3, r2
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	4a12      	ldr	r2, [pc, #72]	; (800cd84 <vTaskSwitchContext+0xb0>)
 800cd3a:	4413      	add	r3, r2
 800cd3c:	60bb      	str	r3, [r7, #8]
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	685a      	ldr	r2, [r3, #4]
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	605a      	str	r2, [r3, #4]
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	685a      	ldr	r2, [r3, #4]
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	3308      	adds	r3, #8
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d104      	bne.n	800cd5e <vTaskSwitchContext+0x8a>
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	685a      	ldr	r2, [r3, #4]
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	605a      	str	r2, [r3, #4]
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	4a08      	ldr	r2, [pc, #32]	; (800cd88 <vTaskSwitchContext+0xb4>)
 800cd66:	6013      	str	r3, [r2, #0]
 800cd68:	4a05      	ldr	r2, [pc, #20]	; (800cd80 <vTaskSwitchContext+0xac>)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6013      	str	r3, [r2, #0]
}
 800cd6e:	bf00      	nop
 800cd70:	3714      	adds	r7, #20
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bc80      	pop	{r7}
 800cd76:	4770      	bx	lr
 800cd78:	20000d6c 	.word	0x20000d6c
 800cd7c:	20000d58 	.word	0x20000d58
 800cd80:	20000d4c 	.word	0x20000d4c
 800cd84:	20000874 	.word	0x20000874
 800cd88:	20000870 	.word	0x20000870

0800cd8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10a      	bne.n	800cdb2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda0:	f383 8811 	msr	BASEPRI, r3
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	60fb      	str	r3, [r7, #12]
}
 800cdae:	bf00      	nop
 800cdb0:	e7fe      	b.n	800cdb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdb2:	4b07      	ldr	r3, [pc, #28]	; (800cdd0 <vTaskPlaceOnEventList+0x44>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	3318      	adds	r3, #24
 800cdb8:	4619      	mov	r1, r3
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7fe fc6c 	bl	800b698 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cdc0:	2101      	movs	r1, #1
 800cdc2:	6838      	ldr	r0, [r7, #0]
 800cdc4:	f000 fbc0 	bl	800d548 <prvAddCurrentTaskToDelayedList>
}
 800cdc8:	bf00      	nop
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	20000870 	.word	0x20000870

0800cdd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b086      	sub	sp, #24
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10a      	bne.n	800cdfc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdea:	f383 8811 	msr	BASEPRI, r3
 800cdee:	f3bf 8f6f 	isb	sy
 800cdf2:	f3bf 8f4f 	dsb	sy
 800cdf6:	617b      	str	r3, [r7, #20]
}
 800cdf8:	bf00      	nop
 800cdfa:	e7fe      	b.n	800cdfa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdfc:	4b0a      	ldr	r3, [pc, #40]	; (800ce28 <vTaskPlaceOnEventListRestricted+0x54>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	3318      	adds	r3, #24
 800ce02:	4619      	mov	r1, r3
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f7fe fc24 	bl	800b652 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d002      	beq.n	800ce16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ce10:	f04f 33ff 	mov.w	r3, #4294967295
 800ce14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ce16:	6879      	ldr	r1, [r7, #4]
 800ce18:	68b8      	ldr	r0, [r7, #8]
 800ce1a:	f000 fb95 	bl	800d548 <prvAddCurrentTaskToDelayedList>
	}
 800ce1e:	bf00      	nop
 800ce20:	3718      	adds	r7, #24
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	20000870 	.word	0x20000870

0800ce2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b086      	sub	sp, #24
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	68db      	ldr	r3, [r3, #12]
 800ce38:	68db      	ldr	r3, [r3, #12]
 800ce3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d10a      	bne.n	800ce58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ce42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce46:	f383 8811 	msr	BASEPRI, r3
 800ce4a:	f3bf 8f6f 	isb	sy
 800ce4e:	f3bf 8f4f 	dsb	sy
 800ce52:	60fb      	str	r3, [r7, #12]
}
 800ce54:	bf00      	nop
 800ce56:	e7fe      	b.n	800ce56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	3318      	adds	r3, #24
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7fe fc53 	bl	800b708 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce62:	4b1e      	ldr	r3, [pc, #120]	; (800cedc <xTaskRemoveFromEventList+0xb0>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d11d      	bne.n	800cea6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	3304      	adds	r3, #4
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fe fc4a 	bl	800b708 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce78:	4b19      	ldr	r3, [pc, #100]	; (800cee0 <xTaskRemoveFromEventList+0xb4>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d903      	bls.n	800ce88 <xTaskRemoveFromEventList+0x5c>
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce84:	4a16      	ldr	r2, [pc, #88]	; (800cee0 <xTaskRemoveFromEventList+0xb4>)
 800ce86:	6013      	str	r3, [r2, #0]
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce8c:	4613      	mov	r3, r2
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	4413      	add	r3, r2
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	4a13      	ldr	r2, [pc, #76]	; (800cee4 <xTaskRemoveFromEventList+0xb8>)
 800ce96:	441a      	add	r2, r3
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	3304      	adds	r3, #4
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	4610      	mov	r0, r2
 800cea0:	f7fe fbd7 	bl	800b652 <vListInsertEnd>
 800cea4:	e005      	b.n	800ceb2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	3318      	adds	r3, #24
 800ceaa:	4619      	mov	r1, r3
 800ceac:	480e      	ldr	r0, [pc, #56]	; (800cee8 <xTaskRemoveFromEventList+0xbc>)
 800ceae:	f7fe fbd0 	bl	800b652 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb6:	4b0d      	ldr	r3, [pc, #52]	; (800ceec <xTaskRemoveFromEventList+0xc0>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d905      	bls.n	800cecc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cec0:	2301      	movs	r3, #1
 800cec2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cec4:	4b0a      	ldr	r3, [pc, #40]	; (800cef0 <xTaskRemoveFromEventList+0xc4>)
 800cec6:	2201      	movs	r2, #1
 800cec8:	601a      	str	r2, [r3, #0]
 800ceca:	e001      	b.n	800ced0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cecc:	2300      	movs	r3, #0
 800cece:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ced0:	697b      	ldr	r3, [r7, #20]
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3718      	adds	r7, #24
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	20000d6c 	.word	0x20000d6c
 800cee0:	20000d4c 	.word	0x20000d4c
 800cee4:	20000874 	.word	0x20000874
 800cee8:	20000d04 	.word	0x20000d04
 800ceec:	20000870 	.word	0x20000870
 800cef0:	20000d58 	.word	0x20000d58

0800cef4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cefc:	4b06      	ldr	r3, [pc, #24]	; (800cf18 <vTaskInternalSetTimeOutState+0x24>)
 800cefe:	681a      	ldr	r2, [r3, #0]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf04:	4b05      	ldr	r3, [pc, #20]	; (800cf1c <vTaskInternalSetTimeOutState+0x28>)
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	605a      	str	r2, [r3, #4]
}
 800cf0c:	bf00      	nop
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bc80      	pop	{r7}
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	20000d5c 	.word	0x20000d5c
 800cf1c:	20000d48 	.word	0x20000d48

0800cf20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b088      	sub	sp, #32
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d10a      	bne.n	800cf46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf34:	f383 8811 	msr	BASEPRI, r3
 800cf38:	f3bf 8f6f 	isb	sy
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	613b      	str	r3, [r7, #16]
}
 800cf42:	bf00      	nop
 800cf44:	e7fe      	b.n	800cf44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d10a      	bne.n	800cf62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	60fb      	str	r3, [r7, #12]
}
 800cf5e:	bf00      	nop
 800cf60:	e7fe      	b.n	800cf60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cf62:	f000 ff4b 	bl	800ddfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cf66:	4b1d      	ldr	r3, [pc, #116]	; (800cfdc <xTaskCheckForTimeOut+0xbc>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	69ba      	ldr	r2, [r7, #24]
 800cf72:	1ad3      	subs	r3, r2, r3
 800cf74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7e:	d102      	bne.n	800cf86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cf80:	2300      	movs	r3, #0
 800cf82:	61fb      	str	r3, [r7, #28]
 800cf84:	e023      	b.n	800cfce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	4b15      	ldr	r3, [pc, #84]	; (800cfe0 <xTaskCheckForTimeOut+0xc0>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d007      	beq.n	800cfa2 <xTaskCheckForTimeOut+0x82>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	69ba      	ldr	r2, [r7, #24]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d302      	bcc.n	800cfa2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	61fb      	str	r3, [r7, #28]
 800cfa0:	e015      	b.n	800cfce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	697a      	ldr	r2, [r7, #20]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d20b      	bcs.n	800cfc4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	1ad2      	subs	r2, r2, r3
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f7ff ff9b 	bl	800cef4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	61fb      	str	r3, [r7, #28]
 800cfc2:	e004      	b.n	800cfce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cfce:	f000 ff45 	bl	800de5c <vPortExitCritical>

	return xReturn;
 800cfd2:	69fb      	ldr	r3, [r7, #28]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3720      	adds	r7, #32
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	20000d48 	.word	0x20000d48
 800cfe0:	20000d5c 	.word	0x20000d5c

0800cfe4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cfe8:	4b03      	ldr	r3, [pc, #12]	; (800cff8 <vTaskMissedYield+0x14>)
 800cfea:	2201      	movs	r2, #1
 800cfec:	601a      	str	r2, [r3, #0]
}
 800cfee:	bf00      	nop
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bc80      	pop	{r7}
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop
 800cff8:	20000d58 	.word	0x20000d58

0800cffc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d004:	f000 f852 	bl	800d0ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d008:	4b06      	ldr	r3, [pc, #24]	; (800d024 <prvIdleTask+0x28>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d9f9      	bls.n	800d004 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d010:	4b05      	ldr	r3, [pc, #20]	; (800d028 <prvIdleTask+0x2c>)
 800d012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d016:	601a      	str	r2, [r3, #0]
 800d018:	f3bf 8f4f 	dsb	sy
 800d01c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d020:	e7f0      	b.n	800d004 <prvIdleTask+0x8>
 800d022:	bf00      	nop
 800d024:	20000874 	.word	0x20000874
 800d028:	e000ed04 	.word	0xe000ed04

0800d02c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d032:	2300      	movs	r3, #0
 800d034:	607b      	str	r3, [r7, #4]
 800d036:	e00c      	b.n	800d052 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	4613      	mov	r3, r2
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	4413      	add	r3, r2
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	4a12      	ldr	r2, [pc, #72]	; (800d08c <prvInitialiseTaskLists+0x60>)
 800d044:	4413      	add	r3, r2
 800d046:	4618      	mov	r0, r3
 800d048:	f7fe fad8 	bl	800b5fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	3301      	adds	r3, #1
 800d050:	607b      	str	r3, [r7, #4]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b37      	cmp	r3, #55	; 0x37
 800d056:	d9ef      	bls.n	800d038 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d058:	480d      	ldr	r0, [pc, #52]	; (800d090 <prvInitialiseTaskLists+0x64>)
 800d05a:	f7fe facf 	bl	800b5fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d05e:	480d      	ldr	r0, [pc, #52]	; (800d094 <prvInitialiseTaskLists+0x68>)
 800d060:	f7fe facc 	bl	800b5fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d064:	480c      	ldr	r0, [pc, #48]	; (800d098 <prvInitialiseTaskLists+0x6c>)
 800d066:	f7fe fac9 	bl	800b5fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d06a:	480c      	ldr	r0, [pc, #48]	; (800d09c <prvInitialiseTaskLists+0x70>)
 800d06c:	f7fe fac6 	bl	800b5fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d070:	480b      	ldr	r0, [pc, #44]	; (800d0a0 <prvInitialiseTaskLists+0x74>)
 800d072:	f7fe fac3 	bl	800b5fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d076:	4b0b      	ldr	r3, [pc, #44]	; (800d0a4 <prvInitialiseTaskLists+0x78>)
 800d078:	4a05      	ldr	r2, [pc, #20]	; (800d090 <prvInitialiseTaskLists+0x64>)
 800d07a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d07c:	4b0a      	ldr	r3, [pc, #40]	; (800d0a8 <prvInitialiseTaskLists+0x7c>)
 800d07e:	4a05      	ldr	r2, [pc, #20]	; (800d094 <prvInitialiseTaskLists+0x68>)
 800d080:	601a      	str	r2, [r3, #0]
}
 800d082:	bf00      	nop
 800d084:	3708      	adds	r7, #8
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	20000874 	.word	0x20000874
 800d090:	20000cd4 	.word	0x20000cd4
 800d094:	20000ce8 	.word	0x20000ce8
 800d098:	20000d04 	.word	0x20000d04
 800d09c:	20000d18 	.word	0x20000d18
 800d0a0:	20000d30 	.word	0x20000d30
 800d0a4:	20000cfc 	.word	0x20000cfc
 800d0a8:	20000d00 	.word	0x20000d00

0800d0ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0b2:	e019      	b.n	800d0e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d0b4:	f000 fea2 	bl	800ddfc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d0b8:	4b10      	ldr	r3, [pc, #64]	; (800d0fc <prvCheckTasksWaitingTermination+0x50>)
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	3304      	adds	r3, #4
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fe fb1f 	bl	800b708 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d0ca:	4b0d      	ldr	r3, [pc, #52]	; (800d100 <prvCheckTasksWaitingTermination+0x54>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	3b01      	subs	r3, #1
 800d0d0:	4a0b      	ldr	r2, [pc, #44]	; (800d100 <prvCheckTasksWaitingTermination+0x54>)
 800d0d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d0d4:	4b0b      	ldr	r3, [pc, #44]	; (800d104 <prvCheckTasksWaitingTermination+0x58>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	3b01      	subs	r3, #1
 800d0da:	4a0a      	ldr	r2, [pc, #40]	; (800d104 <prvCheckTasksWaitingTermination+0x58>)
 800d0dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d0de:	f000 febd 	bl	800de5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 f848 	bl	800d178 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0e8:	4b06      	ldr	r3, [pc, #24]	; (800d104 <prvCheckTasksWaitingTermination+0x58>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d1e1      	bne.n	800d0b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d0f0:	bf00      	nop
 800d0f2:	bf00      	nop
 800d0f4:	3708      	adds	r7, #8
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	20000d18 	.word	0x20000d18
 800d100:	20000d44 	.word	0x20000d44
 800d104:	20000d2c 	.word	0x20000d2c

0800d108 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800d110:	2300      	movs	r3, #0
 800d112:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d114:	e005      	b.n	800d122 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	3301      	adds	r3, #1
 800d11a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	3301      	adds	r3, #1
 800d120:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	2ba5      	cmp	r3, #165	; 0xa5
 800d128:	d0f5      	beq.n	800d116 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	089b      	lsrs	r3, r3, #2
 800d12e:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	b29b      	uxth	r3, r3
	}
 800d134:	4618      	mov	r0, r3
 800d136:	3714      	adds	r7, #20
 800d138:	46bd      	mov	sp, r7
 800d13a:	bc80      	pop	{r7}
 800d13c:	4770      	bx	lr
	...

0800d140 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800d140:	b580      	push	{r7, lr}
 800d142:	b086      	sub	sp, #24
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d102      	bne.n	800d154 <uxTaskGetStackHighWaterMark+0x14>
 800d14e:	4b09      	ldr	r3, [pc, #36]	; (800d174 <uxTaskGetStackHighWaterMark+0x34>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	e000      	b.n	800d156 <uxTaskGetStackHighWaterMark+0x16>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d15c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800d15e:	6938      	ldr	r0, [r7, #16]
 800d160:	f7ff ffd2 	bl	800d108 <prvTaskCheckFreeStackSpace>
 800d164:	4603      	mov	r3, r0
 800d166:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800d168:	68fb      	ldr	r3, [r7, #12]
	}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3718      	adds	r7, #24
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	20000870 	.word	0x20000870

0800d178 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d186:	2b00      	cmp	r3, #0
 800d188:	d108      	bne.n	800d19c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d18e:	4618      	mov	r0, r3
 800d190:	f000 fff8 	bl	800e184 <vPortFree>
				vPortFree( pxTCB );
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 fff5 	bl	800e184 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d19a:	e018      	b.n	800d1ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d103      	bne.n	800d1ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 ffec 	bl	800e184 <vPortFree>
	}
 800d1ac:	e00f      	b.n	800d1ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	d00a      	beq.n	800d1ce <prvDeleteTCB+0x56>
	__asm volatile
 800d1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	60fb      	str	r3, [r7, #12]
}
 800d1ca:	bf00      	nop
 800d1cc:	e7fe      	b.n	800d1cc <prvDeleteTCB+0x54>
	}
 800d1ce:	bf00      	nop
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
	...

0800d1d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1de:	4b0e      	ldr	r3, [pc, #56]	; (800d218 <prvResetNextTaskUnblockTime+0x40>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d101      	bne.n	800d1ec <prvResetNextTaskUnblockTime+0x14>
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e000      	b.n	800d1ee <prvResetNextTaskUnblockTime+0x16>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d004      	beq.n	800d1fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1f2:	4b0a      	ldr	r3, [pc, #40]	; (800d21c <prvResetNextTaskUnblockTime+0x44>)
 800d1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1fa:	e008      	b.n	800d20e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d1fc:	4b06      	ldr	r3, [pc, #24]	; (800d218 <prvResetNextTaskUnblockTime+0x40>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	4a04      	ldr	r2, [pc, #16]	; (800d21c <prvResetNextTaskUnblockTime+0x44>)
 800d20c:	6013      	str	r3, [r2, #0]
}
 800d20e:	bf00      	nop
 800d210:	370c      	adds	r7, #12
 800d212:	46bd      	mov	sp, r7
 800d214:	bc80      	pop	{r7}
 800d216:	4770      	bx	lr
 800d218:	20000cfc 	.word	0x20000cfc
 800d21c:	20000d64 	.word	0x20000d64

0800d220 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d226:	4b0b      	ldr	r3, [pc, #44]	; (800d254 <xTaskGetSchedulerState+0x34>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d102      	bne.n	800d234 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d22e:	2301      	movs	r3, #1
 800d230:	607b      	str	r3, [r7, #4]
 800d232:	e008      	b.n	800d246 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d234:	4b08      	ldr	r3, [pc, #32]	; (800d258 <xTaskGetSchedulerState+0x38>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d102      	bne.n	800d242 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d23c:	2302      	movs	r3, #2
 800d23e:	607b      	str	r3, [r7, #4]
 800d240:	e001      	b.n	800d246 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d242:	2300      	movs	r3, #0
 800d244:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d246:	687b      	ldr	r3, [r7, #4]
	}
 800d248:	4618      	mov	r0, r3
 800d24a:	370c      	adds	r7, #12
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bc80      	pop	{r7}
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	20000d50 	.word	0x20000d50
 800d258:	20000d6c 	.word	0x20000d6c

0800d25c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d268:	2300      	movs	r3, #0
 800d26a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d056      	beq.n	800d320 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d276:	4b2d      	ldr	r3, [pc, #180]	; (800d32c <xTaskPriorityInherit+0xd0>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d246      	bcs.n	800d30e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	699b      	ldr	r3, [r3, #24]
 800d284:	2b00      	cmp	r3, #0
 800d286:	db06      	blt.n	800d296 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d288:	4b28      	ldr	r3, [pc, #160]	; (800d32c <xTaskPriorityInherit+0xd0>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d28e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	6959      	ldr	r1, [r3, #20]
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29e:	4613      	mov	r3, r2
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	4413      	add	r3, r2
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	4a22      	ldr	r2, [pc, #136]	; (800d330 <xTaskPriorityInherit+0xd4>)
 800d2a8:	4413      	add	r3, r2
 800d2aa:	4299      	cmp	r1, r3
 800d2ac:	d101      	bne.n	800d2b2 <xTaskPriorityInherit+0x56>
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e000      	b.n	800d2b4 <xTaskPriorityInherit+0x58>
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d022      	beq.n	800d2fe <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	3304      	adds	r3, #4
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7fe fa23 	bl	800b708 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2c2:	4b1a      	ldr	r3, [pc, #104]	; (800d32c <xTaskPriorityInherit+0xd0>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d0:	4b18      	ldr	r3, [pc, #96]	; (800d334 <xTaskPriorityInherit+0xd8>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d903      	bls.n	800d2e0 <xTaskPriorityInherit+0x84>
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2dc:	4a15      	ldr	r2, [pc, #84]	; (800d334 <xTaskPriorityInherit+0xd8>)
 800d2de:	6013      	str	r3, [r2, #0]
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e4:	4613      	mov	r3, r2
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	4413      	add	r3, r2
 800d2ea:	009b      	lsls	r3, r3, #2
 800d2ec:	4a10      	ldr	r2, [pc, #64]	; (800d330 <xTaskPriorityInherit+0xd4>)
 800d2ee:	441a      	add	r2, r3
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	3304      	adds	r3, #4
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	4610      	mov	r0, r2
 800d2f8:	f7fe f9ab 	bl	800b652 <vListInsertEnd>
 800d2fc:	e004      	b.n	800d308 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2fe:	4b0b      	ldr	r3, [pc, #44]	; (800d32c <xTaskPriorityInherit+0xd0>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d308:	2301      	movs	r3, #1
 800d30a:	60fb      	str	r3, [r7, #12]
 800d30c:	e008      	b.n	800d320 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d312:	4b06      	ldr	r3, [pc, #24]	; (800d32c <xTaskPriorityInherit+0xd0>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d318:	429a      	cmp	r2, r3
 800d31a:	d201      	bcs.n	800d320 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d31c:	2301      	movs	r3, #1
 800d31e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d320:	68fb      	ldr	r3, [r7, #12]
	}
 800d322:	4618      	mov	r0, r3
 800d324:	3710      	adds	r7, #16
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	20000870 	.word	0x20000870
 800d330:	20000874 	.word	0x20000874
 800d334:	20000d4c 	.word	0x20000d4c

0800d338 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b086      	sub	sp, #24
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d344:	2300      	movs	r3, #0
 800d346:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d056      	beq.n	800d3fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d34e:	4b2e      	ldr	r3, [pc, #184]	; (800d408 <xTaskPriorityDisinherit+0xd0>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	693a      	ldr	r2, [r7, #16]
 800d354:	429a      	cmp	r2, r3
 800d356:	d00a      	beq.n	800d36e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	60fb      	str	r3, [r7, #12]
}
 800d36a:	bf00      	nop
 800d36c:	e7fe      	b.n	800d36c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d372:	2b00      	cmp	r3, #0
 800d374:	d10a      	bne.n	800d38c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37a:	f383 8811 	msr	BASEPRI, r3
 800d37e:	f3bf 8f6f 	isb	sy
 800d382:	f3bf 8f4f 	dsb	sy
 800d386:	60bb      	str	r3, [r7, #8]
}
 800d388:	bf00      	nop
 800d38a:	e7fe      	b.n	800d38a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d390:	1e5a      	subs	r2, r3, #1
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d02c      	beq.n	800d3fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d128      	bne.n	800d3fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	3304      	adds	r3, #4
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7fe f9aa 	bl	800b708 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3cc:	4b0f      	ldr	r3, [pc, #60]	; (800d40c <xTaskPriorityDisinherit+0xd4>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d903      	bls.n	800d3dc <xTaskPriorityDisinherit+0xa4>
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d8:	4a0c      	ldr	r2, [pc, #48]	; (800d40c <xTaskPriorityDisinherit+0xd4>)
 800d3da:	6013      	str	r3, [r2, #0]
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	4413      	add	r3, r2
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	4a09      	ldr	r2, [pc, #36]	; (800d410 <xTaskPriorityDisinherit+0xd8>)
 800d3ea:	441a      	add	r2, r3
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	3304      	adds	r3, #4
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	4610      	mov	r0, r2
 800d3f4:	f7fe f92d 	bl	800b652 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3fc:	697b      	ldr	r3, [r7, #20]
	}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3718      	adds	r7, #24
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
 800d406:	bf00      	nop
 800d408:	20000870 	.word	0x20000870
 800d40c:	20000d4c 	.word	0x20000d4c
 800d410:	20000874 	.word	0x20000874

0800d414 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d414:	b580      	push	{r7, lr}
 800d416:	b088      	sub	sp, #32
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d422:	2301      	movs	r3, #1
 800d424:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d06f      	beq.n	800d50c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d430:	2b00      	cmp	r3, #0
 800d432:	d10a      	bne.n	800d44a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d438:	f383 8811 	msr	BASEPRI, r3
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	f3bf 8f4f 	dsb	sy
 800d444:	60fb      	str	r3, [r7, #12]
}
 800d446:	bf00      	nop
 800d448:	e7fe      	b.n	800d448 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d44e:	683a      	ldr	r2, [r7, #0]
 800d450:	429a      	cmp	r2, r3
 800d452:	d902      	bls.n	800d45a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	61fb      	str	r3, [r7, #28]
 800d458:	e002      	b.n	800d460 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d45e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d464:	69fa      	ldr	r2, [r7, #28]
 800d466:	429a      	cmp	r2, r3
 800d468:	d050      	beq.n	800d50c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d46e:	697a      	ldr	r2, [r7, #20]
 800d470:	429a      	cmp	r2, r3
 800d472:	d14b      	bne.n	800d50c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d474:	4b27      	ldr	r3, [pc, #156]	; (800d514 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	69ba      	ldr	r2, [r7, #24]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d10a      	bne.n	800d494 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	60bb      	str	r3, [r7, #8]
}
 800d490:	bf00      	nop
 800d492:	e7fe      	b.n	800d492 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d498:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	69fa      	ldr	r2, [r7, #28]
 800d49e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d4a0:	69bb      	ldr	r3, [r7, #24]
 800d4a2:	699b      	ldr	r3, [r3, #24]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	db04      	blt.n	800d4b2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	6959      	ldr	r1, [r3, #20]
 800d4b6:	693a      	ldr	r2, [r7, #16]
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	4413      	add	r3, r2
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	4a15      	ldr	r2, [pc, #84]	; (800d518 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d4c2:	4413      	add	r3, r2
 800d4c4:	4299      	cmp	r1, r3
 800d4c6:	d101      	bne.n	800d4cc <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	e000      	b.n	800d4ce <vTaskPriorityDisinheritAfterTimeout+0xba>
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d01c      	beq.n	800d50c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4d2:	69bb      	ldr	r3, [r7, #24]
 800d4d4:	3304      	adds	r3, #4
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fe f916 	bl	800b708 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4e0:	4b0e      	ldr	r3, [pc, #56]	; (800d51c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d903      	bls.n	800d4f0 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800d4e8:	69bb      	ldr	r3, [r7, #24]
 800d4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ec:	4a0b      	ldr	r2, [pc, #44]	; (800d51c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d4ee:	6013      	str	r3, [r2, #0]
 800d4f0:	69bb      	ldr	r3, [r7, #24]
 800d4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	4413      	add	r3, r2
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	4a06      	ldr	r2, [pc, #24]	; (800d518 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d4fe:	441a      	add	r2, r3
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	3304      	adds	r3, #4
 800d504:	4619      	mov	r1, r3
 800d506:	4610      	mov	r0, r2
 800d508:	f7fe f8a3 	bl	800b652 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d50c:	bf00      	nop
 800d50e:	3720      	adds	r7, #32
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	20000870 	.word	0x20000870
 800d518:	20000874 	.word	0x20000874
 800d51c:	20000d4c 	.word	0x20000d4c

0800d520 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800d520:	b480      	push	{r7}
 800d522:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d524:	4b07      	ldr	r3, [pc, #28]	; (800d544 <pvTaskIncrementMutexHeldCount+0x24>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d004      	beq.n	800d536 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d52c:	4b05      	ldr	r3, [pc, #20]	; (800d544 <pvTaskIncrementMutexHeldCount+0x24>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d532:	3201      	adds	r2, #1
 800d534:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d536:	4b03      	ldr	r3, [pc, #12]	; (800d544 <pvTaskIncrementMutexHeldCount+0x24>)
 800d538:	681b      	ldr	r3, [r3, #0]
	}
 800d53a:	4618      	mov	r0, r3
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bc80      	pop	{r7}
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop
 800d544:	20000870 	.word	0x20000870

0800d548 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d552:	4b21      	ldr	r3, [pc, #132]	; (800d5d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d558:	4b20      	ldr	r3, [pc, #128]	; (800d5dc <prvAddCurrentTaskToDelayedList+0x94>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	3304      	adds	r3, #4
 800d55e:	4618      	mov	r0, r3
 800d560:	f7fe f8d2 	bl	800b708 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d56a:	d10a      	bne.n	800d582 <prvAddCurrentTaskToDelayedList+0x3a>
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d007      	beq.n	800d582 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d572:	4b1a      	ldr	r3, [pc, #104]	; (800d5dc <prvAddCurrentTaskToDelayedList+0x94>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	3304      	adds	r3, #4
 800d578:	4619      	mov	r1, r3
 800d57a:	4819      	ldr	r0, [pc, #100]	; (800d5e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800d57c:	f7fe f869 	bl	800b652 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d580:	e026      	b.n	800d5d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d582:	68fa      	ldr	r2, [r7, #12]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	4413      	add	r3, r2
 800d588:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d58a:	4b14      	ldr	r3, [pc, #80]	; (800d5dc <prvAddCurrentTaskToDelayedList+0x94>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	68ba      	ldr	r2, [r7, #8]
 800d590:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d592:	68ba      	ldr	r2, [r7, #8]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	429a      	cmp	r2, r3
 800d598:	d209      	bcs.n	800d5ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d59a:	4b12      	ldr	r3, [pc, #72]	; (800d5e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	4b0f      	ldr	r3, [pc, #60]	; (800d5dc <prvAddCurrentTaskToDelayedList+0x94>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	3304      	adds	r3, #4
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	4610      	mov	r0, r2
 800d5a8:	f7fe f876 	bl	800b698 <vListInsert>
}
 800d5ac:	e010      	b.n	800d5d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5ae:	4b0e      	ldr	r3, [pc, #56]	; (800d5e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	4b0a      	ldr	r3, [pc, #40]	; (800d5dc <prvAddCurrentTaskToDelayedList+0x94>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	3304      	adds	r3, #4
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	4610      	mov	r0, r2
 800d5bc:	f7fe f86c 	bl	800b698 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d5c0:	4b0a      	ldr	r3, [pc, #40]	; (800d5ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	68ba      	ldr	r2, [r7, #8]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d202      	bcs.n	800d5d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d5ca:	4a08      	ldr	r2, [pc, #32]	; (800d5ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	6013      	str	r3, [r2, #0]
}
 800d5d0:	bf00      	nop
 800d5d2:	3710      	adds	r7, #16
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	20000d48 	.word	0x20000d48
 800d5dc:	20000870 	.word	0x20000870
 800d5e0:	20000d30 	.word	0x20000d30
 800d5e4:	20000d00 	.word	0x20000d00
 800d5e8:	20000cfc 	.word	0x20000cfc
 800d5ec:	20000d64 	.word	0x20000d64

0800d5f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b08a      	sub	sp, #40	; 0x28
 800d5f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d5fa:	f000 facb 	bl	800db94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d5fe:	4b1c      	ldr	r3, [pc, #112]	; (800d670 <xTimerCreateTimerTask+0x80>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d021      	beq.n	800d64a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d606:	2300      	movs	r3, #0
 800d608:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d60a:	2300      	movs	r3, #0
 800d60c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d60e:	1d3a      	adds	r2, r7, #4
 800d610:	f107 0108 	add.w	r1, r7, #8
 800d614:	f107 030c 	add.w	r3, r7, #12
 800d618:	4618      	mov	r0, r3
 800d61a:	f7fd ffd5 	bl	800b5c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d61e:	6879      	ldr	r1, [r7, #4]
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	68fa      	ldr	r2, [r7, #12]
 800d624:	9202      	str	r2, [sp, #8]
 800d626:	9301      	str	r3, [sp, #4]
 800d628:	2302      	movs	r3, #2
 800d62a:	9300      	str	r3, [sp, #0]
 800d62c:	2300      	movs	r3, #0
 800d62e:	460a      	mov	r2, r1
 800d630:	4910      	ldr	r1, [pc, #64]	; (800d674 <xTimerCreateTimerTask+0x84>)
 800d632:	4811      	ldr	r0, [pc, #68]	; (800d678 <xTimerCreateTimerTask+0x88>)
 800d634:	f7fe ff26 	bl	800c484 <xTaskCreateStatic>
 800d638:	4603      	mov	r3, r0
 800d63a:	4a10      	ldr	r2, [pc, #64]	; (800d67c <xTimerCreateTimerTask+0x8c>)
 800d63c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d63e:	4b0f      	ldr	r3, [pc, #60]	; (800d67c <xTimerCreateTimerTask+0x8c>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d001      	beq.n	800d64a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d646:	2301      	movs	r3, #1
 800d648:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d10a      	bne.n	800d666 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d654:	f383 8811 	msr	BASEPRI, r3
 800d658:	f3bf 8f6f 	isb	sy
 800d65c:	f3bf 8f4f 	dsb	sy
 800d660:	613b      	str	r3, [r7, #16]
}
 800d662:	bf00      	nop
 800d664:	e7fe      	b.n	800d664 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d666:	697b      	ldr	r3, [r7, #20]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3718      	adds	r7, #24
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	20000da0 	.word	0x20000da0
 800d674:	0800f028 	.word	0x0800f028
 800d678:	0800d79d 	.word	0x0800d79d
 800d67c:	20000da4 	.word	0x20000da4

0800d680 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b08a      	sub	sp, #40	; 0x28
 800d684:	af00      	add	r7, sp, #0
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	60b9      	str	r1, [r7, #8]
 800d68a:	607a      	str	r2, [r7, #4]
 800d68c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d68e:	2300      	movs	r3, #0
 800d690:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d10a      	bne.n	800d6ae <xTimerGenericCommand+0x2e>
	__asm volatile
 800d698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69c:	f383 8811 	msr	BASEPRI, r3
 800d6a0:	f3bf 8f6f 	isb	sy
 800d6a4:	f3bf 8f4f 	dsb	sy
 800d6a8:	623b      	str	r3, [r7, #32]
}
 800d6aa:	bf00      	nop
 800d6ac:	e7fe      	b.n	800d6ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d6ae:	4b1a      	ldr	r3, [pc, #104]	; (800d718 <xTimerGenericCommand+0x98>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d02a      	beq.n	800d70c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	2b05      	cmp	r3, #5
 800d6c6:	dc18      	bgt.n	800d6fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d6c8:	f7ff fdaa 	bl	800d220 <xTaskGetSchedulerState>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b02      	cmp	r3, #2
 800d6d0:	d109      	bne.n	800d6e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d6d2:	4b11      	ldr	r3, [pc, #68]	; (800d718 <xTimerGenericCommand+0x98>)
 800d6d4:	6818      	ldr	r0, [r3, #0]
 800d6d6:	f107 0110 	add.w	r1, r7, #16
 800d6da:	2300      	movs	r3, #0
 800d6dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6de:	f7fe f9cb 	bl	800ba78 <xQueueGenericSend>
 800d6e2:	6278      	str	r0, [r7, #36]	; 0x24
 800d6e4:	e012      	b.n	800d70c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d6e6:	4b0c      	ldr	r3, [pc, #48]	; (800d718 <xTimerGenericCommand+0x98>)
 800d6e8:	6818      	ldr	r0, [r3, #0]
 800d6ea:	f107 0110 	add.w	r1, r7, #16
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	f7fe f9c1 	bl	800ba78 <xQueueGenericSend>
 800d6f6:	6278      	str	r0, [r7, #36]	; 0x24
 800d6f8:	e008      	b.n	800d70c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d6fa:	4b07      	ldr	r3, [pc, #28]	; (800d718 <xTimerGenericCommand+0x98>)
 800d6fc:	6818      	ldr	r0, [r3, #0]
 800d6fe:	f107 0110 	add.w	r1, r7, #16
 800d702:	2300      	movs	r3, #0
 800d704:	683a      	ldr	r2, [r7, #0]
 800d706:	f7fe fab5 	bl	800bc74 <xQueueGenericSendFromISR>
 800d70a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3728      	adds	r7, #40	; 0x28
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	20000da0 	.word	0x20000da0

0800d71c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b088      	sub	sp, #32
 800d720:	af02      	add	r7, sp, #8
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d726:	4b1c      	ldr	r3, [pc, #112]	; (800d798 <prvProcessExpiredTimer+0x7c>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	68db      	ldr	r3, [r3, #12]
 800d72e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	3304      	adds	r3, #4
 800d734:	4618      	mov	r0, r3
 800d736:	f7fd ffe7 	bl	800b708 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	69db      	ldr	r3, [r3, #28]
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d122      	bne.n	800d788 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	699a      	ldr	r2, [r3, #24]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	18d1      	adds	r1, r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	683a      	ldr	r2, [r7, #0]
 800d74e:	6978      	ldr	r0, [r7, #20]
 800d750:	f000 f8c8 	bl	800d8e4 <prvInsertTimerInActiveList>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d016      	beq.n	800d788 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d75a:	2300      	movs	r3, #0
 800d75c:	9300      	str	r3, [sp, #0]
 800d75e:	2300      	movs	r3, #0
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	2100      	movs	r1, #0
 800d764:	6978      	ldr	r0, [r7, #20]
 800d766:	f7ff ff8b 	bl	800d680 <xTimerGenericCommand>
 800d76a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d10a      	bne.n	800d788 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800d772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d776:	f383 8811 	msr	BASEPRI, r3
 800d77a:	f3bf 8f6f 	isb	sy
 800d77e:	f3bf 8f4f 	dsb	sy
 800d782:	60fb      	str	r3, [r7, #12]
}
 800d784:	bf00      	nop
 800d786:	e7fe      	b.n	800d786 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78c:	6978      	ldr	r0, [r7, #20]
 800d78e:	4798      	blx	r3
}
 800d790:	bf00      	nop
 800d792:	3718      	adds	r7, #24
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	20000d98 	.word	0x20000d98

0800d79c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d7a4:	f107 0308 	add.w	r3, r7, #8
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f000 f857 	bl	800d85c <prvGetNextExpireTime>
 800d7ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	f000 f803 	bl	800d7c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d7ba:	f000 f8d5 	bl	800d968 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d7be:	e7f1      	b.n	800d7a4 <prvTimerTask+0x8>

0800d7c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d7ca:	f7ff f90b 	bl	800c9e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d7ce:	f107 0308 	add.w	r3, r7, #8
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f000 f866 	bl	800d8a4 <prvSampleTimeNow>
 800d7d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d130      	bne.n	800d842 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d10a      	bne.n	800d7fc <prvProcessTimerOrBlockTask+0x3c>
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d806      	bhi.n	800d7fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d7ee:	f7ff f907 	bl	800ca00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d7f2:	68f9      	ldr	r1, [r7, #12]
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f7ff ff91 	bl	800d71c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d7fa:	e024      	b.n	800d846 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d008      	beq.n	800d814 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d802:	4b13      	ldr	r3, [pc, #76]	; (800d850 <prvProcessTimerOrBlockTask+0x90>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	bf0c      	ite	eq
 800d80c:	2301      	moveq	r3, #1
 800d80e:	2300      	movne	r3, #0
 800d810:	b2db      	uxtb	r3, r3
 800d812:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d814:	4b0f      	ldr	r3, [pc, #60]	; (800d854 <prvProcessTimerOrBlockTask+0x94>)
 800d816:	6818      	ldr	r0, [r3, #0]
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	1ad3      	subs	r3, r2, r3
 800d81e:	683a      	ldr	r2, [r7, #0]
 800d820:	4619      	mov	r1, r3
 800d822:	f7fe fdfb 	bl	800c41c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d826:	f7ff f8eb 	bl	800ca00 <xTaskResumeAll>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d10a      	bne.n	800d846 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d830:	4b09      	ldr	r3, [pc, #36]	; (800d858 <prvProcessTimerOrBlockTask+0x98>)
 800d832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d836:	601a      	str	r2, [r3, #0]
 800d838:	f3bf 8f4f 	dsb	sy
 800d83c:	f3bf 8f6f 	isb	sy
}
 800d840:	e001      	b.n	800d846 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d842:	f7ff f8dd 	bl	800ca00 <xTaskResumeAll>
}
 800d846:	bf00      	nop
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop
 800d850:	20000d9c 	.word	0x20000d9c
 800d854:	20000da0 	.word	0x20000da0
 800d858:	e000ed04 	.word	0xe000ed04

0800d85c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d85c:	b480      	push	{r7}
 800d85e:	b085      	sub	sp, #20
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d864:	4b0e      	ldr	r3, [pc, #56]	; (800d8a0 <prvGetNextExpireTime+0x44>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	bf0c      	ite	eq
 800d86e:	2301      	moveq	r3, #1
 800d870:	2300      	movne	r3, #0
 800d872:	b2db      	uxtb	r3, r3
 800d874:	461a      	mov	r2, r3
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d105      	bne.n	800d88e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d882:	4b07      	ldr	r3, [pc, #28]	; (800d8a0 <prvGetNextExpireTime+0x44>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	68db      	ldr	r3, [r3, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	60fb      	str	r3, [r7, #12]
 800d88c:	e001      	b.n	800d892 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d88e:	2300      	movs	r3, #0
 800d890:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d892:	68fb      	ldr	r3, [r7, #12]
}
 800d894:	4618      	mov	r0, r3
 800d896:	3714      	adds	r7, #20
 800d898:	46bd      	mov	sp, r7
 800d89a:	bc80      	pop	{r7}
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	20000d98 	.word	0x20000d98

0800d8a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d8ac:	f7ff f946 	bl	800cb3c <xTaskGetTickCount>
 800d8b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d8b2:	4b0b      	ldr	r3, [pc, #44]	; (800d8e0 <prvSampleTimeNow+0x3c>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	68fa      	ldr	r2, [r7, #12]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d205      	bcs.n	800d8c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d8bc:	f000 f908 	bl	800dad0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	601a      	str	r2, [r3, #0]
 800d8c6:	e002      	b.n	800d8ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d8ce:	4a04      	ldr	r2, [pc, #16]	; (800d8e0 <prvSampleTimeNow+0x3c>)
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	20000da8 	.word	0x20000da8

0800d8e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b086      	sub	sp, #24
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	607a      	str	r2, [r7, #4]
 800d8f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	68ba      	ldr	r2, [r7, #8]
 800d8fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	68fa      	ldr	r2, [r7, #12]
 800d900:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d902:	68ba      	ldr	r2, [r7, #8]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	429a      	cmp	r2, r3
 800d908:	d812      	bhi.n	800d930 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d90a:	687a      	ldr	r2, [r7, #4]
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	1ad2      	subs	r2, r2, r3
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	699b      	ldr	r3, [r3, #24]
 800d914:	429a      	cmp	r2, r3
 800d916:	d302      	bcc.n	800d91e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d918:	2301      	movs	r3, #1
 800d91a:	617b      	str	r3, [r7, #20]
 800d91c:	e01b      	b.n	800d956 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d91e:	4b10      	ldr	r3, [pc, #64]	; (800d960 <prvInsertTimerInActiveList+0x7c>)
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	3304      	adds	r3, #4
 800d926:	4619      	mov	r1, r3
 800d928:	4610      	mov	r0, r2
 800d92a:	f7fd feb5 	bl	800b698 <vListInsert>
 800d92e:	e012      	b.n	800d956 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d930:	687a      	ldr	r2, [r7, #4]
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	429a      	cmp	r2, r3
 800d936:	d206      	bcs.n	800d946 <prvInsertTimerInActiveList+0x62>
 800d938:	68ba      	ldr	r2, [r7, #8]
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d302      	bcc.n	800d946 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d940:	2301      	movs	r3, #1
 800d942:	617b      	str	r3, [r7, #20]
 800d944:	e007      	b.n	800d956 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d946:	4b07      	ldr	r3, [pc, #28]	; (800d964 <prvInsertTimerInActiveList+0x80>)
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	3304      	adds	r3, #4
 800d94e:	4619      	mov	r1, r3
 800d950:	4610      	mov	r0, r2
 800d952:	f7fd fea1 	bl	800b698 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d956:	697b      	ldr	r3, [r7, #20]
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3718      	adds	r7, #24
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	20000d9c 	.word	0x20000d9c
 800d964:	20000d98 	.word	0x20000d98

0800d968 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b08e      	sub	sp, #56	; 0x38
 800d96c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d96e:	e09d      	b.n	800daac <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2b00      	cmp	r3, #0
 800d974:	da18      	bge.n	800d9a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d976:	1d3b      	adds	r3, r7, #4
 800d978:	3304      	adds	r3, #4
 800d97a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d10a      	bne.n	800d998 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d986:	f383 8811 	msr	BASEPRI, r3
 800d98a:	f3bf 8f6f 	isb	sy
 800d98e:	f3bf 8f4f 	dsb	sy
 800d992:	61fb      	str	r3, [r7, #28]
}
 800d994:	bf00      	nop
 800d996:	e7fe      	b.n	800d996 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d99e:	6850      	ldr	r0, [r2, #4]
 800d9a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9a2:	6892      	ldr	r2, [r2, #8]
 800d9a4:	4611      	mov	r1, r2
 800d9a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	db7d      	blt.n	800daaa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b4:	695b      	ldr	r3, [r3, #20]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d004      	beq.n	800d9c4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9bc:	3304      	adds	r3, #4
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7fd fea2 	bl	800b708 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d9c4:	463b      	mov	r3, r7
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7ff ff6c 	bl	800d8a4 <prvSampleTimeNow>
 800d9cc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2b09      	cmp	r3, #9
 800d9d2:	d86b      	bhi.n	800daac <prvProcessReceivedCommands+0x144>
 800d9d4:	a201      	add	r2, pc, #4	; (adr r2, 800d9dc <prvProcessReceivedCommands+0x74>)
 800d9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9da:	bf00      	nop
 800d9dc:	0800da05 	.word	0x0800da05
 800d9e0:	0800da05 	.word	0x0800da05
 800d9e4:	0800da05 	.word	0x0800da05
 800d9e8:	0800daad 	.word	0x0800daad
 800d9ec:	0800da61 	.word	0x0800da61
 800d9f0:	0800da99 	.word	0x0800da99
 800d9f4:	0800da05 	.word	0x0800da05
 800d9f8:	0800da05 	.word	0x0800da05
 800d9fc:	0800daad 	.word	0x0800daad
 800da00:	0800da61 	.word	0x0800da61
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800da04:	68ba      	ldr	r2, [r7, #8]
 800da06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da08:	699b      	ldr	r3, [r3, #24]
 800da0a:	18d1      	adds	r1, r2, r3
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da12:	f7ff ff67 	bl	800d8e4 <prvInsertTimerInActiveList>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d047      	beq.n	800daac <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da22:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800da24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da26:	69db      	ldr	r3, [r3, #28]
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d13f      	bne.n	800daac <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800da2c:	68ba      	ldr	r2, [r7, #8]
 800da2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da30:	699b      	ldr	r3, [r3, #24]
 800da32:	441a      	add	r2, r3
 800da34:	2300      	movs	r3, #0
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	2300      	movs	r3, #0
 800da3a:	2100      	movs	r1, #0
 800da3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da3e:	f7ff fe1f 	bl	800d680 <xTimerGenericCommand>
 800da42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800da44:	6a3b      	ldr	r3, [r7, #32]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d130      	bne.n	800daac <prvProcessReceivedCommands+0x144>
	__asm volatile
 800da4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da4e:	f383 8811 	msr	BASEPRI, r3
 800da52:	f3bf 8f6f 	isb	sy
 800da56:	f3bf 8f4f 	dsb	sy
 800da5a:	61bb      	str	r3, [r7, #24]
}
 800da5c:	bf00      	nop
 800da5e:	e7fe      	b.n	800da5e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800da60:	68ba      	ldr	r2, [r7, #8]
 800da62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da64:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800da66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da68:	699b      	ldr	r3, [r3, #24]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d10a      	bne.n	800da84 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800da6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da72:	f383 8811 	msr	BASEPRI, r3
 800da76:	f3bf 8f6f 	isb	sy
 800da7a:	f3bf 8f4f 	dsb	sy
 800da7e:	617b      	str	r3, [r7, #20]
}
 800da80:	bf00      	nop
 800da82:	e7fe      	b.n	800da82 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800da84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da86:	699a      	ldr	r2, [r3, #24]
 800da88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8a:	18d1      	adds	r1, r2, r3
 800da8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da92:	f7ff ff27 	bl	800d8e4 <prvInsertTimerInActiveList>
					break;
 800da96:	e009      	b.n	800daac <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800da98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d104      	bne.n	800daac <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800daa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daa4:	f000 fb6e 	bl	800e184 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800daa8:	e000      	b.n	800daac <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800daaa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800daac:	4b07      	ldr	r3, [pc, #28]	; (800dacc <prvProcessReceivedCommands+0x164>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	1d39      	adds	r1, r7, #4
 800dab2:	2200      	movs	r2, #0
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7fe f975 	bl	800bda4 <xQueueReceive>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	f47f af57 	bne.w	800d970 <prvProcessReceivedCommands+0x8>
	}
}
 800dac2:	bf00      	nop
 800dac4:	bf00      	nop
 800dac6:	3730      	adds	r7, #48	; 0x30
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	20000da0 	.word	0x20000da0

0800dad0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b088      	sub	sp, #32
 800dad4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dad6:	e045      	b.n	800db64 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dad8:	4b2c      	ldr	r3, [pc, #176]	; (800db8c <prvSwitchTimerLists+0xbc>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	68db      	ldr	r3, [r3, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dae2:	4b2a      	ldr	r3, [pc, #168]	; (800db8c <prvSwitchTimerLists+0xbc>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	3304      	adds	r3, #4
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fd fe09 	bl	800b708 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	69db      	ldr	r3, [r3, #28]
 800db02:	2b01      	cmp	r3, #1
 800db04:	d12e      	bne.n	800db64 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	699b      	ldr	r3, [r3, #24]
 800db0a:	693a      	ldr	r2, [r7, #16]
 800db0c:	4413      	add	r3, r2
 800db0e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800db10:	68ba      	ldr	r2, [r7, #8]
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	429a      	cmp	r2, r3
 800db16:	d90e      	bls.n	800db36 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	68fa      	ldr	r2, [r7, #12]
 800db22:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db24:	4b19      	ldr	r3, [pc, #100]	; (800db8c <prvSwitchTimerLists+0xbc>)
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	3304      	adds	r3, #4
 800db2c:	4619      	mov	r1, r3
 800db2e:	4610      	mov	r0, r2
 800db30:	f7fd fdb2 	bl	800b698 <vListInsert>
 800db34:	e016      	b.n	800db64 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db36:	2300      	movs	r3, #0
 800db38:	9300      	str	r3, [sp, #0]
 800db3a:	2300      	movs	r3, #0
 800db3c:	693a      	ldr	r2, [r7, #16]
 800db3e:	2100      	movs	r1, #0
 800db40:	68f8      	ldr	r0, [r7, #12]
 800db42:	f7ff fd9d 	bl	800d680 <xTimerGenericCommand>
 800db46:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d10a      	bne.n	800db64 <prvSwitchTimerLists+0x94>
	__asm volatile
 800db4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db52:	f383 8811 	msr	BASEPRI, r3
 800db56:	f3bf 8f6f 	isb	sy
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	603b      	str	r3, [r7, #0]
}
 800db60:	bf00      	nop
 800db62:	e7fe      	b.n	800db62 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db64:	4b09      	ldr	r3, [pc, #36]	; (800db8c <prvSwitchTimerLists+0xbc>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d1b4      	bne.n	800dad8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800db6e:	4b07      	ldr	r3, [pc, #28]	; (800db8c <prvSwitchTimerLists+0xbc>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800db74:	4b06      	ldr	r3, [pc, #24]	; (800db90 <prvSwitchTimerLists+0xc0>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a04      	ldr	r2, [pc, #16]	; (800db8c <prvSwitchTimerLists+0xbc>)
 800db7a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800db7c:	4a04      	ldr	r2, [pc, #16]	; (800db90 <prvSwitchTimerLists+0xc0>)
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	6013      	str	r3, [r2, #0]
}
 800db82:	bf00      	nop
 800db84:	3718      	adds	r7, #24
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	20000d98 	.word	0x20000d98
 800db90:	20000d9c 	.word	0x20000d9c

0800db94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800db9a:	f000 f92f 	bl	800ddfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800db9e:	4b15      	ldr	r3, [pc, #84]	; (800dbf4 <prvCheckForValidListAndQueue+0x60>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d120      	bne.n	800dbe8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dba6:	4814      	ldr	r0, [pc, #80]	; (800dbf8 <prvCheckForValidListAndQueue+0x64>)
 800dba8:	f7fd fd28 	bl	800b5fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dbac:	4813      	ldr	r0, [pc, #76]	; (800dbfc <prvCheckForValidListAndQueue+0x68>)
 800dbae:	f7fd fd25 	bl	800b5fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dbb2:	4b13      	ldr	r3, [pc, #76]	; (800dc00 <prvCheckForValidListAndQueue+0x6c>)
 800dbb4:	4a10      	ldr	r2, [pc, #64]	; (800dbf8 <prvCheckForValidListAndQueue+0x64>)
 800dbb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dbb8:	4b12      	ldr	r3, [pc, #72]	; (800dc04 <prvCheckForValidListAndQueue+0x70>)
 800dbba:	4a10      	ldr	r2, [pc, #64]	; (800dbfc <prvCheckForValidListAndQueue+0x68>)
 800dbbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	4b11      	ldr	r3, [pc, #68]	; (800dc08 <prvCheckForValidListAndQueue+0x74>)
 800dbc4:	4a11      	ldr	r2, [pc, #68]	; (800dc0c <prvCheckForValidListAndQueue+0x78>)
 800dbc6:	2110      	movs	r1, #16
 800dbc8:	200a      	movs	r0, #10
 800dbca:	f7fd fe2f 	bl	800b82c <xQueueGenericCreateStatic>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	4a08      	ldr	r2, [pc, #32]	; (800dbf4 <prvCheckForValidListAndQueue+0x60>)
 800dbd2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dbd4:	4b07      	ldr	r3, [pc, #28]	; (800dbf4 <prvCheckForValidListAndQueue+0x60>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d005      	beq.n	800dbe8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dbdc:	4b05      	ldr	r3, [pc, #20]	; (800dbf4 <prvCheckForValidListAndQueue+0x60>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	490b      	ldr	r1, [pc, #44]	; (800dc10 <prvCheckForValidListAndQueue+0x7c>)
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fe fbf2 	bl	800c3cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dbe8:	f000 f938 	bl	800de5c <vPortExitCritical>
}
 800dbec:	bf00      	nop
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	20000da0 	.word	0x20000da0
 800dbf8:	20000d70 	.word	0x20000d70
 800dbfc:	20000d84 	.word	0x20000d84
 800dc00:	20000d98 	.word	0x20000d98
 800dc04:	20000d9c 	.word	0x20000d9c
 800dc08:	20000e4c 	.word	0x20000e4c
 800dc0c:	20000dac 	.word	0x20000dac
 800dc10:	0800f030 	.word	0x0800f030

0800dc14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dc14:	b480      	push	{r7}
 800dc16:	b085      	sub	sp, #20
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	3b04      	subs	r3, #4
 800dc24:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dc2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	3b04      	subs	r3, #4
 800dc32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	f023 0201 	bic.w	r2, r3, #1
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	3b04      	subs	r3, #4
 800dc42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dc44:	4a08      	ldr	r2, [pc, #32]	; (800dc68 <pxPortInitialiseStack+0x54>)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	3b14      	subs	r3, #20
 800dc4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	3b20      	subs	r3, #32
 800dc5a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3714      	adds	r7, #20
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bc80      	pop	{r7}
 800dc66:	4770      	bx	lr
 800dc68:	0800dc6d 	.word	0x0800dc6d

0800dc6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b085      	sub	sp, #20
 800dc70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800dc72:	2300      	movs	r3, #0
 800dc74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dc76:	4b12      	ldr	r3, [pc, #72]	; (800dcc0 <prvTaskExitError+0x54>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc7e:	d00a      	beq.n	800dc96 <prvTaskExitError+0x2a>
	__asm volatile
 800dc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	60fb      	str	r3, [r7, #12]
}
 800dc92:	bf00      	nop
 800dc94:	e7fe      	b.n	800dc94 <prvTaskExitError+0x28>
	__asm volatile
 800dc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9a:	f383 8811 	msr	BASEPRI, r3
 800dc9e:	f3bf 8f6f 	isb	sy
 800dca2:	f3bf 8f4f 	dsb	sy
 800dca6:	60bb      	str	r3, [r7, #8]
}
 800dca8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dcaa:	bf00      	nop
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d0fc      	beq.n	800dcac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dcb2:	bf00      	nop
 800dcb4:	bf00      	nop
 800dcb6:	3714      	adds	r7, #20
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bc80      	pop	{r7}
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	2000012c 	.word	0x2000012c
	...

0800dcd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dcd0:	4b07      	ldr	r3, [pc, #28]	; (800dcf0 <pxCurrentTCBConst2>)
 800dcd2:	6819      	ldr	r1, [r3, #0]
 800dcd4:	6808      	ldr	r0, [r1, #0]
 800dcd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800dcda:	f380 8809 	msr	PSP, r0
 800dcde:	f3bf 8f6f 	isb	sy
 800dce2:	f04f 0000 	mov.w	r0, #0
 800dce6:	f380 8811 	msr	BASEPRI, r0
 800dcea:	f04e 0e0d 	orr.w	lr, lr, #13
 800dcee:	4770      	bx	lr

0800dcf0 <pxCurrentTCBConst2>:
 800dcf0:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dcf4:	bf00      	nop
 800dcf6:	bf00      	nop

0800dcf8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800dcf8:	4806      	ldr	r0, [pc, #24]	; (800dd14 <prvPortStartFirstTask+0x1c>)
 800dcfa:	6800      	ldr	r0, [r0, #0]
 800dcfc:	6800      	ldr	r0, [r0, #0]
 800dcfe:	f380 8808 	msr	MSP, r0
 800dd02:	b662      	cpsie	i
 800dd04:	b661      	cpsie	f
 800dd06:	f3bf 8f4f 	dsb	sy
 800dd0a:	f3bf 8f6f 	isb	sy
 800dd0e:	df00      	svc	0
 800dd10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dd12:	bf00      	nop
 800dd14:	e000ed08 	.word	0xe000ed08

0800dd18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dd1e:	4b32      	ldr	r3, [pc, #200]	; (800dde8 <xPortStartScheduler+0xd0>)
 800dd20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	22ff      	movs	r2, #255	; 0xff
 800dd2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dd38:	78fb      	ldrb	r3, [r7, #3]
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dd40:	b2da      	uxtb	r2, r3
 800dd42:	4b2a      	ldr	r3, [pc, #168]	; (800ddec <xPortStartScheduler+0xd4>)
 800dd44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dd46:	4b2a      	ldr	r3, [pc, #168]	; (800ddf0 <xPortStartScheduler+0xd8>)
 800dd48:	2207      	movs	r2, #7
 800dd4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd4c:	e009      	b.n	800dd62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800dd4e:	4b28      	ldr	r3, [pc, #160]	; (800ddf0 <xPortStartScheduler+0xd8>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	3b01      	subs	r3, #1
 800dd54:	4a26      	ldr	r2, [pc, #152]	; (800ddf0 <xPortStartScheduler+0xd8>)
 800dd56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dd58:	78fb      	ldrb	r3, [r7, #3]
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	005b      	lsls	r3, r3, #1
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd62:	78fb      	ldrb	r3, [r7, #3]
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd6a:	2b80      	cmp	r3, #128	; 0x80
 800dd6c:	d0ef      	beq.n	800dd4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dd6e:	4b20      	ldr	r3, [pc, #128]	; (800ddf0 <xPortStartScheduler+0xd8>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f1c3 0307 	rsb	r3, r3, #7
 800dd76:	2b04      	cmp	r3, #4
 800dd78:	d00a      	beq.n	800dd90 <xPortStartScheduler+0x78>
	__asm volatile
 800dd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7e:	f383 8811 	msr	BASEPRI, r3
 800dd82:	f3bf 8f6f 	isb	sy
 800dd86:	f3bf 8f4f 	dsb	sy
 800dd8a:	60bb      	str	r3, [r7, #8]
}
 800dd8c:	bf00      	nop
 800dd8e:	e7fe      	b.n	800dd8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dd90:	4b17      	ldr	r3, [pc, #92]	; (800ddf0 <xPortStartScheduler+0xd8>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	021b      	lsls	r3, r3, #8
 800dd96:	4a16      	ldr	r2, [pc, #88]	; (800ddf0 <xPortStartScheduler+0xd8>)
 800dd98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dd9a:	4b15      	ldr	r3, [pc, #84]	; (800ddf0 <xPortStartScheduler+0xd8>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dda2:	4a13      	ldr	r2, [pc, #76]	; (800ddf0 <xPortStartScheduler+0xd8>)
 800dda4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	b2da      	uxtb	r2, r3
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ddae:	4b11      	ldr	r3, [pc, #68]	; (800ddf4 <xPortStartScheduler+0xdc>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4a10      	ldr	r2, [pc, #64]	; (800ddf4 <xPortStartScheduler+0xdc>)
 800ddb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ddb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ddba:	4b0e      	ldr	r3, [pc, #56]	; (800ddf4 <xPortStartScheduler+0xdc>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4a0d      	ldr	r2, [pc, #52]	; (800ddf4 <xPortStartScheduler+0xdc>)
 800ddc0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ddc4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ddc6:	f000 f8b9 	bl	800df3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ddca:	4b0b      	ldr	r3, [pc, #44]	; (800ddf8 <xPortStartScheduler+0xe0>)
 800ddcc:	2200      	movs	r2, #0
 800ddce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ddd0:	f7ff ff92 	bl	800dcf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ddd4:	f7fe ff7e 	bl	800ccd4 <vTaskSwitchContext>
	prvTaskExitError();
 800ddd8:	f7ff ff48 	bl	800dc6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dddc:	2300      	movs	r3, #0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3710      	adds	r7, #16
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
 800dde6:	bf00      	nop
 800dde8:	e000e400 	.word	0xe000e400
 800ddec:	20000e9c 	.word	0x20000e9c
 800ddf0:	20000ea0 	.word	0x20000ea0
 800ddf4:	e000ed20 	.word	0xe000ed20
 800ddf8:	2000012c 	.word	0x2000012c

0800ddfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b083      	sub	sp, #12
 800de00:	af00      	add	r7, sp, #0
	__asm volatile
 800de02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de06:	f383 8811 	msr	BASEPRI, r3
 800de0a:	f3bf 8f6f 	isb	sy
 800de0e:	f3bf 8f4f 	dsb	sy
 800de12:	607b      	str	r3, [r7, #4]
}
 800de14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800de16:	4b0f      	ldr	r3, [pc, #60]	; (800de54 <vPortEnterCritical+0x58>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	3301      	adds	r3, #1
 800de1c:	4a0d      	ldr	r2, [pc, #52]	; (800de54 <vPortEnterCritical+0x58>)
 800de1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800de20:	4b0c      	ldr	r3, [pc, #48]	; (800de54 <vPortEnterCritical+0x58>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b01      	cmp	r3, #1
 800de26:	d10f      	bne.n	800de48 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800de28:	4b0b      	ldr	r3, [pc, #44]	; (800de58 <vPortEnterCritical+0x5c>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d00a      	beq.n	800de48 <vPortEnterCritical+0x4c>
	__asm volatile
 800de32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de36:	f383 8811 	msr	BASEPRI, r3
 800de3a:	f3bf 8f6f 	isb	sy
 800de3e:	f3bf 8f4f 	dsb	sy
 800de42:	603b      	str	r3, [r7, #0]
}
 800de44:	bf00      	nop
 800de46:	e7fe      	b.n	800de46 <vPortEnterCritical+0x4a>
	}
}
 800de48:	bf00      	nop
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bc80      	pop	{r7}
 800de50:	4770      	bx	lr
 800de52:	bf00      	nop
 800de54:	2000012c 	.word	0x2000012c
 800de58:	e000ed04 	.word	0xe000ed04

0800de5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800de5c:	b480      	push	{r7}
 800de5e:	b083      	sub	sp, #12
 800de60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800de62:	4b11      	ldr	r3, [pc, #68]	; (800dea8 <vPortExitCritical+0x4c>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d10a      	bne.n	800de80 <vPortExitCritical+0x24>
	__asm volatile
 800de6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6e:	f383 8811 	msr	BASEPRI, r3
 800de72:	f3bf 8f6f 	isb	sy
 800de76:	f3bf 8f4f 	dsb	sy
 800de7a:	607b      	str	r3, [r7, #4]
}
 800de7c:	bf00      	nop
 800de7e:	e7fe      	b.n	800de7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800de80:	4b09      	ldr	r3, [pc, #36]	; (800dea8 <vPortExitCritical+0x4c>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	3b01      	subs	r3, #1
 800de86:	4a08      	ldr	r2, [pc, #32]	; (800dea8 <vPortExitCritical+0x4c>)
 800de88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800de8a:	4b07      	ldr	r3, [pc, #28]	; (800dea8 <vPortExitCritical+0x4c>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d105      	bne.n	800de9e <vPortExitCritical+0x42>
 800de92:	2300      	movs	r3, #0
 800de94:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	f383 8811 	msr	BASEPRI, r3
}
 800de9c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800de9e:	bf00      	nop
 800dea0:	370c      	adds	r7, #12
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bc80      	pop	{r7}
 800dea6:	4770      	bx	lr
 800dea8:	2000012c 	.word	0x2000012c
 800deac:	00000000 	.word	0x00000000

0800deb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800deb0:	f3ef 8009 	mrs	r0, PSP
 800deb4:	f3bf 8f6f 	isb	sy
 800deb8:	4b0d      	ldr	r3, [pc, #52]	; (800def0 <pxCurrentTCBConst>)
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800dec0:	6010      	str	r0, [r2, #0]
 800dec2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800dec6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800deca:	f380 8811 	msr	BASEPRI, r0
 800dece:	f7fe ff01 	bl	800ccd4 <vTaskSwitchContext>
 800ded2:	f04f 0000 	mov.w	r0, #0
 800ded6:	f380 8811 	msr	BASEPRI, r0
 800deda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dede:	6819      	ldr	r1, [r3, #0]
 800dee0:	6808      	ldr	r0, [r1, #0]
 800dee2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800dee6:	f380 8809 	msr	PSP, r0
 800deea:	f3bf 8f6f 	isb	sy
 800deee:	4770      	bx	lr

0800def0 <pxCurrentTCBConst>:
 800def0:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800def4:	bf00      	nop
 800def6:	bf00      	nop

0800def8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
	__asm volatile
 800defe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df02:	f383 8811 	msr	BASEPRI, r3
 800df06:	f3bf 8f6f 	isb	sy
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	607b      	str	r3, [r7, #4]
}
 800df10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800df12:	f7fe fe21 	bl	800cb58 <xTaskIncrementTick>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d003      	beq.n	800df24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800df1c:	4b06      	ldr	r3, [pc, #24]	; (800df38 <SysTick_Handler+0x40>)
 800df1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df22:	601a      	str	r2, [r3, #0]
 800df24:	2300      	movs	r3, #0
 800df26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	f383 8811 	msr	BASEPRI, r3
}
 800df2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800df30:	bf00      	nop
 800df32:	3708      	adds	r7, #8
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}
 800df38:	e000ed04 	.word	0xe000ed04

0800df3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800df3c:	b480      	push	{r7}
 800df3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800df40:	4b0a      	ldr	r3, [pc, #40]	; (800df6c <vPortSetupTimerInterrupt+0x30>)
 800df42:	2200      	movs	r2, #0
 800df44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800df46:	4b0a      	ldr	r3, [pc, #40]	; (800df70 <vPortSetupTimerInterrupt+0x34>)
 800df48:	2200      	movs	r2, #0
 800df4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800df4c:	4b09      	ldr	r3, [pc, #36]	; (800df74 <vPortSetupTimerInterrupt+0x38>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a09      	ldr	r2, [pc, #36]	; (800df78 <vPortSetupTimerInterrupt+0x3c>)
 800df52:	fba2 2303 	umull	r2, r3, r2, r3
 800df56:	099b      	lsrs	r3, r3, #6
 800df58:	4a08      	ldr	r2, [pc, #32]	; (800df7c <vPortSetupTimerInterrupt+0x40>)
 800df5a:	3b01      	subs	r3, #1
 800df5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800df5e:	4b03      	ldr	r3, [pc, #12]	; (800df6c <vPortSetupTimerInterrupt+0x30>)
 800df60:	2207      	movs	r2, #7
 800df62:	601a      	str	r2, [r3, #0]
}
 800df64:	bf00      	nop
 800df66:	46bd      	mov	sp, r7
 800df68:	bc80      	pop	{r7}
 800df6a:	4770      	bx	lr
 800df6c:	e000e010 	.word	0xe000e010
 800df70:	e000e018 	.word	0xe000e018
 800df74:	20000010 	.word	0x20000010
 800df78:	10624dd3 	.word	0x10624dd3
 800df7c:	e000e014 	.word	0xe000e014

0800df80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800df80:	b480      	push	{r7}
 800df82:	b085      	sub	sp, #20
 800df84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800df86:	f3ef 8305 	mrs	r3, IPSR
 800df8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2b0f      	cmp	r3, #15
 800df90:	d914      	bls.n	800dfbc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800df92:	4a16      	ldr	r2, [pc, #88]	; (800dfec <vPortValidateInterruptPriority+0x6c>)
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	4413      	add	r3, r2
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800df9c:	4b14      	ldr	r3, [pc, #80]	; (800dff0 <vPortValidateInterruptPriority+0x70>)
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	7afa      	ldrb	r2, [r7, #11]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d20a      	bcs.n	800dfbc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfaa:	f383 8811 	msr	BASEPRI, r3
 800dfae:	f3bf 8f6f 	isb	sy
 800dfb2:	f3bf 8f4f 	dsb	sy
 800dfb6:	607b      	str	r3, [r7, #4]
}
 800dfb8:	bf00      	nop
 800dfba:	e7fe      	b.n	800dfba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dfbc:	4b0d      	ldr	r3, [pc, #52]	; (800dff4 <vPortValidateInterruptPriority+0x74>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dfc4:	4b0c      	ldr	r3, [pc, #48]	; (800dff8 <vPortValidateInterruptPriority+0x78>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d90a      	bls.n	800dfe2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd0:	f383 8811 	msr	BASEPRI, r3
 800dfd4:	f3bf 8f6f 	isb	sy
 800dfd8:	f3bf 8f4f 	dsb	sy
 800dfdc:	603b      	str	r3, [r7, #0]
}
 800dfde:	bf00      	nop
 800dfe0:	e7fe      	b.n	800dfe0 <vPortValidateInterruptPriority+0x60>
	}
 800dfe2:	bf00      	nop
 800dfe4:	3714      	adds	r7, #20
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bc80      	pop	{r7}
 800dfea:	4770      	bx	lr
 800dfec:	e000e3f0 	.word	0xe000e3f0
 800dff0:	20000e9c 	.word	0x20000e9c
 800dff4:	e000ed0c 	.word	0xe000ed0c
 800dff8:	20000ea0 	.word	0x20000ea0

0800dffc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b08a      	sub	sp, #40	; 0x28
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e004:	2300      	movs	r3, #0
 800e006:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e008:	f7fe fcec 	bl	800c9e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e00c:	4b58      	ldr	r3, [pc, #352]	; (800e170 <pvPortMalloc+0x174>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d101      	bne.n	800e018 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e014:	f000 f910 	bl	800e238 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e018:	4b56      	ldr	r3, [pc, #344]	; (800e174 <pvPortMalloc+0x178>)
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	4013      	ands	r3, r2
 800e020:	2b00      	cmp	r3, #0
 800e022:	f040 808e 	bne.w	800e142 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d01d      	beq.n	800e068 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e02c:	2208      	movs	r2, #8
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	4413      	add	r3, r2
 800e032:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f003 0307 	and.w	r3, r3, #7
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d014      	beq.n	800e068 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f023 0307 	bic.w	r3, r3, #7
 800e044:	3308      	adds	r3, #8
 800e046:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f003 0307 	and.w	r3, r3, #7
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d00a      	beq.n	800e068 <pvPortMalloc+0x6c>
	__asm volatile
 800e052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e056:	f383 8811 	msr	BASEPRI, r3
 800e05a:	f3bf 8f6f 	isb	sy
 800e05e:	f3bf 8f4f 	dsb	sy
 800e062:	617b      	str	r3, [r7, #20]
}
 800e064:	bf00      	nop
 800e066:	e7fe      	b.n	800e066 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d069      	beq.n	800e142 <pvPortMalloc+0x146>
 800e06e:	4b42      	ldr	r3, [pc, #264]	; (800e178 <pvPortMalloc+0x17c>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	429a      	cmp	r2, r3
 800e076:	d864      	bhi.n	800e142 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e078:	4b40      	ldr	r3, [pc, #256]	; (800e17c <pvPortMalloc+0x180>)
 800e07a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e07c:	4b3f      	ldr	r3, [pc, #252]	; (800e17c <pvPortMalloc+0x180>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e082:	e004      	b.n	800e08e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e086:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	687a      	ldr	r2, [r7, #4]
 800e094:	429a      	cmp	r2, r3
 800e096:	d903      	bls.n	800e0a0 <pvPortMalloc+0xa4>
 800e098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d1f1      	bne.n	800e084 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e0a0:	4b33      	ldr	r3, [pc, #204]	; (800e170 <pvPortMalloc+0x174>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d04b      	beq.n	800e142 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e0aa:	6a3b      	ldr	r3, [r7, #32]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2208      	movs	r2, #8
 800e0b0:	4413      	add	r3, r2
 800e0b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b6:	681a      	ldr	r2, [r3, #0]
 800e0b8:	6a3b      	ldr	r3, [r7, #32]
 800e0ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0be:	685a      	ldr	r2, [r3, #4]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	1ad2      	subs	r2, r2, r3
 800e0c4:	2308      	movs	r3, #8
 800e0c6:	005b      	lsls	r3, r3, #1
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d91f      	bls.n	800e10c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e0cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0d4:	69bb      	ldr	r3, [r7, #24]
 800e0d6:	f003 0307 	and.w	r3, r3, #7
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d00a      	beq.n	800e0f4 <pvPortMalloc+0xf8>
	__asm volatile
 800e0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e2:	f383 8811 	msr	BASEPRI, r3
 800e0e6:	f3bf 8f6f 	isb	sy
 800e0ea:	f3bf 8f4f 	dsb	sy
 800e0ee:	613b      	str	r3, [r7, #16]
}
 800e0f0:	bf00      	nop
 800e0f2:	e7fe      	b.n	800e0f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f6:	685a      	ldr	r2, [r3, #4]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	1ad2      	subs	r2, r2, r3
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e106:	69b8      	ldr	r0, [r7, #24]
 800e108:	f000 f8f8 	bl	800e2fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e10c:	4b1a      	ldr	r3, [pc, #104]	; (800e178 <pvPortMalloc+0x17c>)
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	1ad3      	subs	r3, r2, r3
 800e116:	4a18      	ldr	r2, [pc, #96]	; (800e178 <pvPortMalloc+0x17c>)
 800e118:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e11a:	4b17      	ldr	r3, [pc, #92]	; (800e178 <pvPortMalloc+0x17c>)
 800e11c:	681a      	ldr	r2, [r3, #0]
 800e11e:	4b18      	ldr	r3, [pc, #96]	; (800e180 <pvPortMalloc+0x184>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	429a      	cmp	r2, r3
 800e124:	d203      	bcs.n	800e12e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e126:	4b14      	ldr	r3, [pc, #80]	; (800e178 <pvPortMalloc+0x17c>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4a15      	ldr	r2, [pc, #84]	; (800e180 <pvPortMalloc+0x184>)
 800e12c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e130:	685a      	ldr	r2, [r3, #4]
 800e132:	4b10      	ldr	r3, [pc, #64]	; (800e174 <pvPortMalloc+0x178>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	431a      	orrs	r2, r3
 800e138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13e:	2200      	movs	r2, #0
 800e140:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e142:	f7fe fc5d 	bl	800ca00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e146:	69fb      	ldr	r3, [r7, #28]
 800e148:	f003 0307 	and.w	r3, r3, #7
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00a      	beq.n	800e166 <pvPortMalloc+0x16a>
	__asm volatile
 800e150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e154:	f383 8811 	msr	BASEPRI, r3
 800e158:	f3bf 8f6f 	isb	sy
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	60fb      	str	r3, [r7, #12]
}
 800e162:	bf00      	nop
 800e164:	e7fe      	b.n	800e164 <pvPortMalloc+0x168>
	return pvReturn;
 800e166:	69fb      	ldr	r3, [r7, #28]
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3728      	adds	r7, #40	; 0x28
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	20002248 	.word	0x20002248
 800e174:	20002254 	.word	0x20002254
 800e178:	2000224c 	.word	0x2000224c
 800e17c:	20002240 	.word	0x20002240
 800e180:	20002250 	.word	0x20002250

0800e184 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b086      	sub	sp, #24
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d048      	beq.n	800e228 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e196:	2308      	movs	r3, #8
 800e198:	425b      	negs	r3, r3
 800e19a:	697a      	ldr	r2, [r7, #20]
 800e19c:	4413      	add	r3, r2
 800e19e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	685a      	ldr	r2, [r3, #4]
 800e1a8:	4b21      	ldr	r3, [pc, #132]	; (800e230 <vPortFree+0xac>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4013      	ands	r3, r2
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d10a      	bne.n	800e1c8 <vPortFree+0x44>
	__asm volatile
 800e1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b6:	f383 8811 	msr	BASEPRI, r3
 800e1ba:	f3bf 8f6f 	isb	sy
 800e1be:	f3bf 8f4f 	dsb	sy
 800e1c2:	60fb      	str	r3, [r7, #12]
}
 800e1c4:	bf00      	nop
 800e1c6:	e7fe      	b.n	800e1c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d00a      	beq.n	800e1e6 <vPortFree+0x62>
	__asm volatile
 800e1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d4:	f383 8811 	msr	BASEPRI, r3
 800e1d8:	f3bf 8f6f 	isb	sy
 800e1dc:	f3bf 8f4f 	dsb	sy
 800e1e0:	60bb      	str	r3, [r7, #8]
}
 800e1e2:	bf00      	nop
 800e1e4:	e7fe      	b.n	800e1e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	685a      	ldr	r2, [r3, #4]
 800e1ea:	4b11      	ldr	r3, [pc, #68]	; (800e230 <vPortFree+0xac>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4013      	ands	r3, r2
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d019      	beq.n	800e228 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d115      	bne.n	800e228 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	685a      	ldr	r2, [r3, #4]
 800e200:	4b0b      	ldr	r3, [pc, #44]	; (800e230 <vPortFree+0xac>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	43db      	mvns	r3, r3
 800e206:	401a      	ands	r2, r3
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e20c:	f7fe fbea 	bl	800c9e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	685a      	ldr	r2, [r3, #4]
 800e214:	4b07      	ldr	r3, [pc, #28]	; (800e234 <vPortFree+0xb0>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4413      	add	r3, r2
 800e21a:	4a06      	ldr	r2, [pc, #24]	; (800e234 <vPortFree+0xb0>)
 800e21c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e21e:	6938      	ldr	r0, [r7, #16]
 800e220:	f000 f86c 	bl	800e2fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e224:	f7fe fbec 	bl	800ca00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e228:	bf00      	nop
 800e22a:	3718      	adds	r7, #24
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}
 800e230:	20002254 	.word	0x20002254
 800e234:	2000224c 	.word	0x2000224c

0800e238 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e238:	b480      	push	{r7}
 800e23a:	b085      	sub	sp, #20
 800e23c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e23e:	f241 339c 	movw	r3, #5020	; 0x139c
 800e242:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e244:	4b27      	ldr	r3, [pc, #156]	; (800e2e4 <prvHeapInit+0xac>)
 800e246:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f003 0307 	and.w	r3, r3, #7
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00c      	beq.n	800e26c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	3307      	adds	r3, #7
 800e256:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f023 0307 	bic.w	r3, r3, #7
 800e25e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e260:	68ba      	ldr	r2, [r7, #8]
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	1ad3      	subs	r3, r2, r3
 800e266:	4a1f      	ldr	r2, [pc, #124]	; (800e2e4 <prvHeapInit+0xac>)
 800e268:	4413      	add	r3, r2
 800e26a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e270:	4a1d      	ldr	r2, [pc, #116]	; (800e2e8 <prvHeapInit+0xb0>)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e276:	4b1c      	ldr	r3, [pc, #112]	; (800e2e8 <prvHeapInit+0xb0>)
 800e278:	2200      	movs	r2, #0
 800e27a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	68ba      	ldr	r2, [r7, #8]
 800e280:	4413      	add	r3, r2
 800e282:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e284:	2208      	movs	r2, #8
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	1a9b      	subs	r3, r3, r2
 800e28a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f023 0307 	bic.w	r3, r3, #7
 800e292:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	4a15      	ldr	r2, [pc, #84]	; (800e2ec <prvHeapInit+0xb4>)
 800e298:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e29a:	4b14      	ldr	r3, [pc, #80]	; (800e2ec <prvHeapInit+0xb4>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e2a2:	4b12      	ldr	r3, [pc, #72]	; (800e2ec <prvHeapInit+0xb4>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	68fa      	ldr	r2, [r7, #12]
 800e2b2:	1ad2      	subs	r2, r2, r3
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e2b8:	4b0c      	ldr	r3, [pc, #48]	; (800e2ec <prvHeapInit+0xb4>)
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	4a0a      	ldr	r2, [pc, #40]	; (800e2f0 <prvHeapInit+0xb8>)
 800e2c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	4a09      	ldr	r2, [pc, #36]	; (800e2f4 <prvHeapInit+0xbc>)
 800e2ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e2d0:	4b09      	ldr	r3, [pc, #36]	; (800e2f8 <prvHeapInit+0xc0>)
 800e2d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e2d6:	601a      	str	r2, [r3, #0]
}
 800e2d8:	bf00      	nop
 800e2da:	3714      	adds	r7, #20
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bc80      	pop	{r7}
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop
 800e2e4:	20000ea4 	.word	0x20000ea4
 800e2e8:	20002240 	.word	0x20002240
 800e2ec:	20002248 	.word	0x20002248
 800e2f0:	20002250 	.word	0x20002250
 800e2f4:	2000224c 	.word	0x2000224c
 800e2f8:	20002254 	.word	0x20002254

0800e2fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b085      	sub	sp, #20
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e304:	4b27      	ldr	r3, [pc, #156]	; (800e3a4 <prvInsertBlockIntoFreeList+0xa8>)
 800e306:	60fb      	str	r3, [r7, #12]
 800e308:	e002      	b.n	800e310 <prvInsertBlockIntoFreeList+0x14>
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	60fb      	str	r3, [r7, #12]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	429a      	cmp	r2, r3
 800e318:	d8f7      	bhi.n	800e30a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	68ba      	ldr	r2, [r7, #8]
 800e324:	4413      	add	r3, r2
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d108      	bne.n	800e33e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	685a      	ldr	r2, [r3, #4]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	441a      	add	r2, r3
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	68ba      	ldr	r2, [r7, #8]
 800e348:	441a      	add	r2, r3
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d118      	bne.n	800e384 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	4b14      	ldr	r3, [pc, #80]	; (800e3a8 <prvInsertBlockIntoFreeList+0xac>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d00d      	beq.n	800e37a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	685a      	ldr	r2, [r3, #4]
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	441a      	add	r2, r3
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	681a      	ldr	r2, [r3, #0]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	601a      	str	r2, [r3, #0]
 800e378:	e008      	b.n	800e38c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e37a:	4b0b      	ldr	r3, [pc, #44]	; (800e3a8 <prvInsertBlockIntoFreeList+0xac>)
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	601a      	str	r2, [r3, #0]
 800e382:	e003      	b.n	800e38c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681a      	ldr	r2, [r3, #0]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e38c:	68fa      	ldr	r2, [r7, #12]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	429a      	cmp	r2, r3
 800e392:	d002      	beq.n	800e39a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e39a:	bf00      	nop
 800e39c:	3714      	adds	r7, #20
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bc80      	pop	{r7}
 800e3a2:	4770      	bx	lr
 800e3a4:	20002240 	.word	0x20002240
 800e3a8:	20002248 	.word	0x20002248

0800e3ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	4912      	ldr	r1, [pc, #72]	; (800e3fc <MX_USB_DEVICE_Init+0x50>)
 800e3b4:	4812      	ldr	r0, [pc, #72]	; (800e400 <MX_USB_DEVICE_Init+0x54>)
 800e3b6:	f7fb fdf6 	bl	8009fa6 <USBD_Init>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d001      	beq.n	800e3c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e3c0:	f7f2 feca 	bl	8001158 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e3c4:	490f      	ldr	r1, [pc, #60]	; (800e404 <MX_USB_DEVICE_Init+0x58>)
 800e3c6:	480e      	ldr	r0, [pc, #56]	; (800e400 <MX_USB_DEVICE_Init+0x54>)
 800e3c8:	f7fb fe18 	bl	8009ffc <USBD_RegisterClass>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d001      	beq.n	800e3d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e3d2:	f7f2 fec1 	bl	8001158 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e3d6:	490c      	ldr	r1, [pc, #48]	; (800e408 <MX_USB_DEVICE_Init+0x5c>)
 800e3d8:	4809      	ldr	r0, [pc, #36]	; (800e400 <MX_USB_DEVICE_Init+0x54>)
 800e3da:	f7fb fd49 	bl	8009e70 <USBD_CDC_RegisterInterface>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d001      	beq.n	800e3e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e3e4:	f7f2 feb8 	bl	8001158 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e3e8:	4805      	ldr	r0, [pc, #20]	; (800e400 <MX_USB_DEVICE_Init+0x54>)
 800e3ea:	f7fb fe20 	bl	800a02e <USBD_Start>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d001      	beq.n	800e3f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e3f4:	f7f2 feb0 	bl	8001158 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e3f8:	bf00      	nop
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	20000140 	.word	0x20000140
 800e400:	200026d0 	.word	0x200026d0
 800e404:	20000028 	.word	0x20000028
 800e408:	20000130 	.word	0x20000130

0800e40c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e410:	2200      	movs	r2, #0
 800e412:	4905      	ldr	r1, [pc, #20]	; (800e428 <CDC_Init_FS+0x1c>)
 800e414:	4805      	ldr	r0, [pc, #20]	; (800e42c <CDC_Init_FS+0x20>)
 800e416:	f7fb fd41 	bl	8009e9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e41a:	4905      	ldr	r1, [pc, #20]	; (800e430 <CDC_Init_FS+0x24>)
 800e41c:	4803      	ldr	r0, [pc, #12]	; (800e42c <CDC_Init_FS+0x20>)
 800e41e:	f7fb fd56 	bl	8009ece <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e422:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e424:	4618      	mov	r0, r3
 800e426:	bd80      	pop	{r7, pc}
 800e428:	20002d7c 	.word	0x20002d7c
 800e42c:	200026d0 	.word	0x200026d0
 800e430:	20002994 	.word	0x20002994

0800e434 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e434:	b480      	push	{r7}
 800e436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e438:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bc80      	pop	{r7}
 800e440:	4770      	bx	lr
	...

0800e444 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	4603      	mov	r3, r0
 800e44c:	6039      	str	r1, [r7, #0]
 800e44e:	71fb      	strb	r3, [r7, #7]
 800e450:	4613      	mov	r3, r2
 800e452:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e454:	79fb      	ldrb	r3, [r7, #7]
 800e456:	2b23      	cmp	r3, #35	; 0x23
 800e458:	d84a      	bhi.n	800e4f0 <CDC_Control_FS+0xac>
 800e45a:	a201      	add	r2, pc, #4	; (adr r2, 800e460 <CDC_Control_FS+0x1c>)
 800e45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e460:	0800e4f1 	.word	0x0800e4f1
 800e464:	0800e4f1 	.word	0x0800e4f1
 800e468:	0800e4f1 	.word	0x0800e4f1
 800e46c:	0800e4f1 	.word	0x0800e4f1
 800e470:	0800e4f1 	.word	0x0800e4f1
 800e474:	0800e4f1 	.word	0x0800e4f1
 800e478:	0800e4f1 	.word	0x0800e4f1
 800e47c:	0800e4f1 	.word	0x0800e4f1
 800e480:	0800e4f1 	.word	0x0800e4f1
 800e484:	0800e4f1 	.word	0x0800e4f1
 800e488:	0800e4f1 	.word	0x0800e4f1
 800e48c:	0800e4f1 	.word	0x0800e4f1
 800e490:	0800e4f1 	.word	0x0800e4f1
 800e494:	0800e4f1 	.word	0x0800e4f1
 800e498:	0800e4f1 	.word	0x0800e4f1
 800e49c:	0800e4f1 	.word	0x0800e4f1
 800e4a0:	0800e4f1 	.word	0x0800e4f1
 800e4a4:	0800e4f1 	.word	0x0800e4f1
 800e4a8:	0800e4f1 	.word	0x0800e4f1
 800e4ac:	0800e4f1 	.word	0x0800e4f1
 800e4b0:	0800e4f1 	.word	0x0800e4f1
 800e4b4:	0800e4f1 	.word	0x0800e4f1
 800e4b8:	0800e4f1 	.word	0x0800e4f1
 800e4bc:	0800e4f1 	.word	0x0800e4f1
 800e4c0:	0800e4f1 	.word	0x0800e4f1
 800e4c4:	0800e4f1 	.word	0x0800e4f1
 800e4c8:	0800e4f1 	.word	0x0800e4f1
 800e4cc:	0800e4f1 	.word	0x0800e4f1
 800e4d0:	0800e4f1 	.word	0x0800e4f1
 800e4d4:	0800e4f1 	.word	0x0800e4f1
 800e4d8:	0800e4f1 	.word	0x0800e4f1
 800e4dc:	0800e4f1 	.word	0x0800e4f1
 800e4e0:	0800e4f1 	.word	0x0800e4f1
 800e4e4:	0800e4f1 	.word	0x0800e4f1
 800e4e8:	0800e4f1 	.word	0x0800e4f1
 800e4ec:	0800e4f1 	.word	0x0800e4f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e4f0:	bf00      	nop
  }

  return (USBD_OK);
 800e4f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	370c      	adds	r7, #12
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bc80      	pop	{r7}
 800e4fc:	4770      	bx	lr
 800e4fe:	bf00      	nop

0800e500 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800e50a:	2300      	movs	r3, #0
 800e50c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800e50e:	2300      	movs	r3, #0
 800e510:	60fb      	str	r3, [r7, #12]
 800e512:	e00c      	b.n	800e52e <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800e514:	4b14      	ldr	r3, [pc, #80]	; (800e568 <CDC_Receive_FS+0x68>)
 800e516:	6818      	ldr	r0, [r3, #0]
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	18d1      	adds	r1, r2, r3
 800e51e:	f107 0208 	add.w	r2, r7, #8
 800e522:	2300      	movs	r3, #0
 800e524:	f7fd fba6 	bl	800bc74 <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	3301      	adds	r3, #1
 800e52c:	60fb      	str	r3, [r7, #12]
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	68fa      	ldr	r2, [r7, #12]
 800e534:	429a      	cmp	r2, r3
 800e536:	d3ed      	bcc.n	800e514 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e538:	6879      	ldr	r1, [r7, #4]
 800e53a:	480c      	ldr	r0, [pc, #48]	; (800e56c <CDC_Receive_FS+0x6c>)
 800e53c:	f7fb fcc7 	bl	8009ece <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e540:	480a      	ldr	r0, [pc, #40]	; (800e56c <CDC_Receive_FS+0x6c>)
 800e542:	f7fb fd06 	bl	8009f52 <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d007      	beq.n	800e55c <CDC_Receive_FS+0x5c>
 800e54c:	4b08      	ldr	r3, [pc, #32]	; (800e570 <CDC_Receive_FS+0x70>)
 800e54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e552:	601a      	str	r2, [r3, #0]
 800e554:	f3bf 8f4f 	dsb	sy
 800e558:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800e55c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3710      	adds	r7, #16
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	20002494 	.word	0x20002494
 800e56c:	200026d0 	.word	0x200026d0
 800e570:	e000ed04 	.word	0xe000ed04

0800e574 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b084      	sub	sp, #16
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	460b      	mov	r3, r1
 800e57e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e580:	2300      	movs	r3, #0
 800e582:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e584:	4b0d      	ldr	r3, [pc, #52]	; (800e5bc <CDC_Transmit_FS+0x48>)
 800e586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e58a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e592:	2b00      	cmp	r3, #0
 800e594:	d001      	beq.n	800e59a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e596:	2301      	movs	r3, #1
 800e598:	e00b      	b.n	800e5b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e59a:	887b      	ldrh	r3, [r7, #2]
 800e59c:	461a      	mov	r2, r3
 800e59e:	6879      	ldr	r1, [r7, #4]
 800e5a0:	4806      	ldr	r0, [pc, #24]	; (800e5bc <CDC_Transmit_FS+0x48>)
 800e5a2:	f7fb fc7b 	bl	8009e9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e5a6:	4805      	ldr	r0, [pc, #20]	; (800e5bc <CDC_Transmit_FS+0x48>)
 800e5a8:	f7fb fca4 	bl	8009ef4 <USBD_CDC_TransmitPacket>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3710      	adds	r7, #16
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	200026d0 	.word	0x200026d0

0800e5c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	6039      	str	r1, [r7, #0]
 800e5ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	2212      	movs	r2, #18
 800e5d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e5d2:	4b03      	ldr	r3, [pc, #12]	; (800e5e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	370c      	adds	r7, #12
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bc80      	pop	{r7}
 800e5dc:	4770      	bx	lr
 800e5de:	bf00      	nop
 800e5e0:	2000015c 	.word	0x2000015c

0800e5e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b083      	sub	sp, #12
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	6039      	str	r1, [r7, #0]
 800e5ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	2204      	movs	r2, #4
 800e5f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e5f6:	4b03      	ldr	r3, [pc, #12]	; (800e604 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	370c      	adds	r7, #12
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bc80      	pop	{r7}
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop
 800e604:	20000170 	.word	0x20000170

0800e608 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	4603      	mov	r3, r0
 800e610:	6039      	str	r1, [r7, #0]
 800e612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e614:	79fb      	ldrb	r3, [r7, #7]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d105      	bne.n	800e626 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e61a:	683a      	ldr	r2, [r7, #0]
 800e61c:	4907      	ldr	r1, [pc, #28]	; (800e63c <USBD_FS_ProductStrDescriptor+0x34>)
 800e61e:	4808      	ldr	r0, [pc, #32]	; (800e640 <USBD_FS_ProductStrDescriptor+0x38>)
 800e620:	f7fc fc7e 	bl	800af20 <USBD_GetString>
 800e624:	e004      	b.n	800e630 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e626:	683a      	ldr	r2, [r7, #0]
 800e628:	4904      	ldr	r1, [pc, #16]	; (800e63c <USBD_FS_ProductStrDescriptor+0x34>)
 800e62a:	4805      	ldr	r0, [pc, #20]	; (800e640 <USBD_FS_ProductStrDescriptor+0x38>)
 800e62c:	f7fc fc78 	bl	800af20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e630:	4b02      	ldr	r3, [pc, #8]	; (800e63c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e632:	4618      	mov	r0, r3
 800e634:	3708      	adds	r7, #8
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	20003164 	.word	0x20003164
 800e640:	0800f038 	.word	0x0800f038

0800e644 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	4603      	mov	r3, r0
 800e64c:	6039      	str	r1, [r7, #0]
 800e64e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e650:	683a      	ldr	r2, [r7, #0]
 800e652:	4904      	ldr	r1, [pc, #16]	; (800e664 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e654:	4804      	ldr	r0, [pc, #16]	; (800e668 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e656:	f7fc fc63 	bl	800af20 <USBD_GetString>
  return USBD_StrDesc;
 800e65a:	4b02      	ldr	r3, [pc, #8]	; (800e664 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3708      	adds	r7, #8
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	20003164 	.word	0x20003164
 800e668:	0800f044 	.word	0x0800f044

0800e66c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	4603      	mov	r3, r0
 800e674:	6039      	str	r1, [r7, #0]
 800e676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	221a      	movs	r2, #26
 800e67c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e67e:	f000 f843 	bl	800e708 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e682:	4b02      	ldr	r3, [pc, #8]	; (800e68c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e684:	4618      	mov	r0, r3
 800e686:	3708      	adds	r7, #8
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	20000174 	.word	0x20000174

0800e690 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	4603      	mov	r3, r0
 800e698:	6039      	str	r1, [r7, #0]
 800e69a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e69c:	79fb      	ldrb	r3, [r7, #7]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d105      	bne.n	800e6ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e6a2:	683a      	ldr	r2, [r7, #0]
 800e6a4:	4907      	ldr	r1, [pc, #28]	; (800e6c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e6a6:	4808      	ldr	r0, [pc, #32]	; (800e6c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e6a8:	f7fc fc3a 	bl	800af20 <USBD_GetString>
 800e6ac:	e004      	b.n	800e6b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e6ae:	683a      	ldr	r2, [r7, #0]
 800e6b0:	4904      	ldr	r1, [pc, #16]	; (800e6c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e6b2:	4805      	ldr	r0, [pc, #20]	; (800e6c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e6b4:	f7fc fc34 	bl	800af20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6b8:	4b02      	ldr	r3, [pc, #8]	; (800e6c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	20003164 	.word	0x20003164
 800e6c8:	0800f058 	.word	0x0800f058

0800e6cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b082      	sub	sp, #8
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	6039      	str	r1, [r7, #0]
 800e6d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e6d8:	79fb      	ldrb	r3, [r7, #7]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d105      	bne.n	800e6ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e6de:	683a      	ldr	r2, [r7, #0]
 800e6e0:	4907      	ldr	r1, [pc, #28]	; (800e700 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e6e2:	4808      	ldr	r0, [pc, #32]	; (800e704 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e6e4:	f7fc fc1c 	bl	800af20 <USBD_GetString>
 800e6e8:	e004      	b.n	800e6f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e6ea:	683a      	ldr	r2, [r7, #0]
 800e6ec:	4904      	ldr	r1, [pc, #16]	; (800e700 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e6ee:	4805      	ldr	r0, [pc, #20]	; (800e704 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e6f0:	f7fc fc16 	bl	800af20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6f4:	4b02      	ldr	r3, [pc, #8]	; (800e700 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	20003164 	.word	0x20003164
 800e704:	0800f064 	.word	0x0800f064

0800e708 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b084      	sub	sp, #16
 800e70c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e70e:	4b0f      	ldr	r3, [pc, #60]	; (800e74c <Get_SerialNum+0x44>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e714:	4b0e      	ldr	r3, [pc, #56]	; (800e750 <Get_SerialNum+0x48>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e71a:	4b0e      	ldr	r3, [pc, #56]	; (800e754 <Get_SerialNum+0x4c>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e720:	68fa      	ldr	r2, [r7, #12]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	4413      	add	r3, r2
 800e726:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d009      	beq.n	800e742 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e72e:	2208      	movs	r2, #8
 800e730:	4909      	ldr	r1, [pc, #36]	; (800e758 <Get_SerialNum+0x50>)
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f000 f814 	bl	800e760 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e738:	2204      	movs	r2, #4
 800e73a:	4908      	ldr	r1, [pc, #32]	; (800e75c <Get_SerialNum+0x54>)
 800e73c:	68b8      	ldr	r0, [r7, #8]
 800e73e:	f000 f80f 	bl	800e760 <IntToUnicode>
  }
}
 800e742:	bf00      	nop
 800e744:	3710      	adds	r7, #16
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	1ffff7e8 	.word	0x1ffff7e8
 800e750:	1ffff7ec 	.word	0x1ffff7ec
 800e754:	1ffff7f0 	.word	0x1ffff7f0
 800e758:	20000176 	.word	0x20000176
 800e75c:	20000186 	.word	0x20000186

0800e760 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e760:	b480      	push	{r7}
 800e762:	b087      	sub	sp, #28
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	4613      	mov	r3, r2
 800e76c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e76e:	2300      	movs	r3, #0
 800e770:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e772:	2300      	movs	r3, #0
 800e774:	75fb      	strb	r3, [r7, #23]
 800e776:	e027      	b.n	800e7c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	0f1b      	lsrs	r3, r3, #28
 800e77c:	2b09      	cmp	r3, #9
 800e77e:	d80b      	bhi.n	800e798 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	0f1b      	lsrs	r3, r3, #28
 800e784:	b2da      	uxtb	r2, r3
 800e786:	7dfb      	ldrb	r3, [r7, #23]
 800e788:	005b      	lsls	r3, r3, #1
 800e78a:	4619      	mov	r1, r3
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	440b      	add	r3, r1
 800e790:	3230      	adds	r2, #48	; 0x30
 800e792:	b2d2      	uxtb	r2, r2
 800e794:	701a      	strb	r2, [r3, #0]
 800e796:	e00a      	b.n	800e7ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	0f1b      	lsrs	r3, r3, #28
 800e79c:	b2da      	uxtb	r2, r3
 800e79e:	7dfb      	ldrb	r3, [r7, #23]
 800e7a0:	005b      	lsls	r3, r3, #1
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	440b      	add	r3, r1
 800e7a8:	3237      	adds	r2, #55	; 0x37
 800e7aa:	b2d2      	uxtb	r2, r2
 800e7ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	011b      	lsls	r3, r3, #4
 800e7b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e7b4:	7dfb      	ldrb	r3, [r7, #23]
 800e7b6:	005b      	lsls	r3, r3, #1
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	68ba      	ldr	r2, [r7, #8]
 800e7bc:	4413      	add	r3, r2
 800e7be:	2200      	movs	r2, #0
 800e7c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e7c2:	7dfb      	ldrb	r3, [r7, #23]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	75fb      	strb	r3, [r7, #23]
 800e7c8:	7dfa      	ldrb	r2, [r7, #23]
 800e7ca:	79fb      	ldrb	r3, [r7, #7]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d3d3      	bcc.n	800e778 <IntToUnicode+0x18>
  }
}
 800e7d0:	bf00      	nop
 800e7d2:	bf00      	nop
 800e7d4:	371c      	adds	r7, #28
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bc80      	pop	{r7}
 800e7da:	4770      	bx	lr

0800e7dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4a0d      	ldr	r2, [pc, #52]	; (800e820 <HAL_PCD_MspInit+0x44>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d113      	bne.n	800e816 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e7ee:	4b0d      	ldr	r3, [pc, #52]	; (800e824 <HAL_PCD_MspInit+0x48>)
 800e7f0:	69db      	ldr	r3, [r3, #28]
 800e7f2:	4a0c      	ldr	r2, [pc, #48]	; (800e824 <HAL_PCD_MspInit+0x48>)
 800e7f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e7f8:	61d3      	str	r3, [r2, #28]
 800e7fa:	4b0a      	ldr	r3, [pc, #40]	; (800e824 <HAL_PCD_MspInit+0x48>)
 800e7fc:	69db      	ldr	r3, [r3, #28]
 800e7fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e802:	60fb      	str	r3, [r7, #12]
 800e804:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800e806:	2200      	movs	r2, #0
 800e808:	2105      	movs	r1, #5
 800e80a:	2014      	movs	r0, #20
 800e80c:	f7f4 fdd9 	bl	80033c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800e810:	2014      	movs	r0, #20
 800e812:	f7f4 fdf2 	bl	80033fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e816:	bf00      	nop
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	40005c00 	.word	0x40005c00
 800e824:	40021000 	.word	0x40021000

0800e828 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b082      	sub	sp, #8
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800e83c:	4619      	mov	r1, r3
 800e83e:	4610      	mov	r0, r2
 800e840:	f7fb fc3d 	bl	800a0be <USBD_LL_SetupStage>
}
 800e844:	bf00      	nop
 800e846:	3708      	adds	r7, #8
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	460b      	mov	r3, r1
 800e856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e85e:	78fa      	ldrb	r2, [r7, #3]
 800e860:	6879      	ldr	r1, [r7, #4]
 800e862:	4613      	mov	r3, r2
 800e864:	009b      	lsls	r3, r3, #2
 800e866:	4413      	add	r3, r2
 800e868:	00db      	lsls	r3, r3, #3
 800e86a:	440b      	add	r3, r1
 800e86c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	78fb      	ldrb	r3, [r7, #3]
 800e874:	4619      	mov	r1, r3
 800e876:	f7fb fc6f 	bl	800a158 <USBD_LL_DataOutStage>
}
 800e87a:	bf00      	nop
 800e87c:	3708      	adds	r7, #8
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}

0800e882 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e882:	b580      	push	{r7, lr}
 800e884:	b082      	sub	sp, #8
 800e886:	af00      	add	r7, sp, #0
 800e888:	6078      	str	r0, [r7, #4]
 800e88a:	460b      	mov	r3, r1
 800e88c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e894:	78fa      	ldrb	r2, [r7, #3]
 800e896:	6879      	ldr	r1, [r7, #4]
 800e898:	4613      	mov	r3, r2
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	4413      	add	r3, r2
 800e89e:	00db      	lsls	r3, r3, #3
 800e8a0:	440b      	add	r3, r1
 800e8a2:	333c      	adds	r3, #60	; 0x3c
 800e8a4:	681a      	ldr	r2, [r3, #0]
 800e8a6:	78fb      	ldrb	r3, [r7, #3]
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	f7fb fcc6 	bl	800a23a <USBD_LL_DataInStage>
}
 800e8ae:	bf00      	nop
 800e8b0:	3708      	adds	r7, #8
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}

0800e8b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8b6:	b580      	push	{r7, lr}
 800e8b8:	b082      	sub	sp, #8
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7fb fdd6 	bl	800a476 <USBD_LL_SOF>
}
 800e8ca:	bf00      	nop
 800e8cc:	3708      	adds	r7, #8
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8d2:	b580      	push	{r7, lr}
 800e8d4:	b084      	sub	sp, #16
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	689b      	ldr	r3, [r3, #8]
 800e8e2:	2b02      	cmp	r3, #2
 800e8e4:	d001      	beq.n	800e8ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e8e6:	f7f2 fc37 	bl	8001158 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e8f0:	7bfa      	ldrb	r2, [r7, #15]
 800e8f2:	4611      	mov	r1, r2
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fb fd86 	bl	800a406 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e900:	4618      	mov	r0, r3
 800e902:	f7fb fd3f 	bl	800a384 <USBD_LL_Reset>
}
 800e906:	bf00      	nop
 800e908:	3710      	adds	r7, #16
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
	...

0800e910 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fb fd80 	bl	800a424 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	699b      	ldr	r3, [r3, #24]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d005      	beq.n	800e938 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e92c:	4b04      	ldr	r3, [pc, #16]	; (800e940 <HAL_PCD_SuspendCallback+0x30>)
 800e92e:	691b      	ldr	r3, [r3, #16]
 800e930:	4a03      	ldr	r2, [pc, #12]	; (800e940 <HAL_PCD_SuspendCallback+0x30>)
 800e932:	f043 0306 	orr.w	r3, r3, #6
 800e936:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e938:	bf00      	nop
 800e93a:	3708      	adds	r7, #8
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	e000ed00 	.word	0xe000ed00

0800e944 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b082      	sub	sp, #8
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e952:	4618      	mov	r0, r3
 800e954:	f7fb fd7a 	bl	800a44c <USBD_LL_Resume>
}
 800e958:	bf00      	nop
 800e95a:	3708      	adds	r7, #8
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e968:	4a28      	ldr	r2, [pc, #160]	; (800ea0c <USBD_LL_Init+0xac>)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	4a26      	ldr	r2, [pc, #152]	; (800ea0c <USBD_LL_Init+0xac>)
 800e974:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800e978:	4b24      	ldr	r3, [pc, #144]	; (800ea0c <USBD_LL_Init+0xac>)
 800e97a:	4a25      	ldr	r2, [pc, #148]	; (800ea10 <USBD_LL_Init+0xb0>)
 800e97c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e97e:	4b23      	ldr	r3, [pc, #140]	; (800ea0c <USBD_LL_Init+0xac>)
 800e980:	2208      	movs	r2, #8
 800e982:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e984:	4b21      	ldr	r3, [pc, #132]	; (800ea0c <USBD_LL_Init+0xac>)
 800e986:	2202      	movs	r2, #2
 800e988:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e98a:	4b20      	ldr	r3, [pc, #128]	; (800ea0c <USBD_LL_Init+0xac>)
 800e98c:	2200      	movs	r2, #0
 800e98e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e990:	4b1e      	ldr	r3, [pc, #120]	; (800ea0c <USBD_LL_Init+0xac>)
 800e992:	2200      	movs	r2, #0
 800e994:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e996:	4b1d      	ldr	r3, [pc, #116]	; (800ea0c <USBD_LL_Init+0xac>)
 800e998:	2200      	movs	r2, #0
 800e99a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e99c:	481b      	ldr	r0, [pc, #108]	; (800ea0c <USBD_LL_Init+0xac>)
 800e99e:	f7f5 ff29 	bl	80047f4 <HAL_PCD_Init>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d001      	beq.n	800e9ac <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800e9a8:	f7f2 fbd6 	bl	8001158 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e9b2:	2318      	movs	r3, #24
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	2100      	movs	r1, #0
 800e9b8:	f7f7 fb9f 	bl	80060fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e9c2:	2358      	movs	r3, #88	; 0x58
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	2180      	movs	r1, #128	; 0x80
 800e9c8:	f7f7 fb97 	bl	80060fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e9d2:	23c0      	movs	r3, #192	; 0xc0
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	2181      	movs	r1, #129	; 0x81
 800e9d8:	f7f7 fb8f 	bl	80060fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e9e2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	2101      	movs	r1, #1
 800e9ea:	f7f7 fb86 	bl	80060fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e9f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	2182      	movs	r1, #130	; 0x82
 800e9fc:	f7f7 fb7d 	bl	80060fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ea00:	2300      	movs	r3, #0
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3708      	adds	r7, #8
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	20003364 	.word	0x20003364
 800ea10:	40005c00 	.word	0x40005c00

0800ea14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea20:	2300      	movs	r3, #0
 800ea22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7f5 ffed 	bl	8004a0a <HAL_PCD_Start>
 800ea30:	4603      	mov	r3, r0
 800ea32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea34:	7bfb      	ldrb	r3, [r7, #15]
 800ea36:	4618      	mov	r0, r3
 800ea38:	f000 f94e 	bl	800ecd8 <USBD_Get_USB_Status>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3710      	adds	r7, #16
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}

0800ea4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ea4a:	b580      	push	{r7, lr}
 800ea4c:	b084      	sub	sp, #16
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	6078      	str	r0, [r7, #4]
 800ea52:	4608      	mov	r0, r1
 800ea54:	4611      	mov	r1, r2
 800ea56:	461a      	mov	r2, r3
 800ea58:	4603      	mov	r3, r0
 800ea5a:	70fb      	strb	r3, [r7, #3]
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	70bb      	strb	r3, [r7, #2]
 800ea60:	4613      	mov	r3, r2
 800ea62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea64:	2300      	movs	r3, #0
 800ea66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ea72:	78bb      	ldrb	r3, [r7, #2]
 800ea74:	883a      	ldrh	r2, [r7, #0]
 800ea76:	78f9      	ldrb	r1, [r7, #3]
 800ea78:	f7f6 f967 	bl	8004d4a <HAL_PCD_EP_Open>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea80:	7bfb      	ldrb	r3, [r7, #15]
 800ea82:	4618      	mov	r0, r3
 800ea84:	f000 f928 	bl	800ecd8 <USBD_Get_USB_Status>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3710      	adds	r7, #16
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b084      	sub	sp, #16
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eab0:	78fa      	ldrb	r2, [r7, #3]
 800eab2:	4611      	mov	r1, r2
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7f6 f9ae 	bl	8004e16 <HAL_PCD_EP_Close>
 800eaba:	4603      	mov	r3, r0
 800eabc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eabe:	7bfb      	ldrb	r3, [r7, #15]
 800eac0:	4618      	mov	r0, r3
 800eac2:	f000 f909 	bl	800ecd8 <USBD_Get_USB_Status>
 800eac6:	4603      	mov	r3, r0
 800eac8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eaca:	7bbb      	ldrb	r3, [r7, #14]
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	460b      	mov	r3, r1
 800eade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eae0:	2300      	movs	r3, #0
 800eae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eae4:	2300      	movs	r3, #0
 800eae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eaee:	78fa      	ldrb	r2, [r7, #3]
 800eaf0:	4611      	mov	r1, r2
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7f6 fa6e 	bl	8004fd4 <HAL_PCD_EP_SetStall>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eafc:	7bfb      	ldrb	r3, [r7, #15]
 800eafe:	4618      	mov	r0, r3
 800eb00:	f000 f8ea 	bl	800ecd8 <USBD_Get_USB_Status>
 800eb04:	4603      	mov	r3, r0
 800eb06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb08:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b084      	sub	sp, #16
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	6078      	str	r0, [r7, #4]
 800eb1a:	460b      	mov	r3, r1
 800eb1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb22:	2300      	movs	r3, #0
 800eb24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb2c:	78fa      	ldrb	r2, [r7, #3]
 800eb2e:	4611      	mov	r1, r2
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7f6 faaf 	bl	8005094 <HAL_PCD_EP_ClrStall>
 800eb36:	4603      	mov	r3, r0
 800eb38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb3a:	7bfb      	ldrb	r3, [r7, #15]
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f000 f8cb 	bl	800ecd8 <USBD_Get_USB_Status>
 800eb42:	4603      	mov	r3, r0
 800eb44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb46:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3710      	adds	r7, #16
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b085      	sub	sp, #20
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	460b      	mov	r3, r1
 800eb5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eb64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	da0c      	bge.n	800eb86 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eb6c:	78fb      	ldrb	r3, [r7, #3]
 800eb6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb72:	68f9      	ldr	r1, [r7, #12]
 800eb74:	1c5a      	adds	r2, r3, #1
 800eb76:	4613      	mov	r3, r2
 800eb78:	009b      	lsls	r3, r3, #2
 800eb7a:	4413      	add	r3, r2
 800eb7c:	00db      	lsls	r3, r3, #3
 800eb7e:	440b      	add	r3, r1
 800eb80:	3302      	adds	r3, #2
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	e00b      	b.n	800eb9e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eb86:	78fb      	ldrb	r3, [r7, #3]
 800eb88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb8c:	68f9      	ldr	r1, [r7, #12]
 800eb8e:	4613      	mov	r3, r2
 800eb90:	009b      	lsls	r3, r3, #2
 800eb92:	4413      	add	r3, r2
 800eb94:	00db      	lsls	r3, r3, #3
 800eb96:	440b      	add	r3, r1
 800eb98:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800eb9c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3714      	adds	r7, #20
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bc80      	pop	{r7}
 800eba6:	4770      	bx	lr

0800eba8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebc2:	78fa      	ldrb	r2, [r7, #3]
 800ebc4:	4611      	mov	r1, r2
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7f6 f89a 	bl	8004d00 <HAL_PCD_SetAddress>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebd0:	7bfb      	ldrb	r3, [r7, #15]
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f000 f880 	bl	800ecd8 <USBD_Get_USB_Status>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3710      	adds	r7, #16
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}

0800ebe6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ebe6:	b580      	push	{r7, lr}
 800ebe8:	b086      	sub	sp, #24
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	60f8      	str	r0, [r7, #12]
 800ebee:	607a      	str	r2, [r7, #4]
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	72fb      	strb	r3, [r7, #11]
 800ebf6:	4613      	mov	r3, r2
 800ebf8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ec08:	893b      	ldrh	r3, [r7, #8]
 800ec0a:	7af9      	ldrb	r1, [r7, #11]
 800ec0c:	687a      	ldr	r2, [r7, #4]
 800ec0e:	f7f6 f99e 	bl	8004f4e <HAL_PCD_EP_Transmit>
 800ec12:	4603      	mov	r3, r0
 800ec14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec16:	7dfb      	ldrb	r3, [r7, #23]
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f000 f85d 	bl	800ecd8 <USBD_Get_USB_Status>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ec22:	7dbb      	ldrb	r3, [r7, #22]
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3718      	adds	r7, #24
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b086      	sub	sp, #24
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	607a      	str	r2, [r7, #4]
 800ec36:	461a      	mov	r2, r3
 800ec38:	460b      	mov	r3, r1
 800ec3a:	72fb      	strb	r3, [r7, #11]
 800ec3c:	4613      	mov	r3, r2
 800ec3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec40:	2300      	movs	r3, #0
 800ec42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec44:	2300      	movs	r3, #0
 800ec46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ec4e:	893b      	ldrh	r3, [r7, #8]
 800ec50:	7af9      	ldrb	r1, [r7, #11]
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	f7f6 f927 	bl	8004ea6 <HAL_PCD_EP_Receive>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec5c:	7dfb      	ldrb	r3, [r7, #23]
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f000 f83a 	bl	800ecd8 <USBD_Get_USB_Status>
 800ec64:	4603      	mov	r3, r0
 800ec66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ec68:	7dbb      	ldrb	r3, [r7, #22]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3718      	adds	r7, #24
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b082      	sub	sp, #8
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
 800ec7a:	460b      	mov	r3, r1
 800ec7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec84:	78fa      	ldrb	r2, [r7, #3]
 800ec86:	4611      	mov	r1, r2
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7f6 f949 	bl	8004f20 <HAL_PCD_EP_GetRxCount>
 800ec8e:	4603      	mov	r3, r0
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3708      	adds	r7, #8
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800eca0:	4b02      	ldr	r3, [pc, #8]	; (800ecac <USBD_static_malloc+0x14>)
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	370c      	adds	r7, #12
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bc80      	pop	{r7}
 800ecaa:	4770      	bx	lr
 800ecac:	20002258 	.word	0x20002258

0800ecb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]

}
 800ecb8:	bf00      	nop
 800ecba:	370c      	adds	r7, #12
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bc80      	pop	{r7}
 800ecc0:	4770      	bx	lr

0800ecc2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecc2:	b480      	push	{r7}
 800ecc4:	b083      	sub	sp, #12
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
 800ecca:	460b      	mov	r3, r1
 800eccc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ecce:	bf00      	nop
 800ecd0:	370c      	adds	r7, #12
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bc80      	pop	{r7}
 800ecd6:	4770      	bx	lr

0800ecd8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	4603      	mov	r3, r0
 800ece0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ece2:	2300      	movs	r3, #0
 800ece4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ece6:	79fb      	ldrb	r3, [r7, #7]
 800ece8:	2b03      	cmp	r3, #3
 800ecea:	d817      	bhi.n	800ed1c <USBD_Get_USB_Status+0x44>
 800ecec:	a201      	add	r2, pc, #4	; (adr r2, 800ecf4 <USBD_Get_USB_Status+0x1c>)
 800ecee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecf2:	bf00      	nop
 800ecf4:	0800ed05 	.word	0x0800ed05
 800ecf8:	0800ed0b 	.word	0x0800ed0b
 800ecfc:	0800ed11 	.word	0x0800ed11
 800ed00:	0800ed17 	.word	0x0800ed17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ed04:	2300      	movs	r3, #0
 800ed06:	73fb      	strb	r3, [r7, #15]
    break;
 800ed08:	e00b      	b.n	800ed22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed0a:	2302      	movs	r3, #2
 800ed0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ed0e:	e008      	b.n	800ed22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed10:	2301      	movs	r3, #1
 800ed12:	73fb      	strb	r3, [r7, #15]
    break;
 800ed14:	e005      	b.n	800ed22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed16:	2302      	movs	r3, #2
 800ed18:	73fb      	strb	r3, [r7, #15]
    break;
 800ed1a:	e002      	b.n	800ed22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ed1c:	2302      	movs	r3, #2
 800ed1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed20:	bf00      	nop
  }
  return usb_status;
 800ed22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3714      	adds	r7, #20
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bc80      	pop	{r7}
 800ed2c:	4770      	bx	lr
 800ed2e:	bf00      	nop

0800ed30 <__libc_init_array>:
 800ed30:	b570      	push	{r4, r5, r6, lr}
 800ed32:	2600      	movs	r6, #0
 800ed34:	4d0c      	ldr	r5, [pc, #48]	; (800ed68 <__libc_init_array+0x38>)
 800ed36:	4c0d      	ldr	r4, [pc, #52]	; (800ed6c <__libc_init_array+0x3c>)
 800ed38:	1b64      	subs	r4, r4, r5
 800ed3a:	10a4      	asrs	r4, r4, #2
 800ed3c:	42a6      	cmp	r6, r4
 800ed3e:	d109      	bne.n	800ed54 <__libc_init_array+0x24>
 800ed40:	f000 f862 	bl	800ee08 <_init>
 800ed44:	2600      	movs	r6, #0
 800ed46:	4d0a      	ldr	r5, [pc, #40]	; (800ed70 <__libc_init_array+0x40>)
 800ed48:	4c0a      	ldr	r4, [pc, #40]	; (800ed74 <__libc_init_array+0x44>)
 800ed4a:	1b64      	subs	r4, r4, r5
 800ed4c:	10a4      	asrs	r4, r4, #2
 800ed4e:	42a6      	cmp	r6, r4
 800ed50:	d105      	bne.n	800ed5e <__libc_init_array+0x2e>
 800ed52:	bd70      	pop	{r4, r5, r6, pc}
 800ed54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed58:	4798      	blx	r3
 800ed5a:	3601      	adds	r6, #1
 800ed5c:	e7ee      	b.n	800ed3c <__libc_init_array+0xc>
 800ed5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed62:	4798      	blx	r3
 800ed64:	3601      	adds	r6, #1
 800ed66:	e7f2      	b.n	800ed4e <__libc_init_array+0x1e>
 800ed68:	0800f600 	.word	0x0800f600
 800ed6c:	0800f600 	.word	0x0800f600
 800ed70:	0800f600 	.word	0x0800f600
 800ed74:	0800f604 	.word	0x0800f604

0800ed78 <memcpy>:
 800ed78:	440a      	add	r2, r1
 800ed7a:	4291      	cmp	r1, r2
 800ed7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed80:	d100      	bne.n	800ed84 <memcpy+0xc>
 800ed82:	4770      	bx	lr
 800ed84:	b510      	push	{r4, lr}
 800ed86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed8a:	4291      	cmp	r1, r2
 800ed8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed90:	d1f9      	bne.n	800ed86 <memcpy+0xe>
 800ed92:	bd10      	pop	{r4, pc}

0800ed94 <memmove>:
 800ed94:	4288      	cmp	r0, r1
 800ed96:	b510      	push	{r4, lr}
 800ed98:	eb01 0402 	add.w	r4, r1, r2
 800ed9c:	d902      	bls.n	800eda4 <memmove+0x10>
 800ed9e:	4284      	cmp	r4, r0
 800eda0:	4623      	mov	r3, r4
 800eda2:	d807      	bhi.n	800edb4 <memmove+0x20>
 800eda4:	1e43      	subs	r3, r0, #1
 800eda6:	42a1      	cmp	r1, r4
 800eda8:	d008      	beq.n	800edbc <memmove+0x28>
 800edaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800edae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800edb2:	e7f8      	b.n	800eda6 <memmove+0x12>
 800edb4:	4601      	mov	r1, r0
 800edb6:	4402      	add	r2, r0
 800edb8:	428a      	cmp	r2, r1
 800edba:	d100      	bne.n	800edbe <memmove+0x2a>
 800edbc:	bd10      	pop	{r4, pc}
 800edbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800edc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800edc6:	e7f7      	b.n	800edb8 <memmove+0x24>

0800edc8 <memset>:
 800edc8:	4603      	mov	r3, r0
 800edca:	4402      	add	r2, r0
 800edcc:	4293      	cmp	r3, r2
 800edce:	d100      	bne.n	800edd2 <memset+0xa>
 800edd0:	4770      	bx	lr
 800edd2:	f803 1b01 	strb.w	r1, [r3], #1
 800edd6:	e7f9      	b.n	800edcc <memset+0x4>

0800edd8 <strstr>:
 800edd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edda:	780c      	ldrb	r4, [r1, #0]
 800eddc:	b164      	cbz	r4, 800edf8 <strstr+0x20>
 800edde:	4603      	mov	r3, r0
 800ede0:	781a      	ldrb	r2, [r3, #0]
 800ede2:	4618      	mov	r0, r3
 800ede4:	1c5e      	adds	r6, r3, #1
 800ede6:	b90a      	cbnz	r2, 800edec <strstr+0x14>
 800ede8:	4610      	mov	r0, r2
 800edea:	e005      	b.n	800edf8 <strstr+0x20>
 800edec:	4294      	cmp	r4, r2
 800edee:	d108      	bne.n	800ee02 <strstr+0x2a>
 800edf0:	460d      	mov	r5, r1
 800edf2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800edf6:	b902      	cbnz	r2, 800edfa <strstr+0x22>
 800edf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edfa:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800edfe:	4297      	cmp	r7, r2
 800ee00:	d0f7      	beq.n	800edf2 <strstr+0x1a>
 800ee02:	4633      	mov	r3, r6
 800ee04:	e7ec      	b.n	800ede0 <strstr+0x8>
	...

0800ee08 <_init>:
 800ee08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee0a:	bf00      	nop
 800ee0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee0e:	bc08      	pop	{r3}
 800ee10:	469e      	mov	lr, r3
 800ee12:	4770      	bx	lr

0800ee14 <_fini>:
 800ee14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee16:	bf00      	nop
 800ee18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee1a:	bc08      	pop	{r3}
 800ee1c:	469e      	mov	lr, r3
 800ee1e:	4770      	bx	lr
