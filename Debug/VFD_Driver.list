
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ddc0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a4  0800ded0  0800ded0  0001ded0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e774  0800e774  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800e774  0800e774  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e774  0800e774  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e774  0800e774  0001e774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e778  0800e778  0001e778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800e77c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003490  20000190  0800e90c  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003620  0800e90c  00023620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c519  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ee1  00000000  00000000  0004c6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e10  00000000  00000000  000525b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001be8  00000000  00000000  000543c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e90e  00000000  00000000  00055fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002474c  00000000  00000000  000748be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c581  00000000  00000000  0009900a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013558b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c4c  00000000  00000000  001355e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000190 	.word	0x20000190
 800012c:	00000000 	.word	0x00000000
 8000130:	0800deb8 	.word	0x0800deb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000194 	.word	0x20000194
 800014c:	0800deb8 	.word	0x0800deb8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (32, sizeof(uint8_t), &qUSB_rcv_attributes);
 8000178:	4a1e      	ldr	r2, [pc, #120]	; (80001f4 <MX_FREERTOS_Init+0x80>)
 800017a:	2101      	movs	r1, #1
 800017c:	2020      	movs	r0, #32
 800017e:	f00a fb7b 	bl	800a878 <osMessageQueueNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a1c      	ldr	r2, [pc, #112]	; (80001f8 <MX_FREERTOS_Init+0x84>)
 8000186:	6013      	str	r3, [r2, #0]

  /* creation of qVFD */
  qVFDHandle = osMessageQueueNew (16, sizeof(uint16_t), &qVFD_attributes);
 8000188:	4a1c      	ldr	r2, [pc, #112]	; (80001fc <MX_FREERTOS_Init+0x88>)
 800018a:	2102      	movs	r1, #2
 800018c:	2010      	movs	r0, #16
 800018e:	f00a fb73 	bl	800a878 <osMessageQueueNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a1a      	ldr	r2, [pc, #104]	; (8000200 <MX_FREERTOS_Init+0x8c>)
 8000196:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000198:	4a1a      	ldr	r2, [pc, #104]	; (8000204 <MX_FREERTOS_Init+0x90>)
 800019a:	2100      	movs	r1, #0
 800019c:	481a      	ldr	r0, [pc, #104]	; (8000208 <MX_FREERTOS_Init+0x94>)
 800019e:	f00a fa93 	bl	800a6c8 <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a19      	ldr	r2, [pc, #100]	; (800020c <MX_FREERTOS_Init+0x98>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 80001a8:	4a19      	ldr	r2, [pc, #100]	; (8000210 <MX_FREERTOS_Init+0x9c>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	4819      	ldr	r0, [pc, #100]	; (8000214 <MX_FREERTOS_Init+0xa0>)
 80001ae:	f00a fa8b 	bl	800a6c8 <osThreadNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a18      	ldr	r2, [pc, #96]	; (8000218 <MX_FREERTOS_Init+0xa4>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 80001b8:	4a18      	ldr	r2, [pc, #96]	; (800021c <MX_FREERTOS_Init+0xa8>)
 80001ba:	2100      	movs	r1, #0
 80001bc:	4818      	ldr	r0, [pc, #96]	; (8000220 <MX_FREERTOS_Init+0xac>)
 80001be:	f00a fa83 	bl	800a6c8 <osThreadNew>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <MX_FREERTOS_Init+0xb0>)
 80001c6:	6013      	str	r3, [r2, #0]

  /* creation of UARTtask */
  UARTtaskHandle = osThreadNew(StartUARTtask, NULL, &UARTtask_attributes);
 80001c8:	4a17      	ldr	r2, [pc, #92]	; (8000228 <MX_FREERTOS_Init+0xb4>)
 80001ca:	2100      	movs	r1, #0
 80001cc:	4817      	ldr	r0, [pc, #92]	; (800022c <MX_FREERTOS_Init+0xb8>)
 80001ce:	f00a fa7b 	bl	800a6c8 <osThreadNew>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4a16      	ldr	r2, [pc, #88]	; (8000230 <MX_FREERTOS_Init+0xbc>)
 80001d6:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(StartEncoder, NULL, &Encoder_attributes);
 80001d8:	4a16      	ldr	r2, [pc, #88]	; (8000234 <MX_FREERTOS_Init+0xc0>)
 80001da:	2100      	movs	r1, #0
 80001dc:	4816      	ldr	r0, [pc, #88]	; (8000238 <MX_FREERTOS_Init+0xc4>)
 80001de:	f00a fa73 	bl	800a6c8 <osThreadNew>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4a15      	ldr	r2, [pc, #84]	; (800023c <MX_FREERTOS_Init+0xc8>)
 80001e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 80001e8:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <MX_FREERTOS_Init+0x84>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a14      	ldr	r2, [pc, #80]	; (8000240 <MX_FREERTOS_Init+0xcc>)
 80001ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	0800e1ec 	.word	0x0800e1ec
 80001f8:	20002488 	.word	0x20002488
 80001fc:	0800e204 	.word	0x0800e204
 8000200:	2000248c 	.word	0x2000248c
 8000204:	0800e138 	.word	0x0800e138
 8000208:	08000245 	.word	0x08000245
 800020c:	20002478 	.word	0x20002478
 8000210:	0800e15c 	.word	0x0800e15c
 8000214:	0800027d 	.word	0x0800027d
 8000218:	2000247c 	.word	0x2000247c
 800021c:	0800e180 	.word	0x0800e180
 8000220:	080002c1 	.word	0x080002c1
 8000224:	20002484 	.word	0x20002484
 8000228:	0800e1a4 	.word	0x0800e1a4
 800022c:	08000309 	.word	0x08000309
 8000230:	20002480 	.word	0x20002480
 8000234:	0800e1c8 	.word	0x0800e1c8
 8000238:	08000345 	.word	0x08000345
 800023c:	20002494 	.word	0x20002494
 8000240:	20002490 	.word	0x20002490

08000244 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800024c:	f00d f906 	bl	800d45c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000256:	4808      	ldr	r0, [pc, #32]	; (8000278 <StartDefaultTask+0x34>)
 8000258:	f003 f8ad 	bl	80033b6 <HAL_GPIO_WritePin>
  osDelay(10);
 800025c:	200a      	movs	r0, #10
 800025e:	f00a fadd 	bl	800a81c <osDelay>
  init_microrl();
 8000262:	f002 f96b 	bl	800253c <init_microrl>
  set_CDC_ready(); // allow to send
 8000266:	f002 f9a3 	bl	80025b0 <set_CDC_ready>

  //vTaskDelete(NULL);
  /* Infinite loop */
  for(;;)
  {
    process_encoder();
 800026a:	f000 fbed 	bl	8000a48 <process_encoder>
    osDelay(1);
 800026e:	2001      	movs	r0, #1
 8000270:	f00a fad4 	bl	800a81c <osDelay>
    process_encoder();
 8000274:	e7f9      	b.n	800026a <StartDefaultTask+0x26>
 8000276:	bf00      	nop
 8000278:	40010800 	.word	0x40010800

0800027c <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 8000284:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000288:	617b      	str	r3, [r7, #20]

	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 800028a:	f00b fcdb 	bl	800bc44 <xTaskGetTickCount>
 800028e:	4603      	mov	r3, r0
 8000290:	613b      	str	r3, [r7, #16]

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000296:	4808      	ldr	r0, [pc, #32]	; (80002b8 <StartLEDheartbeat+0x3c>)
 8000298:	f003 f8a5 	bl	80033e6 <HAL_GPIO_TogglePin>
		tick_counter++;
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <StartLEDheartbeat+0x40>)
 800029e:	881b      	ldrh	r3, [r3, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <StartLEDheartbeat+0x40>)
 80002a6:	801a      	strh	r2, [r3, #0]
				if (++cnt >= ALPHAS + DIGITS + ALPHAR + SPECIAL)
					cnt = 0;

		}

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80002a8:	f107 0310 	add.w	r3, r7, #16
 80002ac:	6979      	ldr	r1, [r7, #20]
 80002ae:	4618      	mov	r0, r3
 80002b0:	f00b fb04 	bl	800b8bc <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 80002b4:	e7e9      	b.n	800028a <StartLEDheartbeat+0xe>
 80002b6:	bf00      	nop
 80002b8:	40011000 	.word	0x40011000
 80002bc:	200001ae 	.word	0x200001ae

080002c0 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 80002c8:	2000      	movs	r0, #0
 80002ca:	f00b ffbd 	bl	800c248 <uxTaskGetStackHighWaterMark>
 80002ce:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80002d4:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <StartUSB_rcv+0x44>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f107 010f 	add.w	r1, r7, #15
 80002dc:	f04f 32ff 	mov.w	r2, #4294967295
 80002e0:	4618      	mov	r0, r3
 80002e2:	f00a ff07 	bl	800b0f4 <xQueueReceive>
	  microrl_print_char(buf);
 80002e6:	7bfb      	ldrb	r3, [r7, #15]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 fde3 	bl	8001eb4 <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80002ee:	2000      	movs	r0, #0
 80002f0:	f00b ffaa 	bl	800c248 <uxTaskGetStackHighWaterMark>
 80002f4:	6138      	str	r0, [r7, #16]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 80002f6:	693a      	ldr	r2, [r7, #16]
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d2ea      	bcs.n	80002d4 <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 80002fe:	693b      	ldr	r3, [r7, #16]
 8000300:	617b      	str	r3, [r7, #20]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 8000302:	e7e7      	b.n	80002d4 <StartUSB_rcv+0x14>
 8000304:	20002490 	.word	0x20002490

08000308 <StartUARTtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTtask */
void StartUARTtask(void *argument)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  uint8_t data;
  for(;;)
  {
	HAL_UART_Receive_IT(&huart2, &data, 1);
 8000310:	f107 030f 	add.w	r3, r7, #15
 8000314:	2201      	movs	r2, #1
 8000316:	4619      	mov	r1, r3
 8000318:	4809      	ldr	r0, [pc, #36]	; (8000340 <StartUARTtask+0x38>)
 800031a:	f005 ff64 	bl	80061e6 <HAL_UART_Receive_IT>
	/* Wait to be notified of an interrupt. */
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 800031e:	f04f 31ff 	mov.w	r1, #4294967295
 8000322:	2001      	movs	r0, #1
 8000324:	f00c f88c 	bl	800c440 <ulTaskNotifyTake>
	if (get_nema())
 8000328:	f002 fa88 	bl	800283c <get_nema>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0ee      	beq.n	8000310 <StartUARTtask+0x8>
		CDC_Transmit_FS(&data, 1);
 8000332:	f107 030f 	add.w	r3, r7, #15
 8000336:	2101      	movs	r1, #1
 8000338:	4618      	mov	r0, r3
 800033a:	f00d f973 	bl	800d624 <CDC_Transmit_FS>
	HAL_UART_Receive_IT(&huart2, &data, 1);
 800033e:	e7e7      	b.n	8000310 <StartUARTtask+0x8>
 8000340:	20002618 	.word	0x20002618

08000344 <StartEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoder */
void StartEncoder(void *argument)
{
 8000344:	b5b0      	push	{r4, r5, r7, lr}
 8000346:	b0a8      	sub	sp, #160	; 0xa0
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]

	static bool invert = true;
	static bool released = true;


  osDelay(500);
 800034c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000350:	f00a fa64 	bl	800a81c <osDelay>
  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, 1);
 8000354:	2201      	movs	r2, #1
 8000356:	2120      	movs	r1, #32
 8000358:	48c4      	ldr	r0, [pc, #784]	; (800066c <StartEncoder+0x328>)
 800035a:	f003 f82c 	bl	80033b6 <HAL_GPIO_WritePin>
  union VFD {
	  uint8_t arr2[11][3];
	  uint8_t arr1[11*3];
  } vfd;

  for (int i = 0; i < sizeof(vfd.arr1); i++)
 800035e:	2300      	movs	r3, #0
 8000360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000364:	e00b      	b.n	800037e <StartEncoder+0x3a>
  {
	  vfd.arr1[i] = 0xFF;
 8000366:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800036a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800036e:	4413      	add	r3, r2
 8000370:	22ff      	movs	r2, #255	; 0xff
 8000372:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < sizeof(vfd.arr1); i++)
 8000374:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000378:	3301      	adds	r3, #1
 800037a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800037e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000382:	2b20      	cmp	r3, #32
 8000384:	d9ef      	bls.n	8000366 <StartEncoder+0x22>
  }
  uint8_t data;


  data = 0b01000000; // command 2, write to Display port
 8000386:	2340      	movs	r3, #64	; 0x40
 8000388:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000392:	48b6      	ldr	r0, [pc, #728]	; (800066c <StartEncoder+0x328>)
 8000394:	f003 f80f 	bl	80033b6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000398:	f107 0143 	add.w	r1, r7, #67	; 0x43
 800039c:	f04f 33ff 	mov.w	r3, #4294967295
 80003a0:	2201      	movs	r2, #1
 80003a2:	48b3      	ldr	r0, [pc, #716]	; (8000670 <StartEncoder+0x32c>)
 80003a4:	f005 faa6 	bl	80058f4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ae:	48af      	ldr	r0, [pc, #700]	; (800066c <StartEncoder+0x328>)
 80003b0:	f003 f801 	bl	80033b6 <HAL_GPIO_WritePin>
  osDelay(10);
 80003b4:	200a      	movs	r0, #10
 80003b6:	f00a fa31 	bl	800a81c <osDelay>
  data = 0b11000000; // command 3, set address to 0
 80003ba:	23c0      	movs	r3, #192	; 0xc0
 80003bc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003c6:	48a9      	ldr	r0, [pc, #676]	; (800066c <StartEncoder+0x328>)
 80003c8:	f002 fff5 	bl	80033b6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80003cc:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80003d0:	f04f 33ff 	mov.w	r3, #4294967295
 80003d4:	2201      	movs	r2, #1
 80003d6:	48a6      	ldr	r0, [pc, #664]	; (8000670 <StartEncoder+0x32c>)
 80003d8:	f005 fa8c 	bl	80058f4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80003dc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80003e0:	f04f 33ff 	mov.w	r3, #4294967295
 80003e4:	2221      	movs	r2, #33	; 0x21
 80003e6:	48a2      	ldr	r0, [pc, #648]	; (8000670 <StartEncoder+0x32c>)
 80003e8:	f005 fa84 	bl	80058f4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80003ec:	2201      	movs	r2, #1
 80003ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f2:	489e      	ldr	r0, [pc, #632]	; (800066c <StartEncoder+0x328>)
 80003f4:	f002 ffdf 	bl	80033b6 <HAL_GPIO_WritePin>
  osDelay(10);
 80003f8:	200a      	movs	r0, #10
 80003fa:	f00a fa0f 	bl	800a81c <osDelay>
  // init display, 11 digits 17 segments
  data = 0b00000111; // command 1, 11 digits 17 segments
 80003fe:	2307      	movs	r3, #7
 8000400:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800040a:	4898      	ldr	r0, [pc, #608]	; (800066c <StartEncoder+0x328>)
 800040c:	f002 ffd3 	bl	80033b6 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000410:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000414:	f04f 33ff 	mov.w	r3, #4294967295
 8000418:	2201      	movs	r2, #1
 800041a:	4895      	ldr	r0, [pc, #596]	; (8000670 <StartEncoder+0x32c>)
 800041c:	f005 fa6a 	bl	80058f4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000420:	2201      	movs	r2, #1
 8000422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000426:	4891      	ldr	r0, [pc, #580]	; (800066c <StartEncoder+0x328>)
 8000428:	f002 ffc5 	bl	80033b6 <HAL_GPIO_WritePin>
  osDelay(10);
 800042c:	200a      	movs	r0, #10
 800042e:	f00a f9f5 	bl	800a81c <osDelay>

  for (uint8_t i = 0; i <= 0b111; i++)
 8000432:	2300      	movs	r3, #0
 8000434:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000438:	e02d      	b.n	8000496 <StartEncoder+0x152>
  {
	  data = 0b10000000; // command 4
 800043a:	2380      	movs	r3, #128	; 0x80
 800043c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  data |= 1<<3; // enable/disable display
 8000440:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000444:	f043 0308 	orr.w	r3, r3, #8
 8000448:	b2db      	uxtb	r3, r3
 800044a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  data |= i; // set brightness
 800044e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8000452:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000456:	4313      	orrs	r3, r2
 8000458:	b2db      	uxtb	r3, r3
 800045a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000464:	4881      	ldr	r0, [pc, #516]	; (800066c <StartEncoder+0x328>)
 8000466:	f002 ffa6 	bl	80033b6 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800046a:	f107 0143 	add.w	r1, r7, #67	; 0x43
 800046e:	f04f 33ff 	mov.w	r3, #4294967295
 8000472:	2201      	movs	r2, #1
 8000474:	487e      	ldr	r0, [pc, #504]	; (8000670 <StartEncoder+0x32c>)
 8000476:	f005 fa3d 	bl	80058f4 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800047a:	2201      	movs	r2, #1
 800047c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000480:	487a      	ldr	r0, [pc, #488]	; (800066c <StartEncoder+0x328>)
 8000482:	f002 ff98 	bl	80033b6 <HAL_GPIO_WritePin>
	  osDelay(250);
 8000486:	20fa      	movs	r0, #250	; 0xfa
 8000488:	f00a f9c8 	bl	800a81c <osDelay>
  for (uint8_t i = 0; i <= 0b111; i++)
 800048c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000490:	3301      	adds	r3, #1
 8000492:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000496:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800049a:	2b07      	cmp	r3, #7
 800049c:	d9cd      	bls.n	800043a <StartEncoder+0xf6>
  }



  for (int i = 0; i < 11; i++)
 800049e:	2300      	movs	r3, #0
 80004a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80004a4:	e041      	b.n	800052a <StartEncoder+0x1e6>
  {
	  for (int b = 0; b < 3; b++) // erasing from right to left
 80004a6:	2300      	movs	r3, #0
 80004a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80004ac:	e012      	b.n	80004d4 <StartEncoder+0x190>
	  {
		  vfd.arr2[i][b] = 0;
 80004ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80004b2:	4613      	mov	r3, r2
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	4413      	add	r3, r2
 80004b8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80004bc:	441a      	add	r2, r3
 80004be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80004c2:	4413      	add	r3, r2
 80004c4:	3b5c      	subs	r3, #92	; 0x5c
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
	  for (int b = 0; b < 3; b++) // erasing from right to left
 80004ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80004ce:	3301      	adds	r3, #1
 80004d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80004d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80004d8:	2b02      	cmp	r3, #2
 80004da:	dde8      	ble.n	80004ae <StartEncoder+0x16a>
	  }
	  data = 0b11000000; // command 3, set address to 0
 80004dc:	23c0      	movs	r3, #192	; 0xc0
 80004de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e8:	4860      	ldr	r0, [pc, #384]	; (800066c <StartEncoder+0x328>)
 80004ea:	f002 ff64 	bl	80033b6 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80004ee:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295
 80004f6:	2201      	movs	r2, #1
 80004f8:	485d      	ldr	r0, [pc, #372]	; (8000670 <StartEncoder+0x32c>)
 80004fa:	f005 f9fb 	bl	80058f4 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 80004fe:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	2221      	movs	r2, #33	; 0x21
 8000508:	4859      	ldr	r0, [pc, #356]	; (8000670 <StartEncoder+0x32c>)
 800050a:	f005 f9f3 	bl	80058f4 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800050e:	2201      	movs	r2, #1
 8000510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000514:	4855      	ldr	r0, [pc, #340]	; (800066c <StartEncoder+0x328>)
 8000516:	f002 ff4e 	bl	80033b6 <HAL_GPIO_WritePin>
	  osDelay(150);
 800051a:	2096      	movs	r0, #150	; 0x96
 800051c:	f00a f97e 	bl	800a81c <osDelay>
  for (int i = 0; i < 11; i++)
 8000520:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000524:	3301      	adds	r3, #1
 8000526:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800052a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800052e:	2b0a      	cmp	r3, #10
 8000530:	ddb9      	ble.n	80004a6 <StartEncoder+0x162>
  }
  osDelay (500);
 8000532:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000536:	f00a f971 	bl	800a81c <osDelay>

  //erase everything... just in case
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 800053a:	2300      	movs	r3, #0
 800053c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000540:	e00b      	b.n	800055a <StartEncoder+0x216>
	  vfd.arr1[a] = 0;
 8000542:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800054a:	4413      	add	r3, r2
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
  for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000554:	3301      	adds	r3, #1
 8000556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800055a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800055e:	2b20      	cmp	r3, #32
 8000560:	d9ef      	bls.n	8000542 <StartEncoder+0x1fe>


  // fill everything
    for (int j = 1; j < 15; j++)
 8000562:	2301      	movs	r3, #1
 8000564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000568:	e06a      	b.n	8000640 <StartEncoder+0x2fc>
    {
  	  uint32_t temp = 1<<j;
 800056a:	2201      	movs	r2, #1
 800056c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	66bb      	str	r3, [r7, #104]	; 0x68
  	  for (int i = 1; i < 11; i++)
 8000576:	2301      	movs	r3, #1
 8000578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800057c:	e035      	b.n	80005ea <StartEncoder+0x2a6>
  	  {
  		  for (int b = 0; b < 3; b++)
 800057e:	2300      	movs	r3, #0
 8000580:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000584:	e028      	b.n	80005d8 <StartEncoder+0x294>
  		  {
  			  vfd.arr2[i][b] |= (temp>>(b<<3))&0xFF;
 8000586:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800058a:	4613      	mov	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	4413      	add	r3, r2
 8000590:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000594:	441a      	add	r2, r3
 8000596:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800059a:	4413      	add	r3, r2
 800059c:	3b5c      	subs	r3, #92	; 0x5c
 800059e:	781a      	ldrb	r2, [r3, #0]
 80005a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80005a8:	fa21 f303 	lsr.w	r3, r1, r3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4313      	orrs	r3, r2
 80005b0:	b2d9      	uxtb	r1, r3
 80005b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80005b6:	4613      	mov	r3, r2
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	4413      	add	r3, r2
 80005bc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80005c0:	441a      	add	r2, r3
 80005c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80005c6:	4413      	add	r3, r2
 80005c8:	3b5c      	subs	r3, #92	; 0x5c
 80005ca:	460a      	mov	r2, r1
 80005cc:	701a      	strb	r2, [r3, #0]
  		  for (int b = 0; b < 3; b++)
 80005ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80005d2:	3301      	adds	r3, #1
 80005d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80005d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80005dc:	2b02      	cmp	r3, #2
 80005de:	ddd2      	ble.n	8000586 <StartEncoder+0x242>
  	  for (int i = 1; i < 11; i++)
 80005e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80005e4:	3301      	adds	r3, #1
 80005e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80005ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80005ee:	2b0a      	cmp	r3, #10
 80005f0:	ddc5      	ble.n	800057e <StartEncoder+0x23a>
  		  }
  	  }
  	  data = 0b11000000; // command 3, set address to 0
 80005f2:	23c0      	movs	r3, #192	; 0xc0
 80005f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fe:	481b      	ldr	r0, [pc, #108]	; (800066c <StartEncoder+0x328>)
 8000600:	f002 fed9 	bl	80033b6 <HAL_GPIO_WritePin>
  	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000604:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	2201      	movs	r2, #1
 800060e:	4818      	ldr	r0, [pc, #96]	; (8000670 <StartEncoder+0x32c>)
 8000610:	f005 f970 	bl	80058f4 <HAL_SPI_Transmit>
  	  HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000614:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	2221      	movs	r2, #33	; 0x21
 800061e:	4814      	ldr	r0, [pc, #80]	; (8000670 <StartEncoder+0x32c>)
 8000620:	f005 f968 	bl	80058f4 <HAL_SPI_Transmit>
  	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062a:	4810      	ldr	r0, [pc, #64]	; (800066c <StartEncoder+0x328>)
 800062c:	f002 fec3 	bl	80033b6 <HAL_GPIO_WritePin>
  	  osDelay(100);
 8000630:	2064      	movs	r0, #100	; 0x64
 8000632:	f00a f8f3 	bl	800a81c <osDelay>
    for (int j = 1; j < 15; j++)
 8000636:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800063a:	3301      	adds	r3, #1
 800063c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000640:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000644:	2b0e      	cmp	r3, #14
 8000646:	dd90      	ble.n	800056a <StartEncoder+0x226>
    }

    const uint8_t arr[][2] = {{6, 0},
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <StartEncoder+0x330>)
 800064a:	f107 0410 	add.w	r4, r7, #16
 800064e:	461d      	mov	r5, r3
 8000650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065c:	682b      	ldr	r3, [r5, #0]
 800065e:	8023      	strh	r3, [r4, #0]
					   {9, 16},
					   {10, 16},
					   {10, 15},
    };

    for (int j = 0; j < sizeof(arr)/2; j++)
 8000660:	2300      	movs	r3, #0
 8000662:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000664:	e06c      	b.n	8000740 <StartEncoder+0x3fc>
    {
		for (int b = 0; b < 3; b++)
 8000666:	2300      	movs	r3, #0
 8000668:	67bb      	str	r3, [r7, #120]	; 0x78
 800066a:	e041      	b.n	80006f0 <StartEncoder+0x3ac>
 800066c:	40010c00 	.word	0x40010c00
 8000670:	20002578 	.word	0x20002578
 8000674:	0800df2c 	.word	0x0800df2c
		  vfd.arr2[arr[j][0]][b] |= ((1<<arr[j][1])>>(b<<3))&0xFF;
 8000678:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000680:	4413      	add	r3, r2
 8000682:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 8000686:	461a      	mov	r2, r3
 8000688:	4613      	mov	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	4413      	add	r3, r2
 800068e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000692:	441a      	add	r2, r3
 8000694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000696:	4413      	add	r3, r2
 8000698:	3b5c      	subs	r3, #92	; 0x5c
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b25a      	sxtb	r2, r3
 800069e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80006a6:	440b      	add	r3, r1
 80006a8:	f813 3c8f 	ldrb.w	r3, [r3, #-143]
 80006ac:	4619      	mov	r1, r3
 80006ae:	2301      	movs	r3, #1
 80006b0:	fa03 f101 	lsl.w	r1, r3, r1
 80006b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	fa41 f303 	asr.w	r3, r1, r3
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	4313      	orrs	r3, r2
 80006c0:	b259      	sxtb	r1, r3
 80006c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80006ca:	4413      	add	r3, r2
 80006cc:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 80006d0:	461a      	mov	r2, r3
 80006d2:	b2c9      	uxtb	r1, r1
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80006de:	441a      	add	r2, r3
 80006e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006e2:	4413      	add	r3, r2
 80006e4:	3b5c      	subs	r3, #92	; 0x5c
 80006e6:	460a      	mov	r2, r1
 80006e8:	701a      	strb	r2, [r3, #0]
		for (int b = 0; b < 3; b++)
 80006ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006ec:	3301      	adds	r3, #1
 80006ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80006f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	ddc0      	ble.n	8000678 <StartEncoder+0x334>
		data = 0b11000000; // command 3, set address to 0
 80006f6:	23c0      	movs	r3, #192	; 0xc0
 80006f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000702:	48b5      	ldr	r0, [pc, #724]	; (80009d8 <StartEncoder+0x694>)
 8000704:	f002 fe57 	bl	80033b6 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000708:	f107 0143 	add.w	r1, r7, #67	; 0x43
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
 8000710:	2201      	movs	r2, #1
 8000712:	48b2      	ldr	r0, [pc, #712]	; (80009dc <StartEncoder+0x698>)
 8000714:	f005 f8ee 	bl	80058f4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000718:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800071c:	f04f 33ff 	mov.w	r3, #4294967295
 8000720:	2221      	movs	r2, #33	; 0x21
 8000722:	48ae      	ldr	r0, [pc, #696]	; (80009dc <StartEncoder+0x698>)
 8000724:	f005 f8e6 	bl	80058f4 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072e:	48aa      	ldr	r0, [pc, #680]	; (80009d8 <StartEncoder+0x694>)
 8000730:	f002 fe41 	bl	80033b6 <HAL_GPIO_WritePin>
		osDelay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f00a f871 	bl	800a81c <osDelay>
    for (int j = 0; j < sizeof(arr)/2; j++)
 800073a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800073c:	3301      	adds	r3, #1
 800073e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000740:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000742:	2b18      	cmp	r3, #24
 8000744:	d98f      	bls.n	8000666 <StartEncoder+0x322>
    }

    osDelay(500);
 8000746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800074a:	f00a f867 	bl	800a81c <osDelay>

    //erase everything... just in case
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 800074e:	2300      	movs	r3, #0
 8000750:	677b      	str	r3, [r7, #116]	; 0x74
 8000752:	e008      	b.n	8000766 <StartEncoder+0x422>
  	  vfd.arr1[a] = 0;
 8000754:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800075a:	4413      	add	r3, r2
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
    for (int a = 0; a < sizeof(vfd.arr1); a++)
 8000760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000762:	3301      	adds	r3, #1
 8000764:	677b      	str	r3, [r7, #116]	; 0x74
 8000766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000768:	2b20      	cmp	r3, #32
 800076a:	d9f3      	bls.n	8000754 <StartEncoder+0x410>
//    {
//        vfd.arr2[i+1][0] = vfd_digits[i]&0xFF;
//        vfd.arr2[i+1][1] = (vfd_digits[i]>>8)&0xFF;
//    }

	data = 0b11000000; // command 3, set address to 0
 800076c:	23c0      	movs	r3, #192	; 0xc0
 800076e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000778:	4897      	ldr	r0, [pc, #604]	; (80009d8 <StartEncoder+0x694>)
 800077a:	f002 fe1c 	bl	80033b6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800077e:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	2201      	movs	r2, #1
 8000788:	4894      	ldr	r0, [pc, #592]	; (80009dc <StartEncoder+0x698>)
 800078a:	f005 f8b3 	bl	80058f4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 800078e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	2221      	movs	r2, #33	; 0x21
 8000798:	4890      	ldr	r0, [pc, #576]	; (80009dc <StartEncoder+0x698>)
 800079a:	f005 f8ab 	bl	80058f4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a4:	488c      	ldr	r0, [pc, #560]	; (80009d8 <StartEncoder+0x694>)
 80007a6:	f002 fe06 	bl	80033b6 <HAL_GPIO_WritePin>
	//osDelay(100);


	const char * demo = "VFD FV651G";
 80007aa:	4b8d      	ldr	r3, [pc, #564]	; (80009e0 <StartEncoder+0x69c>)
 80007ac:	673b      	str	r3, [r7, #112]	; 0x70
	while (*demo)
 80007ae:	e010      	b.n	80007d2 <StartEncoder+0x48e>
	{
		uint16_t temp = get_char(*(demo++));
 80007b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	673a      	str	r2, [r7, #112]	; 0x70
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 fa15 	bl	8002be8 <get_char>
 80007be:	4603      	mov	r3, r0
 80007c0:	81fb      	strh	r3, [r7, #14]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 80007c2:	4b88      	ldr	r3, [pc, #544]	; (80009e4 <StartEncoder+0x6a0>)
 80007c4:	6818      	ldr	r0, [r3, #0]
 80007c6:	f107 010e 	add.w	r1, r7, #14
 80007ca:	2300      	movs	r3, #0
 80007cc:	2264      	movs	r2, #100	; 0x64
 80007ce:	f00a fafb 	bl	800adc8 <xQueueGenericSend>
	while (*demo)
 80007d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1ea      	bne.n	80007b0 <StartEncoder+0x46c>

  /* Infinite loop */
  for(;;)
  {
	  uint16_t buf;
	  if(qVFDHandle && xQueueReceive(qVFDHandle, &buf, 1))
 80007da:	4b82      	ldr	r3, [pc, #520]	; (80009e4 <StartEncoder+0x6a0>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d064      	beq.n	80008ac <StartEncoder+0x568>
 80007e2:	4b80      	ldr	r3, [pc, #512]	; (80009e4 <StartEncoder+0x6a0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f107 010c 	add.w	r1, r7, #12
 80007ea:	2201      	movs	r2, #1
 80007ec:	4618      	mov	r0, r3
 80007ee:	f00a fc81 	bl	800b0f4 <xQueueReceive>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d059      	beq.n	80008ac <StartEncoder+0x568>
	  {
		    for (int i = 10; i > 1; i--)
 80007f8:	230a      	movs	r3, #10
 80007fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80007fc:	e02a      	b.n	8000854 <StartEncoder+0x510>
		    {
				vfd.arr2[i][0] = vfd.arr2[i-1][0];
 80007fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000800:	1e5a      	subs	r2, r3, #1
 8000802:	4613      	mov	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4413      	add	r3, r2
 8000808:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800080c:	4413      	add	r3, r2
 800080e:	3b5c      	subs	r3, #92	; 0x5c
 8000810:	7819      	ldrb	r1, [r3, #0]
 8000812:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800081e:	4413      	add	r3, r2
 8000820:	3b5c      	subs	r3, #92	; 0x5c
 8000822:	460a      	mov	r2, r1
 8000824:	701a      	strb	r2, [r3, #0]
				vfd.arr2[i][1] = vfd.arr2[i-1][1];
 8000826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	4613      	mov	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000834:	4413      	add	r3, r2
 8000836:	3b5b      	subs	r3, #91	; 0x5b
 8000838:	7819      	ldrb	r1, [r3, #0]
 800083a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800083c:	4613      	mov	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	4413      	add	r3, r2
 8000842:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000846:	4413      	add	r3, r2
 8000848:	3b5b      	subs	r3, #91	; 0x5b
 800084a:	460a      	mov	r2, r1
 800084c:	701a      	strb	r2, [r3, #0]
		    for (int i = 10; i > 1; i--)
 800084e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000850:	3b01      	subs	r3, #1
 8000852:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000856:	2b01      	cmp	r3, #1
 8000858:	dcd1      	bgt.n	80007fe <StartEncoder+0x4ba>
		    }
			vfd.arr2[1][0] = buf & 0xFF;
 800085a:	89bb      	ldrh	r3, [r7, #12]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			vfd.arr2[1][1] = (buf>>8)&0xFF;
 8000862:	89bb      	ldrh	r3, [r7, #12]
 8000864:	0a1b      	lsrs	r3, r3, #8
 8000866:	b29b      	uxth	r3, r3
 8000868:	b2db      	uxtb	r3, r3
 800086a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			data = 0b11000000; // command 3, set address to 0
 800086e:	23c0      	movs	r3, #192	; 0xc0
 8000870:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	4857      	ldr	r0, [pc, #348]	; (80009d8 <StartEncoder+0x694>)
 800087c:	f002 fd9b 	bl	80033b6 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000880:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	2201      	movs	r2, #1
 800088a:	4854      	ldr	r0, [pc, #336]	; (80009dc <StartEncoder+0x698>)
 800088c:	f005 f832 	bl	80058f4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, vfd.arr1, sizeof(vfd.arr1), 0xffffffff);
 8000890:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000894:	f04f 33ff 	mov.w	r3, #4294967295
 8000898:	2221      	movs	r2, #33	; 0x21
 800089a:	4850      	ldr	r0, [pc, #320]	; (80009dc <StartEncoder+0x698>)
 800089c:	f005 f82a 	bl	80058f4 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a6:	484c      	ldr	r0, [pc, #304]	; (80009d8 <StartEncoder+0x694>)
 80008a8:	f002 fd85 	bl	80033b6 <HAL_GPIO_WritePin>
	  }

	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 80008ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b0:	4849      	ldr	r0, [pc, #292]	; (80009d8 <StartEncoder+0x694>)
 80008b2:	f002 fd69 	bl	8003388 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d003      	beq.n	80008c4 <StartEncoder+0x580>
	  {
		  released = true;
 80008bc:	4b4a      	ldr	r3, [pc, #296]	; (80009e8 <StartEncoder+0x6a4>)
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
 80008c2:	e015      	b.n	80008f0 <StartEncoder+0x5ac>
	  } else if (released)
 80008c4:	4b48      	ldr	r3, [pc, #288]	; (80009e8 <StartEncoder+0x6a4>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d011      	beq.n	80008f0 <StartEncoder+0x5ac>
	  {
		  released = false;
 80008cc:	4b46      	ldr	r3, [pc, #280]	; (80009e8 <StartEncoder+0x6a4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
		  invert = !invert;
 80008d2:	4b46      	ldr	r3, [pc, #280]	; (80009ec <StartEncoder+0x6a8>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	bf14      	ite	ne
 80008da:	2301      	movne	r3, #1
 80008dc:	2300      	moveq	r3, #0
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f083 0301 	eor.w	r3, r3, #1
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b3f      	ldr	r3, [pc, #252]	; (80009ec <StartEncoder+0x6a8>)
 80008ee:	701a      	strb	r2, [r3, #0]
	  }

	  data = 0b01000001; // command 2, write to LED port
 80008f0:	2341      	movs	r3, #65	; 0x41
 80008f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fc:	4836      	ldr	r0, [pc, #216]	; (80009d8 <StartEncoder+0x694>)
 80008fe:	f002 fd5a 	bl	80033b6 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000902:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	2201      	movs	r2, #1
 800090c:	4833      	ldr	r0, [pc, #204]	; (80009dc <StartEncoder+0x698>)
 800090e:	f004 fff1 	bl	80058f4 <HAL_SPI_Transmit>
	  osDelay(10);
 8000912:	200a      	movs	r0, #10
 8000914:	f009 ff82 	bl	800a81c <osDelay>

	  data = ~(1<<((tick_counter >> 1)&0b11));
 8000918:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <StartEncoder+0x6ac>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	b29b      	uxth	r3, r3
 8000920:	f003 0303 	and.w	r3, r3, #3
 8000924:	2201      	movs	r2, #1
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	b2db      	uxtb	r3, r3
 8000930:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
//	  if (invert)
//		  data =~data;
	  HAL_GPIO_WritePin(HV_EN_GPIO_Port, HV_EN_Pin, invert);
 8000934:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <StartEncoder+0x6a8>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	2120      	movs	r1, #32
 800093c:	4826      	ldr	r0, [pc, #152]	; (80009d8 <StartEncoder+0x694>)
 800093e:	f002 fd3a 	bl	80033b6 <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 8000942:	f107 0143 	add.w	r1, r7, #67	; 0x43
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
 800094a:	2201      	movs	r2, #1
 800094c:	4823      	ldr	r0, [pc, #140]	; (80009dc <StartEncoder+0x698>)
 800094e:	f004 ffd1 	bl	80058f4 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000958:	481f      	ldr	r0, [pc, #124]	; (80009d8 <StartEncoder+0x694>)
 800095a:	f002 fd2c 	bl	80033b6 <HAL_GPIO_WritePin>

	  osDelay(10);
 800095e:	200a      	movs	r0, #10
 8000960:	f009 ff5c 	bl	800a81c <osDelay>
	  data = 0b10000000; // command 4
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  data |= invert<<3; // enable/disable display
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <StartEncoder+0x6a8>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	b25a      	sxtb	r2, r3
 8000972:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000976:	b25b      	sxtb	r3, r3
 8000978:	4313      	orrs	r3, r2
 800097a:	b25b      	sxtb	r3, r3
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  data |= ((encoder_value >> 2) - 1)&0b111; // set brightness
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <StartEncoder+0x6b0>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	b29b      	uxth	r3, r3
 800098a:	b2db      	uxtb	r3, r3
 800098c:	3b01      	subs	r3, #1
 800098e:	b2db      	uxtb	r3, r3
 8000990:	b25b      	sxtb	r3, r3
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	b25a      	sxtb	r2, r3
 8000998:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800099c:	b25b      	sxtb	r3, r3
 800099e:	4313      	orrs	r3, r2
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ae:	480a      	ldr	r0, [pc, #40]	; (80009d8 <StartEncoder+0x694>)
 80009b0:	f002 fd01 	bl	80033b6 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80009b4:	f107 0143 	add.w	r1, r7, #67	; 0x43
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295
 80009bc:	2201      	movs	r2, #1
 80009be:	4807      	ldr	r0, [pc, #28]	; (80009dc <StartEncoder+0x698>)
 80009c0:	f004 ff98 	bl	80058f4 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80009c4:	2201      	movs	r2, #1
 80009c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ca:	4803      	ldr	r0, [pc, #12]	; (80009d8 <StartEncoder+0x694>)
 80009cc:	f002 fcf3 	bl	80033b6 <HAL_GPIO_WritePin>
	  osDelay(10);
 80009d0:	200a      	movs	r0, #10
 80009d2:	f009 ff23 	bl	800a81c <osDelay>
  {
 80009d6:	e700      	b.n	80007da <StartEncoder+0x496>
 80009d8:	40010c00 	.word	0x40010c00
 80009dc:	20002578 	.word	0x20002578
 80009e0:	0800df20 	.word	0x0800df20
 80009e4:	2000248c 	.word	0x2000248c
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000001 	.word	0x20000001
 80009f0:	200001ae 	.word	0x200001ae
 80009f4:	200001ac 	.word	0x200001ac

080009f8 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <HAL_UART_RxCpltCallback+0x44>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d115      	bne.n	8000a34 <HAL_UART_RxCpltCallback+0x3c>
		return;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]


   /* Notify the task that the transmission is complete by setting the TX_BIT
   in the task's notification value. */
	vTaskNotifyGiveFromISR( UARTtaskHandle,
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_UART_RxCpltCallback+0x48>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f107 020c 	add.w	r2, r7, #12
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f00b fd5a 	bl	800c4d0 <vTaskNotifyGiveFromISR>

   /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
   should be performed to ensure the interrupt returns directly to the highest
   priority task.  The macro used for this purpose is dependent on the port in
   use and may be called portEND_SWITCHING_ISR(). */
   portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d009      	beq.n	8000a36 <HAL_UART_RxCpltCallback+0x3e>
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_UART_RxCpltCallback+0x4c>)
 8000a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	f3bf 8f4f 	dsb	sy
 8000a2e:	f3bf 8f6f 	isb	sy
 8000a32:	e000      	b.n	8000a36 <HAL_UART_RxCpltCallback+0x3e>
		return;
 8000a34:	bf00      	nop
}
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20002618 	.word	0x20002618
 8000a40:	20002480 	.word	0x20002480
 8000a44:	e000ed04 	.word	0xe000ed04

08000a48 <process_encoder>:

void process_encoder(void)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000a4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a52:	483c      	ldr	r0, [pc, #240]	; (8000b44 <process_encoder+0xfc>)
 8000a54:	f002 fc98 	bl	8003388 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461c      	mov	r4, r3
		   0b10*HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin));
 8000a5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a60:	4838      	ldr	r0, [pc, #224]	; (8000b44 <process_encoder+0xfc>)
 8000a62:	f002 fc91 	bl	8003388 <HAL_GPIO_ReadPin>
 8000a66:	4603      	mov	r3, r0
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	4423      	add	r3, r4
 8000a6e:	71fb      	strb	r3, [r7, #7]
	switch(old)
 8000a70:	4b35      	ldr	r3, [pc, #212]	; (8000b48 <process_encoder+0x100>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	d85e      	bhi.n	8000b36 <process_encoder+0xee>
 8000a78:	a201      	add	r2, pc, #4	; (adr r2, 8000a80 <process_encoder+0x38>)
 8000a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7e:	bf00      	nop
 8000a80:	08000ab7 	.word	0x08000ab7
 8000a84:	08000add 	.word	0x08000add
 8000a88:	08000a91 	.word	0x08000a91
 8000a8c:	08000b03 	.word	0x08000b03
		{
		case 2:
			{
			if(new == 3) encoder_value++;
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d105      	bne.n	8000aa2 <process_encoder+0x5a>
 8000a96:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <process_encoder+0x104>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <process_encoder+0x104>)
 8000aa0:	801a      	strh	r2, [r3, #0]
			if(new == 0) encoder_value--;
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d13f      	bne.n	8000b28 <process_encoder+0xe0>
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <process_encoder+0x104>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <process_encoder+0x104>)
 8000ab2:	801a      	strh	r2, [r3, #0]
			break;
 8000ab4:	e038      	b.n	8000b28 <process_encoder+0xe0>
			}

		case 0:
			{
			if(new == 2) encoder_value++;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d105      	bne.n	8000ac8 <process_encoder+0x80>
 8000abc:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <process_encoder+0x104>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <process_encoder+0x104>)
 8000ac6:	801a      	strh	r2, [r3, #0]
			if(new == 1) encoder_value--;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d12e      	bne.n	8000b2c <process_encoder+0xe4>
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <process_encoder+0x104>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <process_encoder+0x104>)
 8000ad8:	801a      	strh	r2, [r3, #0]
			break;
 8000ada:	e027      	b.n	8000b2c <process_encoder+0xe4>
			}
		case 1:
			{
			if(new == 0) encoder_value++;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d105      	bne.n	8000aee <process_encoder+0xa6>
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <process_encoder+0x104>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <process_encoder+0x104>)
 8000aec:	801a      	strh	r2, [r3, #0]
			if(new == 3) encoder_value--;
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	d11d      	bne.n	8000b30 <process_encoder+0xe8>
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <process_encoder+0x104>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <process_encoder+0x104>)
 8000afe:	801a      	strh	r2, [r3, #0]
			break;
 8000b00:	e016      	b.n	8000b30 <process_encoder+0xe8>
			}
		case 3:
			{
			if(new == 1) encoder_value++;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d105      	bne.n	8000b14 <process_encoder+0xcc>
 8000b08:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <process_encoder+0x104>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <process_encoder+0x104>)
 8000b12:	801a      	strh	r2, [r3, #0]
			if(new == 2) encoder_value--;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d10c      	bne.n	8000b34 <process_encoder+0xec>
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <process_encoder+0x104>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <process_encoder+0x104>)
 8000b24:	801a      	strh	r2, [r3, #0]
			break;
 8000b26:	e005      	b.n	8000b34 <process_encoder+0xec>
			break;
 8000b28:	bf00      	nop
 8000b2a:	e004      	b.n	8000b36 <process_encoder+0xee>
			break;
 8000b2c:	bf00      	nop
 8000b2e:	e002      	b.n	8000b36 <process_encoder+0xee>
			break;
 8000b30:	bf00      	nop
 8000b32:	e000      	b.n	8000b36 <process_encoder+0xee>
			break;
 8000b34:	bf00      	nop
			}
		}
	old = new;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <process_encoder+0x100>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	7013      	strb	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	40010c00 	.word	0x40010c00
 8000b48:	200001b0 	.word	0x200001b0
 8000b4c:	200001ac 	.word	0x200001ac

08000b50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b64:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <MX_GPIO_Init+0x13c>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4a48      	ldr	r2, [pc, #288]	; (8000c8c <MX_GPIO_Init+0x13c>)
 8000b6a:	f043 0310 	orr.w	r3, r3, #16
 8000b6e:	6193      	str	r3, [r2, #24]
 8000b70:	4b46      	ldr	r3, [pc, #280]	; (8000c8c <MX_GPIO_Init+0x13c>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7c:	4b43      	ldr	r3, [pc, #268]	; (8000c8c <MX_GPIO_Init+0x13c>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a42      	ldr	r2, [pc, #264]	; (8000c8c <MX_GPIO_Init+0x13c>)
 8000b82:	f043 0320 	orr.w	r3, r3, #32
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b40      	ldr	r3, [pc, #256]	; (8000c8c <MX_GPIO_Init+0x13c>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0320 	and.w	r3, r3, #32
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b3d      	ldr	r3, [pc, #244]	; (8000c8c <MX_GPIO_Init+0x13c>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a3c      	ldr	r2, [pc, #240]	; (8000c8c <MX_GPIO_Init+0x13c>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b3a      	ldr	r3, [pc, #232]	; (8000c8c <MX_GPIO_Init+0x13c>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bac:	4b37      	ldr	r3, [pc, #220]	; (8000c8c <MX_GPIO_Init+0x13c>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a36      	ldr	r2, [pc, #216]	; (8000c8c <MX_GPIO_Init+0x13c>)
 8000bb2:	f043 0308 	orr.w	r3, r3, #8
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b34      	ldr	r3, [pc, #208]	; (8000c8c <MX_GPIO_Init+0x13c>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0308 	and.w	r3, r3, #8
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bca:	4831      	ldr	r0, [pc, #196]	; (8000c90 <MX_GPIO_Init+0x140>)
 8000bcc:	f002 fbf3 	bl	80033b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 8000bd6:	482f      	ldr	r0, [pc, #188]	; (8000c94 <MX_GPIO_Init+0x144>)
 8000bd8:	f002 fbed 	bl	80033b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000be2:	482d      	ldr	r0, [pc, #180]	; (8000c98 <MX_GPIO_Init+0x148>)
 8000be4:	f002 fbe7 	bl	80033b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4823      	ldr	r0, [pc, #140]	; (8000c90 <MX_GPIO_Init+0x140>)
 8000c02:	f002 fa3d 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c06:	2301      	movs	r3, #1
 8000c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0a:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <MX_GPIO_Init+0x14c>)
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	4619      	mov	r1, r3
 8000c18:	481f      	ldr	r0, [pc, #124]	; (8000c98 <MX_GPIO_Init+0x148>)
 8000c1a:	f002 fa31 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin|enc_s_Pin;
 8000c1e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	4619      	mov	r1, r3
 8000c32:	4818      	ldr	r0, [pc, #96]	; (8000c94 <MX_GPIO_Init+0x144>)
 8000c34:	f002 fa24 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000c38:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 8000c3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4810      	ldr	r0, [pc, #64]	; (8000c94 <MX_GPIO_Init+0x144>)
 8000c52:	f002 fa15 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480a      	ldr	r0, [pc, #40]	; (8000c98 <MX_GPIO_Init+0x148>)
 8000c70:	f002 fa06 	bl	8003080 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2105      	movs	r1, #5
 8000c78:	2006      	movs	r0, #6
 8000c7a:	f002 f926 	bl	8002eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c7e:	2006      	movs	r0, #6
 8000c80:	f002 f93f 	bl	8002f02 <HAL_NVIC_EnableIRQ>

}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40011000 	.word	0x40011000
 8000c94:	40010c00 	.word	0x40010c00
 8000c98:	40010800 	.word	0x40010800
 8000c9c:	10110000 	.word	0x10110000

08000ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca4:	f002 f82a 	bl	8002cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca8:	f000 f80d 	bl	8000cc6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cac:	f7ff ff50 	bl	8000b50 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000cb0:	f001 fdce 	bl	8002850 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000cb4:	f001 ff1c 	bl	8002af0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000cb8:	f009 fca0 	bl	800a5fc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000cbc:	f7ff fa5a 	bl	8000174 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000cc0:	f009 fcce 	bl	800a660 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <main+0x24>

08000cc6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b094      	sub	sp, #80	; 0x50
 8000cca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ccc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd0:	2228      	movs	r2, #40	; 0x28
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f00d f8cf 	bl	800de78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d04:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d06:	2301      	movs	r3, #1
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d14:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f004 f862 	bl	8004de8 <HAL_RCC_OscConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000d2a:	f000 f839 	bl	8000da0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2e:	230f      	movs	r3, #15
 8000d30:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2102      	movs	r1, #2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f004 facc 	bl	80052e8 <HAL_RCC_ClockConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d56:	f000 f823 	bl	8000da0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	4618      	mov	r0, r3
 8000d66:	f004 fc8b 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d70:	f000 f816 	bl	8000da0 <Error_Handler>
  }
}
 8000d74:	bf00      	nop
 8000d76:	3750      	adds	r7, #80	; 0x50
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d101      	bne.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d8e:	f001 ffcb 	bl	8002d28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40012c00 	.word	0x40012c00

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <Error_Handler+0x8>

08000daa <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b085      	sub	sp, #20
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	5c8a      	ldrb	r2, [r1, r2]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b3f      	cmp	r3, #63	; 0x3f
 8000dc8:	dd02      	ble.n	8000dd0 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	3b40      	subs	r3, #64	; 0x40
 8000dce:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000dd6:	bf00      	nop
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	5cd3      	ldrb	r3, [r2, r3]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <hist_is_space_for_new+0x1a>
		return true;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e01e      	b.n	8000e38 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	429a      	cmp	r2, r3
 8000e04:	db0c      	blt.n	8000e20 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4413      	add	r3, r2
 8000e14:	3b01      	subs	r3, #1
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	da0c      	bge.n	8000e36 <hist_is_space_for_new+0x56>
			return true;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e00b      	b.n	8000e38 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	da01      	bge.n	8000e36 <hist_is_space_for_new+0x56>
			return true;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <hist_is_space_for_new+0x58>
	}
	return false;
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b3e      	cmp	r3, #62	; 0x3e
 8000e52:	dc61      	bgt.n	8000f18 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8000e54:	e002      	b.n	8000e5c <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f7ff ffa7 	bl	8000daa <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f7ff ffbe 	bl	8000de0 <hist_is_space_for_new>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f5      	beq.n	8000e56 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	5cd3      	ldrb	r3, [r2, r3]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d105      	bne.n	8000e82 <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	b2d1      	uxtb	r1, r2
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	da0a      	bge.n	8000ea6 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	3301      	adds	r3, #1
 8000e98:	4413      	add	r3, r2
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	68b9      	ldr	r1, [r7, #8]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f00c ffc2 	bl	800de28 <memcpy>
 8000ea4:	e018      	b.n	8000ed8 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000eae:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f00c ffb2 	bl	800de28 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 8000ec4:	68f8      	ldr	r0, [r7, #12]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	18d1      	adds	r1, r2, r3
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	f00c ffa8 	bl	800de28 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	b2d1      	uxtb	r1, r2
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4413      	add	r3, r2
 8000eec:	1c5a      	adds	r2, r3, #1
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ef8:	dd05      	ble.n	8000f06 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2200      	movs	r2, #0
 8000f14:	649a      	str	r2, [r3, #72]	; 0x48
 8000f16:	e000      	b.n	8000f1a <hist_save_line+0xd8>
		return;
 8000f18:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8000f36:	e010      	b.n	8000f5a <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f44:	4413      	add	r3, r2
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8000f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f4c:	dd02      	ble.n	8000f54 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 8000f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f50:	3b40      	subs	r3, #64	; 0x40
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8000f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f56:	3301      	adds	r3, #1
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5e:	4413      	add	r3, r2
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1e8      	bne.n	8000f38 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d176      	bne.n	800105a <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f72:	429a      	cmp	r2, r3
 8000f74:	f2c0 80d6 	blt.w	8001124 <hist_restore_line+0x204>
			int header = pThis->begin;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000f82:	e010      	b.n	8000fa6 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	4413      	add	r3, r2
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f90:	4413      	add	r3, r2
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8000f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f96:	2b3f      	cmp	r3, #63	; 0x3f
 8000f98:	dd02      	ble.n	8000fa0 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	3b40      	subs	r3, #64	; 0x40
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 8000fa0:	6a3b      	ldr	r3, [r7, #32]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <hist_restore_line+0xa2>
 8000fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fb4:	6a3b      	ldr	r3, [r7, #32]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	1e5a      	subs	r2, r3, #1
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d1e0      	bne.n	8000f84 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	4413      	add	r3, r2
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 80aa 	beq.w	8001124 <hist_restore_line+0x204>
					pThis->cur++;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2b3f      	cmp	r3, #63	; 0x3f
 8000fea:	dc11      	bgt.n	8001010 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 8000fec:	2233      	movs	r2, #51	; 0x33
 8000fee:	2100      	movs	r1, #0
 8000ff0:	68b8      	ldr	r0, [r7, #8]
 8000ff2:	f00c ff41 	bl	800de78 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	18d1      	adds	r1, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68b8      	ldr	r0, [r7, #8]
 800100a:	f00c ff0d 	bl	800de28 <memcpy>
 800100e:	e01f      	b.n	8001050 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001016:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8001018:	2233      	movs	r2, #51	; 0x33
 800101a:	2100      	movs	r1, #0
 800101c:	68b8      	ldr	r0, [r7, #8]
 800101e:	f00c ff2b 	bl	800de78 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	3301      	adds	r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4619      	mov	r1, r3
 800102e:	68b8      	ldr	r0, [r7, #8]
 8001030:	f00c fefa 	bl	800de28 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	18d0      	adds	r0, r2, r3
 800103a:	68f9      	ldr	r1, [r7, #12]
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	4413      	add	r3, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	461a      	mov	r2, r3
 800104c:	f00c feec 	bl	800de28 <memcpy>
				}
				return pThis->ring_buf[header];
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	e066      	b.n	8001128 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800105e:	2b00      	cmp	r3, #0
 8001060:	dd5e      	ble.n	8001120 <hist_restore_line+0x200>
				pThis->cur--;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001066:	1e5a      	subs	r2, r3, #1
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8001076:	e010      	b.n	800109a <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	4413      	add	r3, r2
 8001086:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b3f      	cmp	r3, #63	; 0x3f
 800108c:	dd02      	ble.n	8001094 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b40      	subs	r3, #64	; 0x40
 8001092:	61fb      	str	r3, [r7, #28]
				j++;
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	3301      	adds	r3, #1
 8001098:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	4413      	add	r3, r2
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d006      	beq.n	80010b4 <hist_restore_line+0x194>
 80010a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	1ad2      	subs	r2, r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d1e1      	bne.n	8001078 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	4413      	add	r3, r2
 80010c2:	2b3f      	cmp	r3, #63	; 0x3f
 80010c4:	dc0c      	bgt.n	80010e0 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	3301      	adds	r3, #1
 80010cc:	18d1      	adds	r1, r2, r3
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	4413      	add	r3, r2
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68b8      	ldr	r0, [r7, #8]
 80010da:	f00c fea5 	bl	800de28 <memcpy>
 80010de:	e01a      	b.n	8001116 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80010e6:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	4619      	mov	r1, r3
 80010f4:	68b8      	ldr	r0, [r7, #8]
 80010f6:	f00c fe97 	bl	800de28 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	18d0      	adds	r0, r2, r3
 8001100:	68f9      	ldr	r1, [r7, #12]
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	4413      	add	r3, r2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	461a      	mov	r2, r3
 8001112:	f00c fe89 	bl	800de28 <memcpy>
			}
			return pThis->ring_buf[header];
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	4413      	add	r3, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	e003      	b.n	8001128 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8001120:	2300      	movs	r3, #0
 8001122:	e001      	b.n	8001128 <hist_restore_line+0x208>
		}
	}
	return -1;
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001128:	4618      	mov	r0, r3
 800112a:	3730      	adds	r7, #48	; 0x30
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
	int i = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8001144:	e002      	b.n	800114c <split+0x1c>
			ind++;
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	3301      	adds	r3, #1
 800114a:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4413      	add	r3, r2
 8001152:	3354      	adds	r3, #84	; 0x54
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d103      	bne.n	8001162 <split+0x32>
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	429a      	cmp	r2, r3
 8001160:	dbf1      	blt.n	8001146 <split+0x16>
		}
		if (!(ind < limit)) return i;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	429a      	cmp	r2, r3
 8001168:	db01      	blt.n	800116e <split+0x3e>
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	e024      	b.n	80011b8 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	1c58      	adds	r0, r3, #1
 800117a:	6178      	str	r0, [r7, #20]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	4403      	add	r3, r0
 8001182:	440a      	add	r2, r1
 8001184:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2b04      	cmp	r3, #4
 800118a:	dd05      	ble.n	8001198 <split+0x68>
			return -1;
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	e012      	b.n	80011b8 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	3301      	adds	r3, #1
 8001196:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4413      	add	r3, r2
 800119e:	3354      	adds	r3, #84	; 0x54
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <split+0x7e>
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dbf1      	blt.n	8001192 <split+0x62>
		}
		if (!(ind < limit)) return i;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	dbca      	blt.n	800114c <split+0x1c>
 80011b6:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	371c      	adds	r7, #28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011d4:	4610      	mov	r0, r2
 80011d6:	4798      	blx	r3
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <terminal_backspace+0x1c>)
 80011f0:	4798      	blx	r3
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	0800df70 	.word	0x0800df70

08001200 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800120e:	4803      	ldr	r0, [pc, #12]	; (800121c <terminal_newline+0x1c>)
 8001210:	4798      	blx	r3
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	0800df78 	.word	0x0800df78

08001220 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	2300      	movs	r3, #0
 8001230:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123c:	d235      	bcs.n	80012aa <u16bit_to_str+0x8a>
		while (nmb > 0) {
 800123e:	e01a      	b.n	8001276 <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <u16bit_to_str+0x9c>)
 8001244:	fba3 2301 	umull	r2, r3, r3, r1
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	1aca      	subs	r2, r1, r3
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	1c59      	adds	r1, r3, #1
 800125a:	6179      	str	r1, [r7, #20]
 800125c:	3230      	adds	r2, #48	; 0x30
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	f107 0118 	add.w	r1, r7, #24
 8001264:	440b      	add	r3, r1
 8001266:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a13      	ldr	r2, [pc, #76]	; (80012bc <u16bit_to_str+0x9c>)
 800126e:	fba2 2303 	umull	r2, r3, r2, r3
 8001272:	08db      	lsrs	r3, r3, #3
 8001274:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1e1      	bne.n	8001240 <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e00f      	b.n	80012a2 <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	1e5a      	subs	r2, r3, #1
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	1c59      	adds	r1, r3, #1
 800128e:	6039      	str	r1, [r7, #0]
 8001290:	f107 0118 	add.w	r1, r7, #24
 8001294:	440a      	add	r2, r1
 8001296:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800129a:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	3301      	adds	r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	dbeb      	blt.n	8001282 <u16bit_to_str+0x62>
	}
	*buf = '\0';
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
	return buf;
 80012b0:	683b      	ldr	r3, [r7, #0]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	371c      	adds	r7, #28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	cccccccd 	.word	0xcccccccd

080012c0 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	4a1d      	ldr	r2, [pc, #116]	; (8001354 <terminal_move_cursor+0x94>)
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	4611      	mov	r1, r2
 80012e4:	8019      	strh	r1, [r3, #0]
 80012e6:	3302      	adds	r3, #2
 80012e8:	0c12      	lsrs	r2, r2, #16
 80012ea:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	dd0f      	ble.n	8001312 <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	3302      	adds	r3, #2
 80012fa:	4619      	mov	r1, r3
 80012fc:	4610      	mov	r0, r2
 80012fe:	f7ff ff8f 	bl	8001220 <u16bit_to_str>
 8001302:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	4914      	ldr	r1, [pc, #80]	; (8001358 <terminal_move_cursor+0x98>)
 8001308:	461a      	mov	r2, r3
 800130a:	460b      	mov	r3, r1
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	8013      	strh	r3, [r2, #0]
 8001310:	e013      	b.n	800133a <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	da18      	bge.n	800134a <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	425b      	negs	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	3302      	adds	r3, #2
 8001324:	4619      	mov	r1, r3
 8001326:	4610      	mov	r0, r2
 8001328:	f7ff ff7a 	bl	8001220 <u16bit_to_str>
 800132c:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	490a      	ldr	r1, [pc, #40]	; (800135c <terminal_move_cursor+0x9c>)
 8001332:	461a      	mov	r2, r3
 8001334:	460b      	mov	r3, r1
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001340:	f107 020c 	add.w	r2, r7, #12
 8001344:	4610      	mov	r0, r2
 8001346:	4798      	blx	r3
 8001348:	e000      	b.n	800134c <terminal_move_cursor+0x8c>
		return;
 800134a:	bf00      	nop
}
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	0800df7c 	.word	0x0800df7c
 8001358:	0800df80 	.word	0x0800df80
 800135c:	0800df84 	.word	0x0800df84

08001360 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <terminal_reset_cursor+0x64>)
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	4611      	mov	r1, r2
 8001372:	8019      	strh	r1, [r3, #0]
 8001374:	3302      	adds	r3, #2
 8001376:	0c12      	lsrs	r2, r2, #16
 8001378:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	3302      	adds	r3, #2
 8001380:	4619      	mov	r1, r3
 8001382:	203a      	movs	r0, #58	; 0x3a
 8001384:	f7ff ff4c 	bl	8001220 <u16bit_to_str>
 8001388:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <terminal_reset_cursor+0x68>)
 800138e:	6810      	ldr	r0, [r2, #0]
 8001390:	6018      	str	r0, [r3, #0]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3303      	adds	r3, #3
 8001396:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 8001398:	69f9      	ldr	r1, [r7, #28]
 800139a:	2005      	movs	r0, #5
 800139c:	f7ff ff40 	bl	8001220 <u16bit_to_str>
 80013a0:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	4909      	ldr	r1, [pc, #36]	; (80013cc <terminal_reset_cursor+0x6c>)
 80013a6:	461a      	mov	r2, r3
 80013a8:	460b      	mov	r3, r1
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013b4:	f107 020c 	add.w	r2, r7, #12
 80013b8:	4610      	mov	r0, r2
 80013ba:	4798      	blx	r3
}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	0800df7c 	.word	0x0800df7c
 80013c8:	0800df88 	.word	0x0800df88
 80013cc:	0800df80 	.word	0x0800df80

080013d0 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013e2:	4816      	ldr	r0, [pc, #88]	; (800143c <terminal_print_line+0x6c>)
 80013e4:	4798      	blx	r3

	char nch [] = {0,0};
 80013e6:	2300      	movs	r3, #0
 80013e8:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	e014      	b.n	800141a <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	3354      	adds	r3, #84	; 0x54
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 80013fc:	7c3b      	ldrb	r3, [r7, #16]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <terminal_print_line+0x36>
			nch[0] = ' ';
 8001402:	2320      	movs	r3, #32
 8001404:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800140c:	f107 0210 	add.w	r2, r7, #16
 8001410:	4610      	mov	r0, r2
 8001412:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3301      	adds	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	429a      	cmp	r2, r3
 8001424:	dbe4      	blt.n	80013f0 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f7ff ff9a 	bl	8001360 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f7ff ff46 	bl	80012c0 <terminal_move_cursor>
}
 8001434:	bf00      	nop
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	0800df8c 	.word	0x0800df8c

08001440 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3354      	adds	r3, #84	; 0x54
 800144e:	2233      	movs	r2, #51	; 0x33
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f00c fd10 	bl	800de78 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3304      	adds	r3, #4
 800145c:	2240      	movs	r2, #64	; 0x40
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f00c fd09 	bl	800de78 <memset>
	pThis->ring_hist.begin = 0;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pThis->execute = NULL;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	pThis->get_completion = NULL;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
	pThis->prompt_str = prompt_default;
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <microrl_init+0x78>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000004 	.word	0x20000004

080014bc <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	1d18      	adds	r0, r3, #4
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3354      	adds	r3, #84	; 0x54
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fcfb 	bl	8000f20 <hist_restore_line>
 800152a:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	db1a      	blt.n	8001568 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	3354      	adds	r3, #84	; 0x54
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		terminal_reset_cursor (pThis);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ff04 	bl	8001360 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800155e:	461a      	mov	r2, r3
 8001560:	2100      	movs	r1, #0
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ff34 	bl	80013d0 <terminal_print_line>
	}
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	2b5b      	cmp	r3, #91	; 0x5b
 8001580:	d104      	bne.n	800158c <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
		return 0;
 8001588:	2300      	movs	r3, #0
 800158a:	e07b      	b.n	8001684 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d14f      	bne.n	8001634 <escape_process+0xc4>
		if (ch == 'A') {
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	2b41      	cmp	r3, #65	; 0x41
 8001598:	d105      	bne.n	80015a6 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 800159a:	2100      	movs	r1, #0
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ffb7 	bl	8001510 <hist_search>
#endif
			return 1;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e06e      	b.n	8001684 <escape_process+0x114>
		} else if (ch == 'B') {
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	2b42      	cmp	r3, #66	; 0x42
 80015aa:	d105      	bne.n	80015b8 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 80015ac:	2101      	movs	r1, #1
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffae 	bl	8001510 <hist_search>
#endif
			return 1;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e065      	b.n	8001684 <escape_process+0x114>
		} else if (ch == 'C') {
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	2b43      	cmp	r3, #67	; 0x43
 80015bc:	d114      	bne.n	80015e8 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ca:	429a      	cmp	r2, r3
 80015cc:	da0a      	bge.n	80015e4 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 80015ce:	2101      	movs	r1, #1
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fe75 	bl	80012c0 <terminal_move_cursor>
				pThis->cursor++;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e04d      	b.n	8001684 <escape_process+0x114>
		} else if (ch == 'D') {
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	2b44      	cmp	r3, #68	; 0x44
 80015ec:	d112      	bne.n	8001614 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	dd0b      	ble.n	8001610 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fe5f 	bl	80012c0 <terminal_move_cursor>
				pThis->cursor--;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001608:	1e5a      	subs	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8001610:	2301      	movs	r3, #1
 8001612:	e037      	b.n	8001684 <escape_process+0x114>
		} else if (ch == '7') {
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	2b37      	cmp	r3, #55	; 0x37
 8001618:	d104      	bne.n	8001624 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2202      	movs	r2, #2
 800161e:	701a      	strb	r2, [r3, #0]
			return 0;
 8001620:	2300      	movs	r3, #0
 8001622:	e02f      	b.n	8001684 <escape_process+0x114>
		} else if (ch == '8') {
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	2b38      	cmp	r3, #56	; 0x38
 8001628:	d12b      	bne.n	8001682 <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2203      	movs	r2, #3
 800162e:	701a      	strb	r2, [r3, #0]
			return 0;
 8001630:	2300      	movs	r3, #0
 8001632:	e027      	b.n	8001684 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	2b7e      	cmp	r3, #126	; 0x7e
 8001638:	d123      	bne.n	8001682 <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d108      	bne.n	8001654 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fe8c 	bl	8001360 <terminal_reset_cursor>
			pThis->cursor = 0;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8001650:	2301      	movs	r3, #1
 8001652:	e017      	b.n	8001684 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b03      	cmp	r3, #3
 800165a:	d112      	bne.n	8001682 <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	4619      	mov	r1, r3
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fe27 	bl	80012c0 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	2b32      	cmp	r3, #50	; 0x32
 80016a4:	dc60      	bgt.n	8001768 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016b2:	4619      	mov	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	440b      	add	r3, r1
 80016b8:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3354      	adds	r3, #84	; 0x54
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor + len,
 80016c4:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016d2:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 80016d4:	461a      	mov	r2, r3
 80016d6:	f00c fbb5 	bl	800de44 <memmove>
		for (i = 0; i < len; i++) {
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e025      	b.n	800172c <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	441a      	add	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	440b      	add	r3, r1
 80016f0:	7811      	ldrb	r1, [r2, #0]
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4413      	add	r3, r2
 80016f6:	460a      	mov	r2, r1
 80016f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	4413      	add	r3, r2
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4413      	add	r3, r2
 800170a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800170e:	2b20      	cmp	r3, #32
 8001710:	d109      	bne.n	8001726 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	4413      	add	r3, r2
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	dbd5      	blt.n	80016e0 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	441a      	add	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdlen += len;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	441a      	add	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4413      	add	r3, r2
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <microrl_insert_text+0xde>
	}
	return false;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001780:	2b00      	cmp	r3, #0
 8001782:	dd31      	ble.n	80017e8 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff fd2b 	bl	80011e0 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001796:	3b01      	subs	r3, #1
 8001798:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3354      	adds	r3, #84	; 0x54
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor-1,
 80017a4:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 80017b6:	461a      	mov	r2, r3
 80017b8:	f00c fb44 	bl	800de44 <memmove>
		pThis->cursor--;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017c2:	1e5a      	subs	r2, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdline [pThis->cmdlen] = '\0';
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f7fe fcb0 	bl	8000164 <strlen>
 8001804:	4603      	mov	r3, r0
 8001806:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e019      	b.n	8001842 <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fca3 	bl	8000164 <strlen>
 800181e:	4602      	mov	r2, r0
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	429a      	cmp	r2, r3
 8001824:	d20a      	bcs.n	800183c <common_len+0x4c>
			shortest = arr[i];
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f7fe fc96 	bl	8000164 <strlen>
 8001838:	4603      	mov	r3, r0
 800183a:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3301      	adds	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1de      	bne.n	800180e <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e01f      	b.n	8001896 <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	e012      	b.n	8001882 <common_len+0x92>
			if (shortest[i] != arr[j][i])
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4413      	add	r3, r2
 8001862:	781a      	ldrb	r2, [r3, #0]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	440b      	add	r3, r1
 800186c:	6819      	ldr	r1, [r3, #0]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	440b      	add	r3, r1
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <common_len+0x8c>
				return i;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	e011      	b.n	80018a0 <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	3301      	adds	r3, #1
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1e5      	bne.n	800185c <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3301      	adds	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	429a      	cmp	r2, r3
 800189c:	dbdb      	blt.n	8001856 <common_len+0x66>

	return i;
 800189e:	697b      	ldr	r3, [r7, #20]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b08c      	sub	sp, #48	; 0x30
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 809c 	beq.w	80019f4 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018c2:	f107 020c 	add.w	r2, r7, #12
 80018c6:	4619      	mov	r1, r3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff fc31 	bl	8001130 <split>
 80018ce:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018d6:	3b01      	subs	r3, #1
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d109      	bne.n	80018f8 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 80018e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018f0:	4413      	add	r3, r2
 80018f2:	4a42      	ldr	r2, [pc, #264]	; (80019fc <microrl_get_complite+0x154>)
 80018f4:	f843 2c24 	str.w	r2, [r3, #-36]
	compl_token = pThis->get_completion (status, tkn_arr);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fe:	f107 020c 	add.w	r2, r7, #12
 8001902:	4611      	mov	r1, r2
 8001904:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001906:	4798      	blx	r3
 8001908:	6238      	str	r0, [r7, #32]
	if (compl_token[0] != NULL) {
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d071      	beq.n	80019f6 <microrl_get_complite+0x14e>
		int i = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
		int len;

		if (compl_token[1] == NULL) {
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	3304      	adds	r3, #4
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d107      	bne.n	8001930 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fc1d 	bl	8000164 <strlen>
 800192a:	4603      	mov	r3, r0
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
 800192e:	e026      	b.n	800197e <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8001930:	6a38      	ldr	r0, [r7, #32]
 8001932:	f7ff ff5d 	bl	80017f0 <common_len>
 8001936:	6278      	str	r0, [r7, #36]	; 0x24
			terminal_newline (pThis);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fc61 	bl	8001200 <terminal_newline>
			while (compl_token [i] != NULL) {
 800193e:	e011      	b.n	8001964 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001948:	0092      	lsls	r2, r2, #2
 800194a:	6a39      	ldr	r1, [r7, #32]
 800194c:	440a      	add	r2, r1
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	4610      	mov	r0, r2
 8001952:	4798      	blx	r3
				pThis->print (" ");
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800195a:	4829      	ldr	r0, [pc, #164]	; (8001a00 <microrl_get_complite+0x158>)
 800195c:	4798      	blx	r3
				i++;
 800195e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001960:	3301      	adds	r3, #1
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
			while (compl_token [i] != NULL) {
 8001964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	6a3a      	ldr	r2, [r7, #32]
 800196a:	4413      	add	r3, r2
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1e6      	bne.n	8001940 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fc44 	bl	8001200 <terminal_newline>
			print_prompt (pThis);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff fc22 	bl	80011c2 <print_prompt>
		}
		
		if (len) {
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	2b00      	cmp	r3, #0
 8001982:	d02b      	beq.n	80019dc <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	681c      	ldr	r4, [r3, #0]
 8001988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198a:	3b01      	subs	r3, #1
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001992:	4413      	add	r3, r2
 8001994:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fbe3 	bl	8000164 <strlen>
 800199e:	4603      	mov	r3, r0
 80019a0:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 80019a2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80019a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a6:	3b01      	subs	r3, #1
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80019ae:	4413      	add	r3, r2
 80019b0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fbd5 	bl	8000164 <strlen>
 80019ba:	4603      	mov	r3, r0
 80019bc:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 80019be:	461a      	mov	r2, r3
 80019c0:	4629      	mov	r1, r5
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fe62 	bl	800168c <microrl_insert_text>
			if (compl_token[1] == NULL) 
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	3304      	adds	r3, #4
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d104      	bne.n	80019dc <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 80019d2:	2201      	movs	r2, #1
 80019d4:	490a      	ldr	r1, [pc, #40]	; (8001a00 <microrl_get_complite+0x158>)
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fe58 	bl	800168c <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fcbf 	bl	8001360 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019e8:	461a      	mov	r2, r3
 80019ea:	2100      	movs	r1, #0
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff fcef 	bl	80013d0 <terminal_print_line>
 80019f2:	e000      	b.n	80019f6 <microrl_get_complite+0x14e>
		return;
 80019f4:	bf00      	nop
	} 
}
 80019f6:	3730      	adds	r7, #48	; 0x30
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bdb0      	pop	{r4, r5, r7, pc}
 80019fc:	0800df90 	.word	0x0800df90
 8001a00:	0800df94 	.word	0x0800df94

08001a04 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fbf7 	bl	8001200 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	dd0a      	ble.n	8001a32 <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	1d18      	adds	r0, r3, #4
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f7ff fa08 	bl	8000e42 <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a38:	f107 0208 	add.w	r2, r7, #8
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fb76 	bl	8001130 <split>
 8001a44:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d109      	bne.n	8001a62 <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a54:	4817      	ldr	r0, [pc, #92]	; (8001ab4 <new_line_handler+0xb0>)
 8001a56:	4798      	blx	r3
		pThis->print (ENDL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a5e:	4816      	ldr	r0, [pc, #88]	; (8001ab8 <new_line_handler+0xb4>)
 8001a60:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	dd0c      	ble.n	8001a82 <new_line_handler+0x7e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a78:	f107 0208 	add.w	r2, r7, #8
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	69f8      	ldr	r0, [r7, #28]
 8001a80:	4798      	blx	r3
	print_prompt (pThis);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fb9d 	bl	80011c2 <print_prompt>
	pThis->cmdlen = 0;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3354      	adds	r3, #84	; 0x54
 8001a9c:	2233      	movs	r2, #51	; 0x33
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f00c f9e9 	bl	800de78 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 8001aac:	bf00      	nop
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	0800df98 	.word	0x0800df98
 8001ab8:	0800df78 	.word	0x0800df78

08001abc <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	785b      	ldrb	r3, [r3, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00d      	beq.n	8001aea <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff fd4b 	bl	8001570 <escape_process>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 81e3 	beq.w	8001ea8 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 8001ae8:	e1de      	b.n	8001ea8 <microrl_insert_char+0x3ec>
		switch (ch) {
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	2b7e      	cmp	r3, #126	; 0x7e
 8001af0:	f200 81af 	bhi.w	8001e52 <microrl_insert_char+0x396>
 8001af4:	a201      	add	r2, pc, #4	; (adr r2, 8001afc <microrl_insert_char+0x40>)
 8001af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afa:	bf00      	nop
 8001afc:	08001d8f 	.word	0x08001d8f
 8001b00:	08001dc7 	.word	0x08001dc7
 8001b04:	08001e3f 	.word	0x08001e3f
 8001b08:	08001e53 	.word	0x08001e53
 8001b0c:	08001d6b 	.word	0x08001d6b
 8001b10:	08001d9f 	.word	0x08001d9f
 8001b14:	08001e53 	.word	0x08001e53
 8001b18:	08001dff 	.word	0x08001dff
 8001b1c:	08001d21 	.word	0x08001d21
 8001b20:	08001cf9 	.word	0x08001cf9
 8001b24:	08001d53 	.word	0x08001d53
 8001b28:	08001e53 	.word	0x08001e53
 8001b2c:	08001cf9 	.word	0x08001cf9
 8001b30:	08001df5 	.word	0x08001df5
 8001b34:	08001e53 	.word	0x08001e53
 8001b38:	08001deb 	.word	0x08001deb
 8001b3c:	08001e53 	.word	0x08001e53
 8001b40:	08001e1b 	.word	0x08001e1b
 8001b44:	08001e53 	.word	0x08001e53
 8001b48:	08001e53 	.word	0x08001e53
 8001b4c:	08001d37 	.word	0x08001d37
 8001b50:	08001e53 	.word	0x08001e53
 8001b54:	08001e53 	.word	0x08001e53
 8001b58:	08001e53 	.word	0x08001e53
 8001b5c:	08001e53 	.word	0x08001e53
 8001b60:	08001e53 	.word	0x08001e53
 8001b64:	08001d29 	.word	0x08001d29
 8001b68:	08001e53 	.word	0x08001e53
 8001b6c:	08001e53 	.word	0x08001e53
 8001b70:	08001e53 	.word	0x08001e53
 8001b74:	08001e53 	.word	0x08001e53
 8001b78:	08001e53 	.word	0x08001e53
 8001b7c:	08001e53 	.word	0x08001e53
 8001b80:	08001e53 	.word	0x08001e53
 8001b84:	08001e53 	.word	0x08001e53
 8001b88:	08001e53 	.word	0x08001e53
 8001b8c:	08001e53 	.word	0x08001e53
 8001b90:	08001e53 	.word	0x08001e53
 8001b94:	08001e53 	.word	0x08001e53
 8001b98:	08001e53 	.word	0x08001e53
 8001b9c:	08001e53 	.word	0x08001e53
 8001ba0:	08001e53 	.word	0x08001e53
 8001ba4:	08001e53 	.word	0x08001e53
 8001ba8:	08001e53 	.word	0x08001e53
 8001bac:	08001e53 	.word	0x08001e53
 8001bb0:	08001e53 	.word	0x08001e53
 8001bb4:	08001e53 	.word	0x08001e53
 8001bb8:	08001e53 	.word	0x08001e53
 8001bbc:	08001e53 	.word	0x08001e53
 8001bc0:	08001e53 	.word	0x08001e53
 8001bc4:	08001e53 	.word	0x08001e53
 8001bc8:	08001e53 	.word	0x08001e53
 8001bcc:	08001e53 	.word	0x08001e53
 8001bd0:	08001e53 	.word	0x08001e53
 8001bd4:	08001e53 	.word	0x08001e53
 8001bd8:	08001e53 	.word	0x08001e53
 8001bdc:	08001e53 	.word	0x08001e53
 8001be0:	08001e53 	.word	0x08001e53
 8001be4:	08001e53 	.word	0x08001e53
 8001be8:	08001e53 	.word	0x08001e53
 8001bec:	08001e53 	.word	0x08001e53
 8001bf0:	08001e53 	.word	0x08001e53
 8001bf4:	08001e53 	.word	0x08001e53
 8001bf8:	08001e53 	.word	0x08001e53
 8001bfc:	08001e53 	.word	0x08001e53
 8001c00:	08001e53 	.word	0x08001e53
 8001c04:	08001e53 	.word	0x08001e53
 8001c08:	08001e53 	.word	0x08001e53
 8001c0c:	08001e53 	.word	0x08001e53
 8001c10:	08001e53 	.word	0x08001e53
 8001c14:	08001e53 	.word	0x08001e53
 8001c18:	08001e53 	.word	0x08001e53
 8001c1c:	08001e53 	.word	0x08001e53
 8001c20:	08001e53 	.word	0x08001e53
 8001c24:	08001e53 	.word	0x08001e53
 8001c28:	08001e53 	.word	0x08001e53
 8001c2c:	08001e53 	.word	0x08001e53
 8001c30:	08001e53 	.word	0x08001e53
 8001c34:	08001e53 	.word	0x08001e53
 8001c38:	08001e53 	.word	0x08001e53
 8001c3c:	08001e53 	.word	0x08001e53
 8001c40:	08001e53 	.word	0x08001e53
 8001c44:	08001e53 	.word	0x08001e53
 8001c48:	08001e53 	.word	0x08001e53
 8001c4c:	08001e53 	.word	0x08001e53
 8001c50:	08001e53 	.word	0x08001e53
 8001c54:	08001e53 	.word	0x08001e53
 8001c58:	08001e53 	.word	0x08001e53
 8001c5c:	08001e53 	.word	0x08001e53
 8001c60:	08001e53 	.word	0x08001e53
 8001c64:	08001e53 	.word	0x08001e53
 8001c68:	08001e53 	.word	0x08001e53
 8001c6c:	08001e53 	.word	0x08001e53
 8001c70:	08001e53 	.word	0x08001e53
 8001c74:	08001e53 	.word	0x08001e53
 8001c78:	08001e53 	.word	0x08001e53
 8001c7c:	08001e53 	.word	0x08001e53
 8001c80:	08001e53 	.word	0x08001e53
 8001c84:	08001e53 	.word	0x08001e53
 8001c88:	08001e53 	.word	0x08001e53
 8001c8c:	08001e53 	.word	0x08001e53
 8001c90:	08001e53 	.word	0x08001e53
 8001c94:	08001e53 	.word	0x08001e53
 8001c98:	08001e53 	.word	0x08001e53
 8001c9c:	08001e53 	.word	0x08001e53
 8001ca0:	08001e53 	.word	0x08001e53
 8001ca4:	08001e53 	.word	0x08001e53
 8001ca8:	08001e53 	.word	0x08001e53
 8001cac:	08001e53 	.word	0x08001e53
 8001cb0:	08001e53 	.word	0x08001e53
 8001cb4:	08001e53 	.word	0x08001e53
 8001cb8:	08001e53 	.word	0x08001e53
 8001cbc:	08001e53 	.word	0x08001e53
 8001cc0:	08001e53 	.word	0x08001e53
 8001cc4:	08001e53 	.word	0x08001e53
 8001cc8:	08001e53 	.word	0x08001e53
 8001ccc:	08001e53 	.word	0x08001e53
 8001cd0:	08001e53 	.word	0x08001e53
 8001cd4:	08001e53 	.word	0x08001e53
 8001cd8:	08001e53 	.word	0x08001e53
 8001cdc:	08001e53 	.word	0x08001e53
 8001ce0:	08001e53 	.word	0x08001e53
 8001ce4:	08001e53 	.word	0x08001e53
 8001ce8:	08001e53 	.word	0x08001e53
 8001cec:	08001e53 	.word	0x08001e53
 8001cf0:	08001e53 	.word	0x08001e53
 8001cf4:	08001dff 	.word	0x08001dff
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	789b      	ldrb	r3, [r3, #2]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2b0d      	cmp	r3, #13
 8001d02:	d101      	bne.n	8001d08 <microrl_insert_char+0x24c>
 8001d04:	230a      	movs	r3, #10
 8001d06:	e000      	b.n	8001d0a <microrl_insert_char+0x24e>
 8001d08:	230d      	movs	r3, #13
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	f000 80c1 	beq.w	8001e92 <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff fe73 	bl	8001a04 <new_line_handler>
				break;
 8001d1e:	e0c3      	b.n	8001ea8 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff fdc1 	bl	80018a8 <microrl_get_complite>
			break;
 8001d26:	e0bf      	b.n	8001ea8 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	705a      	strb	r2, [r3, #1]
			break;
 8001d2e:	e0bb      	b.n	8001ea8 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fd1e 	bl	8001772 <microrl_backspace>
					while (pThis->cursor > 0) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	dcf7      	bgt.n	8001d30 <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d46:	461a      	mov	r2, r3
 8001d48:	2100      	movs	r1, #0
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fb40 	bl	80013d0 <terminal_print_line>
			break;
 8001d50:	e0aa      	b.n	8001ea8 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d58:	4855      	ldr	r0, [pc, #340]	; (8001eb0 <microrl_insert_char+0x3f4>)
 8001d5a:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8001d68:	e09e      	b.n	8001ea8 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff faa0 	bl	80012c0 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001d8c:	e08c      	b.n	8001ea8 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff fae6 	bl	8001360 <terminal_reset_cursor>
				pThis->cursor = 0;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001d9c:	e084      	b.n	8001ea8 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001daa:	429a      	cmp	r2, r3
 8001dac:	da73      	bge.n	8001e96 <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 8001dae:	2101      	movs	r1, #1
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff fa85 	bl	80012c0 <terminal_move_cursor>
				pThis->cursor++;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001dc4:	e067      	b.n	8001e96 <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d064      	beq.n	8001e9a <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff fa73 	bl	80012c0 <terminal_move_cursor>
				pThis->cursor--;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001de0:	1e5a      	subs	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 8001de8:	e057      	b.n	8001e9a <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 8001dea:	2100      	movs	r1, #0
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff fb8f 	bl	8001510 <hist_search>
			break;
 8001df2:	e059      	b.n	8001ea8 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 8001df4:	2101      	movs	r1, #1
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff fb8a 	bl	8001510 <hist_search>
			break;
 8001dfc:	e054      	b.n	8001ea8 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff fcb7 	bl	8001772 <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e10:	461a      	mov	r2, r3
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fadc 	bl	80013d0 <terminal_print_line>
			break;
 8001e18:	e046      	b.n	8001ea8 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff f9f0 	bl	8001200 <terminal_newline>
				print_prompt (pThis);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff f9ce 	bl	80011c2 <print_prompt>
				terminal_reset_cursor (pThis);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fa9a 	bl	8001360 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e32:	461a      	mov	r2, r3
 8001e34:	2100      	movs	r1, #0
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff faca 	bl	80013d0 <terminal_print_line>
			break;
 8001e3c:	e034      	b.n	8001ea8 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d02a      	beq.n	8001e9e <microrl_insert_char+0x3e2>
				pThis->sigint();
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e4e:	4798      	blx	r3
			break;
 8001e50:	e025      	b.n	8001e9e <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d104      	bne.n	8001e62 <microrl_insert_char+0x3a6>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d01f      	beq.n	8001ea2 <microrl_insert_char+0x3e6>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b1f      	cmp	r3, #31
 8001e66:	dd1c      	ble.n	8001ea2 <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff fc0c 	bl	800168c <microrl_insert_text>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d015      	beq.n	8001ea6 <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e80:	1e59      	subs	r1, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e88:	461a      	mov	r2, r3
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff faa0 	bl	80013d0 <terminal_print_line>
			break;
 8001e90:	e009      	b.n	8001ea6 <microrl_insert_char+0x3ea>
					break;
 8001e92:	bf00      	nop
 8001e94:	e008      	b.n	8001ea8 <microrl_insert_char+0x3ec>
			break;
 8001e96:	bf00      	nop
 8001e98:	e006      	b.n	8001ea8 <microrl_insert_char+0x3ec>
			break;
 8001e9a:	bf00      	nop
 8001e9c:	e004      	b.n	8001ea8 <microrl_insert_char+0x3ec>
			break;
 8001e9e:	bf00      	nop
 8001ea0:	e002      	b.n	8001ea8 <microrl_insert_char+0x3ec>
	}
 8001ea2:	bf00      	nop
 8001ea4:	e000      	b.n	8001ea8 <microrl_insert_char+0x3ec>
			break;
 8001ea6:	bf00      	nop
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	0800df8c 	.word	0x0800df8c

08001eb4 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <microrl_print_char+0x20>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	79fa      	ldrb	r2, [r7, #7]
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fdf8 	bl	8001abc <microrl_insert_char>
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000008 	.word	0x20000008

08001ed8 <print>:

void print (const char * str)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <print+0x84>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	f083 0301 	eor.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <print+0x1e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b1b      	cmp	r3, #27
 8001ef4:	d02b      	beq.n	8001f4e <print+0x76>
		return;
	if (!CDC_is_ready)
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <print+0x88>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	f083 0301 	eor.w	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d126      	bne.n	8001f52 <print+0x7a>
		return;
	uint16_t len = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 8001f08:	89fb      	ldrh	r3, [r7, #14]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	81fb      	strh	r3, [r7, #14]
 8001f0e:	89fb      	ldrh	r3, [r7, #14]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f6      	bne.n	8001f08 <print+0x30>
	uint32_t timeout = HAL_GetTick();
 8001f1a:	f000 ff17 	bl	8002d4c <HAL_GetTick>
 8001f1e:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001f20:	e006      	b.n	8001f30 <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 8001f22:	f000 ff13 	bl	8002d4c <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d807      	bhi.n	8001f40 <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <print+0x8c>)
 8001f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001f36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f1      	bne.n	8001f22 <print+0x4a>
 8001f3e:	e000      	b.n	8001f42 <print+0x6a>
			break;
 8001f40:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 8001f42:	89fb      	ldrh	r3, [r7, #14]
 8001f44:	4619      	mov	r1, r3
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f00b fb6c 	bl	800d624 <CDC_Transmit_FS>
 8001f4c:	e002      	b.n	8001f54 <print+0x7c>
		return;
 8001f4e:	bf00      	nop
 8001f50:	e000      	b.n	8001f54 <print+0x7c>
		return;
 8001f52:	bf00      	nop
}
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2000000c 	.word	0x2000000c
 8001f60:	200001b1 	.word	0x200001b1
 8001f64:	200026a0 	.word	0x200026a0

08001f68 <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	e010      	b.n	8001f9a <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 8001f78:	490c      	ldr	r1, [pc, #48]	; (8001fac <find_color_by_name+0x44>)
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	440b      	add	r3, r1
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	79fa      	ldrb	r2, [r7, #7]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d101      	bne.n	8001f94 <find_color_by_name+0x2c>
		{
			return i;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	e006      	b.n	8001fa2 <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3301      	adds	r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b10      	cmp	r3, #16
 8001f9e:	d9eb      	bls.n	8001f78 <find_color_by_name+0x10>
		}
	}
	return 0;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	0800e5dc 	.word	0x0800e5dc

08001fb0 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ffd2 	bl	8001f68 <find_color_by_name>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a08      	ldr	r2, [pc, #32]	; (8001ff4 <print_color+0x44>)
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff7e 	bl	8001ed8 <print>
	print(str);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff7b 	bl	8001ed8 <print>
	print(COLOR_NC);
 8001fe2:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <print_color+0x48>)
 8001fe4:	f7ff ff78 	bl	8001ed8 <print>
	return 0;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	0800e5dc 	.word	0x0800e5dc
 8001ff8:	0800dfb0 	.word	0x0800dfb0

08001ffc <str_length>:

int str_length(const char * str)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8002008:	e002      	b.n	8002010 <str_length+0x14>
		i++;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3301      	adds	r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f6      	bne.n	800200a <str_length+0xe>
	return i;
 800201c:	68fb      	ldr	r3, [r7, #12]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <print_help>:


int print_help(int argc, const char * const * argv)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
	print(_VER);
 8002032:	4858      	ldr	r0, [pc, #352]	; (8002194 <print_help+0x16c>)
 8002034:	f7ff ff50 	bl	8001ed8 <print>
	print(ENDL);
 8002038:	4857      	ldr	r0, [pc, #348]	; (8002198 <print_help+0x170>)
 800203a:	f7ff ff4d 	bl	8001ed8 <print>
	print ("Use ");
 800203e:	4857      	ldr	r0, [pc, #348]	; (800219c <print_help+0x174>)
 8002040:	f7ff ff4a 	bl	8001ed8 <print>
	print_color("TAB", C_GREEN);
 8002044:	2105      	movs	r1, #5
 8002046:	4856      	ldr	r0, [pc, #344]	; (80021a0 <print_help+0x178>)
 8002048:	f7ff ffb2 	bl	8001fb0 <print_color>
	print(" key for completion");
 800204c:	4855      	ldr	r0, [pc, #340]	; (80021a4 <print_help+0x17c>)
 800204e:	f7ff ff43 	bl	8001ed8 <print>
	print (ENDL);
 8002052:	4851      	ldr	r0, [pc, #324]	; (8002198 <print_help+0x170>)
 8002054:	f7ff ff40 	bl	8001ed8 <print>
	print ("Available commands:");
 8002058:	4853      	ldr	r0, [pc, #332]	; (80021a8 <print_help+0x180>)
 800205a:	f7ff ff3d 	bl	8001ed8 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	e08a      	b.n	800217a <print_help+0x152>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8002064:	4a51      	ldr	r2, [pc, #324]	; (80021ac <print_help+0x184>)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	019b      	lsls	r3, r3, #6
 800206a:	4413      	add	r3, r2
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002072:	d11b      	bne.n	80020ac <print_help+0x84>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	3b01      	subs	r3, #1
 8002078:	4a4c      	ldr	r2, [pc, #304]	; (80021ac <print_help+0x184>)
 800207a:	019b      	lsls	r3, r3, #6
 800207c:	4413      	add	r3, r2
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002084:	d004      	beq.n	8002090 <print_help+0x68>
				print_color(" aka ", C_L_PURPLE);
 8002086:	210c      	movs	r1, #12
 8002088:	4849      	ldr	r0, [pc, #292]	; (80021b0 <print_help+0x188>)
 800208a:	f7ff ff91 	bl	8001fb0 <print_color>
 800208e:	e003      	b.n	8002098 <print_help+0x70>
			else
				print_color("/", C_L_PURPLE);
 8002090:	210c      	movs	r1, #12
 8002092:	4848      	ldr	r0, [pc, #288]	; (80021b4 <print_help+0x18c>)
 8002094:	f7ff ff8c 	bl	8001fb0 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	019b      	lsls	r3, r3, #6
 800209c:	4a43      	ldr	r2, [pc, #268]	; (80021ac <print_help+0x184>)
 800209e:	4413      	add	r3, r2
 80020a0:	3304      	adds	r3, #4
 80020a2:	210b      	movs	r1, #11
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff83 	bl	8001fb0 <print_color>
 80020aa:	e063      	b.n	8002174 <print_help+0x14c>
		}
		else
		{
			print(ENDL);
 80020ac:	483a      	ldr	r0, [pc, #232]	; (8002198 <print_help+0x170>)
 80020ae:	f7ff ff13 	bl	8001ed8 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80020b2:	f06f 0303 	mvn.w	r3, #3
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	e005      	b.n	80020c6 <print_help+0x9e>
				print(" ");
 80020ba:	483f      	ldr	r0, [pc, #252]	; (80021b8 <print_help+0x190>)
 80020bc:	f7ff ff0c 	bl	8001ed8 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	3301      	adds	r3, #1
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	4a39      	ldr	r2, [pc, #228]	; (80021ac <print_help+0x184>)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	019b      	lsls	r3, r3, #6
 80020cc:	4413      	add	r3, r2
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	dbf1      	blt.n	80020ba <print_help+0x92>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	019b      	lsls	r3, r3, #6
 80020da:	4a34      	ldr	r2, [pc, #208]	; (80021ac <print_help+0x184>)
 80020dc:	4413      	add	r3, r2
 80020de:	1d1a      	adds	r2, r3, #4
 80020e0:	4932      	ldr	r1, [pc, #200]	; (80021ac <print_help+0x184>)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	019b      	lsls	r3, r3, #6
 80020e6:	440b      	add	r3, r1
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4934      	ldr	r1, [pc, #208]	; (80021bc <print_help+0x194>)
 80020ec:	5ccb      	ldrb	r3, [r1, r3]
 80020ee:	4619      	mov	r1, r3
 80020f0:	4610      	mov	r0, r2
 80020f2:	f7ff ff5d 	bl	8001fb0 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	e005      	b.n	8002108 <print_help+0xe0>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 80020fc:	482e      	ldr	r0, [pc, #184]	; (80021b8 <print_help+0x190>)
 80020fe:	f7ff feeb 	bl	8001ed8 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	3301      	adds	r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	4a28      	ldr	r2, [pc, #160]	; (80021ac <print_help+0x184>)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	019b      	lsls	r3, r3, #6
 800210e:	4413      	add	r3, r2
 8002110:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8002112:	f1c3 040c 	rsb	r4, r3, #12
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	019b      	lsls	r3, r3, #6
 800211a:	4a24      	ldr	r2, [pc, #144]	; (80021ac <print_help+0x184>)
 800211c:	4413      	add	r3, r2
 800211e:	3304      	adds	r3, #4
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff6b 	bl	8001ffc <str_length>
 8002126:	4603      	mov	r3, r0
 8002128:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	429a      	cmp	r2, r3
 800212e:	dbe5      	blt.n	80020fc <print_help+0xd4>
			switch (microrl_actions[i].level){
 8002130:	4a1e      	ldr	r2, [pc, #120]	; (80021ac <print_help+0x184>)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	019b      	lsls	r3, r3, #6
 8002136:	4413      	add	r3, r2
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <print_help+0x11c>
 800213e:	2b01      	cmp	r3, #1
 8002140:	d004      	beq.n	800214c <print_help+0x124>
 8002142:	e007      	b.n	8002154 <print_help+0x12c>
			case 0:
				print ("-");
 8002144:	481e      	ldr	r0, [pc, #120]	; (80021c0 <print_help+0x198>)
 8002146:	f7ff fec7 	bl	8001ed8 <print>
				break;
 800214a:	e007      	b.n	800215c <print_help+0x134>
			case 1:
				print ("^");
 800214c:	481d      	ldr	r0, [pc, #116]	; (80021c4 <print_help+0x19c>)
 800214e:	f7ff fec3 	bl	8001ed8 <print>
				break;
 8002152:	e003      	b.n	800215c <print_help+0x134>
			default:
				print ("#");
 8002154:	481c      	ldr	r0, [pc, #112]	; (80021c8 <print_help+0x1a0>)
 8002156:	f7ff febf 	bl	8001ed8 <print>
				break;
 800215a:	bf00      	nop
			}
			print (" ");
 800215c:	4816      	ldr	r0, [pc, #88]	; (80021b8 <print_help+0x190>)
 800215e:	f7ff febb 	bl	8001ed8 <print>
			print (microrl_actions[i].help_msg);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	019b      	lsls	r3, r3, #6
 8002166:	3308      	adds	r3, #8
 8002168:	4a10      	ldr	r2, [pc, #64]	; (80021ac <print_help+0x184>)
 800216a:	4413      	add	r3, r2
 800216c:	3306      	adds	r3, #6
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff feb2 	bl	8001ed8 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3301      	adds	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2b0e      	cmp	r3, #14
 800217e:	f67f af71 	bls.w	8002064 <print_help+0x3c>
		}
	}
	print(ENDL);
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <print_help+0x170>)
 8002184:	f7ff fea8 	bl	8001ed8 <print>
	return 0;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	bd90      	pop	{r4, r7, pc}
 8002192:	bf00      	nop
 8002194:	0800dfb8 	.word	0x0800dfb8
 8002198:	0800dfc8 	.word	0x0800dfc8
 800219c:	0800dfcc 	.word	0x0800dfcc
 80021a0:	0800dfd4 	.word	0x0800dfd4
 80021a4:	0800dfd8 	.word	0x0800dfd8
 80021a8:	0800dfec 	.word	0x0800dfec
 80021ac:	0800e21c 	.word	0x0800e21c
 80021b0:	0800e000 	.word	0x0800e000
 80021b4:	0800e008 	.word	0x0800e008
 80021b8:	0800e00c 	.word	0x0800e00c
 80021bc:	0800e698 	.word	0x0800e698
 80021c0:	0800e010 	.word	0x0800e010
 80021c4:	0800e014 	.word	0x0800e014
 80021c8:	0800e018 	.word	0x0800e018

080021cc <execute>:



int execute (int argc, const char * const * argv)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 80021e2:	2300      	movs	r3, #0
 80021e4:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	e050      	b.n	800228e <execute+0xc2>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	e03f      	b.n	8002272 <execute+0xa6>
		{
			tokens_found = false;
 80021f2:	2300      	movs	r3, #0
 80021f4:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 80021f6:	4a52      	ldr	r2, [pc, #328]	; (8002340 <execute+0x174>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	019b      	lsls	r3, r3, #6
 80021fc:	4413      	add	r3, r2
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d001      	beq.n	800220e <execute+0x42>
				synonym_level = current_level; // save the synonym level
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d003      	beq.n	800221e <execute+0x52>
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	429a      	cmp	r2, r3
 800221c:	db2d      	blt.n	800227a <execute+0xae>
				break;
			if (current_level == i)
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	429a      	cmp	r2, r3
 8002224:	d101      	bne.n	800222a <execute+0x5e>
				last_main_synonym = n;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	4413      	add	r3, r2
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	019b      	lsls	r3, r3, #6
 8002238:	4941      	ldr	r1, [pc, #260]	; (8002340 <execute+0x174>)
 800223a:	440b      	add	r3, r1
 800223c:	3304      	adds	r3, #4
 800223e:	4619      	mov	r1, r3
 8002240:	4610      	mov	r0, r2
 8002242:	f7fd ff85 	bl	8000150 <strcmp>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10f      	bne.n	800226c <execute+0xa0>
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	429a      	cmp	r2, r3
 8002252:	d10b      	bne.n	800226c <execute+0xa0>
					(i == synonym_level))
			{
				tokens_found = true;
 8002254:	2301      	movs	r3, #1
 8002256:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	623a      	str	r2, [r7, #32]
 800225e:	4a38      	ldr	r2, [pc, #224]	; (8002340 <execute+0x174>)
 8002260:	019b      	lsls	r3, r3, #6
 8002262:	4413      	add	r3, r2
 8002264:	333c      	adds	r3, #60	; 0x3c
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800226a:	e007      	b.n	800227c <execute+0xb0>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	3301      	adds	r3, #1
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b0e      	cmp	r3, #14
 8002276:	d9bc      	bls.n	80021f2 <execute+0x26>
 8002278:	e000      	b.n	800227c <execute+0xb0>
				break;
 800227a:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 800227c:	7efb      	ldrb	r3, [r7, #27]
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d107      	bne.n	8002298 <execute+0xcc>
	for (int i = 0; i < argc; i++)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	429a      	cmp	r2, r3
 8002294:	dbaa      	blt.n	80021ec <execute+0x20>
 8002296:	e000      	b.n	800229a <execute+0xce>
			break;
 8002298:	bf00      	nop
	}

	if (func != NULL)
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <execute+0xe0>
	{
		return func(argc, argv); // function found
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	6839      	ldr	r1, [r7, #0]
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4798      	blx	r3
 80022a8:	4603      	mov	r3, r0
 80022aa:	e045      	b.n	8002338 <execute+0x16c>
	} else if (tokens_found)
 80022ac:	7efb      	ldrb	r3, [r7, #27]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d021      	beq.n	80022f6 <execute+0x12a>
	{
		print_color ("command: '", C_L_RED);
 80022b2:	210a      	movs	r1, #10
 80022b4:	4823      	ldr	r0, [pc, #140]	; (8002344 <execute+0x178>)
 80022b6:	f7ff fe7b 	bl	8001fb0 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	210a      	movs	r1, #10
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fe75 	bl	8001fb0 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 80022c6:	210a      	movs	r1, #10
 80022c8:	481f      	ldr	r0, [pc, #124]	; (8002348 <execute+0x17c>)
 80022ca:	f7ff fe71 	bl	8001fb0 <print_color>
		print(ENDL);
 80022ce:	481f      	ldr	r0, [pc, #124]	; (800234c <execute+0x180>)
 80022d0:	f7ff fe02 	bl	8001ed8 <print>
		print_color ("use '", C_NC);
 80022d4:	2100      	movs	r1, #0
 80022d6:	481e      	ldr	r0, [pc, #120]	; (8002350 <execute+0x184>)
 80022d8:	f7ff fe6a 	bl	8001fb0 <print_color>
		print_color ("?", C_GREEN);
 80022dc:	2105      	movs	r1, #5
 80022de:	481d      	ldr	r0, [pc, #116]	; (8002354 <execute+0x188>)
 80022e0:	f7ff fe66 	bl	8001fb0 <print_color>
		print_color ("' for help", C_NC);
 80022e4:	2100      	movs	r1, #0
 80022e6:	481c      	ldr	r0, [pc, #112]	; (8002358 <execute+0x18c>)
 80022e8:	f7ff fe62 	bl	8001fb0 <print_color>
		print (ENDL);
 80022ec:	4817      	ldr	r0, [pc, #92]	; (800234c <execute+0x180>)
 80022ee:	f7ff fdf3 	bl	8001ed8 <print>
		return 1;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e020      	b.n	8002338 <execute+0x16c>
	}
	else
	{
		print_color ("command: '", C_RED);
 80022f6:	2109      	movs	r1, #9
 80022f8:	4812      	ldr	r0, [pc, #72]	; (8002344 <execute+0x178>)
 80022fa:	f7ff fe59 	bl	8001fb0 <print_color>
		print_color ((char*)argv[0], C_RED);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2109      	movs	r1, #9
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fe53 	bl	8001fb0 <print_color>
		print_color ("' not found", C_RED);
 800230a:	2109      	movs	r1, #9
 800230c:	4813      	ldr	r0, [pc, #76]	; (800235c <execute+0x190>)
 800230e:	f7ff fe4f 	bl	8001fb0 <print_color>
		print(ENDL);
 8002312:	480e      	ldr	r0, [pc, #56]	; (800234c <execute+0x180>)
 8002314:	f7ff fde0 	bl	8001ed8 <print>
		print_color ("use '", C_NC);
 8002318:	2100      	movs	r1, #0
 800231a:	480d      	ldr	r0, [pc, #52]	; (8002350 <execute+0x184>)
 800231c:	f7ff fe48 	bl	8001fb0 <print_color>
		print_color ("?", C_GREEN);
 8002320:	2105      	movs	r1, #5
 8002322:	480c      	ldr	r0, [pc, #48]	; (8002354 <execute+0x188>)
 8002324:	f7ff fe44 	bl	8001fb0 <print_color>
		print_color ("' for help", C_NC);
 8002328:	2100      	movs	r1, #0
 800232a:	480b      	ldr	r0, [pc, #44]	; (8002358 <execute+0x18c>)
 800232c:	f7ff fe40 	bl	8001fb0 <print_color>
		print (ENDL);
 8002330:	4806      	ldr	r0, [pc, #24]	; (800234c <execute+0x180>)
 8002332:	f7ff fdd1 	bl	8001ed8 <print>
		return 1;
 8002336:	2301      	movs	r3, #1

	}
}
 8002338:	4618      	mov	r0, r3
 800233a:	3728      	adds	r7, #40	; 0x28
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	0800e21c 	.word	0x0800e21c
 8002344:	0800e01c 	.word	0x0800e01c
 8002348:	0800e028 	.word	0x0800e028
 800234c:	0800dfc8 	.word	0x0800dfc8
 8002350:	0800e048 	.word	0x0800e048
 8002354:	0800e050 	.word	0x0800e050
 8002358:	0800e054 	.word	0x0800e054
 800235c:	0800e060 	.word	0x0800e060

08002360 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08c      	sub	sp, #48	; 0x30
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
	int j = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 800236e:	4b5b      	ldr	r3, [pc, #364]	; (80024dc <complet+0x17c>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d11b      	bne.n	80023b2 <complet+0x52>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 800237a:	2300      	movs	r3, #0
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
 800237e:	e014      	b.n	80023aa <complet+0x4a>
			if (microrl_actions[i].level == 0)
 8002380:	4a57      	ldr	r2, [pc, #348]	; (80024e0 <complet+0x180>)
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	019b      	lsls	r3, r3, #6
 8002386:	4413      	add	r3, r2
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10a      	bne.n	80023a4 <complet+0x44>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 800238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002396:	0192      	lsls	r2, r2, #6
 8002398:	4951      	ldr	r1, [pc, #324]	; (80024e0 <complet+0x180>)
 800239a:	440a      	add	r2, r1
 800239c:	3204      	adds	r2, #4
 800239e:	494f      	ldr	r1, [pc, #316]	; (80024dc <complet+0x17c>)
 80023a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 80023a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a6:	3301      	adds	r3, #1
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ac:	2b0e      	cmp	r3, #14
 80023ae:	d9e7      	bls.n	8002380 <complet+0x20>
 80023b0:	e08a      	b.n	80024c8 <complet+0x168>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023b8:	3b01      	subs	r3, #1
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 80023cc:	2300      	movs	r3, #0
 80023ce:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	e072      	b.n	80024bc <complet+0x15c>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	e061      	b.n	80024a0 <complet+0x140>
			{
				tokens_found = false;
 80023dc:	2300      	movs	r3, #0
 80023de:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 80023e0:	4a3f      	ldr	r2, [pc, #252]	; (80024e0 <complet+0x180>)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	019b      	lsls	r3, r3, #6
 80023e6:	4413      	add	r3, r2
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f2:	d001      	beq.n	80023f8 <complet+0x98>
					synonym_level = current_level; // save the synonym level
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fe:	d003      	beq.n	8002408 <complet+0xa8>
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	429a      	cmp	r2, r3
 8002406:	db4f      	blt.n	80024a8 <complet+0x148>
					break;
				if (current_level == i)
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	429a      	cmp	r2, r3
 800240e:	d101      	bne.n	8002414 <complet+0xb4>
					last_main_synonym = n;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	429a      	cmp	r2, r3
 800241c:	d122      	bne.n	8002464 <complet+0x104>
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	019b      	lsls	r3, r3, #6
 8002422:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <complet+0x180>)
 8002424:	4413      	add	r3, r2
 8002426:	3304      	adds	r3, #4
 8002428:	6939      	ldr	r1, [r7, #16]
 800242a:	4618      	mov	r0, r3
 800242c:	f00b fd2c 	bl	800de88 <strstr>
 8002430:	4602      	mov	r2, r0
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	019b      	lsls	r3, r3, #6
 8002436:	492a      	ldr	r1, [pc, #168]	; (80024e0 <complet+0x180>)
 8002438:	440b      	add	r3, r1
 800243a:	3304      	adds	r3, #4
 800243c:	429a      	cmp	r2, r3
 800243e:	d111      	bne.n	8002464 <complet+0x104>
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	429a      	cmp	r2, r3
 8002446:	d10d      	bne.n	8002464 <complet+0x104>
										(i == synonym_level))
				{
					tokens_found = true;
 8002448:	2301      	movs	r3, #1
 800244a:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 800244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	0192      	lsls	r2, r2, #6
 8002456:	4922      	ldr	r1, [pc, #136]	; (80024e0 <complet+0x180>)
 8002458:	440a      	add	r2, r1
 800245a:	3204      	adds	r2, #4
 800245c:	491f      	ldr	r1, [pc, #124]	; (80024dc <complet+0x17c>)
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002462:	e01a      	b.n	800249a <complet+0x13a>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	4413      	add	r3, r2
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	019b      	lsls	r3, r3, #6
 8002472:	491b      	ldr	r1, [pc, #108]	; (80024e0 <complet+0x180>)
 8002474:	440b      	add	r3, r1
 8002476:	3304      	adds	r3, #4
 8002478:	4619      	mov	r1, r3
 800247a:	4610      	mov	r0, r2
 800247c:	f7fd fe68 	bl	8000150 <strcmp>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <complet+0x13a>
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	429a      	cmp	r2, r3
 800248c:	d105      	bne.n	800249a <complet+0x13a>
				{
					last_main_synonym++;
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	3301      	adds	r3, #1
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 8002494:	2301      	movs	r3, #1
 8002496:	77fb      	strb	r3, [r7, #31]
					break;
 8002498:	e007      	b.n	80024aa <complet+0x14a>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	3301      	adds	r3, #1
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b0e      	cmp	r3, #14
 80024a4:	d99a      	bls.n	80023dc <complet+0x7c>
 80024a6:	e000      	b.n	80024aa <complet+0x14a>
					break;
 80024a8:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 80024aa:	7ffb      	ldrb	r3, [r7, #31]
 80024ac:	f083 0301 	eor.w	r3, r3, #1
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d107      	bne.n	80024c6 <complet+0x166>
		for (int i = 0; i < argc; i++)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	3301      	adds	r3, #1
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	db88      	blt.n	80023d6 <complet+0x76>
 80024c4:	e000      	b.n	80024c8 <complet+0x168>
				break;
 80024c6:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <complet+0x17c>)
 80024ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024cc:	2100      	movs	r1, #0
 80024ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 80024d2:	4b02      	ldr	r3, [pc, #8]	; (80024dc <complet+0x17c>)
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3730      	adds	r7, #48	; 0x30
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20002498 	.word	0x20002498
 80024e0:	0800e21c 	.word	0x0800e21c

080024e4 <sigint>:
#endif


void sigint (void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <sigint+0x48>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]


	print (ENDL);
 80024f0:	480f      	ldr	r0, [pc, #60]	; (8002530 <sigint+0x4c>)
 80024f2:	f7ff fcf1 	bl	8001ed8 <print>
	print ("^C catched!");
 80024f6:	480f      	ldr	r0, [pc, #60]	; (8002534 <sigint+0x50>)
 80024f8:	f7ff fcee 	bl	8001ed8 <print>
	int i = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 8002500:	e009      	b.n	8002516 <sigint+0x32>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <sigint+0x54>)
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	4a08      	ldr	r2, [pc, #32]	; (8002530 <sigint+0x4c>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	4619      	mov	r1, r3
 8002512:	f7ff fad3 	bl	8001abc <microrl_insert_char>
	while (ENTER[i])
 8002516:	4a06      	ldr	r2, [pc, #24]	; (8002530 <sigint+0x4c>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1ef      	bne.n	8002502 <sigint+0x1e>
}
 8002522:	bf00      	nop
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200001b2 	.word	0x200001b2
 8002530:	0800dfc8 	.word	0x0800dfc8
 8002534:	0800e06c 	.word	0x0800e06c
 8002538:	20000008 	.word	0x20000008

0800253c <init_microrl>:

void init_microrl(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <init_microrl+0x38>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	490c      	ldr	r1, [pc, #48]	; (8002578 <init_microrl+0x3c>)
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe ff7a 	bl	8001440 <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <init_microrl+0x38>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	490a      	ldr	r1, [pc, #40]	; (800257c <init_microrl+0x40>)
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe ffc0 	bl	80014d8 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <init_microrl+0x38>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4908      	ldr	r1, [pc, #32]	; (8002580 <init_microrl+0x44>)
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe ffac 	bl	80014bc <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <init_microrl+0x38>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4906      	ldr	r1, [pc, #24]	; (8002584 <init_microrl+0x48>)
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe ffc2 	bl	80014f4 <microrl_set_sigint_callback>
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000008 	.word	0x20000008
 8002578:	08001ed9 	.word	0x08001ed9
 800257c:	080021cd 	.word	0x080021cd
 8002580:	08002361 	.word	0x08002361
 8002584:	080024e5 	.word	0x080024e5

08002588 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <clear_screen+0x20>)
 8002594:	f7ff fca0 	bl	8001ed8 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 8002598:	4804      	ldr	r0, [pc, #16]	; (80025ac <clear_screen+0x24>)
 800259a:	f7ff fc9d 	bl	8001ed8 <print>
	return 0;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	0800e078 	.word	0x0800e078
 80025ac:	0800e080 	.word	0x0800e080

080025b0 <set_CDC_ready>:


void set_CDC_ready(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <set_CDC_ready+0x14>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	200001b1 	.word	0x200001b1

080025c8 <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <color_toggle+0x30>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <color_toggle+0x30>)
 80025e8:	701a      	strb	r2, [r3, #0]
	return 0;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2000000c 	.word	0x2000000c

080025fc <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
	color_out = 1;
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <color_on+0x28>)
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 800260c:	2105      	movs	r1, #5
 800260e:	4806      	ldr	r0, [pc, #24]	; (8002628 <color_on+0x2c>)
 8002610:	f7ff fcce 	bl	8001fb0 <print_color>
	print(ENDL);
 8002614:	4805      	ldr	r0, [pc, #20]	; (800262c <color_on+0x30>)
 8002616:	f7ff fc5f 	bl	8001ed8 <print>
	return 0;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	2000000c 	.word	0x2000000c
 8002628:	0800e084 	.word	0x0800e084
 800262c:	0800dfc8 	.word	0x0800dfc8

08002630 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
	color_out = 0;
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <color_off+0x28>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8002640:	4806      	ldr	r0, [pc, #24]	; (800265c <color_off+0x2c>)
 8002642:	f7ff fc49 	bl	8001ed8 <print>
	print(ENDL);
 8002646:	4806      	ldr	r0, [pc, #24]	; (8002660 <color_off+0x30>)
 8002648:	f7ff fc46 	bl	8001ed8 <print>
	return 0;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000000c 	.word	0x2000000c
 800265c:	0800e098 	.word	0x0800e098
 8002660:	0800dfc8 	.word	0x0800dfc8

08002664 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
	if (color_out)
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <color_show+0x34>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d004      	beq.n	8002680 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8002676:	2105      	movs	r1, #5
 8002678:	4808      	ldr	r0, [pc, #32]	; (800269c <color_show+0x38>)
 800267a:	f7ff fc99 	bl	8001fb0 <print_color>
 800267e:	e002      	b.n	8002686 <color_show+0x22>
	else
		print ("Color output is OFF");
 8002680:	4807      	ldr	r0, [pc, #28]	; (80026a0 <color_show+0x3c>)
 8002682:	f7ff fc29 	bl	8001ed8 <print>
	print(ENDL);
 8002686:	4807      	ldr	r0, [pc, #28]	; (80026a4 <color_show+0x40>)
 8002688:	f7ff fc26 	bl	8001ed8 <print>
	return 0;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2000000c 	.word	0x2000000c
 800269c:	0800e084 	.word	0x0800e084
 80026a0:	0800e098 	.word	0x0800e098
 80026a4:	0800dfc8 	.word	0x0800dfc8

080026a8 <nema_toggle>:


int nema_toggle 	(int argc, const char * const * argv)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
	nema_out ^= 1;
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <nema_toggle+0x30>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	f083 0301 	eor.w	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf14      	ite	ne
 80026c0:	2301      	movne	r3, #1
 80026c2:	2300      	moveq	r3, #0
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <nema_toggle+0x30>)
 80026c8:	701a      	strb	r2, [r3, #0]
	return 0;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	200001b2 	.word	0x200001b2

080026dc <nema_on>:

int nema_on 		(int argc, const char * const * argv)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
	nema_out = 1;
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <nema_on+0x28>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
	print_color ("NEMA output is ON", C_GREEN);
 80026ec:	2105      	movs	r1, #5
 80026ee:	4806      	ldr	r0, [pc, #24]	; (8002708 <nema_on+0x2c>)
 80026f0:	f7ff fc5e 	bl	8001fb0 <print_color>
	print(ENDL);
 80026f4:	4805      	ldr	r0, [pc, #20]	; (800270c <nema_on+0x30>)
 80026f6:	f7ff fbef 	bl	8001ed8 <print>
	return 0;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	200001b2 	.word	0x200001b2
 8002708:	0800e0ac 	.word	0x0800e0ac
 800270c:	0800dfc8 	.word	0x0800dfc8

08002710 <nema_off>:

int nema_off 		(int argc, const char * const * argv)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
	nema_out = 0;
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <nema_off+0x28>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
	print ("NEM output is OFF");
 8002720:	4806      	ldr	r0, [pc, #24]	; (800273c <nema_off+0x2c>)
 8002722:	f7ff fbd9 	bl	8001ed8 <print>
	print(ENDL);
 8002726:	4806      	ldr	r0, [pc, #24]	; (8002740 <nema_off+0x30>)
 8002728:	f7ff fbd6 	bl	8001ed8 <print>
	return 0;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200001b2 	.word	0x200001b2
 800273c:	0800e0c0 	.word	0x0800e0c0
 8002740:	0800dfc8 	.word	0x0800dfc8

08002744 <vfd>:

int vfd (int argc, const char * const * argv)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
	for (int i = 1; i < argc; i++)
 800274e:	2301      	movs	r3, #1
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	e028      	b.n	80027a6 <vfd+0x62>
	{
		uint16_t temp = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	81fb      	strh	r3, [r7, #14]
		char * pchar = (char*)argv[i];
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	4413      	add	r3, r2
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	613b      	str	r3, [r7, #16]
		xQueueSendToBack(qVFDHandle, &temp, 100);
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <vfd+0x74>)
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	f107 010e 	add.w	r1, r7, #14
 800276c:	2300      	movs	r3, #0
 800276e:	2264      	movs	r2, #100	; 0x64
 8002770:	f008 fb2a 	bl	800adc8 <xQueueGenericSend>
		while (*pchar)
 8002774:	e010      	b.n	8002798 <vfd+0x54>
		{
			temp = get_char(*(pchar++));
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	613a      	str	r2, [r7, #16]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fa32 	bl	8002be8 <get_char>
 8002784:	4603      	mov	r3, r0
 8002786:	81fb      	strh	r3, [r7, #14]
			xQueueSendToBack(qVFDHandle, &temp, 100);
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <vfd+0x74>)
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	f107 010e 	add.w	r1, r7, #14
 8002790:	2300      	movs	r3, #0
 8002792:	2264      	movs	r2, #100	; 0x64
 8002794:	f008 fb18 	bl	800adc8 <xQueueGenericSend>
		while (*pchar)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1ea      	bne.n	8002776 <vfd+0x32>
	for (int i = 1; i < argc; i++)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3301      	adds	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	dbd2      	blt.n	8002754 <vfd+0x10>
		}
	}
	return 0;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	2000248c 	.word	0x2000248c

080027bc <show_encoder>:


int show_encoder (int argc, const char * const * argv)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]

	uint32_t buf = encoder_value;
 80027c6:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <show_encoder+0x78>)
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	617b      	str	r3, [r7, #20]
	char str [8];

	for (int i = 0; i < 5; i++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	e01d      	b.n	800280e <show_encoder+0x52>
	{
		str[4 - i] = buf % 10 + '0';
 80027d2:	6979      	ldr	r1, [r7, #20]
 80027d4:	4b18      	ldr	r3, [pc, #96]	; (8002838 <show_encoder+0x7c>)
 80027d6:	fba3 2301 	umull	r2, r3, r3, r1
 80027da:	08da      	lsrs	r2, r3, #3
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	1aca      	subs	r2, r1, r3
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f1c3 0304 	rsb	r3, r3, #4
 80027ee:	3230      	adds	r2, #48	; 0x30
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	f107 0118 	add.w	r1, r7, #24
 80027f6:	440b      	add	r3, r1
 80027f8:	f803 2c10 	strb.w	r2, [r3, #-16]
		buf /= 10;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <show_encoder+0x7c>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	08db      	lsrs	r3, r3, #3
 8002806:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 5; i++)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	3301      	adds	r3, #1
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	2b04      	cmp	r3, #4
 8002812:	ddde      	ble.n	80027d2 <show_encoder+0x16>
	}
	str[5] = '\r';
 8002814:	230d      	movs	r3, #13
 8002816:	737b      	strb	r3, [r7, #13]
	str[6] = '\n';
 8002818:	230a      	movs	r3, #10
 800281a:	73bb      	strb	r3, [r7, #14]
	str[7] = '\0';
 800281c:	2300      	movs	r3, #0
 800281e:	73fb      	strb	r3, [r7, #15]
	print(str);
 8002820:	f107 0308 	add.w	r3, r7, #8
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fb57 	bl	8001ed8 <print>
	return 0;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	200001ac 	.word	0x200001ac
 8002838:	cccccccd 	.word	0xcccccccd

0800283c <get_nema>:


bool get_nema(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
	return nema_out;
 8002840:	4b02      	ldr	r3, [pc, #8]	; (800284c <get_nema+0x10>)
 8002842:	781b      	ldrb	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	200001b2 	.word	0x200001b2

08002850 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002854:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <MX_SPI2_Init+0x64>)
 8002856:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <MX_SPI2_Init+0x68>)
 8002858:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800285a:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <MX_SPI2_Init+0x64>)
 800285c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002860:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002862:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <MX_SPI2_Init+0x64>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002868:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <MX_SPI2_Init+0x64>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <MX_SPI2_Init+0x64>)
 8002870:	2202      	movs	r2, #2
 8002872:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002874:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <MX_SPI2_Init+0x64>)
 8002876:	2201      	movs	r2, #1
 8002878:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <MX_SPI2_Init+0x64>)
 800287c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002880:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <MX_SPI2_Init+0x64>)
 8002884:	2218      	movs	r2, #24
 8002886:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <MX_SPI2_Init+0x64>)
 800288a:	2280      	movs	r2, #128	; 0x80
 800288c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <MX_SPI2_Init+0x64>)
 8002890:	2200      	movs	r2, #0
 8002892:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <MX_SPI2_Init+0x64>)
 8002896:	2200      	movs	r2, #0
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <MX_SPI2_Init+0x64>)
 800289c:	220a      	movs	r2, #10
 800289e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028a0:	4804      	ldr	r0, [pc, #16]	; (80028b4 <MX_SPI2_Init+0x64>)
 80028a2:	f002 ffa3 	bl	80057ec <HAL_SPI_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80028ac:	f7fe fa78 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20002578 	.word	0x20002578
 80028b8:	40003800 	.word	0x40003800

080028bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 0310 	add.w	r3, r7, #16
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1c      	ldr	r2, [pc, #112]	; (8002948 <HAL_SPI_MspInit+0x8c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d131      	bne.n	8002940 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_SPI_MspInit+0x90>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	4a1a      	ldr	r2, [pc, #104]	; (800294c <HAL_SPI_MspInit+0x90>)
 80028e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e6:	61d3      	str	r3, [r2, #28]
 80028e8:	4b18      	ldr	r3, [pc, #96]	; (800294c <HAL_SPI_MspInit+0x90>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_SPI_MspInit+0x90>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <HAL_SPI_MspInit+0x90>)
 80028fa:	f043 0308 	orr.w	r3, r3, #8
 80028fe:	6193      	str	r3, [r2, #24]
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_SPI_MspInit+0x90>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800290c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002910:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002916:	2303      	movs	r3, #3
 8002918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291a:	f107 0310 	add.w	r3, r7, #16
 800291e:	4619      	mov	r1, r3
 8002920:	480b      	ldr	r0, [pc, #44]	; (8002950 <HAL_SPI_MspInit+0x94>)
 8002922:	f000 fbad 	bl	8003080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002926:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800292a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	4619      	mov	r1, r3
 800293a:	4805      	ldr	r0, [pc, #20]	; (8002950 <HAL_SPI_MspInit+0x94>)
 800293c:	f000 fba0 	bl	8003080 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002940:	bf00      	nop
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40003800 	.word	0x40003800
 800294c:	40021000 	.word	0x40021000
 8002950:	40010c00 	.word	0x40010c00

08002954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800295a:	4b18      	ldr	r3, [pc, #96]	; (80029bc <HAL_MspInit+0x68>)
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	4a17      	ldr	r2, [pc, #92]	; (80029bc <HAL_MspInit+0x68>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6193      	str	r3, [r2, #24]
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_MspInit+0x68>)
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_MspInit+0x68>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	4a11      	ldr	r2, [pc, #68]	; (80029bc <HAL_MspInit+0x68>)
 8002978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297c:	61d3      	str	r3, [r2, #28]
 800297e:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <HAL_MspInit+0x68>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	607b      	str	r3, [r7, #4]
 8002988:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	210f      	movs	r1, #15
 800298e:	f06f 0001 	mvn.w	r0, #1
 8002992:	f000 fa9a 	bl	8002eca <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <HAL_MspInit+0x6c>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <HAL_MspInit+0x6c>)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40010000 	.word	0x40010000

080029c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08c      	sub	sp, #48	; 0x30
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80029d4:	2200      	movs	r2, #0
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	2019      	movs	r0, #25
 80029da:	f000 fa76 	bl	8002eca <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80029de:	2019      	movs	r0, #25
 80029e0:	f000 fa8f 	bl	8002f02 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80029e4:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <HAL_InitTick+0x9c>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <HAL_InitTick+0x9c>)
 80029ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029ee:	6193      	str	r3, [r2, #24]
 80029f0:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <HAL_InitTick+0x9c>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029fc:	f107 0210 	add.w	r2, r7, #16
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 fdec 	bl	80055e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002a0c:	f002 fdd6 	bl	80055bc <HAL_RCC_GetPCLK2Freq>
 8002a10:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	4a13      	ldr	r2, [pc, #76]	; (8002a64 <HAL_InitTick+0xa0>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0c9b      	lsrs	r3, r3, #18
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_InitTick+0xa4>)
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <HAL_InitTick+0xa8>)
 8002a24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_InitTick+0xa4>)
 8002a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002a2e:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <HAL_InitTick+0xa4>)
 8002a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_InitTick+0xa4>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_InitTick+0xa4>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002a40:	4809      	ldr	r0, [pc, #36]	; (8002a68 <HAL_InitTick+0xa4>)
 8002a42:	f003 f939 	bl	8005cb8 <HAL_TIM_Base_Init>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002a4c:	4806      	ldr	r0, [pc, #24]	; (8002a68 <HAL_InitTick+0xa4>)
 8002a4e:	f003 f98b 	bl	8005d68 <HAL_TIM_Base_Start_IT>
 8002a52:	4603      	mov	r3, r0
 8002a54:	e000      	b.n	8002a58 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3730      	adds	r7, #48	; 0x30
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	431bde83 	.word	0x431bde83
 8002a68:	200025d0 	.word	0x200025d0
 8002a6c:	40012c00 	.word	0x40012c00

08002a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <NMI_Handler+0x4>

08002a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a7a:	e7fe      	b.n	8002a7a <HardFault_Handler+0x4>

08002a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a80:	e7fe      	b.n	8002a80 <MemManage_Handler+0x4>

08002a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a86:	e7fe      	b.n	8002a86 <BusFault_Handler+0x4>

08002a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a8c:	e7fe      	b.n	8002a8c <UsageFault_Handler+0x4>

08002a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f000 fcba 	bl	8003418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002aac:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002aae:	f000 fe06 	bl	80036be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20003334 	.word	0x20003334

08002abc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ac0:	4802      	ldr	r0, [pc, #8]	; (8002acc <TIM1_UP_IRQHandler+0x10>)
 8002ac2:	f003 f9a3 	bl	8005e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	200025d0 	.word	0x200025d0

08002ad0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ad4:	4802      	ldr	r0, [pc, #8]	; (8002ae0 <USART2_IRQHandler+0x10>)
 8002ad6:	f003 fbb7 	bl	8006248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20002618 	.word	0x20002618

08002ae4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002af6:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <MX_USART2_UART_Init+0x50>)
 8002af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002afc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002b16:	220c      	movs	r2, #12
 8002b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b26:	4805      	ldr	r0, [pc, #20]	; (8002b3c <MX_USART2_UART_Init+0x4c>)
 8002b28:	f003 fb10 	bl	800614c <HAL_UART_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b32:	f7fe f935 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20002618 	.word	0x20002618
 8002b40:	40004400 	.word	0x40004400

08002b44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 0310 	add.w	r3, r7, #16
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1f      	ldr	r2, [pc, #124]	; (8002bdc <HAL_UART_MspInit+0x98>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d137      	bne.n	8002bd4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b64:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <HAL_UART_MspInit+0x9c>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <HAL_UART_MspInit+0x9c>)
 8002b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6e:	61d3      	str	r3, [r2, #28]
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <HAL_UART_MspInit+0x9c>)
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7c:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <HAL_UART_MspInit+0x9c>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	4a17      	ldr	r2, [pc, #92]	; (8002be0 <HAL_UART_MspInit+0x9c>)
 8002b82:	f043 0304 	orr.w	r3, r3, #4
 8002b86:	6193      	str	r3, [r2, #24]
 8002b88:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <HAL_UART_MspInit+0x9c>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b94:	2304      	movs	r3, #4
 8002b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba0:	f107 0310 	add.w	r3, r7, #16
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	480f      	ldr	r0, [pc, #60]	; (8002be4 <HAL_UART_MspInit+0xa0>)
 8002ba8:	f000 fa6a 	bl	8003080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bac:	2308      	movs	r3, #8
 8002bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb8:	f107 0310 	add.w	r3, r7, #16
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4809      	ldr	r0, [pc, #36]	; (8002be4 <HAL_UART_MspInit+0xa0>)
 8002bc0:	f000 fa5e 	bl	8003080 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2105      	movs	r1, #5
 8002bc8:	2026      	movs	r0, #38	; 0x26
 8002bca:	f000 f97e 	bl	8002eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bce:	2026      	movs	r0, #38	; 0x26
 8002bd0:	f000 f997 	bl	8002f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	3720      	adds	r7, #32
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40004400 	.word	0x40004400
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40010800 	.word	0x40010800

08002be8 <get_char>:
const uint8_t ALPHAS = (sizeof(vfd_alpha)/sizeof(vfd_alpha[0]));
const uint8_t ALPHAR = (sizeof(vfd_alpha_ru)/sizeof(vfd_alpha_ru[0]));
const uint8_t SPECIAL = (sizeof(vfd_special)/sizeof(vfd_special[0]));

uint16_t get_char(char input)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
	if ('0' <= input && input <= '9')
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	2b2f      	cmp	r3, #47	; 0x2f
 8002bf6:	d908      	bls.n	8002c0a <get_char+0x22>
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	2b39      	cmp	r3, #57	; 0x39
 8002bfc:	d805      	bhi.n	8002c0a <get_char+0x22>
		return vfd_digits[input - '0'];
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	3b30      	subs	r3, #48	; 0x30
 8002c02:	4a26      	ldr	r2, [pc, #152]	; (8002c9c <get_char+0xb4>)
 8002c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c08:	e042      	b.n	8002c90 <get_char+0xa8>
	if ('a' <= input && input <= 'z')
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	2b60      	cmp	r3, #96	; 0x60
 8002c0e:	d908      	bls.n	8002c22 <get_char+0x3a>
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	2b7a      	cmp	r3, #122	; 0x7a
 8002c14:	d805      	bhi.n	8002c22 <get_char+0x3a>
		return vfd_alpha[input - 'a'];
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	3b61      	subs	r3, #97	; 0x61
 8002c1a:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <get_char+0xb8>)
 8002c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c20:	e036      	b.n	8002c90 <get_char+0xa8>
	if ('A' <= input && input <= 'Z')
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	2b40      	cmp	r3, #64	; 0x40
 8002c26:	d908      	bls.n	8002c3a <get_char+0x52>
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	2b5a      	cmp	r3, #90	; 0x5a
 8002c2c:	d805      	bhi.n	8002c3a <get_char+0x52>
		return vfd_alpha[input - 'A'];
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	3b41      	subs	r3, #65	; 0x41
 8002c32:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <get_char+0xb8>)
 8002c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c38:	e02a      	b.n	8002c90 <get_char+0xa8>
	if (192 <= input && input <= 223)
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	2bbf      	cmp	r3, #191	; 0xbf
 8002c3e:	d908      	bls.n	8002c52 <get_char+0x6a>
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	2bdf      	cmp	r3, #223	; 0xdf
 8002c44:	d805      	bhi.n	8002c52 <get_char+0x6a>
		return vfd_alpha_ru[input - 192];
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	3bc0      	subs	r3, #192	; 0xc0
 8002c4a:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <get_char+0xbc>)
 8002c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c50:	e01e      	b.n	8002c90 <get_char+0xa8>
	if (224 <= input && input <= 255)
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	2bdf      	cmp	r3, #223	; 0xdf
 8002c56:	d905      	bls.n	8002c64 <get_char+0x7c>
		return vfd_alpha_ru[input - 224];
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	3be0      	subs	r3, #224	; 0xe0
 8002c5c:	4a11      	ldr	r2, [pc, #68]	; (8002ca4 <get_char+0xbc>)
 8002c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c62:	e015      	b.n	8002c90 <get_char+0xa8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	e00e      	b.n	8002c88 <get_char+0xa0>
		if (vfd_special_char[i] == input)
 8002c6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <get_char+0xc0>)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4413      	add	r3, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	79fa      	ldrb	r2, [r7, #7]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d104      	bne.n	8002c82 <get_char+0x9a>
			return vfd_special[i];
 8002c78:	4a0c      	ldr	r2, [pc, #48]	; (8002cac <get_char+0xc4>)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c80:	e006      	b.n	8002c90 <get_char+0xa8>
	for (int i = 0; i < sizeof(vfd_special_char)/sizeof(vfd_special_char[0]); i++)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3301      	adds	r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d9ed      	bls.n	8002c6a <get_char+0x82>
	return 0;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	0800e6b4 	.word	0x0800e6b4
 8002ca0:	0800e6c8 	.word	0x0800e6c8
 8002ca4:	0800e6fc 	.word	0x0800e6fc
 8002ca8:	0800e760 	.word	0x0800e760
 8002cac:	0800e73c 	.word	0x0800e73c

08002cb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cb0:	480c      	ldr	r0, [pc, #48]	; (8002ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cb2:	490d      	ldr	r1, [pc, #52]	; (8002ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb8:	e002      	b.n	8002cc0 <LoopCopyDataInit>

08002cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cbe:	3304      	adds	r3, #4

08002cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc4:	d3f9      	bcc.n	8002cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cc8:	4c0a      	ldr	r4, [pc, #40]	; (8002cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ccc:	e001      	b.n	8002cd2 <LoopFillZerobss>

08002cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd0:	3204      	adds	r2, #4

08002cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd4:	d3fb      	bcc.n	8002cce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cd6:	f7ff ff05 	bl	8002ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cda:	f00b f881 	bl	800dde0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cde:	f7fd ffdf 	bl	8000ca0 <main>
  bx lr
 8002ce2:	4770      	bx	lr
  ldr r0, =_sdata
 8002ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce8:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8002cec:	0800e77c 	.word	0x0800e77c
  ldr r2, =_sbss
 8002cf0:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8002cf4:	20003620 	.word	0x20003620

08002cf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cf8:	e7fe      	b.n	8002cf8 <ADC1_2_IRQHandler>
	...

08002cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <HAL_Init+0x28>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a07      	ldr	r2, [pc, #28]	; (8002d24 <HAL_Init+0x28>)
 8002d06:	f043 0310 	orr.w	r3, r3, #16
 8002d0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d0c:	2003      	movs	r0, #3
 8002d0e:	f000 f8d1 	bl	8002eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d12:	2000      	movs	r0, #0
 8002d14:	f7ff fe56 	bl	80029c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d18:	f7ff fe1c 	bl	8002954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40022000 	.word	0x40022000

08002d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_IncTick+0x1c>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_IncTick+0x20>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	4a03      	ldr	r2, [pc, #12]	; (8002d48 <HAL_IncTick+0x20>)
 8002d3a:	6013      	str	r3, [r2, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	20000018 	.word	0x20000018
 8002d48:	2000265c 	.word	0x2000265c

08002d4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d50:	4b02      	ldr	r3, [pc, #8]	; (8002d5c <HAL_GetTick+0x10>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	2000265c 	.word	0x2000265c

08002d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d92:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	60d3      	str	r3, [r2, #12]
}
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	0a1b      	lsrs	r3, r3, #8
 8002db2:	f003 0307 	and.w	r3, r3, #7
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	db0b      	blt.n	8002dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	f003 021f 	and.w	r2, r3, #31
 8002ddc:	4906      	ldr	r1, [pc, #24]	; (8002df8 <__NVIC_EnableIRQ+0x34>)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	2001      	movs	r0, #1
 8002de6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr
 8002df8:	e000e100 	.word	0xe000e100

08002dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	6039      	str	r1, [r7, #0]
 8002e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	db0a      	blt.n	8002e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	490c      	ldr	r1, [pc, #48]	; (8002e48 <__NVIC_SetPriority+0x4c>)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	0112      	lsls	r2, r2, #4
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e24:	e00a      	b.n	8002e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	4908      	ldr	r1, [pc, #32]	; (8002e4c <__NVIC_SetPriority+0x50>)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	3b04      	subs	r3, #4
 8002e34:	0112      	lsls	r2, r2, #4
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	440b      	add	r3, r1
 8002e3a:	761a      	strb	r2, [r3, #24]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	e000e100 	.word	0xe000e100
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	; 0x24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f1c3 0307 	rsb	r3, r3, #7
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	bf28      	it	cs
 8002e6e:	2304      	movcs	r3, #4
 8002e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3304      	adds	r3, #4
 8002e76:	2b06      	cmp	r3, #6
 8002e78:	d902      	bls.n	8002e80 <NVIC_EncodePriority+0x30>
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3b03      	subs	r3, #3
 8002e7e:	e000      	b.n	8002e82 <NVIC_EncodePriority+0x32>
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	f04f 32ff 	mov.w	r2, #4294967295
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	401a      	ands	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e98:	f04f 31ff 	mov.w	r1, #4294967295
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	43d9      	mvns	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	4313      	orrs	r3, r2
         );
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3724      	adds	r7, #36	; 0x24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff ff4f 	bl	8002d60 <__NVIC_SetPriorityGrouping>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002edc:	f7ff ff64 	bl	8002da8 <__NVIC_GetPriorityGrouping>
 8002ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	6978      	ldr	r0, [r7, #20]
 8002ee8:	f7ff ffb2 	bl	8002e50 <NVIC_EncodePriority>
 8002eec:	4602      	mov	r2, r0
 8002eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff81 	bl	8002dfc <__NVIC_SetPriority>
}
 8002efa:	bf00      	nop
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff ff57 	bl	8002dc4 <__NVIC_EnableIRQ>
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b085      	sub	sp, #20
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d008      	beq.n	8002f46 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2204      	movs	r2, #4
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e020      	b.n	8002f88 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 020e 	bic.w	r2, r2, #14
 8002f54:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0201 	bic.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	2101      	movs	r1, #1
 8002f70:	fa01 f202 	lsl.w	r2, r1, r2
 8002f74:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
	...

08002f94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d005      	beq.n	8002fb6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2204      	movs	r2, #4
 8002fae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
 8002fb4:	e051      	b.n	800305a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 020e 	bic.w	r2, r2, #14
 8002fc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0201 	bic.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a22      	ldr	r2, [pc, #136]	; (8003064 <HAL_DMA_Abort_IT+0xd0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d029      	beq.n	8003034 <HAL_DMA_Abort_IT+0xa0>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a20      	ldr	r2, [pc, #128]	; (8003068 <HAL_DMA_Abort_IT+0xd4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d022      	beq.n	8003030 <HAL_DMA_Abort_IT+0x9c>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1f      	ldr	r2, [pc, #124]	; (800306c <HAL_DMA_Abort_IT+0xd8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d01a      	beq.n	800302a <HAL_DMA_Abort_IT+0x96>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a1d      	ldr	r2, [pc, #116]	; (8003070 <HAL_DMA_Abort_IT+0xdc>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d012      	beq.n	8003024 <HAL_DMA_Abort_IT+0x90>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <HAL_DMA_Abort_IT+0xe0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00a      	beq.n	800301e <HAL_DMA_Abort_IT+0x8a>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a1a      	ldr	r2, [pc, #104]	; (8003078 <HAL_DMA_Abort_IT+0xe4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d102      	bne.n	8003018 <HAL_DMA_Abort_IT+0x84>
 8003012:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003016:	e00e      	b.n	8003036 <HAL_DMA_Abort_IT+0xa2>
 8003018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800301c:	e00b      	b.n	8003036 <HAL_DMA_Abort_IT+0xa2>
 800301e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003022:	e008      	b.n	8003036 <HAL_DMA_Abort_IT+0xa2>
 8003024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003028:	e005      	b.n	8003036 <HAL_DMA_Abort_IT+0xa2>
 800302a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800302e:	e002      	b.n	8003036 <HAL_DMA_Abort_IT+0xa2>
 8003030:	2310      	movs	r3, #16
 8003032:	e000      	b.n	8003036 <HAL_DMA_Abort_IT+0xa2>
 8003034:	2301      	movs	r3, #1
 8003036:	4a11      	ldr	r2, [pc, #68]	; (800307c <HAL_DMA_Abort_IT+0xe8>)
 8003038:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	4798      	blx	r3
    } 
  }
  return status;
 800305a:	7bfb      	ldrb	r3, [r7, #15]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40020008 	.word	0x40020008
 8003068:	4002001c 	.word	0x4002001c
 800306c:	40020030 	.word	0x40020030
 8003070:	40020044 	.word	0x40020044
 8003074:	40020058 	.word	0x40020058
 8003078:	4002006c 	.word	0x4002006c
 800307c:	40020000 	.word	0x40020000

08003080 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003080:	b480      	push	{r7}
 8003082:	b08b      	sub	sp, #44	; 0x2c
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800308e:	2300      	movs	r3, #0
 8003090:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003092:	e169      	b.n	8003368 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003094:	2201      	movs	r2, #1
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	f040 8158 	bne.w	8003362 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4a9a      	ldr	r2, [pc, #616]	; (8003320 <HAL_GPIO_Init+0x2a0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d05e      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030bc:	4a98      	ldr	r2, [pc, #608]	; (8003320 <HAL_GPIO_Init+0x2a0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d875      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030c2:	4a98      	ldr	r2, [pc, #608]	; (8003324 <HAL_GPIO_Init+0x2a4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d058      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030c8:	4a96      	ldr	r2, [pc, #600]	; (8003324 <HAL_GPIO_Init+0x2a4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d86f      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030ce:	4a96      	ldr	r2, [pc, #600]	; (8003328 <HAL_GPIO_Init+0x2a8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d052      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030d4:	4a94      	ldr	r2, [pc, #592]	; (8003328 <HAL_GPIO_Init+0x2a8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d869      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030da:	4a94      	ldr	r2, [pc, #592]	; (800332c <HAL_GPIO_Init+0x2ac>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d04c      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030e0:	4a92      	ldr	r2, [pc, #584]	; (800332c <HAL_GPIO_Init+0x2ac>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d863      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030e6:	4a92      	ldr	r2, [pc, #584]	; (8003330 <HAL_GPIO_Init+0x2b0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d046      	beq.n	800317a <HAL_GPIO_Init+0xfa>
 80030ec:	4a90      	ldr	r2, [pc, #576]	; (8003330 <HAL_GPIO_Init+0x2b0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d85d      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030f2:	2b12      	cmp	r3, #18
 80030f4:	d82a      	bhi.n	800314c <HAL_GPIO_Init+0xcc>
 80030f6:	2b12      	cmp	r3, #18
 80030f8:	d859      	bhi.n	80031ae <HAL_GPIO_Init+0x12e>
 80030fa:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <HAL_GPIO_Init+0x80>)
 80030fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003100:	0800317b 	.word	0x0800317b
 8003104:	08003155 	.word	0x08003155
 8003108:	08003167 	.word	0x08003167
 800310c:	080031a9 	.word	0x080031a9
 8003110:	080031af 	.word	0x080031af
 8003114:	080031af 	.word	0x080031af
 8003118:	080031af 	.word	0x080031af
 800311c:	080031af 	.word	0x080031af
 8003120:	080031af 	.word	0x080031af
 8003124:	080031af 	.word	0x080031af
 8003128:	080031af 	.word	0x080031af
 800312c:	080031af 	.word	0x080031af
 8003130:	080031af 	.word	0x080031af
 8003134:	080031af 	.word	0x080031af
 8003138:	080031af 	.word	0x080031af
 800313c:	080031af 	.word	0x080031af
 8003140:	080031af 	.word	0x080031af
 8003144:	0800315d 	.word	0x0800315d
 8003148:	08003171 	.word	0x08003171
 800314c:	4a79      	ldr	r2, [pc, #484]	; (8003334 <HAL_GPIO_Init+0x2b4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003152:	e02c      	b.n	80031ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	623b      	str	r3, [r7, #32]
          break;
 800315a:	e029      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	3304      	adds	r3, #4
 8003162:	623b      	str	r3, [r7, #32]
          break;
 8003164:	e024      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	3308      	adds	r3, #8
 800316c:	623b      	str	r3, [r7, #32]
          break;
 800316e:	e01f      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	330c      	adds	r3, #12
 8003176:	623b      	str	r3, [r7, #32]
          break;
 8003178:	e01a      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003182:	2304      	movs	r3, #4
 8003184:	623b      	str	r3, [r7, #32]
          break;
 8003186:	e013      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d105      	bne.n	800319c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003190:	2308      	movs	r3, #8
 8003192:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	611a      	str	r2, [r3, #16]
          break;
 800319a:	e009      	b.n	80031b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800319c:	2308      	movs	r3, #8
 800319e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	615a      	str	r2, [r3, #20]
          break;
 80031a6:	e003      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031a8:	2300      	movs	r3, #0
 80031aa:	623b      	str	r3, [r7, #32]
          break;
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x130>
          break;
 80031ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2bff      	cmp	r3, #255	; 0xff
 80031b4:	d801      	bhi.n	80031ba <HAL_GPIO_Init+0x13a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	e001      	b.n	80031be <HAL_GPIO_Init+0x13e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3304      	adds	r3, #4
 80031be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2bff      	cmp	r3, #255	; 0xff
 80031c4:	d802      	bhi.n	80031cc <HAL_GPIO_Init+0x14c>
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	e002      	b.n	80031d2 <HAL_GPIO_Init+0x152>
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	3b08      	subs	r3, #8
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	210f      	movs	r1, #15
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	fa01 f303 	lsl.w	r3, r1, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	401a      	ands	r2, r3
 80031e4:	6a39      	ldr	r1, [r7, #32]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	431a      	orrs	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80b1 	beq.w	8003362 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003200:	4b4d      	ldr	r3, [pc, #308]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	4a4c      	ldr	r2, [pc, #304]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6193      	str	r3, [r2, #24]
 800320c:	4b4a      	ldr	r3, [pc, #296]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003218:	4a48      	ldr	r2, [pc, #288]	; (800333c <HAL_GPIO_Init+0x2bc>)
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	3302      	adds	r3, #2
 8003220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003224:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	220f      	movs	r2, #15
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a40      	ldr	r2, [pc, #256]	; (8003340 <HAL_GPIO_Init+0x2c0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d013      	beq.n	800326c <HAL_GPIO_Init+0x1ec>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a3f      	ldr	r2, [pc, #252]	; (8003344 <HAL_GPIO_Init+0x2c4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00d      	beq.n	8003268 <HAL_GPIO_Init+0x1e8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a3e      	ldr	r2, [pc, #248]	; (8003348 <HAL_GPIO_Init+0x2c8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d007      	beq.n	8003264 <HAL_GPIO_Init+0x1e4>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a3d      	ldr	r2, [pc, #244]	; (800334c <HAL_GPIO_Init+0x2cc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d101      	bne.n	8003260 <HAL_GPIO_Init+0x1e0>
 800325c:	2303      	movs	r3, #3
 800325e:	e006      	b.n	800326e <HAL_GPIO_Init+0x1ee>
 8003260:	2304      	movs	r3, #4
 8003262:	e004      	b.n	800326e <HAL_GPIO_Init+0x1ee>
 8003264:	2302      	movs	r3, #2
 8003266:	e002      	b.n	800326e <HAL_GPIO_Init+0x1ee>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_GPIO_Init+0x1ee>
 800326c:	2300      	movs	r3, #0
 800326e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003270:	f002 0203 	and.w	r2, r2, #3
 8003274:	0092      	lsls	r2, r2, #2
 8003276:	4093      	lsls	r3, r2
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800327e:	492f      	ldr	r1, [pc, #188]	; (800333c <HAL_GPIO_Init+0x2bc>)
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	3302      	adds	r3, #2
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d006      	beq.n	80032a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003298:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	492c      	ldr	r1, [pc, #176]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	600b      	str	r3, [r1, #0]
 80032a4:	e006      	b.n	80032b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032a6:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	4928      	ldr	r1, [pc, #160]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d006      	beq.n	80032ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032c0:	4b23      	ldr	r3, [pc, #140]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	4922      	ldr	r1, [pc, #136]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
 80032cc:	e006      	b.n	80032dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	491e      	ldr	r1, [pc, #120]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032d8:	4013      	ands	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d006      	beq.n	80032f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032e8:	4b19      	ldr	r3, [pc, #100]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	4918      	ldr	r1, [pc, #96]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	608b      	str	r3, [r1, #8]
 80032f4:	e006      	b.n	8003304 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032f6:	4b16      	ldr	r3, [pc, #88]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	4914      	ldr	r1, [pc, #80]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 8003300:	4013      	ands	r3, r2
 8003302:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d021      	beq.n	8003354 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	490e      	ldr	r1, [pc, #56]	; (8003350 <HAL_GPIO_Init+0x2d0>)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	60cb      	str	r3, [r1, #12]
 800331c:	e021      	b.n	8003362 <HAL_GPIO_Init+0x2e2>
 800331e:	bf00      	nop
 8003320:	10320000 	.word	0x10320000
 8003324:	10310000 	.word	0x10310000
 8003328:	10220000 	.word	0x10220000
 800332c:	10210000 	.word	0x10210000
 8003330:	10120000 	.word	0x10120000
 8003334:	10110000 	.word	0x10110000
 8003338:	40021000 	.word	0x40021000
 800333c:	40010000 	.word	0x40010000
 8003340:	40010800 	.word	0x40010800
 8003344:	40010c00 	.word	0x40010c00
 8003348:	40011000 	.word	0x40011000
 800334c:	40011400 	.word	0x40011400
 8003350:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_GPIO_Init+0x304>)
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	43db      	mvns	r3, r3
 800335c:	4909      	ldr	r1, [pc, #36]	; (8003384 <HAL_GPIO_Init+0x304>)
 800335e:	4013      	ands	r3, r2
 8003360:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	3301      	adds	r3, #1
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	fa22 f303 	lsr.w	r3, r2, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	f47f ae8e 	bne.w	8003094 <HAL_GPIO_Init+0x14>
  }
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	372c      	adds	r7, #44	; 0x2c
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	40010400 	.word	0x40010400

08003388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	887b      	ldrh	r3, [r7, #2]
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
 80033a4:	e001      	b.n	80033aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr

080033b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	460b      	mov	r3, r1
 80033c0:	807b      	strh	r3, [r7, #2]
 80033c2:	4613      	mov	r3, r2
 80033c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033c6:	787b      	ldrb	r3, [r7, #1]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033cc:	887a      	ldrh	r2, [r7, #2]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033d2:	e003      	b.n	80033dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033d4:	887b      	ldrh	r3, [r7, #2]
 80033d6:	041a      	lsls	r2, r3, #16
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	611a      	str	r2, [r3, #16]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b085      	sub	sp, #20
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	460b      	mov	r3, r1
 80033f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033f8:	887a      	ldrh	r2, [r7, #2]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4013      	ands	r3, r2
 80033fe:	041a      	lsls	r2, r3, #16
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	43d9      	mvns	r1, r3
 8003404:	887b      	ldrh	r3, [r7, #2]
 8003406:	400b      	ands	r3, r1
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	611a      	str	r2, [r3, #16]
}
 800340e:	bf00      	nop
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003422:	4b08      	ldr	r3, [pc, #32]	; (8003444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	4013      	ands	r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d006      	beq.n	800343c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800342e:	4a05      	ldr	r2, [pc, #20]	; (8003444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f806 	bl	8003448 <HAL_GPIO_EXTI_Callback>
  }
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40010400 	.word	0x40010400

08003448 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800345c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345e:	b08b      	sub	sp, #44	; 0x2c
 8003460:	af06      	add	r7, sp, #24
 8003462:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0fd      	b.n	800366a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f00a fa02 	bl	800d88c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2203      	movs	r2, #3
 800348c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f003 fadb 	bl	8006a50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	687e      	ldr	r6, [r7, #4]
 80034a2:	466d      	mov	r5, sp
 80034a4:	f106 0410 	add.w	r4, r6, #16
 80034a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	602b      	str	r3, [r5, #0]
 80034b0:	1d33      	adds	r3, r6, #4
 80034b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034b4:	6838      	ldr	r0, [r7, #0]
 80034b6:	f003 faa5 	bl	8006a04 <USB_CoreInit>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0ce      	b.n	800366a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f003 fad6 	bl	8006a84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034d8:	2300      	movs	r3, #0
 80034da:	73fb      	strb	r3, [r7, #15]
 80034dc:	e04c      	b.n	8003578 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	440b      	add	r3, r1
 80034ee:	3301      	adds	r3, #1
 80034f0:	2201      	movs	r2, #1
 80034f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	440b      	add	r3, r1
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	b298      	uxth	r0, r3
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	440b      	add	r3, r1
 800351a:	3336      	adds	r3, #54	; 0x36
 800351c:	4602      	mov	r2, r0
 800351e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	440b      	add	r3, r1
 8003530:	3303      	adds	r3, #3
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003536:	7bfa      	ldrb	r2, [r7, #15]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	440b      	add	r3, r1
 8003544:	3338      	adds	r3, #56	; 0x38
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	440b      	add	r3, r1
 8003558:	333c      	adds	r3, #60	; 0x3c
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800355e:	7bfa      	ldrb	r2, [r7, #15]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	440b      	add	r3, r1
 800356c:	3340      	adds	r3, #64	; 0x40
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	3301      	adds	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	429a      	cmp	r2, r3
 8003580:	d3ad      	bcc.n	80034de <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
 8003586:	e044      	b.n	8003612 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	440b      	add	r3, r1
 8003596:	f203 1369 	addw	r3, r3, #361	; 0x169
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	440b      	add	r3, r1
 80035ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	440b      	add	r3, r1
 80035c2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	440b      	add	r3, r1
 80035d8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	440b      	add	r3, r1
 80035ee:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	440b      	add	r3, r1
 8003604:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	3301      	adds	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d3b5      	bcc.n	8003588 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	687e      	ldr	r6, [r7, #4]
 8003624:	466d      	mov	r5, sp
 8003626:	f106 0410 	add.w	r4, r6, #16
 800362a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800362c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	602b      	str	r3, [r5, #0]
 8003632:	1d33      	adds	r3, r6, #4
 8003634:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003636:	6838      	ldr	r0, [r7, #0]
 8003638:	f003 fa30 	bl	8006a9c <USB_DevInit>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2202      	movs	r2, #2
 8003646:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e00d      	b.n	800366a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f005 fba1 	bl	8008daa <USB_DevDisconnect>

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003672 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_PCD_Start+0x16>
 8003684:	2302      	movs	r3, #2
 8003686:	e016      	b.n	80036b6 <HAL_PCD_Start+0x44>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f003 f9c5 	bl	8006a24 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800369a:	2101      	movs	r1, #1
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f00a fb68 	bl	800dd72 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f005 fb75 	bl	8008d96 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b088      	sub	sp, #32
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f005 fb77 	bl	8008dbe <USB_ReadInterrupts>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036da:	d102      	bne.n	80036e2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fb61 	bl	8003da4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f005 fb69 	bl	8008dbe <USB_ReadInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f6:	d112      	bne.n	800371e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003700:	b29a      	uxth	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370a:	b292      	uxth	r2, r2
 800370c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f00a f936 	bl	800d982 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003716:	2100      	movs	r1, #0
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f925 	bl	8003968 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f005 fb4b 	bl	8008dbe <USB_ReadInterrupts>
 8003728:	4603      	mov	r3, r0
 800372a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800372e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003732:	d10b      	bne.n	800374c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800373c:	b29a      	uxth	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003746:	b292      	uxth	r2, r2
 8003748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f005 fb34 	bl	8008dbe <USB_ReadInterrupts>
 8003756:	4603      	mov	r3, r0
 8003758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800375c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003760:	d10b      	bne.n	800377a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800376a:	b29a      	uxth	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003774:	b292      	uxth	r2, r2
 8003776:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f005 fb1d 	bl	8008dbe <USB_ReadInterrupts>
 8003784:	4603      	mov	r3, r0
 8003786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800378a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378e:	d126      	bne.n	80037de <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003798:	b29a      	uxth	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0204 	bic.w	r2, r2, #4
 80037a2:	b292      	uxth	r2, r2
 80037a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0208 	bic.w	r2, r2, #8
 80037ba:	b292      	uxth	r2, r2
 80037bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f00a f917 	bl	800d9f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037d8:	b292      	uxth	r2, r2
 80037da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f005 faeb 	bl	8008dbe <USB_ReadInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f2:	f040 8084 	bne.w	80038fe <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80037f6:	2300      	movs	r3, #0
 80037f8:	77fb      	strb	r3, [r7, #31]
 80037fa:	e011      	b.n	8003820 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	7ffb      	ldrb	r3, [r7, #31]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	441a      	add	r2, r3
 8003808:	7ffb      	ldrb	r3, [r7, #31]
 800380a:	8812      	ldrh	r2, [r2, #0]
 800380c:	b292      	uxth	r2, r2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	f107 0120 	add.w	r1, r7, #32
 8003814:	440b      	add	r3, r1
 8003816:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800381a:	7ffb      	ldrb	r3, [r7, #31]
 800381c:	3301      	adds	r3, #1
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	7ffb      	ldrb	r3, [r7, #31]
 8003822:	2b07      	cmp	r3, #7
 8003824:	d9ea      	bls.n	80037fc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800382e:	b29a      	uxth	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0201 	orr.w	r2, r2, #1
 8003838:	b292      	uxth	r2, r2
 800383a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003846:	b29a      	uxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0201 	bic.w	r2, r2, #1
 8003850:	b292      	uxth	r2, r2
 8003852:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003856:	bf00      	nop
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003860:	b29b      	uxth	r3, r3
 8003862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f6      	beq.n	8003858 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003872:	b29a      	uxth	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387c:	b292      	uxth	r2, r2
 800387e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003882:	2300      	movs	r3, #0
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e010      	b.n	80038aa <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003888:	7ffb      	ldrb	r3, [r7, #31]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	4611      	mov	r1, r2
 8003890:	7ffa      	ldrb	r2, [r7, #31]
 8003892:	0092      	lsls	r2, r2, #2
 8003894:	440a      	add	r2, r1
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	f107 0120 	add.w	r1, r7, #32
 800389c:	440b      	add	r3, r1
 800389e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80038a2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80038a4:	7ffb      	ldrb	r3, [r7, #31]
 80038a6:	3301      	adds	r3, #1
 80038a8:	77fb      	strb	r3, [r7, #31]
 80038aa:	7ffb      	ldrb	r3, [r7, #31]
 80038ac:	2b07      	cmp	r3, #7
 80038ae:	d9eb      	bls.n	8003888 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0208 	orr.w	r2, r2, #8
 80038c2:	b292      	uxth	r2, r2
 80038c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038da:	b292      	uxth	r2, r2
 80038dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0204 	orr.w	r2, r2, #4
 80038f2:	b292      	uxth	r2, r2
 80038f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f00a f861 	bl	800d9c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f005 fa5b 	bl	8008dbe <USB_ReadInterrupts>
 8003908:	4603      	mov	r3, r0
 800390a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800390e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003912:	d10e      	bne.n	8003932 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800391c:	b29a      	uxth	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003926:	b292      	uxth	r2, r2
 8003928:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f00a f81a 	bl	800d966 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f005 fa41 	bl	8008dbe <USB_ReadInterrupts>
 800393c:	4603      	mov	r3, r0
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003946:	d10b      	bne.n	8003960 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003950:	b29a      	uxth	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800395a:	b292      	uxth	r2, r2
 800395c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003960:	bf00      	nop
 8003962:	3720      	adds	r7, #32
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_PCD_SetAddress+0x1a>
 800397e:	2302      	movs	r3, #2
 8003980:	e013      	b.n	80039aa <HAL_PCD_SetAddress+0x42>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	4611      	mov	r1, r2
 800399a:	4618      	mov	r0, r3
 800399c:	f005 f9e8 	bl	8008d70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	4608      	mov	r0, r1
 80039bc:	4611      	mov	r1, r2
 80039be:	461a      	mov	r2, r3
 80039c0:	4603      	mov	r3, r0
 80039c2:	70fb      	strb	r3, [r7, #3]
 80039c4:	460b      	mov	r3, r1
 80039c6:	803b      	strh	r3, [r7, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	da0e      	bge.n	80039f6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	705a      	strb	r2, [r3, #1]
 80039f4:	e00e      	b.n	8003a14 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 0207 	and.w	r2, r3, #7
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a20:	883a      	ldrh	r2, [r7, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	78ba      	ldrb	r2, [r7, #2]
 8003a2a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	785b      	ldrb	r3, [r3, #1]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d004      	beq.n	8003a3e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a3e:	78bb      	ldrb	r3, [r7, #2]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d102      	bne.n	8003a4a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_PCD_EP_Open+0xa6>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e00e      	b.n	8003a76 <HAL_PCD_EP_Open+0xc4>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68f9      	ldr	r1, [r7, #12]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f003 f838 	bl	8006adc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003a74:	7afb      	ldrb	r3, [r7, #11]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
 8003a86:	460b      	mov	r3, r1
 8003a88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	da0e      	bge.n	8003ab0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a92:	78fb      	ldrb	r3, [r7, #3]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	705a      	strb	r2, [r3, #1]
 8003aae:	e00e      	b.n	8003ace <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	f003 0207 	and.w	r2, r3, #7
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_PCD_EP_Close+0x6a>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e00e      	b.n	8003b06 <HAL_PCD_EP_Close+0x88>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68f9      	ldr	r1, [r7, #12]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f003 fb5a 	bl	80071b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b1e:	7afb      	ldrb	r3, [r7, #11]
 8003b20:	f003 0207 	and.w	r2, r3, #7
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2200      	movs	r2, #0
 8003b46:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b4e:	7afb      	ldrb	r3, [r7, #11]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b5a:	7afb      	ldrb	r3, [r7, #11]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6979      	ldr	r1, [r7, #20]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f003 fd0c 	bl	8007588 <USB_EPStartXfer>
 8003b70:	e005      	b.n	8003b7e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6979      	ldr	r1, [r7, #20]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f003 fd05 	bl	8007588 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	f003 0207 	and.w	r2, r3, #7
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	440b      	add	r3, r1
 8003ba6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003baa:	681b      	ldr	r3, [r3, #0]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b086      	sub	sp, #24
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc6:	7afb      	ldrb	r3, [r7, #11]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	4613      	mov	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4413      	add	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c02:	7afb      	ldrb	r3, [r7, #11]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c0e:	7afb      	ldrb	r3, [r7, #11]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d106      	bne.n	8003c26 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6979      	ldr	r1, [r7, #20]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f003 fcb2 	bl	8007588 <USB_EPStartXfer>
 8003c24:	e005      	b.n	8003c32 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6979      	ldr	r1, [r7, #20]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f003 fcab 	bl	8007588 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	f003 0207 	and.w	r2, r3, #7
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d901      	bls.n	8003c5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e04c      	b.n	8003cf4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da0e      	bge.n	8003c80 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	705a      	strb	r2, [r3, #1]
 8003c7e:	e00c      	b.n	8003c9a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	4613      	mov	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_PCD_EP_SetStall+0x7e>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e01c      	b.n	8003cf4 <HAL_PCD_EP_SetStall+0xb8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68f9      	ldr	r1, [r7, #12]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f004 ff54 	bl	8008b76 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d108      	bne.n	8003cea <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f005 f879 	bl	8008ddc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	f003 020f 	and.w	r2, r3, #15
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d901      	bls.n	8003d1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e040      	b.n	8003d9c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	da0e      	bge.n	8003d40 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	4413      	add	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	705a      	strb	r2, [r3, #1]
 8003d3e:	e00e      	b.n	8003d5e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	f003 0207 	and.w	r2, r3, #7
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	4413      	add	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_PCD_EP_ClrStall+0x82>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e00e      	b.n	8003d9c <HAL_PCD_EP_ClrStall+0xa0>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68f9      	ldr	r1, [r7, #12]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f004 ff42 	bl	8008c16 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08e      	sub	sp, #56	; 0x38
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003dac:	e2ec      	b.n	8004388 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003db6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003db8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003dc4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f040 8161 	bne.w	8004090 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003dce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d152      	bne.n	8003e7e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de8:	81fb      	strh	r3, [r7, #14]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	89fb      	ldrh	r3, [r7, #14]
 8003df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3328      	adds	r3, #40	; 0x28
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	3302      	adds	r3, #2
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	441a      	add	r2, r3
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f009 fd77 	bl	800d932 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 829b 	beq.w	8004388 <PCD_EP_ISR_Handler+0x5e4>
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 8296 	bne.w	8004388 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	b292      	uxth	r2, r2
 8003e70:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e7c:	e284      	b.n	8004388 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003e8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d034      	beq.n	8003f02 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4413      	add	r3, r2
 8003eac:	3306      	adds	r3, #6
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f004 ffd0 	bl	8008e7c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ee8:	4013      	ands	r3, r2
 8003eea:	823b      	strh	r3, [r7, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	8a3a      	ldrh	r2, [r7, #16]
 8003ef2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ef6:	b292      	uxth	r2, r2
 8003ef8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f009 fcec 	bl	800d8d8 <HAL_PCD_SetupStageCallback>
 8003f00:	e242      	b.n	8004388 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f02:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f280 823e 	bge.w	8004388 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003f18:	4013      	ands	r3, r2
 8003f1a:	83bb      	strh	r3, [r7, #28]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	8bba      	ldrh	r2, [r7, #28]
 8003f22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f26:	b292      	uxth	r2, r2
 8003f28:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3306      	adds	r3, #6
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6812      	ldr	r2, [r2, #0]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d019      	beq.n	8003f92 <PCD_EP_ISR_Handler+0x1ee>
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d015      	beq.n	8003f92 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	6959      	ldr	r1, [r3, #20]
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f004 ff80 	bl	8008e7c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	441a      	add	r2, r3
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f009 fcb5 	bl	800d8fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f040 81f2 	bne.w	8004388 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	4413      	add	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d112      	bne.n	8003ff2 <PCD_EP_ISR_Handler+0x24e>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	801a      	strh	r2, [r3, #0]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	801a      	strh	r2, [r3, #0]
 8003ff0:	e02f      	b.n	8004052 <PCD_EP_ISR_Handler+0x2ae>
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b3e      	cmp	r3, #62	; 0x3e
 8003ff8:	d813      	bhi.n	8004022 <PCD_EP_ISR_Handler+0x27e>
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	633b      	str	r3, [r7, #48]	; 0x30
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <PCD_EP_ISR_Handler+0x270>
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	3301      	adds	r3, #1
 8004012:	633b      	str	r3, [r7, #48]	; 0x30
 8004014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004016:	b29b      	uxth	r3, r3
 8004018:	029b      	lsls	r3, r3, #10
 800401a:	b29a      	uxth	r2, r3
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	801a      	strh	r2, [r3, #0]
 8004020:	e017      	b.n	8004052 <PCD_EP_ISR_Handler+0x2ae>
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	633b      	str	r3, [r7, #48]	; 0x30
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	2b00      	cmp	r3, #0
 8004034:	d102      	bne.n	800403c <PCD_EP_ISR_Handler+0x298>
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	3b01      	subs	r3, #1
 800403a:	633b      	str	r3, [r7, #48]	; 0x30
 800403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403e:	b29b      	uxth	r3, r3
 8004040:	029b      	lsls	r3, r3, #10
 8004042:	b29b      	uxth	r3, r3
 8004044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800404c:	b29a      	uxth	r2, r3
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	827b      	strh	r3, [r7, #18]
 8004064:	8a7b      	ldrh	r3, [r7, #18]
 8004066:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800406a:	827b      	strh	r3, [r7, #18]
 800406c:	8a7b      	ldrh	r3, [r7, #18]
 800406e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004072:	827b      	strh	r3, [r7, #18]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	8a7b      	ldrh	r3, [r7, #18]
 800407a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408a:	b29b      	uxth	r3, r3
 800408c:	8013      	strh	r3, [r2, #0]
 800408e:	e17b      	b.n	8004388 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80040a2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f280 80ea 	bge.w	8004280 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	b29a      	uxth	r2, r3
 80040be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80040c2:	4013      	ands	r3, r2
 80040c4:	853b      	strh	r3, [r7, #40]	; 0x28
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80040d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040da:	b292      	uxth	r2, r2
 80040dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80040de:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	4413      	add	r3, r2
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	7b1b      	ldrb	r3, [r3, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d122      	bne.n	8004142 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004104:	b29b      	uxth	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4413      	add	r3, r2
 8004110:	3306      	adds	r3, #6
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004124:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004126:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8087 	beq.w	800423c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	6959      	ldr	r1, [r3, #20]
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	88da      	ldrh	r2, [r3, #6]
 800413a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800413c:	f004 fe9e 	bl	8008e7c <USB_ReadPMA>
 8004140:	e07c      	b.n	800423c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	78db      	ldrb	r3, [r3, #3]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d108      	bne.n	800415c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800414a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800414c:	461a      	mov	r2, r3
 800414e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f927 	bl	80043a4 <HAL_PCD_EP_DB_Receive>
 8004156:	4603      	mov	r3, r0
 8004158:	86fb      	strh	r3, [r7, #54]	; 0x36
 800415a:	e06f      	b.n	800423c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	b29b      	uxth	r3, r3
 800416e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004176:	847b      	strh	r3, [r7, #34]	; 0x22
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	441a      	add	r2, r3
 8004186:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800418c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004194:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004198:	b29b      	uxth	r3, r3
 800419a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d021      	beq.n	80041fa <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041be:	b29b      	uxth	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	4413      	add	r3, r2
 80041ca:	3302      	adds	r3, #2
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041de:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80041e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d02a      	beq.n	800423c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	6959      	ldr	r1, [r3, #20]
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	891a      	ldrh	r2, [r3, #8]
 80041f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041f4:	f004 fe42 	bl	8008e7c <USB_ReadPMA>
 80041f8:	e020      	b.n	800423c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004202:	b29b      	uxth	r3, r3
 8004204:	461a      	mov	r2, r3
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	4413      	add	r3, r2
 800420e:	3306      	adds	r3, #6
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6812      	ldr	r2, [r2, #0]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004222:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004224:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	6959      	ldr	r1, [r3, #20]
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	895a      	ldrh	r2, [r3, #10]
 8004236:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004238:	f004 fe20 	bl	8008e7c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	69da      	ldr	r2, [r3, #28]
 8004240:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004242:	441a      	add	r2, r3
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	695a      	ldr	r2, [r3, #20]
 800424c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800424e:	441a      	add	r2, r3
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d004      	beq.n	8004266 <PCD_EP_ISR_Handler+0x4c2>
 800425c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	429a      	cmp	r2, r3
 8004264:	d206      	bcs.n	8004274 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f009 fb45 	bl	800d8fc <HAL_PCD_DataOutStageCallback>
 8004272:	e005      	b.n	8004280 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800427a:	4618      	mov	r0, r3
 800427c:	f003 f984 	bl	8007588 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004280:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004286:	2b00      	cmp	r3, #0
 8004288:	d07e      	beq.n	8004388 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800428a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	4413      	add	r3, r2
 800429c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80042b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b8:	843b      	strh	r3, [r7, #32]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	441a      	add	r2, r3
 80042c8:	8c3b      	ldrh	r3, [r7, #32]
 80042ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	78db      	ldrb	r3, [r3, #3]
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d00c      	beq.n	80042f8 <PCD_EP_ISR_Handler+0x554>
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	78db      	ldrb	r3, [r3, #3]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d146      	bne.n	800437c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80042ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d141      	bne.n	800437c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004300:	b29b      	uxth	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4413      	add	r3, r2
 800430c:	3302      	adds	r3, #2
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004320:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	8bfb      	ldrh	r3, [r7, #30]
 8004328:	429a      	cmp	r2, r3
 800432a:	d906      	bls.n	800433a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	699a      	ldr	r2, [r3, #24]
 8004330:	8bfb      	ldrh	r3, [r7, #30]
 8004332:	1ad2      	subs	r2, r2, r3
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	619a      	str	r2, [r3, #24]
 8004338:	e002      	b.n	8004340 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	2200      	movs	r2, #0
 800433e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	4619      	mov	r1, r3
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f009 faef 	bl	800d932 <HAL_PCD_DataInStageCallback>
 8004354:	e018      	b.n	8004388 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	8bfb      	ldrh	r3, [r7, #30]
 800435c:	441a      	add	r2, r3
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	8bfb      	ldrh	r3, [r7, #30]
 8004368:	441a      	add	r2, r3
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004374:	4618      	mov	r0, r3
 8004376:	f003 f907 	bl	8007588 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800437a:	e005      	b.n	8004388 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800437c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800437e:	461a      	mov	r2, r3
 8004380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f91b 	bl	80045be <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004390:	b29b      	uxth	r3, r3
 8004392:	b21b      	sxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	f6ff ad0a 	blt.w	8003dae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3738      	adds	r7, #56	; 0x38
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	4613      	mov	r3, r2
 80043b0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d07e      	beq.n	80044ba <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	3302      	adds	r3, #2
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043e4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	8b7b      	ldrh	r3, [r7, #26]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d306      	bcc.n	80043fe <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	8b7b      	ldrh	r3, [r7, #26]
 80043f6:	1ad2      	subs	r2, r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	619a      	str	r2, [r3, #24]
 80043fc:	e002      	b.n	8004404 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2200      	movs	r2, #0
 8004402:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d123      	bne.n	8004454 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	b29b      	uxth	r3, r3
 800441e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	833b      	strh	r3, [r7, #24]
 8004428:	8b3b      	ldrh	r3, [r7, #24]
 800442a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800442e:	833b      	strh	r3, [r7, #24]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	441a      	add	r2, r3
 800443e:	8b3b      	ldrh	r3, [r7, #24]
 8004440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004450:	b29b      	uxth	r3, r3
 8004452:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01f      	beq.n	800449e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004478:	82fb      	strh	r3, [r7, #22]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	441a      	add	r2, r3
 8004488:	8afb      	ldrh	r3, [r7, #22]
 800448a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800448e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004496:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800449a:	b29b      	uxth	r3, r3
 800449c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800449e:	8b7b      	ldrh	r3, [r7, #26]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 8087 	beq.w	80045b4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	6959      	ldr	r1, [r3, #20]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	891a      	ldrh	r2, [r3, #8]
 80044b2:	8b7b      	ldrh	r3, [r7, #26]
 80044b4:	f004 fce2 	bl	8008e7c <USB_ReadPMA>
 80044b8:	e07c      	b.n	80045b4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	3306      	adds	r3, #6
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044e2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	699a      	ldr	r2, [r3, #24]
 80044e8:	8b7b      	ldrh	r3, [r7, #26]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d306      	bcc.n	80044fc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	8b7b      	ldrh	r3, [r7, #26]
 80044f4:	1ad2      	subs	r2, r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	619a      	str	r2, [r3, #24]
 80044fa:	e002      	b.n	8004502 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2200      	movs	r2, #0
 8004500:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d123      	bne.n	8004552 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004524:	83fb      	strh	r3, [r7, #30]
 8004526:	8bfb      	ldrh	r3, [r7, #30]
 8004528:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800452c:	83fb      	strh	r3, [r7, #30]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	441a      	add	r2, r3
 800453c:	8bfb      	ldrh	r3, [r7, #30]
 800453e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800454e:	b29b      	uxth	r3, r3
 8004550:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d11f      	bne.n	800459c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	83bb      	strh	r3, [r7, #28]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	441a      	add	r2, r3
 8004586:	8bbb      	ldrh	r3, [r7, #28]
 8004588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800458c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004594:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004598:	b29b      	uxth	r3, r3
 800459a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800459c:	8b7b      	ldrh	r3, [r7, #26]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d008      	beq.n	80045b4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	6959      	ldr	r1, [r3, #20]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	895a      	ldrh	r2, [r3, #10]
 80045ae:	8b7b      	ldrh	r3, [r7, #26]
 80045b0:	f004 fc64 	bl	8008e7c <USB_ReadPMA>
    }
  }

  return count;
 80045b4:	8b7b      	ldrh	r3, [r7, #26]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3720      	adds	r7, #32
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b0a2      	sub	sp, #136	; 0x88
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	60b9      	str	r1, [r7, #8]
 80045c8:	4613      	mov	r3, r2
 80045ca:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045cc:	88fb      	ldrh	r3, [r7, #6]
 80045ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 81c7 	beq.w	8004966 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4413      	add	r3, r2
 80045ec:	3302      	adds	r3, #2
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004600:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	699a      	ldr	r2, [r3, #24]
 8004608:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800460c:	429a      	cmp	r2, r3
 800460e:	d907      	bls.n	8004620 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	699a      	ldr	r2, [r3, #24]
 8004614:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004618:	1ad2      	subs	r2, r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	619a      	str	r2, [r3, #24]
 800461e:	e002      	b.n	8004626 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2200      	movs	r2, #0
 8004624:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	f040 80b9 	bne.w	80047a2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d126      	bne.n	8004686 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	62bb      	str	r3, [r7, #40]	; 0x28
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004646:	b29b      	uxth	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	4413      	add	r3, r2
 800464e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	011a      	lsls	r2, r3, #4
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	4413      	add	r3, r2
 800465a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800466a:	b29a      	uxth	r2, r3
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	801a      	strh	r2, [r3, #0]
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	b29b      	uxth	r3, r3
 8004676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800467a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800467e:	b29a      	uxth	r2, r3
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	801a      	strh	r2, [r3, #0]
 8004684:	e01a      	b.n	80046bc <HAL_PCD_EP_DB_Transmit+0xfe>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	785b      	ldrb	r3, [r3, #1]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d116      	bne.n	80046bc <HAL_PCD_EP_DB_Transmit+0xfe>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	633b      	str	r3, [r7, #48]	; 0x30
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469c:	b29b      	uxth	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	4413      	add	r3, r2
 80046a4:	633b      	str	r3, [r7, #48]	; 0x30
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	011a      	lsls	r2, r3, #4
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	4413      	add	r3, r2
 80046b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b8:	2200      	movs	r2, #0
 80046ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	623b      	str	r3, [r7, #32]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	785b      	ldrb	r3, [r3, #1]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d126      	bne.n	8004718 <HAL_PCD_EP_DB_Transmit+0x15a>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046d8:	b29b      	uxth	r3, r3
 80046da:	461a      	mov	r2, r3
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	4413      	add	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	011a      	lsls	r2, r3, #4
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	4413      	add	r3, r2
 80046ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	801a      	strh	r2, [r3, #0]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	b29b      	uxth	r3, r3
 8004708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800470c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004710:	b29a      	uxth	r2, r3
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	801a      	strh	r2, [r3, #0]
 8004716:	e017      	b.n	8004748 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	785b      	ldrb	r3, [r3, #1]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d113      	bne.n	8004748 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004728:	b29b      	uxth	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	4413      	add	r3, r2
 8004730:	623b      	str	r3, [r7, #32]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	011a      	lsls	r2, r3, #4
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	4413      	add	r3, r2
 800473c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	2200      	movs	r2, #0
 8004746:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	4619      	mov	r1, r3
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f009 f8ef 	bl	800d932 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 82d4 	beq.w	8004d08 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29b      	uxth	r3, r3
 8004772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477a:	827b      	strh	r3, [r7, #18]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	441a      	add	r2, r3
 800478a:	8a7b      	ldrh	r3, [r7, #18]
 800478c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004794:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479c:	b29b      	uxth	r3, r3
 800479e:	8013      	strh	r3, [r2, #0]
 80047a0:	e2b2      	b.n	8004d08 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80047a2:	88fb      	ldrh	r3, [r7, #6]
 80047a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d021      	beq.n	80047f0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	441a      	add	r2, r3
 80047d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80047dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	f040 8286 	bne.w	8004d08 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	695a      	ldr	r2, [r3, #20]
 8004800:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004804:	441a      	add	r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	69da      	ldr	r2, [r3, #28]
 800480e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004812:	441a      	add	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	6a1a      	ldr	r2, [r3, #32]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	429a      	cmp	r2, r3
 8004822:	d309      	bcc.n	8004838 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	6a1a      	ldr	r2, [r3, #32]
 800482e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004830:	1ad2      	subs	r2, r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	621a      	str	r2, [r3, #32]
 8004836:	e015      	b.n	8004864 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d107      	bne.n	8004850 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8004840:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004844:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800484e:	e009      	b.n	8004864 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2200      	movs	r2, #0
 8004862:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	785b      	ldrb	r3, [r3, #1]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d155      	bne.n	8004918 <HAL_PCD_EP_DB_Transmit+0x35a>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	63bb      	str	r3, [r7, #56]	; 0x38
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800487a:	b29b      	uxth	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004880:	4413      	add	r3, r2
 8004882:	63bb      	str	r3, [r7, #56]	; 0x38
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	011a      	lsls	r2, r3, #4
 800488a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488c:	4413      	add	r3, r2
 800488e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004892:	637b      	str	r3, [r7, #52]	; 0x34
 8004894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004896:	2b00      	cmp	r3, #0
 8004898:	d112      	bne.n	80048c0 <HAL_PCD_EP_DB_Transmit+0x302>
 800489a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a8:	801a      	strh	r2, [r3, #0]
 80048aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048bc:	801a      	strh	r2, [r3, #0]
 80048be:	e047      	b.n	8004950 <HAL_PCD_EP_DB_Transmit+0x392>
 80048c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c2:	2b3e      	cmp	r3, #62	; 0x3e
 80048c4:	d811      	bhi.n	80048ea <HAL_PCD_EP_DB_Transmit+0x32c>
 80048c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c8:	085b      	lsrs	r3, r3, #1
 80048ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80048cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <HAL_PCD_EP_DB_Transmit+0x31e>
 80048d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d8:	3301      	adds	r3, #1
 80048da:	64bb      	str	r3, [r7, #72]	; 0x48
 80048dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048de:	b29b      	uxth	r3, r3
 80048e0:	029b      	lsls	r3, r3, #10
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	e032      	b.n	8004950 <HAL_PCD_EP_DB_Transmit+0x392>
 80048ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d102      	bne.n	8004900 <HAL_PCD_EP_DB_Transmit+0x342>
 80048fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fc:	3b01      	subs	r3, #1
 80048fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004902:	b29b      	uxth	r3, r3
 8004904:	029b      	lsls	r3, r3, #10
 8004906:	b29b      	uxth	r3, r3
 8004908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800490c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004910:	b29a      	uxth	r2, r3
 8004912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004914:	801a      	strh	r2, [r3, #0]
 8004916:	e01b      	b.n	8004950 <HAL_PCD_EP_DB_Transmit+0x392>
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	785b      	ldrb	r3, [r3, #1]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d117      	bne.n	8004950 <HAL_PCD_EP_DB_Transmit+0x392>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	643b      	str	r3, [r7, #64]	; 0x40
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800492e:	b29b      	uxth	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004934:	4413      	add	r3, r2
 8004936:	643b      	str	r3, [r7, #64]	; 0x40
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	011a      	lsls	r2, r3, #4
 800493e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004940:	4413      	add	r3, r2
 8004942:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800494a:	b29a      	uxth	r2, r3
 800494c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	6959      	ldr	r1, [r3, #20]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	891a      	ldrh	r2, [r3, #8]
 800495c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800495e:	b29b      	uxth	r3, r3
 8004960:	f004 fa47 	bl	8008df2 <USB_WritePMA>
 8004964:	e1d0      	b.n	8004d08 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800496e:	b29b      	uxth	r3, r3
 8004970:	461a      	mov	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	4413      	add	r3, r2
 800497a:	3306      	adds	r3, #6
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800498e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800499a:	429a      	cmp	r2, r3
 800499c:	d307      	bcc.n	80049ae <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049a6:	1ad2      	subs	r2, r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	619a      	str	r2, [r3, #24]
 80049ac:	e002      	b.n	80049b4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2200      	movs	r2, #0
 80049b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f040 80c4 	bne.w	8004b46 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	785b      	ldrb	r3, [r3, #1]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d126      	bne.n	8004a14 <HAL_PCD_EP_DB_Transmit+0x456>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049da:	4413      	add	r3, r2
 80049dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	011a      	lsls	r2, r3, #4
 80049e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e6:	4413      	add	r3, r2
 80049e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80049ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049fc:	801a      	strh	r2, [r3, #0]
 80049fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a10:	801a      	strh	r2, [r3, #0]
 8004a12:	e01a      	b.n	8004a4a <HAL_PCD_EP_DB_Transmit+0x48c>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	785b      	ldrb	r3, [r3, #1]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d116      	bne.n	8004a4a <HAL_PCD_EP_DB_Transmit+0x48c>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	677b      	str	r3, [r7, #116]	; 0x74
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a30:	4413      	add	r3, r2
 8004a32:	677b      	str	r3, [r7, #116]	; 0x74
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	011a      	lsls	r2, r3, #4
 8004a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a42:	673b      	str	r3, [r7, #112]	; 0x70
 8004a44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a46:	2200      	movs	r2, #0
 8004a48:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	785b      	ldrb	r3, [r3, #1]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d12f      	bne.n	8004ab8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a70:	4413      	add	r3, r2
 8004a72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	011a      	lsls	r2, r3, #4
 8004a7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a80:	4413      	add	r3, r2
 8004a82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a9c:	801a      	strh	r2, [r3, #0]
 8004a9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ab4:	801a      	strh	r2, [r3, #0]
 8004ab6:	e017      	b.n	8004ae8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d113      	bne.n	8004ae8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ace:	4413      	add	r3, r2
 8004ad0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	011a      	lsls	r2, r3, #4
 8004ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ada:	4413      	add	r3, r2
 8004adc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ae0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ae2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	4619      	mov	r1, r3
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f008 ff1f 	bl	800d932 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004af4:	88fb      	ldrh	r3, [r7, #6]
 8004af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 8104 	bne.w	8004d08 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	441a      	add	r2, r3
 8004b2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	8013      	strh	r3, [r2, #0]
 8004b44:	e0e0      	b.n	8004d08 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d121      	bne.n	8004b94 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	441a      	add	r2, r3
 8004b7c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	f040 80b4 	bne.w	8004d08 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	695a      	ldr	r2, [r3, #20]
 8004ba4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ba8:	441a      	add	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	69da      	ldr	r2, [r3, #28]
 8004bb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004bb6:	441a      	add	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	6a1a      	ldr	r2, [r3, #32]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d309      	bcc.n	8004bdc <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	6a1a      	ldr	r2, [r3, #32]
 8004bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd4:	1ad2      	subs	r2, r2, r3
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	621a      	str	r2, [r3, #32]
 8004bda:	e015      	b.n	8004c08 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d107      	bne.n	8004bf4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004be4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004be8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004bf2:	e009      	b.n	8004c08 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	785b      	ldrb	r3, [r3, #1]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d155      	bne.n	8004cc2 <HAL_PCD_EP_DB_Transmit+0x704>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	461a      	mov	r2, r3
 8004c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c2a:	4413      	add	r3, r2
 8004c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	011a      	lsls	r2, r3, #4
 8004c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c36:	4413      	add	r3, r2
 8004c38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d112      	bne.n	8004c6a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c52:	801a      	strh	r2, [r3, #0]
 8004c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c66:	801a      	strh	r2, [r3, #0]
 8004c68:	e044      	b.n	8004cf4 <HAL_PCD_EP_DB_Transmit+0x736>
 8004c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c6c:	2b3e      	cmp	r3, #62	; 0x3e
 8004c6e:	d811      	bhi.n	8004c94 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c72:	085b      	lsrs	r3, r3, #1
 8004c74:	657b      	str	r3, [r7, #84]	; 0x54
 8004c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c82:	3301      	adds	r3, #1
 8004c84:	657b      	str	r3, [r7, #84]	; 0x54
 8004c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	029b      	lsls	r3, r3, #10
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c90:	801a      	strh	r2, [r3, #0]
 8004c92:	e02f      	b.n	8004cf4 <HAL_PCD_EP_DB_Transmit+0x736>
 8004c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	657b      	str	r3, [r7, #84]	; 0x54
 8004c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	657b      	str	r3, [r7, #84]	; 0x54
 8004caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	029b      	lsls	r3, r3, #10
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cbe:	801a      	strh	r2, [r3, #0]
 8004cc0:	e018      	b.n	8004cf4 <HAL_PCD_EP_DB_Transmit+0x736>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	785b      	ldrb	r3, [r3, #1]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d114      	bne.n	8004cf4 <HAL_PCD_EP_DB_Transmit+0x736>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cd8:	4413      	add	r3, r2
 8004cda:	667b      	str	r3, [r7, #100]	; 0x64
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	011a      	lsls	r2, r3, #4
 8004ce2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cea:	663b      	str	r3, [r7, #96]	; 0x60
 8004cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cf2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	6959      	ldr	r1, [r3, #20]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	895a      	ldrh	r2, [r3, #10]
 8004d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	f004 f875 	bl	8008df2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d22:	823b      	strh	r3, [r7, #16]
 8004d24:	8a3b      	ldrh	r3, [r7, #16]
 8004d26:	f083 0310 	eor.w	r3, r3, #16
 8004d2a:	823b      	strh	r3, [r7, #16]
 8004d2c:	8a3b      	ldrh	r3, [r7, #16]
 8004d2e:	f083 0320 	eor.w	r3, r3, #32
 8004d32:	823b      	strh	r3, [r7, #16]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	8a3b      	ldrh	r3, [r7, #16]
 8004d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3788      	adds	r7, #136	; 0x88
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b087      	sub	sp, #28
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	607b      	str	r3, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	817b      	strh	r3, [r7, #10]
 8004d70:	4613      	mov	r3, r2
 8004d72:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004d74:	897b      	ldrh	r3, [r7, #10]
 8004d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00b      	beq.n	8004d98 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d80:	897b      	ldrh	r3, [r7, #10]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4413      	add	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	e009      	b.n	8004dac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d98:	897a      	ldrh	r2, [r7, #10]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4413      	add	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004dac:	893b      	ldrh	r3, [r7, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d107      	bne.n	8004dc2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2200      	movs	r2, #0
 8004db6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	80da      	strh	r2, [r3, #6]
 8004dc0:	e00b      	b.n	8004dda <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	0c1b      	lsrs	r3, r3, #16
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr
	...

08004de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e26c      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 8087 	beq.w	8004f16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e08:	4b92      	ldr	r3, [pc, #584]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 030c 	and.w	r3, r3, #12
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d00c      	beq.n	8004e2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e14:	4b8f      	ldr	r3, [pc, #572]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 030c 	and.w	r3, r3, #12
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d112      	bne.n	8004e46 <HAL_RCC_OscConfig+0x5e>
 8004e20:	4b8c      	ldr	r3, [pc, #560]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2c:	d10b      	bne.n	8004e46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e2e:	4b89      	ldr	r3, [pc, #548]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d06c      	beq.n	8004f14 <HAL_RCC_OscConfig+0x12c>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d168      	bne.n	8004f14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e246      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4e:	d106      	bne.n	8004e5e <HAL_RCC_OscConfig+0x76>
 8004e50:	4b80      	ldr	r3, [pc, #512]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a7f      	ldr	r2, [pc, #508]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	e02e      	b.n	8004ebc <HAL_RCC_OscConfig+0xd4>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCC_OscConfig+0x98>
 8004e66:	4b7b      	ldr	r3, [pc, #492]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a7a      	ldr	r2, [pc, #488]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	4b78      	ldr	r3, [pc, #480]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a77      	ldr	r2, [pc, #476]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	e01d      	b.n	8004ebc <HAL_RCC_OscConfig+0xd4>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e88:	d10c      	bne.n	8004ea4 <HAL_RCC_OscConfig+0xbc>
 8004e8a:	4b72      	ldr	r3, [pc, #456]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a71      	ldr	r2, [pc, #452]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	4b6f      	ldr	r3, [pc, #444]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a6e      	ldr	r2, [pc, #440]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	e00b      	b.n	8004ebc <HAL_RCC_OscConfig+0xd4>
 8004ea4:	4b6b      	ldr	r3, [pc, #428]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a6a      	ldr	r2, [pc, #424]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	4b68      	ldr	r3, [pc, #416]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a67      	ldr	r2, [pc, #412]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d013      	beq.n	8004eec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec4:	f7fd ff42 	bl	8002d4c <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ecc:	f7fd ff3e 	bl	8002d4c <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	; 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e1fa      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ede:	4b5d      	ldr	r3, [pc, #372]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCC_OscConfig+0xe4>
 8004eea:	e014      	b.n	8004f16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eec:	f7fd ff2e 	bl	8002d4c <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef4:	f7fd ff2a 	bl	8002d4c <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b64      	cmp	r3, #100	; 0x64
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e1e6      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f06:	4b53      	ldr	r3, [pc, #332]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x10c>
 8004f12:	e000      	b.n	8004f16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d063      	beq.n	8004fea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f22:	4b4c      	ldr	r3, [pc, #304]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f003 030c 	and.w	r3, r3, #12
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00b      	beq.n	8004f46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f2e:	4b49      	ldr	r3, [pc, #292]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f003 030c 	and.w	r3, r3, #12
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d11c      	bne.n	8004f74 <HAL_RCC_OscConfig+0x18c>
 8004f3a:	4b46      	ldr	r3, [pc, #280]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d116      	bne.n	8004f74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f46:	4b43      	ldr	r3, [pc, #268]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <HAL_RCC_OscConfig+0x176>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d001      	beq.n	8004f5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e1ba      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f5e:	4b3d      	ldr	r3, [pc, #244]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	4939      	ldr	r1, [pc, #228]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f72:	e03a      	b.n	8004fea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d020      	beq.n	8004fbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f7c:	4b36      	ldr	r3, [pc, #216]	; (8005058 <HAL_RCC_OscConfig+0x270>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f82:	f7fd fee3 	bl	8002d4c <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f8a:	f7fd fedf 	bl	8002d4c <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e19b      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9c:	4b2d      	ldr	r3, [pc, #180]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa8:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4927      	ldr	r1, [pc, #156]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	600b      	str	r3, [r1, #0]
 8004fbc:	e015      	b.n	8004fea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fbe:	4b26      	ldr	r3, [pc, #152]	; (8005058 <HAL_RCC_OscConfig+0x270>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc4:	f7fd fec2 	bl	8002d4c <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fcc:	f7fd febe 	bl	8002d4c <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e17a      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fde:	4b1d      	ldr	r3, [pc, #116]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d03a      	beq.n	800506c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d019      	beq.n	8005032 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ffe:	4b17      	ldr	r3, [pc, #92]	; (800505c <HAL_RCC_OscConfig+0x274>)
 8005000:	2201      	movs	r2, #1
 8005002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005004:	f7fd fea2 	bl	8002d4c <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800500c:	f7fd fe9e 	bl	8002d4c <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e15a      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800501e:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <HAL_RCC_OscConfig+0x26c>)
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0f0      	beq.n	800500c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800502a:	2001      	movs	r0, #1
 800502c:	f000 fb0a 	bl	8005644 <RCC_Delay>
 8005030:	e01c      	b.n	800506c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005032:	4b0a      	ldr	r3, [pc, #40]	; (800505c <HAL_RCC_OscConfig+0x274>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005038:	f7fd fe88 	bl	8002d4c <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800503e:	e00f      	b.n	8005060 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005040:	f7fd fe84 	bl	8002d4c <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d908      	bls.n	8005060 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e140      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>
 8005052:	bf00      	nop
 8005054:	40021000 	.word	0x40021000
 8005058:	42420000 	.word	0x42420000
 800505c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005060:	4b9e      	ldr	r3, [pc, #632]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e9      	bne.n	8005040 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 80a6 	beq.w	80051c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800507a:	2300      	movs	r3, #0
 800507c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800507e:	4b97      	ldr	r3, [pc, #604]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10d      	bne.n	80050a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800508a:	4b94      	ldr	r3, [pc, #592]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	4a93      	ldr	r2, [pc, #588]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005094:	61d3      	str	r3, [r2, #28]
 8005096:	4b91      	ldr	r3, [pc, #580]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509e:	60bb      	str	r3, [r7, #8]
 80050a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a2:	2301      	movs	r3, #1
 80050a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a6:	4b8e      	ldr	r3, [pc, #568]	; (80052e0 <HAL_RCC_OscConfig+0x4f8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d118      	bne.n	80050e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050b2:	4b8b      	ldr	r3, [pc, #556]	; (80052e0 <HAL_RCC_OscConfig+0x4f8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a8a      	ldr	r2, [pc, #552]	; (80052e0 <HAL_RCC_OscConfig+0x4f8>)
 80050b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050be:	f7fd fe45 	bl	8002d4c <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c6:	f7fd fe41 	bl	8002d4c <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b64      	cmp	r3, #100	; 0x64
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e0fd      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d8:	4b81      	ldr	r3, [pc, #516]	; (80052e0 <HAL_RCC_OscConfig+0x4f8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0f0      	beq.n	80050c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d106      	bne.n	80050fa <HAL_RCC_OscConfig+0x312>
 80050ec:	4b7b      	ldr	r3, [pc, #492]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	4a7a      	ldr	r2, [pc, #488]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	6213      	str	r3, [r2, #32]
 80050f8:	e02d      	b.n	8005156 <HAL_RCC_OscConfig+0x36e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10c      	bne.n	800511c <HAL_RCC_OscConfig+0x334>
 8005102:	4b76      	ldr	r3, [pc, #472]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	4a75      	ldr	r2, [pc, #468]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	6213      	str	r3, [r2, #32]
 800510e:	4b73      	ldr	r3, [pc, #460]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	4a72      	ldr	r2, [pc, #456]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005114:	f023 0304 	bic.w	r3, r3, #4
 8005118:	6213      	str	r3, [r2, #32]
 800511a:	e01c      	b.n	8005156 <HAL_RCC_OscConfig+0x36e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	2b05      	cmp	r3, #5
 8005122:	d10c      	bne.n	800513e <HAL_RCC_OscConfig+0x356>
 8005124:	4b6d      	ldr	r3, [pc, #436]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	4a6c      	ldr	r2, [pc, #432]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 800512a:	f043 0304 	orr.w	r3, r3, #4
 800512e:	6213      	str	r3, [r2, #32]
 8005130:	4b6a      	ldr	r3, [pc, #424]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	4a69      	ldr	r2, [pc, #420]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	6213      	str	r3, [r2, #32]
 800513c:	e00b      	b.n	8005156 <HAL_RCC_OscConfig+0x36e>
 800513e:	4b67      	ldr	r3, [pc, #412]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	4a66      	ldr	r2, [pc, #408]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	6213      	str	r3, [r2, #32]
 800514a:	4b64      	ldr	r3, [pc, #400]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	4a63      	ldr	r2, [pc, #396]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005150:	f023 0304 	bic.w	r3, r3, #4
 8005154:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d015      	beq.n	800518a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515e:	f7fd fdf5 	bl	8002d4c <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005164:	e00a      	b.n	800517c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005166:	f7fd fdf1 	bl	8002d4c <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f241 3288 	movw	r2, #5000	; 0x1388
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e0ab      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517c:	4b57      	ldr	r3, [pc, #348]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0ee      	beq.n	8005166 <HAL_RCC_OscConfig+0x37e>
 8005188:	e014      	b.n	80051b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518a:	f7fd fddf 	bl	8002d4c <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005190:	e00a      	b.n	80051a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005192:	f7fd fddb 	bl	8002d4c <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e095      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a8:	4b4c      	ldr	r3, [pc, #304]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1ee      	bne.n	8005192 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d105      	bne.n	80051c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ba:	4b48      	ldr	r3, [pc, #288]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	4a47      	ldr	r2, [pc, #284]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 80051c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8081 	beq.w	80052d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051d0:	4b42      	ldr	r3, [pc, #264]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f003 030c 	and.w	r3, r3, #12
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d061      	beq.n	80052a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d146      	bne.n	8005272 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e4:	4b3f      	ldr	r3, [pc, #252]	; (80052e4 <HAL_RCC_OscConfig+0x4fc>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ea:	f7fd fdaf 	bl	8002d4c <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f2:	f7fd fdab 	bl	8002d4c <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e067      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005204:	4b35      	ldr	r3, [pc, #212]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f0      	bne.n	80051f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005218:	d108      	bne.n	800522c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800521a:	4b30      	ldr	r3, [pc, #192]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	492d      	ldr	r1, [pc, #180]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005228:	4313      	orrs	r3, r2
 800522a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800522c:	4b2b      	ldr	r3, [pc, #172]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a19      	ldr	r1, [r3, #32]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	430b      	orrs	r3, r1
 800523e:	4927      	ldr	r1, [pc, #156]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005244:	4b27      	ldr	r3, [pc, #156]	; (80052e4 <HAL_RCC_OscConfig+0x4fc>)
 8005246:	2201      	movs	r2, #1
 8005248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524a:	f7fd fd7f 	bl	8002d4c <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005252:	f7fd fd7b 	bl	8002d4c <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e037      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005264:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f0      	beq.n	8005252 <HAL_RCC_OscConfig+0x46a>
 8005270:	e02f      	b.n	80052d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005272:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <HAL_RCC_OscConfig+0x4fc>)
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005278:	f7fd fd68 	bl	8002d4c <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005280:	f7fd fd64 	bl	8002d4c <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e020      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005292:	4b12      	ldr	r3, [pc, #72]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f0      	bne.n	8005280 <HAL_RCC_OscConfig+0x498>
 800529e:	e018      	b.n	80052d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e013      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052ac:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <HAL_RCC_OscConfig+0x4f4>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d106      	bne.n	80052ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d001      	beq.n	80052d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40021000 	.word	0x40021000
 80052e0:	40007000 	.word	0x40007000
 80052e4:	42420060 	.word	0x42420060

080052e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e0d0      	b.n	800549e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052fc:	4b6a      	ldr	r3, [pc, #424]	; (80054a8 <HAL_RCC_ClockConfig+0x1c0>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	429a      	cmp	r2, r3
 8005308:	d910      	bls.n	800532c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800530a:	4b67      	ldr	r3, [pc, #412]	; (80054a8 <HAL_RCC_ClockConfig+0x1c0>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f023 0207 	bic.w	r2, r3, #7
 8005312:	4965      	ldr	r1, [pc, #404]	; (80054a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	4313      	orrs	r3, r2
 8005318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800531a:	4b63      	ldr	r3, [pc, #396]	; (80054a8 <HAL_RCC_ClockConfig+0x1c0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d001      	beq.n	800532c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0b8      	b.n	800549e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d020      	beq.n	800537a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d005      	beq.n	8005350 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005344:	4b59      	ldr	r3, [pc, #356]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	4a58      	ldr	r2, [pc, #352]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 800534a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800534e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b00      	cmp	r3, #0
 800535a:	d005      	beq.n	8005368 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800535c:	4b53      	ldr	r3, [pc, #332]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	4a52      	ldr	r2, [pc, #328]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 8005362:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005366:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005368:	4b50      	ldr	r3, [pc, #320]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	494d      	ldr	r1, [pc, #308]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 8005376:	4313      	orrs	r3, r2
 8005378:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d040      	beq.n	8005408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d107      	bne.n	800539e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538e:	4b47      	ldr	r3, [pc, #284]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d115      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e07f      	b.n	800549e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d107      	bne.n	80053b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a6:	4b41      	ldr	r3, [pc, #260]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d109      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e073      	b.n	800549e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053b6:	4b3d      	ldr	r3, [pc, #244]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e06b      	b.n	800549e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053c6:	4b39      	ldr	r3, [pc, #228]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f023 0203 	bic.w	r2, r3, #3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	4936      	ldr	r1, [pc, #216]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053d8:	f7fd fcb8 	bl	8002d4c <HAL_GetTick>
 80053dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053de:	e00a      	b.n	80053f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e0:	f7fd fcb4 	bl	8002d4c <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e053      	b.n	800549e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f6:	4b2d      	ldr	r3, [pc, #180]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f003 020c 	and.w	r2, r3, #12
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	429a      	cmp	r2, r3
 8005406:	d1eb      	bne.n	80053e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005408:	4b27      	ldr	r3, [pc, #156]	; (80054a8 <HAL_RCC_ClockConfig+0x1c0>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d210      	bcs.n	8005438 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005416:	4b24      	ldr	r3, [pc, #144]	; (80054a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f023 0207 	bic.w	r2, r3, #7
 800541e:	4922      	ldr	r1, [pc, #136]	; (80054a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	4313      	orrs	r3, r2
 8005424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005426:	4b20      	ldr	r3, [pc, #128]	; (80054a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d001      	beq.n	8005438 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e032      	b.n	800549e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d008      	beq.n	8005456 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005444:	4b19      	ldr	r3, [pc, #100]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	4916      	ldr	r1, [pc, #88]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 8005452:	4313      	orrs	r3, r2
 8005454:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005462:	4b12      	ldr	r3, [pc, #72]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	490e      	ldr	r1, [pc, #56]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 8005472:	4313      	orrs	r3, r2
 8005474:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005476:	f000 f821 	bl	80054bc <HAL_RCC_GetSysClockFreq>
 800547a:	4602      	mov	r2, r0
 800547c:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <HAL_RCC_ClockConfig+0x1c4>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	091b      	lsrs	r3, r3, #4
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	490a      	ldr	r1, [pc, #40]	; (80054b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005488:	5ccb      	ldrb	r3, [r1, r3]
 800548a:	fa22 f303 	lsr.w	r3, r2, r3
 800548e:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <HAL_RCC_ClockConfig+0x1cc>)
 8005490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005492:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <HAL_RCC_ClockConfig+0x1d0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f7fd fa94 	bl	80029c4 <HAL_InitTick>

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	40022000 	.word	0x40022000
 80054ac:	40021000 	.word	0x40021000
 80054b0:	0800e69c 	.word	0x0800e69c
 80054b4:	20000010 	.word	0x20000010
 80054b8:	20000014 	.word	0x20000014

080054bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054bc:	b490      	push	{r4, r7}
 80054be:	b08a      	sub	sp, #40	; 0x28
 80054c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80054c2:	4b2a      	ldr	r3, [pc, #168]	; (800556c <HAL_RCC_GetSysClockFreq+0xb0>)
 80054c4:	1d3c      	adds	r4, r7, #4
 80054c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80054cc:	f240 2301 	movw	r3, #513	; 0x201
 80054d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	61fb      	str	r3, [r7, #28]
 80054d6:	2300      	movs	r3, #0
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	2300      	movs	r3, #0
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
 80054de:	2300      	movs	r3, #0
 80054e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80054e6:	4b22      	ldr	r3, [pc, #136]	; (8005570 <HAL_RCC_GetSysClockFreq+0xb4>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f003 030c 	and.w	r3, r3, #12
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d002      	beq.n	80054fc <HAL_RCC_GetSysClockFreq+0x40>
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d003      	beq.n	8005502 <HAL_RCC_GetSysClockFreq+0x46>
 80054fa:	e02d      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054fc:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054fe:	623b      	str	r3, [r7, #32]
      break;
 8005500:	e02d      	b.n	800555e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	0c9b      	lsrs	r3, r3, #18
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800550e:	4413      	add	r3, r2
 8005510:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005514:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d013      	beq.n	8005548 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005520:	4b13      	ldr	r3, [pc, #76]	; (8005570 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	0c5b      	lsrs	r3, r3, #17
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800552e:	4413      	add	r3, r2
 8005530:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005534:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	4a0e      	ldr	r2, [pc, #56]	; (8005574 <HAL_RCC_GetSysClockFreq+0xb8>)
 800553a:	fb02 f203 	mul.w	r2, r2, r3
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	fbb2 f3f3 	udiv	r3, r2, r3
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
 8005546:	e004      	b.n	8005552 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	4a0b      	ldr	r2, [pc, #44]	; (8005578 <HAL_RCC_GetSysClockFreq+0xbc>)
 800554c:	fb02 f303 	mul.w	r3, r2, r3
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	623b      	str	r3, [r7, #32]
      break;
 8005556:	e002      	b.n	800555e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <HAL_RCC_GetSysClockFreq+0xc0>)
 800555a:	623b      	str	r3, [r7, #32]
      break;
 800555c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800555e:	6a3b      	ldr	r3, [r7, #32]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3728      	adds	r7, #40	; 0x28
 8005564:	46bd      	mov	sp, r7
 8005566:	bc90      	pop	{r4, r7}
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	0800e0d4 	.word	0x0800e0d4
 8005570:	40021000 	.word	0x40021000
 8005574:	00f42400 	.word	0x00f42400
 8005578:	003d0900 	.word	0x003d0900
 800557c:	007a1200 	.word	0x007a1200

08005580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005584:	4b02      	ldr	r3, [pc, #8]	; (8005590 <HAL_RCC_GetHCLKFreq+0x10>)
 8005586:	681b      	ldr	r3, [r3, #0]
}
 8005588:	4618      	mov	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr
 8005590:	20000010 	.word	0x20000010

08005594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005598:	f7ff fff2 	bl	8005580 <HAL_RCC_GetHCLKFreq>
 800559c:	4602      	mov	r2, r0
 800559e:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	0a1b      	lsrs	r3, r3, #8
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	4903      	ldr	r1, [pc, #12]	; (80055b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055aa:	5ccb      	ldrb	r3, [r1, r3]
 80055ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40021000 	.word	0x40021000
 80055b8:	0800e6ac 	.word	0x0800e6ac

080055bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055c0:	f7ff ffde 	bl	8005580 <HAL_RCC_GetHCLKFreq>
 80055c4:	4602      	mov	r2, r0
 80055c6:	4b05      	ldr	r3, [pc, #20]	; (80055dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	0adb      	lsrs	r3, r3, #11
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	4903      	ldr	r1, [pc, #12]	; (80055e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055d2:	5ccb      	ldrb	r3, [r1, r3]
 80055d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055d8:	4618      	mov	r0, r3
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40021000 	.word	0x40021000
 80055e0:	0800e6ac 	.word	0x0800e6ac

080055e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	220f      	movs	r2, #15
 80055f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055f4:	4b11      	ldr	r3, [pc, #68]	; (800563c <HAL_RCC_GetClockConfig+0x58>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f003 0203 	and.w	r2, r3, #3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005600:	4b0e      	ldr	r3, [pc, #56]	; (800563c <HAL_RCC_GetClockConfig+0x58>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800560c:	4b0b      	ldr	r3, [pc, #44]	; (800563c <HAL_RCC_GetClockConfig+0x58>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005618:	4b08      	ldr	r3, [pc, #32]	; (800563c <HAL_RCC_GetClockConfig+0x58>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	08db      	lsrs	r3, r3, #3
 800561e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005626:	4b06      	ldr	r3, [pc, #24]	; (8005640 <HAL_RCC_GetClockConfig+0x5c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0207 	and.w	r2, r3, #7
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr
 800563c:	40021000 	.word	0x40021000
 8005640:	40022000 	.word	0x40022000

08005644 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <RCC_Delay+0x34>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a0a      	ldr	r2, [pc, #40]	; (800567c <RCC_Delay+0x38>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	0a5b      	lsrs	r3, r3, #9
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	fb02 f303 	mul.w	r3, r2, r3
 800565e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005660:	bf00      	nop
  }
  while (Delay --);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1e5a      	subs	r2, r3, #1
 8005666:	60fa      	str	r2, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f9      	bne.n	8005660 <RCC_Delay+0x1c>
}
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	bc80      	pop	{r7}
 8005676:	4770      	bx	lr
 8005678:	20000010 	.word	0x20000010
 800567c:	10624dd3 	.word	0x10624dd3

08005680 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	d07d      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800569c:	2300      	movs	r3, #0
 800569e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a0:	4b4f      	ldr	r3, [pc, #316]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10d      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ac:	4b4c      	ldr	r3, [pc, #304]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	4a4b      	ldr	r2, [pc, #300]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b6:	61d3      	str	r3, [r2, #28]
 80056b8:	4b49      	ldr	r3, [pc, #292]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056c4:	2301      	movs	r3, #1
 80056c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c8:	4b46      	ldr	r3, [pc, #280]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d118      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056d4:	4b43      	ldr	r3, [pc, #268]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a42      	ldr	r2, [pc, #264]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056e0:	f7fd fb34 	bl	8002d4c <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e6:	e008      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e8:	f7fd fb30 	bl	8002d4c <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b64      	cmp	r3, #100	; 0x64
 80056f4:	d901      	bls.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e06d      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056fa:	4b3a      	ldr	r3, [pc, #232]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0f0      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005706:	4b36      	ldr	r3, [pc, #216]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d02e      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	429a      	cmp	r2, r3
 8005722:	d027      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005724:	4b2e      	ldr	r3, [pc, #184]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800572e:	4b2e      	ldr	r3, [pc, #184]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005730:	2201      	movs	r2, #1
 8005732:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005734:	4b2c      	ldr	r3, [pc, #176]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005736:	2200      	movs	r2, #0
 8005738:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800573a:	4a29      	ldr	r2, [pc, #164]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d014      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574a:	f7fd faff 	bl	8002d4c <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005750:	e00a      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005752:	f7fd fafb 	bl	8002d4c <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005760:	4293      	cmp	r3, r2
 8005762:	d901      	bls.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e036      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005768:	4b1d      	ldr	r3, [pc, #116]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0ee      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005774:	4b1a      	ldr	r3, [pc, #104]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4917      	ldr	r1, [pc, #92]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005782:	4313      	orrs	r3, r2
 8005784:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005786:	7dfb      	ldrb	r3, [r7, #23]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d105      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800578c:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005796:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057a4:	4b0e      	ldr	r3, [pc, #56]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	490b      	ldr	r1, [pc, #44]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057c2:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	4904      	ldr	r1, [pc, #16]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	40021000 	.word	0x40021000
 80057e4:	40007000 	.word	0x40007000
 80057e8:	42420440 	.word	0x42420440

080057ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e076      	b.n	80058ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	2b00      	cmp	r3, #0
 8005804:	d108      	bne.n	8005818 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800580e:	d009      	beq.n	8005824 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	61da      	str	r2, [r3, #28]
 8005816:	e005      	b.n	8005824 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fd f83c 	bl	80028bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800585a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005894:	431a      	orrs	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a8:	ea42 0103 	orr.w	r1, r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	0c1a      	lsrs	r2, r3, #16
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f002 0204 	and.w	r2, r2, #4
 80058ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	69da      	ldr	r2, [r3, #28]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	4613      	mov	r3, r2
 8005902:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800590e:	2b01      	cmp	r3, #1
 8005910:	d101      	bne.n	8005916 <HAL_SPI_Transmit+0x22>
 8005912:	2302      	movs	r3, #2
 8005914:	e126      	b.n	8005b64 <HAL_SPI_Transmit+0x270>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800591e:	f7fd fa15 	bl	8002d4c <HAL_GetTick>
 8005922:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005924:	88fb      	ldrh	r3, [r7, #6]
 8005926:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d002      	beq.n	800593a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005934:	2302      	movs	r3, #2
 8005936:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005938:	e10b      	b.n	8005b52 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <HAL_SPI_Transmit+0x52>
 8005940:	88fb      	ldrh	r3, [r7, #6]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d102      	bne.n	800594c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	77fb      	strb	r3, [r7, #31]
    goto error;
 800594a:	e102      	b.n	8005b52 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2203      	movs	r2, #3
 8005950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	88fa      	ldrh	r2, [r7, #6]
 8005964:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	88fa      	ldrh	r2, [r7, #6]
 800596a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005992:	d10f      	bne.n	80059b4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059be:	2b40      	cmp	r3, #64	; 0x40
 80059c0:	d007      	beq.n	80059d2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059da:	d14b      	bne.n	8005a74 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <HAL_SPI_Transmit+0xf6>
 80059e4:	8afb      	ldrh	r3, [r7, #22]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d13e      	bne.n	8005a68 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	881a      	ldrh	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	1c9a      	adds	r2, r3, #2
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a0e:	e02b      	b.n	8005a68 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d112      	bne.n	8005a44 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a22:	881a      	ldrh	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	1c9a      	adds	r2, r3, #2
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a42:	e011      	b.n	8005a68 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a44:	f7fd f982 	bl	8002d4c <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d803      	bhi.n	8005a5c <HAL_SPI_Transmit+0x168>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5a:	d102      	bne.n	8005a62 <HAL_SPI_Transmit+0x16e>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d102      	bne.n	8005a68 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a66:	e074      	b.n	8005b52 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1ce      	bne.n	8005a10 <HAL_SPI_Transmit+0x11c>
 8005a72:	e04c      	b.n	8005b0e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <HAL_SPI_Transmit+0x18e>
 8005a7c:	8afb      	ldrh	r3, [r7, #22]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d140      	bne.n	8005b04 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	7812      	ldrb	r2, [r2, #0]
 8005a8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005aa8:	e02c      	b.n	8005b04 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d113      	bne.n	8005ae0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	7812      	ldrb	r2, [r2, #0]
 8005ac4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ade:	e011      	b.n	8005b04 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae0:	f7fd f934 	bl	8002d4c <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d803      	bhi.n	8005af8 <HAL_SPI_Transmit+0x204>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af6:	d102      	bne.n	8005afe <HAL_SPI_Transmit+0x20a>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b02:	e026      	b.n	8005b52 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1cd      	bne.n	8005aaa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 f8b2 	bl	8005c7c <SPI_EndRxTxTransaction>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2220      	movs	r2, #32
 8005b22:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	77fb      	strb	r3, [r7, #31]
 8005b4e:	e000      	b.n	8005b52 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005b50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b62:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3720      	adds	r7, #32
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b7c:	f7fd f8e6 	bl	8002d4c <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	1a9b      	subs	r3, r3, r2
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	4413      	add	r3, r2
 8005b8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b8c:	f7fd f8de 	bl	8002d4c <HAL_GetTick>
 8005b90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b92:	4b39      	ldr	r3, [pc, #228]	; (8005c78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	015b      	lsls	r3, r3, #5
 8005b98:	0d1b      	lsrs	r3, r3, #20
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ba0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ba2:	e054      	b.n	8005c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005baa:	d050      	beq.n	8005c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bac:	f7fd f8ce 	bl	8002d4c <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d902      	bls.n	8005bc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d13d      	bne.n	8005c3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bda:	d111      	bne.n	8005c00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005be4:	d004      	beq.n	8005bf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bee:	d107      	bne.n	8005c00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c08:	d10f      	bne.n	8005c2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e017      	b.n	8005c6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4013      	ands	r3, r2
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	bf0c      	ite	eq
 8005c5e:	2301      	moveq	r3, #1
 8005c60:	2300      	movne	r3, #0
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	79fb      	ldrb	r3, [r7, #7]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d19b      	bne.n	8005ba4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3720      	adds	r7, #32
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000010 	.word	0x20000010

08005c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2180      	movs	r1, #128	; 0x80
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f7ff ff6a 	bl	8005b6c <SPI_WaitFlagStateUntilTimeout>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d007      	beq.n	8005cae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca2:	f043 0220 	orr.w	r2, r3, #32
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e000      	b.n	8005cb0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e041      	b.n	8005d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f839 	bl	8005d56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	f000 f9b4 	bl	8006064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr

08005d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d001      	beq.n	8005d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e03a      	b.n	8005df6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a18      	ldr	r2, [pc, #96]	; (8005e00 <HAL_TIM_Base_Start_IT+0x98>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00e      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x58>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005daa:	d009      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x58>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a14      	ldr	r2, [pc, #80]	; (8005e04 <HAL_TIM_Base_Start_IT+0x9c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d004      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x58>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <HAL_TIM_Base_Start_IT+0xa0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d111      	bne.n	8005de4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b06      	cmp	r3, #6
 8005dd0:	d010      	beq.n	8005df4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0201 	orr.w	r2, r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de2:	e007      	b.n	8005df4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bc80      	pop	{r7}
 8005dfe:	4770      	bx	lr
 8005e00:	40012c00 	.word	0x40012c00
 8005e04:	40000400 	.word	0x40000400
 8005e08:	40000800 	.word	0x40000800

08005e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d122      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d11b      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0202 	mvn.w	r2, #2
 8005e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f8ed 	bl	800602e <HAL_TIM_IC_CaptureCallback>
 8005e54:	e005      	b.n	8005e62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f8e0 	bl	800601c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f8ef 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d122      	bne.n	8005ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d11b      	bne.n	8005ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f06f 0204 	mvn.w	r2, #4
 8005e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f8c3 	bl	800602e <HAL_TIM_IC_CaptureCallback>
 8005ea8:	e005      	b.n	8005eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f8b6 	bl	800601c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f8c5 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d122      	bne.n	8005f10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d11b      	bne.n	8005f10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0208 	mvn.w	r2, #8
 8005ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2204      	movs	r2, #4
 8005ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f899 	bl	800602e <HAL_TIM_IC_CaptureCallback>
 8005efc:	e005      	b.n	8005f0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f88c 	bl	800601c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f89b 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f003 0310 	and.w	r3, r3, #16
 8005f1a:	2b10      	cmp	r3, #16
 8005f1c:	d122      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b10      	cmp	r3, #16
 8005f2a:	d11b      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0210 	mvn.w	r2, #16
 8005f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2208      	movs	r2, #8
 8005f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f86f 	bl	800602e <HAL_TIM_IC_CaptureCallback>
 8005f50:	e005      	b.n	8005f5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f862 	bl	800601c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f871 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d10e      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d107      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f06f 0201 	mvn.w	r2, #1
 8005f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fa fef6 	bl	8000d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9a:	2b80      	cmp	r3, #128	; 0x80
 8005f9c:	d10e      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa8:	2b80      	cmp	r3, #128	; 0x80
 8005faa:	d107      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f8bf 	bl	800613a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc6:	2b40      	cmp	r3, #64	; 0x40
 8005fc8:	d10e      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d107      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f835 	bl	8006052 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d10e      	bne.n	8006014 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b20      	cmp	r3, #32
 8006002:	d107      	bne.n	8006014 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0220 	mvn.w	r2, #32
 800600c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f88a 	bl	8006128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006014:	bf00      	nop
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	bc80      	pop	{r7}
 800602c:	4770      	bx	lr

0800602e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	bc80      	pop	{r7}
 800603e:	4770      	bx	lr

08006040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	bc80      	pop	{r7}
 8006050:	4770      	bx	lr

08006052 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr

08006064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a29      	ldr	r2, [pc, #164]	; (800611c <TIM_Base_SetConfig+0xb8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d00b      	beq.n	8006094 <TIM_Base_SetConfig+0x30>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006082:	d007      	beq.n	8006094 <TIM_Base_SetConfig+0x30>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a26      	ldr	r2, [pc, #152]	; (8006120 <TIM_Base_SetConfig+0xbc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_Base_SetConfig+0x30>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a25      	ldr	r2, [pc, #148]	; (8006124 <TIM_Base_SetConfig+0xc0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d108      	bne.n	80060a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a1c      	ldr	r2, [pc, #112]	; (800611c <TIM_Base_SetConfig+0xb8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00b      	beq.n	80060c6 <TIM_Base_SetConfig+0x62>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b4:	d007      	beq.n	80060c6 <TIM_Base_SetConfig+0x62>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a19      	ldr	r2, [pc, #100]	; (8006120 <TIM_Base_SetConfig+0xbc>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d003      	beq.n	80060c6 <TIM_Base_SetConfig+0x62>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a18      	ldr	r2, [pc, #96]	; (8006124 <TIM_Base_SetConfig+0xc0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d108      	bne.n	80060d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a07      	ldr	r2, [pc, #28]	; (800611c <TIM_Base_SetConfig+0xb8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d103      	bne.n	800610c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	615a      	str	r2, [r3, #20]
}
 8006112:	bf00      	nop
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	bc80      	pop	{r7}
 800611a:	4770      	bx	lr
 800611c:	40012c00 	.word	0x40012c00
 8006120:	40000400 	.word	0x40000400
 8006124:	40000800 	.word	0x40000800

08006128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr

0800613a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr

0800614c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e03f      	b.n	80061de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d106      	bne.n	8006178 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fc fce6 	bl	8002b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2224      	movs	r2, #36	; 0x24
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800618e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fba9 	bl	80068e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695a      	ldr	r2, [r3, #20]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	4613      	mov	r3, r2
 80061f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	d11d      	bne.n	800623c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <HAL_UART_Receive_IT+0x26>
 8006206:	88fb      	ldrh	r3, [r7, #6]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e016      	b.n	800623e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_UART_Receive_IT+0x38>
 800621a:	2302      	movs	r3, #2
 800621c:	e00f      	b.n	800623e <HAL_UART_Receive_IT+0x58>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800622c:	88fb      	ldrh	r3, [r7, #6]
 800622e:	461a      	mov	r2, r3
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 f9cf 	bl	80065d6 <UART_Start_Receive_IT>
 8006238:	4603      	mov	r3, r0
 800623a:	e000      	b.n	800623e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800623c:	2302      	movs	r3, #2
  }
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08a      	sub	sp, #40	; 0x28
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006268:	2300      	movs	r3, #0
 800626a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800626c:	2300      	movs	r3, #0
 800626e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	f003 030f 	and.w	r3, r3, #15
 8006276:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10d      	bne.n	800629a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	f003 0320 	and.w	r3, r3, #32
 8006284:	2b00      	cmp	r3, #0
 8006286:	d008      	beq.n	800629a <HAL_UART_IRQHandler+0x52>
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fa7f 	bl	8006796 <UART_Receive_IT>
      return;
 8006298:	e17b      	b.n	8006592 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 80b1 	beq.w	8006404 <HAL_UART_IRQHandler+0x1bc>
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d105      	bne.n	80062b8 <HAL_UART_IRQHandler+0x70>
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 80a6 	beq.w	8006404 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <HAL_UART_IRQHandler+0x90>
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d005      	beq.n	80062d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d0:	f043 0201 	orr.w	r2, r3, #1
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <HAL_UART_IRQHandler+0xb0>
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d005      	beq.n	80062f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f0:	f043 0202 	orr.w	r2, r3, #2
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <HAL_UART_IRQHandler+0xd0>
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d005      	beq.n	8006318 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006310:	f043 0204 	orr.w	r2, r3, #4
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	f003 0308 	and.w	r3, r3, #8
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00f      	beq.n	8006342 <HAL_UART_IRQHandler+0xfa>
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <HAL_UART_IRQHandler+0xee>
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f043 0208 	orr.w	r2, r3, #8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 811e 	beq.w	8006588 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b00      	cmp	r3, #0
 8006354:	d007      	beq.n	8006366 <HAL_UART_IRQHandler+0x11e>
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fa18 	bl	8006796 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	bf14      	ite	ne
 8006374:	2301      	movne	r3, #1
 8006376:	2300      	moveq	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	f003 0308 	and.w	r3, r3, #8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d102      	bne.n	800638e <HAL_UART_IRQHandler+0x146>
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d031      	beq.n	80063f2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f95a 	bl	8006648 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d023      	beq.n	80063ea <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695a      	ldr	r2, [r3, #20]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063b0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d013      	beq.n	80063e2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	4a76      	ldr	r2, [pc, #472]	; (8006598 <HAL_UART_IRQHandler+0x350>)
 80063c0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fc fde4 	bl	8002f94 <HAL_DMA_Abort_IT>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d016      	beq.n	8006400 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063dc:	4610      	mov	r0, r2
 80063de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	e00e      	b.n	8006400 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f8e3 	bl	80065ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e8:	e00a      	b.n	8006400 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f8df 	bl	80065ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f0:	e006      	b.n	8006400 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f8db 	bl	80065ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063fe:	e0c3      	b.n	8006588 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006400:	bf00      	nop
    return;
 8006402:	e0c1      	b.n	8006588 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006408:	2b01      	cmp	r3, #1
 800640a:	f040 80a1 	bne.w	8006550 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	f003 0310 	and.w	r3, r3, #16
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 809b 	beq.w	8006550 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8095 	beq.w	8006550 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006426:	2300      	movs	r3, #0
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006446:	2b00      	cmp	r3, #0
 8006448:	d04e      	beq.n	80064e8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006454:	8a3b      	ldrh	r3, [r7, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8098 	beq.w	800658c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006460:	8a3a      	ldrh	r2, [r7, #16]
 8006462:	429a      	cmp	r2, r3
 8006464:	f080 8092 	bcs.w	800658c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	8a3a      	ldrh	r2, [r7, #16]
 800646c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	2b20      	cmp	r3, #32
 8006476:	d02b      	beq.n	80064d0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006486:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695a      	ldr	r2, [r3, #20]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0201 	bic.w	r2, r2, #1
 8006496:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695a      	ldr	r2, [r3, #20]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0210 	bic.w	r2, r2, #16
 80064c4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fc fd27 	bl	8002f1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064d8:	b29b      	uxth	r3, r3
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	b29b      	uxth	r3, r3
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f86d 	bl	80065c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80064e6:	e051      	b.n	800658c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d047      	beq.n	8006590 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006500:	8a7b      	ldrh	r3, [r7, #18]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d044      	beq.n	8006590 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68da      	ldr	r2, [r3, #12]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006514:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695a      	ldr	r2, [r3, #20]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0201 	bic.w	r2, r2, #1
 8006524:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0210 	bic.w	r2, r2, #16
 8006542:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006544:	8a7b      	ldrh	r3, [r7, #18]
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f839 	bl	80065c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800654e:	e01f      	b.n	8006590 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006556:	2b00      	cmp	r3, #0
 8006558:	d008      	beq.n	800656c <HAL_UART_IRQHandler+0x324>
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f8af 	bl	80066c8 <UART_Transmit_IT>
    return;
 800656a:	e012      	b.n	8006592 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00d      	beq.n	8006592 <HAL_UART_IRQHandler+0x34a>
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657c:	2b00      	cmp	r3, #0
 800657e:	d008      	beq.n	8006592 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f8f0 	bl	8006766 <UART_EndTransmit_IT>
    return;
 8006586:	e004      	b.n	8006592 <HAL_UART_IRQHandler+0x34a>
    return;
 8006588:	bf00      	nop
 800658a:	e002      	b.n	8006592 <HAL_UART_IRQHandler+0x34a>
      return;
 800658c:	bf00      	nop
 800658e:	e000      	b.n	8006592 <HAL_UART_IRQHandler+0x34a>
      return;
 8006590:	bf00      	nop
  }
}
 8006592:	3728      	adds	r7, #40	; 0x28
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	080066a1 	.word	0x080066a1

0800659c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr

080065ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bc80      	pop	{r7}
 80065be:	4770      	bx	lr

080065c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bc80      	pop	{r7}
 80065d4:	4770      	bx	lr

080065d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b085      	sub	sp, #20
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	4613      	mov	r3, r2
 80065e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	88fa      	ldrh	r2, [r7, #6]
 80065ee:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	88fa      	ldrh	r2, [r7, #6]
 80065f4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2222      	movs	r2, #34	; 0x22
 8006600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800661a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	695a      	ldr	r2, [r3, #20]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0201 	orr.w	r2, r2, #1
 800662a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0220 	orr.w	r2, r2, #32
 800663a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr

08006648 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800665e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695a      	ldr	r2, [r3, #20]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0201 	bic.w	r2, r2, #1
 800666e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	2b01      	cmp	r3, #1
 8006676:	d107      	bne.n	8006688 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 0210 	bic.w	r2, r2, #16
 8006686:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	bc80      	pop	{r7}
 800669e:	4770      	bx	lr

080066a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f7ff ff77 	bl	80065ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066c0:	bf00      	nop
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b21      	cmp	r3, #33	; 0x21
 80066da:	d13e      	bne.n	800675a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e4:	d114      	bne.n	8006710 <UART_Transmit_IT+0x48>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d110      	bne.n	8006710 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006702:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	1c9a      	adds	r2, r3, #2
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	621a      	str	r2, [r3, #32]
 800670e:	e008      	b.n	8006722 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	1c59      	adds	r1, r3, #1
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6211      	str	r1, [r2, #32]
 800671a:	781a      	ldrb	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006726:	b29b      	uxth	r3, r3
 8006728:	3b01      	subs	r3, #1
 800672a:	b29b      	uxth	r3, r3
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	4619      	mov	r1, r3
 8006730:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10f      	bne.n	8006756 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006744:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68da      	ldr	r2, [r3, #12]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006754:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	e000      	b.n	800675c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800675a:	2302      	movs	r3, #2
  }
}
 800675c:	4618      	mov	r0, r3
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	bc80      	pop	{r7}
 8006764:	4770      	bx	lr

08006766 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b082      	sub	sp, #8
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800677c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff ff08 	bl	800659c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b086      	sub	sp, #24
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b22      	cmp	r3, #34	; 0x22
 80067a8:	f040 8099 	bne.w	80068de <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b4:	d117      	bne.n	80067e6 <UART_Receive_IT+0x50>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d113      	bne.n	80067e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067de:	1c9a      	adds	r2, r3, #2
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	629a      	str	r2, [r3, #40]	; 0x28
 80067e4:	e026      	b.n	8006834 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ea:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80067ec:	2300      	movs	r3, #0
 80067ee:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f8:	d007      	beq.n	800680a <UART_Receive_IT+0x74>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <UART_Receive_IT+0x82>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d106      	bne.n	8006818 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	b2da      	uxtb	r2, r3
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	e008      	b.n	800682a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	b2db      	uxtb	r3, r3
 8006820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006824:	b2da      	uxtb	r2, r3
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006838:	b29b      	uxth	r3, r3
 800683a:	3b01      	subs	r3, #1
 800683c:	b29b      	uxth	r3, r3
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	4619      	mov	r1, r3
 8006842:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006844:	2b00      	cmp	r3, #0
 8006846:	d148      	bne.n	80068da <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0220 	bic.w	r2, r2, #32
 8006856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006866:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	695a      	ldr	r2, [r3, #20]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 0201 	bic.w	r2, r2, #1
 8006876:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2220      	movs	r2, #32
 800687c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006884:	2b01      	cmp	r3, #1
 8006886:	d123      	bne.n	80068d0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0210 	bic.w	r2, r2, #16
 800689c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0310 	and.w	r3, r3, #16
 80068a8:	2b10      	cmp	r3, #16
 80068aa:	d10a      	bne.n	80068c2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7ff fe79 	bl	80065c0 <HAL_UARTEx_RxEventCallback>
 80068ce:	e002      	b.n	80068d6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7fa f891 	bl	80009f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	e002      	b.n	80068e0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	e000      	b.n	80068e0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80068de:	2302      	movs	r3, #2
  }
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689a      	ldr	r2, [r3, #8]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006922:	f023 030c 	bic.w	r3, r3, #12
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	6812      	ldr	r2, [r2, #0]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	430b      	orrs	r3, r1
 800692e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a2c      	ldr	r2, [pc, #176]	; (80069fc <UART_SetConfig+0x114>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d103      	bne.n	8006958 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006950:	f7fe fe34 	bl	80055bc <HAL_RCC_GetPCLK2Freq>
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	e002      	b.n	800695e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006958:	f7fe fe1c 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
 800695c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4613      	mov	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	009a      	lsls	r2, r3, #2
 8006968:	441a      	add	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	fbb2 f3f3 	udiv	r3, r2, r3
 8006974:	4a22      	ldr	r2, [pc, #136]	; (8006a00 <UART_SetConfig+0x118>)
 8006976:	fba2 2303 	umull	r2, r3, r2, r3
 800697a:	095b      	lsrs	r3, r3, #5
 800697c:	0119      	lsls	r1, r3, #4
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4613      	mov	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	009a      	lsls	r2, r3, #2
 8006988:	441a      	add	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	fbb2 f2f3 	udiv	r2, r2, r3
 8006994:	4b1a      	ldr	r3, [pc, #104]	; (8006a00 <UART_SetConfig+0x118>)
 8006996:	fba3 0302 	umull	r0, r3, r3, r2
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	2064      	movs	r0, #100	; 0x64
 800699e:	fb00 f303 	mul.w	r3, r0, r3
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	3332      	adds	r3, #50	; 0x32
 80069a8:	4a15      	ldr	r2, [pc, #84]	; (8006a00 <UART_SetConfig+0x118>)
 80069aa:	fba2 2303 	umull	r2, r3, r2, r3
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069b4:	4419      	add	r1, r3
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4613      	mov	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	009a      	lsls	r2, r3, #2
 80069c0:	441a      	add	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80069cc:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <UART_SetConfig+0x118>)
 80069ce:	fba3 0302 	umull	r0, r3, r3, r2
 80069d2:	095b      	lsrs	r3, r3, #5
 80069d4:	2064      	movs	r0, #100	; 0x64
 80069d6:	fb00 f303 	mul.w	r3, r0, r3
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	011b      	lsls	r3, r3, #4
 80069de:	3332      	adds	r3, #50	; 0x32
 80069e0:	4a07      	ldr	r2, [pc, #28]	; (8006a00 <UART_SetConfig+0x118>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	f003 020f 	and.w	r2, r3, #15
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	440a      	add	r2, r1
 80069f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80069f4:	bf00      	nop
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	40013800 	.word	0x40013800
 8006a00:	51eb851f 	.word	0x51eb851f

08006a04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a04:	b084      	sub	sp, #16
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	f107 0014 	add.w	r0, r7, #20
 8006a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	b004      	add	sp, #16
 8006a22:	4770      	bx	lr

08006a24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a34:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006a38:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr

08006a50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a58:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006a5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	43db      	mvns	r3, r3
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	4013      	ands	r3, r2
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr

08006a84 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bc80      	pop	{r7}
 8006a9a:	4770      	bx	lr

08006a9c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	f107 0014 	add.w	r0, r7, #20
 8006aaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bc80      	pop	{r7}
 8006ad8:	b004      	add	sp, #16
 8006ada:	4770      	bx	lr

08006adc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b09b      	sub	sp, #108	; 0x6c
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b02:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	78db      	ldrb	r3, [r3, #3]
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d81f      	bhi.n	8006b4e <USB_ActivateEndpoint+0x72>
 8006b0e:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <USB_ActivateEndpoint+0x38>)
 8006b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b14:	08006b25 	.word	0x08006b25
 8006b18:	08006b41 	.word	0x08006b41
 8006b1c:	08006b57 	.word	0x08006b57
 8006b20:	08006b33 	.word	0x08006b33
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006b24:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b2c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006b30:	e012      	b.n	8006b58 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006b32:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b36:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006b3a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006b3e:	e00b      	b.n	8006b58 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006b40:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b48:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006b4c:	e004      	b.n	8006b58 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006b54:	e000      	b.n	8006b58 <USB_ActivateEndpoint+0x7c>
      break;
 8006b56:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	441a      	add	r2, r3
 8006ba8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	7b1b      	ldrb	r3, [r3, #12]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f040 8149 	bne.w	8006e5c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	785b      	ldrb	r3, [r3, #1]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 8084 	beq.w	8006cdc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	461a      	mov	r2, r3
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	4413      	add	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	011a      	lsls	r2, r3, #4
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	88db      	ldrh	r3, [r3, #6]
 8006bfc:	085b      	lsrs	r3, r3, #1
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	81fb      	strh	r3, [r7, #14]
 8006c16:	89fb      	ldrh	r3, [r7, #14]
 8006c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d01b      	beq.n	8006c58 <USB_ActivateEndpoint+0x17c>
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c36:	81bb      	strh	r3, [r7, #12]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	441a      	add	r2, r3
 8006c42:	89bb      	ldrh	r3, [r7, #12]
 8006c44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	78db      	ldrb	r3, [r3, #3]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d020      	beq.n	8006ca2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c76:	813b      	strh	r3, [r7, #8]
 8006c78:	893b      	ldrh	r3, [r7, #8]
 8006c7a:	f083 0320 	eor.w	r3, r3, #32
 8006c7e:	813b      	strh	r3, [r7, #8]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	441a      	add	r2, r3
 8006c8a:	893b      	ldrh	r3, [r7, #8]
 8006c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	8013      	strh	r3, [r2, #0]
 8006ca0:	e27f      	b.n	80071a2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb8:	817b      	strh	r3, [r7, #10]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	441a      	add	r2, r3
 8006cc4:	897b      	ldrh	r3, [r7, #10]
 8006cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	8013      	strh	r3, [r2, #0]
 8006cda:	e262      	b.n	80071a2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	4413      	add	r3, r2
 8006cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	011a      	lsls	r2, r3, #4
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	88db      	ldrh	r3, [r3, #6]
 8006d04:	085b      	lsrs	r3, r3, #1
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	627b      	str	r3, [r7, #36]	; 0x24
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	4413      	add	r3, r2
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	011a      	lsls	r2, r3, #4
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d32:	623b      	str	r3, [r7, #32]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d112      	bne.n	8006d62 <USB_ActivateEndpoint+0x286>
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	801a      	strh	r2, [r3, #0]
 8006d60:	e02f      	b.n	8006dc2 <USB_ActivateEndpoint+0x2e6>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	2b3e      	cmp	r3, #62	; 0x3e
 8006d68:	d813      	bhi.n	8006d92 <USB_ActivateEndpoint+0x2b6>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	085b      	lsrs	r3, r3, #1
 8006d70:	663b      	str	r3, [r7, #96]	; 0x60
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <USB_ActivateEndpoint+0x2a8>
 8006d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d80:	3301      	adds	r3, #1
 8006d82:	663b      	str	r3, [r7, #96]	; 0x60
 8006d84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	029b      	lsls	r3, r3, #10
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	801a      	strh	r2, [r3, #0]
 8006d90:	e017      	b.n	8006dc2 <USB_ActivateEndpoint+0x2e6>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	663b      	str	r3, [r7, #96]	; 0x60
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 031f 	and.w	r3, r3, #31
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d102      	bne.n	8006dac <USB_ActivateEndpoint+0x2d0>
 8006da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006da8:	3b01      	subs	r3, #1
 8006daa:	663b      	str	r3, [r7, #96]	; 0x60
 8006dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	029b      	lsls	r3, r3, #10
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	83fb      	strh	r3, [r7, #30]
 8006dd0:	8bfb      	ldrh	r3, [r7, #30]
 8006dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d01b      	beq.n	8006e12 <USB_ActivateEndpoint+0x336>
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df0:	83bb      	strh	r3, [r7, #28]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	441a      	add	r2, r3
 8006dfc:	8bbb      	ldrh	r3, [r7, #28]
 8006dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e28:	837b      	strh	r3, [r7, #26]
 8006e2a:	8b7b      	ldrh	r3, [r7, #26]
 8006e2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e30:	837b      	strh	r3, [r7, #26]
 8006e32:	8b7b      	ldrh	r3, [r7, #26]
 8006e34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e38:	837b      	strh	r3, [r7, #26]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	441a      	add	r2, r3
 8006e44:	8b7b      	ldrh	r3, [r7, #26]
 8006e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	8013      	strh	r3, [r2, #0]
 8006e5a:	e1a2      	b.n	80071a2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e72:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	441a      	add	r2, r3
 8006e80:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e8c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ea8:	4413      	add	r3, r2
 8006eaa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	011a      	lsls	r2, r3, #4
 8006eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eba:	657b      	str	r3, [r7, #84]	; 0x54
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	891b      	ldrh	r3, [r3, #8]
 8006ec0:	085b      	lsrs	r3, r3, #1
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	653b      	str	r3, [r7, #80]	; 0x50
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	461a      	mov	r2, r3
 8006eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006edc:	4413      	add	r3, r2
 8006ede:	653b      	str	r3, [r7, #80]	; 0x50
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	011a      	lsls	r2, r3, #4
 8006ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	895b      	ldrh	r3, [r3, #10]
 8006ef4:	085b      	lsrs	r3, r3, #1
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006efe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f040 8091 	bne.w	800702c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006f18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d01b      	beq.n	8006f5a <USB_ActivateEndpoint+0x47e>
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f38:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	441a      	add	r2, r3
 8006f44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	873b      	strh	r3, [r7, #56]	; 0x38
 8006f68:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d01b      	beq.n	8006faa <USB_ActivateEndpoint+0x4ce>
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f88:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	441a      	add	r2, r3
 8006f94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006fc2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006fc4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fc8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006fca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006fcc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fd0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	441a      	add	r2, r3
 8006fdc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007008:	867b      	strh	r3, [r7, #50]	; 0x32
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	441a      	add	r2, r3
 8007014:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800701a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800701e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007026:	b29b      	uxth	r3, r3
 8007028:	8013      	strh	r3, [r2, #0]
 800702a:	e0ba      	b.n	80071a2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800703c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01d      	beq.n	8007084 <USB_ActivateEndpoint+0x5a8>
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800705a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	441a      	add	r2, r3
 800706c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800707c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007080:	b29b      	uxth	r3, r3
 8007082:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007094:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01d      	beq.n	80070dc <USB_ActivateEndpoint+0x600>
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	441a      	add	r2, r3
 80070c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80070c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070d8:	b29b      	uxth	r3, r3
 80070da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	78db      	ldrb	r3, [r3, #3]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d024      	beq.n	800712e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80070fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007102:	f083 0320 	eor.w	r3, r3, #32
 8007106:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	441a      	add	r2, r3
 8007114:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800711c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007128:	b29b      	uxth	r3, r3
 800712a:	8013      	strh	r3, [r2, #0]
 800712c:	e01d      	b.n	800716a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007144:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	441a      	add	r2, r3
 8007152:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800715a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800715e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007166:	b29b      	uxth	r3, r3
 8007168:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	b29b      	uxth	r3, r3
 8007178:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800717c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007180:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	441a      	add	r2, r3
 800718c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800718e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800719a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719e:	b29b      	uxth	r3, r3
 80071a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80071a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	376c      	adds	r7, #108	; 0x6c
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bc80      	pop	{r7}
 80071ae:	4770      	bx	lr

080071b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b08d      	sub	sp, #52	; 0x34
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	7b1b      	ldrb	r3, [r3, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f040 808e 	bne.w	80072e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	785b      	ldrb	r3, [r3, #1]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d044      	beq.n	8007256 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	81bb      	strh	r3, [r7, #12]
 80071da:	89bb      	ldrh	r3, [r7, #12]
 80071dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d01b      	beq.n	800721c <USB_DeactivateEndpoint+0x6c>
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071fa:	817b      	strh	r3, [r7, #10]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	441a      	add	r2, r3
 8007206:	897b      	ldrh	r3, [r7, #10]
 8007208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800720c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007214:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007218:	b29b      	uxth	r3, r3
 800721a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	b29b      	uxth	r3, r3
 800722a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800722e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007232:	813b      	strh	r3, [r7, #8]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	441a      	add	r2, r3
 800723e:	893b      	ldrh	r3, [r7, #8]
 8007240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800724c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007250:	b29b      	uxth	r3, r3
 8007252:	8013      	strh	r3, [r2, #0]
 8007254:	e192      	b.n	800757c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	827b      	strh	r3, [r7, #18]
 8007264:	8a7b      	ldrh	r3, [r7, #18]
 8007266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d01b      	beq.n	80072a6 <USB_DeactivateEndpoint+0xf6>
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007284:	823b      	strh	r3, [r7, #16]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	441a      	add	r2, r3
 8007290:	8a3b      	ldrh	r3, [r7, #16]
 8007292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800729e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072bc:	81fb      	strh	r3, [r7, #14]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	441a      	add	r2, r3
 80072c8:	89fb      	ldrh	r3, [r7, #14]
 80072ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072da:	b29b      	uxth	r3, r3
 80072dc:	8013      	strh	r3, [r2, #0]
 80072de:	e14d      	b.n	800757c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	785b      	ldrb	r3, [r3, #1]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f040 80a5 	bne.w	8007434 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	843b      	strh	r3, [r7, #32]
 80072f8:	8c3b      	ldrh	r3, [r7, #32]
 80072fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d01b      	beq.n	800733a <USB_DeactivateEndpoint+0x18a>
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	b29b      	uxth	r3, r3
 8007310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007318:	83fb      	strh	r3, [r7, #30]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	441a      	add	r2, r3
 8007324:	8bfb      	ldrh	r3, [r7, #30]
 8007326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800732a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800732e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007336:	b29b      	uxth	r3, r3
 8007338:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	83bb      	strh	r3, [r7, #28]
 8007348:	8bbb      	ldrh	r3, [r7, #28]
 800734a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734e:	2b00      	cmp	r3, #0
 8007350:	d01b      	beq.n	800738a <USB_DeactivateEndpoint+0x1da>
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007368:	837b      	strh	r3, [r7, #26]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	441a      	add	r2, r3
 8007374:	8b7b      	ldrh	r3, [r7, #26]
 8007376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800737a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800737e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007382:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007386:	b29b      	uxth	r3, r3
 8007388:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a0:	833b      	strh	r3, [r7, #24]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	441a      	add	r2, r3
 80073ac:	8b3b      	ldrh	r3, [r7, #24]
 80073ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073be:	b29b      	uxth	r3, r3
 80073c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d8:	82fb      	strh	r3, [r7, #22]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	441a      	add	r2, r3
 80073e4:	8afb      	ldrh	r3, [r7, #22]
 80073e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	b29b      	uxth	r3, r3
 8007408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800740c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007410:	82bb      	strh	r3, [r7, #20]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	441a      	add	r2, r3
 800741c:	8abb      	ldrh	r3, [r7, #20]
 800741e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800742a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742e:	b29b      	uxth	r3, r3
 8007430:	8013      	strh	r3, [r2, #0]
 8007432:	e0a3      	b.n	800757c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007442:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01b      	beq.n	8007484 <USB_DeactivateEndpoint+0x2d4>
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	b29b      	uxth	r3, r3
 800745a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800745e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007462:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	441a      	add	r2, r3
 800746e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800747c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007480:	b29b      	uxth	r3, r3
 8007482:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007492:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01b      	beq.n	80074d4 <USB_DeactivateEndpoint+0x324>
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	441a      	add	r2, r3
 80074be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80074c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	441a      	add	r2, r3
 80074f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007500:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007508:	b29b      	uxth	r3, r3
 800750a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800751e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007522:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	441a      	add	r2, r3
 800752e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800753c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007540:	b29b      	uxth	r3, r3
 8007542:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	b29b      	uxth	r3, r3
 8007552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755a:	847b      	strh	r3, [r7, #34]	; 0x22
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	441a      	add	r2, r3
 8007566:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800756c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007578:	b29b      	uxth	r3, r3
 800757a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3734      	adds	r7, #52	; 0x34
 8007582:	46bd      	mov	sp, r7
 8007584:	bc80      	pop	{r7}
 8007586:	4770      	bx	lr

08007588 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b0cc      	sub	sp, #304	; 0x130
 800758c:	af00      	add	r7, sp, #0
 800758e:	1d3b      	adds	r3, r7, #4
 8007590:	6018      	str	r0, [r3, #0]
 8007592:	463b      	mov	r3, r7
 8007594:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007596:	463b      	mov	r3, r7
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	785b      	ldrb	r3, [r3, #1]
 800759c:	2b01      	cmp	r3, #1
 800759e:	f040 872e 	bne.w	80083fe <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80075a2:	463b      	mov	r3, r7
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	699a      	ldr	r2, [r3, #24]
 80075a8:	463b      	mov	r3, r7
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d905      	bls.n	80075be <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80075b2:	463b      	mov	r3, r7
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80075bc:	e004      	b.n	80075c8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80075be:	463b      	mov	r3, r7
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80075c8:	463b      	mov	r3, r7
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	7b1b      	ldrb	r3, [r3, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d134      	bne.n	800763c <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80075d2:	463b      	mov	r3, r7
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6959      	ldr	r1, [r3, #20]
 80075d8:	463b      	mov	r3, r7
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	88da      	ldrh	r2, [r3, #6]
 80075de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	1d38      	adds	r0, r7, #4
 80075e6:	6800      	ldr	r0, [r0, #0]
 80075e8:	f001 fc03 	bl	8008df2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075ec:	f107 0310 	add.w	r3, r7, #16
 80075f0:	1d3a      	adds	r2, r7, #4
 80075f2:	6812      	ldr	r2, [r2, #0]
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	1d3b      	adds	r3, r7, #4
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075fe:	b29b      	uxth	r3, r3
 8007600:	4619      	mov	r1, r3
 8007602:	f107 0310 	add.w	r3, r7, #16
 8007606:	f107 0210 	add.w	r2, r7, #16
 800760a:	6812      	ldr	r2, [r2, #0]
 800760c:	440a      	add	r2, r1
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	463b      	mov	r3, r7
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	011a      	lsls	r2, r3, #4
 8007618:	f107 0310 	add.w	r3, r7, #16
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4413      	add	r3, r2
 8007620:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007624:	f107 030c 	add.w	r3, r7, #12
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800762e:	b29a      	uxth	r2, r3
 8007630:	f107 030c 	add.w	r3, r7, #12
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	801a      	strh	r2, [r3, #0]
 8007638:	f000 beac 	b.w	8008394 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800763c:	463b      	mov	r3, r7
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	78db      	ldrb	r3, [r3, #3]
 8007642:	2b02      	cmp	r3, #2
 8007644:	f040 838c 	bne.w	8007d60 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007648:	463b      	mov	r3, r7
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6a1a      	ldr	r2, [r3, #32]
 800764e:	463b      	mov	r3, r7
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	429a      	cmp	r2, r3
 8007656:	f240 8330 	bls.w	8007cba <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800765a:	1d3b      	adds	r3, r7, #4
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	463b      	mov	r3, r7
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	b29b      	uxth	r3, r3
 800766c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007674:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007678:	1d3b      	adds	r3, r7, #4
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	463b      	mov	r3, r7
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	441a      	add	r2, r3
 8007686:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800768a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800768e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007692:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800769a:	b29b      	uxth	r3, r3
 800769c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800769e:	463b      	mov	r3, r7
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6a1a      	ldr	r2, [r3, #32]
 80076a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a8:	1ad2      	subs	r2, r2, r3
 80076aa:	463b      	mov	r3, r7
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076b0:	1d3b      	adds	r3, r7, #4
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	463b      	mov	r3, r7
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 819e 	beq.w	8007a08 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076d0:	1d3a      	adds	r2, r7, #4
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	463b      	mov	r3, r7
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d17a      	bne.n	80077d6 <USB_EPStartXfer+0x24e>
 80076e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076e4:	1d3a      	adds	r2, r7, #4
 80076e6:	6812      	ldr	r2, [r2, #0]
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	1d3b      	adds	r3, r7, #4
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	4619      	mov	r1, r3
 80076f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80076fe:	6812      	ldr	r2, [r2, #0]
 8007700:	440a      	add	r2, r1
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	463b      	mov	r3, r7
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	011a      	lsls	r2, r3, #4
 800770c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4413      	add	r3, r2
 8007714:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007722:	2b00      	cmp	r3, #0
 8007724:	d11a      	bne.n	800775c <USB_EPStartXfer+0x1d4>
 8007726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	b29b      	uxth	r3, r3
 8007730:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007734:	b29a      	uxth	r2, r3
 8007736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	801a      	strh	r2, [r3, #0]
 800773e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800774c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007750:	b29a      	uxth	r2, r3
 8007752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	801a      	strh	r2, [r3, #0]
 800775a:	e062      	b.n	8007822 <USB_EPStartXfer+0x29a>
 800775c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007760:	2b3e      	cmp	r3, #62	; 0x3e
 8007762:	d819      	bhi.n	8007798 <USB_EPStartXfer+0x210>
 8007764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007768:	085b      	lsrs	r3, r3, #1
 800776a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800776e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d004      	beq.n	8007784 <USB_EPStartXfer+0x1fc>
 800777a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800777e:	3301      	adds	r3, #1
 8007780:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007784:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007788:	b29b      	uxth	r3, r3
 800778a:	029b      	lsls	r3, r3, #10
 800778c:	b29a      	uxth	r2, r3
 800778e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	801a      	strh	r2, [r3, #0]
 8007796:	e044      	b.n	8007822 <USB_EPStartXfer+0x29a>
 8007798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800779c:	095b      	lsrs	r3, r3, #5
 800779e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80077a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077a6:	f003 031f 	and.w	r3, r3, #31
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d104      	bne.n	80077b8 <USB_EPStartXfer+0x230>
 80077ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077b2:	3b01      	subs	r3, #1
 80077b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80077b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077bc:	b29b      	uxth	r3, r3
 80077be:	029b      	lsls	r3, r3, #10
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	801a      	strh	r2, [r3, #0]
 80077d4:	e025      	b.n	8007822 <USB_EPStartXfer+0x29a>
 80077d6:	463b      	mov	r3, r7
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	785b      	ldrb	r3, [r3, #1]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d120      	bne.n	8007822 <USB_EPStartXfer+0x29a>
 80077e0:	1d3b      	adds	r3, r7, #4
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	4619      	mov	r1, r3
 80077ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80077f4:	6812      	ldr	r2, [r2, #0]
 80077f6:	440a      	add	r2, r1
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	463b      	mov	r3, r7
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	011a      	lsls	r2, r3, #4
 8007802:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4413      	add	r3, r2
 800780a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800780e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007818:	b29a      	uxth	r2, r3
 800781a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007822:	463b      	mov	r3, r7
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	895b      	ldrh	r3, [r3, #10]
 8007828:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800782c:	463b      	mov	r3, r7
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6959      	ldr	r1, [r3, #20]
 8007832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007836:	b29b      	uxth	r3, r3
 8007838:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800783c:	1d38      	adds	r0, r7, #4
 800783e:	6800      	ldr	r0, [r0, #0]
 8007840:	f001 fad7 	bl	8008df2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007844:	463b      	mov	r3, r7
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	695a      	ldr	r2, [r3, #20]
 800784a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800784e:	441a      	add	r2, r3
 8007850:	463b      	mov	r3, r7
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007856:	463b      	mov	r3, r7
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6a1a      	ldr	r2, [r3, #32]
 800785c:	463b      	mov	r3, r7
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	429a      	cmp	r2, r3
 8007864:	d909      	bls.n	800787a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8007866:	463b      	mov	r3, r7
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6a1a      	ldr	r2, [r3, #32]
 800786c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007870:	1ad2      	subs	r2, r2, r3
 8007872:	463b      	mov	r3, r7
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	621a      	str	r2, [r3, #32]
 8007878:	e008      	b.n	800788c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800787a:	463b      	mov	r3, r7
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007884:	463b      	mov	r3, r7
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2200      	movs	r2, #0
 800788a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800788c:	463b      	mov	r3, r7
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	785b      	ldrb	r3, [r3, #1]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d17a      	bne.n	800798c <USB_EPStartXfer+0x404>
 8007896:	f107 0318 	add.w	r3, r7, #24
 800789a:	1d3a      	adds	r2, r7, #4
 800789c:	6812      	ldr	r2, [r2, #0]
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	1d3b      	adds	r3, r7, #4
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	4619      	mov	r1, r3
 80078ac:	f107 0318 	add.w	r3, r7, #24
 80078b0:	f107 0218 	add.w	r2, r7, #24
 80078b4:	6812      	ldr	r2, [r2, #0]
 80078b6:	440a      	add	r2, r1
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	463b      	mov	r3, r7
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	011a      	lsls	r2, r3, #4
 80078c2:	f107 0318 	add.w	r3, r7, #24
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4413      	add	r3, r2
 80078ca:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80078ce:	f107 0314 	add.w	r3, r7, #20
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d11a      	bne.n	8007912 <USB_EPStartXfer+0x38a>
 80078dc:	f107 0314 	add.w	r3, r7, #20
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	f107 0314 	add.w	r3, r7, #20
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	801a      	strh	r2, [r3, #0]
 80078f4:	f107 0314 	add.w	r3, r7, #20
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007906:	b29a      	uxth	r2, r3
 8007908:	f107 0314 	add.w	r3, r7, #20
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	801a      	strh	r2, [r3, #0]
 8007910:	e067      	b.n	80079e2 <USB_EPStartXfer+0x45a>
 8007912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007916:	2b3e      	cmp	r3, #62	; 0x3e
 8007918:	d819      	bhi.n	800794e <USB_EPStartXfer+0x3c6>
 800791a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800791e:	085b      	lsrs	r3, r3, #1
 8007920:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	d004      	beq.n	800793a <USB_EPStartXfer+0x3b2>
 8007930:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007934:	3301      	adds	r3, #1
 8007936:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800793a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800793e:	b29b      	uxth	r3, r3
 8007940:	029b      	lsls	r3, r3, #10
 8007942:	b29a      	uxth	r2, r3
 8007944:	f107 0314 	add.w	r3, r7, #20
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	801a      	strh	r2, [r3, #0]
 800794c:	e049      	b.n	80079e2 <USB_EPStartXfer+0x45a>
 800794e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007952:	095b      	lsrs	r3, r3, #5
 8007954:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800795c:	f003 031f 	and.w	r3, r3, #31
 8007960:	2b00      	cmp	r3, #0
 8007962:	d104      	bne.n	800796e <USB_EPStartXfer+0x3e6>
 8007964:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007968:	3b01      	subs	r3, #1
 800796a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800796e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007972:	b29b      	uxth	r3, r3
 8007974:	029b      	lsls	r3, r3, #10
 8007976:	b29b      	uxth	r3, r3
 8007978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800797c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007980:	b29a      	uxth	r2, r3
 8007982:	f107 0314 	add.w	r3, r7, #20
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	801a      	strh	r2, [r3, #0]
 800798a:	e02a      	b.n	80079e2 <USB_EPStartXfer+0x45a>
 800798c:	463b      	mov	r3, r7
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	785b      	ldrb	r3, [r3, #1]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d125      	bne.n	80079e2 <USB_EPStartXfer+0x45a>
 8007996:	f107 0320 	add.w	r3, r7, #32
 800799a:	1d3a      	adds	r2, r7, #4
 800799c:	6812      	ldr	r2, [r2, #0]
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	1d3b      	adds	r3, r7, #4
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	4619      	mov	r1, r3
 80079ac:	f107 0320 	add.w	r3, r7, #32
 80079b0:	f107 0220 	add.w	r2, r7, #32
 80079b4:	6812      	ldr	r2, [r2, #0]
 80079b6:	440a      	add	r2, r1
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	463b      	mov	r3, r7
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	011a      	lsls	r2, r3, #4
 80079c2:	f107 0320 	add.w	r3, r7, #32
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4413      	add	r3, r2
 80079ca:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80079ce:	f107 031c 	add.w	r3, r7, #28
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079d8:	b29a      	uxth	r2, r3
 80079da:	f107 031c 	add.w	r3, r7, #28
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80079e2:	463b      	mov	r3, r7
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	891b      	ldrh	r3, [r3, #8]
 80079e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079ec:	463b      	mov	r3, r7
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6959      	ldr	r1, [r3, #20]
 80079f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80079fc:	1d38      	adds	r0, r7, #4
 80079fe:	6800      	ldr	r0, [r0, #0]
 8007a00:	f001 f9f7 	bl	8008df2 <USB_WritePMA>
 8007a04:	f000 bcc6 	b.w	8008394 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a08:	463b      	mov	r3, r7
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d164      	bne.n	8007adc <USB_EPStartXfer+0x554>
 8007a12:	1d3b      	adds	r3, r7, #4
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a18:	1d3b      	adds	r3, r7, #4
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a26:	4413      	add	r3, r2
 8007a28:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a2a:	463b      	mov	r3, r7
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	011a      	lsls	r2, r3, #4
 8007a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a34:	4413      	add	r3, r2
 8007a36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d112      	bne.n	8007a6a <USB_EPStartXfer+0x4e2>
 8007a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a52:	801a      	strh	r2, [r3, #0]
 8007a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a56:	881b      	ldrh	r3, [r3, #0]
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a66:	801a      	strh	r2, [r3, #0]
 8007a68:	e057      	b.n	8007b1a <USB_EPStartXfer+0x592>
 8007a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a6e:	2b3e      	cmp	r3, #62	; 0x3e
 8007a70:	d817      	bhi.n	8007aa2 <USB_EPStartXfer+0x51a>
 8007a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a76:	085b      	lsrs	r3, r3, #1
 8007a78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d004      	beq.n	8007a92 <USB_EPStartXfer+0x50a>
 8007a88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	029b      	lsls	r3, r3, #10
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a9e:	801a      	strh	r2, [r3, #0]
 8007aa0:	e03b      	b.n	8007b1a <USB_EPStartXfer+0x592>
 8007aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa6:	095b      	lsrs	r3, r3, #5
 8007aa8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab0:	f003 031f 	and.w	r3, r3, #31
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d104      	bne.n	8007ac2 <USB_EPStartXfer+0x53a>
 8007ab8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007abc:	3b01      	subs	r3, #1
 8007abe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007ac2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	029b      	lsls	r3, r3, #10
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ad8:	801a      	strh	r2, [r3, #0]
 8007ada:	e01e      	b.n	8007b1a <USB_EPStartXfer+0x592>
 8007adc:	463b      	mov	r3, r7
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	785b      	ldrb	r3, [r3, #1]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d119      	bne.n	8007b1a <USB_EPStartXfer+0x592>
 8007ae6:	1d3b      	adds	r3, r7, #4
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	653b      	str	r3, [r7, #80]	; 0x50
 8007aec:	1d3b      	adds	r3, r7, #4
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	461a      	mov	r2, r3
 8007af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007afa:	4413      	add	r3, r2
 8007afc:	653b      	str	r3, [r7, #80]	; 0x50
 8007afe:	463b      	mov	r3, r7
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	011a      	lsls	r2, r3, #4
 8007b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b08:	4413      	add	r3, r2
 8007b0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b1a:	463b      	mov	r3, r7
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	891b      	ldrh	r3, [r3, #8]
 8007b20:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b24:	463b      	mov	r3, r7
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6959      	ldr	r1, [r3, #20]
 8007b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b34:	1d38      	adds	r0, r7, #4
 8007b36:	6800      	ldr	r0, [r0, #0]
 8007b38:	f001 f95b 	bl	8008df2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007b3c:	463b      	mov	r3, r7
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	695a      	ldr	r2, [r3, #20]
 8007b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b46:	441a      	add	r2, r3
 8007b48:	463b      	mov	r3, r7
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007b4e:	463b      	mov	r3, r7
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6a1a      	ldr	r2, [r3, #32]
 8007b54:	463b      	mov	r3, r7
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d909      	bls.n	8007b72 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8007b5e:	463b      	mov	r3, r7
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6a1a      	ldr	r2, [r3, #32]
 8007b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b68:	1ad2      	subs	r2, r2, r3
 8007b6a:	463b      	mov	r3, r7
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	621a      	str	r2, [r3, #32]
 8007b70:	e008      	b.n	8007b84 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8007b72:	463b      	mov	r3, r7
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6a1b      	ldr	r3, [r3, #32]
 8007b78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007b7c:	463b      	mov	r3, r7
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2200      	movs	r2, #0
 8007b82:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b84:	1d3b      	adds	r3, r7, #4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	643b      	str	r3, [r7, #64]	; 0x40
 8007b8a:	463b      	mov	r3, r7
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	785b      	ldrb	r3, [r3, #1]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d164      	bne.n	8007c5e <USB_EPStartXfer+0x6d6>
 8007b94:	1d3b      	adds	r3, r7, #4
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b9a:	1d3b      	adds	r3, r7, #4
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba8:	4413      	add	r3, r2
 8007baa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bac:	463b      	mov	r3, r7
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	011a      	lsls	r2, r3, #4
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d112      	bne.n	8007bec <USB_EPStartXfer+0x664>
 8007bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd4:	801a      	strh	r2, [r3, #0]
 8007bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be8:	801a      	strh	r2, [r3, #0]
 8007bea:	e054      	b.n	8007c96 <USB_EPStartXfer+0x70e>
 8007bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf0:	2b3e      	cmp	r3, #62	; 0x3e
 8007bf2:	d817      	bhi.n	8007c24 <USB_EPStartXfer+0x69c>
 8007bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf8:	085b      	lsrs	r3, r3, #1
 8007bfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d004      	beq.n	8007c14 <USB_EPStartXfer+0x68c>
 8007c0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007c0e:	3301      	adds	r3, #1
 8007c10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007c14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	029b      	lsls	r3, r3, #10
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c20:	801a      	strh	r2, [r3, #0]
 8007c22:	e038      	b.n	8007c96 <USB_EPStartXfer+0x70e>
 8007c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c28:	095b      	lsrs	r3, r3, #5
 8007c2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c32:	f003 031f 	and.w	r3, r3, #31
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d104      	bne.n	8007c44 <USB_EPStartXfer+0x6bc>
 8007c3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007c44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	029b      	lsls	r3, r3, #10
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5a:	801a      	strh	r2, [r3, #0]
 8007c5c:	e01b      	b.n	8007c96 <USB_EPStartXfer+0x70e>
 8007c5e:	463b      	mov	r3, r7
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	785b      	ldrb	r3, [r3, #1]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d116      	bne.n	8007c96 <USB_EPStartXfer+0x70e>
 8007c68:	1d3b      	adds	r3, r7, #4
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	461a      	mov	r2, r3
 8007c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c76:	4413      	add	r3, r2
 8007c78:	643b      	str	r3, [r7, #64]	; 0x40
 8007c7a:	463b      	mov	r3, r7
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	011a      	lsls	r2, r3, #4
 8007c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c84:	4413      	add	r3, r2
 8007c86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c96:	463b      	mov	r3, r7
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	895b      	ldrh	r3, [r3, #10]
 8007c9c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ca0:	463b      	mov	r3, r7
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6959      	ldr	r1, [r3, #20]
 8007ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007cb0:	1d38      	adds	r0, r7, #4
 8007cb2:	6800      	ldr	r0, [r0, #0]
 8007cb4:	f001 f89d 	bl	8008df2 <USB_WritePMA>
 8007cb8:	e36c      	b.n	8008394 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007cba:	463b      	mov	r3, r7
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007cc4:	1d3b      	adds	r3, r7, #4
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	463b      	mov	r3, r7
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cde:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007ce2:	1d3b      	adds	r3, r7, #4
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	463b      	mov	r3, r7
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	441a      	add	r2, r3
 8007cf0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007d08:	1d3b      	adds	r3, r7, #4
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d0e:	1d3b      	adds	r3, r7, #4
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d1c:	4413      	add	r3, r2
 8007d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d20:	463b      	mov	r3, r7
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	011a      	lsls	r2, r3, #4
 8007d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d30:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d3c:	463b      	mov	r3, r7
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	891b      	ldrh	r3, [r3, #8]
 8007d42:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d46:	463b      	mov	r3, r7
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6959      	ldr	r1, [r3, #20]
 8007d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d56:	1d38      	adds	r0, r7, #4
 8007d58:	6800      	ldr	r0, [r0, #0]
 8007d5a:	f001 f84a 	bl	8008df2 <USB_WritePMA>
 8007d5e:	e319      	b.n	8008394 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007d60:	1d3b      	adds	r3, r7, #4
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	463b      	mov	r3, r7
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4413      	add	r3, r2
 8007d6e:	881b      	ldrh	r3, [r3, #0]
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d7a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007d7e:	1d3b      	adds	r3, r7, #4
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	463b      	mov	r3, r7
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	441a      	add	r2, r3
 8007d8c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d98:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007da4:	463b      	mov	r3, r7
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6a1a      	ldr	r2, [r3, #32]
 8007daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dae:	1ad2      	subs	r2, r2, r3
 8007db0:	463b      	mov	r3, r7
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007db6:	1d3b      	adds	r3, r7, #4
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	463b      	mov	r3, r7
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 8162 	beq.w	8008096 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007dd2:	1d3b      	adds	r3, r7, #4
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007dda:	463b      	mov	r3, r7
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	785b      	ldrb	r3, [r3, #1]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d164      	bne.n	8007eae <USB_EPStartXfer+0x926>
 8007de4:	1d3b      	adds	r3, r7, #4
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dea:	1d3b      	adds	r3, r7, #4
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	461a      	mov	r2, r3
 8007df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007df8:	4413      	add	r3, r2
 8007dfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dfc:	463b      	mov	r3, r7
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	011a      	lsls	r2, r3, #4
 8007e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e06:	4413      	add	r3, r2
 8007e08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e0c:	677b      	str	r3, [r7, #116]	; 0x74
 8007e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d112      	bne.n	8007e3c <USB_EPStartXfer+0x8b4>
 8007e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e24:	801a      	strh	r2, [r3, #0]
 8007e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e38:	801a      	strh	r2, [r3, #0]
 8007e3a:	e057      	b.n	8007eec <USB_EPStartXfer+0x964>
 8007e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e40:	2b3e      	cmp	r3, #62	; 0x3e
 8007e42:	d817      	bhi.n	8007e74 <USB_EPStartXfer+0x8ec>
 8007e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e48:	085b      	lsrs	r3, r3, #1
 8007e4a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d004      	beq.n	8007e64 <USB_EPStartXfer+0x8dc>
 8007e5a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e5e:	3301      	adds	r3, #1
 8007e60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007e64:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	029b      	lsls	r3, r3, #10
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e70:	801a      	strh	r2, [r3, #0]
 8007e72:	e03b      	b.n	8007eec <USB_EPStartXfer+0x964>
 8007e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e78:	095b      	lsrs	r3, r3, #5
 8007e7a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e82:	f003 031f 	and.w	r3, r3, #31
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d104      	bne.n	8007e94 <USB_EPStartXfer+0x90c>
 8007e8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007e94:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	029b      	lsls	r3, r3, #10
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007eaa:	801a      	strh	r2, [r3, #0]
 8007eac:	e01e      	b.n	8007eec <USB_EPStartXfer+0x964>
 8007eae:	463b      	mov	r3, r7
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	785b      	ldrb	r3, [r3, #1]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d119      	bne.n	8007eec <USB_EPStartXfer+0x964>
 8007eb8:	1d3b      	adds	r3, r7, #4
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ec8:	4413      	add	r3, r2
 8007eca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ece:	463b      	mov	r3, r7
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	011a      	lsls	r2, r3, #4
 8007ed6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007eda:	4413      	add	r3, r2
 8007edc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ee0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007eea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007eec:	463b      	mov	r3, r7
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	895b      	ldrh	r3, [r3, #10]
 8007ef2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ef6:	463b      	mov	r3, r7
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6959      	ldr	r1, [r3, #20]
 8007efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f06:	1d38      	adds	r0, r7, #4
 8007f08:	6800      	ldr	r0, [r0, #0]
 8007f0a:	f000 ff72 	bl	8008df2 <USB_WritePMA>
          ep->xfer_buff += len;
 8007f0e:	463b      	mov	r3, r7
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	695a      	ldr	r2, [r3, #20]
 8007f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f18:	441a      	add	r2, r3
 8007f1a:	463b      	mov	r3, r7
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007f20:	463b      	mov	r3, r7
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6a1a      	ldr	r2, [r3, #32]
 8007f26:	463b      	mov	r3, r7
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d909      	bls.n	8007f44 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8007f30:	463b      	mov	r3, r7
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6a1a      	ldr	r2, [r3, #32]
 8007f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f3a:	1ad2      	subs	r2, r2, r3
 8007f3c:	463b      	mov	r3, r7
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	621a      	str	r2, [r3, #32]
 8007f42:	e008      	b.n	8007f56 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8007f44:	463b      	mov	r3, r7
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007f4e:	463b      	mov	r3, r7
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2200      	movs	r2, #0
 8007f54:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 821a 	beq.w	8008394 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f60:	463b      	mov	r3, r7
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	785b      	ldrb	r3, [r3, #1]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d164      	bne.n	8008034 <USB_EPStartXfer+0xaac>
 8007f6a:	1d3b      	adds	r3, r7, #4
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f70:	1d3b      	adds	r3, r7, #4
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f7e:	4413      	add	r3, r2
 8007f80:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f82:	463b      	mov	r3, r7
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	011a      	lsls	r2, r3, #4
 8007f8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f92:	667b      	str	r3, [r7, #100]	; 0x64
 8007f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d112      	bne.n	8007fc2 <USB_EPStartXfer+0xa3a>
 8007f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007faa:	801a      	strh	r2, [r3, #0]
 8007fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fbe:	801a      	strh	r2, [r3, #0]
 8007fc0:	e057      	b.n	8008072 <USB_EPStartXfer+0xaea>
 8007fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc6:	2b3e      	cmp	r3, #62	; 0x3e
 8007fc8:	d817      	bhi.n	8007ffa <USB_EPStartXfer+0xa72>
 8007fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fce:	085b      	lsrs	r3, r3, #1
 8007fd0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d004      	beq.n	8007fea <USB_EPStartXfer+0xa62>
 8007fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	029b      	lsls	r3, r3, #10
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ff6:	801a      	strh	r2, [r3, #0]
 8007ff8:	e03b      	b.n	8008072 <USB_EPStartXfer+0xaea>
 8007ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ffe:	095b      	lsrs	r3, r3, #5
 8008000:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008008:	f003 031f 	and.w	r3, r3, #31
 800800c:	2b00      	cmp	r3, #0
 800800e:	d104      	bne.n	800801a <USB_EPStartXfer+0xa92>
 8008010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008014:	3b01      	subs	r3, #1
 8008016:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800801a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800801e:	b29b      	uxth	r3, r3
 8008020:	029b      	lsls	r3, r3, #10
 8008022:	b29b      	uxth	r3, r3
 8008024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800802c:	b29a      	uxth	r2, r3
 800802e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	e01e      	b.n	8008072 <USB_EPStartXfer+0xaea>
 8008034:	463b      	mov	r3, r7
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	785b      	ldrb	r3, [r3, #1]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d119      	bne.n	8008072 <USB_EPStartXfer+0xaea>
 800803e:	1d3b      	adds	r3, r7, #4
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	673b      	str	r3, [r7, #112]	; 0x70
 8008044:	1d3b      	adds	r3, r7, #4
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800804c:	b29b      	uxth	r3, r3
 800804e:	461a      	mov	r2, r3
 8008050:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008052:	4413      	add	r3, r2
 8008054:	673b      	str	r3, [r7, #112]	; 0x70
 8008056:	463b      	mov	r3, r7
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	011a      	lsls	r2, r3, #4
 800805e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008060:	4413      	add	r3, r2
 8008062:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800806c:	b29a      	uxth	r2, r3
 800806e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008070:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008072:	463b      	mov	r3, r7
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	891b      	ldrh	r3, [r3, #8]
 8008078:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800807c:	463b      	mov	r3, r7
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6959      	ldr	r1, [r3, #20]
 8008082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008086:	b29b      	uxth	r3, r3
 8008088:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800808c:	1d38      	adds	r0, r7, #4
 800808e:	6800      	ldr	r0, [r0, #0]
 8008090:	f000 feaf 	bl	8008df2 <USB_WritePMA>
 8008094:	e17e      	b.n	8008394 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008096:	463b      	mov	r3, r7
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	785b      	ldrb	r3, [r3, #1]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d16f      	bne.n	8008180 <USB_EPStartXfer+0xbf8>
 80080a0:	1d3b      	adds	r3, r7, #4
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80080a8:	1d3b      	adds	r3, r7, #4
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080b8:	4413      	add	r3, r2
 80080ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80080be:	463b      	mov	r3, r7
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	011a      	lsls	r2, r3, #4
 80080c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080ca:	4413      	add	r3, r2
 80080cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d116      	bne.n	800810a <USB_EPStartXfer+0xb82>
 80080dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080ee:	801a      	strh	r2, [r3, #0]
 80080f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008100:	b29a      	uxth	r2, r3
 8008102:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008106:	801a      	strh	r2, [r3, #0]
 8008108:	e05f      	b.n	80081ca <USB_EPStartXfer+0xc42>
 800810a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800810e:	2b3e      	cmp	r3, #62	; 0x3e
 8008110:	d818      	bhi.n	8008144 <USB_EPStartXfer+0xbbc>
 8008112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008116:	085b      	lsrs	r3, r3, #1
 8008118:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800811c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	d004      	beq.n	8008132 <USB_EPStartXfer+0xbaa>
 8008128:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800812c:	3301      	adds	r3, #1
 800812e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008132:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008136:	b29b      	uxth	r3, r3
 8008138:	029b      	lsls	r3, r3, #10
 800813a:	b29a      	uxth	r2, r3
 800813c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	e042      	b.n	80081ca <USB_EPStartXfer+0xc42>
 8008144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008148:	095b      	lsrs	r3, r3, #5
 800814a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800814e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008152:	f003 031f 	and.w	r3, r3, #31
 8008156:	2b00      	cmp	r3, #0
 8008158:	d104      	bne.n	8008164 <USB_EPStartXfer+0xbdc>
 800815a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800815e:	3b01      	subs	r3, #1
 8008160:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008164:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008168:	b29b      	uxth	r3, r3
 800816a:	029b      	lsls	r3, r3, #10
 800816c:	b29b      	uxth	r3, r3
 800816e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008176:	b29a      	uxth	r2, r3
 8008178:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800817c:	801a      	strh	r2, [r3, #0]
 800817e:	e024      	b.n	80081ca <USB_EPStartXfer+0xc42>
 8008180:	463b      	mov	r3, r7
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	785b      	ldrb	r3, [r3, #1]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d11f      	bne.n	80081ca <USB_EPStartXfer+0xc42>
 800818a:	1d3b      	adds	r3, r7, #4
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008192:	1d3b      	adds	r3, r7, #4
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800819a:	b29b      	uxth	r3, r3
 800819c:	461a      	mov	r2, r3
 800819e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80081a2:	4413      	add	r3, r2
 80081a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80081a8:	463b      	mov	r3, r7
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	011a      	lsls	r2, r3, #4
 80081b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80081b4:	4413      	add	r3, r2
 80081b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80081be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80081ca:	463b      	mov	r3, r7
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	891b      	ldrh	r3, [r3, #8]
 80081d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081d4:	463b      	mov	r3, r7
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6959      	ldr	r1, [r3, #20]
 80081da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081de:	b29b      	uxth	r3, r3
 80081e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80081e4:	1d38      	adds	r0, r7, #4
 80081e6:	6800      	ldr	r0, [r0, #0]
 80081e8:	f000 fe03 	bl	8008df2 <USB_WritePMA>
          ep->xfer_buff += len;
 80081ec:	463b      	mov	r3, r7
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	695a      	ldr	r2, [r3, #20]
 80081f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081f6:	441a      	add	r2, r3
 80081f8:	463b      	mov	r3, r7
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80081fe:	463b      	mov	r3, r7
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6a1a      	ldr	r2, [r3, #32]
 8008204:	463b      	mov	r3, r7
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	429a      	cmp	r2, r3
 800820c:	d909      	bls.n	8008222 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800820e:	463b      	mov	r3, r7
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6a1a      	ldr	r2, [r3, #32]
 8008214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008218:	1ad2      	subs	r2, r2, r3
 800821a:	463b      	mov	r3, r7
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	621a      	str	r2, [r3, #32]
 8008220:	e008      	b.n	8008234 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8008222:	463b      	mov	r3, r7
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800822c:	463b      	mov	r3, r7
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2200      	movs	r2, #0
 8008232:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 80ab 	beq.w	8008394 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800823e:	1d3b      	adds	r3, r7, #4
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008246:	463b      	mov	r3, r7
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	785b      	ldrb	r3, [r3, #1]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d16f      	bne.n	8008330 <USB_EPStartXfer+0xda8>
 8008250:	1d3b      	adds	r3, r7, #4
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008258:	1d3b      	adds	r3, r7, #4
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008260:	b29b      	uxth	r3, r3
 8008262:	461a      	mov	r2, r3
 8008264:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008268:	4413      	add	r3, r2
 800826a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800826e:	463b      	mov	r3, r7
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	011a      	lsls	r2, r3, #4
 8008276:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800827a:	4413      	add	r3, r2
 800827c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008288:	2b00      	cmp	r3, #0
 800828a:	d116      	bne.n	80082ba <USB_EPStartXfer+0xd32>
 800828c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	b29b      	uxth	r3, r3
 8008294:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008298:	b29a      	uxth	r2, r3
 800829a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800829e:	801a      	strh	r2, [r3, #0]
 80082a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082b6:	801a      	strh	r2, [r3, #0]
 80082b8:	e05b      	b.n	8008372 <USB_EPStartXfer+0xdea>
 80082ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082be:	2b3e      	cmp	r3, #62	; 0x3e
 80082c0:	d818      	bhi.n	80082f4 <USB_EPStartXfer+0xd6c>
 80082c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c6:	085b      	lsrs	r3, r3, #1
 80082c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80082cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d004      	beq.n	80082e2 <USB_EPStartXfer+0xd5a>
 80082d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082dc:	3301      	adds	r3, #1
 80082de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80082e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	029b      	lsls	r3, r3, #10
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082f0:	801a      	strh	r2, [r3, #0]
 80082f2:	e03e      	b.n	8008372 <USB_EPStartXfer+0xdea>
 80082f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f8:	095b      	lsrs	r3, r3, #5
 80082fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80082fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008302:	f003 031f 	and.w	r3, r3, #31
 8008306:	2b00      	cmp	r3, #0
 8008308:	d104      	bne.n	8008314 <USB_EPStartXfer+0xd8c>
 800830a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800830e:	3b01      	subs	r3, #1
 8008310:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008318:	b29b      	uxth	r3, r3
 800831a:	029b      	lsls	r3, r3, #10
 800831c:	b29b      	uxth	r3, r3
 800831e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008326:	b29a      	uxth	r2, r3
 8008328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800832c:	801a      	strh	r2, [r3, #0]
 800832e:	e020      	b.n	8008372 <USB_EPStartXfer+0xdea>
 8008330:	463b      	mov	r3, r7
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	785b      	ldrb	r3, [r3, #1]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d11b      	bne.n	8008372 <USB_EPStartXfer+0xdea>
 800833a:	1d3b      	adds	r3, r7, #4
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008342:	b29b      	uxth	r3, r3
 8008344:	461a      	mov	r2, r3
 8008346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800834a:	4413      	add	r3, r2
 800834c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008350:	463b      	mov	r3, r7
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	011a      	lsls	r2, r3, #4
 8008358:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800835c:	4413      	add	r3, r2
 800835e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800836a:	b29a      	uxth	r2, r3
 800836c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008370:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008372:	463b      	mov	r3, r7
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	895b      	ldrh	r3, [r3, #10]
 8008378:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800837c:	463b      	mov	r3, r7
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6959      	ldr	r1, [r3, #20]
 8008382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008386:	b29b      	uxth	r3, r3
 8008388:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800838c:	1d38      	adds	r0, r7, #4
 800838e:	6800      	ldr	r0, [r0, #0]
 8008390:	f000 fd2f 	bl	8008df2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008394:	1d3b      	adds	r3, r7, #4
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	463b      	mov	r3, r7
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	f107 020a 	add.w	r2, r7, #10
 80083aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083b2:	8013      	strh	r3, [r2, #0]
 80083b4:	f107 030a 	add.w	r3, r7, #10
 80083b8:	f107 020a 	add.w	r2, r7, #10
 80083bc:	8812      	ldrh	r2, [r2, #0]
 80083be:	f082 0210 	eor.w	r2, r2, #16
 80083c2:	801a      	strh	r2, [r3, #0]
 80083c4:	f107 030a 	add.w	r3, r7, #10
 80083c8:	f107 020a 	add.w	r2, r7, #10
 80083cc:	8812      	ldrh	r2, [r2, #0]
 80083ce:	f082 0220 	eor.w	r2, r2, #32
 80083d2:	801a      	strh	r2, [r3, #0]
 80083d4:	1d3b      	adds	r3, r7, #4
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	463b      	mov	r3, r7
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	441a      	add	r2, r3
 80083e2:	f107 030a 	add.w	r3, r7, #10
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	8013      	strh	r3, [r2, #0]
 80083fc:	e3b5      	b.n	8008b6a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80083fe:	463b      	mov	r3, r7
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	7b1b      	ldrb	r3, [r3, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	f040 8090 	bne.w	800852a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800840a:	463b      	mov	r3, r7
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	699a      	ldr	r2, [r3, #24]
 8008410:	463b      	mov	r3, r7
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	429a      	cmp	r2, r3
 8008418:	d90e      	bls.n	8008438 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800841a:	463b      	mov	r3, r7
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008424:	463b      	mov	r3, r7
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	699a      	ldr	r2, [r3, #24]
 800842a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800842e:	1ad2      	subs	r2, r2, r3
 8008430:	463b      	mov	r3, r7
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	619a      	str	r2, [r3, #24]
 8008436:	e008      	b.n	800844a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8008438:	463b      	mov	r3, r7
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008442:	463b      	mov	r3, r7
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2200      	movs	r2, #0
 8008448:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800844a:	1d3b      	adds	r3, r7, #4
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008452:	1d3b      	adds	r3, r7, #4
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800845a:	b29b      	uxth	r3, r3
 800845c:	461a      	mov	r2, r3
 800845e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008462:	4413      	add	r3, r2
 8008464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008468:	463b      	mov	r3, r7
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	011a      	lsls	r2, r3, #4
 8008470:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008474:	4413      	add	r3, r2
 8008476:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800847a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800847e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008482:	2b00      	cmp	r3, #0
 8008484:	d116      	bne.n	80084b4 <USB_EPStartXfer+0xf2c>
 8008486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	b29b      	uxth	r3, r3
 800848e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008492:	b29a      	uxth	r2, r3
 8008494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008498:	801a      	strh	r2, [r3, #0]
 800849a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084b0:	801a      	strh	r2, [r3, #0]
 80084b2:	e32c      	b.n	8008b0e <USB_EPStartXfer+0x1586>
 80084b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084b8:	2b3e      	cmp	r3, #62	; 0x3e
 80084ba:	d818      	bhi.n	80084ee <USB_EPStartXfer+0xf66>
 80084bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084c0:	085b      	lsrs	r3, r3, #1
 80084c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d004      	beq.n	80084dc <USB_EPStartXfer+0xf54>
 80084d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084d6:	3301      	adds	r3, #1
 80084d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	029b      	lsls	r3, r3, #10
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084ea:	801a      	strh	r2, [r3, #0]
 80084ec:	e30f      	b.n	8008b0e <USB_EPStartXfer+0x1586>
 80084ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f2:	095b      	lsrs	r3, r3, #5
 80084f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084fc:	f003 031f 	and.w	r3, r3, #31
 8008500:	2b00      	cmp	r3, #0
 8008502:	d104      	bne.n	800850e <USB_EPStartXfer+0xf86>
 8008504:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008508:	3b01      	subs	r3, #1
 800850a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800850e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008512:	b29b      	uxth	r3, r3
 8008514:	029b      	lsls	r3, r3, #10
 8008516:	b29b      	uxth	r3, r3
 8008518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800851c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008520:	b29a      	uxth	r2, r3
 8008522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008526:	801a      	strh	r2, [r3, #0]
 8008528:	e2f1      	b.n	8008b0e <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800852a:	463b      	mov	r3, r7
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	78db      	ldrb	r3, [r3, #3]
 8008530:	2b02      	cmp	r3, #2
 8008532:	f040 818f 	bne.w	8008854 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008536:	463b      	mov	r3, r7
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	785b      	ldrb	r3, [r3, #1]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d175      	bne.n	800862c <USB_EPStartXfer+0x10a4>
 8008540:	1d3b      	adds	r3, r7, #4
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008548:	1d3b      	adds	r3, r7, #4
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008550:	b29b      	uxth	r3, r3
 8008552:	461a      	mov	r2, r3
 8008554:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008558:	4413      	add	r3, r2
 800855a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800855e:	463b      	mov	r3, r7
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	011a      	lsls	r2, r3, #4
 8008566:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800856a:	4413      	add	r3, r2
 800856c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008570:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008574:	463b      	mov	r3, r7
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d116      	bne.n	80085ac <USB_EPStartXfer+0x1024>
 800857e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	b29b      	uxth	r3, r3
 8008586:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800858a:	b29a      	uxth	r2, r3
 800858c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008590:	801a      	strh	r2, [r3, #0]
 8008592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	b29b      	uxth	r3, r3
 800859a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800859e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085a8:	801a      	strh	r2, [r3, #0]
 80085aa:	e065      	b.n	8008678 <USB_EPStartXfer+0x10f0>
 80085ac:	463b      	mov	r3, r7
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b3e      	cmp	r3, #62	; 0x3e
 80085b4:	d81a      	bhi.n	80085ec <USB_EPStartXfer+0x1064>
 80085b6:	463b      	mov	r3, r7
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	085b      	lsrs	r3, r3, #1
 80085be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80085c2:	463b      	mov	r3, r7
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d004      	beq.n	80085da <USB_EPStartXfer+0x1052>
 80085d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085d4:	3301      	adds	r3, #1
 80085d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80085da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085de:	b29b      	uxth	r3, r3
 80085e0:	029b      	lsls	r3, r3, #10
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085e8:	801a      	strh	r2, [r3, #0]
 80085ea:	e045      	b.n	8008678 <USB_EPStartXfer+0x10f0>
 80085ec:	463b      	mov	r3, r7
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	095b      	lsrs	r3, r3, #5
 80085f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80085f8:	463b      	mov	r3, r7
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	f003 031f 	and.w	r3, r3, #31
 8008602:	2b00      	cmp	r3, #0
 8008604:	d104      	bne.n	8008610 <USB_EPStartXfer+0x1088>
 8008606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800860a:	3b01      	subs	r3, #1
 800860c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008614:	b29b      	uxth	r3, r3
 8008616:	029b      	lsls	r3, r3, #10
 8008618:	b29b      	uxth	r3, r3
 800861a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800861e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008622:	b29a      	uxth	r2, r3
 8008624:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008628:	801a      	strh	r2, [r3, #0]
 800862a:	e025      	b.n	8008678 <USB_EPStartXfer+0x10f0>
 800862c:	463b      	mov	r3, r7
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	785b      	ldrb	r3, [r3, #1]
 8008632:	2b01      	cmp	r3, #1
 8008634:	d120      	bne.n	8008678 <USB_EPStartXfer+0x10f0>
 8008636:	1d3b      	adds	r3, r7, #4
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800863e:	1d3b      	adds	r3, r7, #4
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008646:	b29b      	uxth	r3, r3
 8008648:	461a      	mov	r2, r3
 800864a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800864e:	4413      	add	r3, r2
 8008650:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008654:	463b      	mov	r3, r7
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	011a      	lsls	r2, r3, #4
 800865c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008660:	4413      	add	r3, r2
 8008662:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008666:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800866a:	463b      	mov	r3, r7
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	b29a      	uxth	r2, r3
 8008672:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008676:	801a      	strh	r2, [r3, #0]
 8008678:	1d3b      	adds	r3, r7, #4
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008680:	463b      	mov	r3, r7
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	785b      	ldrb	r3, [r3, #1]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d175      	bne.n	8008776 <USB_EPStartXfer+0x11ee>
 800868a:	1d3b      	adds	r3, r7, #4
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008692:	1d3b      	adds	r3, r7, #4
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800869a:	b29b      	uxth	r3, r3
 800869c:	461a      	mov	r2, r3
 800869e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80086a2:	4413      	add	r3, r2
 80086a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80086a8:	463b      	mov	r3, r7
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	011a      	lsls	r2, r3, #4
 80086b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80086b4:	4413      	add	r3, r2
 80086b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086be:	463b      	mov	r3, r7
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d116      	bne.n	80086f6 <USB_EPStartXfer+0x116e>
 80086c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086da:	801a      	strh	r2, [r3, #0]
 80086dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086f2:	801a      	strh	r2, [r3, #0]
 80086f4:	e061      	b.n	80087ba <USB_EPStartXfer+0x1232>
 80086f6:	463b      	mov	r3, r7
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	2b3e      	cmp	r3, #62	; 0x3e
 80086fe:	d81a      	bhi.n	8008736 <USB_EPStartXfer+0x11ae>
 8008700:	463b      	mov	r3, r7
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	085b      	lsrs	r3, r3, #1
 8008708:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800870c:	463b      	mov	r3, r7
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	d004      	beq.n	8008724 <USB_EPStartXfer+0x119c>
 800871a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800871e:	3301      	adds	r3, #1
 8008720:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008724:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008728:	b29b      	uxth	r3, r3
 800872a:	029b      	lsls	r3, r3, #10
 800872c:	b29a      	uxth	r2, r3
 800872e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008732:	801a      	strh	r2, [r3, #0]
 8008734:	e041      	b.n	80087ba <USB_EPStartXfer+0x1232>
 8008736:	463b      	mov	r3, r7
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	095b      	lsrs	r3, r3, #5
 800873e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008742:	463b      	mov	r3, r7
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	f003 031f 	and.w	r3, r3, #31
 800874c:	2b00      	cmp	r3, #0
 800874e:	d104      	bne.n	800875a <USB_EPStartXfer+0x11d2>
 8008750:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008754:	3b01      	subs	r3, #1
 8008756:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800875a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800875e:	b29b      	uxth	r3, r3
 8008760:	029b      	lsls	r3, r3, #10
 8008762:	b29b      	uxth	r3, r3
 8008764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800876c:	b29a      	uxth	r2, r3
 800876e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008772:	801a      	strh	r2, [r3, #0]
 8008774:	e021      	b.n	80087ba <USB_EPStartXfer+0x1232>
 8008776:	463b      	mov	r3, r7
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	785b      	ldrb	r3, [r3, #1]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d11c      	bne.n	80087ba <USB_EPStartXfer+0x1232>
 8008780:	1d3b      	adds	r3, r7, #4
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008788:	b29b      	uxth	r3, r3
 800878a:	461a      	mov	r2, r3
 800878c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008790:	4413      	add	r3, r2
 8008792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008796:	463b      	mov	r3, r7
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	011a      	lsls	r2, r3, #4
 800879e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80087a2:	4413      	add	r3, r2
 80087a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087ac:	463b      	mov	r3, r7
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087b8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80087ba:	463b      	mov	r3, r7
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	69db      	ldr	r3, [r3, #28]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 81a4 	beq.w	8008b0e <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80087c6:	1d3b      	adds	r3, r7, #4
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	463b      	mov	r3, r7
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4413      	add	r3, r2
 80087d4:	881b      	ldrh	r3, [r3, #0]
 80087d6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087da:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d005      	beq.n	80087f2 <USB_EPStartXfer+0x126a>
 80087e6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10d      	bne.n	800880e <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80087f2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80087f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f040 8187 	bne.w	8008b0e <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008800:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008808:	2b00      	cmp	r3, #0
 800880a:	f040 8180 	bne.w	8008b0e <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800880e:	1d3b      	adds	r3, r7, #4
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	463b      	mov	r3, r7
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	881b      	ldrh	r3, [r3, #0]
 800881e:	b29b      	uxth	r3, r3
 8008820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008828:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800882c:	1d3b      	adds	r3, r7, #4
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	463b      	mov	r3, r7
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	441a      	add	r2, r3
 800883a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800883e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800884a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800884e:	b29b      	uxth	r3, r3
 8008850:	8013      	strh	r3, [r2, #0]
 8008852:	e15c      	b.n	8008b0e <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008854:	463b      	mov	r3, r7
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	78db      	ldrb	r3, [r3, #3]
 800885a:	2b01      	cmp	r3, #1
 800885c:	f040 8155 	bne.w	8008b0a <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008860:	463b      	mov	r3, r7
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	699a      	ldr	r2, [r3, #24]
 8008866:	463b      	mov	r3, r7
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	429a      	cmp	r2, r3
 800886e:	d90e      	bls.n	800888e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8008870:	463b      	mov	r3, r7
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800887a:	463b      	mov	r3, r7
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	699a      	ldr	r2, [r3, #24]
 8008880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008884:	1ad2      	subs	r2, r2, r3
 8008886:	463b      	mov	r3, r7
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	619a      	str	r2, [r3, #24]
 800888c:	e008      	b.n	80088a0 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800888e:	463b      	mov	r3, r7
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008898:	463b      	mov	r3, r7
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2200      	movs	r2, #0
 800889e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80088a0:	463b      	mov	r3, r7
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	785b      	ldrb	r3, [r3, #1]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d16f      	bne.n	800898a <USB_EPStartXfer+0x1402>
 80088aa:	1d3b      	adds	r3, r7, #4
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088b2:	1d3b      	adds	r3, r7, #4
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	461a      	mov	r2, r3
 80088be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088c2:	4413      	add	r3, r2
 80088c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088c8:	463b      	mov	r3, r7
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	011a      	lsls	r2, r3, #4
 80088d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088d4:	4413      	add	r3, r2
 80088d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d116      	bne.n	8008914 <USB_EPStartXfer+0x138c>
 80088e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088f8:	801a      	strh	r2, [r3, #0]
 80088fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088fe:	881b      	ldrh	r3, [r3, #0]
 8008900:	b29b      	uxth	r3, r3
 8008902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800890a:	b29a      	uxth	r2, r3
 800890c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008910:	801a      	strh	r2, [r3, #0]
 8008912:	e05f      	b.n	80089d4 <USB_EPStartXfer+0x144c>
 8008914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008918:	2b3e      	cmp	r3, #62	; 0x3e
 800891a:	d818      	bhi.n	800894e <USB_EPStartXfer+0x13c6>
 800891c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	2b00      	cmp	r3, #0
 8008930:	d004      	beq.n	800893c <USB_EPStartXfer+0x13b4>
 8008932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008936:	3301      	adds	r3, #1
 8008938:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800893c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008940:	b29b      	uxth	r3, r3
 8008942:	029b      	lsls	r3, r3, #10
 8008944:	b29a      	uxth	r2, r3
 8008946:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800894a:	801a      	strh	r2, [r3, #0]
 800894c:	e042      	b.n	80089d4 <USB_EPStartXfer+0x144c>
 800894e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008952:	095b      	lsrs	r3, r3, #5
 8008954:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800895c:	f003 031f 	and.w	r3, r3, #31
 8008960:	2b00      	cmp	r3, #0
 8008962:	d104      	bne.n	800896e <USB_EPStartXfer+0x13e6>
 8008964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008968:	3b01      	subs	r3, #1
 800896a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800896e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008972:	b29b      	uxth	r3, r3
 8008974:	029b      	lsls	r3, r3, #10
 8008976:	b29b      	uxth	r3, r3
 8008978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800897c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008980:	b29a      	uxth	r2, r3
 8008982:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008986:	801a      	strh	r2, [r3, #0]
 8008988:	e024      	b.n	80089d4 <USB_EPStartXfer+0x144c>
 800898a:	463b      	mov	r3, r7
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d11f      	bne.n	80089d4 <USB_EPStartXfer+0x144c>
 8008994:	1d3b      	adds	r3, r7, #4
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800899c:	1d3b      	adds	r3, r7, #4
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	461a      	mov	r2, r3
 80089a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ac:	4413      	add	r3, r2
 80089ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089b2:	463b      	mov	r3, r7
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	011a      	lsls	r2, r3, #4
 80089ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089be:	4413      	add	r3, r2
 80089c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80089c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80089d2:	801a      	strh	r2, [r3, #0]
 80089d4:	1d3b      	adds	r3, r7, #4
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80089dc:	463b      	mov	r3, r7
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	785b      	ldrb	r3, [r3, #1]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d16f      	bne.n	8008ac6 <USB_EPStartXfer+0x153e>
 80089e6:	1d3b      	adds	r3, r7, #4
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089ee:	1d3b      	adds	r3, r7, #4
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	461a      	mov	r2, r3
 80089fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089fe:	4413      	add	r3, r2
 8008a00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a04:	463b      	mov	r3, r7
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	011a      	lsls	r2, r3, #4
 8008a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a10:	4413      	add	r3, r2
 8008a12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d116      	bne.n	8008a50 <USB_EPStartXfer+0x14c8>
 8008a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a34:	801a      	strh	r2, [r3, #0]
 8008a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a4c:	801a      	strh	r2, [r3, #0]
 8008a4e:	e05e      	b.n	8008b0e <USB_EPStartXfer+0x1586>
 8008a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a54:	2b3e      	cmp	r3, #62	; 0x3e
 8008a56:	d818      	bhi.n	8008a8a <USB_EPStartXfer+0x1502>
 8008a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a5c:	085b      	lsrs	r3, r3, #1
 8008a5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d004      	beq.n	8008a78 <USB_EPStartXfer+0x14f0>
 8008a6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a72:	3301      	adds	r3, #1
 8008a74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	029b      	lsls	r3, r3, #10
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a86:	801a      	strh	r2, [r3, #0]
 8008a88:	e041      	b.n	8008b0e <USB_EPStartXfer+0x1586>
 8008a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a8e:	095b      	lsrs	r3, r3, #5
 8008a90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a98:	f003 031f 	and.w	r3, r3, #31
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d104      	bne.n	8008aaa <USB_EPStartXfer+0x1522>
 8008aa0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008aaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	029b      	lsls	r3, r3, #10
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ac2:	801a      	strh	r2, [r3, #0]
 8008ac4:	e023      	b.n	8008b0e <USB_EPStartXfer+0x1586>
 8008ac6:	463b      	mov	r3, r7
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	785b      	ldrb	r3, [r3, #1]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d11e      	bne.n	8008b0e <USB_EPStartXfer+0x1586>
 8008ad0:	1d3b      	adds	r3, r7, #4
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	461a      	mov	r2, r3
 8008adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	011a      	lsls	r2, r3, #4
 8008aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008af2:	4413      	add	r3, r2
 8008af4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008af8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008afc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b06:	801a      	strh	r2, [r3, #0]
 8008b08:	e001      	b.n	8008b0e <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e02e      	b.n	8008b6c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b0e:	1d3b      	adds	r3, r7, #4
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	463b      	mov	r3, r7
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b28:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b2c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b34:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b38:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b40:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b44:	1d3b      	adds	r3, r7, #4
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	463b      	mov	r3, r7
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	441a      	add	r2, r3
 8008b52:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b085      	sub	sp, #20
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	785b      	ldrb	r3, [r3, #1]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d020      	beq.n	8008bca <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b9e:	81bb      	strh	r3, [r7, #12]
 8008ba0:	89bb      	ldrh	r3, [r7, #12]
 8008ba2:	f083 0310 	eor.w	r3, r3, #16
 8008ba6:	81bb      	strh	r3, [r7, #12]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	441a      	add	r2, r3
 8008bb2:	89bb      	ldrh	r3, [r7, #12]
 8008bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	8013      	strh	r3, [r2, #0]
 8008bc8:	e01f      	b.n	8008c0a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be0:	81fb      	strh	r3, [r7, #14]
 8008be2:	89fb      	ldrh	r3, [r7, #14]
 8008be4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008be8:	81fb      	strh	r3, [r7, #14]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	441a      	add	r2, r3
 8008bf4:	89fb      	ldrh	r3, [r7, #14]
 8008bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bc80      	pop	{r7}
 8008c14:	4770      	bx	lr

08008c16 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c16:	b480      	push	{r7}
 8008c18:	b087      	sub	sp, #28
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	7b1b      	ldrb	r3, [r3, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f040 809d 	bne.w	8008d64 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	785b      	ldrb	r3, [r3, #1]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d04c      	beq.n	8008ccc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	823b      	strh	r3, [r7, #16]
 8008c40:	8a3b      	ldrh	r3, [r7, #16]
 8008c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d01b      	beq.n	8008c82 <USB_EPClearStall+0x6c>
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c60:	81fb      	strh	r3, [r7, #14]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	441a      	add	r2, r3
 8008c6c:	89fb      	ldrh	r3, [r7, #14]
 8008c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	78db      	ldrb	r3, [r3, #3]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d06c      	beq.n	8008d64 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4413      	add	r3, r2
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ca0:	81bb      	strh	r3, [r7, #12]
 8008ca2:	89bb      	ldrh	r3, [r7, #12]
 8008ca4:	f083 0320 	eor.w	r3, r3, #32
 8008ca8:	81bb      	strh	r3, [r7, #12]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	441a      	add	r2, r3
 8008cb4:	89bb      	ldrh	r3, [r7, #12]
 8008cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	8013      	strh	r3, [r2, #0]
 8008cca:	e04b      	b.n	8008d64 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	82fb      	strh	r3, [r7, #22]
 8008cda:	8afb      	ldrh	r3, [r7, #22]
 8008cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d01b      	beq.n	8008d1c <USB_EPClearStall+0x106>
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cfa:	82bb      	strh	r3, [r7, #20]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	441a      	add	r2, r3
 8008d06:	8abb      	ldrh	r3, [r7, #20]
 8008d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d32:	827b      	strh	r3, [r7, #18]
 8008d34:	8a7b      	ldrh	r3, [r7, #18]
 8008d36:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d3a:	827b      	strh	r3, [r7, #18]
 8008d3c:	8a7b      	ldrh	r3, [r7, #18]
 8008d3e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d42:	827b      	strh	r3, [r7, #18]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	441a      	add	r2, r3
 8008d4e:	8a7b      	ldrh	r3, [r7, #18]
 8008d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bc80      	pop	{r7}
 8008d6e:	4770      	bx	lr

08008d70 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008d7c:	78fb      	ldrb	r3, [r7, #3]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d103      	bne.n	8008d8a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2280      	movs	r2, #128	; 0x80
 8008d86:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bc80      	pop	{r7}
 8008d94:	4770      	bx	lr

08008d96 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b083      	sub	sp, #12
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bc80      	pop	{r7}
 8008da8:	4770      	bx	lr

08008daa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b083      	sub	sp, #12
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bc80      	pop	{r7}
 8008dbc:	4770      	bx	lr

08008dbe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b085      	sub	sp, #20
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bc80      	pop	{r7}
 8008dda:	4770      	bx	lr

08008ddc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bc80      	pop	{r7}
 8008df0:	4770      	bx	lr

08008df2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b08d      	sub	sp, #52	; 0x34
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	461a      	mov	r2, r3
 8008e00:	460b      	mov	r3, r1
 8008e02:	80fb      	strh	r3, [r7, #6]
 8008e04:	4613      	mov	r3, r2
 8008e06:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008e08:	88bb      	ldrh	r3, [r7, #4]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	085b      	lsrs	r3, r3, #1
 8008e0e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e18:	88fb      	ldrh	r3, [r7, #6]
 8008e1a:	005a      	lsls	r2, r3, #1
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e24:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e2a:	e01e      	b.n	8008e6a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	3301      	adds	r3, #1
 8008e36:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	021b      	lsls	r3, r3, #8
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	461a      	mov	r2, r3
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e50:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e54:	3302      	adds	r3, #2
 8008e56:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5a:	3302      	adds	r3, #2
 8008e5c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	3301      	adds	r3, #1
 8008e62:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e66:	3b01      	subs	r3, #1
 8008e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1dd      	bne.n	8008e2c <USB_WritePMA+0x3a>
  }
}
 8008e70:	bf00      	nop
 8008e72:	bf00      	nop
 8008e74:	3734      	adds	r7, #52	; 0x34
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bc80      	pop	{r7}
 8008e7a:	4770      	bx	lr

08008e7c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b08b      	sub	sp, #44	; 0x2c
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	4611      	mov	r1, r2
 8008e88:	461a      	mov	r2, r3
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	80fb      	strh	r3, [r7, #6]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008e92:	88bb      	ldrh	r3, [r7, #4]
 8008e94:	085b      	lsrs	r3, r3, #1
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ea2:	88fb      	ldrh	r3, [r7, #6]
 8008ea4:	005a      	lsls	r2, r3, #1
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eae:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb4:	e01b      	b.n	8008eee <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	3302      	adds	r3, #2
 8008ec2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	0a1b      	lsrs	r3, r3, #8
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	3302      	adds	r3, #2
 8008ee6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	3b01      	subs	r3, #1
 8008eec:	627b      	str	r3, [r7, #36]	; 0x24
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1e0      	bne.n	8008eb6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008ef4:	88bb      	ldrh	r3, [r7, #4]
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d007      	beq.n	8008f10 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	881b      	ldrh	r3, [r3, #0]
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	701a      	strb	r2, [r3, #0]
  }
}
 8008f10:	bf00      	nop
 8008f12:	372c      	adds	r7, #44	; 0x2c
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bc80      	pop	{r7}
 8008f18:	4770      	bx	lr

08008f1a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	460b      	mov	r3, r1
 8008f24:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	7c1b      	ldrb	r3, [r3, #16]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d115      	bne.n	8008f5e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f36:	2202      	movs	r2, #2
 8008f38:	2181      	movs	r1, #129	; 0x81
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f004 fddd 	bl	800dafa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	2101      	movs	r1, #1
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f004 fdd3 	bl	800dafa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008f5c:	e012      	b.n	8008f84 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f5e:	2340      	movs	r3, #64	; 0x40
 8008f60:	2202      	movs	r2, #2
 8008f62:	2181      	movs	r1, #129	; 0x81
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f004 fdc8 	bl	800dafa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f70:	2340      	movs	r3, #64	; 0x40
 8008f72:	2202      	movs	r2, #2
 8008f74:	2101      	movs	r1, #1
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f004 fdbf 	bl	800dafa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008f84:	2308      	movs	r3, #8
 8008f86:	2203      	movs	r2, #3
 8008f88:	2182      	movs	r1, #130	; 0x82
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f004 fdb5 	bl	800dafa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f96:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008f9a:	f004 fed5 	bl	800dd48 <USBD_static_malloc>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d102      	bne.n	8008fb6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	73fb      	strb	r3, [r7, #15]
 8008fb4:	e026      	b.n	8009004 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fbc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	7c1b      	ldrb	r3, [r3, #16]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d109      	bne.n	8008ff4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fea:	2101      	movs	r1, #1
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f004 fe75 	bl	800dcdc <USBD_LL_PrepareReceive>
 8008ff2:	e007      	b.n	8009004 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ffa:	2340      	movs	r3, #64	; 0x40
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f004 fe6c 	bl	800dcdc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009004:	7bfb      	ldrb	r3, [r7, #15]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	460b      	mov	r3, r1
 8009018:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800901e:	2181      	movs	r1, #129	; 0x81
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f004 fd90 	bl	800db46 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800902c:	2101      	movs	r1, #1
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f004 fd89 	bl	800db46 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800903c:	2182      	movs	r1, #130	; 0x82
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f004 fd81 	bl	800db46 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00e      	beq.n	8009072 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009064:	4618      	mov	r0, r3
 8009066:	f004 fe7b 	bl	800dd60 <USBD_static_free>
    pdev->pClassData = NULL;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009072:	7bfb      	ldrb	r3, [r7, #15]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800908c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800908e:	2300      	movs	r3, #0
 8009090:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009092:	2300      	movs	r3, #0
 8009094:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009096:	2300      	movs	r3, #0
 8009098:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d039      	beq.n	800911a <USBD_CDC_Setup+0x9e>
 80090a6:	2b20      	cmp	r3, #32
 80090a8:	d17f      	bne.n	80091aa <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	88db      	ldrh	r3, [r3, #6]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d029      	beq.n	8009106 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	b25b      	sxtb	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	da11      	bge.n	80090e0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80090c8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	88d2      	ldrh	r2, [r2, #6]
 80090ce:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80090d0:	6939      	ldr	r1, [r7, #16]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	88db      	ldrh	r3, [r3, #6]
 80090d6:	461a      	mov	r2, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 fa0a 	bl	800a4f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80090de:	e06b      	b.n	80091b8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	785a      	ldrb	r2, [r3, #1]
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	88db      	ldrh	r3, [r3, #6]
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80090f6:	6939      	ldr	r1, [r7, #16]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	88db      	ldrh	r3, [r3, #6]
 80090fc:	461a      	mov	r2, r3
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f001 fa25 	bl	800a54e <USBD_CtlPrepareRx>
      break;
 8009104:	e058      	b.n	80091b8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	7850      	ldrb	r0, [r2, #1]
 8009112:	2200      	movs	r2, #0
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	4798      	blx	r3
      break;
 8009118:	e04e      	b.n	80091b8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	785b      	ldrb	r3, [r3, #1]
 800911e:	2b0b      	cmp	r3, #11
 8009120:	d02e      	beq.n	8009180 <USBD_CDC_Setup+0x104>
 8009122:	2b0b      	cmp	r3, #11
 8009124:	dc38      	bgt.n	8009198 <USBD_CDC_Setup+0x11c>
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <USBD_CDC_Setup+0xb4>
 800912a:	2b0a      	cmp	r3, #10
 800912c:	d014      	beq.n	8009158 <USBD_CDC_Setup+0xdc>
 800912e:	e033      	b.n	8009198 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009136:	2b03      	cmp	r3, #3
 8009138:	d107      	bne.n	800914a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800913a:	f107 030c 	add.w	r3, r7, #12
 800913e:	2202      	movs	r2, #2
 8009140:	4619      	mov	r1, r3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f001 f9d5 	bl	800a4f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009148:	e02e      	b.n	80091a8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 f966 	bl	800a41e <USBD_CtlError>
            ret = USBD_FAIL;
 8009152:	2302      	movs	r3, #2
 8009154:	75fb      	strb	r3, [r7, #23]
          break;
 8009156:	e027      	b.n	80091a8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915e:	2b03      	cmp	r3, #3
 8009160:	d107      	bne.n	8009172 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009162:	f107 030f 	add.w	r3, r7, #15
 8009166:	2201      	movs	r2, #1
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 f9c1 	bl	800a4f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009170:	e01a      	b.n	80091a8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 f952 	bl	800a41e <USBD_CtlError>
            ret = USBD_FAIL;
 800917a:	2302      	movs	r3, #2
 800917c:	75fb      	strb	r3, [r7, #23]
          break;
 800917e:	e013      	b.n	80091a8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009186:	2b03      	cmp	r3, #3
 8009188:	d00d      	beq.n	80091a6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f001 f946 	bl	800a41e <USBD_CtlError>
            ret = USBD_FAIL;
 8009192:	2302      	movs	r3, #2
 8009194:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009196:	e006      	b.n	80091a6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f001 f93f 	bl	800a41e <USBD_CtlError>
          ret = USBD_FAIL;
 80091a0:	2302      	movs	r3, #2
 80091a2:	75fb      	strb	r3, [r7, #23]
          break;
 80091a4:	e000      	b.n	80091a8 <USBD_CDC_Setup+0x12c>
          break;
 80091a6:	bf00      	nop
      }
      break;
 80091a8:	e006      	b.n	80091b8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f001 f936 	bl	800a41e <USBD_CtlError>
      ret = USBD_FAIL;
 80091b2:	2302      	movs	r3, #2
 80091b4:	75fb      	strb	r3, [r7, #23]
      break;
 80091b6:	bf00      	nop
  }

  return ret;
 80091b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3718      	adds	r7, #24
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b084      	sub	sp, #16
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	460b      	mov	r3, r1
 80091cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091dc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d03a      	beq.n	800925e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80091e8:	78fa      	ldrb	r2, [r7, #3]
 80091ea:	6879      	ldr	r1, [r7, #4]
 80091ec:	4613      	mov	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	4413      	add	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	440b      	add	r3, r1
 80091f6:	331c      	adds	r3, #28
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d029      	beq.n	8009252 <USBD_CDC_DataIn+0x90>
 80091fe:	78fa      	ldrb	r2, [r7, #3]
 8009200:	6879      	ldr	r1, [r7, #4]
 8009202:	4613      	mov	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	440b      	add	r3, r1
 800920c:	331c      	adds	r3, #28
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	78f9      	ldrb	r1, [r7, #3]
 8009212:	68b8      	ldr	r0, [r7, #8]
 8009214:	460b      	mov	r3, r1
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	440b      	add	r3, r1
 800921a:	00db      	lsls	r3, r3, #3
 800921c:	4403      	add	r3, r0
 800921e:	3338      	adds	r3, #56	; 0x38
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	fbb2 f1f3 	udiv	r1, r2, r3
 8009226:	fb03 f301 	mul.w	r3, r3, r1
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	2b00      	cmp	r3, #0
 800922e:	d110      	bne.n	8009252 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009230:	78fa      	ldrb	r2, [r7, #3]
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	440b      	add	r3, r1
 800923e:	331c      	adds	r3, #28
 8009240:	2200      	movs	r2, #0
 8009242:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009244:	78f9      	ldrb	r1, [r7, #3]
 8009246:	2300      	movs	r3, #0
 8009248:	2200      	movs	r2, #0
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f004 fd23 	bl	800dc96 <USBD_LL_Transmit>
 8009250:	e003      	b.n	800925a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800925a:	2300      	movs	r3, #0
 800925c:	e000      	b.n	8009260 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800925e:	2302      	movs	r3, #2
  }
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800927a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800927c:	78fb      	ldrb	r3, [r7, #3]
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f004 fd4e 	bl	800dd22 <USBD_LL_GetRxDataSize>
 8009286:	4602      	mov	r2, r0
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00d      	beq.n	80092b4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80092ac:	4611      	mov	r1, r2
 80092ae:	4798      	blx	r3

    return USBD_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	e000      	b.n	80092b6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80092b4:	2302      	movs	r3, #2
  }
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b084      	sub	sp, #16
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092cc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d015      	beq.n	8009304 <USBD_CDC_EP0_RxReady+0x46>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80092de:	2bff      	cmp	r3, #255	; 0xff
 80092e0:	d010      	beq.n	8009304 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80092f0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80092f8:	b292      	uxth	r2, r2
 80092fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	22ff      	movs	r2, #255	; 0xff
 8009300:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
	...

08009310 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2243      	movs	r2, #67	; 0x43
 800931c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800931e:	4b03      	ldr	r3, [pc, #12]	; (800932c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009320:	4618      	mov	r0, r3
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	bc80      	pop	{r7}
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	200000a4 	.word	0x200000a4

08009330 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2243      	movs	r2, #67	; 0x43
 800933c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800933e:	4b03      	ldr	r3, [pc, #12]	; (800934c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009340:	4618      	mov	r0, r3
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	bc80      	pop	{r7}
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	20000060 	.word	0x20000060

08009350 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2243      	movs	r2, #67	; 0x43
 800935c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800935e:	4b03      	ldr	r3, [pc, #12]	; (800936c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009360:	4618      	mov	r0, r3
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	bc80      	pop	{r7}
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	200000e8 	.word	0x200000e8

08009370 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	220a      	movs	r2, #10
 800937c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800937e:	4b03      	ldr	r3, [pc, #12]	; (800938c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	bc80      	pop	{r7}
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	2000001c 	.word	0x2000001c

08009390 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800939a:	2302      	movs	r3, #2
 800939c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d005      	beq.n	80093b0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3714      	adds	r7, #20
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bc80      	pop	{r7}
 80093ba:	4770      	bx	lr

080093bc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80093bc:	b480      	push	{r7}
 80093be:	b087      	sub	sp, #28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	4613      	mov	r3, r2
 80093c8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80093da:	88fa      	ldrh	r2, [r7, #6]
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	371c      	adds	r7, #28
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bc80      	pop	{r7}
 80093ec:	4770      	bx	lr

080093ee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b085      	sub	sp, #20
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	bc80      	pop	{r7}
 8009412:	4770      	bx	lr

08009414 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009422:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800942a:	2b00      	cmp	r3, #0
 800942c:	d01c      	beq.n	8009468 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009434:	2b00      	cmp	r3, #0
 8009436:	d115      	bne.n	8009464 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2201      	movs	r2, #1
 800943c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009456:	b29b      	uxth	r3, r3
 8009458:	2181      	movs	r1, #129	; 0x81
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f004 fc1b 	bl	800dc96 <USBD_LL_Transmit>

      return USBD_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	e002      	b.n	800946a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009464:	2301      	movs	r3, #1
 8009466:	e000      	b.n	800946a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009468:	2302      	movs	r3, #2
  }
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009480:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009488:	2b00      	cmp	r3, #0
 800948a:	d017      	beq.n	80094bc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	7c1b      	ldrb	r3, [r3, #16]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d109      	bne.n	80094a8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800949a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800949e:	2101      	movs	r1, #1
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f004 fc1b 	bl	800dcdc <USBD_LL_PrepareReceive>
 80094a6:	e007      	b.n	80094b8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094ae:	2340      	movs	r3, #64	; 0x40
 80094b0:	2101      	movs	r1, #1
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f004 fc12 	bl	800dcdc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	e000      	b.n	80094be <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80094bc:	2302      	movs	r3, #2
  }
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	60f8      	str	r0, [r7, #12]
 80094ce:	60b9      	str	r1, [r7, #8]
 80094d0:	4613      	mov	r3, r2
 80094d2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80094da:	2302      	movs	r3, #2
 80094dc:	e01a      	b.n	8009514 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d003      	beq.n	80094f0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d003      	beq.n	80094fe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	79fa      	ldrb	r2, [r7, #7]
 800950a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f004 fa7f 	bl	800da10 <USBD_LL_Init>

  return USBD_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d006      	beq.n	800953e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	683a      	ldr	r2, [r7, #0]
 8009534:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73fb      	strb	r3, [r7, #15]
 800953c:	e001      	b.n	8009542 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800953e:	2302      	movs	r3, #2
 8009540:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009542:	7bfb      	ldrb	r3, [r7, #15]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	bc80      	pop	{r7}
 800954c:	4770      	bx	lr

0800954e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b082      	sub	sp, #8
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f004 fab4 	bl	800dac4 <USBD_LL_Start>

  return USBD_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009566:	b480      	push	{r7}
 8009568:	b083      	sub	sp, #12
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	bc80      	pop	{r7}
 8009578:	4770      	bx	lr

0800957a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b084      	sub	sp, #16
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	460b      	mov	r3, r1
 8009584:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009586:	2302      	movs	r3, #2
 8009588:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00c      	beq.n	80095ae <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	78fa      	ldrb	r2, [r7, #3]
 800959e:	4611      	mov	r1, r2
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	4798      	blx	r3
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	460b      	mov	r3, r1
 80095c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	78fa      	ldrb	r2, [r7, #3]
 80095ce:	4611      	mov	r1, r2
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	4798      	blx	r3

  return USBD_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b082      	sub	sp, #8
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 fed8 	bl	800a3a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009604:	461a      	mov	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009612:	f003 031f 	and.w	r3, r3, #31
 8009616:	2b02      	cmp	r3, #2
 8009618:	d016      	beq.n	8009648 <USBD_LL_SetupStage+0x6a>
 800961a:	2b02      	cmp	r3, #2
 800961c:	d81c      	bhi.n	8009658 <USBD_LL_SetupStage+0x7a>
 800961e:	2b00      	cmp	r3, #0
 8009620:	d002      	beq.n	8009628 <USBD_LL_SetupStage+0x4a>
 8009622:	2b01      	cmp	r3, #1
 8009624:	d008      	beq.n	8009638 <USBD_LL_SetupStage+0x5a>
 8009626:	e017      	b.n	8009658 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f9cb 	bl	80099cc <USBD_StdDevReq>
      break;
 8009636:	e01a      	b.n	800966e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800963e:	4619      	mov	r1, r3
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fa2d 	bl	8009aa0 <USBD_StdItfReq>
      break;
 8009646:	e012      	b.n	800966e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fa6d 	bl	8009b30 <USBD_StdEPReq>
      break;
 8009656:	e00a      	b.n	800966e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800965e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009662:	b2db      	uxtb	r3, r3
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f004 fa8c 	bl	800db84 <USBD_LL_StallEP>
      break;
 800966c:	bf00      	nop
  }

  return USBD_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	460b      	mov	r3, r1
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009686:	7afb      	ldrb	r3, [r7, #11]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d14b      	bne.n	8009724 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009692:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800969a:	2b03      	cmp	r3, #3
 800969c:	d134      	bne.n	8009708 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	68da      	ldr	r2, [r3, #12]
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d919      	bls.n	80096de <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	68da      	ldr	r2, [r3, #12]
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	1ad2      	subs	r2, r2, r3
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	68da      	ldr	r2, [r3, #12]
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d203      	bcs.n	80096cc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	e002      	b.n	80096d2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	461a      	mov	r2, r3
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f000 ff57 	bl	800a58a <USBD_CtlContinueRx>
 80096dc:	e038      	b.n	8009750 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00a      	beq.n	8009700 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d105      	bne.n	8009700 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 ff54 	bl	800a5ae <USBD_CtlSendStatus>
 8009706:	e023      	b.n	8009750 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800970e:	2b05      	cmp	r3, #5
 8009710:	d11e      	bne.n	8009750 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800971a:	2100      	movs	r1, #0
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f004 fa31 	bl	800db84 <USBD_LL_StallEP>
 8009722:	e015      	b.n	8009750 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00d      	beq.n	800974c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009736:	2b03      	cmp	r3, #3
 8009738:	d108      	bne.n	800974c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	7afa      	ldrb	r2, [r7, #11]
 8009744:	4611      	mov	r1, r2
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	4798      	blx	r3
 800974a:	e001      	b.n	8009750 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800974c:	2302      	movs	r3, #2
 800974e:	e000      	b.n	8009752 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3718      	adds	r7, #24
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b086      	sub	sp, #24
 800975e:	af00      	add	r7, sp, #0
 8009760:	60f8      	str	r0, [r7, #12]
 8009762:	460b      	mov	r3, r1
 8009764:	607a      	str	r2, [r7, #4]
 8009766:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009768:	7afb      	ldrb	r3, [r7, #11]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d17f      	bne.n	800986e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	3314      	adds	r3, #20
 8009772:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800977a:	2b02      	cmp	r3, #2
 800977c:	d15c      	bne.n	8009838 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	68da      	ldr	r2, [r3, #12]
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	429a      	cmp	r2, r3
 8009788:	d915      	bls.n	80097b6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	68da      	ldr	r2, [r3, #12]
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	1ad2      	subs	r2, r2, r3
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	b29b      	uxth	r3, r3
 800979e:	461a      	mov	r2, r3
 80097a0:	6879      	ldr	r1, [r7, #4]
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f000 fec1 	bl	800a52a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097a8:	2300      	movs	r3, #0
 80097aa:	2200      	movs	r2, #0
 80097ac:	2100      	movs	r1, #0
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f004 fa94 	bl	800dcdc <USBD_LL_PrepareReceive>
 80097b4:	e04e      	b.n	8009854 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	6912      	ldr	r2, [r2, #16]
 80097be:	fbb3 f1f2 	udiv	r1, r3, r2
 80097c2:	fb02 f201 	mul.w	r2, r2, r1
 80097c6:	1a9b      	subs	r3, r3, r2
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d11c      	bne.n	8009806 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	689a      	ldr	r2, [r3, #8]
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d316      	bcc.n	8009806 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	689a      	ldr	r2, [r3, #8]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d20f      	bcs.n	8009806 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80097e6:	2200      	movs	r2, #0
 80097e8:	2100      	movs	r1, #0
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f000 fe9d 	bl	800a52a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097f8:	2300      	movs	r3, #0
 80097fa:	2200      	movs	r2, #0
 80097fc:	2100      	movs	r1, #0
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f004 fa6c 	bl	800dcdc <USBD_LL_PrepareReceive>
 8009804:	e026      	b.n	8009854 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009818:	2b03      	cmp	r3, #3
 800981a:	d105      	bne.n	8009828 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009828:	2180      	movs	r1, #128	; 0x80
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f004 f9aa 	bl	800db84 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f000 fecf 	bl	800a5d4 <USBD_CtlReceiveStatus>
 8009836:	e00d      	b.n	8009854 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800983e:	2b04      	cmp	r3, #4
 8009840:	d004      	beq.n	800984c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009848:	2b00      	cmp	r3, #0
 800984a:	d103      	bne.n	8009854 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800984c:	2180      	movs	r1, #128	; 0x80
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f004 f998 	bl	800db84 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800985a:	2b01      	cmp	r3, #1
 800985c:	d11d      	bne.n	800989a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f7ff fe81 	bl	8009566 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800986c:	e015      	b.n	800989a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00d      	beq.n	8009896 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009880:	2b03      	cmp	r3, #3
 8009882:	d108      	bne.n	8009896 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800988a:	695b      	ldr	r3, [r3, #20]
 800988c:	7afa      	ldrb	r2, [r7, #11]
 800988e:	4611      	mov	r1, r2
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	4798      	blx	r3
 8009894:	e001      	b.n	800989a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009896:	2302      	movs	r3, #2
 8009898:	e000      	b.n	800989c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3718      	adds	r7, #24
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098ac:	2340      	movs	r3, #64	; 0x40
 80098ae:	2200      	movs	r2, #0
 80098b0:	2100      	movs	r1, #0
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f004 f921 	bl	800dafa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2240      	movs	r2, #64	; 0x40
 80098c4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098c8:	2340      	movs	r3, #64	; 0x40
 80098ca:	2200      	movs	r2, #0
 80098cc:	2180      	movs	r1, #128	; 0x80
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f004 f913 	bl	800dafa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2240      	movs	r2, #64	; 0x40
 80098de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009904:	2b00      	cmp	r3, #0
 8009906:	d009      	beq.n	800991c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	6852      	ldr	r2, [r2, #4]
 8009914:	b2d2      	uxtb	r2, r2
 8009916:	4611      	mov	r1, r2
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	4798      	blx	r3
  }

  return USBD_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009926:	b480      	push	{r7}
 8009928:	b083      	sub	sp, #12
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	460b      	mov	r3, r1
 8009930:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	78fa      	ldrb	r2, [r7, #3]
 8009936:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	bc80      	pop	{r7}
 8009942:	4770      	bx	lr

08009944 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2204      	movs	r2, #4
 800995c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	bc80      	pop	{r7}
 800996a:	4770      	bx	lr

0800996c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800997a:	2b04      	cmp	r3, #4
 800997c:	d105      	bne.n	800998a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	bc80      	pop	{r7}
 8009994:	4770      	bx	lr

08009996 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d10b      	bne.n	80099c0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ae:	69db      	ldr	r3, [r3, #28]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d005      	beq.n	80099c0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ba:	69db      	ldr	r3, [r3, #28]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
	...

080099cc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099e2:	2b40      	cmp	r3, #64	; 0x40
 80099e4:	d005      	beq.n	80099f2 <USBD_StdDevReq+0x26>
 80099e6:	2b40      	cmp	r3, #64	; 0x40
 80099e8:	d84f      	bhi.n	8009a8a <USBD_StdDevReq+0xbe>
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d009      	beq.n	8009a02 <USBD_StdDevReq+0x36>
 80099ee:	2b20      	cmp	r3, #32
 80099f0:	d14b      	bne.n	8009a8a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	4798      	blx	r3
      break;
 8009a00:	e048      	b.n	8009a94 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	785b      	ldrb	r3, [r3, #1]
 8009a06:	2b09      	cmp	r3, #9
 8009a08:	d839      	bhi.n	8009a7e <USBD_StdDevReq+0xb2>
 8009a0a:	a201      	add	r2, pc, #4	; (adr r2, 8009a10 <USBD_StdDevReq+0x44>)
 8009a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a10:	08009a61 	.word	0x08009a61
 8009a14:	08009a75 	.word	0x08009a75
 8009a18:	08009a7f 	.word	0x08009a7f
 8009a1c:	08009a6b 	.word	0x08009a6b
 8009a20:	08009a7f 	.word	0x08009a7f
 8009a24:	08009a43 	.word	0x08009a43
 8009a28:	08009a39 	.word	0x08009a39
 8009a2c:	08009a7f 	.word	0x08009a7f
 8009a30:	08009a57 	.word	0x08009a57
 8009a34:	08009a4d 	.word	0x08009a4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f9dc 	bl	8009df8 <USBD_GetDescriptor>
          break;
 8009a40:	e022      	b.n	8009a88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fb3f 	bl	800a0c8 <USBD_SetAddress>
          break;
 8009a4a:	e01d      	b.n	8009a88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fb7e 	bl	800a150 <USBD_SetConfig>
          break;
 8009a54:	e018      	b.n	8009a88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fc07 	bl	800a26c <USBD_GetConfig>
          break;
 8009a5e:	e013      	b.n	8009a88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fc37 	bl	800a2d6 <USBD_GetStatus>
          break;
 8009a68:	e00e      	b.n	8009a88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fc65 	bl	800a33c <USBD_SetFeature>
          break;
 8009a72:	e009      	b.n	8009a88 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fc74 	bl	800a364 <USBD_ClrFeature>
          break;
 8009a7c:	e004      	b.n	8009a88 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fccc 	bl	800a41e <USBD_CtlError>
          break;
 8009a86:	bf00      	nop
      }
      break;
 8009a88:	e004      	b.n	8009a94 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fcc6 	bl	800a41e <USBD_CtlError>
      break;
 8009a92:	bf00      	nop
  }

  return ret;
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop

08009aa0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ab6:	2b40      	cmp	r3, #64	; 0x40
 8009ab8:	d005      	beq.n	8009ac6 <USBD_StdItfReq+0x26>
 8009aba:	2b40      	cmp	r3, #64	; 0x40
 8009abc:	d82e      	bhi.n	8009b1c <USBD_StdItfReq+0x7c>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <USBD_StdItfReq+0x26>
 8009ac2:	2b20      	cmp	r3, #32
 8009ac4:	d12a      	bne.n	8009b1c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009acc:	3b01      	subs	r3, #1
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d81d      	bhi.n	8009b0e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	889b      	ldrh	r3, [r3, #4]
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d813      	bhi.n	8009b04 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	4798      	blx	r3
 8009aea:	4603      	mov	r3, r0
 8009aec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	88db      	ldrh	r3, [r3, #6]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d110      	bne.n	8009b18 <USBD_StdItfReq+0x78>
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10d      	bne.n	8009b18 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fd56 	bl	800a5ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b02:	e009      	b.n	8009b18 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fc89 	bl	800a41e <USBD_CtlError>
          break;
 8009b0c:	e004      	b.n	8009b18 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fc84 	bl	800a41e <USBD_CtlError>
          break;
 8009b16:	e000      	b.n	8009b1a <USBD_StdItfReq+0x7a>
          break;
 8009b18:	bf00      	nop
      }
      break;
 8009b1a:	e004      	b.n	8009b26 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fc7d 	bl	800a41e <USBD_CtlError>
      break;
 8009b24:	bf00      	nop
  }

  return USBD_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	889b      	ldrh	r3, [r3, #4]
 8009b42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b4c:	2b40      	cmp	r3, #64	; 0x40
 8009b4e:	d007      	beq.n	8009b60 <USBD_StdEPReq+0x30>
 8009b50:	2b40      	cmp	r3, #64	; 0x40
 8009b52:	f200 8146 	bhi.w	8009de2 <USBD_StdEPReq+0x2b2>
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00a      	beq.n	8009b70 <USBD_StdEPReq+0x40>
 8009b5a:	2b20      	cmp	r3, #32
 8009b5c:	f040 8141 	bne.w	8009de2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	4798      	blx	r3
      break;
 8009b6e:	e13d      	b.n	8009dec <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b78:	2b20      	cmp	r3, #32
 8009b7a:	d10a      	bne.n	8009b92 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	4798      	blx	r3
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
 8009b90:	e12d      	b.n	8009dee <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	785b      	ldrb	r3, [r3, #1]
 8009b96:	2b03      	cmp	r3, #3
 8009b98:	d007      	beq.n	8009baa <USBD_StdEPReq+0x7a>
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	f300 811b 	bgt.w	8009dd6 <USBD_StdEPReq+0x2a6>
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d072      	beq.n	8009c8a <USBD_StdEPReq+0x15a>
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d03a      	beq.n	8009c1e <USBD_StdEPReq+0xee>
 8009ba8:	e115      	b.n	8009dd6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d002      	beq.n	8009bba <USBD_StdEPReq+0x8a>
 8009bb4:	2b03      	cmp	r3, #3
 8009bb6:	d015      	beq.n	8009be4 <USBD_StdEPReq+0xb4>
 8009bb8:	e02b      	b.n	8009c12 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bba:	7bbb      	ldrb	r3, [r7, #14]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00c      	beq.n	8009bda <USBD_StdEPReq+0xaa>
 8009bc0:	7bbb      	ldrb	r3, [r7, #14]
 8009bc2:	2b80      	cmp	r3, #128	; 0x80
 8009bc4:	d009      	beq.n	8009bda <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009bc6:	7bbb      	ldrb	r3, [r7, #14]
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f003 ffda 	bl	800db84 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009bd0:	2180      	movs	r1, #128	; 0x80
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f003 ffd6 	bl	800db84 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bd8:	e020      	b.n	8009c1c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fc1e 	bl	800a41e <USBD_CtlError>
              break;
 8009be2:	e01b      	b.n	8009c1c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	885b      	ldrh	r3, [r3, #2]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10e      	bne.n	8009c0a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00b      	beq.n	8009c0a <USBD_StdEPReq+0xda>
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
 8009bf4:	2b80      	cmp	r3, #128	; 0x80
 8009bf6:	d008      	beq.n	8009c0a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	88db      	ldrh	r3, [r3, #6]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d104      	bne.n	8009c0a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f003 ffbd 	bl	800db84 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fccf 	bl	800a5ae <USBD_CtlSendStatus>

              break;
 8009c10:	e004      	b.n	8009c1c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fc02 	bl	800a41e <USBD_CtlError>
              break;
 8009c1a:	bf00      	nop
          }
          break;
 8009c1c:	e0e0      	b.n	8009de0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d002      	beq.n	8009c2e <USBD_StdEPReq+0xfe>
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	d015      	beq.n	8009c58 <USBD_StdEPReq+0x128>
 8009c2c:	e026      	b.n	8009c7c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c2e:	7bbb      	ldrb	r3, [r7, #14]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00c      	beq.n	8009c4e <USBD_StdEPReq+0x11e>
 8009c34:	7bbb      	ldrb	r3, [r7, #14]
 8009c36:	2b80      	cmp	r3, #128	; 0x80
 8009c38:	d009      	beq.n	8009c4e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009c3a:	7bbb      	ldrb	r3, [r7, #14]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f003 ffa0 	bl	800db84 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009c44:	2180      	movs	r1, #128	; 0x80
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f003 ff9c 	bl	800db84 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c4c:	e01c      	b.n	8009c88 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fbe4 	bl	800a41e <USBD_CtlError>
              break;
 8009c56:	e017      	b.n	8009c88 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	885b      	ldrh	r3, [r3, #2]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d112      	bne.n	8009c86 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c60:	7bbb      	ldrb	r3, [r7, #14]
 8009c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d004      	beq.n	8009c74 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f003 ffa7 	bl	800dbc2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fc9a 	bl	800a5ae <USBD_CtlSendStatus>
              }
              break;
 8009c7a:	e004      	b.n	8009c86 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fbcd 	bl	800a41e <USBD_CtlError>
              break;
 8009c84:	e000      	b.n	8009c88 <USBD_StdEPReq+0x158>
              break;
 8009c86:	bf00      	nop
          }
          break;
 8009c88:	e0aa      	b.n	8009de0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d002      	beq.n	8009c9a <USBD_StdEPReq+0x16a>
 8009c94:	2b03      	cmp	r3, #3
 8009c96:	d032      	beq.n	8009cfe <USBD_StdEPReq+0x1ce>
 8009c98:	e097      	b.n	8009dca <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c9a:	7bbb      	ldrb	r3, [r7, #14]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d007      	beq.n	8009cb0 <USBD_StdEPReq+0x180>
 8009ca0:	7bbb      	ldrb	r3, [r7, #14]
 8009ca2:	2b80      	cmp	r3, #128	; 0x80
 8009ca4:	d004      	beq.n	8009cb0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fbb8 	bl	800a41e <USBD_CtlError>
                break;
 8009cae:	e091      	b.n	8009dd4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	da0b      	bge.n	8009cd0 <USBD_StdEPReq+0x1a0>
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	3310      	adds	r3, #16
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	4413      	add	r3, r2
 8009ccc:	3304      	adds	r3, #4
 8009cce:	e00b      	b.n	8009ce8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
 8009cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2200      	movs	r2, #0
 8009cee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fbfb 	bl	800a4f2 <USBD_CtlSendData>
              break;
 8009cfc:	e06a      	b.n	8009dd4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009cfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	da11      	bge.n	8009d2a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
 8009d08:	f003 020f 	and.w	r2, r3, #15
 8009d0c:	6879      	ldr	r1, [r7, #4]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	440b      	add	r3, r1
 8009d18:	3318      	adds	r3, #24
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d117      	bne.n	8009d50 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fb7b 	bl	800a41e <USBD_CtlError>
                  break;
 8009d28:	e054      	b.n	8009dd4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	f003 020f 	and.w	r2, r3, #15
 8009d30:	6879      	ldr	r1, [r7, #4]
 8009d32:	4613      	mov	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	440b      	add	r3, r1
 8009d3c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d104      	bne.n	8009d50 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fb68 	bl	800a41e <USBD_CtlError>
                  break;
 8009d4e:	e041      	b.n	8009dd4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	da0b      	bge.n	8009d70 <USBD_StdEPReq+0x240>
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
 8009d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d5e:	4613      	mov	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	3310      	adds	r3, #16
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	e00b      	b.n	8009d88 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d70:	7bbb      	ldrb	r3, [r7, #14]
 8009d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d76:	4613      	mov	r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	4413      	add	r3, r2
 8009d86:	3304      	adds	r3, #4
 8009d88:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d8a:	7bbb      	ldrb	r3, [r7, #14]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d002      	beq.n	8009d96 <USBD_StdEPReq+0x266>
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	2b80      	cmp	r3, #128	; 0x80
 8009d94:	d103      	bne.n	8009d9e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	601a      	str	r2, [r3, #0]
 8009d9c:	e00e      	b.n	8009dbc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009d9e:	7bbb      	ldrb	r3, [r7, #14]
 8009da0:	4619      	mov	r1, r3
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f003 ff2c 	bl	800dc00 <USBD_LL_IsStallEP>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	2201      	movs	r2, #1
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	e002      	b.n	8009dbc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2200      	movs	r2, #0
 8009dba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fb95 	bl	800a4f2 <USBD_CtlSendData>
              break;
 8009dc8:	e004      	b.n	8009dd4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fb26 	bl	800a41e <USBD_CtlError>
              break;
 8009dd2:	bf00      	nop
          }
          break;
 8009dd4:	e004      	b.n	8009de0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fb20 	bl	800a41e <USBD_CtlError>
          break;
 8009dde:	bf00      	nop
      }
      break;
 8009de0:	e004      	b.n	8009dec <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fb1a 	bl	800a41e <USBD_CtlError>
      break;
 8009dea:	bf00      	nop
  }

  return ret;
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
	...

08009df8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	885b      	ldrh	r3, [r3, #2]
 8009e12:	0a1b      	lsrs	r3, r3, #8
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	3b01      	subs	r3, #1
 8009e18:	2b06      	cmp	r3, #6
 8009e1a:	f200 8128 	bhi.w	800a06e <USBD_GetDescriptor+0x276>
 8009e1e:	a201      	add	r2, pc, #4	; (adr r2, 8009e24 <USBD_GetDescriptor+0x2c>)
 8009e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e24:	08009e41 	.word	0x08009e41
 8009e28:	08009e59 	.word	0x08009e59
 8009e2c:	08009e99 	.word	0x08009e99
 8009e30:	0800a06f 	.word	0x0800a06f
 8009e34:	0800a06f 	.word	0x0800a06f
 8009e38:	0800a00f 	.word	0x0800a00f
 8009e3c:	0800a03b 	.word	0x0800a03b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	7c12      	ldrb	r2, [r2, #16]
 8009e4c:	f107 0108 	add.w	r1, r7, #8
 8009e50:	4610      	mov	r0, r2
 8009e52:	4798      	blx	r3
 8009e54:	60f8      	str	r0, [r7, #12]
      break;
 8009e56:	e112      	b.n	800a07e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	7c1b      	ldrb	r3, [r3, #16]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10d      	bne.n	8009e7c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e68:	f107 0208 	add.w	r2, r7, #8
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	4798      	blx	r3
 8009e70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3301      	adds	r3, #1
 8009e76:	2202      	movs	r2, #2
 8009e78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e7a:	e100      	b.n	800a07e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e84:	f107 0208 	add.w	r2, r7, #8
 8009e88:	4610      	mov	r0, r2
 8009e8a:	4798      	blx	r3
 8009e8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3301      	adds	r3, #1
 8009e92:	2202      	movs	r2, #2
 8009e94:	701a      	strb	r2, [r3, #0]
      break;
 8009e96:	e0f2      	b.n	800a07e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	885b      	ldrh	r3, [r3, #2]
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b05      	cmp	r3, #5
 8009ea0:	f200 80ac 	bhi.w	8009ffc <USBD_GetDescriptor+0x204>
 8009ea4:	a201      	add	r2, pc, #4	; (adr r2, 8009eac <USBD_GetDescriptor+0xb4>)
 8009ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eaa:	bf00      	nop
 8009eac:	08009ec5 	.word	0x08009ec5
 8009eb0:	08009ef9 	.word	0x08009ef9
 8009eb4:	08009f2d 	.word	0x08009f2d
 8009eb8:	08009f61 	.word	0x08009f61
 8009ebc:	08009f95 	.word	0x08009f95
 8009ec0:	08009fc9 	.word	0x08009fc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00b      	beq.n	8009ee8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	7c12      	ldrb	r2, [r2, #16]
 8009edc:	f107 0108 	add.w	r1, r7, #8
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	4798      	blx	r3
 8009ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ee6:	e091      	b.n	800a00c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ee8:	6839      	ldr	r1, [r7, #0]
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fa97 	bl	800a41e <USBD_CtlError>
            err++;
 8009ef0:	7afb      	ldrb	r3, [r7, #11]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ef6:	e089      	b.n	800a00c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00b      	beq.n	8009f1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	7c12      	ldrb	r2, [r2, #16]
 8009f10:	f107 0108 	add.w	r1, r7, #8
 8009f14:	4610      	mov	r0, r2
 8009f16:	4798      	blx	r3
 8009f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f1a:	e077      	b.n	800a00c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f1c:	6839      	ldr	r1, [r7, #0]
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fa7d 	bl	800a41e <USBD_CtlError>
            err++;
 8009f24:	7afb      	ldrb	r3, [r7, #11]
 8009f26:	3301      	adds	r3, #1
 8009f28:	72fb      	strb	r3, [r7, #11]
          break;
 8009f2a:	e06f      	b.n	800a00c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00b      	beq.n	8009f50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	7c12      	ldrb	r2, [r2, #16]
 8009f44:	f107 0108 	add.w	r1, r7, #8
 8009f48:	4610      	mov	r0, r2
 8009f4a:	4798      	blx	r3
 8009f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f4e:	e05d      	b.n	800a00c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f50:	6839      	ldr	r1, [r7, #0]
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 fa63 	bl	800a41e <USBD_CtlError>
            err++;
 8009f58:	7afb      	ldrb	r3, [r7, #11]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f5e:	e055      	b.n	800a00c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00b      	beq.n	8009f84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	7c12      	ldrb	r2, [r2, #16]
 8009f78:	f107 0108 	add.w	r1, r7, #8
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	4798      	blx	r3
 8009f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f82:	e043      	b.n	800a00c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 fa49 	bl	800a41e <USBD_CtlError>
            err++;
 8009f8c:	7afb      	ldrb	r3, [r7, #11]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	72fb      	strb	r3, [r7, #11]
          break;
 8009f92:	e03b      	b.n	800a00c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f9a:	695b      	ldr	r3, [r3, #20]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00b      	beq.n	8009fb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	7c12      	ldrb	r2, [r2, #16]
 8009fac:	f107 0108 	add.w	r1, r7, #8
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	4798      	blx	r3
 8009fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fb6:	e029      	b.n	800a00c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fa2f 	bl	800a41e <USBD_CtlError>
            err++;
 8009fc0:	7afb      	ldrb	r3, [r7, #11]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8009fc6:	e021      	b.n	800a00c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00b      	beq.n	8009fec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	7c12      	ldrb	r2, [r2, #16]
 8009fe0:	f107 0108 	add.w	r1, r7, #8
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	4798      	blx	r3
 8009fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fea:	e00f      	b.n	800a00c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 fa15 	bl	800a41e <USBD_CtlError>
            err++;
 8009ff4:	7afb      	ldrb	r3, [r7, #11]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8009ffa:	e007      	b.n	800a00c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009ffc:	6839      	ldr	r1, [r7, #0]
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fa0d 	bl	800a41e <USBD_CtlError>
          err++;
 800a004:	7afb      	ldrb	r3, [r7, #11]
 800a006:	3301      	adds	r3, #1
 800a008:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a00a:	e038      	b.n	800a07e <USBD_GetDescriptor+0x286>
 800a00c:	e037      	b.n	800a07e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	7c1b      	ldrb	r3, [r3, #16]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d109      	bne.n	800a02a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a01c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a01e:	f107 0208 	add.w	r2, r7, #8
 800a022:	4610      	mov	r0, r2
 800a024:	4798      	blx	r3
 800a026:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a028:	e029      	b.n	800a07e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a02a:	6839      	ldr	r1, [r7, #0]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 f9f6 	bl	800a41e <USBD_CtlError>
        err++;
 800a032:	7afb      	ldrb	r3, [r7, #11]
 800a034:	3301      	adds	r3, #1
 800a036:	72fb      	strb	r3, [r7, #11]
      break;
 800a038:	e021      	b.n	800a07e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	7c1b      	ldrb	r3, [r3, #16]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10d      	bne.n	800a05e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04a:	f107 0208 	add.w	r2, r7, #8
 800a04e:	4610      	mov	r0, r2
 800a050:	4798      	blx	r3
 800a052:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	3301      	adds	r3, #1
 800a058:	2207      	movs	r2, #7
 800a05a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a05c:	e00f      	b.n	800a07e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a05e:	6839      	ldr	r1, [r7, #0]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f9dc 	bl	800a41e <USBD_CtlError>
        err++;
 800a066:	7afb      	ldrb	r3, [r7, #11]
 800a068:	3301      	adds	r3, #1
 800a06a:	72fb      	strb	r3, [r7, #11]
      break;
 800a06c:	e007      	b.n	800a07e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f9d4 	bl	800a41e <USBD_CtlError>
      err++;
 800a076:	7afb      	ldrb	r3, [r7, #11]
 800a078:	3301      	adds	r3, #1
 800a07a:	72fb      	strb	r3, [r7, #11]
      break;
 800a07c:	bf00      	nop
  }

  if (err != 0U)
 800a07e:	7afb      	ldrb	r3, [r7, #11]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d11c      	bne.n	800a0be <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a084:	893b      	ldrh	r3, [r7, #8]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d011      	beq.n	800a0ae <USBD_GetDescriptor+0x2b6>
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	88db      	ldrh	r3, [r3, #6]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00d      	beq.n	800a0ae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	88da      	ldrh	r2, [r3, #6]
 800a096:	893b      	ldrh	r3, [r7, #8]
 800a098:	4293      	cmp	r3, r2
 800a09a:	bf28      	it	cs
 800a09c:	4613      	movcs	r3, r2
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0a2:	893b      	ldrh	r3, [r7, #8]
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	68f9      	ldr	r1, [r7, #12]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fa22 	bl	800a4f2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	88db      	ldrh	r3, [r3, #6]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d104      	bne.n	800a0c0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fa79 	bl	800a5ae <USBD_CtlSendStatus>
 800a0bc:	e000      	b.n	800a0c0 <USBD_GetDescriptor+0x2c8>
    return;
 800a0be:	bf00      	nop
    }
  }
}
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop

0800a0c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	889b      	ldrh	r3, [r3, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d130      	bne.n	800a13c <USBD_SetAddress+0x74>
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	88db      	ldrh	r3, [r3, #6]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d12c      	bne.n	800a13c <USBD_SetAddress+0x74>
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	885b      	ldrh	r3, [r3, #2]
 800a0e6:	2b7f      	cmp	r3, #127	; 0x7f
 800a0e8:	d828      	bhi.n	800a13c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	885b      	ldrh	r3, [r3, #2]
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	d104      	bne.n	800a10a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a100:	6839      	ldr	r1, [r7, #0]
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f98b 	bl	800a41e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a108:	e01d      	b.n	800a146 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	7bfa      	ldrb	r2, [r7, #15]
 800a10e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a112:	7bfb      	ldrb	r3, [r7, #15]
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f003 fd9e 	bl	800dc58 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fa46 	bl	800a5ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a122:	7bfb      	ldrb	r3, [r7, #15]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d004      	beq.n	800a132 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a130:	e009      	b.n	800a146 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a13a:	e004      	b.n	800a146 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f96d 	bl	800a41e <USBD_CtlError>
  }
}
 800a144:	bf00      	nop
 800a146:	bf00      	nop
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
	...

0800a150 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	885b      	ldrh	r3, [r3, #2]
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	4b41      	ldr	r3, [pc, #260]	; (800a268 <USBD_SetConfig+0x118>)
 800a162:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a164:	4b40      	ldr	r3, [pc, #256]	; (800a268 <USBD_SetConfig+0x118>)
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d904      	bls.n	800a176 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a16c:	6839      	ldr	r1, [r7, #0]
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f955 	bl	800a41e <USBD_CtlError>
 800a174:	e075      	b.n	800a262 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d002      	beq.n	800a186 <USBD_SetConfig+0x36>
 800a180:	2b03      	cmp	r3, #3
 800a182:	d023      	beq.n	800a1cc <USBD_SetConfig+0x7c>
 800a184:	e062      	b.n	800a24c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a186:	4b38      	ldr	r3, [pc, #224]	; (800a268 <USBD_SetConfig+0x118>)
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d01a      	beq.n	800a1c4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a18e:	4b36      	ldr	r3, [pc, #216]	; (800a268 <USBD_SetConfig+0x118>)
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	461a      	mov	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2203      	movs	r2, #3
 800a19c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a1a0:	4b31      	ldr	r3, [pc, #196]	; (800a268 <USBD_SetConfig+0x118>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7ff f9e7 	bl	800957a <USBD_SetClassConfig>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	d104      	bne.n	800a1bc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a1b2:	6839      	ldr	r1, [r7, #0]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f932 	bl	800a41e <USBD_CtlError>
            return;
 800a1ba:	e052      	b.n	800a262 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f9f6 	bl	800a5ae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a1c2:	e04e      	b.n	800a262 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f9f2 	bl	800a5ae <USBD_CtlSendStatus>
        break;
 800a1ca:	e04a      	b.n	800a262 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a1cc:	4b26      	ldr	r3, [pc, #152]	; (800a268 <USBD_SetConfig+0x118>)
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d112      	bne.n	800a1fa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a1dc:	4b22      	ldr	r3, [pc, #136]	; (800a268 <USBD_SetConfig+0x118>)
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a1e6:	4b20      	ldr	r3, [pc, #128]	; (800a268 <USBD_SetConfig+0x118>)
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7ff f9e3 	bl	80095b8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f9db 	bl	800a5ae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a1f8:	e033      	b.n	800a262 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a1fa:	4b1b      	ldr	r3, [pc, #108]	; (800a268 <USBD_SetConfig+0x118>)
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	461a      	mov	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	429a      	cmp	r2, r3
 800a206:	d01d      	beq.n	800a244 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	4619      	mov	r1, r3
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7ff f9d1 	bl	80095b8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a216:	4b14      	ldr	r3, [pc, #80]	; (800a268 <USBD_SetConfig+0x118>)
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	461a      	mov	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a220:	4b11      	ldr	r3, [pc, #68]	; (800a268 <USBD_SetConfig+0x118>)
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	4619      	mov	r1, r3
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7ff f9a7 	bl	800957a <USBD_SetClassConfig>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d104      	bne.n	800a23c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a232:	6839      	ldr	r1, [r7, #0]
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f8f2 	bl	800a41e <USBD_CtlError>
            return;
 800a23a:	e012      	b.n	800a262 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 f9b6 	bl	800a5ae <USBD_CtlSendStatus>
        break;
 800a242:	e00e      	b.n	800a262 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f9b2 	bl	800a5ae <USBD_CtlSendStatus>
        break;
 800a24a:	e00a      	b.n	800a262 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a24c:	6839      	ldr	r1, [r7, #0]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f8e5 	bl	800a41e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a254:	4b04      	ldr	r3, [pc, #16]	; (800a268 <USBD_SetConfig+0x118>)
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	4619      	mov	r1, r3
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7ff f9ac 	bl	80095b8 <USBD_ClrClassConfig>
        break;
 800a260:	bf00      	nop
    }
  }
}
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	200001b3 	.word	0x200001b3

0800a26c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	88db      	ldrh	r3, [r3, #6]
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d004      	beq.n	800a288 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a27e:	6839      	ldr	r1, [r7, #0]
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 f8cc 	bl	800a41e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a286:	e022      	b.n	800a2ce <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a28e:	2b02      	cmp	r3, #2
 800a290:	dc02      	bgt.n	800a298 <USBD_GetConfig+0x2c>
 800a292:	2b00      	cmp	r3, #0
 800a294:	dc03      	bgt.n	800a29e <USBD_GetConfig+0x32>
 800a296:	e015      	b.n	800a2c4 <USBD_GetConfig+0x58>
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d00b      	beq.n	800a2b4 <USBD_GetConfig+0x48>
 800a29c:	e012      	b.n	800a2c4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f920 	bl	800a4f2 <USBD_CtlSendData>
        break;
 800a2b2:	e00c      	b.n	800a2ce <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f918 	bl	800a4f2 <USBD_CtlSendData>
        break;
 800a2c2:	e004      	b.n	800a2ce <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f8a9 	bl	800a41e <USBD_CtlError>
        break;
 800a2cc:	bf00      	nop
}
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b082      	sub	sp, #8
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d81e      	bhi.n	800a32a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	88db      	ldrh	r3, [r3, #6]
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d004      	beq.n	800a2fe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a2f4:	6839      	ldr	r1, [r7, #0]
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f891 	bl	800a41e <USBD_CtlError>
        break;
 800a2fc:	e01a      	b.n	800a334 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2201      	movs	r2, #1
 800a302:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d005      	beq.n	800a31a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	f043 0202 	orr.w	r2, r3, #2
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	330c      	adds	r3, #12
 800a31e:	2202      	movs	r2, #2
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f8e5 	bl	800a4f2 <USBD_CtlSendData>
      break;
 800a328:	e004      	b.n	800a334 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f876 	bl	800a41e <USBD_CtlError>
      break;
 800a332:	bf00      	nop
  }
}
 800a334:	bf00      	nop
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	885b      	ldrh	r3, [r3, #2]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d106      	bne.n	800a35c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2201      	movs	r2, #1
 800a352:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f929 	bl	800a5ae <USBD_CtlSendStatus>
  }
}
 800a35c:	bf00      	nop
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a374:	3b01      	subs	r3, #1
 800a376:	2b02      	cmp	r3, #2
 800a378:	d80b      	bhi.n	800a392 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	885b      	ldrh	r3, [r3, #2]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d10c      	bne.n	800a39c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f90f 	bl	800a5ae <USBD_CtlSendStatus>
      }
      break;
 800a390:	e004      	b.n	800a39c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f842 	bl	800a41e <USBD_CtlError>
      break;
 800a39a:	e000      	b.n	800a39e <USBD_ClrFeature+0x3a>
      break;
 800a39c:	bf00      	nop
  }
}
 800a39e:	bf00      	nop
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	781a      	ldrb	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	785a      	ldrb	r2, [r3, #1]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	3302      	adds	r3, #2
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	3303      	adds	r3, #3
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	021b      	lsls	r3, r3, #8
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	4413      	add	r3, r2
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	3304      	adds	r3, #4
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	3305      	adds	r3, #5
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	021b      	lsls	r3, r3, #8
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	4413      	add	r3, r2
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	3306      	adds	r3, #6
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	3307      	adds	r3, #7
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	b29b      	uxth	r3, r3
 800a408:	021b      	lsls	r3, r3, #8
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	4413      	add	r3, r2
 800a40e:	b29a      	uxth	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	80da      	strh	r2, [r3, #6]

}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	bc80      	pop	{r7}
 800a41c:	4770      	bx	lr

0800a41e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b082      	sub	sp, #8
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a428:	2180      	movs	r1, #128	; 0x80
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f003 fbaa 	bl	800db84 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a430:	2100      	movs	r1, #0
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f003 fba6 	bl	800db84 <USBD_LL_StallEP>
}
 800a438:	bf00      	nop
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a44c:	2300      	movs	r3, #0
 800a44e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d032      	beq.n	800a4bc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f000 f834 	bl	800a4c4 <USBD_GetLen>
 800a45c:	4603      	mov	r3, r0
 800a45e:	3301      	adds	r3, #1
 800a460:	b29b      	uxth	r3, r3
 800a462:	005b      	lsls	r3, r3, #1
 800a464:	b29a      	uxth	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
 800a46c:	1c5a      	adds	r2, r3, #1
 800a46e:	75fa      	strb	r2, [r7, #23]
 800a470:	461a      	mov	r2, r3
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	4413      	add	r3, r2
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	7812      	ldrb	r2, [r2, #0]
 800a47a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a47c:	7dfb      	ldrb	r3, [r7, #23]
 800a47e:	1c5a      	adds	r2, r3, #1
 800a480:	75fa      	strb	r2, [r7, #23]
 800a482:	461a      	mov	r2, r3
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	4413      	add	r3, r2
 800a488:	2203      	movs	r2, #3
 800a48a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a48c:	e012      	b.n	800a4b4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	1c5a      	adds	r2, r3, #1
 800a492:	60fa      	str	r2, [r7, #12]
 800a494:	7dfa      	ldrb	r2, [r7, #23]
 800a496:	1c51      	adds	r1, r2, #1
 800a498:	75f9      	strb	r1, [r7, #23]
 800a49a:	4611      	mov	r1, r2
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	440a      	add	r2, r1
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
 800a4a6:	1c5a      	adds	r2, r3, #1
 800a4a8:	75fa      	strb	r2, [r7, #23]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1e8      	bne.n	800a48e <USBD_GetString+0x4e>
    }
  }
}
 800a4bc:	bf00      	nop
 800a4be:	3718      	adds	r7, #24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a4d0:	e005      	b.n	800a4de <USBD_GetLen+0x1a>
  {
    len++;
 800a4d2:	7bfb      	ldrb	r3, [r7, #15]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1f5      	bne.n	800a4d2 <USBD_GetLen+0xe>
  }

  return len;
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3714      	adds	r7, #20
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bc80      	pop	{r7}
 800a4f0:	4770      	bx	lr

0800a4f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	60f8      	str	r0, [r7, #12]
 800a4fa:	60b9      	str	r1, [r7, #8]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2202      	movs	r2, #2
 800a504:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a508:	88fa      	ldrh	r2, [r7, #6]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a50e:	88fa      	ldrh	r2, [r7, #6]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a514:	88fb      	ldrh	r3, [r7, #6]
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	2100      	movs	r1, #0
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f003 fbbb 	bl	800dc96 <USBD_LL_Transmit>

  return USBD_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b084      	sub	sp, #16
 800a52e:	af00      	add	r7, sp, #0
 800a530:	60f8      	str	r0, [r7, #12]
 800a532:	60b9      	str	r1, [r7, #8]
 800a534:	4613      	mov	r3, r2
 800a536:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a538:	88fb      	ldrh	r3, [r7, #6]
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	2100      	movs	r1, #0
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f003 fba9 	bl	800dc96 <USBD_LL_Transmit>

  return USBD_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b084      	sub	sp, #16
 800a552:	af00      	add	r7, sp, #0
 800a554:	60f8      	str	r0, [r7, #12]
 800a556:	60b9      	str	r1, [r7, #8]
 800a558:	4613      	mov	r3, r2
 800a55a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2203      	movs	r2, #3
 800a560:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a564:	88fa      	ldrh	r2, [r7, #6]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a56c:	88fa      	ldrh	r2, [r7, #6]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a574:	88fb      	ldrh	r3, [r7, #6]
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	2100      	movs	r1, #0
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f003 fbae 	bl	800dcdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	60f8      	str	r0, [r7, #12]
 800a592:	60b9      	str	r1, [r7, #8]
 800a594:	4613      	mov	r3, r2
 800a596:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a598:	88fb      	ldrh	r3, [r7, #6]
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	2100      	movs	r1, #0
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f003 fb9c 	bl	800dcdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2204      	movs	r2, #4
 800a5ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a5be:	2300      	movs	r3, #0
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f003 fb66 	bl	800dc96 <USBD_LL_Transmit>

  return USBD_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2205      	movs	r2, #5
 800a5e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f003 fb76 	bl	800dcdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
	...

0800a5fc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a602:	f3ef 8305 	mrs	r3, IPSR
 800a606:	60bb      	str	r3, [r7, #8]
  return(result);
 800a608:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10f      	bne.n	800a62e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a60e:	f3ef 8310 	mrs	r3, PRIMASK
 800a612:	607b      	str	r3, [r7, #4]
  return(result);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d109      	bne.n	800a62e <osKernelInitialize+0x32>
 800a61a:	4b10      	ldr	r3, [pc, #64]	; (800a65c <osKernelInitialize+0x60>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d109      	bne.n	800a636 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a622:	f3ef 8311 	mrs	r3, BASEPRI
 800a626:	603b      	str	r3, [r7, #0]
  return(result);
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d003      	beq.n	800a636 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a62e:	f06f 0305 	mvn.w	r3, #5
 800a632:	60fb      	str	r3, [r7, #12]
 800a634:	e00c      	b.n	800a650 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a636:	4b09      	ldr	r3, [pc, #36]	; (800a65c <osKernelInitialize+0x60>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d105      	bne.n	800a64a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800a63e:	4b07      	ldr	r3, [pc, #28]	; (800a65c <osKernelInitialize+0x60>)
 800a640:	2201      	movs	r2, #1
 800a642:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a644:	2300      	movs	r3, #0
 800a646:	60fb      	str	r3, [r7, #12]
 800a648:	e002      	b.n	800a650 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a64a:	f04f 33ff 	mov.w	r3, #4294967295
 800a64e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a650:	68fb      	ldr	r3, [r7, #12]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	bc80      	pop	{r7}
 800a65a:	4770      	bx	lr
 800a65c:	200001b4 	.word	0x200001b4

0800a660 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a666:	f3ef 8305 	mrs	r3, IPSR
 800a66a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a66c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10f      	bne.n	800a692 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a672:	f3ef 8310 	mrs	r3, PRIMASK
 800a676:	607b      	str	r3, [r7, #4]
  return(result);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d109      	bne.n	800a692 <osKernelStart+0x32>
 800a67e:	4b11      	ldr	r3, [pc, #68]	; (800a6c4 <osKernelStart+0x64>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b02      	cmp	r3, #2
 800a684:	d109      	bne.n	800a69a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a686:	f3ef 8311 	mrs	r3, BASEPRI
 800a68a:	603b      	str	r3, [r7, #0]
  return(result);
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d003      	beq.n	800a69a <osKernelStart+0x3a>
    stat = osErrorISR;
 800a692:	f06f 0305 	mvn.w	r3, #5
 800a696:	60fb      	str	r3, [r7, #12]
 800a698:	e00e      	b.n	800a6b8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800a69a:	4b0a      	ldr	r3, [pc, #40]	; (800a6c4 <osKernelStart+0x64>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d107      	bne.n	800a6b2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800a6a2:	4b08      	ldr	r3, [pc, #32]	; (800a6c4 <osKernelStart+0x64>)
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a6a8:	f001 f9ba 	bl	800ba20 <vTaskStartScheduler>
      stat = osOK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	60fb      	str	r3, [r7, #12]
 800a6b0:	e002      	b.n	800a6b8 <osKernelStart+0x58>
    } else {
      stat = osError;
 800a6b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	200001b4 	.word	0x200001b4

0800a6c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b092      	sub	sp, #72	; 0x48
 800a6cc:	af04      	add	r7, sp, #16
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6d8:	f3ef 8305 	mrs	r3, IPSR
 800a6dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f040 8094 	bne.w	800a80e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6e6:	f3ef 8310 	mrs	r3, PRIMASK
 800a6ea:	623b      	str	r3, [r7, #32]
  return(result);
 800a6ec:	6a3b      	ldr	r3, [r7, #32]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f040 808d 	bne.w	800a80e <osThreadNew+0x146>
 800a6f4:	4b48      	ldr	r3, [pc, #288]	; (800a818 <osThreadNew+0x150>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d106      	bne.n	800a70a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a6fc:	f3ef 8311 	mrs	r3, BASEPRI
 800a700:	61fb      	str	r3, [r7, #28]
  return(result);
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	2b00      	cmp	r3, #0
 800a706:	f040 8082 	bne.w	800a80e <osThreadNew+0x146>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d07e      	beq.n	800a80e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800a710:	2380      	movs	r3, #128	; 0x80
 800a712:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800a714:	2318      	movs	r3, #24
 800a716:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800a718:	2300      	movs	r3, #0
 800a71a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800a71c:	f107 031b 	add.w	r3, r7, #27
 800a720:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800a722:	f04f 33ff 	mov.w	r3, #4294967295
 800a726:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d045      	beq.n	800a7ba <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d002      	beq.n	800a73c <osThreadNew+0x74>
        name = attr->name;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d002      	beq.n	800a74a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d008      	beq.n	800a762 <osThreadNew+0x9a>
 800a750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a752:	2b38      	cmp	r3, #56	; 0x38
 800a754:	d805      	bhi.n	800a762 <osThreadNew+0x9a>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	f003 0301 	and.w	r3, r3, #1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <osThreadNew+0x9e>
        return (NULL);
 800a762:	2300      	movs	r3, #0
 800a764:	e054      	b.n	800a810 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	695b      	ldr	r3, [r3, #20]
 800a772:	089b      	lsrs	r3, r3, #2
 800a774:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00e      	beq.n	800a79c <osThreadNew+0xd4>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	2b5b      	cmp	r3, #91	; 0x5b
 800a784:	d90a      	bls.n	800a79c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d006      	beq.n	800a79c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d002      	beq.n	800a79c <osThreadNew+0xd4>
        mem = 1;
 800a796:	2301      	movs	r3, #1
 800a798:	62bb      	str	r3, [r7, #40]	; 0x28
 800a79a:	e010      	b.n	800a7be <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10c      	bne.n	800a7be <osThreadNew+0xf6>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d108      	bne.n	800a7be <osThreadNew+0xf6>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d104      	bne.n	800a7be <osThreadNew+0xf6>
          mem = 0;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7b8:	e001      	b.n	800a7be <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d110      	bne.n	800a7e6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7cc:	9202      	str	r2, [sp, #8]
 800a7ce:	9301      	str	r3, [sp, #4]
 800a7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f000 fed6 	bl	800b58c <xTaskCreateStatic>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	617b      	str	r3, [r7, #20]
 800a7e4:	e013      	b.n	800a80e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800a7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d110      	bne.n	800a80e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	f107 0314 	add.w	r3, r7, #20
 800a7f4:	9301      	str	r3, [sp, #4]
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f000 ff20 	bl	800b644 <xTaskCreate>
 800a804:	4603      	mov	r3, r0
 800a806:	2b01      	cmp	r3, #1
 800a808:	d001      	beq.n	800a80e <osThreadNew+0x146>
          hTask = NULL;
 800a80a:	2300      	movs	r3, #0
 800a80c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a80e:	697b      	ldr	r3, [r7, #20]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3738      	adds	r7, #56	; 0x38
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	200001b4 	.word	0x200001b4

0800a81c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a824:	f3ef 8305 	mrs	r3, IPSR
 800a828:	613b      	str	r3, [r7, #16]
  return(result);
 800a82a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10f      	bne.n	800a850 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a830:	f3ef 8310 	mrs	r3, PRIMASK
 800a834:	60fb      	str	r3, [r7, #12]
  return(result);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d109      	bne.n	800a850 <osDelay+0x34>
 800a83c:	4b0d      	ldr	r3, [pc, #52]	; (800a874 <osDelay+0x58>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b02      	cmp	r3, #2
 800a842:	d109      	bne.n	800a858 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a844:	f3ef 8311 	mrs	r3, BASEPRI
 800a848:	60bb      	str	r3, [r7, #8]
  return(result);
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d003      	beq.n	800a858 <osDelay+0x3c>
    stat = osErrorISR;
 800a850:	f06f 0305 	mvn.w	r3, #5
 800a854:	617b      	str	r3, [r7, #20]
 800a856:	e007      	b.n	800a868 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a858:	2300      	movs	r3, #0
 800a85a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d002      	beq.n	800a868 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f001 f8a8 	bl	800b9b8 <vTaskDelay>
    }
  }

  return (stat);
 800a868:	697b      	ldr	r3, [r7, #20]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3718      	adds	r7, #24
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	200001b4 	.word	0x200001b4

0800a878 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a878:	b580      	push	{r7, lr}
 800a87a:	b08c      	sub	sp, #48	; 0x30
 800a87c:	af02      	add	r7, sp, #8
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a884:	2300      	movs	r3, #0
 800a886:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a888:	f3ef 8305 	mrs	r3, IPSR
 800a88c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a88e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a890:	2b00      	cmp	r3, #0
 800a892:	d16f      	bne.n	800a974 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a894:	f3ef 8310 	mrs	r3, PRIMASK
 800a898:	617b      	str	r3, [r7, #20]
  return(result);
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d169      	bne.n	800a974 <osMessageQueueNew+0xfc>
 800a8a0:	4b37      	ldr	r3, [pc, #220]	; (800a980 <osMessageQueueNew+0x108>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d105      	bne.n	800a8b4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a8a8:	f3ef 8311 	mrs	r3, BASEPRI
 800a8ac:	613b      	str	r3, [r7, #16]
  return(result);
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d15f      	bne.n	800a974 <osMessageQueueNew+0xfc>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d05c      	beq.n	800a974 <osMessageQueueNew+0xfc>
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d059      	beq.n	800a974 <osMessageQueueNew+0xfc>
    mem = -1;
 800a8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d029      	beq.n	800a920 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d012      	beq.n	800a8fa <osMessageQueueNew+0x82>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	2b4f      	cmp	r3, #79	; 0x4f
 800a8da:	d90e      	bls.n	800a8fa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00a      	beq.n	800a8fa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	695a      	ldr	r2, [r3, #20]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	68b9      	ldr	r1, [r7, #8]
 800a8ec:	fb01 f303 	mul.w	r3, r1, r3
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d302      	bcc.n	800a8fa <osMessageQueueNew+0x82>
        mem = 1;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	623b      	str	r3, [r7, #32]
 800a8f8:	e014      	b.n	800a924 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d110      	bne.n	800a924 <osMessageQueueNew+0xac>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10c      	bne.n	800a924 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d108      	bne.n	800a924 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d104      	bne.n	800a924 <osMessageQueueNew+0xac>
          mem = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	623b      	str	r3, [r7, #32]
 800a91e:	e001      	b.n	800a924 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a920:	2300      	movs	r3, #0
 800a922:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	2b01      	cmp	r3, #1
 800a928:	d10b      	bne.n	800a942 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	691a      	ldr	r2, [r3, #16]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	2100      	movs	r1, #0
 800a934:	9100      	str	r1, [sp, #0]
 800a936:	68b9      	ldr	r1, [r7, #8]
 800a938:	68f8      	ldr	r0, [r7, #12]
 800a93a:	f000 f96d 	bl	800ac18 <xQueueGenericCreateStatic>
 800a93e:	6278      	str	r0, [r7, #36]	; 0x24
 800a940:	e008      	b.n	800a954 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a942:	6a3b      	ldr	r3, [r7, #32]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d105      	bne.n	800a954 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a948:	2200      	movs	r2, #0
 800a94a:	68b9      	ldr	r1, [r7, #8]
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f000 f9da 	bl	800ad06 <xQueueGenericCreate>
 800a952:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00c      	beq.n	800a974 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d003      	beq.n	800a968 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	61fb      	str	r3, [r7, #28]
 800a966:	e001      	b.n	800a96c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a968:	2300      	movs	r3, #0
 800a96a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a96c:	69f9      	ldr	r1, [r7, #28]
 800a96e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a970:	f000 fdb0 	bl	800b4d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a976:	4618      	mov	r0, r3
 800a978:	3728      	adds	r7, #40	; 0x28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	200001b4 	.word	0x200001b4

0800a984 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	4a06      	ldr	r2, [pc, #24]	; (800a9ac <vApplicationGetIdleTaskMemory+0x28>)
 800a994:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	4a05      	ldr	r2, [pc, #20]	; (800a9b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a99a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2280      	movs	r2, #128	; 0x80
 800a9a0:	601a      	str	r2, [r3, #0]
}
 800a9a2:	bf00      	nop
 800a9a4:	3714      	adds	r7, #20
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bc80      	pop	{r7}
 800a9aa:	4770      	bx	lr
 800a9ac:	200001b8 	.word	0x200001b8
 800a9b0:	20000214 	.word	0x20000214

0800a9b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	4a07      	ldr	r2, [pc, #28]	; (800a9e0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a9c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	4a06      	ldr	r2, [pc, #24]	; (800a9e4 <vApplicationGetTimerTaskMemory+0x30>)
 800a9ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9d2:	601a      	str	r2, [r3, #0]
}
 800a9d4:	bf00      	nop
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bc80      	pop	{r7}
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	20000414 	.word	0x20000414
 800a9e4:	20000470 	.word	0x20000470

0800a9e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f103 0208 	add.w	r2, r3, #8
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800aa00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f103 0208 	add.w	r2, r3, #8
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f103 0208 	add.w	r2, r3, #8
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa1c:	bf00      	nop
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bc80      	pop	{r7}
 800aa24:	4770      	bx	lr

0800aa26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa26:	b480      	push	{r7}
 800aa28:	b083      	sub	sp, #12
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bc80      	pop	{r7}
 800aa3c:	4770      	bx	lr

0800aa3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b085      	sub	sp, #20
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	689a      	ldr	r2, [r3, #8]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	1c5a      	adds	r2, r3, #1
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	601a      	str	r2, [r3, #0]
}
 800aa7a:	bf00      	nop
 800aa7c:	3714      	adds	r7, #20
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bc80      	pop	{r7}
 800aa82:	4770      	bx	lr

0800aa84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9a:	d103      	bne.n	800aaa4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	60fb      	str	r3, [r7, #12]
 800aaa2:	e00c      	b.n	800aabe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	60fb      	str	r3, [r7, #12]
 800aaaa:	e002      	b.n	800aab2 <vListInsert+0x2e>
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	60fb      	str	r3, [r7, #12]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d2f6      	bcs.n	800aaac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	685a      	ldr	r2, [r3, #4]
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	683a      	ldr	r2, [r7, #0]
 800aad8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	1c5a      	adds	r2, r3, #1
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	601a      	str	r2, [r3, #0]
}
 800aaea:	bf00      	nop
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bc80      	pop	{r7}
 800aaf2:	4770      	bx	lr

0800aaf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	6892      	ldr	r2, [r2, #8]
 800ab0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	6852      	ldr	r2, [r2, #4]
 800ab14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d103      	bne.n	800ab28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	689a      	ldr	r2, [r3, #8]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	1e5a      	subs	r2, r3, #1
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3714      	adds	r7, #20
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bc80      	pop	{r7}
 800ab44:	4770      	bx	lr
	...

0800ab48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10a      	bne.n	800ab72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab60:	f383 8811 	msr	BASEPRI, r3
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab6e:	bf00      	nop
 800ab70:	e7fe      	b.n	800ab70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab72:	f002 f99b 	bl	800ceac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab7e:	68f9      	ldr	r1, [r7, #12]
 800ab80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab82:	fb01 f303 	mul.w	r3, r1, r3
 800ab86:	441a      	add	r2, r3
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba2:	3b01      	subs	r3, #1
 800aba4:	68f9      	ldr	r1, [r7, #12]
 800aba6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aba8:	fb01 f303 	mul.w	r3, r1, r3
 800abac:	441a      	add	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	22ff      	movs	r2, #255	; 0xff
 800abb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	22ff      	movs	r2, #255	; 0xff
 800abbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d114      	bne.n	800abf2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	691b      	ldr	r3, [r3, #16]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d01a      	beq.n	800ac06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	3310      	adds	r3, #16
 800abd4:	4618      	mov	r0, r3
 800abd6:	f001 f9ad 	bl	800bf34 <xTaskRemoveFromEventList>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d012      	beq.n	800ac06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800abe0:	4b0c      	ldr	r3, [pc, #48]	; (800ac14 <xQueueGenericReset+0xcc>)
 800abe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe6:	601a      	str	r2, [r3, #0]
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	e009      	b.n	800ac06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	3310      	adds	r3, #16
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7ff fef6 	bl	800a9e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3324      	adds	r3, #36	; 0x24
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7ff fef1 	bl	800a9e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac06:	f002 f981 	bl	800cf0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac0a:	2301      	movs	r3, #1
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	e000ed04 	.word	0xe000ed04

0800ac18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b08e      	sub	sp, #56	; 0x38
 800ac1c:	af02      	add	r7, sp, #8
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
 800ac24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10a      	bne.n	800ac42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ac2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac30:	f383 8811 	msr	BASEPRI, r3
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac3e:	bf00      	nop
 800ac40:	e7fe      	b.n	800ac40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d10a      	bne.n	800ac5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ac48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4c:	f383 8811 	msr	BASEPRI, r3
 800ac50:	f3bf 8f6f 	isb	sy
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac5a:	bf00      	nop
 800ac5c:	e7fe      	b.n	800ac5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d002      	beq.n	800ac6a <xQueueGenericCreateStatic+0x52>
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d001      	beq.n	800ac6e <xQueueGenericCreateStatic+0x56>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e000      	b.n	800ac70 <xQueueGenericCreateStatic+0x58>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10a      	bne.n	800ac8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	623b      	str	r3, [r7, #32]
}
 800ac86:	bf00      	nop
 800ac88:	e7fe      	b.n	800ac88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d102      	bne.n	800ac96 <xQueueGenericCreateStatic+0x7e>
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d101      	bne.n	800ac9a <xQueueGenericCreateStatic+0x82>
 800ac96:	2301      	movs	r3, #1
 800ac98:	e000      	b.n	800ac9c <xQueueGenericCreateStatic+0x84>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d10a      	bne.n	800acb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	61fb      	str	r3, [r7, #28]
}
 800acb2:	bf00      	nop
 800acb4:	e7fe      	b.n	800acb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800acb6:	2350      	movs	r3, #80	; 0x50
 800acb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	2b50      	cmp	r3, #80	; 0x50
 800acbe:	d00a      	beq.n	800acd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	61bb      	str	r3, [r7, #24]
}
 800acd2:	bf00      	nop
 800acd4:	e7fe      	b.n	800acd4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800acda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00d      	beq.n	800acfc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ace0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ace8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	4613      	mov	r3, r2
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	68b9      	ldr	r1, [r7, #8]
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f000 f843 	bl	800ad82 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800acfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3730      	adds	r7, #48	; 0x30
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b08a      	sub	sp, #40	; 0x28
 800ad0a:	af02      	add	r7, sp, #8
 800ad0c:	60f8      	str	r0, [r7, #12]
 800ad0e:	60b9      	str	r1, [r7, #8]
 800ad10:	4613      	mov	r3, r2
 800ad12:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10a      	bne.n	800ad30 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ad1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1e:	f383 8811 	msr	BASEPRI, r3
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	613b      	str	r3, [r7, #16]
}
 800ad2c:	bf00      	nop
 800ad2e:	e7fe      	b.n	800ad2e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d102      	bne.n	800ad3c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ad36:	2300      	movs	r3, #0
 800ad38:	61fb      	str	r3, [r7, #28]
 800ad3a:	e004      	b.n	800ad46 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	68ba      	ldr	r2, [r7, #8]
 800ad40:	fb02 f303 	mul.w	r3, r2, r3
 800ad44:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	3350      	adds	r3, #80	; 0x50
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f002 f9ae 	bl	800d0ac <pvPortMalloc>
 800ad50:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00f      	beq.n	800ad78 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	3350      	adds	r3, #80	; 0x50
 800ad5c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad66:	79fa      	ldrb	r2, [r7, #7]
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	68b9      	ldr	r1, [r7, #8]
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f000 f805 	bl	800ad82 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ad78:	69bb      	ldr	r3, [r7, #24]
	}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3720      	adds	r7, #32
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b084      	sub	sp, #16
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	60f8      	str	r0, [r7, #12]
 800ad8a:	60b9      	str	r1, [r7, #8]
 800ad8c:	607a      	str	r2, [r7, #4]
 800ad8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d103      	bne.n	800ad9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	69ba      	ldr	r2, [r7, #24]
 800ad9a:	601a      	str	r2, [r3, #0]
 800ad9c:	e002      	b.n	800ada4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800adb0:	2101      	movs	r1, #1
 800adb2:	69b8      	ldr	r0, [r7, #24]
 800adb4:	f7ff fec8 	bl	800ab48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	78fa      	ldrb	r2, [r7, #3]
 800adbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800adc0:	bf00      	nop
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b08e      	sub	sp, #56	; 0x38
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
 800add4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800add6:	2300      	movs	r3, #0
 800add8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <xQueueGenericSend+0x32>
	__asm volatile
 800ade4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800adf6:	bf00      	nop
 800adf8:	e7fe      	b.n	800adf8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d103      	bne.n	800ae08 <xQueueGenericSend+0x40>
 800ae00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d101      	bne.n	800ae0c <xQueueGenericSend+0x44>
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e000      	b.n	800ae0e <xQueueGenericSend+0x46>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10a      	bne.n	800ae28 <xQueueGenericSend+0x60>
	__asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae16:	f383 8811 	msr	BASEPRI, r3
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae24:	bf00      	nop
 800ae26:	e7fe      	b.n	800ae26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	2b02      	cmp	r3, #2
 800ae2c:	d103      	bne.n	800ae36 <xQueueGenericSend+0x6e>
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d101      	bne.n	800ae3a <xQueueGenericSend+0x72>
 800ae36:	2301      	movs	r3, #1
 800ae38:	e000      	b.n	800ae3c <xQueueGenericSend+0x74>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10a      	bne.n	800ae56 <xQueueGenericSend+0x8e>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	623b      	str	r3, [r7, #32]
}
 800ae52:	bf00      	nop
 800ae54:	e7fe      	b.n	800ae54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae56:	f001 fa67 	bl	800c328 <xTaskGetSchedulerState>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d102      	bne.n	800ae66 <xQueueGenericSend+0x9e>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d101      	bne.n	800ae6a <xQueueGenericSend+0xa2>
 800ae66:	2301      	movs	r3, #1
 800ae68:	e000      	b.n	800ae6c <xQueueGenericSend+0xa4>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10a      	bne.n	800ae86 <xQueueGenericSend+0xbe>
	__asm volatile
 800ae70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	61fb      	str	r3, [r7, #28]
}
 800ae82:	bf00      	nop
 800ae84:	e7fe      	b.n	800ae84 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae86:	f002 f811 	bl	800ceac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d302      	bcc.n	800ae9c <xQueueGenericSend+0xd4>
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d129      	bne.n	800aef0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae9c:	683a      	ldr	r2, [r7, #0]
 800ae9e:	68b9      	ldr	r1, [r7, #8]
 800aea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aea2:	f000 fa07 	bl	800b2b4 <prvCopyDataToQueue>
 800aea6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d010      	beq.n	800aed2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb2:	3324      	adds	r3, #36	; 0x24
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f001 f83d 	bl	800bf34 <xTaskRemoveFromEventList>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d013      	beq.n	800aee8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aec0:	4b3f      	ldr	r3, [pc, #252]	; (800afc0 <xQueueGenericSend+0x1f8>)
 800aec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec6:	601a      	str	r2, [r3, #0]
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	e00a      	b.n	800aee8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d007      	beq.n	800aee8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aed8:	4b39      	ldr	r3, [pc, #228]	; (800afc0 <xQueueGenericSend+0x1f8>)
 800aeda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aede:	601a      	str	r2, [r3, #0]
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aee8:	f002 f810 	bl	800cf0c <vPortExitCritical>
				return pdPASS;
 800aeec:	2301      	movs	r3, #1
 800aeee:	e063      	b.n	800afb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d103      	bne.n	800aefe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aef6:	f002 f809 	bl	800cf0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aefa:	2300      	movs	r3, #0
 800aefc:	e05c      	b.n	800afb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aefe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af00:	2b00      	cmp	r3, #0
 800af02:	d106      	bne.n	800af12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af04:	f107 0314 	add.w	r3, r7, #20
 800af08:	4618      	mov	r0, r3
 800af0a:	f001 f877 	bl	800bffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af0e:	2301      	movs	r3, #1
 800af10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af12:	f001 fffb 	bl	800cf0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af16:	f000 fde9 	bl	800baec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af1a:	f001 ffc7 	bl	800ceac <vPortEnterCritical>
 800af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af24:	b25b      	sxtb	r3, r3
 800af26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af2a:	d103      	bne.n	800af34 <xQueueGenericSend+0x16c>
 800af2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af3a:	b25b      	sxtb	r3, r3
 800af3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af40:	d103      	bne.n	800af4a <xQueueGenericSend+0x182>
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	2200      	movs	r2, #0
 800af46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af4a:	f001 ffdf 	bl	800cf0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af4e:	1d3a      	adds	r2, r7, #4
 800af50:	f107 0314 	add.w	r3, r7, #20
 800af54:	4611      	mov	r1, r2
 800af56:	4618      	mov	r0, r3
 800af58:	f001 f866 	bl	800c028 <xTaskCheckForTimeOut>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d124      	bne.n	800afac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af64:	f000 fa9e 	bl	800b4a4 <prvIsQueueFull>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d018      	beq.n	800afa0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	3310      	adds	r3, #16
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	4611      	mov	r1, r2
 800af76:	4618      	mov	r0, r3
 800af78:	f000 ff8c 	bl	800be94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af7e:	f000 fa29 	bl	800b3d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af82:	f000 fdc1 	bl	800bb08 <xTaskResumeAll>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f47f af7c 	bne.w	800ae86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af8e:	4b0c      	ldr	r3, [pc, #48]	; (800afc0 <xQueueGenericSend+0x1f8>)
 800af90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af94:	601a      	str	r2, [r3, #0]
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	f3bf 8f6f 	isb	sy
 800af9e:	e772      	b.n	800ae86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800afa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afa2:	f000 fa17 	bl	800b3d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afa6:	f000 fdaf 	bl	800bb08 <xTaskResumeAll>
 800afaa:	e76c      	b.n	800ae86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800afac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afae:	f000 fa11 	bl	800b3d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afb2:	f000 fda9 	bl	800bb08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800afb6:	2300      	movs	r3, #0
		}
	}
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3738      	adds	r7, #56	; 0x38
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	e000ed04 	.word	0xe000ed04

0800afc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b08e      	sub	sp, #56	; 0x38
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
 800afd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10a      	bne.n	800aff2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800afdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe0:	f383 8811 	msr	BASEPRI, r3
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	f3bf 8f4f 	dsb	sy
 800afec:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afee:	bf00      	nop
 800aff0:	e7fe      	b.n	800aff0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d103      	bne.n	800b000 <xQueueGenericSendFromISR+0x3c>
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <xQueueGenericSendFromISR+0x40>
 800b000:	2301      	movs	r3, #1
 800b002:	e000      	b.n	800b006 <xQueueGenericSendFromISR+0x42>
 800b004:	2300      	movs	r3, #0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d10a      	bne.n	800b020 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00e:	f383 8811 	msr	BASEPRI, r3
 800b012:	f3bf 8f6f 	isb	sy
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	623b      	str	r3, [r7, #32]
}
 800b01c:	bf00      	nop
 800b01e:	e7fe      	b.n	800b01e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	2b02      	cmp	r3, #2
 800b024:	d103      	bne.n	800b02e <xQueueGenericSendFromISR+0x6a>
 800b026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d101      	bne.n	800b032 <xQueueGenericSendFromISR+0x6e>
 800b02e:	2301      	movs	r3, #1
 800b030:	e000      	b.n	800b034 <xQueueGenericSendFromISR+0x70>
 800b032:	2300      	movs	r3, #0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10a      	bne.n	800b04e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	61fb      	str	r3, [r7, #28]
}
 800b04a:	bf00      	nop
 800b04c:	e7fe      	b.n	800b04c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b04e:	f001 ffef 	bl	800d030 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b052:	f3ef 8211 	mrs	r2, BASEPRI
 800b056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	61ba      	str	r2, [r7, #24]
 800b068:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b06a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b06c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b076:	429a      	cmp	r2, r3
 800b078:	d302      	bcc.n	800b080 <xQueueGenericSendFromISR+0xbc>
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	2b02      	cmp	r3, #2
 800b07e:	d12c      	bne.n	800b0da <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b082:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b08a:	683a      	ldr	r2, [r7, #0]
 800b08c:	68b9      	ldr	r1, [r7, #8]
 800b08e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b090:	f000 f910 	bl	800b2b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b094:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09c:	d112      	bne.n	800b0c4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d016      	beq.n	800b0d4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a8:	3324      	adds	r3, #36	; 0x24
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 ff42 	bl	800bf34 <xTaskRemoveFromEventList>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00e      	beq.n	800b0d4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00b      	beq.n	800b0d4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	601a      	str	r2, [r3, #0]
 800b0c2:	e007      	b.n	800b0d4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b0c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	b25a      	sxtb	r2, r3
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b0d8:	e001      	b.n	800b0de <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	637b      	str	r3, [r7, #52]	; 0x34
 800b0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b0e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3738      	adds	r7, #56	; 0x38
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b08c      	sub	sp, #48	; 0x30
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b100:	2300      	movs	r3, #0
 800b102:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10a      	bne.n	800b124 <xQueueReceive+0x30>
	__asm volatile
 800b10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	623b      	str	r3, [r7, #32]
}
 800b120:	bf00      	nop
 800b122:	e7fe      	b.n	800b122 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d103      	bne.n	800b132 <xQueueReceive+0x3e>
 800b12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d101      	bne.n	800b136 <xQueueReceive+0x42>
 800b132:	2301      	movs	r3, #1
 800b134:	e000      	b.n	800b138 <xQueueReceive+0x44>
 800b136:	2300      	movs	r3, #0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10a      	bne.n	800b152 <xQueueReceive+0x5e>
	__asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	61fb      	str	r3, [r7, #28]
}
 800b14e:	bf00      	nop
 800b150:	e7fe      	b.n	800b150 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b152:	f001 f8e9 	bl	800c328 <xTaskGetSchedulerState>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d102      	bne.n	800b162 <xQueueReceive+0x6e>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <xQueueReceive+0x72>
 800b162:	2301      	movs	r3, #1
 800b164:	e000      	b.n	800b168 <xQueueReceive+0x74>
 800b166:	2300      	movs	r3, #0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10a      	bne.n	800b182 <xQueueReceive+0x8e>
	__asm volatile
 800b16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b170:	f383 8811 	msr	BASEPRI, r3
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	61bb      	str	r3, [r7, #24]
}
 800b17e:	bf00      	nop
 800b180:	e7fe      	b.n	800b180 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b182:	f001 fe93 	bl	800ceac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b18a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d01f      	beq.n	800b1d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b192:	68b9      	ldr	r1, [r7, #8]
 800b194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b196:	f000 f8f7 	bl	800b388 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19c:	1e5a      	subs	r2, r3, #1
 800b19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d00f      	beq.n	800b1ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ac:	3310      	adds	r3, #16
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f000 fec0 	bl	800bf34 <xTaskRemoveFromEventList>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d007      	beq.n	800b1ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b1ba:	4b3d      	ldr	r3, [pc, #244]	; (800b2b0 <xQueueReceive+0x1bc>)
 800b1bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b1ca:	f001 fe9f 	bl	800cf0c <vPortExitCritical>
				return pdPASS;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e069      	b.n	800b2a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d103      	bne.n	800b1e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1d8:	f001 fe98 	bl	800cf0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	e062      	b.n	800b2a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d106      	bne.n	800b1f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1e6:	f107 0310 	add.w	r3, r7, #16
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f000 ff06 	bl	800bffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1f4:	f001 fe8a 	bl	800cf0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1f8:	f000 fc78 	bl	800baec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1fc:	f001 fe56 	bl	800ceac <vPortEnterCritical>
 800b200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b202:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b206:	b25b      	sxtb	r3, r3
 800b208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b20c:	d103      	bne.n	800b216 <xQueueReceive+0x122>
 800b20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b210:	2200      	movs	r2, #0
 800b212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b218:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b21c:	b25b      	sxtb	r3, r3
 800b21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b222:	d103      	bne.n	800b22c <xQueueReceive+0x138>
 800b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b226:	2200      	movs	r2, #0
 800b228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b22c:	f001 fe6e 	bl	800cf0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b230:	1d3a      	adds	r2, r7, #4
 800b232:	f107 0310 	add.w	r3, r7, #16
 800b236:	4611      	mov	r1, r2
 800b238:	4618      	mov	r0, r3
 800b23a:	f000 fef5 	bl	800c028 <xTaskCheckForTimeOut>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d123      	bne.n	800b28c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b246:	f000 f917 	bl	800b478 <prvIsQueueEmpty>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d017      	beq.n	800b280 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b252:	3324      	adds	r3, #36	; 0x24
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	4611      	mov	r1, r2
 800b258:	4618      	mov	r0, r3
 800b25a:	f000 fe1b 	bl	800be94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b25e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b260:	f000 f8b8 	bl	800b3d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b264:	f000 fc50 	bl	800bb08 <xTaskResumeAll>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d189      	bne.n	800b182 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b26e:	4b10      	ldr	r3, [pc, #64]	; (800b2b0 <xQueueReceive+0x1bc>)
 800b270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b274:	601a      	str	r2, [r3, #0]
 800b276:	f3bf 8f4f 	dsb	sy
 800b27a:	f3bf 8f6f 	isb	sy
 800b27e:	e780      	b.n	800b182 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b282:	f000 f8a7 	bl	800b3d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b286:	f000 fc3f 	bl	800bb08 <xTaskResumeAll>
 800b28a:	e77a      	b.n	800b182 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b28c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b28e:	f000 f8a1 	bl	800b3d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b292:	f000 fc39 	bl	800bb08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b298:	f000 f8ee 	bl	800b478 <prvIsQueueEmpty>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	f43f af6f 	beq.w	800b182 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3730      	adds	r7, #48	; 0x30
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	e000ed04 	.word	0xe000ed04

0800b2b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d10d      	bne.n	800b2ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d14d      	bne.n	800b376 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f001 f840 	bl	800c364 <xTaskPriorityDisinherit>
 800b2e4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	605a      	str	r2, [r3, #4]
 800b2ec:	e043      	b.n	800b376 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d119      	bne.n	800b328 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6898      	ldr	r0, [r3, #8]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	68b9      	ldr	r1, [r7, #8]
 800b300:	f002 fd92 	bl	800de28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	689a      	ldr	r2, [r3, #8]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b30c:	441a      	add	r2, r3
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	689a      	ldr	r2, [r3, #8]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d32b      	bcc.n	800b376 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	609a      	str	r2, [r3, #8]
 800b326:	e026      	b.n	800b376 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	68d8      	ldr	r0, [r3, #12]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b330:	461a      	mov	r2, r3
 800b332:	68b9      	ldr	r1, [r7, #8]
 800b334:	f002 fd78 	bl	800de28 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	68da      	ldr	r2, [r3, #12]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b340:	425b      	negs	r3, r3
 800b342:	441a      	add	r2, r3
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	68da      	ldr	r2, [r3, #12]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	429a      	cmp	r2, r3
 800b352:	d207      	bcs.n	800b364 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	685a      	ldr	r2, [r3, #4]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35c:	425b      	negs	r3, r3
 800b35e:	441a      	add	r2, r3
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2b02      	cmp	r3, #2
 800b368:	d105      	bne.n	800b376 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	3b01      	subs	r3, #1
 800b374:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	1c5a      	adds	r2, r3, #1
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b37e:	697b      	ldr	r3, [r7, #20]
}
 800b380:	4618      	mov	r0, r3
 800b382:	3718      	adds	r7, #24
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b396:	2b00      	cmp	r3, #0
 800b398:	d018      	beq.n	800b3cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68da      	ldr	r2, [r3, #12]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a2:	441a      	add	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	68da      	ldr	r2, [r3, #12]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d303      	bcc.n	800b3bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	68d9      	ldr	r1, [r3, #12]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	6838      	ldr	r0, [r7, #0]
 800b3c8:	f002 fd2e 	bl	800de28 <memcpy>
	}
}
 800b3cc:	bf00      	nop
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b3dc:	f001 fd66 	bl	800ceac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3e8:	e011      	b.n	800b40e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d012      	beq.n	800b418 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	3324      	adds	r3, #36	; 0x24
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 fd9c 	bl	800bf34 <xTaskRemoveFromEventList>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b402:	f000 fe73 	bl	800c0ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b406:	7bfb      	ldrb	r3, [r7, #15]
 800b408:	3b01      	subs	r3, #1
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b40e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b412:	2b00      	cmp	r3, #0
 800b414:	dce9      	bgt.n	800b3ea <prvUnlockQueue+0x16>
 800b416:	e000      	b.n	800b41a <prvUnlockQueue+0x46>
					break;
 800b418:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	22ff      	movs	r2, #255	; 0xff
 800b41e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b422:	f001 fd73 	bl	800cf0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b426:	f001 fd41 	bl	800ceac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b430:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b432:	e011      	b.n	800b458 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d012      	beq.n	800b462 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	3310      	adds	r3, #16
 800b440:	4618      	mov	r0, r3
 800b442:	f000 fd77 	bl	800bf34 <xTaskRemoveFromEventList>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d001      	beq.n	800b450 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b44c:	f000 fe4e 	bl	800c0ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b450:	7bbb      	ldrb	r3, [r7, #14]
 800b452:	3b01      	subs	r3, #1
 800b454:	b2db      	uxtb	r3, r3
 800b456:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	dce9      	bgt.n	800b434 <prvUnlockQueue+0x60>
 800b460:	e000      	b.n	800b464 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b462:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	22ff      	movs	r2, #255	; 0xff
 800b468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b46c:	f001 fd4e 	bl	800cf0c <vPortExitCritical>
}
 800b470:	bf00      	nop
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b480:	f001 fd14 	bl	800ceac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d102      	bne.n	800b492 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b48c:	2301      	movs	r3, #1
 800b48e:	60fb      	str	r3, [r7, #12]
 800b490:	e001      	b.n	800b496 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b492:	2300      	movs	r3, #0
 800b494:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b496:	f001 fd39 	bl	800cf0c <vPortExitCritical>

	return xReturn;
 800b49a:	68fb      	ldr	r3, [r7, #12]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4ac:	f001 fcfe 	bl	800ceac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d102      	bne.n	800b4c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	60fb      	str	r3, [r7, #12]
 800b4c0:	e001      	b.n	800b4c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4c6:	f001 fd21 	bl	800cf0c <vPortExitCritical>

	return xReturn;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60fb      	str	r3, [r7, #12]
 800b4e2:	e014      	b.n	800b50e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b4e4:	4a0e      	ldr	r2, [pc, #56]	; (800b520 <vQueueAddToRegistry+0x4c>)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10b      	bne.n	800b508 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b4f0:	490b      	ldr	r1, [pc, #44]	; (800b520 <vQueueAddToRegistry+0x4c>)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	683a      	ldr	r2, [r7, #0]
 800b4f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b4fa:	4a09      	ldr	r2, [pc, #36]	; (800b520 <vQueueAddToRegistry+0x4c>)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	00db      	lsls	r3, r3, #3
 800b500:	4413      	add	r3, r2
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b506:	e006      	b.n	800b516 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	3301      	adds	r3, #1
 800b50c:	60fb      	str	r3, [r7, #12]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2b07      	cmp	r3, #7
 800b512:	d9e7      	bls.n	800b4e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b514:	bf00      	nop
 800b516:	bf00      	nop
 800b518:	3714      	adds	r7, #20
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bc80      	pop	{r7}
 800b51e:	4770      	bx	lr
 800b520:	20002660 	.word	0x20002660

0800b524 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b534:	f001 fcba 	bl	800ceac <vPortEnterCritical>
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b53e:	b25b      	sxtb	r3, r3
 800b540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b544:	d103      	bne.n	800b54e <vQueueWaitForMessageRestricted+0x2a>
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b554:	b25b      	sxtb	r3, r3
 800b556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b55a:	d103      	bne.n	800b564 <vQueueWaitForMessageRestricted+0x40>
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	2200      	movs	r2, #0
 800b560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b564:	f001 fcd2 	bl	800cf0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d106      	bne.n	800b57e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	3324      	adds	r3, #36	; 0x24
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	68b9      	ldr	r1, [r7, #8]
 800b578:	4618      	mov	r0, r3
 800b57a:	f000 fcaf 	bl	800bedc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b57e:	6978      	ldr	r0, [r7, #20]
 800b580:	f7ff ff28 	bl	800b3d4 <prvUnlockQueue>
	}
 800b584:	bf00      	nop
 800b586:	3718      	adds	r7, #24
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b08e      	sub	sp, #56	; 0x38
 800b590:	af04      	add	r7, sp, #16
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	607a      	str	r2, [r7, #4]
 800b598:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d10a      	bne.n	800b5b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	623b      	str	r3, [r7, #32]
}
 800b5b2:	bf00      	nop
 800b5b4:	e7fe      	b.n	800b5b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d10a      	bne.n	800b5d2 <xTaskCreateStatic+0x46>
	__asm volatile
 800b5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c0:	f383 8811 	msr	BASEPRI, r3
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	61fb      	str	r3, [r7, #28]
}
 800b5ce:	bf00      	nop
 800b5d0:	e7fe      	b.n	800b5d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b5d2:	235c      	movs	r3, #92	; 0x5c
 800b5d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	2b5c      	cmp	r3, #92	; 0x5c
 800b5da:	d00a      	beq.n	800b5f2 <xTaskCreateStatic+0x66>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	61bb      	str	r3, [r7, #24]
}
 800b5ee:	bf00      	nop
 800b5f0:	e7fe      	b.n	800b5f0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d01e      	beq.n	800b636 <xTaskCreateStatic+0xaa>
 800b5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d01b      	beq.n	800b636 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b600:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b606:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60a:	2202      	movs	r2, #2
 800b60c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b610:	2300      	movs	r3, #0
 800b612:	9303      	str	r3, [sp, #12]
 800b614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b616:	9302      	str	r3, [sp, #8]
 800b618:	f107 0314 	add.w	r3, r7, #20
 800b61c:	9301      	str	r3, [sp, #4]
 800b61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	68b9      	ldr	r1, [r7, #8]
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f000 f850 	bl	800b6ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b62e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b630:	f000 f8d4 	bl	800b7dc <prvAddNewTaskToReadyList>
 800b634:	e001      	b.n	800b63a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b636:	2300      	movs	r3, #0
 800b638:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b63a:	697b      	ldr	r3, [r7, #20]
	}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3728      	adds	r7, #40	; 0x28
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b644:	b580      	push	{r7, lr}
 800b646:	b08c      	sub	sp, #48	; 0x30
 800b648:	af04      	add	r7, sp, #16
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	603b      	str	r3, [r7, #0]
 800b650:	4613      	mov	r3, r2
 800b652:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b654:	88fb      	ldrh	r3, [r7, #6]
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	4618      	mov	r0, r3
 800b65a:	f001 fd27 	bl	800d0ac <pvPortMalloc>
 800b65e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00e      	beq.n	800b684 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b666:	205c      	movs	r0, #92	; 0x5c
 800b668:	f001 fd20 	bl	800d0ac <pvPortMalloc>
 800b66c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d003      	beq.n	800b67c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	631a      	str	r2, [r3, #48]	; 0x30
 800b67a:	e005      	b.n	800b688 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b67c:	6978      	ldr	r0, [r7, #20]
 800b67e:	f001 fdd9 	bl	800d234 <vPortFree>
 800b682:	e001      	b.n	800b688 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b684:	2300      	movs	r3, #0
 800b686:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d017      	beq.n	800b6be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b696:	88fa      	ldrh	r2, [r7, #6]
 800b698:	2300      	movs	r3, #0
 800b69a:	9303      	str	r3, [sp, #12]
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	9302      	str	r3, [sp, #8]
 800b6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a2:	9301      	str	r3, [sp, #4]
 800b6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	68b9      	ldr	r1, [r7, #8]
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f000 f80e 	bl	800b6ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6b2:	69f8      	ldr	r0, [r7, #28]
 800b6b4:	f000 f892 	bl	800b7dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	61bb      	str	r3, [r7, #24]
 800b6bc:	e002      	b.n	800b6c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b6be:	f04f 33ff 	mov.w	r3, #4294967295
 800b6c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b6c4:	69bb      	ldr	r3, [r7, #24]
	}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3720      	adds	r7, #32
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}

0800b6ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	b088      	sub	sp, #32
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	60f8      	str	r0, [r7, #12]
 800b6d6:	60b9      	str	r1, [r7, #8]
 800b6d8:	607a      	str	r2, [r7, #4]
 800b6da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	21a5      	movs	r1, #165	; 0xa5
 800b6e8:	f002 fbc6 	bl	800de78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	4413      	add	r3, r2
 800b6fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	f023 0307 	bic.w	r3, r3, #7
 800b704:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	f003 0307 	and.w	r3, r3, #7
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d00a      	beq.n	800b726 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b714:	f383 8811 	msr	BASEPRI, r3
 800b718:	f3bf 8f6f 	isb	sy
 800b71c:	f3bf 8f4f 	dsb	sy
 800b720:	617b      	str	r3, [r7, #20]
}
 800b722:	bf00      	nop
 800b724:	e7fe      	b.n	800b724 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b726:	2300      	movs	r3, #0
 800b728:	61fb      	str	r3, [r7, #28]
 800b72a:	e012      	b.n	800b752 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	4413      	add	r3, r2
 800b732:	7819      	ldrb	r1, [r3, #0]
 800b734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	4413      	add	r3, r2
 800b73a:	3334      	adds	r3, #52	; 0x34
 800b73c:	460a      	mov	r2, r1
 800b73e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	4413      	add	r3, r2
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d006      	beq.n	800b75a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b74c:	69fb      	ldr	r3, [r7, #28]
 800b74e:	3301      	adds	r3, #1
 800b750:	61fb      	str	r3, [r7, #28]
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	2b0f      	cmp	r3, #15
 800b756:	d9e9      	bls.n	800b72c <prvInitialiseNewTask+0x5e>
 800b758:	e000      	b.n	800b75c <prvInitialiseNewTask+0x8e>
		{
			break;
 800b75a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75e:	2200      	movs	r2, #0
 800b760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b766:	2b37      	cmp	r3, #55	; 0x37
 800b768:	d901      	bls.n	800b76e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b76a:	2337      	movs	r3, #55	; 0x37
 800b76c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b772:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b778:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77c:	2200      	movs	r2, #0
 800b77e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b782:	3304      	adds	r3, #4
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff f94e 	bl	800aa26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78c:	3318      	adds	r3, #24
 800b78e:	4618      	mov	r0, r3
 800b790:	f7ff f949 	bl	800aa26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b798:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b7b8:	683a      	ldr	r2, [r7, #0]
 800b7ba:	68f9      	ldr	r1, [r7, #12]
 800b7bc:	69b8      	ldr	r0, [r7, #24]
 800b7be:	f001 fa81 	bl	800ccc4 <pxPortInitialiseStack>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d002      	beq.n	800b7d4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7d4:	bf00      	nop
 800b7d6:	3720      	adds	r7, #32
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7e4:	f001 fb62 	bl	800ceac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7e8:	4b2d      	ldr	r3, [pc, #180]	; (800b8a0 <prvAddNewTaskToReadyList+0xc4>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	4a2c      	ldr	r2, [pc, #176]	; (800b8a0 <prvAddNewTaskToReadyList+0xc4>)
 800b7f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b7f2:	4b2c      	ldr	r3, [pc, #176]	; (800b8a4 <prvAddNewTaskToReadyList+0xc8>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d109      	bne.n	800b80e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b7fa:	4a2a      	ldr	r2, [pc, #168]	; (800b8a4 <prvAddNewTaskToReadyList+0xc8>)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b800:	4b27      	ldr	r3, [pc, #156]	; (800b8a0 <prvAddNewTaskToReadyList+0xc4>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b01      	cmp	r3, #1
 800b806:	d110      	bne.n	800b82a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b808:	f000 fc94 	bl	800c134 <prvInitialiseTaskLists>
 800b80c:	e00d      	b.n	800b82a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b80e:	4b26      	ldr	r3, [pc, #152]	; (800b8a8 <prvAddNewTaskToReadyList+0xcc>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d109      	bne.n	800b82a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b816:	4b23      	ldr	r3, [pc, #140]	; (800b8a4 <prvAddNewTaskToReadyList+0xc8>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b820:	429a      	cmp	r2, r3
 800b822:	d802      	bhi.n	800b82a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b824:	4a1f      	ldr	r2, [pc, #124]	; (800b8a4 <prvAddNewTaskToReadyList+0xc8>)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b82a:	4b20      	ldr	r3, [pc, #128]	; (800b8ac <prvAddNewTaskToReadyList+0xd0>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	3301      	adds	r3, #1
 800b830:	4a1e      	ldr	r2, [pc, #120]	; (800b8ac <prvAddNewTaskToReadyList+0xd0>)
 800b832:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b834:	4b1d      	ldr	r3, [pc, #116]	; (800b8ac <prvAddNewTaskToReadyList+0xd0>)
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b840:	4b1b      	ldr	r3, [pc, #108]	; (800b8b0 <prvAddNewTaskToReadyList+0xd4>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	429a      	cmp	r2, r3
 800b846:	d903      	bls.n	800b850 <prvAddNewTaskToReadyList+0x74>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	4a18      	ldr	r2, [pc, #96]	; (800b8b0 <prvAddNewTaskToReadyList+0xd4>)
 800b84e:	6013      	str	r3, [r2, #0]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b854:	4613      	mov	r3, r2
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	4413      	add	r3, r2
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	4a15      	ldr	r2, [pc, #84]	; (800b8b4 <prvAddNewTaskToReadyList+0xd8>)
 800b85e:	441a      	add	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	3304      	adds	r3, #4
 800b864:	4619      	mov	r1, r3
 800b866:	4610      	mov	r0, r2
 800b868:	f7ff f8e9 	bl	800aa3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b86c:	f001 fb4e 	bl	800cf0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b870:	4b0d      	ldr	r3, [pc, #52]	; (800b8a8 <prvAddNewTaskToReadyList+0xcc>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00e      	beq.n	800b896 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b878:	4b0a      	ldr	r3, [pc, #40]	; (800b8a4 <prvAddNewTaskToReadyList+0xc8>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b882:	429a      	cmp	r2, r3
 800b884:	d207      	bcs.n	800b896 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b886:	4b0c      	ldr	r3, [pc, #48]	; (800b8b8 <prvAddNewTaskToReadyList+0xdc>)
 800b888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b88c:	601a      	str	r2, [r3, #0]
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b896:	bf00      	nop
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	20000d44 	.word	0x20000d44
 800b8a4:	20000870 	.word	0x20000870
 800b8a8:	20000d50 	.word	0x20000d50
 800b8ac:	20000d60 	.word	0x20000d60
 800b8b0:	20000d4c 	.word	0x20000d4c
 800b8b4:	20000874 	.word	0x20000874
 800b8b8:	e000ed04 	.word	0xe000ed04

0800b8bc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b08a      	sub	sp, #40	; 0x28
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d10a      	bne.n	800b8e6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	617b      	str	r3, [r7, #20]
}
 800b8e2:	bf00      	nop
 800b8e4:	e7fe      	b.n	800b8e4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d10a      	bne.n	800b902 <vTaskDelayUntil+0x46>
	__asm volatile
 800b8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f0:	f383 8811 	msr	BASEPRI, r3
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	613b      	str	r3, [r7, #16]
}
 800b8fe:	bf00      	nop
 800b900:	e7fe      	b.n	800b900 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b902:	4b2a      	ldr	r3, [pc, #168]	; (800b9ac <vTaskDelayUntil+0xf0>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00a      	beq.n	800b920 <vTaskDelayUntil+0x64>
	__asm volatile
 800b90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90e:	f383 8811 	msr	BASEPRI, r3
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	f3bf 8f4f 	dsb	sy
 800b91a:	60fb      	str	r3, [r7, #12]
}
 800b91c:	bf00      	nop
 800b91e:	e7fe      	b.n	800b91e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b920:	f000 f8e4 	bl	800baec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b924:	4b22      	ldr	r3, [pc, #136]	; (800b9b0 <vTaskDelayUntil+0xf4>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	683a      	ldr	r2, [r7, #0]
 800b930:	4413      	add	r3, r2
 800b932:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	6a3a      	ldr	r2, [r7, #32]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d20b      	bcs.n	800b956 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	69fa      	ldr	r2, [r7, #28]
 800b944:	429a      	cmp	r2, r3
 800b946:	d211      	bcs.n	800b96c <vTaskDelayUntil+0xb0>
 800b948:	69fa      	ldr	r2, [r7, #28]
 800b94a:	6a3b      	ldr	r3, [r7, #32]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d90d      	bls.n	800b96c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b950:	2301      	movs	r3, #1
 800b952:	627b      	str	r3, [r7, #36]	; 0x24
 800b954:	e00a      	b.n	800b96c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	69fa      	ldr	r2, [r7, #28]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d303      	bcc.n	800b968 <vTaskDelayUntil+0xac>
 800b960:	69fa      	ldr	r2, [r7, #28]
 800b962:	6a3b      	ldr	r3, [r7, #32]
 800b964:	429a      	cmp	r2, r3
 800b966:	d901      	bls.n	800b96c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b968:	2301      	movs	r3, #1
 800b96a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	69fa      	ldr	r2, [r7, #28]
 800b970:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	2b00      	cmp	r3, #0
 800b976:	d006      	beq.n	800b986 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b978:	69fa      	ldr	r2, [r7, #28]
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	1ad3      	subs	r3, r2, r3
 800b97e:	2100      	movs	r1, #0
 800b980:	4618      	mov	r0, r3
 800b982:	f000 fe39 	bl	800c5f8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b986:	f000 f8bf 	bl	800bb08 <xTaskResumeAll>
 800b98a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d107      	bne.n	800b9a2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b992:	4b08      	ldr	r3, [pc, #32]	; (800b9b4 <vTaskDelayUntil+0xf8>)
 800b994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b998:	601a      	str	r2, [r3, #0]
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9a2:	bf00      	nop
 800b9a4:	3728      	adds	r7, #40	; 0x28
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	20000d6c 	.word	0x20000d6c
 800b9b0:	20000d48 	.word	0x20000d48
 800b9b4:	e000ed04 	.word	0xe000ed04

0800b9b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d017      	beq.n	800b9fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b9ca:	4b13      	ldr	r3, [pc, #76]	; (800ba18 <vTaskDelay+0x60>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d00a      	beq.n	800b9e8 <vTaskDelay+0x30>
	__asm volatile
 800b9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d6:	f383 8811 	msr	BASEPRI, r3
 800b9da:	f3bf 8f6f 	isb	sy
 800b9de:	f3bf 8f4f 	dsb	sy
 800b9e2:	60bb      	str	r3, [r7, #8]
}
 800b9e4:	bf00      	nop
 800b9e6:	e7fe      	b.n	800b9e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b9e8:	f000 f880 	bl	800baec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fe02 	bl	800c5f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b9f4:	f000 f888 	bl	800bb08 <xTaskResumeAll>
 800b9f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d107      	bne.n	800ba10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ba00:	4b06      	ldr	r3, [pc, #24]	; (800ba1c <vTaskDelay+0x64>)
 800ba02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba06:	601a      	str	r2, [r3, #0]
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba10:	bf00      	nop
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	20000d6c 	.word	0x20000d6c
 800ba1c:	e000ed04 	.word	0xe000ed04

0800ba20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b08a      	sub	sp, #40	; 0x28
 800ba24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ba26:	2300      	movs	r3, #0
 800ba28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ba2e:	463a      	mov	r2, r7
 800ba30:	1d39      	adds	r1, r7, #4
 800ba32:	f107 0308 	add.w	r3, r7, #8
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fe ffa4 	bl	800a984 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ba3c:	6839      	ldr	r1, [r7, #0]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	9202      	str	r2, [sp, #8]
 800ba44:	9301      	str	r3, [sp, #4]
 800ba46:	2300      	movs	r3, #0
 800ba48:	9300      	str	r3, [sp, #0]
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	460a      	mov	r2, r1
 800ba4e:	4921      	ldr	r1, [pc, #132]	; (800bad4 <vTaskStartScheduler+0xb4>)
 800ba50:	4821      	ldr	r0, [pc, #132]	; (800bad8 <vTaskStartScheduler+0xb8>)
 800ba52:	f7ff fd9b 	bl	800b58c <xTaskCreateStatic>
 800ba56:	4603      	mov	r3, r0
 800ba58:	4a20      	ldr	r2, [pc, #128]	; (800badc <vTaskStartScheduler+0xbc>)
 800ba5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ba5c:	4b1f      	ldr	r3, [pc, #124]	; (800badc <vTaskStartScheduler+0xbc>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d002      	beq.n	800ba6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ba64:	2301      	movs	r3, #1
 800ba66:	617b      	str	r3, [r7, #20]
 800ba68:	e001      	b.n	800ba6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d102      	bne.n	800ba7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ba74:	f000 fe14 	bl	800c6a0 <xTimerCreateTimerTask>
 800ba78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d116      	bne.n	800baae <vTaskStartScheduler+0x8e>
	__asm volatile
 800ba80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	613b      	str	r3, [r7, #16]
}
 800ba92:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ba94:	4b12      	ldr	r3, [pc, #72]	; (800bae0 <vTaskStartScheduler+0xc0>)
 800ba96:	f04f 32ff 	mov.w	r2, #4294967295
 800ba9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ba9c:	4b11      	ldr	r3, [pc, #68]	; (800bae4 <vTaskStartScheduler+0xc4>)
 800ba9e:	2201      	movs	r2, #1
 800baa0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800baa2:	4b11      	ldr	r3, [pc, #68]	; (800bae8 <vTaskStartScheduler+0xc8>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800baa8:	f001 f98e 	bl	800cdc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800baac:	e00e      	b.n	800bacc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab4:	d10a      	bne.n	800bacc <vTaskStartScheduler+0xac>
	__asm volatile
 800bab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baba:	f383 8811 	msr	BASEPRI, r3
 800babe:	f3bf 8f6f 	isb	sy
 800bac2:	f3bf 8f4f 	dsb	sy
 800bac6:	60fb      	str	r3, [r7, #12]
}
 800bac8:	bf00      	nop
 800baca:	e7fe      	b.n	800baca <vTaskStartScheduler+0xaa>
}
 800bacc:	bf00      	nop
 800bace:	3718      	adds	r7, #24
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	0800e0e4 	.word	0x0800e0e4
 800bad8:	0800c105 	.word	0x0800c105
 800badc:	20000d68 	.word	0x20000d68
 800bae0:	20000d64 	.word	0x20000d64
 800bae4:	20000d50 	.word	0x20000d50
 800bae8:	20000d48 	.word	0x20000d48

0800baec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800baec:	b480      	push	{r7}
 800baee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800baf0:	4b04      	ldr	r3, [pc, #16]	; (800bb04 <vTaskSuspendAll+0x18>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3301      	adds	r3, #1
 800baf6:	4a03      	ldr	r2, [pc, #12]	; (800bb04 <vTaskSuspendAll+0x18>)
 800baf8:	6013      	str	r3, [r2, #0]
}
 800bafa:	bf00      	nop
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bc80      	pop	{r7}
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	20000d6c 	.word	0x20000d6c

0800bb08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bb12:	2300      	movs	r3, #0
 800bb14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bb16:	4b42      	ldr	r3, [pc, #264]	; (800bc20 <xTaskResumeAll+0x118>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10a      	bne.n	800bb34 <xTaskResumeAll+0x2c>
	__asm volatile
 800bb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb22:	f383 8811 	msr	BASEPRI, r3
 800bb26:	f3bf 8f6f 	isb	sy
 800bb2a:	f3bf 8f4f 	dsb	sy
 800bb2e:	603b      	str	r3, [r7, #0]
}
 800bb30:	bf00      	nop
 800bb32:	e7fe      	b.n	800bb32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bb34:	f001 f9ba 	bl	800ceac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bb38:	4b39      	ldr	r3, [pc, #228]	; (800bc20 <xTaskResumeAll+0x118>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	4a38      	ldr	r2, [pc, #224]	; (800bc20 <xTaskResumeAll+0x118>)
 800bb40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb42:	4b37      	ldr	r3, [pc, #220]	; (800bc20 <xTaskResumeAll+0x118>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d162      	bne.n	800bc10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb4a:	4b36      	ldr	r3, [pc, #216]	; (800bc24 <xTaskResumeAll+0x11c>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d05e      	beq.n	800bc10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb52:	e02f      	b.n	800bbb4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800bb54:	4b34      	ldr	r3, [pc, #208]	; (800bc28 <xTaskResumeAll+0x120>)
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	3318      	adds	r3, #24
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7fe ffc7 	bl	800aaf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	3304      	adds	r3, #4
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7fe ffc2 	bl	800aaf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb74:	4b2d      	ldr	r3, [pc, #180]	; (800bc2c <xTaskResumeAll+0x124>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d903      	bls.n	800bb84 <xTaskResumeAll+0x7c>
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb80:	4a2a      	ldr	r2, [pc, #168]	; (800bc2c <xTaskResumeAll+0x124>)
 800bb82:	6013      	str	r3, [r2, #0]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb88:	4613      	mov	r3, r2
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	4413      	add	r3, r2
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	4a27      	ldr	r2, [pc, #156]	; (800bc30 <xTaskResumeAll+0x128>)
 800bb92:	441a      	add	r2, r3
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	3304      	adds	r3, #4
 800bb98:	4619      	mov	r1, r3
 800bb9a:	4610      	mov	r0, r2
 800bb9c:	f7fe ff4f 	bl	800aa3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba4:	4b23      	ldr	r3, [pc, #140]	; (800bc34 <xTaskResumeAll+0x12c>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d302      	bcc.n	800bbb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bbae:	4b22      	ldr	r3, [pc, #136]	; (800bc38 <xTaskResumeAll+0x130>)
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bbb4:	4b1c      	ldr	r3, [pc, #112]	; (800bc28 <xTaskResumeAll+0x120>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1cb      	bne.n	800bb54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bbc2:	f000 fb8d 	bl	800c2e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bbc6:	4b1d      	ldr	r3, [pc, #116]	; (800bc3c <xTaskResumeAll+0x134>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d010      	beq.n	800bbf4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bbd2:	f000 f845 	bl	800bc60 <xTaskIncrementTick>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bbdc:	4b16      	ldr	r3, [pc, #88]	; (800bc38 <xTaskResumeAll+0x130>)
 800bbde:	2201      	movs	r2, #1
 800bbe0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1f1      	bne.n	800bbd2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800bbee:	4b13      	ldr	r3, [pc, #76]	; (800bc3c <xTaskResumeAll+0x134>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bbf4:	4b10      	ldr	r3, [pc, #64]	; (800bc38 <xTaskResumeAll+0x130>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d009      	beq.n	800bc10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bc00:	4b0f      	ldr	r3, [pc, #60]	; (800bc40 <xTaskResumeAll+0x138>)
 800bc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc10:	f001 f97c 	bl	800cf0c <vPortExitCritical>

	return xAlreadyYielded;
 800bc14:	68bb      	ldr	r3, [r7, #8]
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	20000d6c 	.word	0x20000d6c
 800bc24:	20000d44 	.word	0x20000d44
 800bc28:	20000d04 	.word	0x20000d04
 800bc2c:	20000d4c 	.word	0x20000d4c
 800bc30:	20000874 	.word	0x20000874
 800bc34:	20000870 	.word	0x20000870
 800bc38:	20000d58 	.word	0x20000d58
 800bc3c:	20000d54 	.word	0x20000d54
 800bc40:	e000ed04 	.word	0xe000ed04

0800bc44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bc4a:	4b04      	ldr	r3, [pc, #16]	; (800bc5c <xTaskGetTickCount+0x18>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bc50:	687b      	ldr	r3, [r7, #4]
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	370c      	adds	r7, #12
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bc80      	pop	{r7}
 800bc5a:	4770      	bx	lr
 800bc5c:	20000d48 	.word	0x20000d48

0800bc60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc66:	2300      	movs	r3, #0
 800bc68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc6a:	4b51      	ldr	r3, [pc, #324]	; (800bdb0 <xTaskIncrementTick+0x150>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f040 808e 	bne.w	800bd90 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bc74:	4b4f      	ldr	r3, [pc, #316]	; (800bdb4 <xTaskIncrementTick+0x154>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bc7c:	4a4d      	ldr	r2, [pc, #308]	; (800bdb4 <xTaskIncrementTick+0x154>)
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d120      	bne.n	800bcca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bc88:	4b4b      	ldr	r3, [pc, #300]	; (800bdb8 <xTaskIncrementTick+0x158>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00a      	beq.n	800bca8 <xTaskIncrementTick+0x48>
	__asm volatile
 800bc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc96:	f383 8811 	msr	BASEPRI, r3
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	603b      	str	r3, [r7, #0]
}
 800bca4:	bf00      	nop
 800bca6:	e7fe      	b.n	800bca6 <xTaskIncrementTick+0x46>
 800bca8:	4b43      	ldr	r3, [pc, #268]	; (800bdb8 <xTaskIncrementTick+0x158>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	60fb      	str	r3, [r7, #12]
 800bcae:	4b43      	ldr	r3, [pc, #268]	; (800bdbc <xTaskIncrementTick+0x15c>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a41      	ldr	r2, [pc, #260]	; (800bdb8 <xTaskIncrementTick+0x158>)
 800bcb4:	6013      	str	r3, [r2, #0]
 800bcb6:	4a41      	ldr	r2, [pc, #260]	; (800bdbc <xTaskIncrementTick+0x15c>)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6013      	str	r3, [r2, #0]
 800bcbc:	4b40      	ldr	r3, [pc, #256]	; (800bdc0 <xTaskIncrementTick+0x160>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	4a3f      	ldr	r2, [pc, #252]	; (800bdc0 <xTaskIncrementTick+0x160>)
 800bcc4:	6013      	str	r3, [r2, #0]
 800bcc6:	f000 fb0b 	bl	800c2e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bcca:	4b3e      	ldr	r3, [pc, #248]	; (800bdc4 <xTaskIncrementTick+0x164>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	693a      	ldr	r2, [r7, #16]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d34e      	bcc.n	800bd72 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcd4:	4b38      	ldr	r3, [pc, #224]	; (800bdb8 <xTaskIncrementTick+0x158>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d101      	bne.n	800bce2 <xTaskIncrementTick+0x82>
 800bcde:	2301      	movs	r3, #1
 800bce0:	e000      	b.n	800bce4 <xTaskIncrementTick+0x84>
 800bce2:	2300      	movs	r3, #0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d004      	beq.n	800bcf2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bce8:	4b36      	ldr	r3, [pc, #216]	; (800bdc4 <xTaskIncrementTick+0x164>)
 800bcea:	f04f 32ff 	mov.w	r2, #4294967295
 800bcee:	601a      	str	r2, [r3, #0]
					break;
 800bcf0:	e03f      	b.n	800bd72 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bcf2:	4b31      	ldr	r3, [pc, #196]	; (800bdb8 <xTaskIncrementTick+0x158>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bd02:	693a      	ldr	r2, [r7, #16]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d203      	bcs.n	800bd12 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bd0a:	4a2e      	ldr	r2, [pc, #184]	; (800bdc4 <xTaskIncrementTick+0x164>)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6013      	str	r3, [r2, #0]
						break;
 800bd10:	e02f      	b.n	800bd72 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	3304      	adds	r3, #4
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7fe feec 	bl	800aaf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d004      	beq.n	800bd2e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	3318      	adds	r3, #24
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fe fee3 	bl	800aaf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd32:	4b25      	ldr	r3, [pc, #148]	; (800bdc8 <xTaskIncrementTick+0x168>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d903      	bls.n	800bd42 <xTaskIncrementTick+0xe2>
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3e:	4a22      	ldr	r2, [pc, #136]	; (800bdc8 <xTaskIncrementTick+0x168>)
 800bd40:	6013      	str	r3, [r2, #0]
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd46:	4613      	mov	r3, r2
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	4413      	add	r3, r2
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	4a1f      	ldr	r2, [pc, #124]	; (800bdcc <xTaskIncrementTick+0x16c>)
 800bd50:	441a      	add	r2, r3
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	3304      	adds	r3, #4
 800bd56:	4619      	mov	r1, r3
 800bd58:	4610      	mov	r0, r2
 800bd5a:	f7fe fe70 	bl	800aa3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd62:	4b1b      	ldr	r3, [pc, #108]	; (800bdd0 <xTaskIncrementTick+0x170>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d3b3      	bcc.n	800bcd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd70:	e7b0      	b.n	800bcd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd72:	4b17      	ldr	r3, [pc, #92]	; (800bdd0 <xTaskIncrementTick+0x170>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd78:	4914      	ldr	r1, [pc, #80]	; (800bdcc <xTaskIncrementTick+0x16c>)
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	4413      	add	r3, r2
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	440b      	add	r3, r1
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d907      	bls.n	800bd9a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	617b      	str	r3, [r7, #20]
 800bd8e:	e004      	b.n	800bd9a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bd90:	4b10      	ldr	r3, [pc, #64]	; (800bdd4 <xTaskIncrementTick+0x174>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	3301      	adds	r3, #1
 800bd96:	4a0f      	ldr	r2, [pc, #60]	; (800bdd4 <xTaskIncrementTick+0x174>)
 800bd98:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bd9a:	4b0f      	ldr	r3, [pc, #60]	; (800bdd8 <xTaskIncrementTick+0x178>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800bda2:	2301      	movs	r3, #1
 800bda4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bda6:	697b      	ldr	r3, [r7, #20]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3718      	adds	r7, #24
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	20000d6c 	.word	0x20000d6c
 800bdb4:	20000d48 	.word	0x20000d48
 800bdb8:	20000cfc 	.word	0x20000cfc
 800bdbc:	20000d00 	.word	0x20000d00
 800bdc0:	20000d5c 	.word	0x20000d5c
 800bdc4:	20000d64 	.word	0x20000d64
 800bdc8:	20000d4c 	.word	0x20000d4c
 800bdcc:	20000874 	.word	0x20000874
 800bdd0:	20000870 	.word	0x20000870
 800bdd4:	20000d54 	.word	0x20000d54
 800bdd8:	20000d58 	.word	0x20000d58

0800bddc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bddc:	b480      	push	{r7}
 800bdde:	b085      	sub	sp, #20
 800bde0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bde2:	4b27      	ldr	r3, [pc, #156]	; (800be80 <vTaskSwitchContext+0xa4>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d003      	beq.n	800bdf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bdea:	4b26      	ldr	r3, [pc, #152]	; (800be84 <vTaskSwitchContext+0xa8>)
 800bdec:	2201      	movs	r2, #1
 800bdee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bdf0:	e041      	b.n	800be76 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bdf2:	4b24      	ldr	r3, [pc, #144]	; (800be84 <vTaskSwitchContext+0xa8>)
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800bdf8:	4b23      	ldr	r3, [pc, #140]	; (800be88 <vTaskSwitchContext+0xac>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	60fb      	str	r3, [r7, #12]
 800bdfe:	e010      	b.n	800be22 <vTaskSwitchContext+0x46>
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d10a      	bne.n	800be1c <vTaskSwitchContext+0x40>
	__asm volatile
 800be06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0a:	f383 8811 	msr	BASEPRI, r3
 800be0e:	f3bf 8f6f 	isb	sy
 800be12:	f3bf 8f4f 	dsb	sy
 800be16:	607b      	str	r3, [r7, #4]
}
 800be18:	bf00      	nop
 800be1a:	e7fe      	b.n	800be1a <vTaskSwitchContext+0x3e>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	3b01      	subs	r3, #1
 800be20:	60fb      	str	r3, [r7, #12]
 800be22:	491a      	ldr	r1, [pc, #104]	; (800be8c <vTaskSwitchContext+0xb0>)
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	4613      	mov	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4413      	add	r3, r2
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	440b      	add	r3, r1
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d0e4      	beq.n	800be00 <vTaskSwitchContext+0x24>
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	4613      	mov	r3, r2
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	4413      	add	r3, r2
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	4a12      	ldr	r2, [pc, #72]	; (800be8c <vTaskSwitchContext+0xb0>)
 800be42:	4413      	add	r3, r2
 800be44:	60bb      	str	r3, [r7, #8]
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	685a      	ldr	r2, [r3, #4]
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	605a      	str	r2, [r3, #4]
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	685a      	ldr	r2, [r3, #4]
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	3308      	adds	r3, #8
 800be58:	429a      	cmp	r2, r3
 800be5a:	d104      	bne.n	800be66 <vTaskSwitchContext+0x8a>
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	685a      	ldr	r2, [r3, #4]
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	605a      	str	r2, [r3, #4]
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	4a08      	ldr	r2, [pc, #32]	; (800be90 <vTaskSwitchContext+0xb4>)
 800be6e:	6013      	str	r3, [r2, #0]
 800be70:	4a05      	ldr	r2, [pc, #20]	; (800be88 <vTaskSwitchContext+0xac>)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6013      	str	r3, [r2, #0]
}
 800be76:	bf00      	nop
 800be78:	3714      	adds	r7, #20
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bc80      	pop	{r7}
 800be7e:	4770      	bx	lr
 800be80:	20000d6c 	.word	0x20000d6c
 800be84:	20000d58 	.word	0x20000d58
 800be88:	20000d4c 	.word	0x20000d4c
 800be8c:	20000874 	.word	0x20000874
 800be90:	20000870 	.word	0x20000870

0800be94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d10a      	bne.n	800beba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea8:	f383 8811 	msr	BASEPRI, r3
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	f3bf 8f4f 	dsb	sy
 800beb4:	60fb      	str	r3, [r7, #12]
}
 800beb6:	bf00      	nop
 800beb8:	e7fe      	b.n	800beb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800beba:	4b07      	ldr	r3, [pc, #28]	; (800bed8 <vTaskPlaceOnEventList+0x44>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	3318      	adds	r3, #24
 800bec0:	4619      	mov	r1, r3
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f7fe fdde 	bl	800aa84 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bec8:	2101      	movs	r1, #1
 800beca:	6838      	ldr	r0, [r7, #0]
 800becc:	f000 fb94 	bl	800c5f8 <prvAddCurrentTaskToDelayedList>
}
 800bed0:	bf00      	nop
 800bed2:	3710      	adds	r7, #16
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	20000870 	.word	0x20000870

0800bedc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b086      	sub	sp, #24
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d10a      	bne.n	800bf04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800beee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	617b      	str	r3, [r7, #20]
}
 800bf00:	bf00      	nop
 800bf02:	e7fe      	b.n	800bf02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf04:	4b0a      	ldr	r3, [pc, #40]	; (800bf30 <vTaskPlaceOnEventListRestricted+0x54>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3318      	adds	r3, #24
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	68f8      	ldr	r0, [r7, #12]
 800bf0e:	f7fe fd96 	bl	800aa3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d002      	beq.n	800bf1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bf18:	f04f 33ff 	mov.w	r3, #4294967295
 800bf1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bf1e:	6879      	ldr	r1, [r7, #4]
 800bf20:	68b8      	ldr	r0, [r7, #8]
 800bf22:	f000 fb69 	bl	800c5f8 <prvAddCurrentTaskToDelayedList>
	}
 800bf26:	bf00      	nop
 800bf28:	3718      	adds	r7, #24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	20000870 	.word	0x20000870

0800bf34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10a      	bne.n	800bf60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4e:	f383 8811 	msr	BASEPRI, r3
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	60fb      	str	r3, [r7, #12]
}
 800bf5c:	bf00      	nop
 800bf5e:	e7fe      	b.n	800bf5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	3318      	adds	r3, #24
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fe fdc5 	bl	800aaf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf6a:	4b1e      	ldr	r3, [pc, #120]	; (800bfe4 <xTaskRemoveFromEventList+0xb0>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d11d      	bne.n	800bfae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	3304      	adds	r3, #4
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7fe fdbc 	bl	800aaf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf80:	4b19      	ldr	r3, [pc, #100]	; (800bfe8 <xTaskRemoveFromEventList+0xb4>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d903      	bls.n	800bf90 <xTaskRemoveFromEventList+0x5c>
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8c:	4a16      	ldr	r2, [pc, #88]	; (800bfe8 <xTaskRemoveFromEventList+0xb4>)
 800bf8e:	6013      	str	r3, [r2, #0]
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf94:	4613      	mov	r3, r2
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	4413      	add	r3, r2
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	4a13      	ldr	r2, [pc, #76]	; (800bfec <xTaskRemoveFromEventList+0xb8>)
 800bf9e:	441a      	add	r2, r3
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	4610      	mov	r0, r2
 800bfa8:	f7fe fd49 	bl	800aa3e <vListInsertEnd>
 800bfac:	e005      	b.n	800bfba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	3318      	adds	r3, #24
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	480e      	ldr	r0, [pc, #56]	; (800bff0 <xTaskRemoveFromEventList+0xbc>)
 800bfb6:	f7fe fd42 	bl	800aa3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfbe:	4b0d      	ldr	r3, [pc, #52]	; (800bff4 <xTaskRemoveFromEventList+0xc0>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d905      	bls.n	800bfd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bfcc:	4b0a      	ldr	r3, [pc, #40]	; (800bff8 <xTaskRemoveFromEventList+0xc4>)
 800bfce:	2201      	movs	r2, #1
 800bfd0:	601a      	str	r2, [r3, #0]
 800bfd2:	e001      	b.n	800bfd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bfd8:	697b      	ldr	r3, [r7, #20]
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3718      	adds	r7, #24
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	20000d6c 	.word	0x20000d6c
 800bfe8:	20000d4c 	.word	0x20000d4c
 800bfec:	20000874 	.word	0x20000874
 800bff0:	20000d04 	.word	0x20000d04
 800bff4:	20000870 	.word	0x20000870
 800bff8:	20000d58 	.word	0x20000d58

0800bffc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c004:	4b06      	ldr	r3, [pc, #24]	; (800c020 <vTaskInternalSetTimeOutState+0x24>)
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c00c:	4b05      	ldr	r3, [pc, #20]	; (800c024 <vTaskInternalSetTimeOutState+0x28>)
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	605a      	str	r2, [r3, #4]
}
 800c014:	bf00      	nop
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	bc80      	pop	{r7}
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	20000d5c 	.word	0x20000d5c
 800c024:	20000d48 	.word	0x20000d48

0800c028 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b088      	sub	sp, #32
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10a      	bne.n	800c04e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03c:	f383 8811 	msr	BASEPRI, r3
 800c040:	f3bf 8f6f 	isb	sy
 800c044:	f3bf 8f4f 	dsb	sy
 800c048:	613b      	str	r3, [r7, #16]
}
 800c04a:	bf00      	nop
 800c04c:	e7fe      	b.n	800c04c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d10a      	bne.n	800c06a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c058:	f383 8811 	msr	BASEPRI, r3
 800c05c:	f3bf 8f6f 	isb	sy
 800c060:	f3bf 8f4f 	dsb	sy
 800c064:	60fb      	str	r3, [r7, #12]
}
 800c066:	bf00      	nop
 800c068:	e7fe      	b.n	800c068 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c06a:	f000 ff1f 	bl	800ceac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c06e:	4b1d      	ldr	r3, [pc, #116]	; (800c0e4 <xTaskCheckForTimeOut+0xbc>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	69ba      	ldr	r2, [r7, #24]
 800c07a:	1ad3      	subs	r3, r2, r3
 800c07c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c086:	d102      	bne.n	800c08e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c088:	2300      	movs	r3, #0
 800c08a:	61fb      	str	r3, [r7, #28]
 800c08c:	e023      	b.n	800c0d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	4b15      	ldr	r3, [pc, #84]	; (800c0e8 <xTaskCheckForTimeOut+0xc0>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	429a      	cmp	r2, r3
 800c098:	d007      	beq.n	800c0aa <xTaskCheckForTimeOut+0x82>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	69ba      	ldr	r2, [r7, #24]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d302      	bcc.n	800c0aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	61fb      	str	r3, [r7, #28]
 800c0a8:	e015      	b.n	800c0d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	697a      	ldr	r2, [r7, #20]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d20b      	bcs.n	800c0cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	1ad2      	subs	r2, r2, r3
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7ff ff9b 	bl	800bffc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	61fb      	str	r3, [r7, #28]
 800c0ca:	e004      	b.n	800c0d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c0d6:	f000 ff19 	bl	800cf0c <vPortExitCritical>

	return xReturn;
 800c0da:	69fb      	ldr	r3, [r7, #28]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3720      	adds	r7, #32
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	20000d48 	.word	0x20000d48
 800c0e8:	20000d5c 	.word	0x20000d5c

0800c0ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c0f0:	4b03      	ldr	r3, [pc, #12]	; (800c100 <vTaskMissedYield+0x14>)
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	601a      	str	r2, [r3, #0]
}
 800c0f6:	bf00      	nop
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bc80      	pop	{r7}
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	20000d58 	.word	0x20000d58

0800c104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c10c:	f000 f852 	bl	800c1b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c110:	4b06      	ldr	r3, [pc, #24]	; (800c12c <prvIdleTask+0x28>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	2b01      	cmp	r3, #1
 800c116:	d9f9      	bls.n	800c10c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c118:	4b05      	ldr	r3, [pc, #20]	; (800c130 <prvIdleTask+0x2c>)
 800c11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c128:	e7f0      	b.n	800c10c <prvIdleTask+0x8>
 800c12a:	bf00      	nop
 800c12c:	20000874 	.word	0x20000874
 800c130:	e000ed04 	.word	0xe000ed04

0800c134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c13a:	2300      	movs	r3, #0
 800c13c:	607b      	str	r3, [r7, #4]
 800c13e:	e00c      	b.n	800c15a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	4613      	mov	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	4413      	add	r3, r2
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	4a12      	ldr	r2, [pc, #72]	; (800c194 <prvInitialiseTaskLists+0x60>)
 800c14c:	4413      	add	r3, r2
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fe fc4a 	bl	800a9e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	3301      	adds	r3, #1
 800c158:	607b      	str	r3, [r7, #4]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b37      	cmp	r3, #55	; 0x37
 800c15e:	d9ef      	bls.n	800c140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c160:	480d      	ldr	r0, [pc, #52]	; (800c198 <prvInitialiseTaskLists+0x64>)
 800c162:	f7fe fc41 	bl	800a9e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c166:	480d      	ldr	r0, [pc, #52]	; (800c19c <prvInitialiseTaskLists+0x68>)
 800c168:	f7fe fc3e 	bl	800a9e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c16c:	480c      	ldr	r0, [pc, #48]	; (800c1a0 <prvInitialiseTaskLists+0x6c>)
 800c16e:	f7fe fc3b 	bl	800a9e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c172:	480c      	ldr	r0, [pc, #48]	; (800c1a4 <prvInitialiseTaskLists+0x70>)
 800c174:	f7fe fc38 	bl	800a9e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c178:	480b      	ldr	r0, [pc, #44]	; (800c1a8 <prvInitialiseTaskLists+0x74>)
 800c17a:	f7fe fc35 	bl	800a9e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c17e:	4b0b      	ldr	r3, [pc, #44]	; (800c1ac <prvInitialiseTaskLists+0x78>)
 800c180:	4a05      	ldr	r2, [pc, #20]	; (800c198 <prvInitialiseTaskLists+0x64>)
 800c182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c184:	4b0a      	ldr	r3, [pc, #40]	; (800c1b0 <prvInitialiseTaskLists+0x7c>)
 800c186:	4a05      	ldr	r2, [pc, #20]	; (800c19c <prvInitialiseTaskLists+0x68>)
 800c188:	601a      	str	r2, [r3, #0]
}
 800c18a:	bf00      	nop
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	20000874 	.word	0x20000874
 800c198:	20000cd4 	.word	0x20000cd4
 800c19c:	20000ce8 	.word	0x20000ce8
 800c1a0:	20000d04 	.word	0x20000d04
 800c1a4:	20000d18 	.word	0x20000d18
 800c1a8:	20000d30 	.word	0x20000d30
 800c1ac:	20000cfc 	.word	0x20000cfc
 800c1b0:	20000d00 	.word	0x20000d00

0800c1b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1ba:	e019      	b.n	800c1f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c1bc:	f000 fe76 	bl	800ceac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c1c0:	4b10      	ldr	r3, [pc, #64]	; (800c204 <prvCheckTasksWaitingTermination+0x50>)
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	3304      	adds	r3, #4
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7fe fc91 	bl	800aaf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c1d2:	4b0d      	ldr	r3, [pc, #52]	; (800c208 <prvCheckTasksWaitingTermination+0x54>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	4a0b      	ldr	r2, [pc, #44]	; (800c208 <prvCheckTasksWaitingTermination+0x54>)
 800c1da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c1dc:	4b0b      	ldr	r3, [pc, #44]	; (800c20c <prvCheckTasksWaitingTermination+0x58>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	4a0a      	ldr	r2, [pc, #40]	; (800c20c <prvCheckTasksWaitingTermination+0x58>)
 800c1e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c1e6:	f000 fe91 	bl	800cf0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 f848 	bl	800c280 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1f0:	4b06      	ldr	r3, [pc, #24]	; (800c20c <prvCheckTasksWaitingTermination+0x58>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d1e1      	bne.n	800c1bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c1f8:	bf00      	nop
 800c1fa:	bf00      	nop
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	20000d18 	.word	0x20000d18
 800c208:	20000d44 	.word	0x20000d44
 800c20c:	20000d2c 	.word	0x20000d2c

0800c210 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800c218:	2300      	movs	r3, #0
 800c21a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c21c:	e005      	b.n	800c22a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	3301      	adds	r3, #1
 800c222:	607b      	str	r3, [r7, #4]
			ulCount++;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	3301      	adds	r3, #1
 800c228:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	2ba5      	cmp	r3, #165	; 0xa5
 800c230:	d0f5      	beq.n	800c21e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	089b      	lsrs	r3, r3, #2
 800c236:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	b29b      	uxth	r3, r3
	}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3714      	adds	r7, #20
 800c240:	46bd      	mov	sp, r7
 800c242:	bc80      	pop	{r7}
 800c244:	4770      	bx	lr
	...

0800c248 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b086      	sub	sp, #24
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d102      	bne.n	800c25c <uxTaskGetStackHighWaterMark+0x14>
 800c256:	4b09      	ldr	r3, [pc, #36]	; (800c27c <uxTaskGetStackHighWaterMark+0x34>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	e000      	b.n	800c25e <uxTaskGetStackHighWaterMark+0x16>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c264:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800c266:	6938      	ldr	r0, [r7, #16]
 800c268:	f7ff ffd2 	bl	800c210 <prvTaskCheckFreeStackSpace>
 800c26c:	4603      	mov	r3, r0
 800c26e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800c270:	68fb      	ldr	r3, [r7, #12]
	}
 800c272:	4618      	mov	r0, r3
 800c274:	3718      	adds	r7, #24
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	20000870 	.word	0x20000870

0800c280 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d108      	bne.n	800c2a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c296:	4618      	mov	r0, r3
 800c298:	f000 ffcc 	bl	800d234 <vPortFree>
				vPortFree( pxTCB );
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 ffc9 	bl	800d234 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c2a2:	e018      	b.n	800c2d6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d103      	bne.n	800c2b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 ffc0 	bl	800d234 <vPortFree>
	}
 800c2b4:	e00f      	b.n	800c2d6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d00a      	beq.n	800c2d6 <prvDeleteTCB+0x56>
	__asm volatile
 800c2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c4:	f383 8811 	msr	BASEPRI, r3
 800c2c8:	f3bf 8f6f 	isb	sy
 800c2cc:	f3bf 8f4f 	dsb	sy
 800c2d0:	60fb      	str	r3, [r7, #12]
}
 800c2d2:	bf00      	nop
 800c2d4:	e7fe      	b.n	800c2d4 <prvDeleteTCB+0x54>
	}
 800c2d6:	bf00      	nop
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
	...

0800c2e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2e6:	4b0e      	ldr	r3, [pc, #56]	; (800c320 <prvResetNextTaskUnblockTime+0x40>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d101      	bne.n	800c2f4 <prvResetNextTaskUnblockTime+0x14>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e000      	b.n	800c2f6 <prvResetNextTaskUnblockTime+0x16>
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d004      	beq.n	800c304 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c2fa:	4b0a      	ldr	r3, [pc, #40]	; (800c324 <prvResetNextTaskUnblockTime+0x44>)
 800c2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c300:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c302:	e008      	b.n	800c316 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c304:	4b06      	ldr	r3, [pc, #24]	; (800c320 <prvResetNextTaskUnblockTime+0x40>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	68db      	ldr	r3, [r3, #12]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	4a04      	ldr	r2, [pc, #16]	; (800c324 <prvResetNextTaskUnblockTime+0x44>)
 800c314:	6013      	str	r3, [r2, #0]
}
 800c316:	bf00      	nop
 800c318:	370c      	adds	r7, #12
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bc80      	pop	{r7}
 800c31e:	4770      	bx	lr
 800c320:	20000cfc 	.word	0x20000cfc
 800c324:	20000d64 	.word	0x20000d64

0800c328 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c32e:	4b0b      	ldr	r3, [pc, #44]	; (800c35c <xTaskGetSchedulerState+0x34>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d102      	bne.n	800c33c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c336:	2301      	movs	r3, #1
 800c338:	607b      	str	r3, [r7, #4]
 800c33a:	e008      	b.n	800c34e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c33c:	4b08      	ldr	r3, [pc, #32]	; (800c360 <xTaskGetSchedulerState+0x38>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d102      	bne.n	800c34a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c344:	2302      	movs	r3, #2
 800c346:	607b      	str	r3, [r7, #4]
 800c348:	e001      	b.n	800c34e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c34a:	2300      	movs	r3, #0
 800c34c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c34e:	687b      	ldr	r3, [r7, #4]
	}
 800c350:	4618      	mov	r0, r3
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	bc80      	pop	{r7}
 800c358:	4770      	bx	lr
 800c35a:	bf00      	nop
 800c35c:	20000d50 	.word	0x20000d50
 800c360:	20000d6c 	.word	0x20000d6c

0800c364 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c364:	b580      	push	{r7, lr}
 800c366:	b086      	sub	sp, #24
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c370:	2300      	movs	r3, #0
 800c372:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d056      	beq.n	800c428 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c37a:	4b2e      	ldr	r3, [pc, #184]	; (800c434 <xTaskPriorityDisinherit+0xd0>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	693a      	ldr	r2, [r7, #16]
 800c380:	429a      	cmp	r2, r3
 800c382:	d00a      	beq.n	800c39a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c388:	f383 8811 	msr	BASEPRI, r3
 800c38c:	f3bf 8f6f 	isb	sy
 800c390:	f3bf 8f4f 	dsb	sy
 800c394:	60fb      	str	r3, [r7, #12]
}
 800c396:	bf00      	nop
 800c398:	e7fe      	b.n	800c398 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d10a      	bne.n	800c3b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	f383 8811 	msr	BASEPRI, r3
 800c3aa:	f3bf 8f6f 	isb	sy
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	60bb      	str	r3, [r7, #8]
}
 800c3b4:	bf00      	nop
 800c3b6:	e7fe      	b.n	800c3b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3bc:	1e5a      	subs	r2, r3, #1
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d02c      	beq.n	800c428 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d128      	bne.n	800c428 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	3304      	adds	r3, #4
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fe fb8a 	bl	800aaf4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3f8:	4b0f      	ldr	r3, [pc, #60]	; (800c438 <xTaskPriorityDisinherit+0xd4>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d903      	bls.n	800c408 <xTaskPriorityDisinherit+0xa4>
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c404:	4a0c      	ldr	r2, [pc, #48]	; (800c438 <xTaskPriorityDisinherit+0xd4>)
 800c406:	6013      	str	r3, [r2, #0]
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c40c:	4613      	mov	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	4413      	add	r3, r2
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	4a09      	ldr	r2, [pc, #36]	; (800c43c <xTaskPriorityDisinherit+0xd8>)
 800c416:	441a      	add	r2, r3
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	3304      	adds	r3, #4
 800c41c:	4619      	mov	r1, r3
 800c41e:	4610      	mov	r0, r2
 800c420:	f7fe fb0d 	bl	800aa3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c424:	2301      	movs	r3, #1
 800c426:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c428:	697b      	ldr	r3, [r7, #20]
	}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3718      	adds	r7, #24
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	20000870 	.word	0x20000870
 800c438:	20000d4c 	.word	0x20000d4c
 800c43c:	20000874 	.word	0x20000874

0800c440 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c44a:	f000 fd2f 	bl	800ceac <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c44e:	4b1e      	ldr	r3, [pc, #120]	; (800c4c8 <ulTaskNotifyTake+0x88>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c454:	2b00      	cmp	r3, #0
 800c456:	d113      	bne.n	800c480 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c458:	4b1b      	ldr	r3, [pc, #108]	; (800c4c8 <ulTaskNotifyTake+0x88>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	2201      	movs	r2, #1
 800c45e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00b      	beq.n	800c480 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c468:	2101      	movs	r1, #1
 800c46a:	6838      	ldr	r0, [r7, #0]
 800c46c:	f000 f8c4 	bl	800c5f8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c470:	4b16      	ldr	r3, [pc, #88]	; (800c4cc <ulTaskNotifyTake+0x8c>)
 800c472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c476:	601a      	str	r2, [r3, #0]
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c480:	f000 fd44 	bl	800cf0c <vPortExitCritical>

		taskENTER_CRITICAL();
 800c484:	f000 fd12 	bl	800ceac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c488:	4b0f      	ldr	r3, [pc, #60]	; (800c4c8 <ulTaskNotifyTake+0x88>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c48e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00c      	beq.n	800c4b0 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d004      	beq.n	800c4a6 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c49c:	4b0a      	ldr	r3, [pc, #40]	; (800c4c8 <ulTaskNotifyTake+0x88>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	655a      	str	r2, [r3, #84]	; 0x54
 800c4a4:	e004      	b.n	800c4b0 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c4a6:	4b08      	ldr	r3, [pc, #32]	; (800c4c8 <ulTaskNotifyTake+0x88>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	3a01      	subs	r2, #1
 800c4ae:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c4b0:	4b05      	ldr	r3, [pc, #20]	; (800c4c8 <ulTaskNotifyTake+0x88>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800c4ba:	f000 fd27 	bl	800cf0c <vPortExitCritical>

		return ulReturn;
 800c4be:	68fb      	ldr	r3, [r7, #12]
	}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	20000870 	.word	0x20000870
 800c4cc:	e000ed04 	.word	0xe000ed04

0800c4d0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b08a      	sub	sp, #40	; 0x28
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10a      	bne.n	800c4f6 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	61bb      	str	r3, [r7, #24]
}
 800c4f2:	bf00      	nop
 800c4f4:	e7fe      	b.n	800c4f4 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4f6:	f000 fd9b 	bl	800d030 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800c4fe:	f3ef 8211 	mrs	r2, BASEPRI
 800c502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c506:	f383 8811 	msr	BASEPRI, r3
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	f3bf 8f4f 	dsb	sy
 800c512:	617a      	str	r2, [r7, #20]
 800c514:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c516:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c518:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c520:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c524:	2202      	movs	r2, #2
 800c526:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c52e:	1c5a      	adds	r2, r3, #1
 800c530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c532:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c534:	7ffb      	ldrb	r3, [r7, #31]
 800c536:	2b01      	cmp	r3, #1
 800c538:	d147      	bne.n	800c5ca <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d00a      	beq.n	800c558 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 800c542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	60fb      	str	r3, [r7, #12]
}
 800c554:	bf00      	nop
 800c556:	e7fe      	b.n	800c556 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c558:	4b21      	ldr	r3, [pc, #132]	; (800c5e0 <vTaskNotifyGiveFromISR+0x110>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d11d      	bne.n	800c59c <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c562:	3304      	adds	r3, #4
 800c564:	4618      	mov	r0, r3
 800c566:	f7fe fac5 	bl	800aaf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c56e:	4b1d      	ldr	r3, [pc, #116]	; (800c5e4 <vTaskNotifyGiveFromISR+0x114>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	429a      	cmp	r2, r3
 800c574:	d903      	bls.n	800c57e <vTaskNotifyGiveFromISR+0xae>
 800c576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57a:	4a1a      	ldr	r2, [pc, #104]	; (800c5e4 <vTaskNotifyGiveFromISR+0x114>)
 800c57c:	6013      	str	r3, [r2, #0]
 800c57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c582:	4613      	mov	r3, r2
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	4413      	add	r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	4a17      	ldr	r2, [pc, #92]	; (800c5e8 <vTaskNotifyGiveFromISR+0x118>)
 800c58c:	441a      	add	r2, r3
 800c58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c590:	3304      	adds	r3, #4
 800c592:	4619      	mov	r1, r3
 800c594:	4610      	mov	r0, r2
 800c596:	f7fe fa52 	bl	800aa3e <vListInsertEnd>
 800c59a:	e005      	b.n	800c5a8 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59e:	3318      	adds	r3, #24
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	4812      	ldr	r0, [pc, #72]	; (800c5ec <vTaskNotifyGiveFromISR+0x11c>)
 800c5a4:	f7fe fa4b 	bl	800aa3e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ac:	4b10      	ldr	r3, [pc, #64]	; (800c5f0 <vTaskNotifyGiveFromISR+0x120>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d909      	bls.n	800c5ca <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d003      	beq.n	800c5c4 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	601a      	str	r2, [r3, #0]
 800c5c2:	e002      	b.n	800c5ca <vTaskNotifyGiveFromISR+0xfa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800c5c4:	4b0b      	ldr	r3, [pc, #44]	; (800c5f4 <vTaskNotifyGiveFromISR+0x124>)
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	601a      	str	r2, [r3, #0]
 800c5ca:	6a3b      	ldr	r3, [r7, #32]
 800c5cc:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	f383 8811 	msr	BASEPRI, r3
}
 800c5d4:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c5d6:	bf00      	nop
 800c5d8:	3728      	adds	r7, #40	; 0x28
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	20000d6c 	.word	0x20000d6c
 800c5e4:	20000d4c 	.word	0x20000d4c
 800c5e8:	20000874 	.word	0x20000874
 800c5ec:	20000d04 	.word	0x20000d04
 800c5f0:	20000870 	.word	0x20000870
 800c5f4:	20000d58 	.word	0x20000d58

0800c5f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c602:	4b21      	ldr	r3, [pc, #132]	; (800c688 <prvAddCurrentTaskToDelayedList+0x90>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c608:	4b20      	ldr	r3, [pc, #128]	; (800c68c <prvAddCurrentTaskToDelayedList+0x94>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	3304      	adds	r3, #4
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fe fa70 	bl	800aaf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c61a:	d10a      	bne.n	800c632 <prvAddCurrentTaskToDelayedList+0x3a>
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d007      	beq.n	800c632 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c622:	4b1a      	ldr	r3, [pc, #104]	; (800c68c <prvAddCurrentTaskToDelayedList+0x94>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	3304      	adds	r3, #4
 800c628:	4619      	mov	r1, r3
 800c62a:	4819      	ldr	r0, [pc, #100]	; (800c690 <prvAddCurrentTaskToDelayedList+0x98>)
 800c62c:	f7fe fa07 	bl	800aa3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c630:	e026      	b.n	800c680 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4413      	add	r3, r2
 800c638:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c63a:	4b14      	ldr	r3, [pc, #80]	; (800c68c <prvAddCurrentTaskToDelayedList+0x94>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	429a      	cmp	r2, r3
 800c648:	d209      	bcs.n	800c65e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c64a:	4b12      	ldr	r3, [pc, #72]	; (800c694 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c64c:	681a      	ldr	r2, [r3, #0]
 800c64e:	4b0f      	ldr	r3, [pc, #60]	; (800c68c <prvAddCurrentTaskToDelayedList+0x94>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	3304      	adds	r3, #4
 800c654:	4619      	mov	r1, r3
 800c656:	4610      	mov	r0, r2
 800c658:	f7fe fa14 	bl	800aa84 <vListInsert>
}
 800c65c:	e010      	b.n	800c680 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c65e:	4b0e      	ldr	r3, [pc, #56]	; (800c698 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	4b0a      	ldr	r3, [pc, #40]	; (800c68c <prvAddCurrentTaskToDelayedList+0x94>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	3304      	adds	r3, #4
 800c668:	4619      	mov	r1, r3
 800c66a:	4610      	mov	r0, r2
 800c66c:	f7fe fa0a 	bl	800aa84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c670:	4b0a      	ldr	r3, [pc, #40]	; (800c69c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	68ba      	ldr	r2, [r7, #8]
 800c676:	429a      	cmp	r2, r3
 800c678:	d202      	bcs.n	800c680 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c67a:	4a08      	ldr	r2, [pc, #32]	; (800c69c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	6013      	str	r3, [r2, #0]
}
 800c680:	bf00      	nop
 800c682:	3710      	adds	r7, #16
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	20000d48 	.word	0x20000d48
 800c68c:	20000870 	.word	0x20000870
 800c690:	20000d30 	.word	0x20000d30
 800c694:	20000d00 	.word	0x20000d00
 800c698:	20000cfc 	.word	0x20000cfc
 800c69c:	20000d64 	.word	0x20000d64

0800c6a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b08a      	sub	sp, #40	; 0x28
 800c6a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c6aa:	f000 facb 	bl	800cc44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c6ae:	4b1c      	ldr	r3, [pc, #112]	; (800c720 <xTimerCreateTimerTask+0x80>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d021      	beq.n	800c6fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c6be:	1d3a      	adds	r2, r7, #4
 800c6c0:	f107 0108 	add.w	r1, r7, #8
 800c6c4:	f107 030c 	add.w	r3, r7, #12
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7fe f973 	bl	800a9b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c6ce:	6879      	ldr	r1, [r7, #4]
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	9202      	str	r2, [sp, #8]
 800c6d6:	9301      	str	r3, [sp, #4]
 800c6d8:	2302      	movs	r3, #2
 800c6da:	9300      	str	r3, [sp, #0]
 800c6dc:	2300      	movs	r3, #0
 800c6de:	460a      	mov	r2, r1
 800c6e0:	4910      	ldr	r1, [pc, #64]	; (800c724 <xTimerCreateTimerTask+0x84>)
 800c6e2:	4811      	ldr	r0, [pc, #68]	; (800c728 <xTimerCreateTimerTask+0x88>)
 800c6e4:	f7fe ff52 	bl	800b58c <xTaskCreateStatic>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	4a10      	ldr	r2, [pc, #64]	; (800c72c <xTimerCreateTimerTask+0x8c>)
 800c6ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c6ee:	4b0f      	ldr	r3, [pc, #60]	; (800c72c <xTimerCreateTimerTask+0x8c>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d001      	beq.n	800c6fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d10a      	bne.n	800c716 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c704:	f383 8811 	msr	BASEPRI, r3
 800c708:	f3bf 8f6f 	isb	sy
 800c70c:	f3bf 8f4f 	dsb	sy
 800c710:	613b      	str	r3, [r7, #16]
}
 800c712:	bf00      	nop
 800c714:	e7fe      	b.n	800c714 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c716:	697b      	ldr	r3, [r7, #20]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3718      	adds	r7, #24
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	20000da0 	.word	0x20000da0
 800c724:	0800e0ec 	.word	0x0800e0ec
 800c728:	0800c84d 	.word	0x0800c84d
 800c72c:	20000da4 	.word	0x20000da4

0800c730 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b08a      	sub	sp, #40	; 0x28
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
 800c73c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c73e:	2300      	movs	r3, #0
 800c740:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10a      	bne.n	800c75e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74c:	f383 8811 	msr	BASEPRI, r3
 800c750:	f3bf 8f6f 	isb	sy
 800c754:	f3bf 8f4f 	dsb	sy
 800c758:	623b      	str	r3, [r7, #32]
}
 800c75a:	bf00      	nop
 800c75c:	e7fe      	b.n	800c75c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c75e:	4b1a      	ldr	r3, [pc, #104]	; (800c7c8 <xTimerGenericCommand+0x98>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d02a      	beq.n	800c7bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	2b05      	cmp	r3, #5
 800c776:	dc18      	bgt.n	800c7aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c778:	f7ff fdd6 	bl	800c328 <xTaskGetSchedulerState>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b02      	cmp	r3, #2
 800c780:	d109      	bne.n	800c796 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c782:	4b11      	ldr	r3, [pc, #68]	; (800c7c8 <xTimerGenericCommand+0x98>)
 800c784:	6818      	ldr	r0, [r3, #0]
 800c786:	f107 0110 	add.w	r1, r7, #16
 800c78a:	2300      	movs	r3, #0
 800c78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c78e:	f7fe fb1b 	bl	800adc8 <xQueueGenericSend>
 800c792:	6278      	str	r0, [r7, #36]	; 0x24
 800c794:	e012      	b.n	800c7bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c796:	4b0c      	ldr	r3, [pc, #48]	; (800c7c8 <xTimerGenericCommand+0x98>)
 800c798:	6818      	ldr	r0, [r3, #0]
 800c79a:	f107 0110 	add.w	r1, r7, #16
 800c79e:	2300      	movs	r3, #0
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f7fe fb11 	bl	800adc8 <xQueueGenericSend>
 800c7a6:	6278      	str	r0, [r7, #36]	; 0x24
 800c7a8:	e008      	b.n	800c7bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c7aa:	4b07      	ldr	r3, [pc, #28]	; (800c7c8 <xTimerGenericCommand+0x98>)
 800c7ac:	6818      	ldr	r0, [r3, #0]
 800c7ae:	f107 0110 	add.w	r1, r7, #16
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	683a      	ldr	r2, [r7, #0]
 800c7b6:	f7fe fc05 	bl	800afc4 <xQueueGenericSendFromISR>
 800c7ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3728      	adds	r7, #40	; 0x28
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20000da0 	.word	0x20000da0

0800c7cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b088      	sub	sp, #32
 800c7d0:	af02      	add	r7, sp, #8
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7d6:	4b1c      	ldr	r3, [pc, #112]	; (800c848 <prvProcessExpiredTimer+0x7c>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	3304      	adds	r3, #4
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7fe f985 	bl	800aaf4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	69db      	ldr	r3, [r3, #28]
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d122      	bne.n	800c838 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	699a      	ldr	r2, [r3, #24]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	18d1      	adds	r1, r2, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	683a      	ldr	r2, [r7, #0]
 800c7fe:	6978      	ldr	r0, [r7, #20]
 800c800:	f000 f8c8 	bl	800c994 <prvInsertTimerInActiveList>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d016      	beq.n	800c838 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c80a:	2300      	movs	r3, #0
 800c80c:	9300      	str	r3, [sp, #0]
 800c80e:	2300      	movs	r3, #0
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	2100      	movs	r1, #0
 800c814:	6978      	ldr	r0, [r7, #20]
 800c816:	f7ff ff8b 	bl	800c730 <xTimerGenericCommand>
 800c81a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d10a      	bne.n	800c838 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c826:	f383 8811 	msr	BASEPRI, r3
 800c82a:	f3bf 8f6f 	isb	sy
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	60fb      	str	r3, [r7, #12]
}
 800c834:	bf00      	nop
 800c836:	e7fe      	b.n	800c836 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c83c:	6978      	ldr	r0, [r7, #20]
 800c83e:	4798      	blx	r3
}
 800c840:	bf00      	nop
 800c842:	3718      	adds	r7, #24
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}
 800c848:	20000d98 	.word	0x20000d98

0800c84c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c854:	f107 0308 	add.w	r3, r7, #8
 800c858:	4618      	mov	r0, r3
 800c85a:	f000 f857 	bl	800c90c <prvGetNextExpireTime>
 800c85e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	4619      	mov	r1, r3
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f000 f803 	bl	800c870 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c86a:	f000 f8d5 	bl	800ca18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c86e:	e7f1      	b.n	800c854 <prvTimerTask+0x8>

0800c870 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c87a:	f7ff f937 	bl	800baec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c87e:	f107 0308 	add.w	r3, r7, #8
 800c882:	4618      	mov	r0, r3
 800c884:	f000 f866 	bl	800c954 <prvSampleTimeNow>
 800c888:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d130      	bne.n	800c8f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d10a      	bne.n	800c8ac <prvProcessTimerOrBlockTask+0x3c>
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d806      	bhi.n	800c8ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c89e:	f7ff f933 	bl	800bb08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c8a2:	68f9      	ldr	r1, [r7, #12]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f7ff ff91 	bl	800c7cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c8aa:	e024      	b.n	800c8f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d008      	beq.n	800c8c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c8b2:	4b13      	ldr	r3, [pc, #76]	; (800c900 <prvProcessTimerOrBlockTask+0x90>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	bf0c      	ite	eq
 800c8bc:	2301      	moveq	r3, #1
 800c8be:	2300      	movne	r3, #0
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c8c4:	4b0f      	ldr	r3, [pc, #60]	; (800c904 <prvProcessTimerOrBlockTask+0x94>)
 800c8c6:	6818      	ldr	r0, [r3, #0]
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	1ad3      	subs	r3, r2, r3
 800c8ce:	683a      	ldr	r2, [r7, #0]
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	f7fe fe27 	bl	800b524 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c8d6:	f7ff f917 	bl	800bb08 <xTaskResumeAll>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d10a      	bne.n	800c8f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c8e0:	4b09      	ldr	r3, [pc, #36]	; (800c908 <prvProcessTimerOrBlockTask+0x98>)
 800c8e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8e6:	601a      	str	r2, [r3, #0]
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	f3bf 8f6f 	isb	sy
}
 800c8f0:	e001      	b.n	800c8f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c8f2:	f7ff f909 	bl	800bb08 <xTaskResumeAll>
}
 800c8f6:	bf00      	nop
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	20000d9c 	.word	0x20000d9c
 800c904:	20000da0 	.word	0x20000da0
 800c908:	e000ed04 	.word	0xe000ed04

0800c90c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c914:	4b0e      	ldr	r3, [pc, #56]	; (800c950 <prvGetNextExpireTime+0x44>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	bf0c      	ite	eq
 800c91e:	2301      	moveq	r3, #1
 800c920:	2300      	movne	r3, #0
 800c922:	b2db      	uxtb	r3, r3
 800c924:	461a      	mov	r2, r3
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d105      	bne.n	800c93e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c932:	4b07      	ldr	r3, [pc, #28]	; (800c950 <prvGetNextExpireTime+0x44>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	60fb      	str	r3, [r7, #12]
 800c93c:	e001      	b.n	800c942 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c93e:	2300      	movs	r3, #0
 800c940:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c942:	68fb      	ldr	r3, [r7, #12]
}
 800c944:	4618      	mov	r0, r3
 800c946:	3714      	adds	r7, #20
 800c948:	46bd      	mov	sp, r7
 800c94a:	bc80      	pop	{r7}
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop
 800c950:	20000d98 	.word	0x20000d98

0800c954 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c95c:	f7ff f972 	bl	800bc44 <xTaskGetTickCount>
 800c960:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c962:	4b0b      	ldr	r3, [pc, #44]	; (800c990 <prvSampleTimeNow+0x3c>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	68fa      	ldr	r2, [r7, #12]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d205      	bcs.n	800c978 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c96c:	f000 f908 	bl	800cb80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	601a      	str	r2, [r3, #0]
 800c976:	e002      	b.n	800c97e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c97e:	4a04      	ldr	r2, [pc, #16]	; (800c990 <prvSampleTimeNow+0x3c>)
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c984:	68fb      	ldr	r3, [r7, #12]
}
 800c986:	4618      	mov	r0, r3
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	20000da8 	.word	0x20000da8

0800c994 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b086      	sub	sp, #24
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	607a      	str	r2, [r7, #4]
 800c9a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	68ba      	ldr	r2, [r7, #8]
 800c9aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	68fa      	ldr	r2, [r7, #12]
 800c9b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c9b2:	68ba      	ldr	r2, [r7, #8]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d812      	bhi.n	800c9e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	1ad2      	subs	r2, r2, r3
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	699b      	ldr	r3, [r3, #24]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d302      	bcc.n	800c9ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	617b      	str	r3, [r7, #20]
 800c9cc:	e01b      	b.n	800ca06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c9ce:	4b10      	ldr	r3, [pc, #64]	; (800ca10 <prvInsertTimerInActiveList+0x7c>)
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	4610      	mov	r0, r2
 800c9da:	f7fe f853 	bl	800aa84 <vListInsert>
 800c9de:	e012      	b.n	800ca06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d206      	bcs.n	800c9f6 <prvInsertTimerInActiveList+0x62>
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d302      	bcc.n	800c9f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	617b      	str	r3, [r7, #20]
 800c9f4:	e007      	b.n	800ca06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9f6:	4b07      	ldr	r3, [pc, #28]	; (800ca14 <prvInsertTimerInActiveList+0x80>)
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	3304      	adds	r3, #4
 800c9fe:	4619      	mov	r1, r3
 800ca00:	4610      	mov	r0, r2
 800ca02:	f7fe f83f 	bl	800aa84 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ca06:	697b      	ldr	r3, [r7, #20]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3718      	adds	r7, #24
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	20000d9c 	.word	0x20000d9c
 800ca14:	20000d98 	.word	0x20000d98

0800ca18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b08e      	sub	sp, #56	; 0x38
 800ca1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca1e:	e09d      	b.n	800cb5c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	da18      	bge.n	800ca58 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ca26:	1d3b      	adds	r3, r7, #4
 800ca28:	3304      	adds	r3, #4
 800ca2a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ca2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d10a      	bne.n	800ca48 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ca32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca36:	f383 8811 	msr	BASEPRI, r3
 800ca3a:	f3bf 8f6f 	isb	sy
 800ca3e:	f3bf 8f4f 	dsb	sy
 800ca42:	61fb      	str	r3, [r7, #28]
}
 800ca44:	bf00      	nop
 800ca46:	e7fe      	b.n	800ca46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ca48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca4e:	6850      	ldr	r0, [r2, #4]
 800ca50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca52:	6892      	ldr	r2, [r2, #8]
 800ca54:	4611      	mov	r1, r2
 800ca56:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	db7d      	blt.n	800cb5a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ca62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca64:	695b      	ldr	r3, [r3, #20]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d004      	beq.n	800ca74 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6c:	3304      	adds	r3, #4
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7fe f840 	bl	800aaf4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca74:	463b      	mov	r3, r7
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7ff ff6c 	bl	800c954 <prvSampleTimeNow>
 800ca7c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2b09      	cmp	r3, #9
 800ca82:	d86b      	bhi.n	800cb5c <prvProcessReceivedCommands+0x144>
 800ca84:	a201      	add	r2, pc, #4	; (adr r2, 800ca8c <prvProcessReceivedCommands+0x74>)
 800ca86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca8a:	bf00      	nop
 800ca8c:	0800cab5 	.word	0x0800cab5
 800ca90:	0800cab5 	.word	0x0800cab5
 800ca94:	0800cab5 	.word	0x0800cab5
 800ca98:	0800cb5d 	.word	0x0800cb5d
 800ca9c:	0800cb11 	.word	0x0800cb11
 800caa0:	0800cb49 	.word	0x0800cb49
 800caa4:	0800cab5 	.word	0x0800cab5
 800caa8:	0800cab5 	.word	0x0800cab5
 800caac:	0800cb5d 	.word	0x0800cb5d
 800cab0:	0800cb11 	.word	0x0800cb11
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab8:	699b      	ldr	r3, [r3, #24]
 800caba:	18d1      	adds	r1, r2, r3
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cac2:	f7ff ff67 	bl	800c994 <prvInsertTimerInActiveList>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d047      	beq.n	800cb5c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cad2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800cad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad6:	69db      	ldr	r3, [r3, #28]
 800cad8:	2b01      	cmp	r3, #1
 800cada:	d13f      	bne.n	800cb5c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae0:	699b      	ldr	r3, [r3, #24]
 800cae2:	441a      	add	r2, r3
 800cae4:	2300      	movs	r3, #0
 800cae6:	9300      	str	r3, [sp, #0]
 800cae8:	2300      	movs	r3, #0
 800caea:	2100      	movs	r1, #0
 800caec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caee:	f7ff fe1f 	bl	800c730 <xTimerGenericCommand>
 800caf2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800caf4:	6a3b      	ldr	r3, [r7, #32]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d130      	bne.n	800cb5c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800cafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafe:	f383 8811 	msr	BASEPRI, r3
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	61bb      	str	r3, [r7, #24]
}
 800cb0c:	bf00      	nop
 800cb0e:	e7fe      	b.n	800cb0e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cb10:	68ba      	ldr	r2, [r7, #8]
 800cb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb18:	699b      	ldr	r3, [r3, #24]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d10a      	bne.n	800cb34 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800cb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb22:	f383 8811 	msr	BASEPRI, r3
 800cb26:	f3bf 8f6f 	isb	sy
 800cb2a:	f3bf 8f4f 	dsb	sy
 800cb2e:	617b      	str	r3, [r7, #20]
}
 800cb30:	bf00      	nop
 800cb32:	e7fe      	b.n	800cb32 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb36:	699a      	ldr	r2, [r3, #24]
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	18d1      	adds	r1, r2, r3
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb42:	f7ff ff27 	bl	800c994 <prvInsertTimerInActiveList>
					break;
 800cb46:	e009      	b.n	800cb5c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d104      	bne.n	800cb5c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800cb52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb54:	f000 fb6e 	bl	800d234 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cb58:	e000      	b.n	800cb5c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cb5a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb5c:	4b07      	ldr	r3, [pc, #28]	; (800cb7c <prvProcessReceivedCommands+0x164>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	1d39      	adds	r1, r7, #4
 800cb62:	2200      	movs	r2, #0
 800cb64:	4618      	mov	r0, r3
 800cb66:	f7fe fac5 	bl	800b0f4 <xQueueReceive>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f47f af57 	bne.w	800ca20 <prvProcessReceivedCommands+0x8>
	}
}
 800cb72:	bf00      	nop
 800cb74:	bf00      	nop
 800cb76:	3730      	adds	r7, #48	; 0x30
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	20000da0 	.word	0x20000da0

0800cb80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b088      	sub	sp, #32
 800cb84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb86:	e045      	b.n	800cc14 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb88:	4b2c      	ldr	r3, [pc, #176]	; (800cc3c <prvSwitchTimerLists+0xbc>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb92:	4b2a      	ldr	r3, [pc, #168]	; (800cc3c <prvSwitchTimerLists+0xbc>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	3304      	adds	r3, #4
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7fd ffa7 	bl	800aaf4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	69db      	ldr	r3, [r3, #28]
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d12e      	bne.n	800cc14 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	693a      	ldr	r2, [r7, #16]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d90e      	bls.n	800cbe6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	68ba      	ldr	r2, [r7, #8]
 800cbcc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	68fa      	ldr	r2, [r7, #12]
 800cbd2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cbd4:	4b19      	ldr	r3, [pc, #100]	; (800cc3c <prvSwitchTimerLists+0xbc>)
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	3304      	adds	r3, #4
 800cbdc:	4619      	mov	r1, r3
 800cbde:	4610      	mov	r0, r2
 800cbe0:	f7fd ff50 	bl	800aa84 <vListInsert>
 800cbe4:	e016      	b.n	800cc14 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	9300      	str	r3, [sp, #0]
 800cbea:	2300      	movs	r3, #0
 800cbec:	693a      	ldr	r2, [r7, #16]
 800cbee:	2100      	movs	r1, #0
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f7ff fd9d 	bl	800c730 <xTimerGenericCommand>
 800cbf6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d10a      	bne.n	800cc14 <prvSwitchTimerLists+0x94>
	__asm volatile
 800cbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	603b      	str	r3, [r7, #0]
}
 800cc10:	bf00      	nop
 800cc12:	e7fe      	b.n	800cc12 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc14:	4b09      	ldr	r3, [pc, #36]	; (800cc3c <prvSwitchTimerLists+0xbc>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d1b4      	bne.n	800cb88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cc1e:	4b07      	ldr	r3, [pc, #28]	; (800cc3c <prvSwitchTimerLists+0xbc>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cc24:	4b06      	ldr	r3, [pc, #24]	; (800cc40 <prvSwitchTimerLists+0xc0>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a04      	ldr	r2, [pc, #16]	; (800cc3c <prvSwitchTimerLists+0xbc>)
 800cc2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cc2c:	4a04      	ldr	r2, [pc, #16]	; (800cc40 <prvSwitchTimerLists+0xc0>)
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	6013      	str	r3, [r2, #0]
}
 800cc32:	bf00      	nop
 800cc34:	3718      	adds	r7, #24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	20000d98 	.word	0x20000d98
 800cc40:	20000d9c 	.word	0x20000d9c

0800cc44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cc4a:	f000 f92f 	bl	800ceac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cc4e:	4b15      	ldr	r3, [pc, #84]	; (800cca4 <prvCheckForValidListAndQueue+0x60>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d120      	bne.n	800cc98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cc56:	4814      	ldr	r0, [pc, #80]	; (800cca8 <prvCheckForValidListAndQueue+0x64>)
 800cc58:	f7fd fec6 	bl	800a9e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cc5c:	4813      	ldr	r0, [pc, #76]	; (800ccac <prvCheckForValidListAndQueue+0x68>)
 800cc5e:	f7fd fec3 	bl	800a9e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cc62:	4b13      	ldr	r3, [pc, #76]	; (800ccb0 <prvCheckForValidListAndQueue+0x6c>)
 800cc64:	4a10      	ldr	r2, [pc, #64]	; (800cca8 <prvCheckForValidListAndQueue+0x64>)
 800cc66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cc68:	4b12      	ldr	r3, [pc, #72]	; (800ccb4 <prvCheckForValidListAndQueue+0x70>)
 800cc6a:	4a10      	ldr	r2, [pc, #64]	; (800ccac <prvCheckForValidListAndQueue+0x68>)
 800cc6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cc6e:	2300      	movs	r3, #0
 800cc70:	9300      	str	r3, [sp, #0]
 800cc72:	4b11      	ldr	r3, [pc, #68]	; (800ccb8 <prvCheckForValidListAndQueue+0x74>)
 800cc74:	4a11      	ldr	r2, [pc, #68]	; (800ccbc <prvCheckForValidListAndQueue+0x78>)
 800cc76:	2110      	movs	r1, #16
 800cc78:	200a      	movs	r0, #10
 800cc7a:	f7fd ffcd 	bl	800ac18 <xQueueGenericCreateStatic>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	4a08      	ldr	r2, [pc, #32]	; (800cca4 <prvCheckForValidListAndQueue+0x60>)
 800cc82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cc84:	4b07      	ldr	r3, [pc, #28]	; (800cca4 <prvCheckForValidListAndQueue+0x60>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d005      	beq.n	800cc98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cc8c:	4b05      	ldr	r3, [pc, #20]	; (800cca4 <prvCheckForValidListAndQueue+0x60>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	490b      	ldr	r1, [pc, #44]	; (800ccc0 <prvCheckForValidListAndQueue+0x7c>)
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7fe fc1e 	bl	800b4d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc98:	f000 f938 	bl	800cf0c <vPortExitCritical>
}
 800cc9c:	bf00      	nop
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	20000da0 	.word	0x20000da0
 800cca8:	20000d70 	.word	0x20000d70
 800ccac:	20000d84 	.word	0x20000d84
 800ccb0:	20000d98 	.word	0x20000d98
 800ccb4:	20000d9c 	.word	0x20000d9c
 800ccb8:	20000e4c 	.word	0x20000e4c
 800ccbc:	20000dac 	.word	0x20000dac
 800ccc0:	0800e0f4 	.word	0x0800e0f4

0800ccc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	3b04      	subs	r3, #4
 800ccd4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ccdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	3b04      	subs	r3, #4
 800cce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	f023 0201 	bic.w	r2, r3, #1
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	3b04      	subs	r3, #4
 800ccf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ccf4:	4a08      	ldr	r2, [pc, #32]	; (800cd18 <pxPortInitialiseStack+0x54>)
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	3b14      	subs	r3, #20
 800ccfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	3b20      	subs	r3, #32
 800cd0a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3714      	adds	r7, #20
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bc80      	pop	{r7}
 800cd16:	4770      	bx	lr
 800cd18:	0800cd1d 	.word	0x0800cd1d

0800cd1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b085      	sub	sp, #20
 800cd20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800cd22:	2300      	movs	r3, #0
 800cd24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cd26:	4b12      	ldr	r3, [pc, #72]	; (800cd70 <prvTaskExitError+0x54>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd2e:	d00a      	beq.n	800cd46 <prvTaskExitError+0x2a>
	__asm volatile
 800cd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd34:	f383 8811 	msr	BASEPRI, r3
 800cd38:	f3bf 8f6f 	isb	sy
 800cd3c:	f3bf 8f4f 	dsb	sy
 800cd40:	60fb      	str	r3, [r7, #12]
}
 800cd42:	bf00      	nop
 800cd44:	e7fe      	b.n	800cd44 <prvTaskExitError+0x28>
	__asm volatile
 800cd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	60bb      	str	r3, [r7, #8]
}
 800cd58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cd5a:	bf00      	nop
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d0fc      	beq.n	800cd5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cd62:	bf00      	nop
 800cd64:	bf00      	nop
 800cd66:	3714      	adds	r7, #20
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bc80      	pop	{r7}
 800cd6c:	4770      	bx	lr
 800cd6e:	bf00      	nop
 800cd70:	2000012c 	.word	0x2000012c
	...

0800cd80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd80:	4b07      	ldr	r3, [pc, #28]	; (800cda0 <pxCurrentTCBConst2>)
 800cd82:	6819      	ldr	r1, [r3, #0]
 800cd84:	6808      	ldr	r0, [r1, #0]
 800cd86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cd8a:	f380 8809 	msr	PSP, r0
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f04f 0000 	mov.w	r0, #0
 800cd96:	f380 8811 	msr	BASEPRI, r0
 800cd9a:	f04e 0e0d 	orr.w	lr, lr, #13
 800cd9e:	4770      	bx	lr

0800cda0 <pxCurrentTCBConst2>:
 800cda0:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cda4:	bf00      	nop
 800cda6:	bf00      	nop

0800cda8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800cda8:	4806      	ldr	r0, [pc, #24]	; (800cdc4 <prvPortStartFirstTask+0x1c>)
 800cdaa:	6800      	ldr	r0, [r0, #0]
 800cdac:	6800      	ldr	r0, [r0, #0]
 800cdae:	f380 8808 	msr	MSP, r0
 800cdb2:	b662      	cpsie	i
 800cdb4:	b661      	cpsie	f
 800cdb6:	f3bf 8f4f 	dsb	sy
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	df00      	svc	0
 800cdc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cdc2:	bf00      	nop
 800cdc4:	e000ed08 	.word	0xe000ed08

0800cdc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cdce:	4b32      	ldr	r3, [pc, #200]	; (800ce98 <xPortStartScheduler+0xd0>)
 800cdd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	22ff      	movs	r2, #255	; 0xff
 800cdde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cde8:	78fb      	ldrb	r3, [r7, #3]
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cdf0:	b2da      	uxtb	r2, r3
 800cdf2:	4b2a      	ldr	r3, [pc, #168]	; (800ce9c <xPortStartScheduler+0xd4>)
 800cdf4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cdf6:	4b2a      	ldr	r3, [pc, #168]	; (800cea0 <xPortStartScheduler+0xd8>)
 800cdf8:	2207      	movs	r2, #7
 800cdfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdfc:	e009      	b.n	800ce12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cdfe:	4b28      	ldr	r3, [pc, #160]	; (800cea0 <xPortStartScheduler+0xd8>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	3b01      	subs	r3, #1
 800ce04:	4a26      	ldr	r2, [pc, #152]	; (800cea0 <xPortStartScheduler+0xd8>)
 800ce06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce08:	78fb      	ldrb	r3, [r7, #3]
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	005b      	lsls	r3, r3, #1
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce12:	78fb      	ldrb	r3, [r7, #3]
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce1a:	2b80      	cmp	r3, #128	; 0x80
 800ce1c:	d0ef      	beq.n	800cdfe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ce1e:	4b20      	ldr	r3, [pc, #128]	; (800cea0 <xPortStartScheduler+0xd8>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f1c3 0307 	rsb	r3, r3, #7
 800ce26:	2b04      	cmp	r3, #4
 800ce28:	d00a      	beq.n	800ce40 <xPortStartScheduler+0x78>
	__asm volatile
 800ce2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2e:	f383 8811 	msr	BASEPRI, r3
 800ce32:	f3bf 8f6f 	isb	sy
 800ce36:	f3bf 8f4f 	dsb	sy
 800ce3a:	60bb      	str	r3, [r7, #8]
}
 800ce3c:	bf00      	nop
 800ce3e:	e7fe      	b.n	800ce3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce40:	4b17      	ldr	r3, [pc, #92]	; (800cea0 <xPortStartScheduler+0xd8>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	021b      	lsls	r3, r3, #8
 800ce46:	4a16      	ldr	r2, [pc, #88]	; (800cea0 <xPortStartScheduler+0xd8>)
 800ce48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce4a:	4b15      	ldr	r3, [pc, #84]	; (800cea0 <xPortStartScheduler+0xd8>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce52:	4a13      	ldr	r2, [pc, #76]	; (800cea0 <xPortStartScheduler+0xd8>)
 800ce54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	b2da      	uxtb	r2, r3
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce5e:	4b11      	ldr	r3, [pc, #68]	; (800cea4 <xPortStartScheduler+0xdc>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a10      	ldr	r2, [pc, #64]	; (800cea4 <xPortStartScheduler+0xdc>)
 800ce64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce6a:	4b0e      	ldr	r3, [pc, #56]	; (800cea4 <xPortStartScheduler+0xdc>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4a0d      	ldr	r2, [pc, #52]	; (800cea4 <xPortStartScheduler+0xdc>)
 800ce70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ce74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce76:	f000 f8b9 	bl	800cfec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce7a:	4b0b      	ldr	r3, [pc, #44]	; (800cea8 <xPortStartScheduler+0xe0>)
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce80:	f7ff ff92 	bl	800cda8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce84:	f7fe ffaa 	bl	800bddc <vTaskSwitchContext>
	prvTaskExitError();
 800ce88:	f7ff ff48 	bl	800cd1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce8c:	2300      	movs	r3, #0
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	e000e400 	.word	0xe000e400
 800ce9c:	20000e9c 	.word	0x20000e9c
 800cea0:	20000ea0 	.word	0x20000ea0
 800cea4:	e000ed20 	.word	0xe000ed20
 800cea8:	2000012c 	.word	0x2000012c

0800ceac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
	__asm volatile
 800ceb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb6:	f383 8811 	msr	BASEPRI, r3
 800ceba:	f3bf 8f6f 	isb	sy
 800cebe:	f3bf 8f4f 	dsb	sy
 800cec2:	607b      	str	r3, [r7, #4]
}
 800cec4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cec6:	4b0f      	ldr	r3, [pc, #60]	; (800cf04 <vPortEnterCritical+0x58>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	3301      	adds	r3, #1
 800cecc:	4a0d      	ldr	r2, [pc, #52]	; (800cf04 <vPortEnterCritical+0x58>)
 800cece:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ced0:	4b0c      	ldr	r3, [pc, #48]	; (800cf04 <vPortEnterCritical+0x58>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d10f      	bne.n	800cef8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ced8:	4b0b      	ldr	r3, [pc, #44]	; (800cf08 <vPortEnterCritical+0x5c>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00a      	beq.n	800cef8 <vPortEnterCritical+0x4c>
	__asm volatile
 800cee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee6:	f383 8811 	msr	BASEPRI, r3
 800ceea:	f3bf 8f6f 	isb	sy
 800ceee:	f3bf 8f4f 	dsb	sy
 800cef2:	603b      	str	r3, [r7, #0]
}
 800cef4:	bf00      	nop
 800cef6:	e7fe      	b.n	800cef6 <vPortEnterCritical+0x4a>
	}
}
 800cef8:	bf00      	nop
 800cefa:	370c      	adds	r7, #12
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bc80      	pop	{r7}
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	2000012c 	.word	0x2000012c
 800cf08:	e000ed04 	.word	0xe000ed04

0800cf0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cf12:	4b11      	ldr	r3, [pc, #68]	; (800cf58 <vPortExitCritical+0x4c>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d10a      	bne.n	800cf30 <vPortExitCritical+0x24>
	__asm volatile
 800cf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	607b      	str	r3, [r7, #4]
}
 800cf2c:	bf00      	nop
 800cf2e:	e7fe      	b.n	800cf2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf30:	4b09      	ldr	r3, [pc, #36]	; (800cf58 <vPortExitCritical+0x4c>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	3b01      	subs	r3, #1
 800cf36:	4a08      	ldr	r2, [pc, #32]	; (800cf58 <vPortExitCritical+0x4c>)
 800cf38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf3a:	4b07      	ldr	r3, [pc, #28]	; (800cf58 <vPortExitCritical+0x4c>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d105      	bne.n	800cf4e <vPortExitCritical+0x42>
 800cf42:	2300      	movs	r3, #0
 800cf44:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	f383 8811 	msr	BASEPRI, r3
}
 800cf4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf4e:	bf00      	nop
 800cf50:	370c      	adds	r7, #12
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bc80      	pop	{r7}
 800cf56:	4770      	bx	lr
 800cf58:	2000012c 	.word	0x2000012c
 800cf5c:	00000000 	.word	0x00000000

0800cf60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf60:	f3ef 8009 	mrs	r0, PSP
 800cf64:	f3bf 8f6f 	isb	sy
 800cf68:	4b0d      	ldr	r3, [pc, #52]	; (800cfa0 <pxCurrentTCBConst>)
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cf70:	6010      	str	r0, [r2, #0]
 800cf72:	e92d 4008 	stmdb	sp!, {r3, lr}
 800cf76:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cf7a:	f380 8811 	msr	BASEPRI, r0
 800cf7e:	f7fe ff2d 	bl	800bddc <vTaskSwitchContext>
 800cf82:	f04f 0000 	mov.w	r0, #0
 800cf86:	f380 8811 	msr	BASEPRI, r0
 800cf8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cf8e:	6819      	ldr	r1, [r3, #0]
 800cf90:	6808      	ldr	r0, [r1, #0]
 800cf92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cf96:	f380 8809 	msr	PSP, r0
 800cf9a:	f3bf 8f6f 	isb	sy
 800cf9e:	4770      	bx	lr

0800cfa0 <pxCurrentTCBConst>:
 800cfa0:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cfa4:	bf00      	nop
 800cfa6:	bf00      	nop

0800cfa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
	__asm volatile
 800cfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb2:	f383 8811 	msr	BASEPRI, r3
 800cfb6:	f3bf 8f6f 	isb	sy
 800cfba:	f3bf 8f4f 	dsb	sy
 800cfbe:	607b      	str	r3, [r7, #4]
}
 800cfc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cfc2:	f7fe fe4d 	bl	800bc60 <xTaskIncrementTick>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d003      	beq.n	800cfd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cfcc:	4b06      	ldr	r3, [pc, #24]	; (800cfe8 <SysTick_Handler+0x40>)
 800cfce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfd2:	601a      	str	r2, [r3, #0]
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	f383 8811 	msr	BASEPRI, r3
}
 800cfde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cfe0:	bf00      	nop
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	e000ed04 	.word	0xe000ed04

0800cfec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cfec:	b480      	push	{r7}
 800cfee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cff0:	4b0a      	ldr	r3, [pc, #40]	; (800d01c <vPortSetupTimerInterrupt+0x30>)
 800cff2:	2200      	movs	r2, #0
 800cff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cff6:	4b0a      	ldr	r3, [pc, #40]	; (800d020 <vPortSetupTimerInterrupt+0x34>)
 800cff8:	2200      	movs	r2, #0
 800cffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cffc:	4b09      	ldr	r3, [pc, #36]	; (800d024 <vPortSetupTimerInterrupt+0x38>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a09      	ldr	r2, [pc, #36]	; (800d028 <vPortSetupTimerInterrupt+0x3c>)
 800d002:	fba2 2303 	umull	r2, r3, r2, r3
 800d006:	099b      	lsrs	r3, r3, #6
 800d008:	4a08      	ldr	r2, [pc, #32]	; (800d02c <vPortSetupTimerInterrupt+0x40>)
 800d00a:	3b01      	subs	r3, #1
 800d00c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d00e:	4b03      	ldr	r3, [pc, #12]	; (800d01c <vPortSetupTimerInterrupt+0x30>)
 800d010:	2207      	movs	r2, #7
 800d012:	601a      	str	r2, [r3, #0]
}
 800d014:	bf00      	nop
 800d016:	46bd      	mov	sp, r7
 800d018:	bc80      	pop	{r7}
 800d01a:	4770      	bx	lr
 800d01c:	e000e010 	.word	0xe000e010
 800d020:	e000e018 	.word	0xe000e018
 800d024:	20000010 	.word	0x20000010
 800d028:	10624dd3 	.word	0x10624dd3
 800d02c:	e000e014 	.word	0xe000e014

0800d030 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d036:	f3ef 8305 	mrs	r3, IPSR
 800d03a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2b0f      	cmp	r3, #15
 800d040:	d914      	bls.n	800d06c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d042:	4a16      	ldr	r2, [pc, #88]	; (800d09c <vPortValidateInterruptPriority+0x6c>)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	4413      	add	r3, r2
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d04c:	4b14      	ldr	r3, [pc, #80]	; (800d0a0 <vPortValidateInterruptPriority+0x70>)
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	7afa      	ldrb	r2, [r7, #11]
 800d052:	429a      	cmp	r2, r3
 800d054:	d20a      	bcs.n	800d06c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d05a:	f383 8811 	msr	BASEPRI, r3
 800d05e:	f3bf 8f6f 	isb	sy
 800d062:	f3bf 8f4f 	dsb	sy
 800d066:	607b      	str	r3, [r7, #4]
}
 800d068:	bf00      	nop
 800d06a:	e7fe      	b.n	800d06a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d06c:	4b0d      	ldr	r3, [pc, #52]	; (800d0a4 <vPortValidateInterruptPriority+0x74>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d074:	4b0c      	ldr	r3, [pc, #48]	; (800d0a8 <vPortValidateInterruptPriority+0x78>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	429a      	cmp	r2, r3
 800d07a:	d90a      	bls.n	800d092 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d080:	f383 8811 	msr	BASEPRI, r3
 800d084:	f3bf 8f6f 	isb	sy
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	603b      	str	r3, [r7, #0]
}
 800d08e:	bf00      	nop
 800d090:	e7fe      	b.n	800d090 <vPortValidateInterruptPriority+0x60>
	}
 800d092:	bf00      	nop
 800d094:	3714      	adds	r7, #20
 800d096:	46bd      	mov	sp, r7
 800d098:	bc80      	pop	{r7}
 800d09a:	4770      	bx	lr
 800d09c:	e000e3f0 	.word	0xe000e3f0
 800d0a0:	20000e9c 	.word	0x20000e9c
 800d0a4:	e000ed0c 	.word	0xe000ed0c
 800d0a8:	20000ea0 	.word	0x20000ea0

0800d0ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b08a      	sub	sp, #40	; 0x28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d0b8:	f7fe fd18 	bl	800baec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d0bc:	4b58      	ldr	r3, [pc, #352]	; (800d220 <pvPortMalloc+0x174>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d101      	bne.n	800d0c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d0c4:	f000 f910 	bl	800d2e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d0c8:	4b56      	ldr	r3, [pc, #344]	; (800d224 <pvPortMalloc+0x178>)
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	4013      	ands	r3, r2
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f040 808e 	bne.w	800d1f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d01d      	beq.n	800d118 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d0dc:	2208      	movs	r2, #8
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f003 0307 	and.w	r3, r3, #7
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d014      	beq.n	800d118 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f023 0307 	bic.w	r3, r3, #7
 800d0f4:	3308      	adds	r3, #8
 800d0f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f003 0307 	and.w	r3, r3, #7
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00a      	beq.n	800d118 <pvPortMalloc+0x6c>
	__asm volatile
 800d102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d106:	f383 8811 	msr	BASEPRI, r3
 800d10a:	f3bf 8f6f 	isb	sy
 800d10e:	f3bf 8f4f 	dsb	sy
 800d112:	617b      	str	r3, [r7, #20]
}
 800d114:	bf00      	nop
 800d116:	e7fe      	b.n	800d116 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d069      	beq.n	800d1f2 <pvPortMalloc+0x146>
 800d11e:	4b42      	ldr	r3, [pc, #264]	; (800d228 <pvPortMalloc+0x17c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	429a      	cmp	r2, r3
 800d126:	d864      	bhi.n	800d1f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d128:	4b40      	ldr	r3, [pc, #256]	; (800d22c <pvPortMalloc+0x180>)
 800d12a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d12c:	4b3f      	ldr	r3, [pc, #252]	; (800d22c <pvPortMalloc+0x180>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d132:	e004      	b.n	800d13e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d136:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	429a      	cmp	r2, r3
 800d146:	d903      	bls.n	800d150 <pvPortMalloc+0xa4>
 800d148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d1f1      	bne.n	800d134 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d150:	4b33      	ldr	r3, [pc, #204]	; (800d220 <pvPortMalloc+0x174>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d156:	429a      	cmp	r2, r3
 800d158:	d04b      	beq.n	800d1f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d15a:	6a3b      	ldr	r3, [r7, #32]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2208      	movs	r2, #8
 800d160:	4413      	add	r3, r2
 800d162:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	6a3b      	ldr	r3, [r7, #32]
 800d16a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16e:	685a      	ldr	r2, [r3, #4]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	1ad2      	subs	r2, r2, r3
 800d174:	2308      	movs	r3, #8
 800d176:	005b      	lsls	r3, r3, #1
 800d178:	429a      	cmp	r2, r3
 800d17a:	d91f      	bls.n	800d1bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d17c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	4413      	add	r3, r2
 800d182:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d184:	69bb      	ldr	r3, [r7, #24]
 800d186:	f003 0307 	and.w	r3, r3, #7
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d00a      	beq.n	800d1a4 <pvPortMalloc+0xf8>
	__asm volatile
 800d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	613b      	str	r3, [r7, #16]
}
 800d1a0:	bf00      	nop
 800d1a2:	e7fe      	b.n	800d1a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	685a      	ldr	r2, [r3, #4]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	1ad2      	subs	r2, r2, r3
 800d1ac:	69bb      	ldr	r3, [r7, #24]
 800d1ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d1b6:	69b8      	ldr	r0, [r7, #24]
 800d1b8:	f000 f8f8 	bl	800d3ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d1bc:	4b1a      	ldr	r3, [pc, #104]	; (800d228 <pvPortMalloc+0x17c>)
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	1ad3      	subs	r3, r2, r3
 800d1c6:	4a18      	ldr	r2, [pc, #96]	; (800d228 <pvPortMalloc+0x17c>)
 800d1c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d1ca:	4b17      	ldr	r3, [pc, #92]	; (800d228 <pvPortMalloc+0x17c>)
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	4b18      	ldr	r3, [pc, #96]	; (800d230 <pvPortMalloc+0x184>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d203      	bcs.n	800d1de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d1d6:	4b14      	ldr	r3, [pc, #80]	; (800d228 <pvPortMalloc+0x17c>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a15      	ldr	r2, [pc, #84]	; (800d230 <pvPortMalloc+0x184>)
 800d1dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e0:	685a      	ldr	r2, [r3, #4]
 800d1e2:	4b10      	ldr	r3, [pc, #64]	; (800d224 <pvPortMalloc+0x178>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	431a      	orrs	r2, r3
 800d1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d1f2:	f7fe fc89 	bl	800bb08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	f003 0307 	and.w	r3, r3, #7
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d00a      	beq.n	800d216 <pvPortMalloc+0x16a>
	__asm volatile
 800d200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d204:	f383 8811 	msr	BASEPRI, r3
 800d208:	f3bf 8f6f 	isb	sy
 800d20c:	f3bf 8f4f 	dsb	sy
 800d210:	60fb      	str	r3, [r7, #12]
}
 800d212:	bf00      	nop
 800d214:	e7fe      	b.n	800d214 <pvPortMalloc+0x168>
	return pvReturn;
 800d216:	69fb      	ldr	r3, [r7, #28]
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3728      	adds	r7, #40	; 0x28
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	20002248 	.word	0x20002248
 800d224:	20002254 	.word	0x20002254
 800d228:	2000224c 	.word	0x2000224c
 800d22c:	20002240 	.word	0x20002240
 800d230:	20002250 	.word	0x20002250

0800d234 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b086      	sub	sp, #24
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d048      	beq.n	800d2d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d246:	2308      	movs	r3, #8
 800d248:	425b      	negs	r3, r3
 800d24a:	697a      	ldr	r2, [r7, #20]
 800d24c:	4413      	add	r3, r2
 800d24e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	685a      	ldr	r2, [r3, #4]
 800d258:	4b21      	ldr	r3, [pc, #132]	; (800d2e0 <vPortFree+0xac>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4013      	ands	r3, r2
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d10a      	bne.n	800d278 <vPortFree+0x44>
	__asm volatile
 800d262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d266:	f383 8811 	msr	BASEPRI, r3
 800d26a:	f3bf 8f6f 	isb	sy
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	60fb      	str	r3, [r7, #12]
}
 800d274:	bf00      	nop
 800d276:	e7fe      	b.n	800d276 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d00a      	beq.n	800d296 <vPortFree+0x62>
	__asm volatile
 800d280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d284:	f383 8811 	msr	BASEPRI, r3
 800d288:	f3bf 8f6f 	isb	sy
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	60bb      	str	r3, [r7, #8]
}
 800d292:	bf00      	nop
 800d294:	e7fe      	b.n	800d294 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	685a      	ldr	r2, [r3, #4]
 800d29a:	4b11      	ldr	r3, [pc, #68]	; (800d2e0 <vPortFree+0xac>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4013      	ands	r3, r2
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d019      	beq.n	800d2d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d115      	bne.n	800d2d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	685a      	ldr	r2, [r3, #4]
 800d2b0:	4b0b      	ldr	r3, [pc, #44]	; (800d2e0 <vPortFree+0xac>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	43db      	mvns	r3, r3
 800d2b6:	401a      	ands	r2, r3
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d2bc:	f7fe fc16 	bl	800baec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	685a      	ldr	r2, [r3, #4]
 800d2c4:	4b07      	ldr	r3, [pc, #28]	; (800d2e4 <vPortFree+0xb0>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	4a06      	ldr	r2, [pc, #24]	; (800d2e4 <vPortFree+0xb0>)
 800d2cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d2ce:	6938      	ldr	r0, [r7, #16]
 800d2d0:	f000 f86c 	bl	800d3ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d2d4:	f7fe fc18 	bl	800bb08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d2d8:	bf00      	nop
 800d2da:	3718      	adds	r7, #24
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	20002254 	.word	0x20002254
 800d2e4:	2000224c 	.word	0x2000224c

0800d2e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b085      	sub	sp, #20
 800d2ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d2ee:	f241 339c 	movw	r3, #5020	; 0x139c
 800d2f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d2f4:	4b27      	ldr	r3, [pc, #156]	; (800d394 <prvHeapInit+0xac>)
 800d2f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f003 0307 	and.w	r3, r3, #7
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00c      	beq.n	800d31c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	3307      	adds	r3, #7
 800d306:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f023 0307 	bic.w	r3, r3, #7
 800d30e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d310:	68ba      	ldr	r2, [r7, #8]
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	1ad3      	subs	r3, r2, r3
 800d316:	4a1f      	ldr	r2, [pc, #124]	; (800d394 <prvHeapInit+0xac>)
 800d318:	4413      	add	r3, r2
 800d31a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d320:	4a1d      	ldr	r2, [pc, #116]	; (800d398 <prvHeapInit+0xb0>)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d326:	4b1c      	ldr	r3, [pc, #112]	; (800d398 <prvHeapInit+0xb0>)
 800d328:	2200      	movs	r2, #0
 800d32a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	4413      	add	r3, r2
 800d332:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d334:	2208      	movs	r2, #8
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	1a9b      	subs	r3, r3, r2
 800d33a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f023 0307 	bic.w	r3, r3, #7
 800d342:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	4a15      	ldr	r2, [pc, #84]	; (800d39c <prvHeapInit+0xb4>)
 800d348:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d34a:	4b14      	ldr	r3, [pc, #80]	; (800d39c <prvHeapInit+0xb4>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2200      	movs	r2, #0
 800d350:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d352:	4b12      	ldr	r3, [pc, #72]	; (800d39c <prvHeapInit+0xb4>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2200      	movs	r2, #0
 800d358:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	1ad2      	subs	r2, r2, r3
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d368:	4b0c      	ldr	r3, [pc, #48]	; (800d39c <prvHeapInit+0xb4>)
 800d36a:	681a      	ldr	r2, [r3, #0]
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	4a0a      	ldr	r2, [pc, #40]	; (800d3a0 <prvHeapInit+0xb8>)
 800d376:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	685b      	ldr	r3, [r3, #4]
 800d37c:	4a09      	ldr	r2, [pc, #36]	; (800d3a4 <prvHeapInit+0xbc>)
 800d37e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d380:	4b09      	ldr	r3, [pc, #36]	; (800d3a8 <prvHeapInit+0xc0>)
 800d382:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d386:	601a      	str	r2, [r3, #0]
}
 800d388:	bf00      	nop
 800d38a:	3714      	adds	r7, #20
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bc80      	pop	{r7}
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop
 800d394:	20000ea4 	.word	0x20000ea4
 800d398:	20002240 	.word	0x20002240
 800d39c:	20002248 	.word	0x20002248
 800d3a0:	20002250 	.word	0x20002250
 800d3a4:	2000224c 	.word	0x2000224c
 800d3a8:	20002254 	.word	0x20002254

0800d3ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b085      	sub	sp, #20
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d3b4:	4b27      	ldr	r3, [pc, #156]	; (800d454 <prvInsertBlockIntoFreeList+0xa8>)
 800d3b6:	60fb      	str	r3, [r7, #12]
 800d3b8:	e002      	b.n	800d3c0 <prvInsertBlockIntoFreeList+0x14>
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	60fb      	str	r3, [r7, #12]
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d8f7      	bhi.n	800d3ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	68ba      	ldr	r2, [r7, #8]
 800d3d4:	4413      	add	r3, r2
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d108      	bne.n	800d3ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	685a      	ldr	r2, [r3, #4]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	441a      	add	r2, r3
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	68ba      	ldr	r2, [r7, #8]
 800d3f8:	441a      	add	r2, r3
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d118      	bne.n	800d434 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	4b14      	ldr	r3, [pc, #80]	; (800d458 <prvInsertBlockIntoFreeList+0xac>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d00d      	beq.n	800d42a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	685a      	ldr	r2, [r3, #4]
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	441a      	add	r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	601a      	str	r2, [r3, #0]
 800d428:	e008      	b.n	800d43c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d42a:	4b0b      	ldr	r3, [pc, #44]	; (800d458 <prvInsertBlockIntoFreeList+0xac>)
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	601a      	str	r2, [r3, #0]
 800d432:	e003      	b.n	800d43c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d43c:	68fa      	ldr	r2, [r7, #12]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	429a      	cmp	r2, r3
 800d442:	d002      	beq.n	800d44a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d44a:	bf00      	nop
 800d44c:	3714      	adds	r7, #20
 800d44e:	46bd      	mov	sp, r7
 800d450:	bc80      	pop	{r7}
 800d452:	4770      	bx	lr
 800d454:	20002240 	.word	0x20002240
 800d458:	20002248 	.word	0x20002248

0800d45c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d460:	2200      	movs	r2, #0
 800d462:	4912      	ldr	r1, [pc, #72]	; (800d4ac <MX_USB_DEVICE_Init+0x50>)
 800d464:	4812      	ldr	r0, [pc, #72]	; (800d4b0 <MX_USB_DEVICE_Init+0x54>)
 800d466:	f7fc f82e 	bl	80094c6 <USBD_Init>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d001      	beq.n	800d474 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d470:	f7f3 fc96 	bl	8000da0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d474:	490f      	ldr	r1, [pc, #60]	; (800d4b4 <MX_USB_DEVICE_Init+0x58>)
 800d476:	480e      	ldr	r0, [pc, #56]	; (800d4b0 <MX_USB_DEVICE_Init+0x54>)
 800d478:	f7fc f850 	bl	800951c <USBD_RegisterClass>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d001      	beq.n	800d486 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d482:	f7f3 fc8d 	bl	8000da0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d486:	490c      	ldr	r1, [pc, #48]	; (800d4b8 <MX_USB_DEVICE_Init+0x5c>)
 800d488:	4809      	ldr	r0, [pc, #36]	; (800d4b0 <MX_USB_DEVICE_Init+0x54>)
 800d48a:	f7fb ff81 	bl	8009390 <USBD_CDC_RegisterInterface>
 800d48e:	4603      	mov	r3, r0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d001      	beq.n	800d498 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d494:	f7f3 fc84 	bl	8000da0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d498:	4805      	ldr	r0, [pc, #20]	; (800d4b0 <MX_USB_DEVICE_Init+0x54>)
 800d49a:	f7fc f858 	bl	800954e <USBD_Start>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d001      	beq.n	800d4a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d4a4:	f7f3 fc7c 	bl	8000da0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d4a8:	bf00      	nop
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	20000140 	.word	0x20000140
 800d4b0:	200026a0 	.word	0x200026a0
 800d4b4:	20000028 	.word	0x20000028
 800d4b8:	20000130 	.word	0x20000130

0800d4bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	4905      	ldr	r1, [pc, #20]	; (800d4d8 <CDC_Init_FS+0x1c>)
 800d4c4:	4805      	ldr	r0, [pc, #20]	; (800d4dc <CDC_Init_FS+0x20>)
 800d4c6:	f7fb ff79 	bl	80093bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d4ca:	4905      	ldr	r1, [pc, #20]	; (800d4e0 <CDC_Init_FS+0x24>)
 800d4cc:	4803      	ldr	r0, [pc, #12]	; (800d4dc <CDC_Init_FS+0x20>)
 800d4ce:	f7fb ff8e 	bl	80093ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d4d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	20002d4c 	.word	0x20002d4c
 800d4dc:	200026a0 	.word	0x200026a0
 800d4e0:	20002964 	.word	0x20002964

0800d4e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d4e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bc80      	pop	{r7}
 800d4f0:	4770      	bx	lr
	...

0800d4f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	6039      	str	r1, [r7, #0]
 800d4fe:	71fb      	strb	r3, [r7, #7]
 800d500:	4613      	mov	r3, r2
 800d502:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d504:	79fb      	ldrb	r3, [r7, #7]
 800d506:	2b23      	cmp	r3, #35	; 0x23
 800d508:	d84a      	bhi.n	800d5a0 <CDC_Control_FS+0xac>
 800d50a:	a201      	add	r2, pc, #4	; (adr r2, 800d510 <CDC_Control_FS+0x1c>)
 800d50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d510:	0800d5a1 	.word	0x0800d5a1
 800d514:	0800d5a1 	.word	0x0800d5a1
 800d518:	0800d5a1 	.word	0x0800d5a1
 800d51c:	0800d5a1 	.word	0x0800d5a1
 800d520:	0800d5a1 	.word	0x0800d5a1
 800d524:	0800d5a1 	.word	0x0800d5a1
 800d528:	0800d5a1 	.word	0x0800d5a1
 800d52c:	0800d5a1 	.word	0x0800d5a1
 800d530:	0800d5a1 	.word	0x0800d5a1
 800d534:	0800d5a1 	.word	0x0800d5a1
 800d538:	0800d5a1 	.word	0x0800d5a1
 800d53c:	0800d5a1 	.word	0x0800d5a1
 800d540:	0800d5a1 	.word	0x0800d5a1
 800d544:	0800d5a1 	.word	0x0800d5a1
 800d548:	0800d5a1 	.word	0x0800d5a1
 800d54c:	0800d5a1 	.word	0x0800d5a1
 800d550:	0800d5a1 	.word	0x0800d5a1
 800d554:	0800d5a1 	.word	0x0800d5a1
 800d558:	0800d5a1 	.word	0x0800d5a1
 800d55c:	0800d5a1 	.word	0x0800d5a1
 800d560:	0800d5a1 	.word	0x0800d5a1
 800d564:	0800d5a1 	.word	0x0800d5a1
 800d568:	0800d5a1 	.word	0x0800d5a1
 800d56c:	0800d5a1 	.word	0x0800d5a1
 800d570:	0800d5a1 	.word	0x0800d5a1
 800d574:	0800d5a1 	.word	0x0800d5a1
 800d578:	0800d5a1 	.word	0x0800d5a1
 800d57c:	0800d5a1 	.word	0x0800d5a1
 800d580:	0800d5a1 	.word	0x0800d5a1
 800d584:	0800d5a1 	.word	0x0800d5a1
 800d588:	0800d5a1 	.word	0x0800d5a1
 800d58c:	0800d5a1 	.word	0x0800d5a1
 800d590:	0800d5a1 	.word	0x0800d5a1
 800d594:	0800d5a1 	.word	0x0800d5a1
 800d598:	0800d5a1 	.word	0x0800d5a1
 800d59c:	0800d5a1 	.word	0x0800d5a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d5a0:	bf00      	nop
  }

  return (USBD_OK);
 800d5a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bc80      	pop	{r7}
 800d5ac:	4770      	bx	lr
 800d5ae:	bf00      	nop

0800d5b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800d5be:	2300      	movs	r3, #0
 800d5c0:	60fb      	str	r3, [r7, #12]
 800d5c2:	e00c      	b.n	800d5de <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800d5c4:	4b14      	ldr	r3, [pc, #80]	; (800d618 <CDC_Receive_FS+0x68>)
 800d5c6:	6818      	ldr	r0, [r3, #0]
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	18d1      	adds	r1, r2, r3
 800d5ce:	f107 0208 	add.w	r2, r7, #8
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	f7fd fcf6 	bl	800afc4 <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	3301      	adds	r3, #1
 800d5dc:	60fb      	str	r3, [r7, #12]
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d3ed      	bcc.n	800d5c4 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d5e8:	6879      	ldr	r1, [r7, #4]
 800d5ea:	480c      	ldr	r0, [pc, #48]	; (800d61c <CDC_Receive_FS+0x6c>)
 800d5ec:	f7fb feff 	bl	80093ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d5f0:	480a      	ldr	r0, [pc, #40]	; (800d61c <CDC_Receive_FS+0x6c>)
 800d5f2:	f7fb ff3e 	bl	8009472 <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d007      	beq.n	800d60c <CDC_Receive_FS+0x5c>
 800d5fc:	4b08      	ldr	r3, [pc, #32]	; (800d620 <CDC_Receive_FS+0x70>)
 800d5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d602:	601a      	str	r2, [r3, #0]
 800d604:	f3bf 8f4f 	dsb	sy
 800d608:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800d60c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	20002490 	.word	0x20002490
 800d61c:	200026a0 	.word	0x200026a0
 800d620:	e000ed04 	.word	0xe000ed04

0800d624 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	460b      	mov	r3, r1
 800d62e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d630:	2300      	movs	r3, #0
 800d632:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d634:	4b0d      	ldr	r3, [pc, #52]	; (800d66c <CDC_Transmit_FS+0x48>)
 800d636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d63a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d642:	2b00      	cmp	r3, #0
 800d644:	d001      	beq.n	800d64a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d646:	2301      	movs	r3, #1
 800d648:	e00b      	b.n	800d662 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d64a:	887b      	ldrh	r3, [r7, #2]
 800d64c:	461a      	mov	r2, r3
 800d64e:	6879      	ldr	r1, [r7, #4]
 800d650:	4806      	ldr	r0, [pc, #24]	; (800d66c <CDC_Transmit_FS+0x48>)
 800d652:	f7fb feb3 	bl	80093bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d656:	4805      	ldr	r0, [pc, #20]	; (800d66c <CDC_Transmit_FS+0x48>)
 800d658:	f7fb fedc 	bl	8009414 <USBD_CDC_TransmitPacket>
 800d65c:	4603      	mov	r3, r0
 800d65e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d660:	7bfb      	ldrb	r3, [r7, #15]
}
 800d662:	4618      	mov	r0, r3
 800d664:	3710      	adds	r7, #16
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	200026a0 	.word	0x200026a0

0800d670 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
 800d676:	4603      	mov	r3, r0
 800d678:	6039      	str	r1, [r7, #0]
 800d67a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	2212      	movs	r2, #18
 800d680:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d682:	4b03      	ldr	r3, [pc, #12]	; (800d690 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d684:	4618      	mov	r0, r3
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	bc80      	pop	{r7}
 800d68c:	4770      	bx	lr
 800d68e:	bf00      	nop
 800d690:	2000015c 	.word	0x2000015c

0800d694 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	4603      	mov	r3, r0
 800d69c:	6039      	str	r1, [r7, #0]
 800d69e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	2204      	movs	r2, #4
 800d6a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d6a6:	4b03      	ldr	r3, [pc, #12]	; (800d6b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	370c      	adds	r7, #12
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bc80      	pop	{r7}
 800d6b0:	4770      	bx	lr
 800d6b2:	bf00      	nop
 800d6b4:	20000170 	.word	0x20000170

0800d6b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	4603      	mov	r3, r0
 800d6c0:	6039      	str	r1, [r7, #0]
 800d6c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d6c4:	79fb      	ldrb	r3, [r7, #7]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d105      	bne.n	800d6d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	4907      	ldr	r1, [pc, #28]	; (800d6ec <USBD_FS_ProductStrDescriptor+0x34>)
 800d6ce:	4808      	ldr	r0, [pc, #32]	; (800d6f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d6d0:	f7fc feb6 	bl	800a440 <USBD_GetString>
 800d6d4:	e004      	b.n	800d6e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d6d6:	683a      	ldr	r2, [r7, #0]
 800d6d8:	4904      	ldr	r1, [pc, #16]	; (800d6ec <USBD_FS_ProductStrDescriptor+0x34>)
 800d6da:	4805      	ldr	r0, [pc, #20]	; (800d6f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d6dc:	f7fc feb0 	bl	800a440 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6e0:	4b02      	ldr	r3, [pc, #8]	; (800d6ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3708      	adds	r7, #8
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	20003134 	.word	0x20003134
 800d6f0:	0800e0fc 	.word	0x0800e0fc

0800d6f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	6039      	str	r1, [r7, #0]
 800d6fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d700:	683a      	ldr	r2, [r7, #0]
 800d702:	4904      	ldr	r1, [pc, #16]	; (800d714 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d704:	4804      	ldr	r0, [pc, #16]	; (800d718 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d706:	f7fc fe9b 	bl	800a440 <USBD_GetString>
  return USBD_StrDesc;
 800d70a:	4b02      	ldr	r3, [pc, #8]	; (800d714 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	20003134 	.word	0x20003134
 800d718:	0800e108 	.word	0x0800e108

0800d71c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	4603      	mov	r3, r0
 800d724:	6039      	str	r1, [r7, #0]
 800d726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	221a      	movs	r2, #26
 800d72c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d72e:	f000 f843 	bl	800d7b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d732:	4b02      	ldr	r3, [pc, #8]	; (800d73c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d734:	4618      	mov	r0, r3
 800d736:	3708      	adds	r7, #8
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	20000174 	.word	0x20000174

0800d740 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	4603      	mov	r3, r0
 800d748:	6039      	str	r1, [r7, #0]
 800d74a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d74c:	79fb      	ldrb	r3, [r7, #7]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d105      	bne.n	800d75e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d752:	683a      	ldr	r2, [r7, #0]
 800d754:	4907      	ldr	r1, [pc, #28]	; (800d774 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d756:	4808      	ldr	r0, [pc, #32]	; (800d778 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d758:	f7fc fe72 	bl	800a440 <USBD_GetString>
 800d75c:	e004      	b.n	800d768 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d75e:	683a      	ldr	r2, [r7, #0]
 800d760:	4904      	ldr	r1, [pc, #16]	; (800d774 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d762:	4805      	ldr	r0, [pc, #20]	; (800d778 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d764:	f7fc fe6c 	bl	800a440 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d768:	4b02      	ldr	r3, [pc, #8]	; (800d774 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3708      	adds	r7, #8
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	20003134 	.word	0x20003134
 800d778:	0800e11c 	.word	0x0800e11c

0800d77c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	4603      	mov	r3, r0
 800d784:	6039      	str	r1, [r7, #0]
 800d786:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d788:	79fb      	ldrb	r3, [r7, #7]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d105      	bne.n	800d79a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d78e:	683a      	ldr	r2, [r7, #0]
 800d790:	4907      	ldr	r1, [pc, #28]	; (800d7b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d792:	4808      	ldr	r0, [pc, #32]	; (800d7b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d794:	f7fc fe54 	bl	800a440 <USBD_GetString>
 800d798:	e004      	b.n	800d7a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d79a:	683a      	ldr	r2, [r7, #0]
 800d79c:	4904      	ldr	r1, [pc, #16]	; (800d7b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d79e:	4805      	ldr	r0, [pc, #20]	; (800d7b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d7a0:	f7fc fe4e 	bl	800a440 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7a4:	4b02      	ldr	r3, [pc, #8]	; (800d7b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3708      	adds	r7, #8
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	20003134 	.word	0x20003134
 800d7b4:	0800e128 	.word	0x0800e128

0800d7b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d7be:	4b0f      	ldr	r3, [pc, #60]	; (800d7fc <Get_SerialNum+0x44>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d7c4:	4b0e      	ldr	r3, [pc, #56]	; (800d800 <Get_SerialNum+0x48>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d7ca:	4b0e      	ldr	r3, [pc, #56]	; (800d804 <Get_SerialNum+0x4c>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d7d0:	68fa      	ldr	r2, [r7, #12]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d009      	beq.n	800d7f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d7de:	2208      	movs	r2, #8
 800d7e0:	4909      	ldr	r1, [pc, #36]	; (800d808 <Get_SerialNum+0x50>)
 800d7e2:	68f8      	ldr	r0, [r7, #12]
 800d7e4:	f000 f814 	bl	800d810 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d7e8:	2204      	movs	r2, #4
 800d7ea:	4908      	ldr	r1, [pc, #32]	; (800d80c <Get_SerialNum+0x54>)
 800d7ec:	68b8      	ldr	r0, [r7, #8]
 800d7ee:	f000 f80f 	bl	800d810 <IntToUnicode>
  }
}
 800d7f2:	bf00      	nop
 800d7f4:	3710      	adds	r7, #16
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	1ffff7e8 	.word	0x1ffff7e8
 800d800:	1ffff7ec 	.word	0x1ffff7ec
 800d804:	1ffff7f0 	.word	0x1ffff7f0
 800d808:	20000176 	.word	0x20000176
 800d80c:	20000186 	.word	0x20000186

0800d810 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d810:	b480      	push	{r7}
 800d812:	b087      	sub	sp, #28
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	4613      	mov	r3, r2
 800d81c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d81e:	2300      	movs	r3, #0
 800d820:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d822:	2300      	movs	r3, #0
 800d824:	75fb      	strb	r3, [r7, #23]
 800d826:	e027      	b.n	800d878 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	0f1b      	lsrs	r3, r3, #28
 800d82c:	2b09      	cmp	r3, #9
 800d82e:	d80b      	bhi.n	800d848 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	0f1b      	lsrs	r3, r3, #28
 800d834:	b2da      	uxtb	r2, r3
 800d836:	7dfb      	ldrb	r3, [r7, #23]
 800d838:	005b      	lsls	r3, r3, #1
 800d83a:	4619      	mov	r1, r3
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	440b      	add	r3, r1
 800d840:	3230      	adds	r2, #48	; 0x30
 800d842:	b2d2      	uxtb	r2, r2
 800d844:	701a      	strb	r2, [r3, #0]
 800d846:	e00a      	b.n	800d85e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	0f1b      	lsrs	r3, r3, #28
 800d84c:	b2da      	uxtb	r2, r3
 800d84e:	7dfb      	ldrb	r3, [r7, #23]
 800d850:	005b      	lsls	r3, r3, #1
 800d852:	4619      	mov	r1, r3
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	440b      	add	r3, r1
 800d858:	3237      	adds	r2, #55	; 0x37
 800d85a:	b2d2      	uxtb	r2, r2
 800d85c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	011b      	lsls	r3, r3, #4
 800d862:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d864:	7dfb      	ldrb	r3, [r7, #23]
 800d866:	005b      	lsls	r3, r3, #1
 800d868:	3301      	adds	r3, #1
 800d86a:	68ba      	ldr	r2, [r7, #8]
 800d86c:	4413      	add	r3, r2
 800d86e:	2200      	movs	r2, #0
 800d870:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d872:	7dfb      	ldrb	r3, [r7, #23]
 800d874:	3301      	adds	r3, #1
 800d876:	75fb      	strb	r3, [r7, #23]
 800d878:	7dfa      	ldrb	r2, [r7, #23]
 800d87a:	79fb      	ldrb	r3, [r7, #7]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d3d3      	bcc.n	800d828 <IntToUnicode+0x18>
  }
}
 800d880:	bf00      	nop
 800d882:	bf00      	nop
 800d884:	371c      	adds	r7, #28
 800d886:	46bd      	mov	sp, r7
 800d888:	bc80      	pop	{r7}
 800d88a:	4770      	bx	lr

0800d88c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a0d      	ldr	r2, [pc, #52]	; (800d8d0 <HAL_PCD_MspInit+0x44>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d113      	bne.n	800d8c6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d89e:	4b0d      	ldr	r3, [pc, #52]	; (800d8d4 <HAL_PCD_MspInit+0x48>)
 800d8a0:	69db      	ldr	r3, [r3, #28]
 800d8a2:	4a0c      	ldr	r2, [pc, #48]	; (800d8d4 <HAL_PCD_MspInit+0x48>)
 800d8a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d8a8:	61d3      	str	r3, [r2, #28]
 800d8aa:	4b0a      	ldr	r3, [pc, #40]	; (800d8d4 <HAL_PCD_MspInit+0x48>)
 800d8ac:	69db      	ldr	r3, [r3, #28]
 800d8ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8b2:	60fb      	str	r3, [r7, #12]
 800d8b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	2105      	movs	r1, #5
 800d8ba:	2014      	movs	r0, #20
 800d8bc:	f7f5 fb05 	bl	8002eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d8c0:	2014      	movs	r0, #20
 800d8c2:	f7f5 fb1e 	bl	8002f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d8c6:	bf00      	nop
 800d8c8:	3710      	adds	r7, #16
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	40005c00 	.word	0x40005c00
 800d8d4:	40021000 	.word	0x40021000

0800d8d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	4610      	mov	r0, r2
 800d8f0:	f7fb fe75 	bl	80095de <USBD_LL_SetupStage>
}
 800d8f4:	bf00      	nop
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	460b      	mov	r3, r1
 800d906:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d90e:	78fa      	ldrb	r2, [r7, #3]
 800d910:	6879      	ldr	r1, [r7, #4]
 800d912:	4613      	mov	r3, r2
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	4413      	add	r3, r2
 800d918:	00db      	lsls	r3, r3, #3
 800d91a:	440b      	add	r3, r1
 800d91c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	78fb      	ldrb	r3, [r7, #3]
 800d924:	4619      	mov	r1, r3
 800d926:	f7fb fea7 	bl	8009678 <USBD_LL_DataOutStage>
}
 800d92a:	bf00      	nop
 800d92c:	3708      	adds	r7, #8
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d932:	b580      	push	{r7, lr}
 800d934:	b082      	sub	sp, #8
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
 800d93a:	460b      	mov	r3, r1
 800d93c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d944:	78fa      	ldrb	r2, [r7, #3]
 800d946:	6879      	ldr	r1, [r7, #4]
 800d948:	4613      	mov	r3, r2
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	4413      	add	r3, r2
 800d94e:	00db      	lsls	r3, r3, #3
 800d950:	440b      	add	r3, r1
 800d952:	333c      	adds	r3, #60	; 0x3c
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	78fb      	ldrb	r3, [r7, #3]
 800d958:	4619      	mov	r1, r3
 800d95a:	f7fb fefe 	bl	800975a <USBD_LL_DataInStage>
}
 800d95e:	bf00      	nop
 800d960:	3708      	adds	r7, #8
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b082      	sub	sp, #8
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d974:	4618      	mov	r0, r3
 800d976:	f7fc f80e 	bl	8009996 <USBD_LL_SOF>
}
 800d97a:	bf00      	nop
 800d97c:	3708      	adds	r7, #8
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}

0800d982 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d982:	b580      	push	{r7, lr}
 800d984:	b084      	sub	sp, #16
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d98a:	2301      	movs	r3, #1
 800d98c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	2b02      	cmp	r3, #2
 800d994:	d001      	beq.n	800d99a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d996:	f7f3 fa03 	bl	8000da0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d9a0:	7bfa      	ldrb	r2, [r7, #15]
 800d9a2:	4611      	mov	r1, r2
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7fb ffbe 	bl	8009926 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7fb ff77 	bl	80098a4 <USBD_LL_Reset>
}
 800d9b6:	bf00      	nop
 800d9b8:	3710      	adds	r7, #16
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
	...

0800d9c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7fb ffb8 	bl	8009944 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	699b      	ldr	r3, [r3, #24]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d005      	beq.n	800d9e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9dc:	4b04      	ldr	r3, [pc, #16]	; (800d9f0 <HAL_PCD_SuspendCallback+0x30>)
 800d9de:	691b      	ldr	r3, [r3, #16]
 800d9e0:	4a03      	ldr	r2, [pc, #12]	; (800d9f0 <HAL_PCD_SuspendCallback+0x30>)
 800d9e2:	f043 0306 	orr.w	r3, r3, #6
 800d9e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d9e8:	bf00      	nop
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	e000ed00 	.word	0xe000ed00

0800d9f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800da02:	4618      	mov	r0, r3
 800da04:	f7fb ffb2 	bl	800996c <USBD_LL_Resume>
}
 800da08:	bf00      	nop
 800da0a:	3708      	adds	r7, #8
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800da18:	4a28      	ldr	r2, [pc, #160]	; (800dabc <USBD_LL_Init+0xac>)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	4a26      	ldr	r2, [pc, #152]	; (800dabc <USBD_LL_Init+0xac>)
 800da24:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800da28:	4b24      	ldr	r3, [pc, #144]	; (800dabc <USBD_LL_Init+0xac>)
 800da2a:	4a25      	ldr	r2, [pc, #148]	; (800dac0 <USBD_LL_Init+0xb0>)
 800da2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800da2e:	4b23      	ldr	r3, [pc, #140]	; (800dabc <USBD_LL_Init+0xac>)
 800da30:	2208      	movs	r2, #8
 800da32:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800da34:	4b21      	ldr	r3, [pc, #132]	; (800dabc <USBD_LL_Init+0xac>)
 800da36:	2202      	movs	r2, #2
 800da38:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800da3a:	4b20      	ldr	r3, [pc, #128]	; (800dabc <USBD_LL_Init+0xac>)
 800da3c:	2200      	movs	r2, #0
 800da3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800da40:	4b1e      	ldr	r3, [pc, #120]	; (800dabc <USBD_LL_Init+0xac>)
 800da42:	2200      	movs	r2, #0
 800da44:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800da46:	4b1d      	ldr	r3, [pc, #116]	; (800dabc <USBD_LL_Init+0xac>)
 800da48:	2200      	movs	r2, #0
 800da4a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800da4c:	481b      	ldr	r0, [pc, #108]	; (800dabc <USBD_LL_Init+0xac>)
 800da4e:	f7f5 fd05 	bl	800345c <HAL_PCD_Init>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	d001      	beq.n	800da5c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800da58:	f7f3 f9a2 	bl	8000da0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da62:	2318      	movs	r3, #24
 800da64:	2200      	movs	r2, #0
 800da66:	2100      	movs	r1, #0
 800da68:	f7f7 f97b 	bl	8004d62 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da72:	2358      	movs	r3, #88	; 0x58
 800da74:	2200      	movs	r2, #0
 800da76:	2180      	movs	r1, #128	; 0x80
 800da78:	f7f7 f973 	bl	8004d62 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da82:	23c0      	movs	r3, #192	; 0xc0
 800da84:	2200      	movs	r2, #0
 800da86:	2181      	movs	r1, #129	; 0x81
 800da88:	f7f7 f96b 	bl	8004d62 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da92:	f44f 7388 	mov.w	r3, #272	; 0x110
 800da96:	2200      	movs	r2, #0
 800da98:	2101      	movs	r1, #1
 800da9a:	f7f7 f962 	bl	8004d62 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800daa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800daa8:	2200      	movs	r2, #0
 800daaa:	2182      	movs	r1, #130	; 0x82
 800daac:	f7f7 f959 	bl	8004d62 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dab0:	2300      	movs	r3, #0
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3708      	adds	r7, #8
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	20003334 	.word	0x20003334
 800dac0:	40005c00 	.word	0x40005c00

0800dac4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dacc:	2300      	movs	r3, #0
 800dace:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dad0:	2300      	movs	r3, #0
 800dad2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dada:	4618      	mov	r0, r3
 800dadc:	f7f5 fdc9 	bl	8003672 <HAL_PCD_Start>
 800dae0:	4603      	mov	r3, r0
 800dae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dae4:	7bfb      	ldrb	r3, [r7, #15]
 800dae6:	4618      	mov	r0, r3
 800dae8:	f000 f94e 	bl	800dd88 <USBD_Get_USB_Status>
 800daec:	4603      	mov	r3, r0
 800daee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}

0800dafa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dafa:	b580      	push	{r7, lr}
 800dafc:	b084      	sub	sp, #16
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
 800db02:	4608      	mov	r0, r1
 800db04:	4611      	mov	r1, r2
 800db06:	461a      	mov	r2, r3
 800db08:	4603      	mov	r3, r0
 800db0a:	70fb      	strb	r3, [r7, #3]
 800db0c:	460b      	mov	r3, r1
 800db0e:	70bb      	strb	r3, [r7, #2]
 800db10:	4613      	mov	r3, r2
 800db12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db14:	2300      	movs	r3, #0
 800db16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db18:	2300      	movs	r3, #0
 800db1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800db22:	78bb      	ldrb	r3, [r7, #2]
 800db24:	883a      	ldrh	r2, [r7, #0]
 800db26:	78f9      	ldrb	r1, [r7, #3]
 800db28:	f7f5 ff43 	bl	80039b2 <HAL_PCD_EP_Open>
 800db2c:	4603      	mov	r3, r0
 800db2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db30:	7bfb      	ldrb	r3, [r7, #15]
 800db32:	4618      	mov	r0, r3
 800db34:	f000 f928 	bl	800dd88 <USBD_Get_USB_Status>
 800db38:	4603      	mov	r3, r0
 800db3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3710      	adds	r7, #16
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}

0800db46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db46:	b580      	push	{r7, lr}
 800db48:	b084      	sub	sp, #16
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
 800db4e:	460b      	mov	r3, r1
 800db50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db52:	2300      	movs	r3, #0
 800db54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db56:	2300      	movs	r3, #0
 800db58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db60:	78fa      	ldrb	r2, [r7, #3]
 800db62:	4611      	mov	r1, r2
 800db64:	4618      	mov	r0, r3
 800db66:	f7f5 ff8a 	bl	8003a7e <HAL_PCD_EP_Close>
 800db6a:	4603      	mov	r3, r0
 800db6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db6e:	7bfb      	ldrb	r3, [r7, #15]
 800db70:	4618      	mov	r0, r3
 800db72:	f000 f909 	bl	800dd88 <USBD_Get_USB_Status>
 800db76:	4603      	mov	r3, r0
 800db78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3710      	adds	r7, #16
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	460b      	mov	r3, r1
 800db8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db90:	2300      	movs	r3, #0
 800db92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db94:	2300      	movs	r3, #0
 800db96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db9e:	78fa      	ldrb	r2, [r7, #3]
 800dba0:	4611      	mov	r1, r2
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7f6 f84a 	bl	8003c3c <HAL_PCD_EP_SetStall>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbac:	7bfb      	ldrb	r3, [r7, #15]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f000 f8ea 	bl	800dd88 <USBD_Get_USB_Status>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3710      	adds	r7, #16
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}

0800dbc2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b084      	sub	sp, #16
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
 800dbca:	460b      	mov	r3, r1
 800dbcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbdc:	78fa      	ldrb	r2, [r7, #3]
 800dbde:	4611      	mov	r1, r2
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7f6 f88b 	bl	8003cfc <HAL_PCD_EP_ClrStall>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbea:	7bfb      	ldrb	r3, [r7, #15]
 800dbec:	4618      	mov	r0, r3
 800dbee:	f000 f8cb 	bl	800dd88 <USBD_Get_USB_Status>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3710      	adds	r7, #16
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b085      	sub	sp, #20
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	460b      	mov	r3, r1
 800dc0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dc14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	da0c      	bge.n	800dc36 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dc1c:	78fb      	ldrb	r3, [r7, #3]
 800dc1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc22:	68f9      	ldr	r1, [r7, #12]
 800dc24:	1c5a      	adds	r2, r3, #1
 800dc26:	4613      	mov	r3, r2
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	4413      	add	r3, r2
 800dc2c:	00db      	lsls	r3, r3, #3
 800dc2e:	440b      	add	r3, r1
 800dc30:	3302      	adds	r3, #2
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	e00b      	b.n	800dc4e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dc36:	78fb      	ldrb	r3, [r7, #3]
 800dc38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc3c:	68f9      	ldr	r1, [r7, #12]
 800dc3e:	4613      	mov	r3, r2
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	4413      	add	r3, r2
 800dc44:	00db      	lsls	r3, r3, #3
 800dc46:	440b      	add	r3, r1
 800dc48:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800dc4c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3714      	adds	r7, #20
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bc80      	pop	{r7}
 800dc56:	4770      	bx	lr

0800dc58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	460b      	mov	r3, r1
 800dc62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc64:	2300      	movs	r3, #0
 800dc66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc72:	78fa      	ldrb	r2, [r7, #3]
 800dc74:	4611      	mov	r1, r2
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7f5 fe76 	bl	8003968 <HAL_PCD_SetAddress>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc80:	7bfb      	ldrb	r3, [r7, #15]
 800dc82:	4618      	mov	r0, r3
 800dc84:	f000 f880 	bl	800dd88 <USBD_Get_USB_Status>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b086      	sub	sp, #24
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	60f8      	str	r0, [r7, #12]
 800dc9e:	607a      	str	r2, [r7, #4]
 800dca0:	461a      	mov	r2, r3
 800dca2:	460b      	mov	r3, r1
 800dca4:	72fb      	strb	r3, [r7, #11]
 800dca6:	4613      	mov	r3, r2
 800dca8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dcb8:	893b      	ldrh	r3, [r7, #8]
 800dcba:	7af9      	ldrb	r1, [r7, #11]
 800dcbc:	687a      	ldr	r2, [r7, #4]
 800dcbe:	f7f5 ff7a 	bl	8003bb6 <HAL_PCD_EP_Transmit>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcc6:	7dfb      	ldrb	r3, [r7, #23]
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f000 f85d 	bl	800dd88 <USBD_Get_USB_Status>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dcd2:	7dbb      	ldrb	r3, [r7, #22]
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3718      	adds	r7, #24
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	607a      	str	r2, [r7, #4]
 800dce6:	461a      	mov	r2, r3
 800dce8:	460b      	mov	r3, r1
 800dcea:	72fb      	strb	r3, [r7, #11]
 800dcec:	4613      	mov	r3, r2
 800dcee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dcfe:	893b      	ldrh	r3, [r7, #8]
 800dd00:	7af9      	ldrb	r1, [r7, #11]
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	f7f5 ff03 	bl	8003b0e <HAL_PCD_EP_Receive>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd0c:	7dfb      	ldrb	r3, [r7, #23]
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f000 f83a 	bl	800dd88 <USBD_Get_USB_Status>
 800dd14:	4603      	mov	r3, r0
 800dd16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd18:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3718      	adds	r7, #24
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b082      	sub	sp, #8
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd34:	78fa      	ldrb	r2, [r7, #3]
 800dd36:	4611      	mov	r1, r2
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7f5 ff25 	bl	8003b88 <HAL_PCD_EP_GetRxCount>
 800dd3e:	4603      	mov	r3, r0
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b083      	sub	sp, #12
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dd50:	4b02      	ldr	r3, [pc, #8]	; (800dd5c <USBD_static_malloc+0x14>)
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	370c      	adds	r7, #12
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bc80      	pop	{r7}
 800dd5a:	4770      	bx	lr
 800dd5c:	20002258 	.word	0x20002258

0800dd60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]

}
 800dd68:	bf00      	nop
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bc80      	pop	{r7}
 800dd70:	4770      	bx	lr

0800dd72 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd72:	b480      	push	{r7}
 800dd74:	b083      	sub	sp, #12
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800dd7e:	bf00      	nop
 800dd80:	370c      	adds	r7, #12
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bc80      	pop	{r7}
 800dd86:	4770      	bx	lr

0800dd88 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b085      	sub	sp, #20
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	4603      	mov	r3, r0
 800dd90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd92:	2300      	movs	r3, #0
 800dd94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dd96:	79fb      	ldrb	r3, [r7, #7]
 800dd98:	2b03      	cmp	r3, #3
 800dd9a:	d817      	bhi.n	800ddcc <USBD_Get_USB_Status+0x44>
 800dd9c:	a201      	add	r2, pc, #4	; (adr r2, 800dda4 <USBD_Get_USB_Status+0x1c>)
 800dd9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dda2:	bf00      	nop
 800dda4:	0800ddb5 	.word	0x0800ddb5
 800dda8:	0800ddbb 	.word	0x0800ddbb
 800ddac:	0800ddc1 	.word	0x0800ddc1
 800ddb0:	0800ddc7 	.word	0x0800ddc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	73fb      	strb	r3, [r7, #15]
    break;
 800ddb8:	e00b      	b.n	800ddd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ddba:	2302      	movs	r3, #2
 800ddbc:	73fb      	strb	r3, [r7, #15]
    break;
 800ddbe:	e008      	b.n	800ddd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	73fb      	strb	r3, [r7, #15]
    break;
 800ddc4:	e005      	b.n	800ddd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ddc6:	2302      	movs	r3, #2
 800ddc8:	73fb      	strb	r3, [r7, #15]
    break;
 800ddca:	e002      	b.n	800ddd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ddcc:	2302      	movs	r3, #2
 800ddce:	73fb      	strb	r3, [r7, #15]
    break;
 800ddd0:	bf00      	nop
  }
  return usb_status;
 800ddd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3714      	adds	r7, #20
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bc80      	pop	{r7}
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop

0800dde0 <__libc_init_array>:
 800dde0:	b570      	push	{r4, r5, r6, lr}
 800dde2:	2600      	movs	r6, #0
 800dde4:	4d0c      	ldr	r5, [pc, #48]	; (800de18 <__libc_init_array+0x38>)
 800dde6:	4c0d      	ldr	r4, [pc, #52]	; (800de1c <__libc_init_array+0x3c>)
 800dde8:	1b64      	subs	r4, r4, r5
 800ddea:	10a4      	asrs	r4, r4, #2
 800ddec:	42a6      	cmp	r6, r4
 800ddee:	d109      	bne.n	800de04 <__libc_init_array+0x24>
 800ddf0:	f000 f862 	bl	800deb8 <_init>
 800ddf4:	2600      	movs	r6, #0
 800ddf6:	4d0a      	ldr	r5, [pc, #40]	; (800de20 <__libc_init_array+0x40>)
 800ddf8:	4c0a      	ldr	r4, [pc, #40]	; (800de24 <__libc_init_array+0x44>)
 800ddfa:	1b64      	subs	r4, r4, r5
 800ddfc:	10a4      	asrs	r4, r4, #2
 800ddfe:	42a6      	cmp	r6, r4
 800de00:	d105      	bne.n	800de0e <__libc_init_array+0x2e>
 800de02:	bd70      	pop	{r4, r5, r6, pc}
 800de04:	f855 3b04 	ldr.w	r3, [r5], #4
 800de08:	4798      	blx	r3
 800de0a:	3601      	adds	r6, #1
 800de0c:	e7ee      	b.n	800ddec <__libc_init_array+0xc>
 800de0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800de12:	4798      	blx	r3
 800de14:	3601      	adds	r6, #1
 800de16:	e7f2      	b.n	800ddfe <__libc_init_array+0x1e>
 800de18:	0800e774 	.word	0x0800e774
 800de1c:	0800e774 	.word	0x0800e774
 800de20:	0800e774 	.word	0x0800e774
 800de24:	0800e778 	.word	0x0800e778

0800de28 <memcpy>:
 800de28:	440a      	add	r2, r1
 800de2a:	4291      	cmp	r1, r2
 800de2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800de30:	d100      	bne.n	800de34 <memcpy+0xc>
 800de32:	4770      	bx	lr
 800de34:	b510      	push	{r4, lr}
 800de36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de3a:	4291      	cmp	r1, r2
 800de3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de40:	d1f9      	bne.n	800de36 <memcpy+0xe>
 800de42:	bd10      	pop	{r4, pc}

0800de44 <memmove>:
 800de44:	4288      	cmp	r0, r1
 800de46:	b510      	push	{r4, lr}
 800de48:	eb01 0402 	add.w	r4, r1, r2
 800de4c:	d902      	bls.n	800de54 <memmove+0x10>
 800de4e:	4284      	cmp	r4, r0
 800de50:	4623      	mov	r3, r4
 800de52:	d807      	bhi.n	800de64 <memmove+0x20>
 800de54:	1e43      	subs	r3, r0, #1
 800de56:	42a1      	cmp	r1, r4
 800de58:	d008      	beq.n	800de6c <memmove+0x28>
 800de5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de62:	e7f8      	b.n	800de56 <memmove+0x12>
 800de64:	4601      	mov	r1, r0
 800de66:	4402      	add	r2, r0
 800de68:	428a      	cmp	r2, r1
 800de6a:	d100      	bne.n	800de6e <memmove+0x2a>
 800de6c:	bd10      	pop	{r4, pc}
 800de6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de76:	e7f7      	b.n	800de68 <memmove+0x24>

0800de78 <memset>:
 800de78:	4603      	mov	r3, r0
 800de7a:	4402      	add	r2, r0
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d100      	bne.n	800de82 <memset+0xa>
 800de80:	4770      	bx	lr
 800de82:	f803 1b01 	strb.w	r1, [r3], #1
 800de86:	e7f9      	b.n	800de7c <memset+0x4>

0800de88 <strstr>:
 800de88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de8a:	780c      	ldrb	r4, [r1, #0]
 800de8c:	b164      	cbz	r4, 800dea8 <strstr+0x20>
 800de8e:	4603      	mov	r3, r0
 800de90:	781a      	ldrb	r2, [r3, #0]
 800de92:	4618      	mov	r0, r3
 800de94:	1c5e      	adds	r6, r3, #1
 800de96:	b90a      	cbnz	r2, 800de9c <strstr+0x14>
 800de98:	4610      	mov	r0, r2
 800de9a:	e005      	b.n	800dea8 <strstr+0x20>
 800de9c:	4294      	cmp	r4, r2
 800de9e:	d108      	bne.n	800deb2 <strstr+0x2a>
 800dea0:	460d      	mov	r5, r1
 800dea2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800dea6:	b902      	cbnz	r2, 800deaa <strstr+0x22>
 800dea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deaa:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800deae:	4297      	cmp	r7, r2
 800deb0:	d0f7      	beq.n	800dea2 <strstr+0x1a>
 800deb2:	4633      	mov	r3, r6
 800deb4:	e7ec      	b.n	800de90 <strstr+0x8>
	...

0800deb8 <_init>:
 800deb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deba:	bf00      	nop
 800debc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800debe:	bc08      	pop	{r3}
 800dec0:	469e      	mov	lr, r3
 800dec2:	4770      	bx	lr

0800dec4 <_fini>:
 800dec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dec6:	bf00      	nop
 800dec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deca:	bc08      	pop	{r3}
 800decc:	469e      	mov	lr, r3
 800dece:	4770      	bx	lr
