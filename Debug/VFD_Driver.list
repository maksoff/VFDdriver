
VFD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d680  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  0800d790  0800d790  0001d790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ded4  0800ded4  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800ded4  0800ded4  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ded4  0800ded4  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ded4  0800ded4  0001ded4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ded8  0800ded8  0001ded8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800dedc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003488  20000190  0800e06c  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003618  0800e06c  00023618  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bdcd  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d81  00000000  00000000  0004bf86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de8  00000000  00000000  00051d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bd0  00000000  00000000  00053af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e707  00000000  00000000  000556c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023cda  00000000  00000000  00073dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c4bb  00000000  00000000  00097aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00133f5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bec  00000000  00000000  00133fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000190 	.word	0x20000190
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d778 	.word	0x0800d778

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000194 	.word	0x20000194
 800014c:	0800d778 	.word	0x0800d778

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of qUSB_rcv */
  qUSB_rcvHandle = osMessageQueueNew (64, sizeof(uint8_t), &qUSB_rcv_attributes);
 8000178:	4a1a      	ldr	r2, [pc, #104]	; (80001e4 <MX_FREERTOS_Init+0x70>)
 800017a:	2101      	movs	r1, #1
 800017c:	2040      	movs	r0, #64	; 0x40
 800017e:	f009 ffdb 	bl	800a138 <osMessageQueueNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a18      	ldr	r2, [pc, #96]	; (80001e8 <MX_FREERTOS_Init+0x74>)
 8000186:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000188:	4a18      	ldr	r2, [pc, #96]	; (80001ec <MX_FREERTOS_Init+0x78>)
 800018a:	2100      	movs	r1, #0
 800018c:	4818      	ldr	r0, [pc, #96]	; (80001f0 <MX_FREERTOS_Init+0x7c>)
 800018e:	f009 fefb 	bl	8009f88 <osThreadNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a17      	ldr	r2, [pc, #92]	; (80001f4 <MX_FREERTOS_Init+0x80>)
 8000196:	6013      	str	r3, [r2, #0]

  /* creation of LEDheartbeat */
  LEDheartbeatHandle = osThreadNew(StartLEDheartbeat, NULL, &LEDheartbeat_attributes);
 8000198:	4a17      	ldr	r2, [pc, #92]	; (80001f8 <MX_FREERTOS_Init+0x84>)
 800019a:	2100      	movs	r1, #0
 800019c:	4817      	ldr	r0, [pc, #92]	; (80001fc <MX_FREERTOS_Init+0x88>)
 800019e:	f009 fef3 	bl	8009f88 <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a16      	ldr	r2, [pc, #88]	; (8000200 <MX_FREERTOS_Init+0x8c>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of taskUSB_rcv */
  taskUSB_rcvHandle = osThreadNew(StartUSB_rcv, NULL, &taskUSB_rcv_attributes);
 80001a8:	4a16      	ldr	r2, [pc, #88]	; (8000204 <MX_FREERTOS_Init+0x90>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	4816      	ldr	r0, [pc, #88]	; (8000208 <MX_FREERTOS_Init+0x94>)
 80001ae:	f009 feeb 	bl	8009f88 <osThreadNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a15      	ldr	r2, [pc, #84]	; (800020c <MX_FREERTOS_Init+0x98>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* creation of UARTtask */
  UARTtaskHandle = osThreadNew(StartUARTtask, NULL, &UARTtask_attributes);
 80001b8:	4a15      	ldr	r2, [pc, #84]	; (8000210 <MX_FREERTOS_Init+0x9c>)
 80001ba:	2100      	movs	r1, #0
 80001bc:	4815      	ldr	r0, [pc, #84]	; (8000214 <MX_FREERTOS_Init+0xa0>)
 80001be:	f009 fee3 	bl	8009f88 <osThreadNew>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a14      	ldr	r2, [pc, #80]	; (8000218 <MX_FREERTOS_Init+0xa4>)
 80001c6:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(StartEncoder, NULL, &Encoder_attributes);
 80001c8:	4a14      	ldr	r2, [pc, #80]	; (800021c <MX_FREERTOS_Init+0xa8>)
 80001ca:	2100      	movs	r1, #0
 80001cc:	4814      	ldr	r0, [pc, #80]	; (8000220 <MX_FREERTOS_Init+0xac>)
 80001ce:	f009 fedb 	bl	8009f88 <osThreadNew>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4a13      	ldr	r2, [pc, #76]	; (8000224 <MX_FREERTOS_Init+0xb0>)
 80001d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  qUSB_rcvQueue = qUSB_rcvHandle; // adding to freertos_inc.h
 80001d8:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <MX_FREERTOS_Init+0x74>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a12      	ldr	r2, [pc, #72]	; (8000228 <MX_FREERTOS_Init+0xb4>)
 80001de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	0800da64 	.word	0x0800da64
 80001e8:	20002488 	.word	0x20002488
 80001ec:	0800d9b0 	.word	0x0800d9b0
 80001f0:	0800022d 	.word	0x0800022d
 80001f4:	20002478 	.word	0x20002478
 80001f8:	0800d9d4 	.word	0x0800d9d4
 80001fc:	08000265 	.word	0x08000265
 8000200:	2000247c 	.word	0x2000247c
 8000204:	0800d9f8 	.word	0x0800d9f8
 8000208:	08000299 	.word	0x08000299
 800020c:	20002484 	.word	0x20002484
 8000210:	0800da1c 	.word	0x0800da1c
 8000214:	080002e1 	.word	0x080002e1
 8000218:	20002480 	.word	0x20002480
 800021c:	0800da40 	.word	0x0800da40
 8000220:	0800031d 	.word	0x0800031d
 8000224:	20002490 	.word	0x20002490
 8000228:	2000248c 	.word	0x2000248c

0800022c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000234:	f00c fd72 	bl	800cd1c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */


  // Enable USB pull-up
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_SET);
 8000238:	2201      	movs	r2, #1
 800023a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800023e:	4808      	ldr	r0, [pc, #32]	; (8000260 <StartDefaultTask+0x34>)
 8000240:	f002 fd19 	bl	8002c76 <HAL_GPIO_WritePin>
  osDelay(10);
 8000244:	200a      	movs	r0, #10
 8000246:	f009 ff49 	bl	800a0dc <osDelay>
  init_microrl();
 800024a:	f001 fe77 	bl	8001f3c <init_microrl>
  set_CDC_ready(); // allow to send
 800024e:	f001 feaf 	bl	8001fb0 <set_CDC_ready>

  //vTaskDelete(NULL);
  /* Infinite loop */
  for(;;)
  {
    process_encoder();
 8000252:	f000 f8f9 	bl	8000448 <process_encoder>
    osDelay(1);
 8000256:	2001      	movs	r0, #1
 8000258:	f009 ff40 	bl	800a0dc <osDelay>
    process_encoder();
 800025c:	e7f9      	b.n	8000252 <StartDefaultTask+0x26>
 800025e:	bf00      	nop
 8000260:	40010800 	.word	0x40010800

08000264 <StartLEDheartbeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDheartbeat */
void StartLEDheartbeat(void *argument)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDheartbeat */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = 500 / portTICK_PERIOD_MS;
 800026c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000270:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {
		xLastWakeTime = xTaskGetTickCount();
 8000272:	f00b f947 	bl	800b504 <xTaskGetTickCount>
 8000276:	4603      	mov	r3, r0
 8000278:	60bb      	str	r3, [r7, #8]

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800027a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <StartLEDheartbeat+0x30>)
 8000280:	f002 fd11 	bl	8002ca6 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000284:	f107 0308 	add.w	r3, r7, #8
 8000288:	68f9      	ldr	r1, [r7, #12]
 800028a:	4618      	mov	r0, r3
 800028c:	f00a ff76 	bl	800b17c <vTaskDelayUntil>
		xLastWakeTime = xTaskGetTickCount();
 8000290:	e7ef      	b.n	8000272 <StartLEDheartbeat+0xe>
 8000292:	bf00      	nop
 8000294:	40011000 	.word	0x40011000

08000298 <StartUSB_rcv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSB_rcv */
void StartUSB_rcv(void *argument)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	char buf;

	UBaseType_t uxHighWaterMark, uxHighWaterMark_old;

	/* Inspect our own high water mark on entering the task. */
	uxHighWaterMark_old = uxTaskGetStackHighWaterMark( NULL );
 80002a0:	2000      	movs	r0, #0
 80002a2:	f00b fc31 	bl	800bb08 <uxTaskGetStackHighWaterMark>
 80002a6:	6178      	str	r0, [r7, #20]
	uxHighWaterMark = uxHighWaterMark_old;
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	613b      	str	r3, [r7, #16]

  for(;;)
  {
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <StartUSB_rcv+0x44>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f107 010f 	add.w	r1, r7, #15
 80002b4:	f04f 32ff 	mov.w	r2, #4294967295
 80002b8:	4618      	mov	r0, r3
 80002ba:	f00a fb7b 	bl	800a9b4 <xQueueReceive>
	  microrl_print_char(buf);
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 faf7 	bl	80018b4 <microrl_print_char>
	  uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 80002c6:	2000      	movs	r0, #0
 80002c8:	f00b fc1e 	bl	800bb08 <uxTaskGetStackHighWaterMark>
 80002cc:	6138      	str	r0, [r7, #16]
	  if (uxHighWaterMark < uxHighWaterMark_old)
 80002ce:	693a      	ldr	r2, [r7, #16]
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d2ea      	bcs.n	80002ac <StartUSB_rcv+0x14>
	  {
		  uxHighWaterMark_old = uxHighWaterMark;
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	617b      	str	r3, [r7, #20]
	  xQueueReceive(qUSB_rcvQueue, &buf, portMAX_DELAY );
 80002da:	e7e7      	b.n	80002ac <StartUSB_rcv+0x14>
 80002dc:	2000248c 	.word	0x2000248c

080002e0 <StartUARTtask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTtask */
void StartUARTtask(void *argument)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  uint8_t data;
  for(;;)
  {
	HAL_UART_Receive_IT(&huart2, &data, 1);
 80002e8:	f107 030f 	add.w	r3, r7, #15
 80002ec:	2201      	movs	r2, #1
 80002ee:	4619      	mov	r1, r3
 80002f0:	4809      	ldr	r0, [pc, #36]	; (8000318 <StartUARTtask+0x38>)
 80002f2:	f005 fbd8 	bl	8005aa6 <HAL_UART_Receive_IT>
	/* Wait to be notified of an interrupt. */
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 80002f6:	f04f 31ff 	mov.w	r1, #4294967295
 80002fa:	2001      	movs	r0, #1
 80002fc:	f00b fd00 	bl	800bd00 <ulTaskNotifyTake>
	if (get_nema())
 8000300:	f001 ff60 	bl	80021c4 <get_nema>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0ee      	beq.n	80002e8 <StartUARTtask+0x8>
		CDC_Transmit_FS(&data, 1);
 800030a:	f107 030f 	add.w	r3, r7, #15
 800030e:	2101      	movs	r1, #1
 8000310:	4618      	mov	r0, r3
 8000312:	f00c fde7 	bl	800cee4 <CDC_Transmit_FS>
	HAL_UART_Receive_IT(&huart2, &data, 1);
 8000316:	e7e7      	b.n	80002e8 <StartUARTtask+0x8>
 8000318:	20002610 	.word	0x20002610

0800031c <StartEncoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoder */
void StartEncoder(void *argument)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoder */

	static bool invert = false;
	static bool released = true;

  osDelay(200);
 8000324:	20c8      	movs	r0, #200	; 0xc8
 8000326:	f009 fed9 	bl	800a0dc <osDelay>

  /* Infinite loop */
  for(;;)
  {

	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 800032a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800032e:	482d      	ldr	r0, [pc, #180]	; (80003e4 <StartEncoder+0xc8>)
 8000330:	f002 fc8a 	bl	8002c48 <HAL_GPIO_ReadPin>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d003      	beq.n	8000342 <StartEncoder+0x26>
	  {
		  released = true;
 800033a:	4b2b      	ldr	r3, [pc, #172]	; (80003e8 <StartEncoder+0xcc>)
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
 8000340:	e015      	b.n	800036e <StartEncoder+0x52>
	  } else if (released)
 8000342:	4b29      	ldr	r3, [pc, #164]	; (80003e8 <StartEncoder+0xcc>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d011      	beq.n	800036e <StartEncoder+0x52>
	  {
		  released = false;
 800034a:	4b27      	ldr	r3, [pc, #156]	; (80003e8 <StartEncoder+0xcc>)
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]
		  invert = !invert;
 8000350:	4b26      	ldr	r3, [pc, #152]	; (80003ec <StartEncoder+0xd0>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	bf14      	ite	ne
 8000358:	2301      	movne	r3, #1
 800035a:	2300      	moveq	r3, #0
 800035c:	b2db      	uxtb	r3, r3
 800035e:	f083 0301 	eor.w	r3, r3, #1
 8000362:	b2db      	uxtb	r3, r3
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	b2da      	uxtb	r2, r3
 800036a:	4b20      	ldr	r3, [pc, #128]	; (80003ec <StartEncoder+0xd0>)
 800036c:	701a      	strb	r2, [r3, #0]
	  }

	  data = 0b01000001; // command 2, write to LED port
 800036e:	2341      	movs	r3, #65	; 0x41
 8000370:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 0);
 8000372:	2200      	movs	r2, #0
 8000374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000378:	481a      	ldr	r0, [pc, #104]	; (80003e4 <StartEncoder+0xc8>)
 800037a:	f002 fc7c 	bl	8002c76 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 800037e:	f107 010f 	add.w	r1, r7, #15
 8000382:	f04f 33ff 	mov.w	r3, #4294967295
 8000386:	2201      	movs	r2, #1
 8000388:	4819      	ldr	r0, [pc, #100]	; (80003f0 <StartEncoder+0xd4>)
 800038a:	f004 ff13 	bl	80051b4 <HAL_SPI_Transmit>
	  osDelay(10);
 800038e:	200a      	movs	r0, #10
 8000390:	f009 fea4 	bl	800a0dc <osDelay>

	  data = ~(1<<((encoder_value >> 2)&0b11));
 8000394:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <StartEncoder+0xd8>)
 8000396:	881b      	ldrh	r3, [r3, #0]
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	b29b      	uxth	r3, r3
 800039c:	f003 0303 	and.w	r3, r3, #3
 80003a0:	2201      	movs	r2, #1
 80003a2:	fa02 f303 	lsl.w	r3, r2, r3
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	43db      	mvns	r3, r3
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	73fb      	strb	r3, [r7, #15]
	  if (invert)
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <StartEncoder+0xd0>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d003      	beq.n	80003be <StartEncoder+0xa2>
		  data =~data;
 80003b6:	7bfb      	ldrb	r3, [r7, #15]
 80003b8:	43db      	mvns	r3, r3
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	73fb      	strb	r3, [r7, #15]

	  HAL_SPI_Transmit(&hspi2, &data, 1, 0xffffffff);
 80003be:	f107 010f 	add.w	r1, r7, #15
 80003c2:	f04f 33ff 	mov.w	r3, #4294967295
 80003c6:	2201      	movs	r2, #1
 80003c8:	4809      	ldr	r0, [pc, #36]	; (80003f0 <StartEncoder+0xd4>)
 80003ca:	f004 fef3 	bl	80051b4 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(PT6315_STB_GPIO_Port, PT6315_STB_Pin, 1);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d4:	4803      	ldr	r0, [pc, #12]	; (80003e4 <StartEncoder+0xc8>)
 80003d6:	f002 fc4e 	bl	8002c76 <HAL_GPIO_WritePin>

	  osDelay(10);
 80003da:	200a      	movs	r0, #10
 80003dc:	f009 fe7e 	bl	800a0dc <osDelay>
	  if (HAL_GPIO_ReadPin(enc_s_GPIO_Port, enc_s_Pin))
 80003e0:	e7a3      	b.n	800032a <StartEncoder+0xe>
 80003e2:	bf00      	nop
 80003e4:	40010c00 	.word	0x40010c00
 80003e8:	20000000 	.word	0x20000000
 80003ec:	200001ae 	.word	0x200001ae
 80003f0:	20002570 	.word	0x20002570
 80003f4:	200001ac 	.word	0x200001ac

080003f8 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	if (huart != &huart2)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a0e      	ldr	r2, [pc, #56]	; (800043c <HAL_UART_RxCpltCallback+0x44>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d115      	bne.n	8000434 <HAL_UART_RxCpltCallback+0x3c>
		return;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]


   /* Notify the task that the transmission is complete by setting the TX_BIT
   in the task's notification value. */
	vTaskNotifyGiveFromISR( UARTtaskHandle,
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <HAL_UART_RxCpltCallback+0x48>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f107 020c 	add.w	r2, r7, #12
 8000414:	4611      	mov	r1, r2
 8000416:	4618      	mov	r0, r3
 8000418:	f00b fcba 	bl	800bd90 <vTaskNotifyGiveFromISR>

   /* If xHigherPriorityTaskWoken is now set to pdTRUE then a context switch
   should be performed to ensure the interrupt returns directly to the highest
   priority task.  The macro used for this purpose is dependent on the port in
   use and may be called portEND_SWITCHING_ISR(). */
   portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d009      	beq.n	8000436 <HAL_UART_RxCpltCallback+0x3e>
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <HAL_UART_RxCpltCallback+0x4c>)
 8000424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	f3bf 8f4f 	dsb	sy
 800042e:	f3bf 8f6f 	isb	sy
 8000432:	e000      	b.n	8000436 <HAL_UART_RxCpltCallback+0x3e>
		return;
 8000434:	bf00      	nop
}
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20002610 	.word	0x20002610
 8000440:	20002480 	.word	0x20002480
 8000444:	e000ed04 	.word	0xe000ed04

08000448 <process_encoder>:

void process_encoder(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
	static uint8_t old;
	uint8_t new;
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 800044e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000452:	483c      	ldr	r0, [pc, #240]	; (8000544 <process_encoder+0xfc>)
 8000454:	f002 fbf8 	bl	8002c48 <HAL_GPIO_ReadPin>
 8000458:	4603      	mov	r3, r0
 800045a:	461c      	mov	r4, r3
		   0b10*HAL_GPIO_ReadPin(enc_b_GPIO_Port, enc_b_Pin));
 800045c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000460:	4838      	ldr	r0, [pc, #224]	; (8000544 <process_encoder+0xfc>)
 8000462:	f002 fbf1 	bl	8002c48 <HAL_GPIO_ReadPin>
 8000466:	4603      	mov	r3, r0
	new = (0b01*HAL_GPIO_ReadPin(enc_a_GPIO_Port, enc_a_Pin) +
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	b2db      	uxtb	r3, r3
 800046c:	4423      	add	r3, r4
 800046e:	71fb      	strb	r3, [r7, #7]
	switch(old)
 8000470:	4b35      	ldr	r3, [pc, #212]	; (8000548 <process_encoder+0x100>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b03      	cmp	r3, #3
 8000476:	d85e      	bhi.n	8000536 <process_encoder+0xee>
 8000478:	a201      	add	r2, pc, #4	; (adr r2, 8000480 <process_encoder+0x38>)
 800047a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047e:	bf00      	nop
 8000480:	080004b7 	.word	0x080004b7
 8000484:	080004dd 	.word	0x080004dd
 8000488:	08000491 	.word	0x08000491
 800048c:	08000503 	.word	0x08000503
		{
		case 2:
			{
			if(new == 3) encoder_value++;
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	2b03      	cmp	r3, #3
 8000494:	d105      	bne.n	80004a2 <process_encoder+0x5a>
 8000496:	4b2d      	ldr	r3, [pc, #180]	; (800054c <process_encoder+0x104>)
 8000498:	881b      	ldrh	r3, [r3, #0]
 800049a:	3301      	adds	r3, #1
 800049c:	b29a      	uxth	r2, r3
 800049e:	4b2b      	ldr	r3, [pc, #172]	; (800054c <process_encoder+0x104>)
 80004a0:	801a      	strh	r2, [r3, #0]
			if(new == 0) encoder_value--;
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d13f      	bne.n	8000528 <process_encoder+0xe0>
 80004a8:	4b28      	ldr	r3, [pc, #160]	; (800054c <process_encoder+0x104>)
 80004aa:	881b      	ldrh	r3, [r3, #0]
 80004ac:	3b01      	subs	r3, #1
 80004ae:	b29a      	uxth	r2, r3
 80004b0:	4b26      	ldr	r3, [pc, #152]	; (800054c <process_encoder+0x104>)
 80004b2:	801a      	strh	r2, [r3, #0]
			break;
 80004b4:	e038      	b.n	8000528 <process_encoder+0xe0>
			}

		case 0:
			{
			if(new == 2) encoder_value++;
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	d105      	bne.n	80004c8 <process_encoder+0x80>
 80004bc:	4b23      	ldr	r3, [pc, #140]	; (800054c <process_encoder+0x104>)
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	3301      	adds	r3, #1
 80004c2:	b29a      	uxth	r2, r3
 80004c4:	4b21      	ldr	r3, [pc, #132]	; (800054c <process_encoder+0x104>)
 80004c6:	801a      	strh	r2, [r3, #0]
			if(new == 1) encoder_value--;
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d12e      	bne.n	800052c <process_encoder+0xe4>
 80004ce:	4b1f      	ldr	r3, [pc, #124]	; (800054c <process_encoder+0x104>)
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	3b01      	subs	r3, #1
 80004d4:	b29a      	uxth	r2, r3
 80004d6:	4b1d      	ldr	r3, [pc, #116]	; (800054c <process_encoder+0x104>)
 80004d8:	801a      	strh	r2, [r3, #0]
			break;
 80004da:	e027      	b.n	800052c <process_encoder+0xe4>
			}
		case 1:
			{
			if(new == 0) encoder_value++;
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d105      	bne.n	80004ee <process_encoder+0xa6>
 80004e2:	4b1a      	ldr	r3, [pc, #104]	; (800054c <process_encoder+0x104>)
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	3301      	adds	r3, #1
 80004e8:	b29a      	uxth	r2, r3
 80004ea:	4b18      	ldr	r3, [pc, #96]	; (800054c <process_encoder+0x104>)
 80004ec:	801a      	strh	r2, [r3, #0]
			if(new == 3) encoder_value--;
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2b03      	cmp	r3, #3
 80004f2:	d11d      	bne.n	8000530 <process_encoder+0xe8>
 80004f4:	4b15      	ldr	r3, [pc, #84]	; (800054c <process_encoder+0x104>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	3b01      	subs	r3, #1
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <process_encoder+0x104>)
 80004fe:	801a      	strh	r2, [r3, #0]
			break;
 8000500:	e016      	b.n	8000530 <process_encoder+0xe8>
			}
		case 3:
			{
			if(new == 1) encoder_value++;
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d105      	bne.n	8000514 <process_encoder+0xcc>
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <process_encoder+0x104>)
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	3301      	adds	r3, #1
 800050e:	b29a      	uxth	r2, r3
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <process_encoder+0x104>)
 8000512:	801a      	strh	r2, [r3, #0]
			if(new == 2) encoder_value--;
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	2b02      	cmp	r3, #2
 8000518:	d10c      	bne.n	8000534 <process_encoder+0xec>
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <process_encoder+0x104>)
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	3b01      	subs	r3, #1
 8000520:	b29a      	uxth	r2, r3
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <process_encoder+0x104>)
 8000524:	801a      	strh	r2, [r3, #0]
			break;
 8000526:	e005      	b.n	8000534 <process_encoder+0xec>
			break;
 8000528:	bf00      	nop
 800052a:	e004      	b.n	8000536 <process_encoder+0xee>
			break;
 800052c:	bf00      	nop
 800052e:	e002      	b.n	8000536 <process_encoder+0xee>
			break;
 8000530:	bf00      	nop
 8000532:	e000      	b.n	8000536 <process_encoder+0xee>
			break;
 8000534:	bf00      	nop
			}
		}
	old = new;
 8000536:	4a04      	ldr	r2, [pc, #16]	; (8000548 <process_encoder+0x100>)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	7013      	strb	r3, [r2, #0]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}
 8000544:	40010c00 	.word	0x40010c00
 8000548:	200001af 	.word	0x200001af
 800054c:	200001ac 	.word	0x200001ac

08000550 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000564:	4b49      	ldr	r3, [pc, #292]	; (800068c <MX_GPIO_Init+0x13c>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a48      	ldr	r2, [pc, #288]	; (800068c <MX_GPIO_Init+0x13c>)
 800056a:	f043 0310 	orr.w	r3, r3, #16
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b46      	ldr	r3, [pc, #280]	; (800068c <MX_GPIO_Init+0x13c>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0310 	and.w	r3, r3, #16
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057c:	4b43      	ldr	r3, [pc, #268]	; (800068c <MX_GPIO_Init+0x13c>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a42      	ldr	r2, [pc, #264]	; (800068c <MX_GPIO_Init+0x13c>)
 8000582:	f043 0320 	orr.w	r3, r3, #32
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b40      	ldr	r3, [pc, #256]	; (800068c <MX_GPIO_Init+0x13c>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0320 	and.w	r3, r3, #32
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	4b3d      	ldr	r3, [pc, #244]	; (800068c <MX_GPIO_Init+0x13c>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a3c      	ldr	r2, [pc, #240]	; (800068c <MX_GPIO_Init+0x13c>)
 800059a:	f043 0304 	orr.w	r3, r3, #4
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b3a      	ldr	r3, [pc, #232]	; (800068c <MX_GPIO_Init+0x13c>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0304 	and.w	r3, r3, #4
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ac:	4b37      	ldr	r3, [pc, #220]	; (800068c <MX_GPIO_Init+0x13c>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a36      	ldr	r2, [pc, #216]	; (800068c <MX_GPIO_Init+0x13c>)
 80005b2:	f043 0308 	orr.w	r3, r3, #8
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b34      	ldr	r3, [pc, #208]	; (800068c <MX_GPIO_Init+0x13c>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0308 	and.w	r3, r3, #8
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ca:	4831      	ldr	r0, [pc, #196]	; (8000690 <MX_GPIO_Init+0x140>)
 80005cc:	f002 fb53 	bl	8002c76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 5189 	mov.w	r1, #4384	; 0x1120
 80005d6:	482f      	ldr	r0, [pc, #188]	; (8000694 <MX_GPIO_Init+0x144>)
 80005d8:	f002 fb4d 	bl	8002c76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PU_GPIO_Port, USB_PU_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e2:	482d      	ldr	r0, [pc, #180]	; (8000698 <MX_GPIO_Init+0x148>)
 80005e4:	f002 fb47 	bl	8002c76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4619      	mov	r1, r3
 8000600:	4823      	ldr	r0, [pc, #140]	; (8000690 <MX_GPIO_Init+0x140>)
 8000602:	f002 f99d 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000606:	2301      	movs	r3, #1
 8000608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800060a:	4b24      	ldr	r3, [pc, #144]	; (800069c <MX_GPIO_Init+0x14c>)
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	4619      	mov	r1, r3
 8000618:	481f      	ldr	r0, [pc, #124]	; (8000698 <MX_GPIO_Init+0x148>)
 800061a:	f002 f991 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = enc_a_Pin|enc_b_Pin|enc_s_Pin;
 800061e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000628:	2301      	movs	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	4818      	ldr	r0, [pc, #96]	; (8000694 <MX_GPIO_Init+0x144>)
 8000634:	f002 f984 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_nRF_CSn_Pin|HV_EN_Pin|PT6315_STB_Pin;
 8000638:	f44f 5389 	mov.w	r3, #4384	; 0x1120
 800063c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2302      	movs	r3, #2
 8000648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	f107 0310 	add.w	r3, r7, #16
 800064e:	4619      	mov	r1, r3
 8000650:	4810      	ldr	r0, [pc, #64]	; (8000694 <MX_GPIO_Init+0x144>)
 8000652:	f002 f975 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PU_Pin;
 8000656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800065a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2302      	movs	r3, #2
 8000666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_PU_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4619      	mov	r1, r3
 800066e:	480a      	ldr	r0, [pc, #40]	; (8000698 <MX_GPIO_Init+0x148>)
 8000670:	f002 f966 	bl	8002940 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2105      	movs	r1, #5
 8000678:	2006      	movs	r0, #6
 800067a:	f002 f886 	bl	800278a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800067e:	2006      	movs	r0, #6
 8000680:	f002 f89f 	bl	80027c2 <HAL_NVIC_EnableIRQ>

}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000
 8000690:	40011000 	.word	0x40011000
 8000694:	40010c00 	.word	0x40010c00
 8000698:	40010800 	.word	0x40010800
 800069c:	10110000 	.word	0x10110000

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f001 ff8a 	bl	80025bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f80d 	bl	80006c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f7ff ff50 	bl	8000550 <MX_GPIO_Init>
  MX_SPI2_Init();
 80006b0:	f001 fd92 	bl	80021d8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80006b4:	f001 fee0 	bl	8002478 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80006b8:	f009 fc00 	bl	8009ebc <osKernelInitialize>
  MX_FREERTOS_Init();
 80006bc:	f7ff fd5a 	bl	8000174 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80006c0:	f009 fc2e 	bl	8009f20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0x24>

080006c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b094      	sub	sp, #80	; 0x50
 80006ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d0:	2228      	movs	r2, #40	; 0x28
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f00d f82f 	bl	800d738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f6:	2301      	movs	r3, #1
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000704:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000706:	2301      	movs	r3, #1
 8000708:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000714:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800071e:	4618      	mov	r0, r3
 8000720:	f003 ffc2 	bl	80046a8 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x68>
  {
    Error_Handler();
 800072a:	f000 f839 	bl	80007a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2102      	movs	r1, #2
 800074a:	4618      	mov	r0, r3
 800074c:	f004 fa2c 	bl	8004ba8 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000756:	f000 f823 	bl	80007a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800075a:	2310      	movs	r3, #16
 800075c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4618      	mov	r0, r3
 8000766:	f004 fbeb 	bl	8004f40 <HAL_RCCEx_PeriphCLKConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000770:	f000 f816 	bl	80007a0 <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	3750      	adds	r7, #80	; 0x50
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d101      	bne.n	8000792 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800078e:	f001 ff2b 	bl	80025e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40012c00 	.word	0x40012c00

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>

080007aa <hist_erase_older>:
#endif

//*****************************************************************************
// remove older message from ring buffer
static void hist_erase_older (ring_history_t * pThis)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b085      	sub	sp, #20
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
	int new_pos = pThis->begin + pThis->ring_buf [pThis->begin] + 1;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	5c8a      	ldrb	r2, [r1, r2]
 80007be:	4413      	add	r3, r2
 80007c0:	3301      	adds	r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
	if (new_pos >= _RING_HISTORY_LEN)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2b3f      	cmp	r3, #63	; 0x3f
 80007c8:	dd02      	ble.n	80007d0 <hist_erase_older+0x26>
		new_pos = new_pos - _RING_HISTORY_LEN;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	3b40      	subs	r3, #64	; 0x40
 80007ce:	60fb      	str	r3, [r7, #12]
	
	pThis->begin = new_pos;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <hist_is_space_for_new>:

//*****************************************************************************
// check space for new line, remove older while not space
static int hist_is_space_for_new (ring_history_t * pThis, int len)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
	if (pThis->ring_buf [pThis->begin] == 0)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	5cd3      	ldrb	r3, [r2, r3]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d101      	bne.n	80007fa <hist_is_space_for_new+0x1a>
		return true;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e01e      	b.n	8000838 <hist_is_space_for_new+0x58>
	if (pThis->end >= pThis->begin) {
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	429a      	cmp	r2, r3
 8000804:	db0c      	blt.n	8000820 <hist_is_space_for_new+0x40>
		if (_RING_HISTORY_LEN - pThis->end + pThis->begin - 1 > len)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	4413      	add	r3, r2
 8000814:	3b01      	subs	r3, #1
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	da0c      	bge.n	8000836 <hist_is_space_for_new+0x56>
			return true;
 800081c:	2301      	movs	r3, #1
 800081e:	e00b      	b.n	8000838 <hist_is_space_for_new+0x58>
	}	else {
		if (pThis->begin - pThis->end - 1> len)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	3b01      	subs	r3, #1
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	da01      	bge.n	8000836 <hist_is_space_for_new+0x56>
			return true;
 8000832:	2301      	movs	r3, #1
 8000834:	e000      	b.n	8000838 <hist_is_space_for_new+0x58>
	}
	return false;
 8000836:	2300      	movs	r3, #0
}
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <hist_save_line>:

//*****************************************************************************
// put line to ring buffer
static void hist_save_line (ring_history_t * pThis, char * line, int len)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b086      	sub	sp, #24
 8000846:	af00      	add	r7, sp, #0
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
	if (len > _RING_HISTORY_LEN - 2)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b3e      	cmp	r3, #62	; 0x3e
 8000852:	dc61      	bgt.n	8000918 <hist_save_line+0xd6>
		return;
	while (!hist_is_space_for_new (pThis, len)) {
 8000854:	e002      	b.n	800085c <hist_save_line+0x1a>
		hist_erase_older (pThis);
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f7ff ffa7 	bl	80007aa <hist_erase_older>
	while (!hist_is_space_for_new (pThis, len)) {
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f7ff ffbe 	bl	80007e0 <hist_is_space_for_new>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d0f5      	beq.n	8000856 <hist_save_line+0x14>
	}
	// if it's first line
	if (pThis->ring_buf [pThis->begin] == 0) 
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	5cd3      	ldrb	r3, [r2, r3]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d105      	bne.n	8000882 <hist_save_line+0x40>
		pThis->ring_buf [pThis->begin] = len;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	b2d1      	uxtb	r1, r2
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	54d1      	strb	r1, [r2, r3]
	
	// store line
	if (len < _RING_HISTORY_LEN-pThis->end-1)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	429a      	cmp	r2, r3
 800088e:	da0a      	bge.n	80008a6 <hist_save_line+0x64>
		memcpy (pThis->ring_buf + pThis->end + 1, line, len);
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	3301      	adds	r3, #1
 8000898:	4413      	add	r3, r2
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	68b9      	ldr	r1, [r7, #8]
 800089e:	4618      	mov	r0, r3
 80008a0:	f00c ff22 	bl	800d6e8 <memcpy>
 80008a4:	e018      	b.n	80008d8 <hist_save_line+0x96>
	else {
		int part_len = _RING_HISTORY_LEN-pThis->end-1;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80008ae:	617b      	str	r3, [r7, #20]
		memcpy (pThis->ring_buf + pThis->end + 1, line, part_len);
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	3301      	adds	r3, #1
 80008b8:	4413      	add	r3, r2
 80008ba:	697a      	ldr	r2, [r7, #20]
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	4618      	mov	r0, r3
 80008c0:	f00c ff12 	bl	800d6e8 <memcpy>
		memcpy (pThis->ring_buf, line + part_len, len - part_len);
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	68ba      	ldr	r2, [r7, #8]
 80008ca:	18d1      	adds	r1, r2, r3
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	461a      	mov	r2, r3
 80008d4:	f00c ff08 	bl	800d6e8 <memcpy>
	}
	pThis->ring_buf [pThis->end] = len;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	b2d1      	uxtb	r1, r2
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	54d1      	strb	r1, [r2, r3]
	pThis->end = pThis->end + len + 1;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4413      	add	r3, r2
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	645a      	str	r2, [r3, #68]	; 0x44
	if (pThis->end >= _RING_HISTORY_LEN)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	2b3f      	cmp	r3, #63	; 0x3f
 80008f8:	dd05      	ble.n	8000906 <hist_save_line+0xc4>
		pThis->end -= _RING_HISTORY_LEN;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_buf [pThis->end] = 0;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	2100      	movs	r1, #0
 800090e:	54d1      	strb	r1, [r2, r3]
	pThis->cur = 0;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2200      	movs	r2, #0
 8000914:	649a      	str	r2, [r3, #72]	; 0x48
 8000916:	e000      	b.n	800091a <hist_save_line+0xd8>
		return;
 8000918:	bf00      	nop
#ifdef _HISTORY_DEBUG
	print_hist (pThis);
#endif
}
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <hist_restore_line>:

//*****************************************************************************
// copy saved line to 'line' and return size of line
static int hist_restore_line (ring_history_t * pThis, char * line, int dir)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	; 0x30
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
	int cnt = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
	// count history record	
	int header = pThis->begin;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pThis->ring_buf [header] != 0) {
 8000936:	e010      	b.n	800095a <hist_restore_line+0x3a>
		header += pThis->ring_buf [header] + 1;
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093c:	4413      	add	r3, r2
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000944:	4413      	add	r3, r2
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
		if (header >= _RING_HISTORY_LEN)
 8000948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094a:	2b3f      	cmp	r3, #63	; 0x3f
 800094c:	dd02      	ble.n	8000954 <hist_restore_line+0x34>
			header -= _RING_HISTORY_LEN; 
 800094e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000950:	3b40      	subs	r3, #64	; 0x40
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
		cnt++;
 8000954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000956:	3301      	adds	r3, #1
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pThis->ring_buf [header] != 0) {
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095e:	4413      	add	r3, r2
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1e8      	bne.n	8000938 <hist_restore_line+0x18>
	}

	if (dir == _HIST_UP) {
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d176      	bne.n	8000a5a <hist_restore_line+0x13a>
		if (cnt >= pThis->cur) {
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000972:	429a      	cmp	r2, r3
 8000974:	f2c0 80d6 	blt.w	8000b24 <hist_restore_line+0x204>
			int header = pThis->begin;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
			int j = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
			// found record for 'pThis->cur' index
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 8000982:	e010      	b.n	80009a6 <hist_restore_line+0x86>
				header += pThis->ring_buf [header] + 1;
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	4413      	add	r3, r2
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000990:	4413      	add	r3, r2
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
				if (header >= _RING_HISTORY_LEN)
 8000994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000996:	2b3f      	cmp	r3, #63	; 0x3f
 8000998:	dd02      	ble.n	80009a0 <hist_restore_line+0x80>
					header -= _RING_HISTORY_LEN;
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	3b40      	subs	r3, #64	; 0x40
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
				j++;
 80009a0:	6a3b      	ldr	r3, [r7, #32]
 80009a2:	3301      	adds	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
			while ((pThis->ring_buf [header] != 0) && (cnt - j -1 != pThis->cur)) {
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	4413      	add	r3, r2
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d007      	beq.n	80009c2 <hist_restore_line+0xa2>
 80009b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009b4:	6a3b      	ldr	r3, [r7, #32]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	1e5a      	subs	r2, r3, #1
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009be:	429a      	cmp	r2, r3
 80009c0:	d1e0      	bne.n	8000984 <hist_restore_line+0x64>
			}
			if (pThis->ring_buf[header]) {
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c6:	4413      	add	r3, r2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 80aa 	beq.w	8000b24 <hist_restore_line+0x204>
					pThis->cur++;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	649a      	str	r2, [r3, #72]	; 0x48
				// obtain saved line
				if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009de:	4413      	add	r3, r2
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	461a      	mov	r2, r3
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	4413      	add	r3, r2
 80009e8:	2b3f      	cmp	r3, #63	; 0x3f
 80009ea:	dc11      	bgt.n	8000a10 <hist_restore_line+0xf0>
					memset (line, 0, _COMMAND_LINE_LEN);
 80009ec:	2233      	movs	r2, #51	; 0x33
 80009ee:	2100      	movs	r1, #0
 80009f0:	68b8      	ldr	r0, [r7, #8]
 80009f2:	f00c fea1 	bl	800d738 <memset>
					memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	3301      	adds	r3, #1
 80009fc:	18d1      	adds	r1, r2, r3
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a02:	4413      	add	r3, r2
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	68b8      	ldr	r0, [r7, #8]
 8000a0a:	f00c fe6d 	bl	800d6e8 <memcpy>
 8000a0e:	e01f      	b.n	8000a50 <hist_restore_line+0x130>
				} else {
					int part0 = _RING_HISTORY_LEN - header - 1;
 8000a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a12:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000a16:	613b      	str	r3, [r7, #16]
					memset (line, 0, _COMMAND_LINE_LEN);
 8000a18:	2233      	movs	r2, #51	; 0x33
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	68b8      	ldr	r0, [r7, #8]
 8000a1e:	f00c fe8b 	bl	800d738 <memset>
					memcpy (line, pThis->ring_buf + header + 1, part0);
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	3301      	adds	r3, #1
 8000a28:	4413      	add	r3, r2
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	68b8      	ldr	r0, [r7, #8]
 8000a30:	f00c fe5a 	bl	800d6e8 <memcpy>
					memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	18d0      	adds	r0, r2, r3
 8000a3a:	68f9      	ldr	r1, [r7, #12]
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	4413      	add	r3, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	f00c fe4c 	bl	800d6e8 <memcpy>
				}
				return pThis->ring_buf[header];
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a54:	4413      	add	r3, r2
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	e066      	b.n	8000b28 <hist_restore_line+0x208>
			}
		}
	} else {
		if (pThis->cur > 0) {
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	dd5e      	ble.n	8000b20 <hist_restore_line+0x200>
				pThis->cur--;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a66:	1e5a      	subs	r2, r3, #1
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	649a      	str	r2, [r3, #72]	; 0x48
			int header = pThis->begin;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	61fb      	str	r3, [r7, #28]
			int j = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]

			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8000a76:	e010      	b.n	8000a9a <hist_restore_line+0x17a>
				header += pThis->ring_buf [header] + 1;
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	69fa      	ldr	r2, [r7, #28]
 8000a84:	4413      	add	r3, r2
 8000a86:	61fb      	str	r3, [r7, #28]
				if (header >= _RING_HISTORY_LEN)
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	2b3f      	cmp	r3, #63	; 0x3f
 8000a8c:	dd02      	ble.n	8000a94 <hist_restore_line+0x174>
					header -= _RING_HISTORY_LEN;
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b40      	subs	r3, #64	; 0x40
 8000a92:	61fb      	str	r3, [r7, #28]
				j++;
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	3301      	adds	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
			while ((pThis->ring_buf [header] != 0) && (cnt - j != pThis->cur)) {
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d006      	beq.n	8000ab4 <hist_restore_line+0x194>
 8000aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d1e1      	bne.n	8000a78 <hist_restore_line+0x158>
			}
			if (pThis->ring_buf [header] + header < _RING_HISTORY_LEN) {
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	4413      	add	r3, r2
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ac4:	dc0c      	bgt.n	8000ae0 <hist_restore_line+0x1c0>
				memcpy (line, pThis->ring_buf + header + 1, pThis->ring_buf[header]);
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	3301      	adds	r3, #1
 8000acc:	18d1      	adds	r1, r2, r3
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68b8      	ldr	r0, [r7, #8]
 8000ada:	f00c fe05 	bl	800d6e8 <memcpy>
 8000ade:	e01a      	b.n	8000b16 <hist_restore_line+0x1f6>
			} else {
				int part0 = _RING_HISTORY_LEN - header - 1;
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000ae6:	617b      	str	r3, [r7, #20]
				memcpy (line, pThis->ring_buf + header + 1, part0);
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3301      	adds	r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	4619      	mov	r1, r3
 8000af4:	68b8      	ldr	r0, [r7, #8]
 8000af6:	f00c fdf7 	bl	800d6e8 <memcpy>
				memcpy (line + part0, pThis->ring_buf, pThis->ring_buf[header] - part0);
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	18d0      	adds	r0, r2, r3
 8000b00:	68f9      	ldr	r1, [r7, #12]
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	4413      	add	r3, r2
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	f00c fde9 	bl	800d6e8 <memcpy>
			}
			return pThis->ring_buf[header];
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	e003      	b.n	8000b28 <hist_restore_line+0x208>
		} else {
			/* empty line */
			return 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	e001      	b.n	8000b28 <hist_restore_line+0x208>
		}
	}
	return -1;
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3730      	adds	r7, #48	; 0x30
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <split>:


//*****************************************************************************
// split cmdline to tkn array and return nmb of token
static int split (microrl_t * pThis, int limit, char const ** tkn_arr)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
	int ind = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
	while (1) {
		// go to the first whitespace (zerro for us)
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8000b44:	e002      	b.n	8000b4c <split+0x1c>
			ind++;
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] == '\0') && (ind < limit)) {
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	4413      	add	r3, r2
 8000b52:	3354      	adds	r3, #84	; 0x54
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <split+0x32>
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	dbf1      	blt.n	8000b46 <split+0x16>
		}
		if (!(ind < limit)) return i;
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	db01      	blt.n	8000b6e <split+0x3e>
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	e024      	b.n	8000bb8 <split+0x88>
		tkn_arr[i++] = pThis->cmdline + ind;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	1c58      	adds	r0, r3, #1
 8000b7a:	6178      	str	r0, [r7, #20]
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	4403      	add	r3, r0
 8000b82:	440a      	add	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]
		if (i >= _COMMAND_TOKEN_NMB) {
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	dd05      	ble.n	8000b98 <split+0x68>
			return -1;
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b90:	e012      	b.n	8000bb8 <split+0x88>
		}
		// go to the first NOT whitespace (not zerro for us)
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
			ind++;
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	3301      	adds	r3, #1
 8000b96:	613b      	str	r3, [r7, #16]
		while ((pThis->cmdline [ind] != '\0') && (ind < limit)) {
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	3354      	adds	r3, #84	; 0x54
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <split+0x7e>
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	dbf1      	blt.n	8000b92 <split+0x62>
		}
		if (!(ind < limit)) return i;
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	dbca      	blt.n	8000b4c <split+0x1c>
 8000bb6:	697b      	ldr	r3, [r7, #20]
	}
	return i;
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	371c      	adds	r7, #28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr

08000bc2 <print_prompt>:


//*****************************************************************************
inline static void print_prompt (microrl_t * pThis)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
	pThis->print (pThis->prompt_str);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000bd4:	4610      	mov	r0, r2
 8000bd6:	4798      	blx	r3
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <terminal_backspace>:

//*****************************************************************************
inline static void terminal_backspace (microrl_t * pThis)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
		pThis->print ("\033[D \033[D");
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <terminal_backspace+0x1c>)
 8000bf0:	4798      	blx	r3
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	0800d7e8 	.word	0x0800d7e8

08000c00 <terminal_newline>:

//*****************************************************************************
inline static void terminal_newline (microrl_t * pThis)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	pThis->print (ENDL);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c0e:	4803      	ldr	r0, [pc, #12]	; (8000c1c <terminal_newline+0x1c>)
 8000c10:	4798      	blx	r3
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	0800d7f0 	.word	0x0800d7f0

08000c20 <u16bit_to_str>:
//*****************************************************************************
// convert 16 bit value to string
// 0 value not supported!!! just make empty string
// Returns pointer to a buffer tail
static char *u16bit_to_str (unsigned int nmb, char * buf)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
	char tmp_str [6] = {0,};
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	2300      	movs	r3, #0
 8000c30:	81bb      	strh	r3, [r7, #12]
	int i = 0, j;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
	if (nmb <= 0xFFFF) {
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3c:	d235      	bcs.n	8000caa <u16bit_to_str+0x8a>
		while (nmb > 0) {
 8000c3e:	e01a      	b.n	8000c76 <u16bit_to_str+0x56>
			tmp_str[i++] = (nmb % 10) + '0';
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <u16bit_to_str+0x9c>)
 8000c44:	fba3 2301 	umull	r2, r3, r3, r1
 8000c48:	08da      	lsrs	r2, r3, #3
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	1aca      	subs	r2, r1, r3
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	1c59      	adds	r1, r3, #1
 8000c5a:	6179      	str	r1, [r7, #20]
 8000c5c:	3230      	adds	r2, #48	; 0x30
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	f107 0118 	add.w	r1, r7, #24
 8000c64:	440b      	add	r3, r1
 8000c66:	f803 2c10 	strb.w	r2, [r3, #-16]
			nmb /=10;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a13      	ldr	r2, [pc, #76]	; (8000cbc <u16bit_to_str+0x9c>)
 8000c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	607b      	str	r3, [r7, #4]
		while (nmb > 0) {
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1e1      	bne.n	8000c40 <u16bit_to_str+0x20>
		}
		for (j = 0; j < i; ++j)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	e00f      	b.n	8000ca2 <u16bit_to_str+0x82>
			*(buf++) = tmp_str [i-j-1];
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	1e5a      	subs	r2, r3, #1
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	1c59      	adds	r1, r3, #1
 8000c8e:	6039      	str	r1, [r7, #0]
 8000c90:	f107 0118 	add.w	r1, r7, #24
 8000c94:	440a      	add	r2, r1
 8000c96:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8000c9a:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < i; ++j)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	dbeb      	blt.n	8000c82 <u16bit_to_str+0x62>
	}
	*buf = '\0';
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
	return buf;
 8000cb0:	683b      	ldr	r3, [r7, #0]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	371c      	adds	r7, #28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	cccccccd 	.word	0xcccccccd

08000cc0 <terminal_move_cursor>:


//*****************************************************************************
// set cursor at position from begin cmdline (after prompt) + offset
static void terminal_move_cursor (microrl_t * pThis, int offset)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
	char str[16] = {0,};
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
	} else if (offset < 0) {
		snprintf (str, 16, "\033[%dD", -(offset));
	}
#else 
	char *endstr;
	strcpy (str, "\033[");
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4a1d      	ldr	r2, [pc, #116]	; (8000d54 <terminal_move_cursor+0x94>)
 8000ce0:	6812      	ldr	r2, [r2, #0]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	8019      	strh	r1, [r3, #0]
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	0c12      	lsrs	r2, r2, #16
 8000cea:	701a      	strb	r2, [r3, #0]
	if (offset > 0) {
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	dd0f      	ble.n	8000d12 <terminal_move_cursor+0x52>
		endstr = u16bit_to_str (offset, str+2);
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	f7ff ff8f 	bl	8000c20 <u16bit_to_str>
 8000d02:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "C");
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	4914      	ldr	r1, [pc, #80]	; (8000d58 <terminal_move_cursor+0x98>)
 8000d08:	461a      	mov	r2, r3
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	8013      	strh	r3, [r2, #0]
 8000d10:	e013      	b.n	8000d3a <terminal_move_cursor+0x7a>
	} else if (offset < 0) {
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	da18      	bge.n	8000d4a <terminal_move_cursor+0x8a>
		endstr = u16bit_to_str (-(offset), str+2);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	425b      	negs	r3, r3
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	3302      	adds	r3, #2
 8000d24:	4619      	mov	r1, r3
 8000d26:	4610      	mov	r0, r2
 8000d28:	f7ff ff7a 	bl	8000c20 <u16bit_to_str>
 8000d2c:	61f8      	str	r0, [r7, #28]
		strcpy (endstr, "D");
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	490a      	ldr	r1, [pc, #40]	; (8000d5c <terminal_move_cursor+0x9c>)
 8000d32:	461a      	mov	r2, r3
 8000d34:	460b      	mov	r3, r1
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	8013      	strh	r3, [r2, #0]
	} else
		return;
#endif	
	pThis->print (str);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d40:	f107 020c 	add.w	r2, r7, #12
 8000d44:	4610      	mov	r0, r2
 8000d46:	4798      	blx	r3
 8000d48:	e000      	b.n	8000d4c <terminal_move_cursor+0x8c>
		return;
 8000d4a:	bf00      	nop
}
 8000d4c:	3720      	adds	r7, #32
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	0800d7f4 	.word	0x0800d7f4
 8000d58:	0800d7f8 	.word	0x0800d7f8
 8000d5c:	0800d7fc 	.word	0x0800d7fc

08000d60 <terminal_reset_cursor>:

//*****************************************************************************
static void terminal_reset_cursor (microrl_t * pThis)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	snprintf (str, 16, "\033[%dD\033[%dC", \
						_COMMAND_LINE_LEN + _PROMPT_LEN + 2, _PROMPT_LEN);

#else
	char *endstr;
	strcpy (str, "\033[");
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <terminal_reset_cursor+0x64>)
 8000d6e:	6812      	ldr	r2, [r2, #0]
 8000d70:	4611      	mov	r1, r2
 8000d72:	8019      	strh	r1, [r3, #0]
 8000d74:	3302      	adds	r3, #2
 8000d76:	0c12      	lsrs	r2, r2, #16
 8000d78:	701a      	strb	r2, [r3, #0]
	endstr = u16bit_to_str ( _COMMAND_LINE_LEN + _PROMPT_LEN + 2,str+2);
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	3302      	adds	r3, #2
 8000d80:	4619      	mov	r1, r3
 8000d82:	203a      	movs	r0, #58	; 0x3a
 8000d84:	f7ff ff4c 	bl	8000c20 <u16bit_to_str>
 8000d88:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "D\033["); endstr += 3;
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <terminal_reset_cursor+0x68>)
 8000d8e:	6810      	ldr	r0, [r2, #0]
 8000d90:	6018      	str	r0, [r3, #0]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3303      	adds	r3, #3
 8000d96:	61fb      	str	r3, [r7, #28]
	endstr = u16bit_to_str (_PROMPT_LEN, endstr);
 8000d98:	69f9      	ldr	r1, [r7, #28]
 8000d9a:	2005      	movs	r0, #5
 8000d9c:	f7ff ff40 	bl	8000c20 <u16bit_to_str>
 8000da0:	61f8      	str	r0, [r7, #28]
	strcpy (endstr, "C");
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	4909      	ldr	r1, [pc, #36]	; (8000dcc <terminal_reset_cursor+0x6c>)
 8000da6:	461a      	mov	r2, r3
 8000da8:	460b      	mov	r3, r1
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	8013      	strh	r3, [r2, #0]
#endif
	pThis->print (str);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000db4:	f107 020c 	add.w	r2, r7, #12
 8000db8:	4610      	mov	r0, r2
 8000dba:	4798      	blx	r3
}
 8000dbc:	bf00      	nop
 8000dbe:	3720      	adds	r7, #32
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	0800d7f4 	.word	0x0800d7f4
 8000dc8:	0800d800 	.word	0x0800d800
 8000dcc:	0800d7f8 	.word	0x0800d7f8

08000dd0 <terminal_print_line>:

//*****************************************************************************
// print cmdline to screen, replace '\0' to wihitespace 
static void terminal_print_line (microrl_t * pThis, int pos, int cursor)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	pThis->print ("\033[K");    // delete all from cursor to end
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000de2:	4816      	ldr	r0, [pc, #88]	; (8000e3c <terminal_print_line+0x6c>)
 8000de4:	4798      	blx	r3

	char nch [] = {0,0};
 8000de6:	2300      	movs	r3, #0
 8000de8:	823b      	strh	r3, [r7, #16]
	int i;
	for (i = pos; i < pThis->cmdlen; i++) {
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e014      	b.n	8000e1a <terminal_print_line+0x4a>
		nch [0] = pThis->cmdline [i];
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	4413      	add	r3, r2
 8000df6:	3354      	adds	r3, #84	; 0x54
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	743b      	strb	r3, [r7, #16]
		if (nch[0] == '\0')
 8000dfc:	7c3b      	ldrb	r3, [r7, #16]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <terminal_print_line+0x36>
			nch[0] = ' ';
 8000e02:	2320      	movs	r3, #32
 8000e04:	743b      	strb	r3, [r7, #16]
		pThis->print (nch);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e0c:	f107 0210 	add.w	r2, r7, #16
 8000e10:	4610      	mov	r0, r2
 8000e12:	4798      	blx	r3
	for (i = pos; i < pThis->cmdlen; i++) {
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	3301      	adds	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	dbe4      	blt.n	8000df0 <terminal_print_line+0x20>
	}
	
	terminal_reset_cursor (pThis);
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f7ff ff9a 	bl	8000d60 <terminal_reset_cursor>
	terminal_move_cursor (pThis, cursor);
 8000e2c:	6879      	ldr	r1, [r7, #4]
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f7ff ff46 	bl	8000cc0 <terminal_move_cursor>
}
 8000e34:	bf00      	nop
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	0800d804 	.word	0x0800d804

08000e40 <microrl_init>:

//*****************************************************************************
void microrl_init (microrl_t * pThis, void (*print) (const char *)) 
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3354      	adds	r3, #84	; 0x54
 8000e4e:	2233      	movs	r2, #51	; 0x33
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f00c fc70 	bl	800d738 <memset>
#ifdef _USE_HISTORY
	memset(pThis->ring_hist.ring_buf, 0, _RING_HISTORY_LEN);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	2240      	movs	r2, #64	; 0x40
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f00c fc69 	bl	800d738 <memset>
	pThis->ring_hist.begin = 0;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	645a      	str	r2, [r3, #68]	; 0x44
	pThis->ring_hist.end = 0;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	649a      	str	r2, [r3, #72]	; 0x48
	pThis->ring_hist.cur = 0;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	pThis->cmdlen =0;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	pThis->execute = NULL;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	pThis->get_completion = NULL;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#ifdef _USE_CTLR_C
	pThis->sigint = NULL;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
	pThis->prompt_str = prompt_default;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <microrl_init+0x78>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	651a      	str	r2, [r3, #80]	; 0x50
	pThis->print = print;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#ifdef _ENABLE_INIT_PROMPT
	print_prompt (pThis);
#endif
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000004 	.word	0x20000004

08000ebc <microrl_set_complete_callback>:

//*****************************************************************************
void microrl_set_complete_callback (microrl_t * pThis, char ** (*get_completion)(int, const char* const*))
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
	pThis->get_completion = get_completion;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <microrl_set_execute_callback>:

//*****************************************************************************
void microrl_set_execute_callback (microrl_t * pThis, int (*execute)(int, const char* const*))
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
	pThis->execute = execute;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <microrl_set_sigint_callback>:
#ifdef _USE_CTLR_C
//*****************************************************************************
void microrl_set_sigint_callback (microrl_t * pThis, void (*sigintf)(void))
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
	pThis->sigint = sigintf;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <hist_search>:
#endif

#ifdef _USE_HISTORY
static void hist_search (microrl_t * pThis, int dir)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
	int len = hist_restore_line (&pThis->ring_hist, pThis->cmdline, dir);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	1d18      	adds	r0, r3, #4
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3354      	adds	r3, #84	; 0x54
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f7ff fcfb 	bl	8000920 <hist_restore_line>
 8000f2a:	60f8      	str	r0, [r7, #12]
	if (len >= 0) {
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db1a      	blt.n	8000f68 <hist_search+0x58>
		pThis->cmdline[len] = '\0';
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	3354      	adds	r3, #84	; 0x54
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
		pThis->cursor = pThis->cmdlen = len;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		terminal_reset_cursor (pThis);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ff04 	bl	8000d60 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2100      	movs	r1, #0
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ff34 	bl	8000dd0 <terminal_print_line>
	}
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <escape_process>:

#ifdef _USE_ESC_SEQ
//*****************************************************************************
// handling escape sequences
static int escape_process (microrl_t * pThis, char ch)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
	if (ch == '[') {
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	2b5b      	cmp	r3, #91	; 0x5b
 8000f80:	d104      	bne.n	8000f8c <escape_process+0x1c>
		pThis->escape_seq = _ESC_BRACKET;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
		return 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e07b      	b.n	8001084 <escape_process+0x114>
	} else if (pThis->escape_seq == _ESC_BRACKET) {
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d14f      	bne.n	8001034 <escape_process+0xc4>
		if (ch == 'A') {
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	2b41      	cmp	r3, #65	; 0x41
 8000f98:	d105      	bne.n	8000fa6 <escape_process+0x36>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_UP);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ffb7 	bl	8000f10 <hist_search>
#endif
			return 1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e06e      	b.n	8001084 <escape_process+0x114>
		} else if (ch == 'B') {
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	2b42      	cmp	r3, #66	; 0x42
 8000faa:	d105      	bne.n	8000fb8 <escape_process+0x48>
#ifdef _USE_HISTORY
			hist_search (pThis, _HIST_DOWN);
 8000fac:	2101      	movs	r1, #1
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffae 	bl	8000f10 <hist_search>
#endif
			return 1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e065      	b.n	8001084 <escape_process+0x114>
		} else if (ch == 'C') {
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	2b43      	cmp	r3, #67	; 0x43
 8000fbc:	d114      	bne.n	8000fe8 <escape_process+0x78>
			if (pThis->cursor < pThis->cmdlen) {
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	da0a      	bge.n	8000fe4 <escape_process+0x74>
				terminal_move_cursor (pThis, 1);
 8000fce:	2101      	movs	r1, #1
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff fe75 	bl	8000cc0 <terminal_move_cursor>
				pThis->cursor++;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e04d      	b.n	8001084 <escape_process+0x114>
		} else if (ch == 'D') {
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	2b44      	cmp	r3, #68	; 0x44
 8000fec:	d112      	bne.n	8001014 <escape_process+0xa4>
			if (pThis->cursor > 0) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	dd0b      	ble.n	8001010 <escape_process+0xa0>
				terminal_move_cursor (pThis, -1);
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff fe5f 	bl	8000cc0 <terminal_move_cursor>
				pThis->cursor--;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001008:	1e5a      	subs	r2, r3, #1
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			}
			return 1;
 8001010:	2301      	movs	r3, #1
 8001012:	e037      	b.n	8001084 <escape_process+0x114>
		} else if (ch == '7') {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	2b37      	cmp	r3, #55	; 0x37
 8001018:	d104      	bne.n	8001024 <escape_process+0xb4>
			pThis->escape_seq = _ESC_HOME;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2202      	movs	r2, #2
 800101e:	701a      	strb	r2, [r3, #0]
			return 0;
 8001020:	2300      	movs	r3, #0
 8001022:	e02f      	b.n	8001084 <escape_process+0x114>
		} else if (ch == '8') {
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	2b38      	cmp	r3, #56	; 0x38
 8001028:	d12b      	bne.n	8001082 <escape_process+0x112>
			pThis->escape_seq = _ESC_END;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2203      	movs	r2, #3
 800102e:	701a      	strb	r2, [r3, #0]
			return 0;
 8001030:	2300      	movs	r3, #0
 8001032:	e027      	b.n	8001084 <escape_process+0x114>
		} 
	} else if (ch == '~') {
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	2b7e      	cmp	r3, #126	; 0x7e
 8001038:	d123      	bne.n	8001082 <escape_process+0x112>
		if (pThis->escape_seq == _ESC_HOME) {
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d108      	bne.n	8001054 <escape_process+0xe4>
			terminal_reset_cursor (pThis);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fe8c 	bl	8000d60 <terminal_reset_cursor>
			pThis->cursor = 0;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 8001050:	2301      	movs	r3, #1
 8001052:	e017      	b.n	8001084 <escape_process+0x114>
		} else if (pThis->escape_seq == _ESC_END) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b03      	cmp	r3, #3
 800105a:	d112      	bne.n	8001082 <escape_process+0x112>
			terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	4619      	mov	r1, r3
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff fe27 	bl	8000cc0 <terminal_move_cursor>
			pThis->cursor = pThis->cmdlen;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			return 1;
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <escape_process+0x114>
		}
	}

	/* unknown escape sequence, stop */
	return 1;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <microrl_insert_text>:
#endif

//*****************************************************************************
// insert len char of text at cursor position
static int microrl_insert_text (microrl_t * pThis, char * text, int len)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
	int i;
	if (pThis->cmdlen + len < _COMMAND_LINE_LEN) {
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	2b32      	cmp	r3, #50	; 0x32
 80010a4:	dc60      	bgt.n	8001168 <microrl_insert_text+0xdc>
		memmove (pThis->cmdline + pThis->cursor + len,
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010b2:	4619      	mov	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	440b      	add	r3, r1
 80010b8:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3354      	adds	r3, #84	; 0x54
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor + len,
 80010c4:	1899      	adds	r1, r3, r2
						 pThis->cmdlen - pThis->cursor);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010d2:	1ad3      	subs	r3, r2, r3
		memmove (pThis->cmdline + pThis->cursor + len,
 80010d4:	461a      	mov	r2, r3
 80010d6:	f00c fb15 	bl	800d704 <memmove>
		for (i = 0; i < len; i++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	e025      	b.n	800112c <microrl_insert_text+0xa0>
			pThis->cmdline [pThis->cursor + i] = text [i];
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	441a      	add	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	440b      	add	r3, r1
 80010f0:	7811      	ldrb	r1, [r2, #0]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4413      	add	r3, r2
 80010f6:	460a      	mov	r2, r1
 80010f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (pThis->cmdline [pThis->cursor + i] == ' ') {
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	4413      	add	r3, r2
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800110e:	2b20      	cmp	r3, #32
 8001110:	d109      	bne.n	8001126 <microrl_insert_text+0x9a>
				pThis->cmdline [pThis->cursor + i] = 0;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	4413      	add	r3, r2
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		for (i = 0; i < len; i++) {
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	dbd5      	blt.n	80010e0 <microrl_insert_text+0x54>
			}
		}
		pThis->cursor += len;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	441a      	add	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdlen += len;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	441a      	add	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		pThis->cmdline [pThis->cmdlen] = '\0';
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	4413      	add	r3, r2
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		return true;
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <microrl_insert_text+0xde>
	}
	return false;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <microrl_backspace>:

//*****************************************************************************
// remove one char at cursor
static void microrl_backspace (microrl_t * pThis)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
	if (pThis->cursor > 0) {
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001180:	2b00      	cmp	r3, #0
 8001182:	dd31      	ble.n	80011e8 <microrl_backspace+0x76>
		terminal_backspace (pThis);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fd2b 	bl	8000be0 <terminal_backspace>
		memmove (pThis->cmdline + pThis->cursor-1,
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001196:	3b01      	subs	r3, #1
 8001198:	18d0      	adds	r0, r2, r3
						 pThis->cmdline + pThis->cursor,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3354      	adds	r3, #84	; 0x54
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
		memmove (pThis->cmdline + pThis->cursor-1,
 80011a4:	1899      	adds	r1, r3, r2
						 pThis->cmdlen-pThis->cursor+1);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	3301      	adds	r3, #1
		memmove (pThis->cmdline + pThis->cursor-1,
 80011b6:	461a      	mov	r2, r3
 80011b8:	f00c faa4 	bl	800d704 <memmove>
		pThis->cursor--;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011c2:	1e5a      	subs	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		pThis->cmdline [pThis->cmdlen] = '\0';
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	4413      	add	r3, r2
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		pThis->cmdlen--;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e0:	1e5a      	subs	r2, r3, #1
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	}
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <common_len>:

#ifdef _USE_COMPLETE

//*****************************************************************************
static int common_len (char ** arr)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	int i;
	int j;
	char *shortest = arr[0];
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]
	int shortlen = strlen(shortest);
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7fe ffb0 	bl	8000164 <strlen>
 8001204:	4603      	mov	r3, r0
 8001206:	60bb      	str	r3, [r7, #8]

	for (i = 0; arr[i] != NULL; ++i)
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	e019      	b.n	8001242 <common_len+0x52>
		if (strlen(arr[i]) < shortlen) {
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ffa3 	bl	8000164 <strlen>
 800121e:	4602      	mov	r2, r0
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	429a      	cmp	r2, r3
 8001224:	d20a      	bcs.n	800123c <common_len+0x4c>
			shortest = arr[i];
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]
			shortlen = strlen(shortest);
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f7fe ff96 	bl	8000164 <strlen>
 8001238:	4603      	mov	r3, r0
 800123a:	60bb      	str	r3, [r7, #8]
	for (i = 0; arr[i] != NULL; ++i)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1de      	bne.n	800120e <common_len+0x1e>
		}

	for (i = 0; i < shortlen; ++i)
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	e01f      	b.n	8001296 <common_len+0xa6>
		for (j = 0; arr[j] != 0; ++j)
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	e012      	b.n	8001282 <common_len+0x92>
			if (shortest[i] != arr[j][i])
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	4413      	add	r3, r2
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	440b      	add	r3, r1
 800126c:	6819      	ldr	r1, [r3, #0]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	440b      	add	r3, r1
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d001      	beq.n	800127c <common_len+0x8c>
				return i;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	e011      	b.n	80012a0 <common_len+0xb0>
		for (j = 0; arr[j] != 0; ++j)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	3301      	adds	r3, #1
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1e5      	bne.n	800125c <common_len+0x6c>
	for (i = 0; i < shortlen; ++i)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3301      	adds	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	429a      	cmp	r2, r3
 800129c:	dbdb      	blt.n	8001256 <common_len+0x66>

	return i;
 800129e:	697b      	ldr	r3, [r7, #20]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <microrl_get_complite>:

//*****************************************************************************
static void microrl_get_complite (microrl_t * pThis) 
{
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	char const * tkn_arr[_COMMAND_TOKEN_NMB];
	char ** compl_token; 
	
	if (pThis->get_completion == NULL) // callback was not set
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 809c 	beq.w	80013f4 <microrl_get_complite+0x14c>
		return;
	
	int status = split (pThis, pThis->cursor, tkn_arr);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012c2:	f107 020c 	add.w	r2, r7, #12
 80012c6:	4619      	mov	r1, r3
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff fc31 	bl	8000b30 <split>
 80012ce:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (pThis->cmdline[pThis->cursor-1] == '\0')
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012d6:	3b01      	subs	r3, #1
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d109      	bne.n	80012f8 <microrl_get_complite+0x50>
		tkn_arr[status++] = "";
 80012e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80012f0:	4413      	add	r3, r2
 80012f2:	4a42      	ldr	r2, [pc, #264]	; (80013fc <microrl_get_complite+0x154>)
 80012f4:	f843 2c24 	str.w	r2, [r3, #-36]
	compl_token = pThis->get_completion (status, tkn_arr);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012fe:	f107 020c 	add.w	r2, r7, #12
 8001302:	4611      	mov	r1, r2
 8001304:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001306:	4798      	blx	r3
 8001308:	6238      	str	r0, [r7, #32]
	if (compl_token[0] != NULL) {
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d071      	beq.n	80013f6 <microrl_get_complite+0x14e>
		int i = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
		int len;

		if (compl_token[1] == NULL) {
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	3304      	adds	r3, #4
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d107      	bne.n	8001330 <microrl_get_complite+0x88>
			len = strlen (compl_token[0]);
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7fe ff1d 	bl	8000164 <strlen>
 800132a:	4603      	mov	r3, r0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
 800132e:	e026      	b.n	800137e <microrl_get_complite+0xd6>
		} else {
			len = common_len (compl_token);
 8001330:	6a38      	ldr	r0, [r7, #32]
 8001332:	f7ff ff5d 	bl	80011f0 <common_len>
 8001336:	6278      	str	r0, [r7, #36]	; 0x24
			terminal_newline (pThis);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff fc61 	bl	8000c00 <terminal_newline>
			while (compl_token [i] != NULL) {
 800133e:	e011      	b.n	8001364 <microrl_get_complite+0xbc>
				pThis->print (compl_token[i]);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	6a39      	ldr	r1, [r7, #32]
 800134c:	440a      	add	r2, r1
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	4610      	mov	r0, r2
 8001352:	4798      	blx	r3
				pThis->print (" ");
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800135a:	4829      	ldr	r0, [pc, #164]	; (8001400 <microrl_get_complite+0x158>)
 800135c:	4798      	blx	r3
				i++;
 800135e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001360:	3301      	adds	r3, #1
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
			while (compl_token [i] != NULL) {
 8001364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	6a3a      	ldr	r2, [r7, #32]
 800136a:	4413      	add	r3, r2
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1e6      	bne.n	8001340 <microrl_get_complite+0x98>
			}
			terminal_newline (pThis);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fc44 	bl	8000c00 <terminal_newline>
			print_prompt (pThis);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fc22 	bl	8000bc2 <print_prompt>
		}
		
		if (len) {
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	2b00      	cmp	r3, #0
 8001382:	d02b      	beq.n	80013dc <microrl_get_complite+0x134>
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	681c      	ldr	r4, [r3, #0]
 8001388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138a:	3b01      	subs	r3, #1
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001392:	4413      	add	r3, r2
 8001394:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001398:	4618      	mov	r0, r3
 800139a:	f7fe fee3 	bl	8000164 <strlen>
 800139e:	4603      	mov	r3, r0
 80013a0:	18e5      	adds	r5, r4, r3
																	len - strlen(tkn_arr[status-1]));
 80013a2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80013a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a6:	3b01      	subs	r3, #1
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80013ae:	4413      	add	r3, r2
 80013b0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7fe fed5 	bl	8000164 <strlen>
 80013ba:	4603      	mov	r3, r0
 80013bc:	1ae3      	subs	r3, r4, r3
			microrl_insert_text (pThis, compl_token[0] + strlen(tkn_arr[status-1]), 
 80013be:	461a      	mov	r2, r3
 80013c0:	4629      	mov	r1, r5
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff fe62 	bl	800108c <microrl_insert_text>
			if (compl_token[1] == NULL) 
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	3304      	adds	r3, #4
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d104      	bne.n	80013dc <microrl_get_complite+0x134>
				microrl_insert_text (pThis, " ", 1);
 80013d2:	2201      	movs	r2, #1
 80013d4:	490a      	ldr	r1, [pc, #40]	; (8001400 <microrl_get_complite+0x158>)
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fe58 	bl	800108c <microrl_insert_text>
		}
		terminal_reset_cursor (pThis);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fcbf 	bl	8000d60 <terminal_reset_cursor>
		terminal_print_line (pThis, 0, pThis->cursor);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013e8:	461a      	mov	r2, r3
 80013ea:	2100      	movs	r1, #0
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff fcef 	bl	8000dd0 <terminal_print_line>
 80013f2:	e000      	b.n	80013f6 <microrl_get_complite+0x14e>
		return;
 80013f4:	bf00      	nop
	} 
}
 80013f6:	3730      	adds	r7, #48	; 0x30
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bdb0      	pop	{r4, r5, r7, pc}
 80013fc:	0800d808 	.word	0x0800d808
 8001400:	0800d80c 	.word	0x0800d80c

08001404 <new_line_handler>:
#endif

//*****************************************************************************
void new_line_handler(microrl_t * pThis){
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	char const * tkn_arr [_COMMAND_TOKEN_NMB];
	int status;

	terminal_newline (pThis);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fbf7 	bl	8000c00 <terminal_newline>
#ifdef _USE_HISTORY
	if (pThis->cmdlen > 0)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001418:	2b00      	cmp	r3, #0
 800141a:	dd0a      	ble.n	8001432 <new_line_handler+0x2e>
		hist_save_line (&pThis->ring_hist, pThis->cmdline, pThis->cmdlen);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	1d18      	adds	r0, r3, #4
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142c:	461a      	mov	r2, r3
 800142e:	f7ff fa08 	bl	8000842 <hist_save_line>
#endif
	status = split (pThis, pThis->cmdlen, tkn_arr);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001438:	f107 0208 	add.w	r2, r7, #8
 800143c:	4619      	mov	r1, r3
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fb76 	bl	8000b30 <split>
 8001444:	61f8      	str	r0, [r7, #28]
	if (status == -1){
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d109      	bne.n	8001462 <new_line_handler+0x5e>
		//          pThis->print ("ERROR: Max token amount exseed\n");
		pThis->print ("ERROR:too many tokens");
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001454:	4817      	ldr	r0, [pc, #92]	; (80014b4 <new_line_handler+0xb0>)
 8001456:	4798      	blx	r3
		pThis->print (ENDL);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800145e:	4816      	ldr	r0, [pc, #88]	; (80014b8 <new_line_handler+0xb4>)
 8001460:	4798      	blx	r3
	}
	if ((status > 0) && (pThis->execute != NULL))
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	2b00      	cmp	r3, #0
 8001466:	dd0c      	ble.n	8001482 <new_line_handler+0x7e>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <new_line_handler+0x7e>
		pThis->execute (status, tkn_arr);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001478:	f107 0208 	add.w	r2, r7, #8
 800147c:	4611      	mov	r1, r2
 800147e:	69f8      	ldr	r0, [r7, #28]
 8001480:	4798      	blx	r3
	print_prompt (pThis);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fb9d 	bl	8000bc2 <print_prompt>
	pThis->cmdlen = 0;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	pThis->cursor = 0;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	memset(pThis->cmdline, 0, _COMMAND_LINE_LEN);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3354      	adds	r3, #84	; 0x54
 800149c:	2233      	movs	r2, #51	; 0x33
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f00c f949 	bl	800d738 <memset>
#ifdef _USE_HISTORY
	pThis->ring_hist.cur = 0;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	0800d810 	.word	0x0800d810
 80014b8:	0800d7f0 	.word	0x0800d7f0

080014bc <microrl_insert_char>:

//*****************************************************************************

void microrl_insert_char (microrl_t * pThis, int ch)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
#ifdef _USE_ESC_SEQ
	if (pThis->escape) {
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	785b      	ldrb	r3, [r3, #1]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00d      	beq.n	80014ea <microrl_insert_char+0x2e>
		if (escape_process(pThis, ch))
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	4619      	mov	r1, r3
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fd4b 	bl	8000f70 <escape_process>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 81e3 	beq.w	80018a8 <microrl_insert_char+0x3ec>
			pThis->escape = 0;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	705a      	strb	r2, [r3, #1]
			break;
		}
#ifdef _USE_ESC_SEQ
	}
#endif
}
 80014e8:	e1de      	b.n	80018a8 <microrl_insert_char+0x3ec>
		switch (ch) {
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	2b7e      	cmp	r3, #126	; 0x7e
 80014f0:	f200 81af 	bhi.w	8001852 <microrl_insert_char+0x396>
 80014f4:	a201      	add	r2, pc, #4	; (adr r2, 80014fc <microrl_insert_char+0x40>)
 80014f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fa:	bf00      	nop
 80014fc:	0800178f 	.word	0x0800178f
 8001500:	080017c7 	.word	0x080017c7
 8001504:	0800183f 	.word	0x0800183f
 8001508:	08001853 	.word	0x08001853
 800150c:	0800176b 	.word	0x0800176b
 8001510:	0800179f 	.word	0x0800179f
 8001514:	08001853 	.word	0x08001853
 8001518:	080017ff 	.word	0x080017ff
 800151c:	08001721 	.word	0x08001721
 8001520:	080016f9 	.word	0x080016f9
 8001524:	08001753 	.word	0x08001753
 8001528:	08001853 	.word	0x08001853
 800152c:	080016f9 	.word	0x080016f9
 8001530:	080017f5 	.word	0x080017f5
 8001534:	08001853 	.word	0x08001853
 8001538:	080017eb 	.word	0x080017eb
 800153c:	08001853 	.word	0x08001853
 8001540:	0800181b 	.word	0x0800181b
 8001544:	08001853 	.word	0x08001853
 8001548:	08001853 	.word	0x08001853
 800154c:	08001737 	.word	0x08001737
 8001550:	08001853 	.word	0x08001853
 8001554:	08001853 	.word	0x08001853
 8001558:	08001853 	.word	0x08001853
 800155c:	08001853 	.word	0x08001853
 8001560:	08001853 	.word	0x08001853
 8001564:	08001729 	.word	0x08001729
 8001568:	08001853 	.word	0x08001853
 800156c:	08001853 	.word	0x08001853
 8001570:	08001853 	.word	0x08001853
 8001574:	08001853 	.word	0x08001853
 8001578:	08001853 	.word	0x08001853
 800157c:	08001853 	.word	0x08001853
 8001580:	08001853 	.word	0x08001853
 8001584:	08001853 	.word	0x08001853
 8001588:	08001853 	.word	0x08001853
 800158c:	08001853 	.word	0x08001853
 8001590:	08001853 	.word	0x08001853
 8001594:	08001853 	.word	0x08001853
 8001598:	08001853 	.word	0x08001853
 800159c:	08001853 	.word	0x08001853
 80015a0:	08001853 	.word	0x08001853
 80015a4:	08001853 	.word	0x08001853
 80015a8:	08001853 	.word	0x08001853
 80015ac:	08001853 	.word	0x08001853
 80015b0:	08001853 	.word	0x08001853
 80015b4:	08001853 	.word	0x08001853
 80015b8:	08001853 	.word	0x08001853
 80015bc:	08001853 	.word	0x08001853
 80015c0:	08001853 	.word	0x08001853
 80015c4:	08001853 	.word	0x08001853
 80015c8:	08001853 	.word	0x08001853
 80015cc:	08001853 	.word	0x08001853
 80015d0:	08001853 	.word	0x08001853
 80015d4:	08001853 	.word	0x08001853
 80015d8:	08001853 	.word	0x08001853
 80015dc:	08001853 	.word	0x08001853
 80015e0:	08001853 	.word	0x08001853
 80015e4:	08001853 	.word	0x08001853
 80015e8:	08001853 	.word	0x08001853
 80015ec:	08001853 	.word	0x08001853
 80015f0:	08001853 	.word	0x08001853
 80015f4:	08001853 	.word	0x08001853
 80015f8:	08001853 	.word	0x08001853
 80015fc:	08001853 	.word	0x08001853
 8001600:	08001853 	.word	0x08001853
 8001604:	08001853 	.word	0x08001853
 8001608:	08001853 	.word	0x08001853
 800160c:	08001853 	.word	0x08001853
 8001610:	08001853 	.word	0x08001853
 8001614:	08001853 	.word	0x08001853
 8001618:	08001853 	.word	0x08001853
 800161c:	08001853 	.word	0x08001853
 8001620:	08001853 	.word	0x08001853
 8001624:	08001853 	.word	0x08001853
 8001628:	08001853 	.word	0x08001853
 800162c:	08001853 	.word	0x08001853
 8001630:	08001853 	.word	0x08001853
 8001634:	08001853 	.word	0x08001853
 8001638:	08001853 	.word	0x08001853
 800163c:	08001853 	.word	0x08001853
 8001640:	08001853 	.word	0x08001853
 8001644:	08001853 	.word	0x08001853
 8001648:	08001853 	.word	0x08001853
 800164c:	08001853 	.word	0x08001853
 8001650:	08001853 	.word	0x08001853
 8001654:	08001853 	.word	0x08001853
 8001658:	08001853 	.word	0x08001853
 800165c:	08001853 	.word	0x08001853
 8001660:	08001853 	.word	0x08001853
 8001664:	08001853 	.word	0x08001853
 8001668:	08001853 	.word	0x08001853
 800166c:	08001853 	.word	0x08001853
 8001670:	08001853 	.word	0x08001853
 8001674:	08001853 	.word	0x08001853
 8001678:	08001853 	.word	0x08001853
 800167c:	08001853 	.word	0x08001853
 8001680:	08001853 	.word	0x08001853
 8001684:	08001853 	.word	0x08001853
 8001688:	08001853 	.word	0x08001853
 800168c:	08001853 	.word	0x08001853
 8001690:	08001853 	.word	0x08001853
 8001694:	08001853 	.word	0x08001853
 8001698:	08001853 	.word	0x08001853
 800169c:	08001853 	.word	0x08001853
 80016a0:	08001853 	.word	0x08001853
 80016a4:	08001853 	.word	0x08001853
 80016a8:	08001853 	.word	0x08001853
 80016ac:	08001853 	.word	0x08001853
 80016b0:	08001853 	.word	0x08001853
 80016b4:	08001853 	.word	0x08001853
 80016b8:	08001853 	.word	0x08001853
 80016bc:	08001853 	.word	0x08001853
 80016c0:	08001853 	.word	0x08001853
 80016c4:	08001853 	.word	0x08001853
 80016c8:	08001853 	.word	0x08001853
 80016cc:	08001853 	.word	0x08001853
 80016d0:	08001853 	.word	0x08001853
 80016d4:	08001853 	.word	0x08001853
 80016d8:	08001853 	.word	0x08001853
 80016dc:	08001853 	.word	0x08001853
 80016e0:	08001853 	.word	0x08001853
 80016e4:	08001853 	.word	0x08001853
 80016e8:	08001853 	.word	0x08001853
 80016ec:	08001853 	.word	0x08001853
 80016f0:	08001853 	.word	0x08001853
 80016f4:	080017ff 	.word	0x080017ff
				if (pThis->tmpch == (ch == KEY_CR?KEY_LF:KEY_CR))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	789b      	ldrb	r3, [r3, #2]
 80016fc:	461a      	mov	r2, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b0d      	cmp	r3, #13
 8001702:	d101      	bne.n	8001708 <microrl_insert_char+0x24c>
 8001704:	230a      	movs	r3, #10
 8001706:	e000      	b.n	800170a <microrl_insert_char+0x24e>
 8001708:	230d      	movs	r3, #13
 800170a:	4293      	cmp	r3, r2
 800170c:	f000 80c1 	beq.w	8001892 <microrl_insert_char+0x3d6>
				pThis->tmpch = ch;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	709a      	strb	r2, [r3, #2]
				new_line_handler(pThis);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fe73 	bl	8001404 <new_line_handler>
				break;
 800171e:	e0c3      	b.n	80018a8 <microrl_insert_char+0x3ec>
				microrl_get_complite (pThis);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fdc1 	bl	80012a8 <microrl_get_complite>
			break;
 8001726:	e0bf      	b.n	80018a8 <microrl_insert_char+0x3ec>
				pThis->escape = 1;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	705a      	strb	r2, [r3, #1]
			break;
 800172e:	e0bb      	b.n	80018a8 <microrl_insert_char+0x3ec>
					microrl_backspace (pThis);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff fd1e 	bl	8001172 <microrl_backspace>
					while (pThis->cursor > 0) {
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800173c:	2b00      	cmp	r3, #0
 800173e:	dcf7      	bgt.n	8001730 <microrl_insert_char+0x274>
				terminal_print_line (pThis, 0, pThis->cursor);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001746:	461a      	mov	r2, r3
 8001748:	2100      	movs	r1, #0
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fb40 	bl	8000dd0 <terminal_print_line>
			break;
 8001750:	e0aa      	b.n	80018a8 <microrl_insert_char+0x3ec>
				pThis->print ("\033[K");
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001758:	4855      	ldr	r0, [pc, #340]	; (80018b0 <microrl_insert_char+0x3f4>)
 800175a:	4798      	blx	r3
				pThis->cmdlen = pThis->cursor;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8001768:	e09e      	b.n	80018a8 <microrl_insert_char+0x3ec>
				terminal_move_cursor (pThis, pThis->cmdlen-pThis->cursor);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	4619      	mov	r1, r3
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff faa0 	bl	8000cc0 <terminal_move_cursor>
				pThis->cursor = pThis->cmdlen;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800178c:	e08c      	b.n	80018a8 <microrl_insert_char+0x3ec>
				terminal_reset_cursor (pThis);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fae6 	bl	8000d60 <terminal_reset_cursor>
				pThis->cursor = 0;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800179c:	e084      	b.n	80018a8 <microrl_insert_char+0x3ec>
			if (pThis->cursor < pThis->cmdlen) {
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017aa:	429a      	cmp	r2, r3
 80017ac:	da73      	bge.n	8001896 <microrl_insert_char+0x3da>
				terminal_move_cursor (pThis, 1);
 80017ae:	2101      	movs	r1, #1
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fa85 	bl	8000cc0 <terminal_move_cursor>
				pThis->cursor++;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80017c4:	e067      	b.n	8001896 <microrl_insert_char+0x3da>
			if (pThis->cursor) {
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d064      	beq.n	800189a <microrl_insert_char+0x3de>
				terminal_move_cursor (pThis, -1);
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fa73 	bl	8000cc0 <terminal_move_cursor>
				pThis->cursor--;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 80017e8:	e057      	b.n	800189a <microrl_insert_char+0x3de>
			hist_search (pThis, _HIST_UP);
 80017ea:	2100      	movs	r1, #0
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fb8f 	bl	8000f10 <hist_search>
			break;
 80017f2:	e059      	b.n	80018a8 <microrl_insert_char+0x3ec>
			hist_search (pThis, _HIST_DOWN);
 80017f4:	2101      	movs	r1, #1
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fb8a 	bl	8000f10 <hist_search>
			break;
 80017fc:	e054      	b.n	80018a8 <microrl_insert_char+0x3ec>
				microrl_backspace (pThis);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fcb7 	bl	8001172 <microrl_backspace>
				terminal_print_line (pThis, pThis->cursor, pThis->cursor);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001810:	461a      	mov	r2, r3
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fadc 	bl	8000dd0 <terminal_print_line>
			break;
 8001818:	e046      	b.n	80018a8 <microrl_insert_char+0x3ec>
				terminal_newline (pThis);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff f9f0 	bl	8000c00 <terminal_newline>
				print_prompt (pThis);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff f9ce 	bl	8000bc2 <print_prompt>
				terminal_reset_cursor (pThis);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fa9a 	bl	8000d60 <terminal_reset_cursor>
				terminal_print_line (pThis, 0, pThis->cursor);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001832:	461a      	mov	r2, r3
 8001834:	2100      	movs	r1, #0
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff faca 	bl	8000dd0 <terminal_print_line>
			break;
 800183c:	e034      	b.n	80018a8 <microrl_insert_char+0x3ec>
			if (pThis->sigint != NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001844:	2b00      	cmp	r3, #0
 8001846:	d02a      	beq.n	800189e <microrl_insert_char+0x3e2>
				pThis->sigint();
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800184e:	4798      	blx	r3
			break;
 8001850:	e025      	b.n	800189e <microrl_insert_char+0x3e2>
			if (((ch == ' ') && (pThis->cmdlen == 0)) || IS_CONTROL_CHAR(ch))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2b20      	cmp	r3, #32
 8001856:	d104      	bne.n	8001862 <microrl_insert_char+0x3a6>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185e:	2b00      	cmp	r3, #0
 8001860:	d01f      	beq.n	80018a2 <microrl_insert_char+0x3e6>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2b1f      	cmp	r3, #31
 8001866:	dd1c      	ble.n	80018a2 <microrl_insert_char+0x3e6>
			if (microrl_insert_text (pThis, (char*)&ch, 1))
 8001868:	463b      	mov	r3, r7
 800186a:	2201      	movs	r2, #1
 800186c:	4619      	mov	r1, r3
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fc0c 	bl	800108c <microrl_insert_text>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d015      	beq.n	80018a6 <microrl_insert_char+0x3ea>
				terminal_print_line (pThis, pThis->cursor-1, pThis->cursor);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001880:	1e59      	subs	r1, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001888:	461a      	mov	r2, r3
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff faa0 	bl	8000dd0 <terminal_print_line>
			break;
 8001890:	e009      	b.n	80018a6 <microrl_insert_char+0x3ea>
					break;
 8001892:	bf00      	nop
 8001894:	e008      	b.n	80018a8 <microrl_insert_char+0x3ec>
			break;
 8001896:	bf00      	nop
 8001898:	e006      	b.n	80018a8 <microrl_insert_char+0x3ec>
			break;
 800189a:	bf00      	nop
 800189c:	e004      	b.n	80018a8 <microrl_insert_char+0x3ec>
			break;
 800189e:	bf00      	nop
 80018a0:	e002      	b.n	80018a8 <microrl_insert_char+0x3ec>
	}
 80018a2:	bf00      	nop
 80018a4:	e000      	b.n	80018a8 <microrl_insert_char+0x3ec>
			break;
 80018a6:	bf00      	nop
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	0800d804 	.word	0x0800d804

080018b4 <microrl_print_char>:
/****************************************************************
 *
 */

void microrl_print_char(char buf)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	microrl_insert_char(p_mcrl, (int) buf);
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <microrl_print_char+0x20>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	79fa      	ldrb	r2, [r7, #7]
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fdf8 	bl	80014bc <microrl_insert_char>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000008 	.word	0x20000008

080018d8 <print>:

void print (const char * str)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	if ((!color_out) && (str[0] == '\e')) // don't print escape characters
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <print+0x84>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	f083 0301 	eor.w	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <print+0x1e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b1b      	cmp	r3, #27
 80018f4:	d02b      	beq.n	800194e <print+0x76>
		return;
	if (!CDC_is_ready)
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <print+0x88>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	f083 0301 	eor.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d126      	bne.n	8001952 <print+0x7a>
		return;
	uint16_t len = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	81fb      	strh	r3, [r7, #14]
	while (str[++len] != 0);
 8001908:	89fb      	ldrh	r3, [r7, #14]
 800190a:	3301      	adds	r3, #1
 800190c:	81fb      	strh	r3, [r7, #14]
 800190e:	89fb      	ldrh	r3, [r7, #14]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	4413      	add	r3, r2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f6      	bne.n	8001908 <print+0x30>
	uint32_t timeout = HAL_GetTick();
 800191a:	f000 fe77 	bl	800260c <HAL_GetTick>
 800191e:	60b8      	str	r0, [r7, #8]
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001920:	e006      	b.n	8001930 <print+0x58>
		if (HAL_GetTick() - timeout >= 5)
 8001922:	f000 fe73 	bl	800260c <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b04      	cmp	r3, #4
 800192e:	d807      	bhi.n	8001940 <print+0x68>
	while (((USBD_CDC_HandleTypeDef*)(hUsbDeviceFS.pClassData))->TxState!=0)
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <print+0x8c>)
 8001932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001936:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f1      	bne.n	8001922 <print+0x4a>
 800193e:	e000      	b.n	8001942 <print+0x6a>
			break;
 8001940:	bf00      	nop
	CDC_Transmit_FS((uint8_t*)str, len);
 8001942:	89fb      	ldrh	r3, [r7, #14]
 8001944:	4619      	mov	r1, r3
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f00b facc 	bl	800cee4 <CDC_Transmit_FS>
 800194c:	e002      	b.n	8001954 <print+0x7c>
		return;
 800194e:	bf00      	nop
 8001950:	e000      	b.n	8001954 <print+0x7c>
		return;
 8001952:	bf00      	nop
}
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2000000c 	.word	0x2000000c
 8001960:	200001b0 	.word	0x200001b0
 8001964:	20002698 	.word	0x20002698

08001968 <find_color_by_name>:

int find_color_by_name(microrl_color_e color)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	e010      	b.n	800199a <find_color_by_name+0x32>
	{
		if (microrl_color_lookup[i].name == color)
 8001978:	490c      	ldr	r1, [pc, #48]	; (80019ac <find_color_by_name+0x44>)
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	440b      	add	r3, r1
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	79fa      	ldrb	r2, [r7, #7]
 800198c:	429a      	cmp	r2, r3
 800198e:	d101      	bne.n	8001994 <find_color_by_name+0x2c>
		{
			return i;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	e006      	b.n	80019a2 <find_color_by_name+0x3a>
	for (int i = 0; i < microrl_color_lookup_length; i++)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3301      	adds	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2b10      	cmp	r3, #16
 800199e:	d9eb      	bls.n	8001978 <find_color_by_name+0x10>
		}
	}
	return 0;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	0800ddfc 	.word	0x0800ddfc

080019b0 <print_color>:

int print_color(const char * str, microrl_color_e color)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	70fb      	strb	r3, [r7, #3]
	print(microrl_color_lookup[find_color_by_name(color)].code);
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ffd2 	bl	8001968 <find_color_by_name>
 80019c4:	4602      	mov	r2, r0
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <print_color+0x44>)
 80019d2:	4413      	add	r3, r2
 80019d4:	3301      	adds	r3, #1
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff7e 	bl	80018d8 <print>
	print(str);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff7b 	bl	80018d8 <print>
	print(COLOR_NC);
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <print_color+0x48>)
 80019e4:	f7ff ff78 	bl	80018d8 <print>
	return 0;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	0800ddfc 	.word	0x0800ddfc
 80019f8:	0800d828 	.word	0x0800d828

080019fc <str_length>:

int str_length(const char * str)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8001a08:	e002      	b.n	8001a10 <str_length+0x14>
		i++;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
	while (str[i])
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f6      	bne.n	8001a0a <str_length+0xe>
	return i;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <print_help>:


int print_help(int argc, const char * const * argv)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
	print(_VER);
 8001a32:	4858      	ldr	r0, [pc, #352]	; (8001b94 <print_help+0x16c>)
 8001a34:	f7ff ff50 	bl	80018d8 <print>
	print(ENDL);
 8001a38:	4857      	ldr	r0, [pc, #348]	; (8001b98 <print_help+0x170>)
 8001a3a:	f7ff ff4d 	bl	80018d8 <print>
	print ("Use ");
 8001a3e:	4857      	ldr	r0, [pc, #348]	; (8001b9c <print_help+0x174>)
 8001a40:	f7ff ff4a 	bl	80018d8 <print>
	print_color("TAB", C_GREEN);
 8001a44:	2105      	movs	r1, #5
 8001a46:	4856      	ldr	r0, [pc, #344]	; (8001ba0 <print_help+0x178>)
 8001a48:	f7ff ffb2 	bl	80019b0 <print_color>
	print(" key for completion");
 8001a4c:	4855      	ldr	r0, [pc, #340]	; (8001ba4 <print_help+0x17c>)
 8001a4e:	f7ff ff43 	bl	80018d8 <print>
	print (ENDL);
 8001a52:	4851      	ldr	r0, [pc, #324]	; (8001b98 <print_help+0x170>)
 8001a54:	f7ff ff40 	bl	80018d8 <print>
	print ("Available commands:");
 8001a58:	4853      	ldr	r0, [pc, #332]	; (8001ba8 <print_help+0x180>)
 8001a5a:	f7ff ff3d 	bl	80018d8 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	e08a      	b.n	8001b7a <print_help+0x152>
	{
		if (microrl_actions[i].level == -1) // print synonyms
 8001a64:	4a51      	ldr	r2, [pc, #324]	; (8001bac <print_help+0x184>)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	019b      	lsls	r3, r3, #6
 8001a6a:	4413      	add	r3, r2
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a72:	d11b      	bne.n	8001aac <print_help+0x84>
		{
			assert_param(i > 0);
			if (microrl_actions[i - 1].level != -1)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	4a4c      	ldr	r2, [pc, #304]	; (8001bac <print_help+0x184>)
 8001a7a:	019b      	lsls	r3, r3, #6
 8001a7c:	4413      	add	r3, r2
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d004      	beq.n	8001a90 <print_help+0x68>
				print_color(" aka ", C_L_PURPLE);
 8001a86:	210c      	movs	r1, #12
 8001a88:	4849      	ldr	r0, [pc, #292]	; (8001bb0 <print_help+0x188>)
 8001a8a:	f7ff ff91 	bl	80019b0 <print_color>
 8001a8e:	e003      	b.n	8001a98 <print_help+0x70>
			else
				print_color("/", C_L_PURPLE);
 8001a90:	210c      	movs	r1, #12
 8001a92:	4848      	ldr	r0, [pc, #288]	; (8001bb4 <print_help+0x18c>)
 8001a94:	f7ff ff8c 	bl	80019b0 <print_color>
			print_color (microrl_actions[i].cmd, C_PURPLE);
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	019b      	lsls	r3, r3, #6
 8001a9c:	4a43      	ldr	r2, [pc, #268]	; (8001bac <print_help+0x184>)
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	210b      	movs	r1, #11
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff83 	bl	80019b0 <print_color>
 8001aaa:	e063      	b.n	8001b74 <print_help+0x14c>
		}
		else
		{
			print(ENDL);
 8001aac:	483a      	ldr	r0, [pc, #232]	; (8001b98 <print_help+0x170>)
 8001aae:	f7ff ff13 	bl	80018d8 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8001ab2:	f06f 0303 	mvn.w	r3, #3
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	e005      	b.n	8001ac6 <print_help+0x9e>
				print(" ");
 8001aba:	483f      	ldr	r0, [pc, #252]	; (8001bb8 <print_help+0x190>)
 8001abc:	f7ff ff0c 	bl	80018d8 <print>
			for (int e = -4; e < microrl_actions[i].level; e++)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4a39      	ldr	r2, [pc, #228]	; (8001bac <print_help+0x184>)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	019b      	lsls	r3, r3, #6
 8001acc:	4413      	add	r3, r2
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dbf1      	blt.n	8001aba <print_help+0x92>
			print_color(microrl_actions[i].cmd, microrl_help_color[microrl_actions[i].level]);
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	019b      	lsls	r3, r3, #6
 8001ada:	4a34      	ldr	r2, [pc, #208]	; (8001bac <print_help+0x184>)
 8001adc:	4413      	add	r3, r2
 8001ade:	1d1a      	adds	r2, r3, #4
 8001ae0:	4932      	ldr	r1, [pc, #200]	; (8001bac <print_help+0x184>)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	019b      	lsls	r3, r3, #6
 8001ae6:	440b      	add	r3, r1
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4934      	ldr	r1, [pc, #208]	; (8001bbc <print_help+0x194>)
 8001aec:	5ccb      	ldrb	r3, [r1, r3]
 8001aee:	4619      	mov	r1, r3
 8001af0:	4610      	mov	r0, r2
 8001af2:	f7ff ff5d 	bl	80019b0 <print_color>
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	e005      	b.n	8001b08 <print_help+0xe0>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
				print (" ");
 8001afc:	482e      	ldr	r0, [pc, #184]	; (8001bb8 <print_help+0x190>)
 8001afe:	f7ff feeb 	bl	80018d8 <print>
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3301      	adds	r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	4a28      	ldr	r2, [pc, #160]	; (8001bac <print_help+0x184>)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	019b      	lsls	r3, r3, #6
 8001b0e:	4413      	add	r3, r2
 8001b10:	681b      	ldr	r3, [r3, #0]
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001b12:	f1c3 040c 	rsb	r4, r3, #12
								microrl_actions[i].level - str_length(microrl_actions[i].cmd); e++)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	019b      	lsls	r3, r3, #6
 8001b1a:	4a24      	ldr	r2, [pc, #144]	; (8001bac <print_help+0x184>)
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3304      	adds	r3, #4
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff6b 	bl	80019fc <str_length>
 8001b26:	4603      	mov	r3, r0
 8001b28:	1ae3      	subs	r3, r4, r3
			for (int e = 0; e < MICRORL_CMD_LENGTH + 2 -
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	dbe5      	blt.n	8001afc <print_help+0xd4>
			switch (microrl_actions[i].level){
 8001b30:	4a1e      	ldr	r2, [pc, #120]	; (8001bac <print_help+0x184>)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	019b      	lsls	r3, r3, #6
 8001b36:	4413      	add	r3, r2
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <print_help+0x11c>
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d004      	beq.n	8001b4c <print_help+0x124>
 8001b42:	e007      	b.n	8001b54 <print_help+0x12c>
			case 0:
				print ("-");
 8001b44:	481e      	ldr	r0, [pc, #120]	; (8001bc0 <print_help+0x198>)
 8001b46:	f7ff fec7 	bl	80018d8 <print>
				break;
 8001b4a:	e007      	b.n	8001b5c <print_help+0x134>
			case 1:
				print ("^");
 8001b4c:	481d      	ldr	r0, [pc, #116]	; (8001bc4 <print_help+0x19c>)
 8001b4e:	f7ff fec3 	bl	80018d8 <print>
				break;
 8001b52:	e003      	b.n	8001b5c <print_help+0x134>
			default:
				print ("#");
 8001b54:	481c      	ldr	r0, [pc, #112]	; (8001bc8 <print_help+0x1a0>)
 8001b56:	f7ff febf 	bl	80018d8 <print>
				break;
 8001b5a:	bf00      	nop
			}
			print (" ");
 8001b5c:	4816      	ldr	r0, [pc, #88]	; (8001bb8 <print_help+0x190>)
 8001b5e:	f7ff febb 	bl	80018d8 <print>
			print (microrl_actions[i].help_msg);
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	019b      	lsls	r3, r3, #6
 8001b66:	3308      	adds	r3, #8
 8001b68:	4a10      	ldr	r2, [pc, #64]	; (8001bac <print_help+0x184>)
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3306      	adds	r3, #6
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff feb2 	bl	80018d8 <print>
	for (int i = 0; i < microrl_actions_length; i++)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b0d      	cmp	r3, #13
 8001b7e:	f67f af71 	bls.w	8001a64 <print_help+0x3c>
		}
	}
	print(ENDL);
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <print_help+0x170>)
 8001b84:	f7ff fea8 	bl	80018d8 <print>
	return 0;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd90      	pop	{r4, r7, pc}
 8001b92:	bf00      	nop
 8001b94:	0800d830 	.word	0x0800d830
 8001b98:	0800d840 	.word	0x0800d840
 8001b9c:	0800d844 	.word	0x0800d844
 8001ba0:	0800d84c 	.word	0x0800d84c
 8001ba4:	0800d850 	.word	0x0800d850
 8001ba8:	0800d864 	.word	0x0800d864
 8001bac:	0800da7c 	.word	0x0800da7c
 8001bb0:	0800d878 	.word	0x0800d878
 8001bb4:	0800d880 	.word	0x0800d880
 8001bb8:	0800d884 	.word	0x0800d884
 8001bbc:	0800deb8 	.word	0x0800deb8
 8001bc0:	0800d888 	.word	0x0800d888
 8001bc4:	0800d88c 	.word	0x0800d88c
 8001bc8:	0800d890 	.word	0x0800d890

08001bcc <execute>:



int execute (int argc, const char * const * argv)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
//	print_help(argc, argv);
//	return 0;
	int (*func)   (int argc, const char * const * argv ) = NULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
	 * iterate throw levels and synonyms - run the func from the first (main) synonym
	 * run last found functions with all parameters - functions should check or ignore additional parameters
	 * if nothing found - show err msg
	 */

	int last_main_synonym = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	623b      	str	r3, [r7, #32]
	int synonym_level = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
	bool tokens_found = false;
 8001be2:	2300      	movs	r3, #0
 8001be4:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i < argc; i++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	e050      	b.n	8001c8e <execute+0xc2>
	{
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	e03f      	b.n	8001c72 <execute+0xa6>
		{
			tokens_found = false;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	76fb      	strb	r3, [r7, #27]
			int current_level = microrl_actions[n].level;
 8001bf6:	4a52      	ldr	r2, [pc, #328]	; (8001d40 <execute+0x174>)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	019b      	lsls	r3, r3, #6
 8001bfc:	4413      	add	r3, r2
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]
			// next higher level command found, break;
			if (current_level != -1)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c08:	d001      	beq.n	8001c0e <execute+0x42>
				synonym_level = current_level; // save the synonym level
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	61fb      	str	r3, [r7, #28]
			if ((current_level != -1) && (current_level < i))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d003      	beq.n	8001c1e <execute+0x52>
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	db2d      	blt.n	8001c7a <execute+0xae>
				break;
			if (current_level == i)
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d101      	bne.n	8001c2a <execute+0x5e>
				last_main_synonym = n;
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	623b      	str	r3, [r7, #32]
			if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) &&
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	019b      	lsls	r3, r3, #6
 8001c38:	4941      	ldr	r1, [pc, #260]	; (8001d40 <execute+0x174>)
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4610      	mov	r0, r2
 8001c42:	f7fe fa85 	bl	8000150 <strcmp>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10f      	bne.n	8001c6c <execute+0xa0>
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d10b      	bne.n	8001c6c <execute+0xa0>
					(i == synonym_level))
			{
				tokens_found = true;
 8001c54:	2301      	movs	r3, #1
 8001c56:	76fb      	strb	r3, [r7, #27]
				func = microrl_actions[last_main_synonym++].func;
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	623a      	str	r2, [r7, #32]
 8001c5e:	4a38      	ldr	r2, [pc, #224]	; (8001d40 <execute+0x174>)
 8001c60:	019b      	lsls	r3, r3, #6
 8001c62:	4413      	add	r3, r2
 8001c64:	333c      	adds	r3, #60	; 0x3c
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001c6a:	e007      	b.n	8001c7c <execute+0xb0>
		for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b0d      	cmp	r3, #13
 8001c76:	d9bc      	bls.n	8001bf2 <execute+0x26>
 8001c78:	e000      	b.n	8001c7c <execute+0xb0>
				break;
 8001c7a:	bf00      	nop
			}
		}
		if (!tokens_found)	// nothing found, nothing to do here
 8001c7c:	7efb      	ldrb	r3, [r7, #27]
 8001c7e:	f083 0301 	eor.w	r3, r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d107      	bne.n	8001c98 <execute+0xcc>
	for (int i = 0; i < argc; i++)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dbaa      	blt.n	8001bec <execute+0x20>
 8001c96:	e000      	b.n	8001c9a <execute+0xce>
			break;
 8001c98:	bf00      	nop
	}

	if (func != NULL)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <execute+0xe0>
	{
		return func(argc, argv); // function found
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	6839      	ldr	r1, [r7, #0]
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	4798      	blx	r3
 8001ca8:	4603      	mov	r3, r0
 8001caa:	e045      	b.n	8001d38 <execute+0x16c>
	} else if (tokens_found)
 8001cac:	7efb      	ldrb	r3, [r7, #27]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d021      	beq.n	8001cf6 <execute+0x12a>
	{
		print_color ("command: '", C_L_RED);
 8001cb2:	210a      	movs	r1, #10
 8001cb4:	4823      	ldr	r0, [pc, #140]	; (8001d44 <execute+0x178>)
 8001cb6:	f7ff fe7b 	bl	80019b0 <print_color>
		print_color ((char*)argv[0], C_L_RED);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	210a      	movs	r1, #10
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fe75 	bl	80019b0 <print_color>
		print_color ("' needs additional arguments", C_L_RED);
 8001cc6:	210a      	movs	r1, #10
 8001cc8:	481f      	ldr	r0, [pc, #124]	; (8001d48 <execute+0x17c>)
 8001cca:	f7ff fe71 	bl	80019b0 <print_color>
		print(ENDL);
 8001cce:	481f      	ldr	r0, [pc, #124]	; (8001d4c <execute+0x180>)
 8001cd0:	f7ff fe02 	bl	80018d8 <print>
		print_color ("use '", C_NC);
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	481e      	ldr	r0, [pc, #120]	; (8001d50 <execute+0x184>)
 8001cd8:	f7ff fe6a 	bl	80019b0 <print_color>
		print_color ("?", C_GREEN);
 8001cdc:	2105      	movs	r1, #5
 8001cde:	481d      	ldr	r0, [pc, #116]	; (8001d54 <execute+0x188>)
 8001ce0:	f7ff fe66 	bl	80019b0 <print_color>
		print_color ("' for help", C_NC);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	481c      	ldr	r0, [pc, #112]	; (8001d58 <execute+0x18c>)
 8001ce8:	f7ff fe62 	bl	80019b0 <print_color>
		print (ENDL);
 8001cec:	4817      	ldr	r0, [pc, #92]	; (8001d4c <execute+0x180>)
 8001cee:	f7ff fdf3 	bl	80018d8 <print>
		return 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e020      	b.n	8001d38 <execute+0x16c>
	}
	else
	{
		print_color ("command: '", C_RED);
 8001cf6:	2109      	movs	r1, #9
 8001cf8:	4812      	ldr	r0, [pc, #72]	; (8001d44 <execute+0x178>)
 8001cfa:	f7ff fe59 	bl	80019b0 <print_color>
		print_color ((char*)argv[0], C_RED);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2109      	movs	r1, #9
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fe53 	bl	80019b0 <print_color>
		print_color ("' not found", C_RED);
 8001d0a:	2109      	movs	r1, #9
 8001d0c:	4813      	ldr	r0, [pc, #76]	; (8001d5c <execute+0x190>)
 8001d0e:	f7ff fe4f 	bl	80019b0 <print_color>
		print(ENDL);
 8001d12:	480e      	ldr	r0, [pc, #56]	; (8001d4c <execute+0x180>)
 8001d14:	f7ff fde0 	bl	80018d8 <print>
		print_color ("use '", C_NC);
 8001d18:	2100      	movs	r1, #0
 8001d1a:	480d      	ldr	r0, [pc, #52]	; (8001d50 <execute+0x184>)
 8001d1c:	f7ff fe48 	bl	80019b0 <print_color>
		print_color ("?", C_GREEN);
 8001d20:	2105      	movs	r1, #5
 8001d22:	480c      	ldr	r0, [pc, #48]	; (8001d54 <execute+0x188>)
 8001d24:	f7ff fe44 	bl	80019b0 <print_color>
		print_color ("' for help", C_NC);
 8001d28:	2100      	movs	r1, #0
 8001d2a:	480b      	ldr	r0, [pc, #44]	; (8001d58 <execute+0x18c>)
 8001d2c:	f7ff fe40 	bl	80019b0 <print_color>
		print (ENDL);
 8001d30:	4806      	ldr	r0, [pc, #24]	; (8001d4c <execute+0x180>)
 8001d32:	f7ff fdd1 	bl	80018d8 <print>
		return 1;
 8001d36:	2301      	movs	r3, #1

	}
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3728      	adds	r7, #40	; 0x28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	0800da7c 	.word	0x0800da7c
 8001d44:	0800d894 	.word	0x0800d894
 8001d48:	0800d8a0 	.word	0x0800d8a0
 8001d4c:	0800d840 	.word	0x0800d840
 8001d50:	0800d8c0 	.word	0x0800d8c0
 8001d54:	0800d8c8 	.word	0x0800d8c8
 8001d58:	0800d8cc 	.word	0x0800d8cc
 8001d5c:	0800d8d8 	.word	0x0800d8d8

08001d60 <complet>:

#ifdef _USE_COMPLETE
//*****************************************************************************
// completion callback for microrl library
char ** complet (int argc, const char * const * argv)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08c      	sub	sp, #48	; 0x30
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
	int j = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c

	compl_word [0] = NULL;
 8001d6e:	4b5b      	ldr	r3, [pc, #364]	; (8001edc <complet+0x17c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
	/*
	 * print cmd and synonyms with level == argc-1.
	 * if argc == 0 print without synonyms
	 */

	if (argc == 0)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d11b      	bne.n	8001db2 <complet+0x52>
	{
		// if there is no token in cmdline, just print all available token
		for (int i = 0; i < microrl_actions_length; i++) {
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d7e:	e014      	b.n	8001daa <complet+0x4a>
			if (microrl_actions[i].level == 0)
 8001d80:	4a57      	ldr	r2, [pc, #348]	; (8001ee0 <complet+0x180>)
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	019b      	lsls	r3, r3, #6
 8001d86:	4413      	add	r3, r2
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10a      	bne.n	8001da4 <complet+0x44>
			compl_word[j++] = (char*) microrl_actions [i].cmd;
 8001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d96:	0192      	lsls	r2, r2, #6
 8001d98:	4951      	ldr	r1, [pc, #324]	; (8001ee0 <complet+0x180>)
 8001d9a:	440a      	add	r2, r1
 8001d9c:	3204      	adds	r2, #4
 8001d9e:	494f      	ldr	r1, [pc, #316]	; (8001edc <complet+0x17c>)
 8001da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < microrl_actions_length; i++) {
 8001da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da6:	3301      	adds	r3, #1
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dac:	2b0d      	cmp	r3, #13
 8001dae:	d9e7      	bls.n	8001d80 <complet+0x20>
 8001db0:	e08a      	b.n	8001ec8 <complet+0x168>
		}
	} else {
		// get last entered token
		char * bit = (char*)argv [argc-1];
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001db8:	3b01      	subs	r3, #1
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	613b      	str	r3, [r7, #16]
		// iterate through our available token and match it
		// based on previous tokens in the line, find the correct one shift
		int last_main_synonym = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
		int synonym_level = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
		bool tokens_found = false;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	77fb      	strb	r3, [r7, #31]
		for (int i = 0; i < argc; i++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	e072      	b.n	8001ebc <complet+0x15c>
		{
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	e061      	b.n	8001ea0 <complet+0x140>
			{
				tokens_found = false;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	77fb      	strb	r3, [r7, #31]
				int current_level = microrl_actions[n].level;
 8001de0:	4a3f      	ldr	r2, [pc, #252]	; (8001ee0 <complet+0x180>)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	019b      	lsls	r3, r3, #6
 8001de6:	4413      	add	r3, r2
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60fb      	str	r3, [r7, #12]
				// next higher level command found, break;
				if (current_level != -1)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df2:	d001      	beq.n	8001df8 <complet+0x98>
					synonym_level = current_level; // save the synonym level
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	623b      	str	r3, [r7, #32]
				if ((current_level != -1) && (current_level < i))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfe:	d003      	beq.n	8001e08 <complet+0xa8>
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	db4f      	blt.n	8001ea8 <complet+0x148>
					break;
				if (current_level == i)
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d101      	bne.n	8001e14 <complet+0xb4>
					last_main_synonym = n;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
				if ((i == argc - 1) && (strstr(microrl_actions [n].cmd, bit) == microrl_actions [n].cmd) &&
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d122      	bne.n	8001e64 <complet+0x104>
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	4a2f      	ldr	r2, [pc, #188]	; (8001ee0 <complet+0x180>)
 8001e24:	4413      	add	r3, r2
 8001e26:	3304      	adds	r3, #4
 8001e28:	6939      	ldr	r1, [r7, #16]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f00b fc8c 	bl	800d748 <strstr>
 8001e30:	4602      	mov	r2, r0
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	019b      	lsls	r3, r3, #6
 8001e36:	492a      	ldr	r1, [pc, #168]	; (8001ee0 <complet+0x180>)
 8001e38:	440b      	add	r3, r1
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d111      	bne.n	8001e64 <complet+0x104>
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d10d      	bne.n	8001e64 <complet+0x104>
										(i == synonym_level))
				{
					tokens_found = true;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	77fb      	strb	r3, [r7, #31]
					compl_word [j++] =(char*) microrl_actions [n].cmd;
 8001e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	0192      	lsls	r2, r2, #6
 8001e56:	4922      	ldr	r1, [pc, #136]	; (8001ee0 <complet+0x180>)
 8001e58:	440a      	add	r2, r1
 8001e5a:	3204      	adds	r2, #4
 8001e5c:	491f      	ldr	r1, [pc, #124]	; (8001edc <complet+0x17c>)
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001e62:	e01a      	b.n	8001e9a <complet+0x13a>
				}
				else if ((strcmp(argv[i], microrl_actions[n].cmd) == 0) && (i == synonym_level))
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	019b      	lsls	r3, r3, #6
 8001e72:	491b      	ldr	r1, [pc, #108]	; (8001ee0 <complet+0x180>)
 8001e74:	440b      	add	r3, r1
 8001e76:	3304      	adds	r3, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	f7fe f968 	bl	8000150 <strcmp>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d109      	bne.n	8001e9a <complet+0x13a>
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d105      	bne.n	8001e9a <complet+0x13a>
				{
					last_main_synonym++;
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	3301      	adds	r3, #1
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
					tokens_found = true;
 8001e94:	2301      	movs	r3, #1
 8001e96:	77fb      	strb	r3, [r7, #31]
					break;
 8001e98:	e007      	b.n	8001eaa <complet+0x14a>
			for (int n = last_main_synonym; n < microrl_actions_length; n++)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b0d      	cmp	r3, #13
 8001ea4:	d99a      	bls.n	8001ddc <complet+0x7c>
 8001ea6:	e000      	b.n	8001eaa <complet+0x14a>
					break;
 8001ea8:	bf00      	nop
				}
			}
			if (!tokens_found)	// nothing found, nothing to do here
 8001eaa:	7ffb      	ldrb	r3, [r7, #31]
 8001eac:	f083 0301 	eor.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d107      	bne.n	8001ec6 <complet+0x166>
		for (int i = 0; i < argc; i++)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61bb      	str	r3, [r7, #24]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	db88      	blt.n	8001dd6 <complet+0x76>
 8001ec4:	e000      	b.n	8001ec8 <complet+0x168>
				break;
 8001ec6:	bf00      	nop
		}
	}

	// note! last ptr in array always must be NULL!!!
	compl_word [j] = NULL;
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <complet+0x17c>)
 8001eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ecc:	2100      	movs	r1, #0
 8001ece:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	// return set of variants
	return compl_word;
 8001ed2:	4b02      	ldr	r3, [pc, #8]	; (8001edc <complet+0x17c>)
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3730      	adds	r7, #48	; 0x30
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20002494 	.word	0x20002494
 8001ee0:	0800da7c 	.word	0x0800da7c

08001ee4 <sigint>:
#endif


void sigint (void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
	//TODO add functions
	nema_out = false;
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <sigint+0x48>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]


	print (ENDL);
 8001ef0:	480f      	ldr	r0, [pc, #60]	; (8001f30 <sigint+0x4c>)
 8001ef2:	f7ff fcf1 	bl	80018d8 <print>
	print ("^C catched!");
 8001ef6:	480f      	ldr	r0, [pc, #60]	; (8001f34 <sigint+0x50>)
 8001ef8:	f7ff fcee 	bl	80018d8 <print>
	int i = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	607b      	str	r3, [r7, #4]
	while (ENTER[i])
 8001f00:	e009      	b.n	8001f16 <sigint+0x32>
		microrl_insert_char(p_mcrl, ENTER[i++]);
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <sigint+0x54>)
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <sigint+0x4c>)
 8001f0e:	5cd3      	ldrb	r3, [r2, r3]
 8001f10:	4619      	mov	r1, r3
 8001f12:	f7ff fad3 	bl	80014bc <microrl_insert_char>
	while (ENTER[i])
 8001f16:	4a06      	ldr	r2, [pc, #24]	; (8001f30 <sigint+0x4c>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1ef      	bne.n	8001f02 <sigint+0x1e>
}
 8001f22:	bf00      	nop
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200001b1 	.word	0x200001b1
 8001f30:	0800d840 	.word	0x0800d840
 8001f34:	0800d8e4 	.word	0x0800d8e4
 8001f38:	20000008 	.word	0x20000008

08001f3c <init_microrl>:

void init_microrl(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
	  microrl_init(p_mcrl, print);
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <init_microrl+0x38>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	490c      	ldr	r1, [pc, #48]	; (8001f78 <init_microrl+0x3c>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe ff7a 	bl	8000e40 <microrl_init>
	  // set callback for execute
	  microrl_set_execute_callback (p_mcrl, execute);
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <init_microrl+0x38>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	490a      	ldr	r1, [pc, #40]	; (8001f7c <init_microrl+0x40>)
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe ffc0 	bl	8000ed8 <microrl_set_execute_callback>

	#ifdef _USE_COMPLETE
	  // set callback for completion
	  microrl_set_complete_callback (p_mcrl, complet);
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <init_microrl+0x38>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4908      	ldr	r1, [pc, #32]	; (8001f80 <init_microrl+0x44>)
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe ffac 	bl	8000ebc <microrl_set_complete_callback>
	#endif
	  // set callback for Ctrl+C
	  microrl_set_sigint_callback (p_mcrl, sigint);
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <init_microrl+0x38>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4906      	ldr	r1, [pc, #24]	; (8001f84 <init_microrl+0x48>)
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe ffc2 	bl	8000ef4 <microrl_set_sigint_callback>
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000008 	.word	0x20000008
 8001f78:	080018d9 	.word	0x080018d9
 8001f7c:	08001bcd 	.word	0x08001bcd
 8001f80:	08001d61 	.word	0x08001d61
 8001f84:	08001ee5 	.word	0x08001ee5

08001f88 <clear_screen>:


int clear_screen(int argc, const char * const * argv)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
	print ("\033[2J");    // ESC seq for clear entire screen
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <clear_screen+0x20>)
 8001f94:	f7ff fca0 	bl	80018d8 <print>
	print ("\033[H");     // ESC seq for move cursor at left-top corner
 8001f98:	4804      	ldr	r0, [pc, #16]	; (8001fac <clear_screen+0x24>)
 8001f9a:	f7ff fc9d 	bl	80018d8 <print>
	return 0;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	0800d8f0 	.word	0x0800d8f0
 8001fac:	0800d8f8 	.word	0x0800d8f8

08001fb0 <set_CDC_ready>:


void set_CDC_ready(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
	CDC_is_ready = true;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <set_CDC_ready+0x14>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	200001b0 	.word	0x200001b0

08001fc8 <color_toggle>:


int color_toggle 	(int argc, const char * const * argv)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
	color_out ^= 1;
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <color_toggle+0x30>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	f083 0301 	eor.w	r3, r3, #1
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bf14      	ite	ne
 8001fe0:	2301      	movne	r3, #1
 8001fe2:	2300      	moveq	r3, #0
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <color_toggle+0x30>)
 8001fe8:	701a      	strb	r2, [r3, #0]
	return 0;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	2000000c 	.word	0x2000000c

08001ffc <color_on>:

int color_on 		(int argc, const char * const * argv)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
	color_out = 1;
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <color_on+0x28>)
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
	print_color ("Color output is ON", C_GREEN);
 800200c:	2105      	movs	r1, #5
 800200e:	4806      	ldr	r0, [pc, #24]	; (8002028 <color_on+0x2c>)
 8002010:	f7ff fcce 	bl	80019b0 <print_color>
	print(ENDL);
 8002014:	4805      	ldr	r0, [pc, #20]	; (800202c <color_on+0x30>)
 8002016:	f7ff fc5f 	bl	80018d8 <print>
	return 0;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2000000c 	.word	0x2000000c
 8002028:	0800d8fc 	.word	0x0800d8fc
 800202c:	0800d840 	.word	0x0800d840

08002030 <color_off>:

int color_off 		(int argc, const char * const * argv)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
	color_out = 0;
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <color_off+0x28>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
	print ("Color output is OFF");
 8002040:	4806      	ldr	r0, [pc, #24]	; (800205c <color_off+0x2c>)
 8002042:	f7ff fc49 	bl	80018d8 <print>
	print(ENDL);
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <color_off+0x30>)
 8002048:	f7ff fc46 	bl	80018d8 <print>
	return 0;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000000c 	.word	0x2000000c
 800205c:	0800d910 	.word	0x0800d910
 8002060:	0800d840 	.word	0x0800d840

08002064 <color_show>:

int color_show 		(int argc, const char * const * argv)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
	if (color_out)
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <color_show+0x34>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d004      	beq.n	8002080 <color_show+0x1c>
		print_color("Color output is ON", C_GREEN);
 8002076:	2105      	movs	r1, #5
 8002078:	4808      	ldr	r0, [pc, #32]	; (800209c <color_show+0x38>)
 800207a:	f7ff fc99 	bl	80019b0 <print_color>
 800207e:	e002      	b.n	8002086 <color_show+0x22>
	else
		print ("Color output is OFF");
 8002080:	4807      	ldr	r0, [pc, #28]	; (80020a0 <color_show+0x3c>)
 8002082:	f7ff fc29 	bl	80018d8 <print>
	print(ENDL);
 8002086:	4807      	ldr	r0, [pc, #28]	; (80020a4 <color_show+0x40>)
 8002088:	f7ff fc26 	bl	80018d8 <print>
	return 0;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2000000c 	.word	0x2000000c
 800209c:	0800d8fc 	.word	0x0800d8fc
 80020a0:	0800d910 	.word	0x0800d910
 80020a4:	0800d840 	.word	0x0800d840

080020a8 <nema_toggle>:


int nema_toggle 	(int argc, const char * const * argv)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
	nema_out ^= 1;
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <nema_toggle+0x30>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	f083 0301 	eor.w	r3, r3, #1
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf14      	ite	ne
 80020c0:	2301      	movne	r3, #1
 80020c2:	2300      	moveq	r3, #0
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <nema_toggle+0x30>)
 80020c8:	701a      	strb	r2, [r3, #0]
	return 0;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	200001b1 	.word	0x200001b1

080020dc <nema_on>:

int nema_on 		(int argc, const char * const * argv)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
	nema_out = 1;
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <nema_on+0x28>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
	print_color ("NEMA output is ON", C_GREEN);
 80020ec:	2105      	movs	r1, #5
 80020ee:	4806      	ldr	r0, [pc, #24]	; (8002108 <nema_on+0x2c>)
 80020f0:	f7ff fc5e 	bl	80019b0 <print_color>
	print(ENDL);
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <nema_on+0x30>)
 80020f6:	f7ff fbef 	bl	80018d8 <print>
	return 0;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	200001b1 	.word	0x200001b1
 8002108:	0800d924 	.word	0x0800d924
 800210c:	0800d840 	.word	0x0800d840

08002110 <nema_off>:

int nema_off 		(int argc, const char * const * argv)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
	nema_out = 0;
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <nema_off+0x28>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
	print ("NEM output is OFF");
 8002120:	4806      	ldr	r0, [pc, #24]	; (800213c <nema_off+0x2c>)
 8002122:	f7ff fbd9 	bl	80018d8 <print>
	print(ENDL);
 8002126:	4806      	ldr	r0, [pc, #24]	; (8002140 <nema_off+0x30>)
 8002128:	f7ff fbd6 	bl	80018d8 <print>
	return 0;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200001b1 	.word	0x200001b1
 800213c:	0800d938 	.word	0x0800d938
 8002140:	0800d840 	.word	0x0800d840

08002144 <show_encoder>:


int show_encoder (int argc, const char * const * argv)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]

	uint32_t buf = encoder_value;
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <show_encoder+0x78>)
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	617b      	str	r3, [r7, #20]
	char str [8];

	for (int i = 0; i < 5; i++)
 8002154:	2300      	movs	r3, #0
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	e01d      	b.n	8002196 <show_encoder+0x52>
	{
		str[4 - i] = buf % 10 + '0';
 800215a:	6979      	ldr	r1, [r7, #20]
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <show_encoder+0x7c>)
 800215e:	fba3 2301 	umull	r2, r3, r3, r1
 8002162:	08da      	lsrs	r2, r3, #3
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	1aca      	subs	r2, r1, r3
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f1c3 0304 	rsb	r3, r3, #4
 8002176:	3230      	adds	r2, #48	; 0x30
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	f107 0118 	add.w	r1, r7, #24
 800217e:	440b      	add	r3, r1
 8002180:	f803 2c10 	strb.w	r2, [r3, #-16]
		buf /= 10;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	4a0e      	ldr	r2, [pc, #56]	; (80021c0 <show_encoder+0x7c>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	08db      	lsrs	r3, r3, #3
 800218e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 5; i++)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	3301      	adds	r3, #1
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b04      	cmp	r3, #4
 800219a:	ddde      	ble.n	800215a <show_encoder+0x16>
	}
	str[5] = '\r';
 800219c:	230d      	movs	r3, #13
 800219e:	737b      	strb	r3, [r7, #13]
	str[6] = '\n';
 80021a0:	230a      	movs	r3, #10
 80021a2:	73bb      	strb	r3, [r7, #14]
	str[7] = '\0';
 80021a4:	2300      	movs	r3, #0
 80021a6:	73fb      	strb	r3, [r7, #15]
	print(str);
 80021a8:	f107 0308 	add.w	r3, r7, #8
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fb93 	bl	80018d8 <print>
	return 0;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	200001ac 	.word	0x200001ac
 80021c0:	cccccccd 	.word	0xcccccccd

080021c4 <get_nema>:


bool get_nema(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
	return nema_out;
 80021c8:	4b02      	ldr	r3, [pc, #8]	; (80021d4 <get_nema+0x10>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	200001b1 	.word	0x200001b1

080021d8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <MX_SPI2_Init+0x64>)
 80021de:	4a18      	ldr	r2, [pc, #96]	; (8002240 <MX_SPI2_Init+0x68>)
 80021e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <MX_SPI2_Init+0x64>)
 80021e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <MX_SPI2_Init+0x64>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <MX_SPI2_Init+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <MX_SPI2_Init+0x64>)
 80021f8:	2202      	movs	r2, #2
 80021fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <MX_SPI2_Init+0x64>)
 80021fe:	2201      	movs	r2, #1
 8002200:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <MX_SPI2_Init+0x64>)
 8002204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002208:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <MX_SPI2_Init+0x64>)
 800220c:	2218      	movs	r2, #24
 800220e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <MX_SPI2_Init+0x64>)
 8002212:	2280      	movs	r2, #128	; 0x80
 8002214:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <MX_SPI2_Init+0x64>)
 8002218:	2200      	movs	r2, #0
 800221a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800221c:	4b07      	ldr	r3, [pc, #28]	; (800223c <MX_SPI2_Init+0x64>)
 800221e:	2200      	movs	r2, #0
 8002220:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <MX_SPI2_Init+0x64>)
 8002224:	220a      	movs	r2, #10
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002228:	4804      	ldr	r0, [pc, #16]	; (800223c <MX_SPI2_Init+0x64>)
 800222a:	f002 ff3f 	bl	80050ac <HAL_SPI_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002234:	f7fe fab4 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20002570 	.word	0x20002570
 8002240:	40003800 	.word	0x40003800

08002244 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_SPI_MspInit+0x8c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d131      	bne.n	80022c8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <HAL_SPI_MspInit+0x90>)
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	4a1a      	ldr	r2, [pc, #104]	; (80022d4 <HAL_SPI_MspInit+0x90>)
 800226a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226e:	61d3      	str	r3, [r2, #28]
 8002270:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <HAL_SPI_MspInit+0x90>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800227c:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <HAL_SPI_MspInit+0x90>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <HAL_SPI_MspInit+0x90>)
 8002282:	f043 0308 	orr.w	r3, r3, #8
 8002286:	6193      	str	r3, [r2, #24]
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_SPI_MspInit+0x90>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002294:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002298:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800229e:	2303      	movs	r3, #3
 80022a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a2:	f107 0310 	add.w	r3, r7, #16
 80022a6:	4619      	mov	r1, r3
 80022a8:	480b      	ldr	r0, [pc, #44]	; (80022d8 <HAL_SPI_MspInit+0x94>)
 80022aa:	f000 fb49 	bl	8002940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	4619      	mov	r1, r3
 80022c2:	4805      	ldr	r0, [pc, #20]	; (80022d8 <HAL_SPI_MspInit+0x94>)
 80022c4:	f000 fb3c 	bl	8002940 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022c8:	bf00      	nop
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40003800 	.word	0x40003800
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010c00 	.word	0x40010c00

080022dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_MspInit+0x68>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	4a17      	ldr	r2, [pc, #92]	; (8002344 <HAL_MspInit+0x68>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6193      	str	r3, [r2, #24]
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_MspInit+0x68>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_MspInit+0x68>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	4a11      	ldr	r2, [pc, #68]	; (8002344 <HAL_MspInit+0x68>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002304:	61d3      	str	r3, [r2, #28]
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <HAL_MspInit+0x68>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	210f      	movs	r1, #15
 8002316:	f06f 0001 	mvn.w	r0, #1
 800231a:	f000 fa36 	bl	800278a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_MspInit+0x6c>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_MspInit+0x6c>)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
 8002348:	40010000 	.word	0x40010000

0800234c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08c      	sub	sp, #48	; 0x30
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800235c:	2200      	movs	r2, #0
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	2019      	movs	r0, #25
 8002362:	f000 fa12 	bl	800278a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002366:	2019      	movs	r0, #25
 8002368:	f000 fa2b 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800236c:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <HAL_InitTick+0x9c>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	4a1d      	ldr	r2, [pc, #116]	; (80023e8 <HAL_InitTick+0x9c>)
 8002372:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002376:	6193      	str	r3, [r2, #24]
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_InitTick+0x9c>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002384:	f107 0210 	add.w	r2, r7, #16
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f002 fd88 	bl	8004ea4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002394:	f002 fd72 	bl	8004e7c <HAL_RCC_GetPCLK2Freq>
 8002398:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	4a13      	ldr	r2, [pc, #76]	; (80023ec <HAL_InitTick+0xa0>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	0c9b      	lsrs	r3, r3, #18
 80023a4:	3b01      	subs	r3, #1
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_InitTick+0xa4>)
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <HAL_InitTick+0xa8>)
 80023ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <HAL_InitTick+0xa4>)
 80023b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80023b6:	4a0e      	ldr	r2, [pc, #56]	; (80023f0 <HAL_InitTick+0xa4>)
 80023b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <HAL_InitTick+0xa4>)
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_InitTick+0xa4>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80023c8:	4809      	ldr	r0, [pc, #36]	; (80023f0 <HAL_InitTick+0xa4>)
 80023ca:	f003 f8d5 	bl	8005578 <HAL_TIM_Base_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d104      	bne.n	80023de <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80023d4:	4806      	ldr	r0, [pc, #24]	; (80023f0 <HAL_InitTick+0xa4>)
 80023d6:	f003 f927 	bl	8005628 <HAL_TIM_Base_Start_IT>
 80023da:	4603      	mov	r3, r0
 80023dc:	e000      	b.n	80023e0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3730      	adds	r7, #48	; 0x30
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	431bde83 	.word	0x431bde83
 80023f0:	200025c8 	.word	0x200025c8
 80023f4:	40012c00 	.word	0x40012c00

080023f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <NMI_Handler+0x4>

080023fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002402:	e7fe      	b.n	8002402 <HardFault_Handler+0x4>

08002404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002408:	e7fe      	b.n	8002408 <MemManage_Handler+0x4>

0800240a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800240e:	e7fe      	b.n	800240e <BusFault_Handler+0x4>

08002410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <UsageFault_Handler+0x4>

08002416 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002426:	2001      	movs	r0, #1
 8002428:	f000 fc56 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}

08002430 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002436:	f000 fda2 	bl	8002f7e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000332c 	.word	0x2000332c

08002444 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002448:	4802      	ldr	r0, [pc, #8]	; (8002454 <TIM1_UP_IRQHandler+0x10>)
 800244a:	f003 f93f 	bl	80056cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200025c8 	.word	0x200025c8

08002458 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <USART2_IRQHandler+0x10>)
 800245e:	f003 fb53 	bl	8005b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20002610 	.word	0x20002610

0800246c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <MX_USART2_UART_Init+0x4c>)
 800247e:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <MX_USART2_UART_Init+0x50>)
 8002480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <MX_USART2_UART_Init+0x4c>)
 8002484:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <MX_USART2_UART_Init+0x4c>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <MX_USART2_UART_Init+0x4c>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <MX_USART2_UART_Init+0x4c>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <MX_USART2_UART_Init+0x4c>)
 800249e:	220c      	movs	r2, #12
 80024a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a2:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <MX_USART2_UART_Init+0x4c>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <MX_USART2_UART_Init+0x4c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <MX_USART2_UART_Init+0x4c>)
 80024b0:	f003 faac 	bl	8005a0c <HAL_UART_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024ba:	f7fe f971 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20002610 	.word	0x20002610
 80024c8:	40004400 	.word	0x40004400

080024cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 0310 	add.w	r3, r7, #16
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a1f      	ldr	r2, [pc, #124]	; (8002564 <HAL_UART_MspInit+0x98>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d137      	bne.n	800255c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ec:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <HAL_UART_MspInit+0x9c>)
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <HAL_UART_MspInit+0x9c>)
 80024f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f6:	61d3      	str	r3, [r2, #28]
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <HAL_UART_MspInit+0x9c>)
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <HAL_UART_MspInit+0x9c>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	4a17      	ldr	r2, [pc, #92]	; (8002568 <HAL_UART_MspInit+0x9c>)
 800250a:	f043 0304 	orr.w	r3, r3, #4
 800250e:	6193      	str	r3, [r2, #24]
 8002510:	4b15      	ldr	r3, [pc, #84]	; (8002568 <HAL_UART_MspInit+0x9c>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800251c:	2304      	movs	r3, #4
 800251e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002524:	2303      	movs	r3, #3
 8002526:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	4619      	mov	r1, r3
 800252e:	480f      	ldr	r0, [pc, #60]	; (800256c <HAL_UART_MspInit+0xa0>)
 8002530:	f000 fa06 	bl	8002940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002534:	2308      	movs	r3, #8
 8002536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	4619      	mov	r1, r3
 8002546:	4809      	ldr	r0, [pc, #36]	; (800256c <HAL_UART_MspInit+0xa0>)
 8002548:	f000 f9fa 	bl	8002940 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800254c:	2200      	movs	r2, #0
 800254e:	2105      	movs	r1, #5
 8002550:	2026      	movs	r0, #38	; 0x26
 8002552:	f000 f91a 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002556:	2026      	movs	r0, #38	; 0x26
 8002558:	f000 f933 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800255c:	bf00      	nop
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40004400 	.word	0x40004400
 8002568:	40021000 	.word	0x40021000
 800256c:	40010800 	.word	0x40010800

08002570 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002570:	480c      	ldr	r0, [pc, #48]	; (80025a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002572:	490d      	ldr	r1, [pc, #52]	; (80025a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002574:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002578:	e002      	b.n	8002580 <LoopCopyDataInit>

0800257a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800257a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800257c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800257e:	3304      	adds	r3, #4

08002580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002584:	d3f9      	bcc.n	800257a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002586:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002588:	4c0a      	ldr	r4, [pc, #40]	; (80025b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800258a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800258c:	e001      	b.n	8002592 <LoopFillZerobss>

0800258e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800258e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002590:	3204      	adds	r2, #4

08002592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002594:	d3fb      	bcc.n	800258e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002596:	f7ff ff69 	bl	800246c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800259a:	f00b f881 	bl	800d6a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800259e:	f7fe f87f 	bl	80006a0 <main>
  bx lr
 80025a2:	4770      	bx	lr
  ldr r0, =_sdata
 80025a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a8:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80025ac:	0800dedc 	.word	0x0800dedc
  ldr r2, =_sbss
 80025b0:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80025b4:	20003618 	.word	0x20003618

080025b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025b8:	e7fe      	b.n	80025b8 <ADC1_2_IRQHandler>
	...

080025bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <HAL_Init+0x28>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a07      	ldr	r2, [pc, #28]	; (80025e4 <HAL_Init+0x28>)
 80025c6:	f043 0310 	orr.w	r3, r3, #16
 80025ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025cc:	2003      	movs	r0, #3
 80025ce:	f000 f8d1 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025d2:	2000      	movs	r0, #0
 80025d4:	f7ff feba 	bl	800234c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d8:	f7ff fe80 	bl	80022dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40022000 	.word	0x40022000

080025e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_IncTick+0x1c>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_IncTick+0x20>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4413      	add	r3, r2
 80025f8:	4a03      	ldr	r2, [pc, #12]	; (8002608 <HAL_IncTick+0x20>)
 80025fa:	6013      	str	r3, [r2, #0]
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	20000018 	.word	0x20000018
 8002608:	20002654 	.word	0x20002654

0800260c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return uwTick;
 8002610:	4b02      	ldr	r3, [pc, #8]	; (800261c <HAL_GetTick+0x10>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	20002654 	.word	0x20002654

08002620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <__NVIC_SetPriorityGrouping+0x44>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800263c:	4013      	ands	r3, r2
 800263e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800264c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002652:	4a04      	ldr	r2, [pc, #16]	; (8002664 <__NVIC_SetPriorityGrouping+0x44>)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	60d3      	str	r3, [r2, #12]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <__NVIC_GetPriorityGrouping+0x18>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	0a1b      	lsrs	r3, r3, #8
 8002672:	f003 0307 	and.w	r3, r3, #7
}
 8002676:	4618      	mov	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	2b00      	cmp	r3, #0
 8002694:	db0b      	blt.n	80026ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	f003 021f 	and.w	r2, r3, #31
 800269c:	4906      	ldr	r1, [pc, #24]	; (80026b8 <__NVIC_EnableIRQ+0x34>)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	2001      	movs	r0, #1
 80026a6:	fa00 f202 	lsl.w	r2, r0, r2
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	e000e100 	.word	0xe000e100

080026bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	db0a      	blt.n	80026e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	490c      	ldr	r1, [pc, #48]	; (8002708 <__NVIC_SetPriority+0x4c>)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	0112      	lsls	r2, r2, #4
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	440b      	add	r3, r1
 80026e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e4:	e00a      	b.n	80026fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4908      	ldr	r1, [pc, #32]	; (800270c <__NVIC_SetPriority+0x50>)
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	3b04      	subs	r3, #4
 80026f4:	0112      	lsls	r2, r2, #4
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	440b      	add	r3, r1
 80026fa:	761a      	strb	r2, [r3, #24]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000e100 	.word	0xe000e100
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002710:	b480      	push	{r7}
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f1c3 0307 	rsb	r3, r3, #7
 800272a:	2b04      	cmp	r3, #4
 800272c:	bf28      	it	cs
 800272e:	2304      	movcs	r3, #4
 8002730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3304      	adds	r3, #4
 8002736:	2b06      	cmp	r3, #6
 8002738:	d902      	bls.n	8002740 <NVIC_EncodePriority+0x30>
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3b03      	subs	r3, #3
 800273e:	e000      	b.n	8002742 <NVIC_EncodePriority+0x32>
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	f04f 32ff 	mov.w	r2, #4294967295
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43da      	mvns	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	401a      	ands	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002758:	f04f 31ff 	mov.w	r1, #4294967295
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	43d9      	mvns	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	4313      	orrs	r3, r2
         );
}
 800276a:	4618      	mov	r0, r3
 800276c:	3724      	adds	r7, #36	; 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff4f 	bl	8002620 <__NVIC_SetPriorityGrouping>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800279c:	f7ff ff64 	bl	8002668 <__NVIC_GetPriorityGrouping>
 80027a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f7ff ffb2 	bl	8002710 <NVIC_EncodePriority>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff81 	bl	80026bc <__NVIC_SetPriority>
}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff57 	bl	8002684 <__NVIC_EnableIRQ>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d008      	beq.n	8002806 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2204      	movs	r2, #4
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e020      	b.n	8002848 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 020e 	bic.w	r2, r2, #14
 8002814:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0201 	bic.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	2101      	movs	r1, #1
 8002830:	fa01 f202 	lsl.w	r2, r1, r2
 8002834:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002846:	7bfb      	ldrb	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
	...

08002854 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002866:	2b02      	cmp	r3, #2
 8002868:	d005      	beq.n	8002876 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2204      	movs	r2, #4
 800286e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
 8002874:	e051      	b.n	800291a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 020e 	bic.w	r2, r2, #14
 8002884:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0201 	bic.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a22      	ldr	r2, [pc, #136]	; (8002924 <HAL_DMA_Abort_IT+0xd0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d029      	beq.n	80028f4 <HAL_DMA_Abort_IT+0xa0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a20      	ldr	r2, [pc, #128]	; (8002928 <HAL_DMA_Abort_IT+0xd4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d022      	beq.n	80028f0 <HAL_DMA_Abort_IT+0x9c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1f      	ldr	r2, [pc, #124]	; (800292c <HAL_DMA_Abort_IT+0xd8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d01a      	beq.n	80028ea <HAL_DMA_Abort_IT+0x96>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <HAL_DMA_Abort_IT+0xdc>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d012      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x90>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <HAL_DMA_Abort_IT+0xe0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00a      	beq.n	80028de <HAL_DMA_Abort_IT+0x8a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1a      	ldr	r2, [pc, #104]	; (8002938 <HAL_DMA_Abort_IT+0xe4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d102      	bne.n	80028d8 <HAL_DMA_Abort_IT+0x84>
 80028d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028d6:	e00e      	b.n	80028f6 <HAL_DMA_Abort_IT+0xa2>
 80028d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028dc:	e00b      	b.n	80028f6 <HAL_DMA_Abort_IT+0xa2>
 80028de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028e2:	e008      	b.n	80028f6 <HAL_DMA_Abort_IT+0xa2>
 80028e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028e8:	e005      	b.n	80028f6 <HAL_DMA_Abort_IT+0xa2>
 80028ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ee:	e002      	b.n	80028f6 <HAL_DMA_Abort_IT+0xa2>
 80028f0:	2310      	movs	r3, #16
 80028f2:	e000      	b.n	80028f6 <HAL_DMA_Abort_IT+0xa2>
 80028f4:	2301      	movs	r3, #1
 80028f6:	4a11      	ldr	r2, [pc, #68]	; (800293c <HAL_DMA_Abort_IT+0xe8>)
 80028f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	4798      	blx	r3
    } 
  }
  return status;
 800291a:	7bfb      	ldrb	r3, [r7, #15]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40020008 	.word	0x40020008
 8002928:	4002001c 	.word	0x4002001c
 800292c:	40020030 	.word	0x40020030
 8002930:	40020044 	.word	0x40020044
 8002934:	40020058 	.word	0x40020058
 8002938:	4002006c 	.word	0x4002006c
 800293c:	40020000 	.word	0x40020000

08002940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002940:	b480      	push	{r7}
 8002942:	b08b      	sub	sp, #44	; 0x2c
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800294e:	2300      	movs	r3, #0
 8002950:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002952:	e169      	b.n	8002c28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002954:	2201      	movs	r2, #1
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	429a      	cmp	r2, r3
 800296e:	f040 8158 	bne.w	8002c22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4a9a      	ldr	r2, [pc, #616]	; (8002be0 <HAL_GPIO_Init+0x2a0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d05e      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
 800297c:	4a98      	ldr	r2, [pc, #608]	; (8002be0 <HAL_GPIO_Init+0x2a0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d875      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 8002982:	4a98      	ldr	r2, [pc, #608]	; (8002be4 <HAL_GPIO_Init+0x2a4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d058      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
 8002988:	4a96      	ldr	r2, [pc, #600]	; (8002be4 <HAL_GPIO_Init+0x2a4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d86f      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 800298e:	4a96      	ldr	r2, [pc, #600]	; (8002be8 <HAL_GPIO_Init+0x2a8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d052      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
 8002994:	4a94      	ldr	r2, [pc, #592]	; (8002be8 <HAL_GPIO_Init+0x2a8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d869      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 800299a:	4a94      	ldr	r2, [pc, #592]	; (8002bec <HAL_GPIO_Init+0x2ac>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d04c      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
 80029a0:	4a92      	ldr	r2, [pc, #584]	; (8002bec <HAL_GPIO_Init+0x2ac>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d863      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 80029a6:	4a92      	ldr	r2, [pc, #584]	; (8002bf0 <HAL_GPIO_Init+0x2b0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d046      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
 80029ac:	4a90      	ldr	r2, [pc, #576]	; (8002bf0 <HAL_GPIO_Init+0x2b0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d85d      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 80029b2:	2b12      	cmp	r3, #18
 80029b4:	d82a      	bhi.n	8002a0c <HAL_GPIO_Init+0xcc>
 80029b6:	2b12      	cmp	r3, #18
 80029b8:	d859      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 80029ba:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <HAL_GPIO_Init+0x80>)
 80029bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c0:	08002a3b 	.word	0x08002a3b
 80029c4:	08002a15 	.word	0x08002a15
 80029c8:	08002a27 	.word	0x08002a27
 80029cc:	08002a69 	.word	0x08002a69
 80029d0:	08002a6f 	.word	0x08002a6f
 80029d4:	08002a6f 	.word	0x08002a6f
 80029d8:	08002a6f 	.word	0x08002a6f
 80029dc:	08002a6f 	.word	0x08002a6f
 80029e0:	08002a6f 	.word	0x08002a6f
 80029e4:	08002a6f 	.word	0x08002a6f
 80029e8:	08002a6f 	.word	0x08002a6f
 80029ec:	08002a6f 	.word	0x08002a6f
 80029f0:	08002a6f 	.word	0x08002a6f
 80029f4:	08002a6f 	.word	0x08002a6f
 80029f8:	08002a6f 	.word	0x08002a6f
 80029fc:	08002a6f 	.word	0x08002a6f
 8002a00:	08002a6f 	.word	0x08002a6f
 8002a04:	08002a1d 	.word	0x08002a1d
 8002a08:	08002a31 	.word	0x08002a31
 8002a0c:	4a79      	ldr	r2, [pc, #484]	; (8002bf4 <HAL_GPIO_Init+0x2b4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a12:	e02c      	b.n	8002a6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	623b      	str	r3, [r7, #32]
          break;
 8002a1a:	e029      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	3304      	adds	r3, #4
 8002a22:	623b      	str	r3, [r7, #32]
          break;
 8002a24:	e024      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	623b      	str	r3, [r7, #32]
          break;
 8002a2e:	e01f      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	330c      	adds	r3, #12
 8002a36:	623b      	str	r3, [r7, #32]
          break;
 8002a38:	e01a      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d102      	bne.n	8002a48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a42:	2304      	movs	r3, #4
 8002a44:	623b      	str	r3, [r7, #32]
          break;
 8002a46:	e013      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a50:	2308      	movs	r3, #8
 8002a52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	611a      	str	r2, [r3, #16]
          break;
 8002a5a:	e009      	b.n	8002a70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a5c:	2308      	movs	r3, #8
 8002a5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	615a      	str	r2, [r3, #20]
          break;
 8002a66:	e003      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	623b      	str	r3, [r7, #32]
          break;
 8002a6c:	e000      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          break;
 8002a6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2bff      	cmp	r3, #255	; 0xff
 8002a74:	d801      	bhi.n	8002a7a <HAL_GPIO_Init+0x13a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	e001      	b.n	8002a7e <HAL_GPIO_Init+0x13e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2bff      	cmp	r3, #255	; 0xff
 8002a84:	d802      	bhi.n	8002a8c <HAL_GPIO_Init+0x14c>
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	e002      	b.n	8002a92 <HAL_GPIO_Init+0x152>
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	3b08      	subs	r3, #8
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	210f      	movs	r1, #15
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	6a39      	ldr	r1, [r7, #32]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	431a      	orrs	r2, r3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 80b1 	beq.w	8002c22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ac0:	4b4d      	ldr	r3, [pc, #308]	; (8002bf8 <HAL_GPIO_Init+0x2b8>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4a4c      	ldr	r2, [pc, #304]	; (8002bf8 <HAL_GPIO_Init+0x2b8>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6193      	str	r3, [r2, #24]
 8002acc:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <HAL_GPIO_Init+0x2b8>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ad8:	4a48      	ldr	r2, [pc, #288]	; (8002bfc <HAL_GPIO_Init+0x2bc>)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	089b      	lsrs	r3, r3, #2
 8002ade:	3302      	adds	r3, #2
 8002ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	220f      	movs	r2, #15
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a40      	ldr	r2, [pc, #256]	; (8002c00 <HAL_GPIO_Init+0x2c0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d013      	beq.n	8002b2c <HAL_GPIO_Init+0x1ec>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a3f      	ldr	r2, [pc, #252]	; (8002c04 <HAL_GPIO_Init+0x2c4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00d      	beq.n	8002b28 <HAL_GPIO_Init+0x1e8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a3e      	ldr	r2, [pc, #248]	; (8002c08 <HAL_GPIO_Init+0x2c8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d007      	beq.n	8002b24 <HAL_GPIO_Init+0x1e4>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a3d      	ldr	r2, [pc, #244]	; (8002c0c <HAL_GPIO_Init+0x2cc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d101      	bne.n	8002b20 <HAL_GPIO_Init+0x1e0>
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e006      	b.n	8002b2e <HAL_GPIO_Init+0x1ee>
 8002b20:	2304      	movs	r3, #4
 8002b22:	e004      	b.n	8002b2e <HAL_GPIO_Init+0x1ee>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e002      	b.n	8002b2e <HAL_GPIO_Init+0x1ee>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_GPIO_Init+0x1ee>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b30:	f002 0203 	and.w	r2, r2, #3
 8002b34:	0092      	lsls	r2, r2, #2
 8002b36:	4093      	lsls	r3, r2
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b3e:	492f      	ldr	r1, [pc, #188]	; (8002bfc <HAL_GPIO_Init+0x2bc>)
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	3302      	adds	r3, #2
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d006      	beq.n	8002b66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b58:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	492c      	ldr	r1, [pc, #176]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b66:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	4928      	ldr	r1, [pc, #160]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d006      	beq.n	8002b8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b80:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	4922      	ldr	r1, [pc, #136]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
 8002b8c:	e006      	b.n	8002b9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	491e      	ldr	r1, [pc, #120]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ba8:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	4918      	ldr	r1, [pc, #96]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]
 8002bb4:	e006      	b.n	8002bc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bb6:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	4914      	ldr	r1, [pc, #80]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d021      	beq.n	8002c14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	490e      	ldr	r1, [pc, #56]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60cb      	str	r3, [r1, #12]
 8002bdc:	e021      	b.n	8002c22 <HAL_GPIO_Init+0x2e2>
 8002bde:	bf00      	nop
 8002be0:	10320000 	.word	0x10320000
 8002be4:	10310000 	.word	0x10310000
 8002be8:	10220000 	.word	0x10220000
 8002bec:	10210000 	.word	0x10210000
 8002bf0:	10120000 	.word	0x10120000
 8002bf4:	10110000 	.word	0x10110000
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40010000 	.word	0x40010000
 8002c00:	40010800 	.word	0x40010800
 8002c04:	40010c00 	.word	0x40010c00
 8002c08:	40011000 	.word	0x40011000
 8002c0c:	40011400 	.word	0x40011400
 8002c10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	4909      	ldr	r1, [pc, #36]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	3301      	adds	r3, #1
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f47f ae8e 	bne.w	8002954 <HAL_GPIO_Init+0x14>
  }
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	372c      	adds	r7, #44	; 0x2c
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	40010400 	.word	0x40010400

08002c48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	887b      	ldrh	r3, [r7, #2]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e001      	b.n	8002c6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	807b      	strh	r3, [r7, #2]
 8002c82:	4613      	mov	r3, r2
 8002c84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c86:	787b      	ldrb	r3, [r7, #1]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8c:	887a      	ldrh	r2, [r7, #2]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c92:	e003      	b.n	8002c9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c94:	887b      	ldrh	r3, [r7, #2]
 8002c96:	041a      	lsls	r2, r3, #16
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	611a      	str	r2, [r3, #16]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cb8:	887a      	ldrh	r2, [r7, #2]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	041a      	lsls	r2, r3, #16
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	887b      	ldrh	r3, [r7, #2]
 8002cc6:	400b      	ands	r3, r1
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	611a      	str	r2, [r3, #16]
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cee:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f806 	bl	8002d08 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40010400 	.word	0x40010400

08002d08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d1e:	b08b      	sub	sp, #44	; 0x2c
 8002d20:	af06      	add	r7, sp, #24
 8002d22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e0fd      	b.n	8002f2a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f00a fa02 	bl	800d14c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f003 fadb 	bl	8006310 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	687e      	ldr	r6, [r7, #4]
 8002d62:	466d      	mov	r5, sp
 8002d64:	f106 0410 	add.w	r4, r6, #16
 8002d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	602b      	str	r3, [r5, #0]
 8002d70:	1d33      	adds	r3, r6, #4
 8002d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d74:	6838      	ldr	r0, [r7, #0]
 8002d76:	f003 faa5 	bl	80062c4 <USB_CoreInit>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0ce      	b.n	8002f2a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2100      	movs	r1, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f003 fad6 	bl	8006344 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d98:	2300      	movs	r3, #0
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	e04c      	b.n	8002e38 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	3301      	adds	r3, #1
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	440b      	add	r3, r1
 8002dc4:	7bfa      	ldrb	r2, [r7, #15]
 8002dc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	b298      	uxth	r0, r3
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	440b      	add	r3, r1
 8002dda:	3336      	adds	r3, #54	; 0x36
 8002ddc:	4602      	mov	r2, r0
 8002dde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	440b      	add	r3, r1
 8002df0:	3303      	adds	r3, #3
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002df6:	7bfa      	ldrb	r2, [r7, #15]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	440b      	add	r3, r1
 8002e04:	3338      	adds	r3, #56	; 0x38
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e0a:	7bfa      	ldrb	r2, [r7, #15]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	440b      	add	r3, r1
 8002e18:	333c      	adds	r3, #60	; 0x3c
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e1e:	7bfa      	ldrb	r2, [r7, #15]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3340      	adds	r3, #64	; 0x40
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	3301      	adds	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d3ad      	bcc.n	8002d9e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	73fb      	strb	r3, [r7, #15]
 8002e46:	e044      	b.n	8002ed2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	440b      	add	r3, r1
 8002e56:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e5e:	7bfa      	ldrb	r2, [r7, #15]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002e86:	2200      	movs	r2, #0
 8002e88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e8a:	7bfa      	ldrb	r2, [r7, #15]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	440b      	add	r3, r1
 8002e98:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	440b      	add	r3, r1
 8002eae:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002eb6:	7bfa      	ldrb	r2, [r7, #15]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	440b      	add	r3, r1
 8002ec4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d3b5      	bcc.n	8002e48 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	687e      	ldr	r6, [r7, #4]
 8002ee4:	466d      	mov	r5, sp
 8002ee6:	f106 0410 	add.w	r4, r6, #16
 8002eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	602b      	str	r3, [r5, #0]
 8002ef2:	1d33      	adds	r3, r6, #4
 8002ef4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ef6:	6838      	ldr	r0, [r7, #0]
 8002ef8:	f003 fa30 	bl	800635c <USB_DevInit>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2202      	movs	r2, #2
 8002f06:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00d      	b.n	8002f2a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f005 fba1 	bl	800866a <USB_DevDisconnect>

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f32 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_PCD_Start+0x16>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e016      	b.n	8002f76 <HAL_PCD_Start+0x44>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 f9c5 	bl	80062e4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f00a fb68 	bl	800d632 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f005 fb75 	bl	8008656 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b088      	sub	sp, #32
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f005 fb77 	bl	800867e <USB_ReadInterrupts>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f9a:	d102      	bne.n	8002fa2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fb61 	bl	8003664 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f005 fb69 	bl	800867e <USB_ReadInterrupts>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb6:	d112      	bne.n	8002fde <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fca:	b292      	uxth	r2, r2
 8002fcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f00a f936 	bl	800d242 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f925 	bl	8003228 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f005 fb4b 	bl	800867e <USB_ReadInterrupts>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ff2:	d10b      	bne.n	800300c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003006:	b292      	uxth	r2, r2
 8003008:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f005 fb34 	bl	800867e <USB_ReadInterrupts>
 8003016:	4603      	mov	r3, r0
 8003018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800301c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003020:	d10b      	bne.n	800303a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800302a:	b29a      	uxth	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003034:	b292      	uxth	r2, r2
 8003036:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f005 fb1d 	bl	800867e <USB_ReadInterrupts>
 8003044:	4603      	mov	r3, r0
 8003046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800304a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304e:	d126      	bne.n	800309e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003058:	b29a      	uxth	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0204 	bic.w	r2, r2, #4
 8003062:	b292      	uxth	r2, r2
 8003064:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003070:	b29a      	uxth	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0208 	bic.w	r2, r2, #8
 800307a:	b292      	uxth	r2, r2
 800307c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f00a f917 	bl	800d2b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800308e:	b29a      	uxth	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003098:	b292      	uxth	r2, r2
 800309a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f005 faeb 	bl	800867e <USB_ReadInterrupts>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b2:	f040 8084 	bne.w	80031be <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	77fb      	strb	r3, [r7, #31]
 80030ba:	e011      	b.n	80030e0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	7ffb      	ldrb	r3, [r7, #31]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	441a      	add	r2, r3
 80030c8:	7ffb      	ldrb	r3, [r7, #31]
 80030ca:	8812      	ldrh	r2, [r2, #0]
 80030cc:	b292      	uxth	r2, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	f107 0120 	add.w	r1, r7, #32
 80030d4:	440b      	add	r3, r1
 80030d6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80030da:	7ffb      	ldrb	r3, [r7, #31]
 80030dc:	3301      	adds	r3, #1
 80030de:	77fb      	strb	r3, [r7, #31]
 80030e0:	7ffb      	ldrb	r3, [r7, #31]
 80030e2:	2b07      	cmp	r3, #7
 80030e4:	d9ea      	bls.n	80030bc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	b292      	uxth	r2, r2
 80030fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003106:	b29a      	uxth	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	b292      	uxth	r2, r2
 8003112:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003116:	bf00      	nop
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003120:	b29b      	uxth	r3, r3
 8003122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f6      	beq.n	8003118 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003132:	b29a      	uxth	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800313c:	b292      	uxth	r2, r2
 800313e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003142:	2300      	movs	r3, #0
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e010      	b.n	800316a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003148:	7ffb      	ldrb	r3, [r7, #31]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	4611      	mov	r1, r2
 8003150:	7ffa      	ldrb	r2, [r7, #31]
 8003152:	0092      	lsls	r2, r2, #2
 8003154:	440a      	add	r2, r1
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	f107 0120 	add.w	r1, r7, #32
 800315c:	440b      	add	r3, r1
 800315e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003162:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003164:	7ffb      	ldrb	r3, [r7, #31]
 8003166:	3301      	adds	r3, #1
 8003168:	77fb      	strb	r3, [r7, #31]
 800316a:	7ffb      	ldrb	r3, [r7, #31]
 800316c:	2b07      	cmp	r3, #7
 800316e:	d9eb      	bls.n	8003148 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003178:	b29a      	uxth	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0208 	orr.w	r2, r2, #8
 8003182:	b292      	uxth	r2, r2
 8003184:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003190:	b29a      	uxth	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800319a:	b292      	uxth	r2, r2
 800319c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0204 	orr.w	r2, r2, #4
 80031b2:	b292      	uxth	r2, r2
 80031b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f00a f861 	bl	800d280 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f005 fa5b 	bl	800867e <USB_ReadInterrupts>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d2:	d10e      	bne.n	80031f2 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031dc:	b29a      	uxth	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031e6:	b292      	uxth	r2, r2
 80031e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f00a f81a 	bl	800d226 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f005 fa41 	bl	800867e <USB_ReadInterrupts>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003206:	d10b      	bne.n	8003220 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800321a:	b292      	uxth	r2, r2
 800321c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003220:	bf00      	nop
 8003222:	3720      	adds	r7, #32
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_PCD_SetAddress+0x1a>
 800323e:	2302      	movs	r3, #2
 8003240:	e013      	b.n	800326a <HAL_PCD_SetAddress+0x42>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	4611      	mov	r1, r2
 800325a:	4618      	mov	r0, r3
 800325c:	f005 f9e8 	bl	8008630 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	4608      	mov	r0, r1
 800327c:	4611      	mov	r1, r2
 800327e:	461a      	mov	r2, r3
 8003280:	4603      	mov	r3, r0
 8003282:	70fb      	strb	r3, [r7, #3]
 8003284:	460b      	mov	r3, r1
 8003286:	803b      	strh	r3, [r7, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003294:	2b00      	cmp	r3, #0
 8003296:	da0e      	bge.n	80032b6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4413      	add	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	705a      	strb	r2, [r3, #1]
 80032b4:	e00e      	b.n	80032d4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	f003 0207 	and.w	r2, r3, #7
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	4413      	add	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80032e0:	883a      	ldrh	r2, [r7, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	78ba      	ldrb	r2, [r7, #2]
 80032ea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	785b      	ldrb	r3, [r3, #1]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d004      	beq.n	80032fe <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032fe:	78bb      	ldrb	r3, [r7, #2]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d102      	bne.n	800330a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_PCD_EP_Open+0xa6>
 8003314:	2302      	movs	r3, #2
 8003316:	e00e      	b.n	8003336 <HAL_PCD_EP_Open+0xc4>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68f9      	ldr	r1, [r7, #12]
 8003326:	4618      	mov	r0, r3
 8003328:	f003 f838 	bl	800639c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003334:	7afb      	ldrb	r3, [r7, #11]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800334a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800334e:	2b00      	cmp	r3, #0
 8003350:	da0e      	bge.n	8003370 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	705a      	strb	r2, [r3, #1]
 800336e:	e00e      	b.n	800338e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	f003 0207 	and.w	r2, r3, #7
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	b2da      	uxtb	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_PCD_EP_Close+0x6a>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e00e      	b.n	80033c6 <HAL_PCD_EP_Close+0x88>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68f9      	ldr	r1, [r7, #12]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f003 fb5a 	bl	8006a70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	460b      	mov	r3, r1
 80033dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033de:	7afb      	ldrb	r3, [r7, #11]
 80033e0:	f003 0207 	and.w	r2, r3, #7
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4413      	add	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2200      	movs	r2, #0
 8003406:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2200      	movs	r2, #0
 800340c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800340e:	7afb      	ldrb	r3, [r7, #11]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	b2da      	uxtb	r2, r3
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800341a:	7afb      	ldrb	r3, [r7, #11]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	2b00      	cmp	r3, #0
 8003422:	d106      	bne.n	8003432 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6979      	ldr	r1, [r7, #20]
 800342a:	4618      	mov	r0, r3
 800342c:	f003 fd0c 	bl	8006e48 <USB_EPStartXfer>
 8003430:	e005      	b.n	800343e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6979      	ldr	r1, [r7, #20]
 8003438:	4618      	mov	r0, r3
 800343a:	f003 fd05 	bl	8006e48 <USB_EPStartXfer>
  }

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	f003 0207 	and.w	r2, r3, #7
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	440b      	add	r3, r1
 8003466:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
 8003482:	460b      	mov	r3, r1
 8003484:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003486:	7afb      	ldrb	r3, [r7, #11]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4413      	add	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2200      	movs	r2, #0
 80034ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2201      	movs	r2, #1
 80034c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034c2:	7afb      	ldrb	r3, [r7, #11]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034ce:	7afb      	ldrb	r3, [r7, #11]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d106      	bne.n	80034e6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6979      	ldr	r1, [r7, #20]
 80034de:	4618      	mov	r0, r3
 80034e0:	f003 fcb2 	bl	8006e48 <USB_EPStartXfer>
 80034e4:	e005      	b.n	80034f2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6979      	ldr	r1, [r7, #20]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f003 fcab 	bl	8006e48 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	f003 0207 	and.w	r2, r3, #7
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	429a      	cmp	r2, r3
 8003514:	d901      	bls.n	800351a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e04c      	b.n	80035b4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800351a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800351e:	2b00      	cmp	r3, #0
 8003520:	da0e      	bge.n	8003540 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	705a      	strb	r2, [r3, #1]
 800353e:	e00c      	b.n	800355a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	b2da      	uxtb	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_PCD_EP_SetStall+0x7e>
 8003576:	2302      	movs	r3, #2
 8003578:	e01c      	b.n	80035b4 <HAL_PCD_EP_SetStall+0xb8>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68f9      	ldr	r1, [r7, #12]
 8003588:	4618      	mov	r0, r3
 800358a:	f004 ff54 	bl	8008436 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800358e:	78fb      	ldrb	r3, [r7, #3]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	2b00      	cmp	r3, #0
 8003596:	d108      	bne.n	80035aa <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80035a2:	4619      	mov	r1, r3
 80035a4:	4610      	mov	r0, r2
 80035a6:	f005 f879 	bl	800869c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	f003 020f 	and.w	r2, r3, #15
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d901      	bls.n	80035da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e040      	b.n	800365c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	da0e      	bge.n	8003600 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	4413      	add	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2201      	movs	r2, #1
 80035fc:	705a      	strb	r2, [r3, #1]
 80035fe:	e00e      	b.n	800361e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	f003 0207 	and.w	r2, r3, #7
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	b2da      	uxtb	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_PCD_EP_ClrStall+0x82>
 800363a:	2302      	movs	r3, #2
 800363c:	e00e      	b.n	800365c <HAL_PCD_EP_ClrStall+0xa0>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68f9      	ldr	r1, [r7, #12]
 800364c:	4618      	mov	r0, r3
 800364e:	f004 ff42 	bl	80084d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08e      	sub	sp, #56	; 0x38
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800366c:	e2ec      	b.n	8003c48 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003676:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003678:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f003 030f 	and.w	r3, r3, #15
 8003680:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003684:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003688:	2b00      	cmp	r3, #0
 800368a:	f040 8161 	bne.w	8003950 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800368e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	d152      	bne.n	800373e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80036a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a8:	81fb      	strh	r3, [r7, #14]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	89fb      	ldrh	r3, [r7, #14]
 80036b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3328      	adds	r3, #40	; 0x28
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	3302      	adds	r3, #2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	695a      	ldr	r2, [r3, #20]
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	441a      	add	r2, r3
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80036fc:	2100      	movs	r1, #0
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f009 fd77 	bl	800d1f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 829b 	beq.w	8003c48 <PCD_EP_ISR_Handler+0x5e4>
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f040 8296 	bne.w	8003c48 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003722:	b2db      	uxtb	r3, r3
 8003724:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003728:	b2da      	uxtb	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	b292      	uxth	r2, r2
 8003730:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800373c:	e284      	b.n	8003c48 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800374e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003754:	2b00      	cmp	r3, #0
 8003756:	d034      	beq.n	80037c2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003760:	b29b      	uxth	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	3306      	adds	r3, #6
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003796:	b29b      	uxth	r3, r3
 8003798:	f004 ffd0 	bl	800873c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80037a8:	4013      	ands	r3, r2
 80037aa:	823b      	strh	r3, [r7, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	8a3a      	ldrh	r2, [r7, #16]
 80037b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037b6:	b292      	uxth	r2, r2
 80037b8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f009 fcec 	bl	800d198 <HAL_PCD_SetupStageCallback>
 80037c0:	e242      	b.n	8003c48 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037c2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f280 823e 	bge.w	8003c48 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80037d8:	4013      	ands	r3, r2
 80037da:	83bb      	strh	r3, [r7, #28]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	8bba      	ldrh	r2, [r7, #28]
 80037e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037e6:	b292      	uxth	r2, r2
 80037e8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	3306      	adds	r3, #6
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d019      	beq.n	8003852 <PCD_EP_ISR_Handler+0x1ee>
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d015      	beq.n	8003852 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	6959      	ldr	r1, [r3, #20]
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003836:	b29b      	uxth	r3, r3
 8003838:	f004 ff80 	bl	800873c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	695a      	ldr	r2, [r3, #20]
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	441a      	add	r2, r3
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800384a:	2100      	movs	r1, #0
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f009 fcb5 	bl	800d1bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	b29b      	uxth	r3, r3
 800385a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800385e:	2b00      	cmp	r3, #0
 8003860:	f040 81f2 	bne.w	8003c48 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003872:	b29b      	uxth	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	4413      	add	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d112      	bne.n	80038b2 <PCD_EP_ISR_Handler+0x24e>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003896:	b29a      	uxth	r2, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	801a      	strh	r2, [r3, #0]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	801a      	strh	r2, [r3, #0]
 80038b0:	e02f      	b.n	8003912 <PCD_EP_ISR_Handler+0x2ae>
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b3e      	cmp	r3, #62	; 0x3e
 80038b8:	d813      	bhi.n	80038e2 <PCD_EP_ISR_Handler+0x27e>
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	633b      	str	r3, [r7, #48]	; 0x30
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <PCD_EP_ISR_Handler+0x270>
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	3301      	adds	r3, #1
 80038d2:	633b      	str	r3, [r7, #48]	; 0x30
 80038d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	029b      	lsls	r3, r3, #10
 80038da:	b29a      	uxth	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	801a      	strh	r2, [r3, #0]
 80038e0:	e017      	b.n	8003912 <PCD_EP_ISR_Handler+0x2ae>
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	633b      	str	r3, [r7, #48]	; 0x30
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <PCD_EP_ISR_Handler+0x298>
 80038f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f8:	3b01      	subs	r3, #1
 80038fa:	633b      	str	r3, [r7, #48]	; 0x30
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	b29b      	uxth	r3, r3
 8003900:	029b      	lsls	r3, r3, #10
 8003902:	b29b      	uxth	r3, r3
 8003904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800390c:	b29a      	uxth	r2, r3
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	b29b      	uxth	r3, r3
 800391a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003922:	827b      	strh	r3, [r7, #18]
 8003924:	8a7b      	ldrh	r3, [r7, #18]
 8003926:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800392a:	827b      	strh	r3, [r7, #18]
 800392c:	8a7b      	ldrh	r3, [r7, #18]
 800392e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003932:	827b      	strh	r3, [r7, #18]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	8a7b      	ldrh	r3, [r7, #18]
 800393a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800393e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800394a:	b29b      	uxth	r3, r3
 800394c:	8013      	strh	r3, [r2, #0]
 800394e:	e17b      	b.n	8003c48 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003962:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003966:	2b00      	cmp	r3, #0
 8003968:	f280 80ea 	bge.w	8003b40 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	461a      	mov	r2, r3
 8003972:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	b29a      	uxth	r2, r3
 800397e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003982:	4013      	ands	r3, r2
 8003984:	853b      	strh	r3, [r7, #40]	; 0x28
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003996:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800399a:	b292      	uxth	r2, r2
 800399c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800399e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4413      	add	r3, r2
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	7b1b      	ldrb	r3, [r3, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d122      	bne.n	8003a02 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	3306      	adds	r3, #6
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039e4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80039e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8087 	beq.w	8003afc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	6959      	ldr	r1, [r3, #20]
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	88da      	ldrh	r2, [r3, #6]
 80039fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039fc:	f004 fe9e 	bl	800873c <USB_ReadPMA>
 8003a00:	e07c      	b.n	8003afc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	78db      	ldrb	r3, [r3, #3]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d108      	bne.n	8003a1c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003a0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f927 	bl	8003c64 <HAL_PCD_EP_DB_Receive>
 8003a16:	4603      	mov	r3, r0
 8003a18:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003a1a:	e06f      	b.n	8003afc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a36:	847b      	strh	r3, [r7, #34]	; 0x22
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	441a      	add	r2, r3
 8003a46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d021      	beq.n	8003aba <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	461a      	mov	r2, r3
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a9e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003aa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d02a      	beq.n	8003afc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	6959      	ldr	r1, [r3, #20]
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	891a      	ldrh	r2, [r3, #8]
 8003ab2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ab4:	f004 fe42 	bl	800873c <USB_ReadPMA>
 8003ab8:	e020      	b.n	8003afc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	3306      	adds	r3, #6
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003ae4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d008      	beq.n	8003afc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	6959      	ldr	r1, [r3, #20]
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	895a      	ldrh	r2, [r3, #10]
 8003af6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003af8:	f004 fe20 	bl	800873c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b02:	441a      	add	r2, r3
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b0e:	441a      	add	r2, r3
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <PCD_EP_ISR_Handler+0x4c2>
 8003b1c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d206      	bcs.n	8003b34 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f009 fb45 	bl	800d1bc <HAL_PCD_DataOutStageCallback>
 8003b32:	e005      	b.n	8003b40 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f003 f984 	bl	8006e48 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003b40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d07e      	beq.n	8003c48 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003b4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b78:	843b      	strh	r3, [r7, #32]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	441a      	add	r2, r3
 8003b88:	8c3b      	ldrh	r3, [r7, #32]
 8003b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	78db      	ldrb	r3, [r3, #3]
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d00c      	beq.n	8003bb8 <PCD_EP_ISR_Handler+0x554>
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	78db      	ldrb	r3, [r3, #3]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d146      	bne.n	8003c3c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003bae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d141      	bne.n	8003c3c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	3302      	adds	r3, #2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	8bfb      	ldrh	r3, [r7, #30]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d906      	bls.n	8003bfa <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	699a      	ldr	r2, [r3, #24]
 8003bf0:	8bfb      	ldrh	r3, [r7, #30]
 8003bf2:	1ad2      	subs	r2, r2, r3
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	619a      	str	r2, [r3, #24]
 8003bf8:	e002      	b.n	8003c00 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d106      	bne.n	8003c16 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f009 faef 	bl	800d1f2 <HAL_PCD_DataInStageCallback>
 8003c14:	e018      	b.n	8003c48 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	8bfb      	ldrh	r3, [r7, #30]
 8003c1c:	441a      	add	r2, r3
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	8bfb      	ldrh	r3, [r7, #30]
 8003c28:	441a      	add	r2, r3
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c34:	4618      	mov	r0, r3
 8003c36:	f003 f907 	bl	8006e48 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003c3a:	e005      	b.n	8003c48 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003c3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c3e:	461a      	mov	r2, r3
 8003c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f91b 	bl	8003e7e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	b21b      	sxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f6ff ad0a 	blt.w	800366e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3738      	adds	r7, #56	; 0x38
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d07e      	beq.n	8003d7a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4413      	add	r3, r2
 8003c90:	3302      	adds	r3, #2
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ca4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	8b7b      	ldrh	r3, [r7, #26]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d306      	bcc.n	8003cbe <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	699a      	ldr	r2, [r3, #24]
 8003cb4:	8b7b      	ldrh	r3, [r7, #26]
 8003cb6:	1ad2      	subs	r2, r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	619a      	str	r2, [r3, #24]
 8003cbc:	e002      	b.n	8003cc4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d123      	bne.n	8003d14 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce6:	833b      	strh	r3, [r7, #24]
 8003ce8:	8b3b      	ldrh	r3, [r7, #24]
 8003cea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003cee:	833b      	strh	r3, [r7, #24]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	441a      	add	r2, r3
 8003cfe:	8b3b      	ldrh	r3, [r7, #24]
 8003d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d01f      	beq.n	8003d5e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d38:	82fb      	strh	r3, [r7, #22]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	441a      	add	r2, r3
 8003d48:	8afb      	ldrh	r3, [r7, #22]
 8003d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d5e:	8b7b      	ldrh	r3, [r7, #26]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8087 	beq.w	8003e74 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6959      	ldr	r1, [r3, #20]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	891a      	ldrh	r2, [r3, #8]
 8003d72:	8b7b      	ldrh	r3, [r7, #26]
 8003d74:	f004 fce2 	bl	800873c <USB_ReadPMA>
 8003d78:	e07c      	b.n	8003e74 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3306      	adds	r3, #6
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003da2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	699a      	ldr	r2, [r3, #24]
 8003da8:	8b7b      	ldrh	r3, [r7, #26]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d306      	bcc.n	8003dbc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	8b7b      	ldrh	r3, [r7, #26]
 8003db4:	1ad2      	subs	r2, r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	619a      	str	r2, [r3, #24]
 8003dba:	e002      	b.n	8003dc2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d123      	bne.n	8003e12 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de4:	83fb      	strh	r3, [r7, #30]
 8003de6:	8bfb      	ldrh	r3, [r7, #30]
 8003de8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003dec:	83fb      	strh	r3, [r7, #30]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	441a      	add	r2, r3
 8003dfc:	8bfb      	ldrh	r3, [r7, #30]
 8003dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d11f      	bne.n	8003e5c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e36:	83bb      	strh	r3, [r7, #28]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	441a      	add	r2, r3
 8003e46:	8bbb      	ldrh	r3, [r7, #28]
 8003e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e5c:	8b7b      	ldrh	r3, [r7, #26]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	6959      	ldr	r1, [r3, #20]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	895a      	ldrh	r2, [r3, #10]
 8003e6e:	8b7b      	ldrh	r3, [r7, #26]
 8003e70:	f004 fc64 	bl	800873c <USB_ReadPMA>
    }
  }

  return count;
 8003e74:	8b7b      	ldrh	r3, [r7, #26]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b0a2      	sub	sp, #136	; 0x88
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 81c7 	beq.w	8004226 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4413      	add	r3, r2
 8003eac:	3302      	adds	r3, #2
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ec0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	699a      	ldr	r2, [r3, #24]
 8003ec8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d907      	bls.n	8003ee0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	699a      	ldr	r2, [r3, #24]
 8003ed4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ed8:	1ad2      	subs	r2, r2, r3
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	619a      	str	r2, [r3, #24]
 8003ede:	e002      	b.n	8003ee6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 80b9 	bne.w	8004062 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	785b      	ldrb	r3, [r3, #1]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d126      	bne.n	8003f46 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	4413      	add	r3, r2
 8003f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	011a      	lsls	r2, r3, #4
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	4413      	add	r3, r2
 8003f1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	801a      	strh	r2, [r3, #0]
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	801a      	strh	r2, [r3, #0]
 8003f44:	e01a      	b.n	8003f7c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	785b      	ldrb	r3, [r3, #1]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d116      	bne.n	8003f7c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	461a      	mov	r2, r3
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	4413      	add	r3, r2
 8003f64:	633b      	str	r3, [r7, #48]	; 0x30
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	011a      	lsls	r2, r3, #4
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	4413      	add	r3, r2
 8003f70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f78:	2200      	movs	r2, #0
 8003f7a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	623b      	str	r3, [r7, #32]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	785b      	ldrb	r3, [r3, #1]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d126      	bne.n	8003fd8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	011a      	lsls	r2, r3, #4
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	4413      	add	r3, r2
 8003fac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	801a      	strh	r2, [r3, #0]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	801a      	strh	r2, [r3, #0]
 8003fd6:	e017      	b.n	8004008 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	785b      	ldrb	r3, [r3, #1]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d113      	bne.n	8004008 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	4413      	add	r3, r2
 8003ff0:	623b      	str	r3, [r7, #32]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	011a      	lsls	r2, r3, #4
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	2200      	movs	r2, #0
 8004006:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	4619      	mov	r1, r3
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f009 f8ef 	bl	800d1f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 82d4 	beq.w	80045c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29b      	uxth	r3, r3
 8004032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403a:	827b      	strh	r3, [r7, #18]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	441a      	add	r2, r3
 800404a:	8a7b      	ldrh	r3, [r7, #18]
 800404c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800405c:	b29b      	uxth	r3, r3
 800405e:	8013      	strh	r3, [r2, #0]
 8004060:	e2b2      	b.n	80045c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d021      	beq.n	80040b0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	b29b      	uxth	r3, r3
 800407e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	441a      	add	r2, r3
 8004098:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800409c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	f040 8286 	bne.w	80045c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040c4:	441a      	add	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	69da      	ldr	r2, [r3, #28]
 80040ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040d2:	441a      	add	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	6a1a      	ldr	r2, [r3, #32]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d309      	bcc.n	80040f8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	6a1a      	ldr	r2, [r3, #32]
 80040ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f0:	1ad2      	subs	r2, r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	621a      	str	r2, [r3, #32]
 80040f6:	e015      	b.n	8004124 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d107      	bne.n	8004110 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8004100:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004104:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800410e:	e009      	b.n	8004124 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2200      	movs	r2, #0
 8004122:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	785b      	ldrb	r3, [r3, #1]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d155      	bne.n	80041d8 <HAL_PCD_EP_DB_Transmit+0x35a>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	63bb      	str	r3, [r7, #56]	; 0x38
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800413a:	b29b      	uxth	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004140:	4413      	add	r3, r2
 8004142:	63bb      	str	r3, [r7, #56]	; 0x38
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	011a      	lsls	r2, r3, #4
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	4413      	add	r3, r2
 800414e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004152:	637b      	str	r3, [r7, #52]	; 0x34
 8004154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004156:	2b00      	cmp	r3, #0
 8004158:	d112      	bne.n	8004180 <HAL_PCD_EP_DB_Transmit+0x302>
 800415a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	b29b      	uxth	r3, r3
 8004160:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004164:	b29a      	uxth	r2, r3
 8004166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004168:	801a      	strh	r2, [r3, #0]
 800416a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004178:	b29a      	uxth	r2, r3
 800417a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417c:	801a      	strh	r2, [r3, #0]
 800417e:	e047      	b.n	8004210 <HAL_PCD_EP_DB_Transmit+0x392>
 8004180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004182:	2b3e      	cmp	r3, #62	; 0x3e
 8004184:	d811      	bhi.n	80041aa <HAL_PCD_EP_DB_Transmit+0x32c>
 8004186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004188:	085b      	lsrs	r3, r3, #1
 800418a:	64bb      	str	r3, [r7, #72]	; 0x48
 800418c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_PCD_EP_DB_Transmit+0x31e>
 8004196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004198:	3301      	adds	r3, #1
 800419a:	64bb      	str	r3, [r7, #72]	; 0x48
 800419c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800419e:	b29b      	uxth	r3, r3
 80041a0:	029b      	lsls	r3, r3, #10
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a6:	801a      	strh	r2, [r3, #0]
 80041a8:	e032      	b.n	8004210 <HAL_PCD_EP_DB_Transmit+0x392>
 80041aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80041b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <HAL_PCD_EP_DB_Transmit+0x342>
 80041ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041bc:	3b01      	subs	r3, #1
 80041be:	64bb      	str	r3, [r7, #72]	; 0x48
 80041c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	029b      	lsls	r3, r3, #10
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d4:	801a      	strh	r2, [r3, #0]
 80041d6:	e01b      	b.n	8004210 <HAL_PCD_EP_DB_Transmit+0x392>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	785b      	ldrb	r3, [r3, #1]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d117      	bne.n	8004210 <HAL_PCD_EP_DB_Transmit+0x392>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	643b      	str	r3, [r7, #64]	; 0x40
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f4:	4413      	add	r3, r2
 80041f6:	643b      	str	r3, [r7, #64]	; 0x40
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	011a      	lsls	r2, r3, #4
 80041fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004200:	4413      	add	r3, r2
 8004202:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800420a:	b29a      	uxth	r2, r3
 800420c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	6959      	ldr	r1, [r3, #20]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	891a      	ldrh	r2, [r3, #8]
 800421c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800421e:	b29b      	uxth	r3, r3
 8004220:	f004 fa47 	bl	80086b2 <USB_WritePMA>
 8004224:	e1d0      	b.n	80045c8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800422e:	b29b      	uxth	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4413      	add	r3, r2
 800423a:	3306      	adds	r3, #6
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800424e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800425a:	429a      	cmp	r2, r3
 800425c:	d307      	bcc.n	800426e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004266:	1ad2      	subs	r2, r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	619a      	str	r2, [r3, #24]
 800426c:	e002      	b.n	8004274 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2200      	movs	r2, #0
 8004272:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f040 80c4 	bne.w	8004406 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	785b      	ldrb	r3, [r3, #1]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d126      	bne.n	80042d4 <HAL_PCD_EP_DB_Transmit+0x456>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004294:	b29b      	uxth	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429a:	4413      	add	r3, r2
 800429c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	011a      	lsls	r2, r3, #4
 80042a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a6:	4413      	add	r3, r2
 80042a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80042ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042bc:	801a      	strh	r2, [r3, #0]
 80042be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042d0:	801a      	strh	r2, [r3, #0]
 80042d2:	e01a      	b.n	800430a <HAL_PCD_EP_DB_Transmit+0x48c>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	785b      	ldrb	r3, [r3, #1]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d116      	bne.n	800430a <HAL_PCD_EP_DB_Transmit+0x48c>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	677b      	str	r3, [r7, #116]	; 0x74
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f0:	4413      	add	r3, r2
 80042f2:	677b      	str	r3, [r7, #116]	; 0x74
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	011a      	lsls	r2, r3, #4
 80042fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042fc:	4413      	add	r3, r2
 80042fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004302:	673b      	str	r3, [r7, #112]	; 0x70
 8004304:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004306:	2200      	movs	r2, #0
 8004308:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	785b      	ldrb	r3, [r3, #1]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d12f      	bne.n	8004378 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004328:	b29b      	uxth	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004330:	4413      	add	r3, r2
 8004332:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	011a      	lsls	r2, r3, #4
 800433c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004340:	4413      	add	r3, r2
 8004342:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004346:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800434a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	b29b      	uxth	r3, r3
 8004352:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004356:	b29a      	uxth	r2, r3
 8004358:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800436a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800436e:	b29a      	uxth	r2, r3
 8004370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004374:	801a      	strh	r2, [r3, #0]
 8004376:	e017      	b.n	80043a8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	785b      	ldrb	r3, [r3, #1]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d113      	bne.n	80043a8 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004388:	b29b      	uxth	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800438e:	4413      	add	r3, r2
 8004390:	67bb      	str	r3, [r7, #120]	; 0x78
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	011a      	lsls	r2, r3, #4
 8004398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800439a:	4413      	add	r3, r2
 800439c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043a4:	2200      	movs	r2, #0
 80043a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	4619      	mov	r1, r3
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f008 ff1f 	bl	800d1f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f040 8104 	bne.w	80045c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	441a      	add	r2, r3
 80043ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80043f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004400:	b29b      	uxth	r3, r3
 8004402:	8013      	strh	r3, [r2, #0]
 8004404:	e0e0      	b.n	80045c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d121      	bne.n	8004454 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	b29b      	uxth	r3, r3
 8004422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	441a      	add	r2, r3
 800443c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800444c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004450:	b29b      	uxth	r3, r3
 8004452:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800445a:	2b01      	cmp	r3, #1
 800445c:	f040 80b4 	bne.w	80045c8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	695a      	ldr	r2, [r3, #20]
 8004464:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004468:	441a      	add	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004476:	441a      	add	r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	6a1a      	ldr	r2, [r3, #32]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	429a      	cmp	r2, r3
 8004486:	d309      	bcc.n	800449c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	6a1a      	ldr	r2, [r3, #32]
 8004492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004494:	1ad2      	subs	r2, r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	621a      	str	r2, [r3, #32]
 800449a:	e015      	b.n	80044c8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d107      	bne.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80044a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80044b2:	e009      	b.n	80044c8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2200      	movs	r2, #0
 80044be:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	667b      	str	r3, [r7, #100]	; 0x64
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	785b      	ldrb	r3, [r3, #1]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d155      	bne.n	8004582 <HAL_PCD_EP_DB_Transmit+0x704>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ea:	4413      	add	r3, r2
 80044ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	011a      	lsls	r2, r3, #4
 80044f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044f6:	4413      	add	r3, r2
 80044f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80044fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004500:	2b00      	cmp	r3, #0
 8004502:	d112      	bne.n	800452a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004504:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800450e:	b29a      	uxth	r2, r3
 8004510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004512:	801a      	strh	r2, [r3, #0]
 8004514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	b29b      	uxth	r3, r3
 800451a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800451e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004522:	b29a      	uxth	r2, r3
 8004524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004526:	801a      	strh	r2, [r3, #0]
 8004528:	e044      	b.n	80045b4 <HAL_PCD_EP_DB_Transmit+0x736>
 800452a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800452c:	2b3e      	cmp	r3, #62	; 0x3e
 800452e:	d811      	bhi.n	8004554 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004532:	085b      	lsrs	r3, r3, #1
 8004534:	657b      	str	r3, [r7, #84]	; 0x54
 8004536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004542:	3301      	adds	r3, #1
 8004544:	657b      	str	r3, [r7, #84]	; 0x54
 8004546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004548:	b29b      	uxth	r3, r3
 800454a:	029b      	lsls	r3, r3, #10
 800454c:	b29a      	uxth	r2, r3
 800454e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004550:	801a      	strh	r2, [r3, #0]
 8004552:	e02f      	b.n	80045b4 <HAL_PCD_EP_DB_Transmit+0x736>
 8004554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	657b      	str	r3, [r7, #84]	; 0x54
 800455a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004566:	3b01      	subs	r3, #1
 8004568:	657b      	str	r3, [r7, #84]	; 0x54
 800456a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800456c:	b29b      	uxth	r3, r3
 800456e:	029b      	lsls	r3, r3, #10
 8004570:	b29b      	uxth	r3, r3
 8004572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800457a:	b29a      	uxth	r2, r3
 800457c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800457e:	801a      	strh	r2, [r3, #0]
 8004580:	e018      	b.n	80045b4 <HAL_PCD_EP_DB_Transmit+0x736>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d114      	bne.n	80045b4 <HAL_PCD_EP_DB_Transmit+0x736>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004598:	4413      	add	r3, r2
 800459a:	667b      	str	r3, [r7, #100]	; 0x64
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	011a      	lsls	r2, r3, #4
 80045a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045a4:	4413      	add	r3, r2
 80045a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045aa:	663b      	str	r3, [r7, #96]	; 0x60
 80045ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045b2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	6959      	ldr	r1, [r3, #20]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	895a      	ldrh	r2, [r3, #10]
 80045c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	f004 f875 	bl	80086b2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e2:	823b      	strh	r3, [r7, #16]
 80045e4:	8a3b      	ldrh	r3, [r7, #16]
 80045e6:	f083 0310 	eor.w	r3, r3, #16
 80045ea:	823b      	strh	r3, [r7, #16]
 80045ec:	8a3b      	ldrh	r3, [r7, #16]
 80045ee:	f083 0320 	eor.w	r3, r3, #32
 80045f2:	823b      	strh	r3, [r7, #16]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	441a      	add	r2, r3
 8004602:	8a3b      	ldrh	r3, [r7, #16]
 8004604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800460c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004614:	b29b      	uxth	r3, r3
 8004616:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3788      	adds	r7, #136	; 0x88
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004622:	b480      	push	{r7}
 8004624:	b087      	sub	sp, #28
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	607b      	str	r3, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	817b      	strh	r3, [r7, #10]
 8004630:	4613      	mov	r3, r2
 8004632:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004634:	897b      	ldrh	r3, [r7, #10]
 8004636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00b      	beq.n	8004658 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004640:	897b      	ldrh	r3, [r7, #10]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	e009      	b.n	800466c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004658:	897a      	ldrh	r2, [r7, #10]
 800465a:	4613      	mov	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4413      	add	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800466c:	893b      	ldrh	r3, [r7, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d107      	bne.n	8004682 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2200      	movs	r2, #0
 8004676:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	b29a      	uxth	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	80da      	strh	r2, [r3, #6]
 8004680:	e00b      	b.n	800469a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2201      	movs	r2, #1
 8004686:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	b29a      	uxth	r2, r3
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	0c1b      	lsrs	r3, r3, #16
 8004694:	b29a      	uxth	r2, r3
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	371c      	adds	r7, #28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
	...

080046a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e26c      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8087 	beq.w	80047d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046c8:	4b92      	ldr	r3, [pc, #584]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 030c 	and.w	r3, r3, #12
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d00c      	beq.n	80046ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046d4:	4b8f      	ldr	r3, [pc, #572]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d112      	bne.n	8004706 <HAL_RCC_OscConfig+0x5e>
 80046e0:	4b8c      	ldr	r3, [pc, #560]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ec:	d10b      	bne.n	8004706 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ee:	4b89      	ldr	r3, [pc, #548]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d06c      	beq.n	80047d4 <HAL_RCC_OscConfig+0x12c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d168      	bne.n	80047d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e246      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470e:	d106      	bne.n	800471e <HAL_RCC_OscConfig+0x76>
 8004710:	4b80      	ldr	r3, [pc, #512]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a7f      	ldr	r2, [pc, #508]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	e02e      	b.n	800477c <HAL_RCC_OscConfig+0xd4>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0x98>
 8004726:	4b7b      	ldr	r3, [pc, #492]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a7a      	ldr	r2, [pc, #488]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 800472c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	4b78      	ldr	r3, [pc, #480]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a77      	ldr	r2, [pc, #476]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e01d      	b.n	800477c <HAL_RCC_OscConfig+0xd4>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004748:	d10c      	bne.n	8004764 <HAL_RCC_OscConfig+0xbc>
 800474a:	4b72      	ldr	r3, [pc, #456]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a71      	ldr	r2, [pc, #452]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b6f      	ldr	r3, [pc, #444]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a6e      	ldr	r2, [pc, #440]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 800475c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	e00b      	b.n	800477c <HAL_RCC_OscConfig+0xd4>
 8004764:	4b6b      	ldr	r3, [pc, #428]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a6a      	ldr	r2, [pc, #424]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 800476a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4b68      	ldr	r3, [pc, #416]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a67      	ldr	r2, [pc, #412]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800477a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d013      	beq.n	80047ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fd ff42 	bl	800260c <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478c:	f7fd ff3e 	bl	800260c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e1fa      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479e:	4b5d      	ldr	r3, [pc, #372]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0xe4>
 80047aa:	e014      	b.n	80047d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fd ff2e 	bl	800260c <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b4:	f7fd ff2a 	bl	800260c <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	; 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e1e6      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c6:	4b53      	ldr	r3, [pc, #332]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x10c>
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d063      	beq.n	80048aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047e2:	4b4c      	ldr	r3, [pc, #304]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f003 030c 	and.w	r3, r3, #12
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047ee:	4b49      	ldr	r3, [pc, #292]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d11c      	bne.n	8004834 <HAL_RCC_OscConfig+0x18c>
 80047fa:	4b46      	ldr	r3, [pc, #280]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d116      	bne.n	8004834 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004806:	4b43      	ldr	r3, [pc, #268]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_RCC_OscConfig+0x176>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d001      	beq.n	800481e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e1ba      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481e:	4b3d      	ldr	r3, [pc, #244]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4939      	ldr	r1, [pc, #228]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 800482e:	4313      	orrs	r3, r2
 8004830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004832:	e03a      	b.n	80048aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d020      	beq.n	800487e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800483c:	4b36      	ldr	r3, [pc, #216]	; (8004918 <HAL_RCC_OscConfig+0x270>)
 800483e:	2201      	movs	r2, #1
 8004840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004842:	f7fd fee3 	bl	800260c <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484a:	f7fd fedf 	bl	800260c <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e19b      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485c:	4b2d      	ldr	r3, [pc, #180]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f0      	beq.n	800484a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004868:	4b2a      	ldr	r3, [pc, #168]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4927      	ldr	r1, [pc, #156]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 8004878:	4313      	orrs	r3, r2
 800487a:	600b      	str	r3, [r1, #0]
 800487c:	e015      	b.n	80048aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800487e:	4b26      	ldr	r3, [pc, #152]	; (8004918 <HAL_RCC_OscConfig+0x270>)
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004884:	f7fd fec2 	bl	800260c <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800488c:	f7fd febe 	bl	800260c <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e17a      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489e:	4b1d      	ldr	r3, [pc, #116]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f0      	bne.n	800488c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d03a      	beq.n	800492c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d019      	beq.n	80048f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048be:	4b17      	ldr	r3, [pc, #92]	; (800491c <HAL_RCC_OscConfig+0x274>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c4:	f7fd fea2 	bl	800260c <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048cc:	f7fd fe9e 	bl	800260c <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e15a      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048de:	4b0d      	ldr	r3, [pc, #52]	; (8004914 <HAL_RCC_OscConfig+0x26c>)
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048ea:	2001      	movs	r0, #1
 80048ec:	f000 fb0a 	bl	8004f04 <RCC_Delay>
 80048f0:	e01c      	b.n	800492c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f2:	4b0a      	ldr	r3, [pc, #40]	; (800491c <HAL_RCC_OscConfig+0x274>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f8:	f7fd fe88 	bl	800260c <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048fe:	e00f      	b.n	8004920 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004900:	f7fd fe84 	bl	800260c <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d908      	bls.n	8004920 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e140      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000
 8004918:	42420000 	.word	0x42420000
 800491c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004920:	4b9e      	ldr	r3, [pc, #632]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e9      	bne.n	8004900 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 80a6 	beq.w	8004a86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800493a:	2300      	movs	r3, #0
 800493c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800493e:	4b97      	ldr	r3, [pc, #604]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10d      	bne.n	8004966 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800494a:	4b94      	ldr	r3, [pc, #592]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	4a93      	ldr	r2, [pc, #588]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004954:	61d3      	str	r3, [r2, #28]
 8004956:	4b91      	ldr	r3, [pc, #580]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004962:	2301      	movs	r3, #1
 8004964:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004966:	4b8e      	ldr	r3, [pc, #568]	; (8004ba0 <HAL_RCC_OscConfig+0x4f8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d118      	bne.n	80049a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004972:	4b8b      	ldr	r3, [pc, #556]	; (8004ba0 <HAL_RCC_OscConfig+0x4f8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a8a      	ldr	r2, [pc, #552]	; (8004ba0 <HAL_RCC_OscConfig+0x4f8>)
 8004978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800497e:	f7fd fe45 	bl	800260c <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004986:	f7fd fe41 	bl	800260c <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b64      	cmp	r3, #100	; 0x64
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e0fd      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004998:	4b81      	ldr	r3, [pc, #516]	; (8004ba0 <HAL_RCC_OscConfig+0x4f8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d106      	bne.n	80049ba <HAL_RCC_OscConfig+0x312>
 80049ac:	4b7b      	ldr	r3, [pc, #492]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	4a7a      	ldr	r2, [pc, #488]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	6213      	str	r3, [r2, #32]
 80049b8:	e02d      	b.n	8004a16 <HAL_RCC_OscConfig+0x36e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10c      	bne.n	80049dc <HAL_RCC_OscConfig+0x334>
 80049c2:	4b76      	ldr	r3, [pc, #472]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	4a75      	ldr	r2, [pc, #468]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049c8:	f023 0301 	bic.w	r3, r3, #1
 80049cc:	6213      	str	r3, [r2, #32]
 80049ce:	4b73      	ldr	r3, [pc, #460]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	4a72      	ldr	r2, [pc, #456]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049d4:	f023 0304 	bic.w	r3, r3, #4
 80049d8:	6213      	str	r3, [r2, #32]
 80049da:	e01c      	b.n	8004a16 <HAL_RCC_OscConfig+0x36e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d10c      	bne.n	80049fe <HAL_RCC_OscConfig+0x356>
 80049e4:	4b6d      	ldr	r3, [pc, #436]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	4a6c      	ldr	r2, [pc, #432]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049ea:	f043 0304 	orr.w	r3, r3, #4
 80049ee:	6213      	str	r3, [r2, #32]
 80049f0:	4b6a      	ldr	r3, [pc, #424]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	4a69      	ldr	r2, [pc, #420]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	6213      	str	r3, [r2, #32]
 80049fc:	e00b      	b.n	8004a16 <HAL_RCC_OscConfig+0x36e>
 80049fe:	4b67      	ldr	r3, [pc, #412]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	4a66      	ldr	r2, [pc, #408]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a04:	f023 0301 	bic.w	r3, r3, #1
 8004a08:	6213      	str	r3, [r2, #32]
 8004a0a:	4b64      	ldr	r3, [pc, #400]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	4a63      	ldr	r2, [pc, #396]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a10:	f023 0304 	bic.w	r3, r3, #4
 8004a14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d015      	beq.n	8004a4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a1e:	f7fd fdf5 	bl	800260c <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a24:	e00a      	b.n	8004a3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a26:	f7fd fdf1 	bl	800260c <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e0ab      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3c:	4b57      	ldr	r3, [pc, #348]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0ee      	beq.n	8004a26 <HAL_RCC_OscConfig+0x37e>
 8004a48:	e014      	b.n	8004a74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4a:	f7fd fddf 	bl	800260c <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a50:	e00a      	b.n	8004a68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a52:	f7fd fddb 	bl	800260c <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e095      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a68:	4b4c      	ldr	r3, [pc, #304]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1ee      	bne.n	8004a52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d105      	bne.n	8004a86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7a:	4b48      	ldr	r3, [pc, #288]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	4a47      	ldr	r2, [pc, #284]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 8081 	beq.w	8004b92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a90:	4b42      	ldr	r3, [pc, #264]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f003 030c 	and.w	r3, r3, #12
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d061      	beq.n	8004b60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d146      	bne.n	8004b32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa4:	4b3f      	ldr	r3, [pc, #252]	; (8004ba4 <HAL_RCC_OscConfig+0x4fc>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aaa:	f7fd fdaf 	bl	800260c <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab2:	f7fd fdab 	bl	800260c <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e067      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ac4:	4b35      	ldr	r3, [pc, #212]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f0      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad8:	d108      	bne.n	8004aec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ada:	4b30      	ldr	r3, [pc, #192]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	492d      	ldr	r1, [pc, #180]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aec:	4b2b      	ldr	r3, [pc, #172]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a19      	ldr	r1, [r3, #32]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	430b      	orrs	r3, r1
 8004afe:	4927      	ldr	r1, [pc, #156]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b04:	4b27      	ldr	r3, [pc, #156]	; (8004ba4 <HAL_RCC_OscConfig+0x4fc>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0a:	f7fd fd7f 	bl	800260c <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b12:	f7fd fd7b 	bl	800260c <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e037      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b24:	4b1d      	ldr	r3, [pc, #116]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCC_OscConfig+0x46a>
 8004b30:	e02f      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b32:	4b1c      	ldr	r3, [pc, #112]	; (8004ba4 <HAL_RCC_OscConfig+0x4fc>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b38:	f7fd fd68 	bl	800260c <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b40:	f7fd fd64 	bl	800260c <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e020      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x498>
 8004b5e:	e018      	b.n	8004b92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e013      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <HAL_RCC_OscConfig+0x4f4>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d106      	bne.n	8004b8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d001      	beq.n	8004b92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	40007000 	.word	0x40007000
 8004ba4:	42420060 	.word	0x42420060

08004ba8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0d0      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bbc:	4b6a      	ldr	r3, [pc, #424]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d910      	bls.n	8004bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bca:	4b67      	ldr	r3, [pc, #412]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 0207 	bic.w	r2, r3, #7
 8004bd2:	4965      	ldr	r1, [pc, #404]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bda:	4b63      	ldr	r3, [pc, #396]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0b8      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d020      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c04:	4b59      	ldr	r3, [pc, #356]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	4a58      	ldr	r2, [pc, #352]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c1c:	4b53      	ldr	r3, [pc, #332]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4a52      	ldr	r2, [pc, #328]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c28:	4b50      	ldr	r3, [pc, #320]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	494d      	ldr	r1, [pc, #308]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d040      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4e:	4b47      	ldr	r3, [pc, #284]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d115      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e07f      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d107      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c66:	4b41      	ldr	r3, [pc, #260]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e073      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c76:	4b3d      	ldr	r3, [pc, #244]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e06b      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c86:	4b39      	ldr	r3, [pc, #228]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4936      	ldr	r1, [pc, #216]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c98:	f7fd fcb8 	bl	800260c <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca0:	f7fd fcb4 	bl	800260c <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e053      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	4b2d      	ldr	r3, [pc, #180]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f003 020c 	and.w	r2, r3, #12
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1eb      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d210      	bcs.n	8004cf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 0207 	bic.w	r2, r3, #7
 8004cde:	4922      	ldr	r1, [pc, #136]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce6:	4b20      	ldr	r3, [pc, #128]	; (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e032      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d04:	4b19      	ldr	r3, [pc, #100]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4916      	ldr	r1, [pc, #88]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d22:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	490e      	ldr	r1, [pc, #56]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d36:	f000 f821 	bl	8004d7c <HAL_RCC_GetSysClockFreq>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	490a      	ldr	r1, [pc, #40]	; (8004d70 <HAL_RCC_ClockConfig+0x1c8>)
 8004d48:	5ccb      	ldrb	r3, [r1, r3]
 8004d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4e:	4a09      	ldr	r2, [pc, #36]	; (8004d74 <HAL_RCC_ClockConfig+0x1cc>)
 8004d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d52:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <HAL_RCC_ClockConfig+0x1d0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fd faf8 	bl	800234c <HAL_InitTick>

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40022000 	.word	0x40022000
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	0800debc 	.word	0x0800debc
 8004d74:	20000010 	.word	0x20000010
 8004d78:	20000014 	.word	0x20000014

08004d7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d7c:	b490      	push	{r4, r7}
 8004d7e:	b08a      	sub	sp, #40	; 0x28
 8004d80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d82:	4b2a      	ldr	r3, [pc, #168]	; (8004e2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d84:	1d3c      	adds	r4, r7, #4
 8004d86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d8c:	f240 2301 	movw	r3, #513	; 0x201
 8004d90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	2300      	movs	r3, #0
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004da6:	4b22      	ldr	r3, [pc, #136]	; (8004e30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d002      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x40>
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x46>
 8004dba:	e02d      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dbc:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dbe:	623b      	str	r3, [r7, #32]
      break;
 8004dc0:	e02d      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	0c9b      	lsrs	r3, r3, #18
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004dce:	4413      	add	r3, r2
 8004dd0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004dd4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d013      	beq.n	8004e08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004de0:	4b13      	ldr	r3, [pc, #76]	; (8004e30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	0c5b      	lsrs	r3, r3, #17
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004dee:	4413      	add	r3, r2
 8004df0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004df4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	4a0e      	ldr	r2, [pc, #56]	; (8004e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dfa:	fb02 f203 	mul.w	r2, r2, r3
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
 8004e06:	e004      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	4a0b      	ldr	r2, [pc, #44]	; (8004e38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e0c:	fb02 f303 	mul.w	r3, r2, r3
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	623b      	str	r3, [r7, #32]
      break;
 8004e16:	e002      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e18:	4b08      	ldr	r3, [pc, #32]	; (8004e3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e1a:	623b      	str	r3, [r7, #32]
      break;
 8004e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3728      	adds	r7, #40	; 0x28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc90      	pop	{r4, r7}
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	0800d94c 	.word	0x0800d94c
 8004e30:	40021000 	.word	0x40021000
 8004e34:	00f42400 	.word	0x00f42400
 8004e38:	003d0900 	.word	0x003d0900
 8004e3c:	007a1200 	.word	0x007a1200

08004e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e44:	4b02      	ldr	r3, [pc, #8]	; (8004e50 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e46:	681b      	ldr	r3, [r3, #0]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr
 8004e50:	20000010 	.word	0x20000010

08004e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e58:	f7ff fff2 	bl	8004e40 <HAL_RCC_GetHCLKFreq>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	0a1b      	lsrs	r3, r3, #8
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	4903      	ldr	r1, [pc, #12]	; (8004e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e6a:	5ccb      	ldrb	r3, [r1, r3]
 8004e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40021000 	.word	0x40021000
 8004e78:	0800decc 	.word	0x0800decc

08004e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e80:	f7ff ffde 	bl	8004e40 <HAL_RCC_GetHCLKFreq>
 8004e84:	4602      	mov	r2, r0
 8004e86:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	0adb      	lsrs	r3, r3, #11
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	4903      	ldr	r1, [pc, #12]	; (8004ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e92:	5ccb      	ldrb	r3, [r1, r3]
 8004e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	0800decc 	.word	0x0800decc

08004ea4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	220f      	movs	r2, #15
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004eb4:	4b11      	ldr	r3, [pc, #68]	; (8004efc <HAL_RCC_GetClockConfig+0x58>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f003 0203 	and.w	r2, r3, #3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ec0:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <HAL_RCC_GetClockConfig+0x58>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_RCC_GetClockConfig+0x58>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004ed8:	4b08      	ldr	r3, [pc, #32]	; (8004efc <HAL_RCC_GetClockConfig+0x58>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	08db      	lsrs	r3, r3, #3
 8004ede:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ee6:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <HAL_RCC_GetClockConfig+0x5c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0207 	and.w	r2, r3, #7
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr
 8004efc:	40021000 	.word	0x40021000
 8004f00:	40022000 	.word	0x40022000

08004f04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <RCC_Delay+0x34>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a0a      	ldr	r2, [pc, #40]	; (8004f3c <RCC_Delay+0x38>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	0a5b      	lsrs	r3, r3, #9
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f20:	bf00      	nop
  }
  while (Delay --);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1e5a      	subs	r2, r3, #1
 8004f26:	60fa      	str	r2, [r7, #12]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f9      	bne.n	8004f20 <RCC_Delay+0x1c>
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr
 8004f38:	20000010 	.word	0x20000010
 8004f3c:	10624dd3 	.word	0x10624dd3

08004f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d07d      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f60:	4b4f      	ldr	r3, [pc, #316]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10d      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f6c:	4b4c      	ldr	r3, [pc, #304]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	4a4b      	ldr	r2, [pc, #300]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f76:	61d3      	str	r3, [r2, #28]
 8004f78:	4b49      	ldr	r3, [pc, #292]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f84:	2301      	movs	r3, #1
 8004f86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f88:	4b46      	ldr	r3, [pc, #280]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d118      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f94:	4b43      	ldr	r3, [pc, #268]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a42      	ldr	r2, [pc, #264]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fa0:	f7fd fb34 	bl	800260c <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa6:	e008      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa8:	f7fd fb30 	bl	800260c <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b64      	cmp	r3, #100	; 0x64
 8004fb4:	d901      	bls.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e06d      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fba:	4b3a      	ldr	r3, [pc, #232]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f0      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fc6:	4b36      	ldr	r3, [pc, #216]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d02e      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d027      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fe4:	4b2e      	ldr	r3, [pc, #184]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fee:	4b2e      	ldr	r3, [pc, #184]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ff4:	4b2c      	ldr	r3, [pc, #176]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ffa:	4a29      	ldr	r2, [pc, #164]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d014      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500a:	f7fd faff 	bl	800260c <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005010:	e00a      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005012:	f7fd fafb 	bl	800260c <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005020:	4293      	cmp	r3, r2
 8005022:	d901      	bls.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e036      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005028:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0ee      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005034:	4b1a      	ldr	r3, [pc, #104]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	4917      	ldr	r1, [pc, #92]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005042:	4313      	orrs	r3, r2
 8005044:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005046:	7dfb      	ldrb	r3, [r7, #23]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d105      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800504c:	4b14      	ldr	r3, [pc, #80]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	4a13      	ldr	r2, [pc, #76]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005056:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005064:	4b0e      	ldr	r3, [pc, #56]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	490b      	ldr	r1, [pc, #44]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005072:	4313      	orrs	r3, r2
 8005074:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0310 	and.w	r3, r3, #16
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005082:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	4904      	ldr	r1, [pc, #16]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	40021000 	.word	0x40021000
 80050a4:	40007000 	.word	0x40007000
 80050a8:	42420440 	.word	0x42420440

080050ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e076      	b.n	80051ac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d108      	bne.n	80050d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ce:	d009      	beq.n	80050e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	61da      	str	r2, [r3, #28]
 80050d6:	e005      	b.n	80050e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fd f8a0 	bl	8002244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800511a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005168:	ea42 0103 	orr.w	r1, r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005170:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	0c1a      	lsrs	r2, r3, #16
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f002 0204 	and.w	r2, r2, #4
 800518a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69da      	ldr	r2, [r3, #28]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800519a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	4613      	mov	r3, r2
 80051c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_SPI_Transmit+0x22>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e126      	b.n	8005424 <HAL_SPI_Transmit+0x270>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051de:	f7fd fa15 	bl	800260c <HAL_GetTick>
 80051e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051e4:	88fb      	ldrh	r3, [r7, #6]
 80051e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d002      	beq.n	80051fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051f4:	2302      	movs	r3, #2
 80051f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051f8:	e10b      	b.n	8005412 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <HAL_SPI_Transmit+0x52>
 8005200:	88fb      	ldrh	r3, [r7, #6]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d102      	bne.n	800520c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	77fb      	strb	r3, [r7, #31]
    goto error;
 800520a:	e102      	b.n	8005412 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2203      	movs	r2, #3
 8005210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	88fa      	ldrh	r2, [r7, #6]
 8005224:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	88fa      	ldrh	r2, [r7, #6]
 800522a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005252:	d10f      	bne.n	8005274 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005262:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005272:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527e:	2b40      	cmp	r3, #64	; 0x40
 8005280:	d007      	beq.n	8005292 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005290:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800529a:	d14b      	bne.n	8005334 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <HAL_SPI_Transmit+0xf6>
 80052a4:	8afb      	ldrh	r3, [r7, #22]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d13e      	bne.n	8005328 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ae:	881a      	ldrh	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	1c9a      	adds	r2, r3, #2
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052ce:	e02b      	b.n	8005328 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d112      	bne.n	8005304 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	881a      	ldrh	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	1c9a      	adds	r2, r3, #2
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	86da      	strh	r2, [r3, #54]	; 0x36
 8005302:	e011      	b.n	8005328 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005304:	f7fd f982 	bl	800260c <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d803      	bhi.n	800531c <HAL_SPI_Transmit+0x168>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531a:	d102      	bne.n	8005322 <HAL_SPI_Transmit+0x16e>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d102      	bne.n	8005328 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005326:	e074      	b.n	8005412 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1ce      	bne.n	80052d0 <HAL_SPI_Transmit+0x11c>
 8005332:	e04c      	b.n	80053ce <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <HAL_SPI_Transmit+0x18e>
 800533c:	8afb      	ldrh	r3, [r7, #22]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d140      	bne.n	80053c4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	330c      	adds	r3, #12
 800534c:	7812      	ldrb	r2, [r2, #0]
 800534e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800535e:	b29b      	uxth	r3, r3
 8005360:	3b01      	subs	r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005368:	e02c      	b.n	80053c4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b02      	cmp	r3, #2
 8005376:	d113      	bne.n	80053a0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	330c      	adds	r3, #12
 8005382:	7812      	ldrb	r2, [r2, #0]
 8005384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	86da      	strh	r2, [r3, #54]	; 0x36
 800539e:	e011      	b.n	80053c4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053a0:	f7fd f934 	bl	800260c <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d803      	bhi.n	80053b8 <HAL_SPI_Transmit+0x204>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b6:	d102      	bne.n	80053be <HAL_SPI_Transmit+0x20a>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053c2:	e026      	b.n	8005412 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1cd      	bne.n	800536a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 f8b2 	bl	800553c <SPI_EndRxTxTransaction>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2220      	movs	r2, #32
 80053e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	77fb      	strb	r3, [r7, #31]
 800540e:	e000      	b.n	8005412 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005410:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005422:	7ffb      	ldrb	r3, [r7, #31]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800543c:	f7fd f8e6 	bl	800260c <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	4413      	add	r3, r2
 800544a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800544c:	f7fd f8de 	bl	800260c <HAL_GetTick>
 8005450:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005452:	4b39      	ldr	r3, [pc, #228]	; (8005538 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	015b      	lsls	r3, r3, #5
 8005458:	0d1b      	lsrs	r3, r3, #20
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	fb02 f303 	mul.w	r3, r2, r3
 8005460:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005462:	e054      	b.n	800550e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546a:	d050      	beq.n	800550e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800546c:	f7fd f8ce 	bl	800260c <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	429a      	cmp	r2, r3
 800547a:	d902      	bls.n	8005482 <SPI_WaitFlagStateUntilTimeout+0x56>
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d13d      	bne.n	80054fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800549a:	d111      	bne.n	80054c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a4:	d004      	beq.n	80054b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ae:	d107      	bne.n	80054c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c8:	d10f      	bne.n	80054ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e017      	b.n	800552e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	3b01      	subs	r3, #1
 800550c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4013      	ands	r3, r2
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	429a      	cmp	r2, r3
 800551c:	bf0c      	ite	eq
 800551e:	2301      	moveq	r3, #1
 8005520:	2300      	movne	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	429a      	cmp	r2, r3
 800552a:	d19b      	bne.n	8005464 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3720      	adds	r7, #32
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000010 	.word	0x20000010

0800553c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2200      	movs	r2, #0
 8005550:	2180      	movs	r1, #128	; 0x80
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f7ff ff6a 	bl	800542c <SPI_WaitFlagStateUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d007      	beq.n	800556e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005562:	f043 0220 	orr.w	r2, r3, #32
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e000      	b.n	8005570 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e041      	b.n	800560e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f839 	bl	8005616 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4619      	mov	r1, r3
 80055b6:	4610      	mov	r0, r2
 80055b8:	f000 f9b4 	bl	8005924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr

08005628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b01      	cmp	r3, #1
 800563a:	d001      	beq.n	8005640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e03a      	b.n	80056b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0201 	orr.w	r2, r2, #1
 8005656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <HAL_TIM_Base_Start_IT+0x98>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00e      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0x58>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800566a:	d009      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0x58>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a14      	ldr	r2, [pc, #80]	; (80056c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d004      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0x58>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d111      	bne.n	80056a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b06      	cmp	r3, #6
 8005690:	d010      	beq.n	80056b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f042 0201 	orr.w	r2, r2, #1
 80056a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a2:	e007      	b.n	80056b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0201 	orr.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr
 80056c0:	40012c00 	.word	0x40012c00
 80056c4:	40000400 	.word	0x40000400
 80056c8:	40000800 	.word	0x40000800

080056cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d122      	bne.n	8005728 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d11b      	bne.n	8005728 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0202 	mvn.w	r2, #2
 80056f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f8ed 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 8005714:	e005      	b.n	8005722 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f8e0 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f8ef 	bl	8005900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b04      	cmp	r3, #4
 8005734:	d122      	bne.n	800577c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b04      	cmp	r3, #4
 8005742:	d11b      	bne.n	800577c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0204 	mvn.w	r2, #4
 800574c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2202      	movs	r2, #2
 8005752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f8c3 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 8005768:	e005      	b.n	8005776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f8b6 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f8c5 	bl	8005900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0308 	and.w	r3, r3, #8
 8005786:	2b08      	cmp	r3, #8
 8005788:	d122      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b08      	cmp	r3, #8
 8005796:	d11b      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0208 	mvn.w	r2, #8
 80057a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2204      	movs	r2, #4
 80057a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f899 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 80057bc:	e005      	b.n	80057ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f88c 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f89b 	bl	8005900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0310 	and.w	r3, r3, #16
 80057da:	2b10      	cmp	r3, #16
 80057dc:	d122      	bne.n	8005824 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b10      	cmp	r3, #16
 80057ea:	d11b      	bne.n	8005824 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f06f 0210 	mvn.w	r2, #16
 80057f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2208      	movs	r2, #8
 80057fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f86f 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 8005810:	e005      	b.n	800581e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f862 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f871 	bl	8005900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b01      	cmp	r3, #1
 8005830:	d10e      	bne.n	8005850 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b01      	cmp	r3, #1
 800583e:	d107      	bne.n	8005850 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0201 	mvn.w	r2, #1
 8005848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7fa ff96 	bl	800077c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585a:	2b80      	cmp	r3, #128	; 0x80
 800585c:	d10e      	bne.n	800587c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005868:	2b80      	cmp	r3, #128	; 0x80
 800586a:	d107      	bne.n	800587c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f8bf 	bl	80059fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d10e      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005894:	2b40      	cmp	r3, #64	; 0x40
 8005896:	d107      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f835 	bl	8005912 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d10e      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f003 0320 	and.w	r3, r3, #32
 80058c0:	2b20      	cmp	r3, #32
 80058c2:	d107      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0220 	mvn.w	r2, #32
 80058cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f88a 	bl	80059e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058d4:	bf00      	nop
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr

080058ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr

08005900 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr

08005912 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr

08005924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a29      	ldr	r2, [pc, #164]	; (80059dc <TIM_Base_SetConfig+0xb8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00b      	beq.n	8005954 <TIM_Base_SetConfig+0x30>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005942:	d007      	beq.n	8005954 <TIM_Base_SetConfig+0x30>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a26      	ldr	r2, [pc, #152]	; (80059e0 <TIM_Base_SetConfig+0xbc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_Base_SetConfig+0x30>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a25      	ldr	r2, [pc, #148]	; (80059e4 <TIM_Base_SetConfig+0xc0>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d108      	bne.n	8005966 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a1c      	ldr	r2, [pc, #112]	; (80059dc <TIM_Base_SetConfig+0xb8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00b      	beq.n	8005986 <TIM_Base_SetConfig+0x62>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005974:	d007      	beq.n	8005986 <TIM_Base_SetConfig+0x62>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a19      	ldr	r2, [pc, #100]	; (80059e0 <TIM_Base_SetConfig+0xbc>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d003      	beq.n	8005986 <TIM_Base_SetConfig+0x62>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a18      	ldr	r2, [pc, #96]	; (80059e4 <TIM_Base_SetConfig+0xc0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d108      	bne.n	8005998 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a07      	ldr	r2, [pc, #28]	; (80059dc <TIM_Base_SetConfig+0xb8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d103      	bne.n	80059cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	615a      	str	r2, [r3, #20]
}
 80059d2:	bf00      	nop
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40000800 	.word	0x40000800

080059e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr

080059fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr

08005a0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e03f      	b.n	8005a9e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fc fd4a 	bl	80024cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2224      	movs	r2, #36	; 0x24
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fba9 	bl	80061a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695a      	ldr	r2, [r3, #20]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d11d      	bne.n	8005afc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <HAL_UART_Receive_IT+0x26>
 8005ac6:	88fb      	ldrh	r3, [r7, #6]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e016      	b.n	8005afe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Receive_IT+0x38>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e00f      	b.n	8005afe <HAL_UART_Receive_IT+0x58>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	461a      	mov	r2, r3
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f9cf 	bl	8005e96 <UART_Start_Receive_IT>
 8005af8:	4603      	mov	r3, r0
 8005afa:	e000      	b.n	8005afe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005afc:	2302      	movs	r3, #2
  }
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08a      	sub	sp, #40	; 0x28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10d      	bne.n	8005b5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	f003 0320 	and.w	r3, r3, #32
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d008      	beq.n	8005b5a <HAL_UART_IRQHandler+0x52>
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	f003 0320 	and.w	r3, r3, #32
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fa7f 	bl	8006056 <UART_Receive_IT>
      return;
 8005b58:	e17b      	b.n	8005e52 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 80b1 	beq.w	8005cc4 <HAL_UART_IRQHandler+0x1bc>
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d105      	bne.n	8005b78 <HAL_UART_IRQHandler+0x70>
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 80a6 	beq.w	8005cc4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <HAL_UART_IRQHandler+0x90>
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d005      	beq.n	8005b98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b90:	f043 0201 	orr.w	r2, r3, #1
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <HAL_UART_IRQHandler+0xb0>
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	f043 0202 	orr.w	r2, r3, #2
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <HAL_UART_IRQHandler+0xd0>
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	f043 0204 	orr.w	r2, r3, #4
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00f      	beq.n	8005c02 <HAL_UART_IRQHandler+0xfa>
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <HAL_UART_IRQHandler+0xee>
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d005      	beq.n	8005c02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	f043 0208 	orr.w	r2, r3, #8
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 811e 	beq.w	8005e48 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d007      	beq.n	8005c26 <HAL_UART_IRQHandler+0x11e>
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fa18 	bl	8006056 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	bf14      	ite	ne
 8005c34:	2301      	movne	r3, #1
 8005c36:	2300      	moveq	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d102      	bne.n	8005c4e <HAL_UART_IRQHandler+0x146>
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d031      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f95a 	bl	8005f08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d023      	beq.n	8005caa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695a      	ldr	r2, [r3, #20]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d013      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	4a76      	ldr	r2, [pc, #472]	; (8005e58 <HAL_UART_IRQHandler+0x350>)
 8005c80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fc fde4 	bl	8002854 <HAL_DMA_Abort_IT>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d016      	beq.n	8005cc0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca0:	e00e      	b.n	8005cc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f8e3 	bl	8005e6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca8:	e00a      	b.n	8005cc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f8df 	bl	8005e6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb0:	e006      	b.n	8005cc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f8db 	bl	8005e6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005cbe:	e0c3      	b.n	8005e48 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc0:	bf00      	nop
    return;
 8005cc2:	e0c1      	b.n	8005e48 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	f040 80a1 	bne.w	8005e10 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 809b 	beq.w	8005e10 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8095 	beq.w	8005e10 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d04e      	beq.n	8005da8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005d14:	8a3b      	ldrh	r3, [r7, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 8098 	beq.w	8005e4c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d20:	8a3a      	ldrh	r2, [r7, #16]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	f080 8092 	bcs.w	8005e4c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	8a3a      	ldrh	r2, [r7, #16]
 8005d2c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d02b      	beq.n	8005d90 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d46:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695a      	ldr	r2, [r3, #20]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f022 0201 	bic.w	r2, r2, #1
 8005d56:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695a      	ldr	r2, [r3, #20]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d66:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0210 	bic.w	r2, r2, #16
 8005d84:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fc fd27 	bl	80027de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	4619      	mov	r1, r3
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f86d 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005da6:	e051      	b.n	8005e4c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d047      	beq.n	8005e50 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005dc0:	8a7b      	ldrh	r3, [r7, #18]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d044      	beq.n	8005e50 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005dd4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	695a      	ldr	r2, [r3, #20]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0201 	bic.w	r2, r2, #1
 8005de4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0210 	bic.w	r2, r2, #16
 8005e02:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e04:	8a7b      	ldrh	r3, [r7, #18]
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f839 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005e0e:	e01f      	b.n	8005e50 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d008      	beq.n	8005e2c <HAL_UART_IRQHandler+0x324>
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f8af 	bl	8005f88 <UART_Transmit_IT>
    return;
 8005e2a:	e012      	b.n	8005e52 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00d      	beq.n	8005e52 <HAL_UART_IRQHandler+0x34a>
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d008      	beq.n	8005e52 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f8f0 	bl	8006026 <UART_EndTransmit_IT>
    return;
 8005e46:	e004      	b.n	8005e52 <HAL_UART_IRQHandler+0x34a>
    return;
 8005e48:	bf00      	nop
 8005e4a:	e002      	b.n	8005e52 <HAL_UART_IRQHandler+0x34a>
      return;
 8005e4c:	bf00      	nop
 8005e4e:	e000      	b.n	8005e52 <HAL_UART_IRQHandler+0x34a>
      return;
 8005e50:	bf00      	nop
  }
}
 8005e52:	3728      	adds	r7, #40	; 0x28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	08005f61 	.word	0x08005f61

08005e5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bc80      	pop	{r7}
 8005e6c:	4770      	bx	lr

08005e6e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr

08005e96 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b085      	sub	sp, #20
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	88fa      	ldrh	r2, [r7, #6]
 8005eae:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	88fa      	ldrh	r2, [r7, #6]
 8005eb4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2222      	movs	r2, #34	; 0x22
 8005ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eda:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	695a      	ldr	r2, [r3, #20]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0201 	orr.w	r2, r2, #1
 8005eea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0220 	orr.w	r2, r2, #32
 8005efa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr

08005f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695a      	ldr	r2, [r3, #20]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0201 	bic.w	r2, r2, #1
 8005f2e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d107      	bne.n	8005f48 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0210 	bic.w	r2, r2, #16
 8005f46:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bc80      	pop	{r7}
 8005f5e:	4770      	bx	lr

08005f60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff ff77 	bl	8005e6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f80:	bf00      	nop
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b21      	cmp	r3, #33	; 0x21
 8005f9a:	d13e      	bne.n	800601a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa4:	d114      	bne.n	8005fd0 <UART_Transmit_IT+0x48>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d110      	bne.n	8005fd0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	1c9a      	adds	r2, r3, #2
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	621a      	str	r2, [r3, #32]
 8005fce:	e008      	b.n	8005fe2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	1c59      	adds	r1, r3, #1
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6211      	str	r1, [r2, #32]
 8005fda:	781a      	ldrb	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10f      	bne.n	8006016 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006004:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006014:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	e000      	b.n	800601c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800601a:	2302      	movs	r3, #2
  }
}
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	bc80      	pop	{r7}
 8006024:	4770      	bx	lr

08006026 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68da      	ldr	r2, [r3, #12]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800603c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff ff08 	bl	8005e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b22      	cmp	r3, #34	; 0x22
 8006068:	f040 8099 	bne.w	800619e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006074:	d117      	bne.n	80060a6 <UART_Receive_IT+0x50>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d113      	bne.n	80060a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800607e:	2300      	movs	r3, #0
 8006080:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006086:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	b29b      	uxth	r3, r3
 8006090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006094:	b29a      	uxth	r2, r3
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	1c9a      	adds	r2, r3, #2
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	629a      	str	r2, [r3, #40]	; 0x28
 80060a4:	e026      	b.n	80060f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060aa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80060ac:	2300      	movs	r3, #0
 80060ae:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b8:	d007      	beq.n	80060ca <UART_Receive_IT+0x74>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10a      	bne.n	80060d8 <UART_Receive_IT+0x82>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d106      	bne.n	80060d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	e008      	b.n	80060ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	4619      	mov	r1, r3
 8006102:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006104:	2b00      	cmp	r3, #0
 8006106:	d148      	bne.n	800619a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0220 	bic.w	r2, r2, #32
 8006116:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695a      	ldr	r2, [r3, #20]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0201 	bic.w	r2, r2, #1
 8006136:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006144:	2b01      	cmp	r3, #1
 8006146:	d123      	bne.n	8006190 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0210 	bic.w	r2, r2, #16
 800615c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b10      	cmp	r3, #16
 800616a:	d10a      	bne.n	8006182 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff fe79 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
 800618e:	e002      	b.n	8006196 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7fa f931 	bl	80003f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	e002      	b.n	80061a0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	e000      	b.n	80061a0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800619e:	2302      	movs	r3, #2
  }
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80061e2:	f023 030c 	bic.w	r3, r3, #12
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	6812      	ldr	r2, [r2, #0]
 80061ea:	68b9      	ldr	r1, [r7, #8]
 80061ec:	430b      	orrs	r3, r1
 80061ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a2c      	ldr	r2, [pc, #176]	; (80062bc <UART_SetConfig+0x114>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d103      	bne.n	8006218 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006210:	f7fe fe34 	bl	8004e7c <HAL_RCC_GetPCLK2Freq>
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	e002      	b.n	800621e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006218:	f7fe fe1c 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 800621c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	009a      	lsls	r2, r3, #2
 8006228:	441a      	add	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	fbb2 f3f3 	udiv	r3, r2, r3
 8006234:	4a22      	ldr	r2, [pc, #136]	; (80062c0 <UART_SetConfig+0x118>)
 8006236:	fba2 2303 	umull	r2, r3, r2, r3
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	0119      	lsls	r1, r3, #4
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	009a      	lsls	r2, r3, #2
 8006248:	441a      	add	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	fbb2 f2f3 	udiv	r2, r2, r3
 8006254:	4b1a      	ldr	r3, [pc, #104]	; (80062c0 <UART_SetConfig+0x118>)
 8006256:	fba3 0302 	umull	r0, r3, r3, r2
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	2064      	movs	r0, #100	; 0x64
 800625e:	fb00 f303 	mul.w	r3, r0, r3
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	3332      	adds	r3, #50	; 0x32
 8006268:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <UART_SetConfig+0x118>)
 800626a:	fba2 2303 	umull	r2, r3, r2, r3
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006274:	4419      	add	r1, r3
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009a      	lsls	r2, r3, #2
 8006280:	441a      	add	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	fbb2 f2f3 	udiv	r2, r2, r3
 800628c:	4b0c      	ldr	r3, [pc, #48]	; (80062c0 <UART_SetConfig+0x118>)
 800628e:	fba3 0302 	umull	r0, r3, r3, r2
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	2064      	movs	r0, #100	; 0x64
 8006296:	fb00 f303 	mul.w	r3, r0, r3
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	011b      	lsls	r3, r3, #4
 800629e:	3332      	adds	r3, #50	; 0x32
 80062a0:	4a07      	ldr	r2, [pc, #28]	; (80062c0 <UART_SetConfig+0x118>)
 80062a2:	fba2 2303 	umull	r2, r3, r2, r3
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	f003 020f 	and.w	r2, r3, #15
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	440a      	add	r2, r1
 80062b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062b4:	bf00      	nop
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	40013800 	.word	0x40013800
 80062c0:	51eb851f 	.word	0x51eb851f

080062c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80062c4:	b084      	sub	sp, #16
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	f107 0014 	add.w	r0, r7, #20
 80062d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	bc80      	pop	{r7}
 80062e0:	b004      	add	sp, #16
 80062e2:	4770      	bx	lr

080062e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80062f4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80062f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr

08006310 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006318:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800631c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006324:	b29a      	uxth	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	b29b      	uxth	r3, r3
 800632a:	43db      	mvns	r3, r3
 800632c:	b29b      	uxth	r3, r3
 800632e:	4013      	ands	r3, r2
 8006330:	b29a      	uxth	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr

08006344 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	460b      	mov	r3, r1
 800634e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr

0800635c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800635c:	b084      	sub	sp, #16
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	f107 0014 	add.w	r0, r7, #20
 800636a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	bc80      	pop	{r7}
 8006398:	b004      	add	sp, #16
 800639a:	4770      	bx	lr

0800639c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800639c:	b480      	push	{r7}
 800639e:	b09b      	sub	sp, #108	; 0x6c
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80063be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	78db      	ldrb	r3, [r3, #3]
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d81f      	bhi.n	800640e <USB_ActivateEndpoint+0x72>
 80063ce:	a201      	add	r2, pc, #4	; (adr r2, 80063d4 <USB_ActivateEndpoint+0x38>)
 80063d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d4:	080063e5 	.word	0x080063e5
 80063d8:	08006401 	.word	0x08006401
 80063dc:	08006417 	.word	0x08006417
 80063e0:	080063f3 	.word	0x080063f3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80063e4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80063e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063ec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80063f0:	e012      	b.n	8006418 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80063f2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80063f6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80063fa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80063fe:	e00b      	b.n	8006418 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006400:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006404:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006408:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800640c:	e004      	b.n	8006418 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006414:	e000      	b.n	8006418 <USB_ActivateEndpoint+0x7c>
      break;
 8006416:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	441a      	add	r2, r3
 8006422:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800642a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800642e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006436:	b29b      	uxth	r3, r3
 8006438:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b29b      	uxth	r3, r3
 8006448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800644c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006450:	b29a      	uxth	r2, r3
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	4313      	orrs	r3, r2
 800645a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	441a      	add	r2, r3
 8006468:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800646c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647c:	b29b      	uxth	r3, r3
 800647e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	7b1b      	ldrb	r3, [r3, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	f040 8149 	bne.w	800671c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	785b      	ldrb	r3, [r3, #1]
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 8084 	beq.w	800659c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800649e:	b29b      	uxth	r3, r3
 80064a0:	461a      	mov	r2, r3
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	4413      	add	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	011a      	lsls	r2, r3, #4
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064b6:	613b      	str	r3, [r7, #16]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	88db      	ldrh	r3, [r3, #6]
 80064bc:	085b      	lsrs	r3, r3, #1
 80064be:	b29b      	uxth	r3, r3
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	81fb      	strh	r3, [r7, #14]
 80064d6:	89fb      	ldrh	r3, [r7, #14]
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01b      	beq.n	8006518 <USB_ActivateEndpoint+0x17c>
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f6:	81bb      	strh	r3, [r7, #12]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	441a      	add	r2, r3
 8006502:	89bb      	ldrh	r3, [r7, #12]
 8006504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800650c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006510:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006514:	b29b      	uxth	r3, r3
 8006516:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	78db      	ldrb	r3, [r3, #3]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d020      	beq.n	8006562 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006536:	813b      	strh	r3, [r7, #8]
 8006538:	893b      	ldrh	r3, [r7, #8]
 800653a:	f083 0320 	eor.w	r3, r3, #32
 800653e:	813b      	strh	r3, [r7, #8]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	441a      	add	r2, r3
 800654a:	893b      	ldrh	r3, [r7, #8]
 800654c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655c:	b29b      	uxth	r3, r3
 800655e:	8013      	strh	r3, [r2, #0]
 8006560:	e27f      	b.n	8006a62 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	b29b      	uxth	r3, r3
 8006570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006578:	817b      	strh	r3, [r7, #10]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	441a      	add	r2, r3
 8006584:	897b      	ldrh	r3, [r7, #10]
 8006586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800658a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800658e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006596:	b29b      	uxth	r3, r3
 8006598:	8013      	strh	r3, [r2, #0]
 800659a:	e262      	b.n	8006a62 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	461a      	mov	r2, r3
 80065aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ac:	4413      	add	r3, r2
 80065ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	011a      	lsls	r2, r3, #4
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	88db      	ldrh	r3, [r3, #6]
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	4413      	add	r3, r2
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	011a      	lsls	r2, r3, #4
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	4413      	add	r3, r2
 80065ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065f2:	623b      	str	r3, [r7, #32]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d112      	bne.n	8006622 <USB_ActivateEndpoint+0x286>
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006606:	b29a      	uxth	r2, r3
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	801a      	strh	r2, [r3, #0]
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800661a:	b29a      	uxth	r2, r3
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	801a      	strh	r2, [r3, #0]
 8006620:	e02f      	b.n	8006682 <USB_ActivateEndpoint+0x2e6>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b3e      	cmp	r3, #62	; 0x3e
 8006628:	d813      	bhi.n	8006652 <USB_ActivateEndpoint+0x2b6>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	085b      	lsrs	r3, r3, #1
 8006630:	663b      	str	r3, [r7, #96]	; 0x60
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <USB_ActivateEndpoint+0x2a8>
 800663e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006640:	3301      	adds	r3, #1
 8006642:	663b      	str	r3, [r7, #96]	; 0x60
 8006644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006646:	b29b      	uxth	r3, r3
 8006648:	029b      	lsls	r3, r3, #10
 800664a:	b29a      	uxth	r2, r3
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	801a      	strh	r2, [r3, #0]
 8006650:	e017      	b.n	8006682 <USB_ActivateEndpoint+0x2e6>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	663b      	str	r3, [r7, #96]	; 0x60
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 031f 	and.w	r3, r3, #31
 8006662:	2b00      	cmp	r3, #0
 8006664:	d102      	bne.n	800666c <USB_ActivateEndpoint+0x2d0>
 8006666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006668:	3b01      	subs	r3, #1
 800666a:	663b      	str	r3, [r7, #96]	; 0x60
 800666c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800666e:	b29b      	uxth	r3, r3
 8006670:	029b      	lsls	r3, r3, #10
 8006672:	b29b      	uxth	r3, r3
 8006674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800667c:	b29a      	uxth	r2, r3
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	83fb      	strh	r3, [r7, #30]
 8006690:	8bfb      	ldrh	r3, [r7, #30]
 8006692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01b      	beq.n	80066d2 <USB_ActivateEndpoint+0x336>
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b0:	83bb      	strh	r3, [r7, #28]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	441a      	add	r2, r3
 80066bc:	8bbb      	ldrh	r3, [r7, #28]
 80066be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e8:	837b      	strh	r3, [r7, #26]
 80066ea:	8b7b      	ldrh	r3, [r7, #26]
 80066ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066f0:	837b      	strh	r3, [r7, #26]
 80066f2:	8b7b      	ldrh	r3, [r7, #26]
 80066f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066f8:	837b      	strh	r3, [r7, #26]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	441a      	add	r2, r3
 8006704:	8b7b      	ldrh	r3, [r7, #26]
 8006706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800670a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800670e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006716:	b29b      	uxth	r3, r3
 8006718:	8013      	strh	r3, [r2, #0]
 800671a:	e1a2      	b.n	8006a62 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b29b      	uxth	r3, r3
 800672a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800672e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006732:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	441a      	add	r2, r3
 8006740:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800674c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006754:	b29b      	uxth	r3, r3
 8006756:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	65bb      	str	r3, [r7, #88]	; 0x58
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006762:	b29b      	uxth	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006768:	4413      	add	r3, r2
 800676a:	65bb      	str	r3, [r7, #88]	; 0x58
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	011a      	lsls	r2, r3, #4
 8006772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006774:	4413      	add	r3, r2
 8006776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800677a:	657b      	str	r3, [r7, #84]	; 0x54
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	891b      	ldrh	r3, [r3, #8]
 8006780:	085b      	lsrs	r3, r3, #1
 8006782:	b29b      	uxth	r3, r3
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800678a:	801a      	strh	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	653b      	str	r3, [r7, #80]	; 0x50
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006796:	b29b      	uxth	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800679c:	4413      	add	r3, r2
 800679e:	653b      	str	r3, [r7, #80]	; 0x50
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	011a      	lsls	r2, r3, #4
 80067a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80067ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	895b      	ldrh	r3, [r3, #10]
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067be:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	785b      	ldrb	r3, [r3, #1]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f040 8091 	bne.w	80068ec <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80067d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80067da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d01b      	beq.n	800681a <USB_ActivateEndpoint+0x47e>
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	441a      	add	r2, r3
 8006804:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800680a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006816:	b29b      	uxth	r3, r3
 8006818:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	873b      	strh	r3, [r7, #56]	; 0x38
 8006828:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800682a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01b      	beq.n	800686a <USB_ActivateEndpoint+0x4ce>
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006848:	86fb      	strh	r3, [r7, #54]	; 0x36
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	441a      	add	r2, r3
 8006854:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800685a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800685e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006862:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006866:	b29b      	uxth	r3, r3
 8006868:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800687c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006880:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006882:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006884:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006888:	86bb      	strh	r3, [r7, #52]	; 0x34
 800688a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800688c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006890:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	441a      	add	r2, r3
 800689c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800689e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c8:	867b      	strh	r3, [r7, #50]	; 0x32
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	441a      	add	r2, r3
 80068d4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80068d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	8013      	strh	r3, [r2, #0]
 80068ea:	e0ba      	b.n	8006a62 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80068fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01d      	beq.n	8006944 <USB_ActivateEndpoint+0x5a8>
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	b29b      	uxth	r3, r3
 8006916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800691a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	441a      	add	r2, r3
 800692c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006938:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800693c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006940:	b29b      	uxth	r3, r3
 8006942:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006954:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01d      	beq.n	800699c <USB_ActivateEndpoint+0x600>
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	b29b      	uxth	r3, r3
 800696e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006976:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	441a      	add	r2, r3
 8006984:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800698c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006994:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006998:	b29b      	uxth	r3, r3
 800699a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	78db      	ldrb	r3, [r3, #3]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d024      	beq.n	80069ee <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80069be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069c2:	f083 0320 	eor.w	r3, r3, #32
 80069c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	441a      	add	r2, r3
 80069d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	8013      	strh	r3, [r2, #0]
 80069ec:	e01d      	b.n	8006a2a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	441a      	add	r2, r3
 8006a12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a40:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	441a      	add	r2, r3
 8006a4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006a62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	376c      	adds	r7, #108	; 0x6c
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr

08006a70 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b08d      	sub	sp, #52	; 0x34
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	7b1b      	ldrb	r3, [r3, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f040 808e 	bne.w	8006ba0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	785b      	ldrb	r3, [r3, #1]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d044      	beq.n	8006b16 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	81bb      	strh	r3, [r7, #12]
 8006a9a:	89bb      	ldrh	r3, [r7, #12]
 8006a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d01b      	beq.n	8006adc <USB_DeactivateEndpoint+0x6c>
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aba:	817b      	strh	r3, [r7, #10]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	441a      	add	r2, r3
 8006ac6:	897b      	ldrh	r3, [r7, #10]
 8006ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af2:	813b      	strh	r3, [r7, #8]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	441a      	add	r2, r3
 8006afe:	893b      	ldrh	r3, [r7, #8]
 8006b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	8013      	strh	r3, [r2, #0]
 8006b14:	e192      	b.n	8006e3c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	827b      	strh	r3, [r7, #18]
 8006b24:	8a7b      	ldrh	r3, [r7, #18]
 8006b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d01b      	beq.n	8006b66 <USB_DeactivateEndpoint+0xf6>
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b44:	823b      	strh	r3, [r7, #16]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	441a      	add	r2, r3
 8006b50:	8a3b      	ldrh	r3, [r7, #16]
 8006b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7c:	81fb      	strh	r3, [r7, #14]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	441a      	add	r2, r3
 8006b88:	89fb      	ldrh	r3, [r7, #14]
 8006b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8013      	strh	r3, [r2, #0]
 8006b9e:	e14d      	b.n	8006e3c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	785b      	ldrb	r3, [r3, #1]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f040 80a5 	bne.w	8006cf4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	843b      	strh	r3, [r7, #32]
 8006bb8:	8c3b      	ldrh	r3, [r7, #32]
 8006bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d01b      	beq.n	8006bfa <USB_DeactivateEndpoint+0x18a>
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd8:	83fb      	strh	r3, [r7, #30]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	441a      	add	r2, r3
 8006be4:	8bfb      	ldrh	r3, [r7, #30]
 8006be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	83bb      	strh	r3, [r7, #28]
 8006c08:	8bbb      	ldrh	r3, [r7, #28]
 8006c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01b      	beq.n	8006c4a <USB_DeactivateEndpoint+0x1da>
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c28:	837b      	strh	r3, [r7, #26]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	441a      	add	r2, r3
 8006c34:	8b7b      	ldrh	r3, [r7, #26]
 8006c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c60:	833b      	strh	r3, [r7, #24]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	441a      	add	r2, r3
 8006c6c:	8b3b      	ldrh	r3, [r7, #24]
 8006c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c98:	82fb      	strh	r3, [r7, #22]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	441a      	add	r2, r3
 8006ca4:	8afb      	ldrh	r3, [r7, #22]
 8006ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd0:	82bb      	strh	r3, [r7, #20]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	441a      	add	r2, r3
 8006cdc:	8abb      	ldrh	r3, [r7, #20]
 8006cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	8013      	strh	r3, [r2, #0]
 8006cf2:	e0a3      	b.n	8006e3c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d01b      	beq.n	8006d44 <USB_DeactivateEndpoint+0x2d4>
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d22:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	441a      	add	r2, r3
 8006d2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006d52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01b      	beq.n	8006d94 <USB_DeactivateEndpoint+0x324>
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d72:	853b      	strh	r3, [r7, #40]	; 0x28
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	441a      	add	r2, r3
 8006d7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006daa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	441a      	add	r2, r3
 8006db6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	441a      	add	r2, r3
 8006dee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	441a      	add	r2, r3
 8006e26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3734      	adds	r7, #52	; 0x34
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bc80      	pop	{r7}
 8006e46:	4770      	bx	lr

08006e48 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b0cc      	sub	sp, #304	; 0x130
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	1d3b      	adds	r3, r7, #4
 8006e50:	6018      	str	r0, [r3, #0]
 8006e52:	463b      	mov	r3, r7
 8006e54:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e56:	463b      	mov	r3, r7
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	785b      	ldrb	r3, [r3, #1]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	f040 872e 	bne.w	8007cbe <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e62:	463b      	mov	r3, r7
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	699a      	ldr	r2, [r3, #24]
 8006e68:	463b      	mov	r3, r7
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d905      	bls.n	8006e7e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006e72:	463b      	mov	r3, r7
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006e7c:	e004      	b.n	8006e88 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006e7e:	463b      	mov	r3, r7
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006e88:	463b      	mov	r3, r7
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	7b1b      	ldrb	r3, [r3, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d134      	bne.n	8006efc <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006e92:	463b      	mov	r3, r7
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6959      	ldr	r1, [r3, #20]
 8006e98:	463b      	mov	r3, r7
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	88da      	ldrh	r2, [r3, #6]
 8006e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	1d38      	adds	r0, r7, #4
 8006ea6:	6800      	ldr	r0, [r0, #0]
 8006ea8:	f001 fc03 	bl	80086b2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006eac:	f107 0310 	add.w	r3, r7, #16
 8006eb0:	1d3a      	adds	r2, r7, #4
 8006eb2:	6812      	ldr	r2, [r2, #0]
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	1d3b      	adds	r3, r7, #4
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	f107 0310 	add.w	r3, r7, #16
 8006ec6:	f107 0210 	add.w	r2, r7, #16
 8006eca:	6812      	ldr	r2, [r2, #0]
 8006ecc:	440a      	add	r2, r1
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	011a      	lsls	r2, r3, #4
 8006ed8:	f107 0310 	add.w	r3, r7, #16
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006ee4:	f107 030c 	add.w	r3, r7, #12
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	f107 030c 	add.w	r3, r7, #12
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	801a      	strh	r2, [r3, #0]
 8006ef8:	f000 beac 	b.w	8007c54 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006efc:	463b      	mov	r3, r7
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	78db      	ldrb	r3, [r3, #3]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	f040 838c 	bne.w	8007620 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006f08:	463b      	mov	r3, r7
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6a1a      	ldr	r2, [r3, #32]
 8006f0e:	463b      	mov	r3, r7
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	f240 8330 	bls.w	800757a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006f1a:	1d3b      	adds	r3, r7, #4
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	463b      	mov	r3, r7
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006f38:	1d3b      	adds	r3, r7, #4
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	441a      	add	r2, r3
 8006f46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f52:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006f5e:	463b      	mov	r3, r7
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6a1a      	ldr	r2, [r3, #32]
 8006f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f68:	1ad2      	subs	r2, r2, r3
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f70:	1d3b      	adds	r3, r7, #4
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	463b      	mov	r3, r7
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 819e 	beq.w	80072c8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f90:	1d3a      	adds	r2, r7, #4
 8006f92:	6812      	ldr	r2, [r2, #0]
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	463b      	mov	r3, r7
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	785b      	ldrb	r3, [r3, #1]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d17a      	bne.n	8007096 <USB_EPStartXfer+0x24e>
 8006fa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fa4:	1d3a      	adds	r2, r7, #4
 8006fa6:	6812      	ldr	r2, [r2, #0]
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	1d3b      	adds	r3, r7, #4
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006fbe:	6812      	ldr	r2, [r2, #0]
 8006fc0:	440a      	add	r2, r1
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	463b      	mov	r3, r7
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	011a      	lsls	r2, r3, #4
 8006fcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d11a      	bne.n	800701c <USB_EPStartXfer+0x1d4>
 8006fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	801a      	strh	r2, [r3, #0]
 8006ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b29b      	uxth	r3, r3
 8007008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800700c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007010:	b29a      	uxth	r2, r3
 8007012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	801a      	strh	r2, [r3, #0]
 800701a:	e062      	b.n	80070e2 <USB_EPStartXfer+0x29a>
 800701c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007020:	2b3e      	cmp	r3, #62	; 0x3e
 8007022:	d819      	bhi.n	8007058 <USB_EPStartXfer+0x210>
 8007024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007028:	085b      	lsrs	r3, r3, #1
 800702a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800702e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <USB_EPStartXfer+0x1fc>
 800703a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800703e:	3301      	adds	r3, #1
 8007040:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007044:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007048:	b29b      	uxth	r3, r3
 800704a:	029b      	lsls	r3, r3, #10
 800704c:	b29a      	uxth	r2, r3
 800704e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	801a      	strh	r2, [r3, #0]
 8007056:	e044      	b.n	80070e2 <USB_EPStartXfer+0x29a>
 8007058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800705c:	095b      	lsrs	r3, r3, #5
 800705e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007066:	f003 031f 	and.w	r3, r3, #31
 800706a:	2b00      	cmp	r3, #0
 800706c:	d104      	bne.n	8007078 <USB_EPStartXfer+0x230>
 800706e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007072:	3b01      	subs	r3, #1
 8007074:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007078:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800707c:	b29b      	uxth	r3, r3
 800707e:	029b      	lsls	r3, r3, #10
 8007080:	b29b      	uxth	r3, r3
 8007082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800708a:	b29a      	uxth	r2, r3
 800708c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	801a      	strh	r2, [r3, #0]
 8007094:	e025      	b.n	80070e2 <USB_EPStartXfer+0x29a>
 8007096:	463b      	mov	r3, r7
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d120      	bne.n	80070e2 <USB_EPStartXfer+0x29a>
 80070a0:	1d3b      	adds	r3, r7, #4
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	4619      	mov	r1, r3
 80070ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80070b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80070b4:	6812      	ldr	r2, [r2, #0]
 80070b6:	440a      	add	r2, r1
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	463b      	mov	r3, r7
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	011a      	lsls	r2, r3, #4
 80070c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4413      	add	r3, r2
 80070ca:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80070ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d8:	b29a      	uxth	r2, r3
 80070da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80070e2:	463b      	mov	r3, r7
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	895b      	ldrh	r3, [r3, #10]
 80070e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070ec:	463b      	mov	r3, r7
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6959      	ldr	r1, [r3, #20]
 80070f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80070fc:	1d38      	adds	r0, r7, #4
 80070fe:	6800      	ldr	r0, [r0, #0]
 8007100:	f001 fad7 	bl	80086b2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007104:	463b      	mov	r3, r7
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	695a      	ldr	r2, [r3, #20]
 800710a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800710e:	441a      	add	r2, r3
 8007110:	463b      	mov	r3, r7
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007116:	463b      	mov	r3, r7
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6a1a      	ldr	r2, [r3, #32]
 800711c:	463b      	mov	r3, r7
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	429a      	cmp	r2, r3
 8007124:	d909      	bls.n	800713a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8007126:	463b      	mov	r3, r7
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6a1a      	ldr	r2, [r3, #32]
 800712c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007130:	1ad2      	subs	r2, r2, r3
 8007132:	463b      	mov	r3, r7
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	621a      	str	r2, [r3, #32]
 8007138:	e008      	b.n	800714c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800713a:	463b      	mov	r3, r7
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007144:	463b      	mov	r3, r7
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2200      	movs	r2, #0
 800714a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800714c:	463b      	mov	r3, r7
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	785b      	ldrb	r3, [r3, #1]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d17a      	bne.n	800724c <USB_EPStartXfer+0x404>
 8007156:	f107 0318 	add.w	r3, r7, #24
 800715a:	1d3a      	adds	r2, r7, #4
 800715c:	6812      	ldr	r2, [r2, #0]
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	1d3b      	adds	r3, r7, #4
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007168:	b29b      	uxth	r3, r3
 800716a:	4619      	mov	r1, r3
 800716c:	f107 0318 	add.w	r3, r7, #24
 8007170:	f107 0218 	add.w	r2, r7, #24
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	440a      	add	r2, r1
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	463b      	mov	r3, r7
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	011a      	lsls	r2, r3, #4
 8007182:	f107 0318 	add.w	r3, r7, #24
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4413      	add	r3, r2
 800718a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800718e:	f107 0314 	add.w	r3, r7, #20
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007198:	2b00      	cmp	r3, #0
 800719a:	d11a      	bne.n	80071d2 <USB_EPStartXfer+0x38a>
 800719c:	f107 0314 	add.w	r3, r7, #20
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	f107 0314 	add.w	r3, r7, #20
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	801a      	strh	r2, [r3, #0]
 80071b4:	f107 0314 	add.w	r3, r7, #20
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	b29b      	uxth	r3, r3
 80071be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	f107 0314 	add.w	r3, r7, #20
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	801a      	strh	r2, [r3, #0]
 80071d0:	e067      	b.n	80072a2 <USB_EPStartXfer+0x45a>
 80071d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d6:	2b3e      	cmp	r3, #62	; 0x3e
 80071d8:	d819      	bhi.n	800720e <USB_EPStartXfer+0x3c6>
 80071da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071de:	085b      	lsrs	r3, r3, #1
 80071e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80071e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d004      	beq.n	80071fa <USB_EPStartXfer+0x3b2>
 80071f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80071f4:	3301      	adds	r3, #1
 80071f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80071fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80071fe:	b29b      	uxth	r3, r3
 8007200:	029b      	lsls	r3, r3, #10
 8007202:	b29a      	uxth	r2, r3
 8007204:	f107 0314 	add.w	r3, r7, #20
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	801a      	strh	r2, [r3, #0]
 800720c:	e049      	b.n	80072a2 <USB_EPStartXfer+0x45a>
 800720e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007212:	095b      	lsrs	r3, r3, #5
 8007214:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721c:	f003 031f 	and.w	r3, r3, #31
 8007220:	2b00      	cmp	r3, #0
 8007222:	d104      	bne.n	800722e <USB_EPStartXfer+0x3e6>
 8007224:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007228:	3b01      	subs	r3, #1
 800722a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800722e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007232:	b29b      	uxth	r3, r3
 8007234:	029b      	lsls	r3, r3, #10
 8007236:	b29b      	uxth	r3, r3
 8007238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007240:	b29a      	uxth	r2, r3
 8007242:	f107 0314 	add.w	r3, r7, #20
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	801a      	strh	r2, [r3, #0]
 800724a:	e02a      	b.n	80072a2 <USB_EPStartXfer+0x45a>
 800724c:	463b      	mov	r3, r7
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	785b      	ldrb	r3, [r3, #1]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d125      	bne.n	80072a2 <USB_EPStartXfer+0x45a>
 8007256:	f107 0320 	add.w	r3, r7, #32
 800725a:	1d3a      	adds	r2, r7, #4
 800725c:	6812      	ldr	r2, [r2, #0]
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	1d3b      	adds	r3, r7, #4
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007268:	b29b      	uxth	r3, r3
 800726a:	4619      	mov	r1, r3
 800726c:	f107 0320 	add.w	r3, r7, #32
 8007270:	f107 0220 	add.w	r2, r7, #32
 8007274:	6812      	ldr	r2, [r2, #0]
 8007276:	440a      	add	r2, r1
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	463b      	mov	r3, r7
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	011a      	lsls	r2, r3, #4
 8007282:	f107 0320 	add.w	r3, r7, #32
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4413      	add	r3, r2
 800728a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800728e:	f107 031c 	add.w	r3, r7, #28
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007298:	b29a      	uxth	r2, r3
 800729a:	f107 031c 	add.w	r3, r7, #28
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072a2:	463b      	mov	r3, r7
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	891b      	ldrh	r3, [r3, #8]
 80072a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072ac:	463b      	mov	r3, r7
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6959      	ldr	r1, [r3, #20]
 80072b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80072bc:	1d38      	adds	r0, r7, #4
 80072be:	6800      	ldr	r0, [r0, #0]
 80072c0:	f001 f9f7 	bl	80086b2 <USB_WritePMA>
 80072c4:	f000 bcc6 	b.w	8007c54 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072c8:	463b      	mov	r3, r7
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	785b      	ldrb	r3, [r3, #1]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d164      	bne.n	800739c <USB_EPStartXfer+0x554>
 80072d2:	1d3b      	adds	r3, r7, #4
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80072d8:	1d3b      	adds	r3, r7, #4
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	461a      	mov	r2, r3
 80072e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072e6:	4413      	add	r3, r2
 80072e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80072ea:	463b      	mov	r3, r7
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	011a      	lsls	r2, r3, #4
 80072f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072f4:	4413      	add	r3, r2
 80072f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072fa:	647b      	str	r3, [r7, #68]	; 0x44
 80072fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007300:	2b00      	cmp	r3, #0
 8007302:	d112      	bne.n	800732a <USB_EPStartXfer+0x4e2>
 8007304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	b29b      	uxth	r3, r3
 800730a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800730e:	b29a      	uxth	r2, r3
 8007310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007312:	801a      	strh	r2, [r3, #0]
 8007314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	b29b      	uxth	r3, r3
 800731a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800731e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007322:	b29a      	uxth	r2, r3
 8007324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007326:	801a      	strh	r2, [r3, #0]
 8007328:	e057      	b.n	80073da <USB_EPStartXfer+0x592>
 800732a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800732e:	2b3e      	cmp	r3, #62	; 0x3e
 8007330:	d817      	bhi.n	8007362 <USB_EPStartXfer+0x51a>
 8007332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007336:	085b      	lsrs	r3, r3, #1
 8007338:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800733c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b00      	cmp	r3, #0
 8007346:	d004      	beq.n	8007352 <USB_EPStartXfer+0x50a>
 8007348:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800734c:	3301      	adds	r3, #1
 800734e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007352:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007356:	b29b      	uxth	r3, r3
 8007358:	029b      	lsls	r3, r3, #10
 800735a:	b29a      	uxth	r2, r3
 800735c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800735e:	801a      	strh	r2, [r3, #0]
 8007360:	e03b      	b.n	80073da <USB_EPStartXfer+0x592>
 8007362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007366:	095b      	lsrs	r3, r3, #5
 8007368:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800736c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007370:	f003 031f 	and.w	r3, r3, #31
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <USB_EPStartXfer+0x53a>
 8007378:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800737c:	3b01      	subs	r3, #1
 800737e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007382:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007386:	b29b      	uxth	r3, r3
 8007388:	029b      	lsls	r3, r3, #10
 800738a:	b29b      	uxth	r3, r3
 800738c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007394:	b29a      	uxth	r2, r3
 8007396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007398:	801a      	strh	r2, [r3, #0]
 800739a:	e01e      	b.n	80073da <USB_EPStartXfer+0x592>
 800739c:	463b      	mov	r3, r7
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	785b      	ldrb	r3, [r3, #1]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d119      	bne.n	80073da <USB_EPStartXfer+0x592>
 80073a6:	1d3b      	adds	r3, r7, #4
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	653b      	str	r3, [r7, #80]	; 0x50
 80073ac:	1d3b      	adds	r3, r7, #4
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	461a      	mov	r2, r3
 80073b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ba:	4413      	add	r3, r2
 80073bc:	653b      	str	r3, [r7, #80]	; 0x50
 80073be:	463b      	mov	r3, r7
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	011a      	lsls	r2, r3, #4
 80073c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073c8:	4413      	add	r3, r2
 80073ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80073da:	463b      	mov	r3, r7
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	891b      	ldrh	r3, [r3, #8]
 80073e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073e4:	463b      	mov	r3, r7
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6959      	ldr	r1, [r3, #20]
 80073ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80073f4:	1d38      	adds	r0, r7, #4
 80073f6:	6800      	ldr	r0, [r0, #0]
 80073f8:	f001 f95b 	bl	80086b2 <USB_WritePMA>
            ep->xfer_buff += len;
 80073fc:	463b      	mov	r3, r7
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	695a      	ldr	r2, [r3, #20]
 8007402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007406:	441a      	add	r2, r3
 8007408:	463b      	mov	r3, r7
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800740e:	463b      	mov	r3, r7
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6a1a      	ldr	r2, [r3, #32]
 8007414:	463b      	mov	r3, r7
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	429a      	cmp	r2, r3
 800741c:	d909      	bls.n	8007432 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800741e:	463b      	mov	r3, r7
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6a1a      	ldr	r2, [r3, #32]
 8007424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007428:	1ad2      	subs	r2, r2, r3
 800742a:	463b      	mov	r3, r7
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	621a      	str	r2, [r3, #32]
 8007430:	e008      	b.n	8007444 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8007432:	463b      	mov	r3, r7
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800743c:	463b      	mov	r3, r7
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2200      	movs	r2, #0
 8007442:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007444:	1d3b      	adds	r3, r7, #4
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	643b      	str	r3, [r7, #64]	; 0x40
 800744a:	463b      	mov	r3, r7
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	785b      	ldrb	r3, [r3, #1]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d164      	bne.n	800751e <USB_EPStartXfer+0x6d6>
 8007454:	1d3b      	adds	r3, r7, #4
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	63bb      	str	r3, [r7, #56]	; 0x38
 800745a:	1d3b      	adds	r3, r7, #4
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007462:	b29b      	uxth	r3, r3
 8007464:	461a      	mov	r2, r3
 8007466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007468:	4413      	add	r3, r2
 800746a:	63bb      	str	r3, [r7, #56]	; 0x38
 800746c:	463b      	mov	r3, r7
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	011a      	lsls	r2, r3, #4
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	4413      	add	r3, r2
 8007478:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800747c:	637b      	str	r3, [r7, #52]	; 0x34
 800747e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d112      	bne.n	80074ac <USB_EPStartXfer+0x664>
 8007486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	b29b      	uxth	r3, r3
 800748c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007490:	b29a      	uxth	r2, r3
 8007492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007494:	801a      	strh	r2, [r3, #0]
 8007496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	b29b      	uxth	r3, r3
 800749c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a8:	801a      	strh	r2, [r3, #0]
 80074aa:	e054      	b.n	8007556 <USB_EPStartXfer+0x70e>
 80074ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b0:	2b3e      	cmp	r3, #62	; 0x3e
 80074b2:	d817      	bhi.n	80074e4 <USB_EPStartXfer+0x69c>
 80074b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b8:	085b      	lsrs	r3, r3, #1
 80074ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80074be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d004      	beq.n	80074d4 <USB_EPStartXfer+0x68c>
 80074ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80074ce:	3301      	adds	r3, #1
 80074d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80074d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80074d8:	b29b      	uxth	r3, r3
 80074da:	029b      	lsls	r3, r3, #10
 80074dc:	b29a      	uxth	r2, r3
 80074de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e0:	801a      	strh	r2, [r3, #0]
 80074e2:	e038      	b.n	8007556 <USB_EPStartXfer+0x70e>
 80074e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80074ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f2:	f003 031f 	and.w	r3, r3, #31
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d104      	bne.n	8007504 <USB_EPStartXfer+0x6bc>
 80074fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80074fe:	3b01      	subs	r3, #1
 8007500:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007504:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007508:	b29b      	uxth	r3, r3
 800750a:	029b      	lsls	r3, r3, #10
 800750c:	b29b      	uxth	r3, r3
 800750e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007516:	b29a      	uxth	r2, r3
 8007518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	e01b      	b.n	8007556 <USB_EPStartXfer+0x70e>
 800751e:	463b      	mov	r3, r7
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	785b      	ldrb	r3, [r3, #1]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d116      	bne.n	8007556 <USB_EPStartXfer+0x70e>
 8007528:	1d3b      	adds	r3, r7, #4
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007530:	b29b      	uxth	r3, r3
 8007532:	461a      	mov	r2, r3
 8007534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007536:	4413      	add	r3, r2
 8007538:	643b      	str	r3, [r7, #64]	; 0x40
 800753a:	463b      	mov	r3, r7
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	011a      	lsls	r2, r3, #4
 8007542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007544:	4413      	add	r3, r2
 8007546:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800754a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800754c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007550:	b29a      	uxth	r2, r3
 8007552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007554:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007556:	463b      	mov	r3, r7
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	895b      	ldrh	r3, [r3, #10]
 800755c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007560:	463b      	mov	r3, r7
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6959      	ldr	r1, [r3, #20]
 8007566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800756a:	b29b      	uxth	r3, r3
 800756c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007570:	1d38      	adds	r0, r7, #4
 8007572:	6800      	ldr	r0, [r0, #0]
 8007574:	f001 f89d 	bl	80086b2 <USB_WritePMA>
 8007578:	e36c      	b.n	8007c54 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800757a:	463b      	mov	r3, r7
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007584:	1d3b      	adds	r3, r7, #4
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	463b      	mov	r3, r7
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	b29b      	uxth	r3, r3
 8007596:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800759a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80075a2:	1d3b      	adds	r3, r7, #4
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	463b      	mov	r3, r7
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	441a      	add	r2, r3
 80075b0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80075b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075c8:	1d3b      	adds	r3, r7, #4
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075ce:	1d3b      	adds	r3, r7, #4
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	461a      	mov	r2, r3
 80075da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075dc:	4413      	add	r3, r2
 80075de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075e0:	463b      	mov	r3, r7
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	011a      	lsls	r2, r3, #4
 80075e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075ea:	4413      	add	r3, r2
 80075ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80075f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80075fc:	463b      	mov	r3, r7
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	891b      	ldrh	r3, [r3, #8]
 8007602:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007606:	463b      	mov	r3, r7
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6959      	ldr	r1, [r3, #20]
 800760c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007610:	b29b      	uxth	r3, r3
 8007612:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007616:	1d38      	adds	r0, r7, #4
 8007618:	6800      	ldr	r0, [r0, #0]
 800761a:	f001 f84a 	bl	80086b2 <USB_WritePMA>
 800761e:	e319      	b.n	8007c54 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007620:	1d3b      	adds	r3, r7, #4
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	463b      	mov	r3, r7
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4413      	add	r3, r2
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	b29b      	uxth	r3, r3
 8007632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800763a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800763e:	1d3b      	adds	r3, r7, #4
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	463b      	mov	r3, r7
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	441a      	add	r2, r3
 800764c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007658:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800765c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007660:	b29b      	uxth	r3, r3
 8007662:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007664:	463b      	mov	r3, r7
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6a1a      	ldr	r2, [r3, #32]
 800766a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800766e:	1ad2      	subs	r2, r2, r3
 8007670:	463b      	mov	r3, r7
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007676:	1d3b      	adds	r3, r7, #4
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	463b      	mov	r3, r7
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	b29b      	uxth	r3, r3
 8007688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 8162 	beq.w	8007956 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007692:	1d3b      	adds	r3, r7, #4
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800769a:	463b      	mov	r3, r7
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	785b      	ldrb	r3, [r3, #1]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d164      	bne.n	800776e <USB_EPStartXfer+0x926>
 80076a4:	1d3b      	adds	r3, r7, #4
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80076aa:	1d3b      	adds	r3, r7, #4
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	461a      	mov	r2, r3
 80076b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076b8:	4413      	add	r3, r2
 80076ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80076bc:	463b      	mov	r3, r7
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	011a      	lsls	r2, r3, #4
 80076c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076c6:	4413      	add	r3, r2
 80076c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076cc:	677b      	str	r3, [r7, #116]	; 0x74
 80076ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d112      	bne.n	80076fc <USB_EPStartXfer+0x8b4>
 80076d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076e4:	801a      	strh	r2, [r3, #0]
 80076e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076e8:	881b      	ldrh	r3, [r3, #0]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076f8:	801a      	strh	r2, [r3, #0]
 80076fa:	e057      	b.n	80077ac <USB_EPStartXfer+0x964>
 80076fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007700:	2b3e      	cmp	r3, #62	; 0x3e
 8007702:	d817      	bhi.n	8007734 <USB_EPStartXfer+0x8ec>
 8007704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007708:	085b      	lsrs	r3, r3, #1
 800770a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800770e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <USB_EPStartXfer+0x8dc>
 800771a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800771e:	3301      	adds	r3, #1
 8007720:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007724:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007728:	b29b      	uxth	r3, r3
 800772a:	029b      	lsls	r3, r3, #10
 800772c:	b29a      	uxth	r2, r3
 800772e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007730:	801a      	strh	r2, [r3, #0]
 8007732:	e03b      	b.n	80077ac <USB_EPStartXfer+0x964>
 8007734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007738:	095b      	lsrs	r3, r3, #5
 800773a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800773e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007742:	f003 031f 	and.w	r3, r3, #31
 8007746:	2b00      	cmp	r3, #0
 8007748:	d104      	bne.n	8007754 <USB_EPStartXfer+0x90c>
 800774a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800774e:	3b01      	subs	r3, #1
 8007750:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007754:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007758:	b29b      	uxth	r3, r3
 800775a:	029b      	lsls	r3, r3, #10
 800775c:	b29b      	uxth	r3, r3
 800775e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007766:	b29a      	uxth	r2, r3
 8007768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800776a:	801a      	strh	r2, [r3, #0]
 800776c:	e01e      	b.n	80077ac <USB_EPStartXfer+0x964>
 800776e:	463b      	mov	r3, r7
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	785b      	ldrb	r3, [r3, #1]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d119      	bne.n	80077ac <USB_EPStartXfer+0x964>
 8007778:	1d3b      	adds	r3, r7, #4
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007780:	b29b      	uxth	r3, r3
 8007782:	461a      	mov	r2, r3
 8007784:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007788:	4413      	add	r3, r2
 800778a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800778e:	463b      	mov	r3, r7
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	011a      	lsls	r2, r3, #4
 8007796:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800779a:	4413      	add	r3, r2
 800779c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80077ac:	463b      	mov	r3, r7
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	895b      	ldrh	r3, [r3, #10]
 80077b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077b6:	463b      	mov	r3, r7
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6959      	ldr	r1, [r3, #20]
 80077bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077c6:	1d38      	adds	r0, r7, #4
 80077c8:	6800      	ldr	r0, [r0, #0]
 80077ca:	f000 ff72 	bl	80086b2 <USB_WritePMA>
          ep->xfer_buff += len;
 80077ce:	463b      	mov	r3, r7
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695a      	ldr	r2, [r3, #20]
 80077d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077d8:	441a      	add	r2, r3
 80077da:	463b      	mov	r3, r7
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80077e0:	463b      	mov	r3, r7
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6a1a      	ldr	r2, [r3, #32]
 80077e6:	463b      	mov	r3, r7
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d909      	bls.n	8007804 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80077f0:	463b      	mov	r3, r7
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6a1a      	ldr	r2, [r3, #32]
 80077f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077fa:	1ad2      	subs	r2, r2, r3
 80077fc:	463b      	mov	r3, r7
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	621a      	str	r2, [r3, #32]
 8007802:	e008      	b.n	8007816 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8007804:	463b      	mov	r3, r7
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800780e:	463b      	mov	r3, r7
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2200      	movs	r2, #0
 8007814:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 821a 	beq.w	8007c54 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007820:	463b      	mov	r3, r7
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	785b      	ldrb	r3, [r3, #1]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d164      	bne.n	80078f4 <USB_EPStartXfer+0xaac>
 800782a:	1d3b      	adds	r3, r7, #4
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007830:	1d3b      	adds	r3, r7, #4
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007838:	b29b      	uxth	r3, r3
 800783a:	461a      	mov	r2, r3
 800783c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800783e:	4413      	add	r3, r2
 8007840:	66bb      	str	r3, [r7, #104]	; 0x68
 8007842:	463b      	mov	r3, r7
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	011a      	lsls	r2, r3, #4
 800784a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800784c:	4413      	add	r3, r2
 800784e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007852:	667b      	str	r3, [r7, #100]	; 0x64
 8007854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007858:	2b00      	cmp	r3, #0
 800785a:	d112      	bne.n	8007882 <USB_EPStartXfer+0xa3a>
 800785c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	b29b      	uxth	r3, r3
 8007862:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007866:	b29a      	uxth	r2, r3
 8007868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800786a:	801a      	strh	r2, [r3, #0]
 800786c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b29b      	uxth	r3, r3
 8007872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800787a:	b29a      	uxth	r2, r3
 800787c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800787e:	801a      	strh	r2, [r3, #0]
 8007880:	e057      	b.n	8007932 <USB_EPStartXfer+0xaea>
 8007882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007886:	2b3e      	cmp	r3, #62	; 0x3e
 8007888:	d817      	bhi.n	80078ba <USB_EPStartXfer+0xa72>
 800788a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800788e:	085b      	lsrs	r3, r3, #1
 8007890:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	2b00      	cmp	r3, #0
 800789e:	d004      	beq.n	80078aa <USB_EPStartXfer+0xa62>
 80078a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a4:	3301      	adds	r3, #1
 80078a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80078aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	029b      	lsls	r3, r3, #10
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078b6:	801a      	strh	r2, [r3, #0]
 80078b8:	e03b      	b.n	8007932 <USB_EPStartXfer+0xaea>
 80078ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078be:	095b      	lsrs	r3, r3, #5
 80078c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80078c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c8:	f003 031f 	and.w	r3, r3, #31
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d104      	bne.n	80078da <USB_EPStartXfer+0xa92>
 80078d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078d4:	3b01      	subs	r3, #1
 80078d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80078da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078de:	b29b      	uxth	r3, r3
 80078e0:	029b      	lsls	r3, r3, #10
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078f0:	801a      	strh	r2, [r3, #0]
 80078f2:	e01e      	b.n	8007932 <USB_EPStartXfer+0xaea>
 80078f4:	463b      	mov	r3, r7
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	785b      	ldrb	r3, [r3, #1]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d119      	bne.n	8007932 <USB_EPStartXfer+0xaea>
 80078fe:	1d3b      	adds	r3, r7, #4
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	673b      	str	r3, [r7, #112]	; 0x70
 8007904:	1d3b      	adds	r3, r7, #4
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800790c:	b29b      	uxth	r3, r3
 800790e:	461a      	mov	r2, r3
 8007910:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007912:	4413      	add	r3, r2
 8007914:	673b      	str	r3, [r7, #112]	; 0x70
 8007916:	463b      	mov	r3, r7
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	011a      	lsls	r2, r3, #4
 800791e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007920:	4413      	add	r3, r2
 8007922:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007926:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800792c:	b29a      	uxth	r2, r3
 800792e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007930:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007932:	463b      	mov	r3, r7
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	891b      	ldrh	r3, [r3, #8]
 8007938:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800793c:	463b      	mov	r3, r7
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6959      	ldr	r1, [r3, #20]
 8007942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007946:	b29b      	uxth	r3, r3
 8007948:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800794c:	1d38      	adds	r0, r7, #4
 800794e:	6800      	ldr	r0, [r0, #0]
 8007950:	f000 feaf 	bl	80086b2 <USB_WritePMA>
 8007954:	e17e      	b.n	8007c54 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007956:	463b      	mov	r3, r7
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	785b      	ldrb	r3, [r3, #1]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d16f      	bne.n	8007a40 <USB_EPStartXfer+0xbf8>
 8007960:	1d3b      	adds	r3, r7, #4
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007968:	1d3b      	adds	r3, r7, #4
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007970:	b29b      	uxth	r3, r3
 8007972:	461a      	mov	r2, r3
 8007974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007978:	4413      	add	r3, r2
 800797a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800797e:	463b      	mov	r3, r7
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	011a      	lsls	r2, r3, #4
 8007986:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800798a:	4413      	add	r3, r2
 800798c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007998:	2b00      	cmp	r3, #0
 800799a:	d116      	bne.n	80079ca <USB_EPStartXfer+0xb82>
 800799c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079ae:	801a      	strh	r2, [r3, #0]
 80079b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079c6:	801a      	strh	r2, [r3, #0]
 80079c8:	e05f      	b.n	8007a8a <USB_EPStartXfer+0xc42>
 80079ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ce:	2b3e      	cmp	r3, #62	; 0x3e
 80079d0:	d818      	bhi.n	8007a04 <USB_EPStartXfer+0xbbc>
 80079d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079d6:	085b      	lsrs	r3, r3, #1
 80079d8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80079dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d004      	beq.n	80079f2 <USB_EPStartXfer+0xbaa>
 80079e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80079ec:	3301      	adds	r3, #1
 80079ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80079f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	029b      	lsls	r3, r3, #10
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	e042      	b.n	8007a8a <USB_EPStartXfer+0xc42>
 8007a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a08:	095b      	lsrs	r3, r3, #5
 8007a0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a12:	f003 031f 	and.w	r3, r3, #31
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d104      	bne.n	8007a24 <USB_EPStartXfer+0xbdc>
 8007a1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007a24:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	029b      	lsls	r3, r3, #10
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a3c:	801a      	strh	r2, [r3, #0]
 8007a3e:	e024      	b.n	8007a8a <USB_EPStartXfer+0xc42>
 8007a40:	463b      	mov	r3, r7
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	785b      	ldrb	r3, [r3, #1]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d11f      	bne.n	8007a8a <USB_EPStartXfer+0xc42>
 8007a4a:	1d3b      	adds	r3, r7, #4
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a52:	1d3b      	adds	r3, r7, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a62:	4413      	add	r3, r2
 8007a64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a68:	463b      	mov	r3, r7
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	011a      	lsls	r2, r3, #4
 8007a70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a74:	4413      	add	r3, r2
 8007a76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a8a:	463b      	mov	r3, r7
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	891b      	ldrh	r3, [r3, #8]
 8007a90:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a94:	463b      	mov	r3, r7
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6959      	ldr	r1, [r3, #20]
 8007a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007aa4:	1d38      	adds	r0, r7, #4
 8007aa6:	6800      	ldr	r0, [r0, #0]
 8007aa8:	f000 fe03 	bl	80086b2 <USB_WritePMA>
          ep->xfer_buff += len;
 8007aac:	463b      	mov	r3, r7
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	695a      	ldr	r2, [r3, #20]
 8007ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab6:	441a      	add	r2, r3
 8007ab8:	463b      	mov	r3, r7
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007abe:	463b      	mov	r3, r7
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6a1a      	ldr	r2, [r3, #32]
 8007ac4:	463b      	mov	r3, r7
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d909      	bls.n	8007ae2 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8007ace:	463b      	mov	r3, r7
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6a1a      	ldr	r2, [r3, #32]
 8007ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ad8:	1ad2      	subs	r2, r2, r3
 8007ada:	463b      	mov	r3, r7
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	621a      	str	r2, [r3, #32]
 8007ae0:	e008      	b.n	8007af4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8007ae2:	463b      	mov	r3, r7
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007aec:	463b      	mov	r3, r7
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2200      	movs	r2, #0
 8007af2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 80ab 	beq.w	8007c54 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007afe:	1d3b      	adds	r3, r7, #4
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b06:	463b      	mov	r3, r7
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	785b      	ldrb	r3, [r3, #1]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d16f      	bne.n	8007bf0 <USB_EPStartXfer+0xda8>
 8007b10:	1d3b      	adds	r3, r7, #4
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b18:	1d3b      	adds	r3, r7, #4
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	461a      	mov	r2, r3
 8007b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b28:	4413      	add	r3, r2
 8007b2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b2e:	463b      	mov	r3, r7
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	011a      	lsls	r2, r3, #4
 8007b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d116      	bne.n	8007b7a <USB_EPStartXfer+0xd32>
 8007b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b5e:	801a      	strh	r2, [r3, #0]
 8007b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b76:	801a      	strh	r2, [r3, #0]
 8007b78:	e05b      	b.n	8007c32 <USB_EPStartXfer+0xdea>
 8007b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b7e:	2b3e      	cmp	r3, #62	; 0x3e
 8007b80:	d818      	bhi.n	8007bb4 <USB_EPStartXfer+0xd6c>
 8007b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b86:	085b      	lsrs	r3, r3, #1
 8007b88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d004      	beq.n	8007ba2 <USB_EPStartXfer+0xd5a>
 8007b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	029b      	lsls	r3, r3, #10
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bb0:	801a      	strh	r2, [r3, #0]
 8007bb2:	e03e      	b.n	8007c32 <USB_EPStartXfer+0xdea>
 8007bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb8:	095b      	lsrs	r3, r3, #5
 8007bba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc2:	f003 031f 	and.w	r3, r3, #31
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d104      	bne.n	8007bd4 <USB_EPStartXfer+0xd8c>
 8007bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	029b      	lsls	r3, r3, #10
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bec:	801a      	strh	r2, [r3, #0]
 8007bee:	e020      	b.n	8007c32 <USB_EPStartXfer+0xdea>
 8007bf0:	463b      	mov	r3, r7
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	785b      	ldrb	r3, [r3, #1]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d11b      	bne.n	8007c32 <USB_EPStartXfer+0xdea>
 8007bfa:	1d3b      	adds	r3, r7, #4
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	461a      	mov	r2, r3
 8007c06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c10:	463b      	mov	r3, r7
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	011a      	lsls	r2, r3, #4
 8007c18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c32:	463b      	mov	r3, r7
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	895b      	ldrh	r3, [r3, #10]
 8007c38:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c3c:	463b      	mov	r3, r7
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6959      	ldr	r1, [r3, #20]
 8007c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c4c:	1d38      	adds	r0, r7, #4
 8007c4e:	6800      	ldr	r0, [r0, #0]
 8007c50:	f000 fd2f 	bl	80086b2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007c54:	1d3b      	adds	r3, r7, #4
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	463b      	mov	r3, r7
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	f107 020a 	add.w	r2, r7, #10
 8007c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c72:	8013      	strh	r3, [r2, #0]
 8007c74:	f107 030a 	add.w	r3, r7, #10
 8007c78:	f107 020a 	add.w	r2, r7, #10
 8007c7c:	8812      	ldrh	r2, [r2, #0]
 8007c7e:	f082 0210 	eor.w	r2, r2, #16
 8007c82:	801a      	strh	r2, [r3, #0]
 8007c84:	f107 030a 	add.w	r3, r7, #10
 8007c88:	f107 020a 	add.w	r2, r7, #10
 8007c8c:	8812      	ldrh	r2, [r2, #0]
 8007c8e:	f082 0220 	eor.w	r2, r2, #32
 8007c92:	801a      	strh	r2, [r3, #0]
 8007c94:	1d3b      	adds	r3, r7, #4
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	463b      	mov	r3, r7
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	441a      	add	r2, r3
 8007ca2:	f107 030a 	add.w	r3, r7, #10
 8007ca6:	881b      	ldrh	r3, [r3, #0]
 8007ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	8013      	strh	r3, [r2, #0]
 8007cbc:	e3b5      	b.n	800842a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007cbe:	463b      	mov	r3, r7
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	7b1b      	ldrb	r3, [r3, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f040 8090 	bne.w	8007dea <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007cca:	463b      	mov	r3, r7
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	699a      	ldr	r2, [r3, #24]
 8007cd0:	463b      	mov	r3, r7
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d90e      	bls.n	8007cf8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8007cda:	463b      	mov	r3, r7
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007ce4:	463b      	mov	r3, r7
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cee:	1ad2      	subs	r2, r2, r3
 8007cf0:	463b      	mov	r3, r7
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	619a      	str	r2, [r3, #24]
 8007cf6:	e008      	b.n	8007d0a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8007cf8:	463b      	mov	r3, r7
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007d02:	463b      	mov	r3, r7
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2200      	movs	r2, #0
 8007d08:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007d0a:	1d3b      	adds	r3, r7, #4
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d12:	1d3b      	adds	r3, r7, #4
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007d22:	4413      	add	r3, r2
 8007d24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d28:	463b      	mov	r3, r7
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	011a      	lsls	r2, r3, #4
 8007d30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007d34:	4413      	add	r3, r2
 8007d36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d116      	bne.n	8007d74 <USB_EPStartXfer+0xf2c>
 8007d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d58:	801a      	strh	r2, [r3, #0]
 8007d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d5e:	881b      	ldrh	r3, [r3, #0]
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d70:	801a      	strh	r2, [r3, #0]
 8007d72:	e32c      	b.n	80083ce <USB_EPStartXfer+0x1586>
 8007d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d78:	2b3e      	cmp	r3, #62	; 0x3e
 8007d7a:	d818      	bhi.n	8007dae <USB_EPStartXfer+0xf66>
 8007d7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d80:	085b      	lsrs	r3, r3, #1
 8007d82:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d004      	beq.n	8007d9c <USB_EPStartXfer+0xf54>
 8007d92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d96:	3301      	adds	r3, #1
 8007d98:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007d9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	029b      	lsls	r3, r3, #10
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007daa:	801a      	strh	r2, [r3, #0]
 8007dac:	e30f      	b.n	80083ce <USB_EPStartXfer+0x1586>
 8007dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db2:	095b      	lsrs	r3, r3, #5
 8007db4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dbc:	f003 031f 	and.w	r3, r3, #31
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d104      	bne.n	8007dce <USB_EPStartXfer+0xf86>
 8007dc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007dce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	029b      	lsls	r3, r3, #10
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007de6:	801a      	strh	r2, [r3, #0]
 8007de8:	e2f1      	b.n	80083ce <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007dea:	463b      	mov	r3, r7
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	78db      	ldrb	r3, [r3, #3]
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	f040 818f 	bne.w	8008114 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007df6:	463b      	mov	r3, r7
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	785b      	ldrb	r3, [r3, #1]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d175      	bne.n	8007eec <USB_EPStartXfer+0x10a4>
 8007e00:	1d3b      	adds	r3, r7, #4
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e08:	1d3b      	adds	r3, r7, #4
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e18:	4413      	add	r3, r2
 8007e1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e1e:	463b      	mov	r3, r7
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	011a      	lsls	r2, r3, #4
 8007e26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e34:	463b      	mov	r3, r7
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d116      	bne.n	8007e6c <USB_EPStartXfer+0x1024>
 8007e3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e50:	801a      	strh	r2, [r3, #0]
 8007e52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e68:	801a      	strh	r2, [r3, #0]
 8007e6a:	e065      	b.n	8007f38 <USB_EPStartXfer+0x10f0>
 8007e6c:	463b      	mov	r3, r7
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	2b3e      	cmp	r3, #62	; 0x3e
 8007e74:	d81a      	bhi.n	8007eac <USB_EPStartXfer+0x1064>
 8007e76:	463b      	mov	r3, r7
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	085b      	lsrs	r3, r3, #1
 8007e7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e82:	463b      	mov	r3, r7
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <USB_EPStartXfer+0x1052>
 8007e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e94:	3301      	adds	r3, #1
 8007e96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	029b      	lsls	r3, r3, #10
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ea8:	801a      	strh	r2, [r3, #0]
 8007eaa:	e045      	b.n	8007f38 <USB_EPStartXfer+0x10f0>
 8007eac:	463b      	mov	r3, r7
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	095b      	lsrs	r3, r3, #5
 8007eb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007eb8:	463b      	mov	r3, r7
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	f003 031f 	and.w	r3, r3, #31
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d104      	bne.n	8007ed0 <USB_EPStartXfer+0x1088>
 8007ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	029b      	lsls	r3, r3, #10
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ee8:	801a      	strh	r2, [r3, #0]
 8007eea:	e025      	b.n	8007f38 <USB_EPStartXfer+0x10f0>
 8007eec:	463b      	mov	r3, r7
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	785b      	ldrb	r3, [r3, #1]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d120      	bne.n	8007f38 <USB_EPStartXfer+0x10f0>
 8007ef6:	1d3b      	adds	r3, r7, #4
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007efe:	1d3b      	adds	r3, r7, #4
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	461a      	mov	r2, r3
 8007f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f0e:	4413      	add	r3, r2
 8007f10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f14:	463b      	mov	r3, r7
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	011a      	lsls	r2, r3, #4
 8007f1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f20:	4413      	add	r3, r2
 8007f22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f2a:	463b      	mov	r3, r7
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007f36:	801a      	strh	r2, [r3, #0]
 8007f38:	1d3b      	adds	r3, r7, #4
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f40:	463b      	mov	r3, r7
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	785b      	ldrb	r3, [r3, #1]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d175      	bne.n	8008036 <USB_EPStartXfer+0x11ee>
 8007f4a:	1d3b      	adds	r3, r7, #4
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f52:	1d3b      	adds	r3, r7, #4
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f62:	4413      	add	r3, r2
 8007f64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f68:	463b      	mov	r3, r7
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	011a      	lsls	r2, r3, #4
 8007f70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f74:	4413      	add	r3, r2
 8007f76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f7e:	463b      	mov	r3, r7
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d116      	bne.n	8007fb6 <USB_EPStartXfer+0x116e>
 8007f88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f9a:	801a      	strh	r2, [r3, #0]
 8007f9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fb2:	801a      	strh	r2, [r3, #0]
 8007fb4:	e061      	b.n	800807a <USB_EPStartXfer+0x1232>
 8007fb6:	463b      	mov	r3, r7
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	2b3e      	cmp	r3, #62	; 0x3e
 8007fbe:	d81a      	bhi.n	8007ff6 <USB_EPStartXfer+0x11ae>
 8007fc0:	463b      	mov	r3, r7
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	085b      	lsrs	r3, r3, #1
 8007fc8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007fcc:	463b      	mov	r3, r7
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d004      	beq.n	8007fe4 <USB_EPStartXfer+0x119c>
 8007fda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fde:	3301      	adds	r3, #1
 8007fe0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007fe4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	029b      	lsls	r3, r3, #10
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ff2:	801a      	strh	r2, [r3, #0]
 8007ff4:	e041      	b.n	800807a <USB_EPStartXfer+0x1232>
 8007ff6:	463b      	mov	r3, r7
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	095b      	lsrs	r3, r3, #5
 8007ffe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008002:	463b      	mov	r3, r7
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	f003 031f 	and.w	r3, r3, #31
 800800c:	2b00      	cmp	r3, #0
 800800e:	d104      	bne.n	800801a <USB_EPStartXfer+0x11d2>
 8008010:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008014:	3b01      	subs	r3, #1
 8008016:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800801a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800801e:	b29b      	uxth	r3, r3
 8008020:	029b      	lsls	r3, r3, #10
 8008022:	b29b      	uxth	r3, r3
 8008024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800802c:	b29a      	uxth	r2, r3
 800802e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008032:	801a      	strh	r2, [r3, #0]
 8008034:	e021      	b.n	800807a <USB_EPStartXfer+0x1232>
 8008036:	463b      	mov	r3, r7
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	785b      	ldrb	r3, [r3, #1]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d11c      	bne.n	800807a <USB_EPStartXfer+0x1232>
 8008040:	1d3b      	adds	r3, r7, #4
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008048:	b29b      	uxth	r3, r3
 800804a:	461a      	mov	r2, r3
 800804c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008050:	4413      	add	r3, r2
 8008052:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008056:	463b      	mov	r3, r7
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	011a      	lsls	r2, r3, #4
 800805e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008062:	4413      	add	r3, r2
 8008064:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008068:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800806c:	463b      	mov	r3, r7
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	b29a      	uxth	r2, r3
 8008074:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008078:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800807a:	463b      	mov	r3, r7
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	69db      	ldr	r3, [r3, #28]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 81a4 	beq.w	80083ce <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008086:	1d3b      	adds	r3, r7, #4
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	463b      	mov	r3, r7
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800809a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800809e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d005      	beq.n	80080b2 <USB_EPStartXfer+0x126a>
 80080a6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80080aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10d      	bne.n	80080ce <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080b2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80080b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f040 8187 	bne.w	80083ce <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080c0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80080c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f040 8180 	bne.w	80083ce <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80080ce:	1d3b      	adds	r3, r7, #4
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	463b      	mov	r3, r7
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	b29b      	uxth	r3, r3
 80080e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80080ec:	1d3b      	adds	r3, r7, #4
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	463b      	mov	r3, r7
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	441a      	add	r2, r3
 80080fa:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80080fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800810a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800810e:	b29b      	uxth	r3, r3
 8008110:	8013      	strh	r3, [r2, #0]
 8008112:	e15c      	b.n	80083ce <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008114:	463b      	mov	r3, r7
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	78db      	ldrb	r3, [r3, #3]
 800811a:	2b01      	cmp	r3, #1
 800811c:	f040 8155 	bne.w	80083ca <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008120:	463b      	mov	r3, r7
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	699a      	ldr	r2, [r3, #24]
 8008126:	463b      	mov	r3, r7
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	429a      	cmp	r2, r3
 800812e:	d90e      	bls.n	800814e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8008130:	463b      	mov	r3, r7
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800813a:	463b      	mov	r3, r7
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	699a      	ldr	r2, [r3, #24]
 8008140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008144:	1ad2      	subs	r2, r2, r3
 8008146:	463b      	mov	r3, r7
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	619a      	str	r2, [r3, #24]
 800814c:	e008      	b.n	8008160 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800814e:	463b      	mov	r3, r7
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008158:	463b      	mov	r3, r7
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2200      	movs	r2, #0
 800815e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008160:	463b      	mov	r3, r7
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d16f      	bne.n	800824a <USB_EPStartXfer+0x1402>
 800816a:	1d3b      	adds	r3, r7, #4
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008172:	1d3b      	adds	r3, r7, #4
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800817a:	b29b      	uxth	r3, r3
 800817c:	461a      	mov	r2, r3
 800817e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008182:	4413      	add	r3, r2
 8008184:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008188:	463b      	mov	r3, r7
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	011a      	lsls	r2, r3, #4
 8008190:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008194:	4413      	add	r3, r2
 8008196:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800819a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800819e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d116      	bne.n	80081d4 <USB_EPStartXfer+0x138c>
 80081a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081b8:	801a      	strh	r2, [r3, #0]
 80081ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081d0:	801a      	strh	r2, [r3, #0]
 80081d2:	e05f      	b.n	8008294 <USB_EPStartXfer+0x144c>
 80081d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081d8:	2b3e      	cmp	r3, #62	; 0x3e
 80081da:	d818      	bhi.n	800820e <USB_EPStartXfer+0x13c6>
 80081dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e0:	085b      	lsrs	r3, r3, #1
 80081e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80081e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d004      	beq.n	80081fc <USB_EPStartXfer+0x13b4>
 80081f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081f6:	3301      	adds	r3, #1
 80081f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80081fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008200:	b29b      	uxth	r3, r3
 8008202:	029b      	lsls	r3, r3, #10
 8008204:	b29a      	uxth	r2, r3
 8008206:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800820a:	801a      	strh	r2, [r3, #0]
 800820c:	e042      	b.n	8008294 <USB_EPStartXfer+0x144c>
 800820e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008212:	095b      	lsrs	r3, r3, #5
 8008214:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800821c:	f003 031f 	and.w	r3, r3, #31
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <USB_EPStartXfer+0x13e6>
 8008224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008228:	3b01      	subs	r3, #1
 800822a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800822e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008232:	b29b      	uxth	r3, r3
 8008234:	029b      	lsls	r3, r3, #10
 8008236:	b29b      	uxth	r3, r3
 8008238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800823c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008240:	b29a      	uxth	r2, r3
 8008242:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008246:	801a      	strh	r2, [r3, #0]
 8008248:	e024      	b.n	8008294 <USB_EPStartXfer+0x144c>
 800824a:	463b      	mov	r3, r7
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	785b      	ldrb	r3, [r3, #1]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d11f      	bne.n	8008294 <USB_EPStartXfer+0x144c>
 8008254:	1d3b      	adds	r3, r7, #4
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800825c:	1d3b      	adds	r3, r7, #4
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008264:	b29b      	uxth	r3, r3
 8008266:	461a      	mov	r2, r3
 8008268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800826c:	4413      	add	r3, r2
 800826e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008272:	463b      	mov	r3, r7
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	011a      	lsls	r2, r3, #4
 800827a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800827e:	4413      	add	r3, r2
 8008280:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008284:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800828c:	b29a      	uxth	r2, r3
 800828e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008292:	801a      	strh	r2, [r3, #0]
 8008294:	1d3b      	adds	r3, r7, #4
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800829c:	463b      	mov	r3, r7
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d16f      	bne.n	8008386 <USB_EPStartXfer+0x153e>
 80082a6:	1d3b      	adds	r3, r7, #4
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80082ae:	1d3b      	adds	r3, r7, #4
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	461a      	mov	r2, r3
 80082ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082be:	4413      	add	r3, r2
 80082c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80082c4:	463b      	mov	r3, r7
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	011a      	lsls	r2, r3, #4
 80082cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082d0:	4413      	add	r3, r2
 80082d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d116      	bne.n	8008310 <USB_EPStartXfer+0x14c8>
 80082e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082f4:	801a      	strh	r2, [r3, #0]
 80082f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082fa:	881b      	ldrh	r3, [r3, #0]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008306:	b29a      	uxth	r2, r3
 8008308:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800830c:	801a      	strh	r2, [r3, #0]
 800830e:	e05e      	b.n	80083ce <USB_EPStartXfer+0x1586>
 8008310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008314:	2b3e      	cmp	r3, #62	; 0x3e
 8008316:	d818      	bhi.n	800834a <USB_EPStartXfer+0x1502>
 8008318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800831c:	085b      	lsrs	r3, r3, #1
 800831e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b00      	cmp	r3, #0
 800832c:	d004      	beq.n	8008338 <USB_EPStartXfer+0x14f0>
 800832e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008332:	3301      	adds	r3, #1
 8008334:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008338:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800833c:	b29b      	uxth	r3, r3
 800833e:	029b      	lsls	r3, r3, #10
 8008340:	b29a      	uxth	r2, r3
 8008342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008346:	801a      	strh	r2, [r3, #0]
 8008348:	e041      	b.n	80083ce <USB_EPStartXfer+0x1586>
 800834a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800834e:	095b      	lsrs	r3, r3, #5
 8008350:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008358:	f003 031f 	and.w	r3, r3, #31
 800835c:	2b00      	cmp	r3, #0
 800835e:	d104      	bne.n	800836a <USB_EPStartXfer+0x1522>
 8008360:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008364:	3b01      	subs	r3, #1
 8008366:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800836a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800836e:	b29b      	uxth	r3, r3
 8008370:	029b      	lsls	r3, r3, #10
 8008372:	b29b      	uxth	r3, r3
 8008374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800837c:	b29a      	uxth	r2, r3
 800837e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008382:	801a      	strh	r2, [r3, #0]
 8008384:	e023      	b.n	80083ce <USB_EPStartXfer+0x1586>
 8008386:	463b      	mov	r3, r7
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	785b      	ldrb	r3, [r3, #1]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d11e      	bne.n	80083ce <USB_EPStartXfer+0x1586>
 8008390:	1d3b      	adds	r3, r7, #4
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008398:	b29b      	uxth	r3, r3
 800839a:	461a      	mov	r2, r3
 800839c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a0:	4413      	add	r3, r2
 80083a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083a6:	463b      	mov	r3, r7
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	011a      	lsls	r2, r3, #4
 80083ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b2:	4413      	add	r3, r2
 80083b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083c6:	801a      	strh	r2, [r3, #0]
 80083c8:	e001      	b.n	80083ce <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e02e      	b.n	800842c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80083ce:	1d3b      	adds	r3, r7, #4
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	463b      	mov	r3, r7
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	b29b      	uxth	r3, r3
 80083e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80083ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80083f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083f4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80083f8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80083fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008400:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008404:	1d3b      	adds	r3, r7, #4
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	463b      	mov	r3, r7
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	441a      	add	r2, r3
 8008412:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800841a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800841e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008426:	b29b      	uxth	r3, r3
 8008428:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008436:	b480      	push	{r7}
 8008438:	b085      	sub	sp, #20
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	785b      	ldrb	r3, [r3, #1]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d020      	beq.n	800848a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	881b      	ldrh	r3, [r3, #0]
 8008454:	b29b      	uxth	r3, r3
 8008456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800845a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800845e:	81bb      	strh	r3, [r7, #12]
 8008460:	89bb      	ldrh	r3, [r7, #12]
 8008462:	f083 0310 	eor.w	r3, r3, #16
 8008466:	81bb      	strh	r3, [r7, #12]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	441a      	add	r2, r3
 8008472:	89bb      	ldrh	r3, [r7, #12]
 8008474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800847c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008484:	b29b      	uxth	r3, r3
 8008486:	8013      	strh	r3, [r2, #0]
 8008488:	e01f      	b.n	80084ca <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	b29b      	uxth	r3, r3
 8008498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800849c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a0:	81fb      	strh	r3, [r7, #14]
 80084a2:	89fb      	ldrh	r3, [r7, #14]
 80084a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084a8:	81fb      	strh	r3, [r7, #14]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	441a      	add	r2, r3
 80084b4:	89fb      	ldrh	r3, [r7, #14]
 80084b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bc80      	pop	{r7}
 80084d4:	4770      	bx	lr

080084d6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b087      	sub	sp, #28
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	7b1b      	ldrb	r3, [r3, #12]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f040 809d 	bne.w	8008624 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	785b      	ldrb	r3, [r3, #1]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d04c      	beq.n	800858c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	823b      	strh	r3, [r7, #16]
 8008500:	8a3b      	ldrh	r3, [r7, #16]
 8008502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008506:	2b00      	cmp	r3, #0
 8008508:	d01b      	beq.n	8008542 <USB_EPClearStall+0x6c>
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	b29b      	uxth	r3, r3
 8008518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800851c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008520:	81fb      	strh	r3, [r7, #14]
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	441a      	add	r2, r3
 800852c:	89fb      	ldrh	r3, [r7, #14]
 800852e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800853a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800853e:	b29b      	uxth	r3, r3
 8008540:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	78db      	ldrb	r3, [r3, #3]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d06c      	beq.n	8008624 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	b29b      	uxth	r3, r3
 8008558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800855c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008560:	81bb      	strh	r3, [r7, #12]
 8008562:	89bb      	ldrh	r3, [r7, #12]
 8008564:	f083 0320 	eor.w	r3, r3, #32
 8008568:	81bb      	strh	r3, [r7, #12]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	441a      	add	r2, r3
 8008574:	89bb      	ldrh	r3, [r7, #12]
 8008576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800857a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800857e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008586:	b29b      	uxth	r3, r3
 8008588:	8013      	strh	r3, [r2, #0]
 800858a:	e04b      	b.n	8008624 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	82fb      	strh	r3, [r7, #22]
 800859a:	8afb      	ldrh	r3, [r7, #22]
 800859c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d01b      	beq.n	80085dc <USB_EPClearStall+0x106>
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ba:	82bb      	strh	r3, [r7, #20]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	441a      	add	r2, r3
 80085c6:	8abb      	ldrh	r3, [r7, #20]
 80085c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085d8:	b29b      	uxth	r3, r3
 80085da:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f2:	827b      	strh	r3, [r7, #18]
 80085f4:	8a7b      	ldrh	r3, [r7, #18]
 80085f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085fa:	827b      	strh	r3, [r7, #18]
 80085fc:	8a7b      	ldrh	r3, [r7, #18]
 80085fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008602:	827b      	strh	r3, [r7, #18]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	441a      	add	r2, r3
 800860e:	8a7b      	ldrh	r3, [r7, #18]
 8008610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800861c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008620:	b29b      	uxth	r3, r3
 8008622:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr

08008630 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800863c:	78fb      	ldrb	r3, [r7, #3]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d103      	bne.n	800864a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2280      	movs	r2, #128	; 0x80
 8008646:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	bc80      	pop	{r7}
 8008654:	4770      	bx	lr

08008656 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008656:	b480      	push	{r7}
 8008658:	b083      	sub	sp, #12
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	bc80      	pop	{r7}
 8008668:	4770      	bx	lr

0800866a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800866a:	b480      	push	{r7}
 800866c:	b083      	sub	sp, #12
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	bc80      	pop	{r7}
 800867c:	4770      	bx	lr

0800867e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800867e:	b480      	push	{r7}
 8008680:	b085      	sub	sp, #20
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800868c:	b29b      	uxth	r3, r3
 800868e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008690:	68fb      	ldr	r3, [r7, #12]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	bc80      	pop	{r7}
 800869a:	4770      	bx	lr

0800869c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bc80      	pop	{r7}
 80086b0:	4770      	bx	lr

080086b2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b08d      	sub	sp, #52	; 0x34
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	60f8      	str	r0, [r7, #12]
 80086ba:	60b9      	str	r1, [r7, #8]
 80086bc:	4611      	mov	r1, r2
 80086be:	461a      	mov	r2, r3
 80086c0:	460b      	mov	r3, r1
 80086c2:	80fb      	strh	r3, [r7, #6]
 80086c4:	4613      	mov	r3, r2
 80086c6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80086c8:	88bb      	ldrh	r3, [r7, #4]
 80086ca:	3301      	adds	r3, #1
 80086cc:	085b      	lsrs	r3, r3, #1
 80086ce:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086d8:	88fb      	ldrh	r3, [r7, #6]
 80086da:	005a      	lsls	r2, r3, #1
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	4413      	add	r3, r2
 80086e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086e4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086ea:	e01e      	b.n	800872a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	3301      	adds	r3, #1
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	021b      	lsls	r3, r3, #8
 8008700:	b29b      	uxth	r3, r3
 8008702:	461a      	mov	r2, r3
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	4313      	orrs	r3, r2
 8008708:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	b29a      	uxth	r2, r3
 800870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008710:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	3302      	adds	r3, #2
 8008716:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871a:	3302      	adds	r3, #2
 800871c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	3301      	adds	r3, #1
 8008722:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008726:	3b01      	subs	r3, #1
 8008728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800872a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1dd      	bne.n	80086ec <USB_WritePMA+0x3a>
  }
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	3734      	adds	r7, #52	; 0x34
 8008736:	46bd      	mov	sp, r7
 8008738:	bc80      	pop	{r7}
 800873a:	4770      	bx	lr

0800873c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800873c:	b480      	push	{r7}
 800873e:	b08b      	sub	sp, #44	; 0x2c
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	4611      	mov	r1, r2
 8008748:	461a      	mov	r2, r3
 800874a:	460b      	mov	r3, r1
 800874c:	80fb      	strh	r3, [r7, #6]
 800874e:	4613      	mov	r3, r2
 8008750:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008752:	88bb      	ldrh	r3, [r7, #4]
 8008754:	085b      	lsrs	r3, r3, #1
 8008756:	b29b      	uxth	r3, r3
 8008758:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008762:	88fb      	ldrh	r3, [r7, #6]
 8008764:	005a      	lsls	r2, r3, #1
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800876e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	627b      	str	r3, [r7, #36]	; 0x24
 8008774:	e01b      	b.n	80087ae <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	b29b      	uxth	r3, r3
 800877c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	3302      	adds	r3, #2
 8008782:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	b2da      	uxtb	r2, r3
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	3301      	adds	r3, #1
 8008790:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	0a1b      	lsrs	r3, r3, #8
 8008796:	b2da      	uxtb	r2, r3
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	3301      	adds	r3, #1
 80087a0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	3302      	adds	r3, #2
 80087a6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	3b01      	subs	r3, #1
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
 80087ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1e0      	bne.n	8008776 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80087b4:	88bb      	ldrh	r3, [r7, #4]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d007      	beq.n	80087d0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	701a      	strb	r2, [r3, #0]
  }
}
 80087d0:	bf00      	nop
 80087d2:	372c      	adds	r7, #44	; 0x2c
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bc80      	pop	{r7}
 80087d8:	4770      	bx	lr

080087da <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b084      	sub	sp, #16
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	460b      	mov	r3, r1
 80087e4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	7c1b      	ldrb	r3, [r3, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d115      	bne.n	800881e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80087f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087f6:	2202      	movs	r2, #2
 80087f8:	2181      	movs	r1, #129	; 0x81
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f004 fddd 	bl	800d3ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800880a:	2202      	movs	r2, #2
 800880c:	2101      	movs	r1, #1
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f004 fdd3 	bl	800d3ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800881c:	e012      	b.n	8008844 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800881e:	2340      	movs	r3, #64	; 0x40
 8008820:	2202      	movs	r2, #2
 8008822:	2181      	movs	r1, #129	; 0x81
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f004 fdc8 	bl	800d3ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008830:	2340      	movs	r3, #64	; 0x40
 8008832:	2202      	movs	r2, #2
 8008834:	2101      	movs	r1, #1
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f004 fdbf 	bl	800d3ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008844:	2308      	movs	r3, #8
 8008846:	2203      	movs	r2, #3
 8008848:	2182      	movs	r1, #130	; 0x82
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f004 fdb5 	bl	800d3ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008856:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800885a:	f004 fed5 	bl	800d608 <USBD_static_malloc>
 800885e:	4602      	mov	r2, r0
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800886c:	2b00      	cmp	r3, #0
 800886e:	d102      	bne.n	8008876 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008870:	2301      	movs	r3, #1
 8008872:	73fb      	strb	r3, [r7, #15]
 8008874:	e026      	b.n	80088c4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800887c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	2200      	movs	r2, #0
 800888c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	2200      	movs	r2, #0
 8008894:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	7c1b      	ldrb	r3, [r3, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d109      	bne.n	80088b4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088aa:	2101      	movs	r1, #1
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f004 fe75 	bl	800d59c <USBD_LL_PrepareReceive>
 80088b2:	e007      	b.n	80088c4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088ba:	2340      	movs	r3, #64	; 0x40
 80088bc:	2101      	movs	r1, #1
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f004 fe6c 	bl	800d59c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	460b      	mov	r3, r1
 80088d8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80088da:	2300      	movs	r3, #0
 80088dc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80088de:	2181      	movs	r1, #129	; 0x81
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f004 fd90 	bl	800d406 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80088ec:	2101      	movs	r1, #1
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f004 fd89 	bl	800d406 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80088fc:	2182      	movs	r1, #130	; 0x82
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f004 fd81 	bl	800d406 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00e      	beq.n	8008932 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008924:	4618      	mov	r0, r3
 8008926:	f004 fe7b 	bl	800d620 <USBD_static_free>
    pdev->pClassData = NULL;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008932:	7bfb      	ldrb	r3, [r7, #15]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800894c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800894e:	2300      	movs	r3, #0
 8008950:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008952:	2300      	movs	r3, #0
 8008954:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008962:	2b00      	cmp	r3, #0
 8008964:	d039      	beq.n	80089da <USBD_CDC_Setup+0x9e>
 8008966:	2b20      	cmp	r3, #32
 8008968:	d17f      	bne.n	8008a6a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	88db      	ldrh	r3, [r3, #6]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d029      	beq.n	80089c6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	b25b      	sxtb	r3, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	da11      	bge.n	80089a0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008988:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	88d2      	ldrh	r2, [r2, #6]
 800898e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008990:	6939      	ldr	r1, [r7, #16]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	88db      	ldrh	r3, [r3, #6]
 8008996:	461a      	mov	r2, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f001 fa0a 	bl	8009db2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800899e:	e06b      	b.n	8008a78 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	785a      	ldrb	r2, [r3, #1]
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	88db      	ldrh	r3, [r3, #6]
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80089b6:	6939      	ldr	r1, [r7, #16]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	88db      	ldrh	r3, [r3, #6]
 80089bc:	461a      	mov	r2, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 fa25 	bl	8009e0e <USBD_CtlPrepareRx>
      break;
 80089c4:	e058      	b.n	8008a78 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	7850      	ldrb	r0, [r2, #1]
 80089d2:	2200      	movs	r2, #0
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	4798      	blx	r3
      break;
 80089d8:	e04e      	b.n	8008a78 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	785b      	ldrb	r3, [r3, #1]
 80089de:	2b0b      	cmp	r3, #11
 80089e0:	d02e      	beq.n	8008a40 <USBD_CDC_Setup+0x104>
 80089e2:	2b0b      	cmp	r3, #11
 80089e4:	dc38      	bgt.n	8008a58 <USBD_CDC_Setup+0x11c>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <USBD_CDC_Setup+0xb4>
 80089ea:	2b0a      	cmp	r3, #10
 80089ec:	d014      	beq.n	8008a18 <USBD_CDC_Setup+0xdc>
 80089ee:	e033      	b.n	8008a58 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	d107      	bne.n	8008a0a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80089fa:	f107 030c 	add.w	r3, r7, #12
 80089fe:	2202      	movs	r2, #2
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f001 f9d5 	bl	8009db2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a08:	e02e      	b.n	8008a68 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f001 f966 	bl	8009cde <USBD_CtlError>
            ret = USBD_FAIL;
 8008a12:	2302      	movs	r3, #2
 8008a14:	75fb      	strb	r3, [r7, #23]
          break;
 8008a16:	e027      	b.n	8008a68 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d107      	bne.n	8008a32 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a22:	f107 030f 	add.w	r3, r7, #15
 8008a26:	2201      	movs	r2, #1
 8008a28:	4619      	mov	r1, r3
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f001 f9c1 	bl	8009db2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a30:	e01a      	b.n	8008a68 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 f952 	bl	8009cde <USBD_CtlError>
            ret = USBD_FAIL;
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	75fb      	strb	r3, [r7, #23]
          break;
 8008a3e:	e013      	b.n	8008a68 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d00d      	beq.n	8008a66 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f001 f946 	bl	8009cde <USBD_CtlError>
            ret = USBD_FAIL;
 8008a52:	2302      	movs	r3, #2
 8008a54:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a56:	e006      	b.n	8008a66 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f001 f93f 	bl	8009cde <USBD_CtlError>
          ret = USBD_FAIL;
 8008a60:	2302      	movs	r3, #2
 8008a62:	75fb      	strb	r3, [r7, #23]
          break;
 8008a64:	e000      	b.n	8008a68 <USBD_CDC_Setup+0x12c>
          break;
 8008a66:	bf00      	nop
      }
      break;
 8008a68:	e006      	b.n	8008a78 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 f936 	bl	8009cde <USBD_CtlError>
      ret = USBD_FAIL;
 8008a72:	2302      	movs	r3, #2
 8008a74:	75fb      	strb	r3, [r7, #23]
      break;
 8008a76:	bf00      	nop
  }

  return ret;
 8008a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a94:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a9c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d03a      	beq.n	8008b1e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008aa8:	78fa      	ldrb	r2, [r7, #3]
 8008aaa:	6879      	ldr	r1, [r7, #4]
 8008aac:	4613      	mov	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	440b      	add	r3, r1
 8008ab6:	331c      	adds	r3, #28
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d029      	beq.n	8008b12 <USBD_CDC_DataIn+0x90>
 8008abe:	78fa      	ldrb	r2, [r7, #3]
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	440b      	add	r3, r1
 8008acc:	331c      	adds	r3, #28
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	78f9      	ldrb	r1, [r7, #3]
 8008ad2:	68b8      	ldr	r0, [r7, #8]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	440b      	add	r3, r1
 8008ada:	00db      	lsls	r3, r3, #3
 8008adc:	4403      	add	r3, r0
 8008ade:	3338      	adds	r3, #56	; 0x38
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	fbb2 f1f3 	udiv	r1, r2, r3
 8008ae6:	fb03 f301 	mul.w	r3, r3, r1
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d110      	bne.n	8008b12 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008af0:	78fa      	ldrb	r2, [r7, #3]
 8008af2:	6879      	ldr	r1, [r7, #4]
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	440b      	add	r3, r1
 8008afe:	331c      	adds	r3, #28
 8008b00:	2200      	movs	r2, #0
 8008b02:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b04:	78f9      	ldrb	r1, [r7, #3]
 8008b06:	2300      	movs	r3, #0
 8008b08:	2200      	movs	r2, #0
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f004 fd23 	bl	800d556 <USBD_LL_Transmit>
 8008b10:	e003      	b.n	8008b1a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	e000      	b.n	8008b20 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008b1e:	2302      	movs	r3, #2
  }
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f004 fd4e 	bl	800d5e2 <USBD_LL_GetRxDataSize>
 8008b46:	4602      	mov	r2, r0
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00d      	beq.n	8008b74 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008b6c:	4611      	mov	r1, r2
 8008b6e:	4798      	blx	r3

    return USBD_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	e000      	b.n	8008b76 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008b74:	2302      	movs	r3, #2
  }
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b8c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d015      	beq.n	8008bc4 <USBD_CDC_EP0_RxReady+0x46>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008b9e:	2bff      	cmp	r3, #255	; 0xff
 8008ba0:	d010      	beq.n	8008bc4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008bb0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008bb8:	b292      	uxth	r2, r2
 8008bba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	22ff      	movs	r2, #255	; 0xff
 8008bc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2243      	movs	r2, #67	; 0x43
 8008bdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008bde:	4b03      	ldr	r3, [pc, #12]	; (8008bec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bc80      	pop	{r7}
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	200000a4 	.word	0x200000a4

08008bf0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2243      	movs	r2, #67	; 0x43
 8008bfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008bfe:	4b03      	ldr	r3, [pc, #12]	; (8008c0c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bc80      	pop	{r7}
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	20000060 	.word	0x20000060

08008c10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2243      	movs	r2, #67	; 0x43
 8008c1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008c1e:	4b03      	ldr	r3, [pc, #12]	; (8008c2c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bc80      	pop	{r7}
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	200000e8 	.word	0x200000e8

08008c30 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	220a      	movs	r2, #10
 8008c3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008c3e:	4b03      	ldr	r3, [pc, #12]	; (8008c4c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bc80      	pop	{r7}
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	2000001c 	.word	0x2000001c

08008c50 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d005      	beq.n	8008c70 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bc80      	pop	{r7}
 8008c7a:	4770      	bx	lr

08008c7c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b087      	sub	sp, #28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	4613      	mov	r3, r2
 8008c88:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c90:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008c9a:	88fa      	ldrh	r2, [r7, #6]
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	371c      	adds	r7, #28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bc80      	pop	{r7}
 8008cac:	4770      	bx	lr

08008cae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b085      	sub	sp, #20
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cbe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bc80      	pop	{r7}
 8008cd2:	4770      	bx	lr

08008cd4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d01c      	beq.n	8008d28 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d115      	bne.n	8008d24 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	2181      	movs	r1, #129	; 0x81
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f004 fc1b 	bl	800d556 <USBD_LL_Transmit>

      return USBD_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	e002      	b.n	8008d2a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e000      	b.n	8008d2a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008d28:	2302      	movs	r3, #2
  }
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d40:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d017      	beq.n	8008d7c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	7c1b      	ldrb	r3, [r3, #16]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d109      	bne.n	8008d68 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d5e:	2101      	movs	r1, #1
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f004 fc1b 	bl	800d59c <USBD_LL_PrepareReceive>
 8008d66:	e007      	b.n	8008d78 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d6e:	2340      	movs	r3, #64	; 0x40
 8008d70:	2101      	movs	r1, #1
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f004 fc12 	bl	800d59c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	e000      	b.n	8008d7e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008d7c:	2302      	movs	r3, #2
  }
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	60f8      	str	r0, [r7, #12]
 8008d8e:	60b9      	str	r1, [r7, #8]
 8008d90:	4613      	mov	r3, r2
 8008d92:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d101      	bne.n	8008d9e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	e01a      	b.n	8008dd4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d003      	beq.n	8008db0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	79fa      	ldrb	r2, [r7, #7]
 8008dca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f004 fa7f 	bl	800d2d0 <USBD_LL_Init>

  return USBD_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d006      	beq.n	8008dfe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]
 8008dfc:	e001      	b.n	8008e02 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008dfe:	2302      	movs	r3, #2
 8008e00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bc80      	pop	{r7}
 8008e0c:	4770      	bx	lr

08008e0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b082      	sub	sp, #8
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f004 fab4 	bl	800d384 <USBD_LL_Start>

  return USBD_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b083      	sub	sp, #12
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bc80      	pop	{r7}
 8008e38:	4770      	bx	lr

08008e3a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	460b      	mov	r3, r1
 8008e44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008e46:	2302      	movs	r3, #2
 8008e48:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00c      	beq.n	8008e6e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	78fa      	ldrb	r2, [r7, #3]
 8008e5e:	4611      	mov	r1, r2
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	4798      	blx	r3
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	78fa      	ldrb	r2, [r7, #3]
 8008e8e:	4611      	mov	r1, r2
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	4798      	blx	r3

  return USBD_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b082      	sub	sp, #8
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fed8 	bl	8009c66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008ed2:	f003 031f 	and.w	r3, r3, #31
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d016      	beq.n	8008f08 <USBD_LL_SetupStage+0x6a>
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d81c      	bhi.n	8008f18 <USBD_LL_SetupStage+0x7a>
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d002      	beq.n	8008ee8 <USBD_LL_SetupStage+0x4a>
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d008      	beq.n	8008ef8 <USBD_LL_SetupStage+0x5a>
 8008ee6:	e017      	b.n	8008f18 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f9cb 	bl	800928c <USBD_StdDevReq>
      break;
 8008ef6:	e01a      	b.n	8008f2e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008efe:	4619      	mov	r1, r3
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fa2d 	bl	8009360 <USBD_StdItfReq>
      break;
 8008f06:	e012      	b.n	8008f2e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fa6d 	bl	80093f0 <USBD_StdEPReq>
      break;
 8008f16:	e00a      	b.n	8008f2e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008f1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	4619      	mov	r1, r3
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f004 fa8c 	bl	800d444 <USBD_LL_StallEP>
      break;
 8008f2c:	bf00      	nop
  }

  return USBD_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	460b      	mov	r3, r1
 8008f42:	607a      	str	r2, [r7, #4]
 8008f44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f46:	7afb      	ldrb	r3, [r7, #11]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d14b      	bne.n	8008fe4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008f52:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	d134      	bne.n	8008fc8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d919      	bls.n	8008f9e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	68da      	ldr	r2, [r3, #12]
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	1ad2      	subs	r2, r2, r3
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	68da      	ldr	r2, [r3, #12]
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d203      	bcs.n	8008f8c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	e002      	b.n	8008f92 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	461a      	mov	r2, r3
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 ff57 	bl	8009e4a <USBD_CtlContinueRx>
 8008f9c:	e038      	b.n	8009010 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008fb0:	2b03      	cmp	r3, #3
 8008fb2:	d105      	bne.n	8008fc0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 ff54 	bl	8009e6e <USBD_CtlSendStatus>
 8008fc6:	e023      	b.n	8009010 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fce:	2b05      	cmp	r3, #5
 8008fd0:	d11e      	bne.n	8009010 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008fda:	2100      	movs	r1, #0
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f004 fa31 	bl	800d444 <USBD_LL_StallEP>
 8008fe2:	e015      	b.n	8009010 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00d      	beq.n	800900c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d108      	bne.n	800900c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	7afa      	ldrb	r2, [r7, #11]
 8009004:	4611      	mov	r1, r2
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	4798      	blx	r3
 800900a:	e001      	b.n	8009010 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800900c:	2302      	movs	r3, #2
 800900e:	e000      	b.n	8009012 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b086      	sub	sp, #24
 800901e:	af00      	add	r7, sp, #0
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	460b      	mov	r3, r1
 8009024:	607a      	str	r2, [r7, #4]
 8009026:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009028:	7afb      	ldrb	r3, [r7, #11]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d17f      	bne.n	800912e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	3314      	adds	r3, #20
 8009032:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800903a:	2b02      	cmp	r3, #2
 800903c:	d15c      	bne.n	80090f8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	68da      	ldr	r2, [r3, #12]
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	429a      	cmp	r2, r3
 8009048:	d915      	bls.n	8009076 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	68da      	ldr	r2, [r3, #12]
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	1ad2      	subs	r2, r2, r3
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	b29b      	uxth	r3, r3
 800905e:	461a      	mov	r2, r3
 8009060:	6879      	ldr	r1, [r7, #4]
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 fec1 	bl	8009dea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009068:	2300      	movs	r3, #0
 800906a:	2200      	movs	r2, #0
 800906c:	2100      	movs	r1, #0
 800906e:	68f8      	ldr	r0, [r7, #12]
 8009070:	f004 fa94 	bl	800d59c <USBD_LL_PrepareReceive>
 8009074:	e04e      	b.n	8009114 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	6912      	ldr	r2, [r2, #16]
 800907e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009082:	fb02 f201 	mul.w	r2, r2, r1
 8009086:	1a9b      	subs	r3, r3, r2
 8009088:	2b00      	cmp	r3, #0
 800908a:	d11c      	bne.n	80090c6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009094:	429a      	cmp	r2, r3
 8009096:	d316      	bcc.n	80090c6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d20f      	bcs.n	80090c6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80090a6:	2200      	movs	r2, #0
 80090a8:	2100      	movs	r1, #0
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f000 fe9d 	bl	8009dea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090b8:	2300      	movs	r3, #0
 80090ba:	2200      	movs	r2, #0
 80090bc:	2100      	movs	r1, #0
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f004 fa6c 	bl	800d59c <USBD_LL_PrepareReceive>
 80090c4:	e026      	b.n	8009114 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00a      	beq.n	80090e8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d105      	bne.n	80090e8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80090e8:	2180      	movs	r1, #128	; 0x80
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f004 f9aa 	bl	800d444 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 fecf 	bl	8009e94 <USBD_CtlReceiveStatus>
 80090f6:	e00d      	b.n	8009114 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090fe:	2b04      	cmp	r3, #4
 8009100:	d004      	beq.n	800910c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009108:	2b00      	cmp	r3, #0
 800910a:	d103      	bne.n	8009114 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800910c:	2180      	movs	r1, #128	; 0x80
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f004 f998 	bl	800d444 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800911a:	2b01      	cmp	r3, #1
 800911c:	d11d      	bne.n	800915a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f7ff fe81 	bl	8008e26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800912c:	e015      	b.n	800915a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00d      	beq.n	8009156 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009140:	2b03      	cmp	r3, #3
 8009142:	d108      	bne.n	8009156 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800914a:	695b      	ldr	r3, [r3, #20]
 800914c:	7afa      	ldrb	r2, [r7, #11]
 800914e:	4611      	mov	r1, r2
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	4798      	blx	r3
 8009154:	e001      	b.n	800915a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009156:	2302      	movs	r3, #2
 8009158:	e000      	b.n	800915c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800916c:	2340      	movs	r3, #64	; 0x40
 800916e:	2200      	movs	r2, #0
 8009170:	2100      	movs	r1, #0
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f004 f921 	bl	800d3ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2240      	movs	r2, #64	; 0x40
 8009184:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009188:	2340      	movs	r3, #64	; 0x40
 800918a:	2200      	movs	r2, #0
 800918c:	2180      	movs	r1, #128	; 0x80
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f004 f913 	bl	800d3ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2240      	movs	r2, #64	; 0x40
 800919e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d009      	beq.n	80091dc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	6852      	ldr	r2, [r2, #4]
 80091d4:	b2d2      	uxtb	r2, r2
 80091d6:	4611      	mov	r1, r2
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	4798      	blx	r3
  }

  return USBD_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	460b      	mov	r3, r1
 80091f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	78fa      	ldrb	r2, [r7, #3]
 80091f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	370c      	adds	r7, #12
 80091fe:	46bd      	mov	sp, r7
 8009200:	bc80      	pop	{r7}
 8009202:	4770      	bx	lr

08009204 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2204      	movs	r2, #4
 800921c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	bc80      	pop	{r7}
 800922a:	4770      	bx	lr

0800922c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800923a:	2b04      	cmp	r3, #4
 800923c:	d105      	bne.n	800924a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	bc80      	pop	{r7}
 8009254:	4770      	bx	lr

08009256 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b082      	sub	sp, #8
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009264:	2b03      	cmp	r3, #3
 8009266:	d10b      	bne.n	8009280 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800926e:	69db      	ldr	r3, [r3, #28]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
	...

0800928c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092a2:	2b40      	cmp	r3, #64	; 0x40
 80092a4:	d005      	beq.n	80092b2 <USBD_StdDevReq+0x26>
 80092a6:	2b40      	cmp	r3, #64	; 0x40
 80092a8:	d84f      	bhi.n	800934a <USBD_StdDevReq+0xbe>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d009      	beq.n	80092c2 <USBD_StdDevReq+0x36>
 80092ae:	2b20      	cmp	r3, #32
 80092b0:	d14b      	bne.n	800934a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	4798      	blx	r3
      break;
 80092c0:	e048      	b.n	8009354 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	785b      	ldrb	r3, [r3, #1]
 80092c6:	2b09      	cmp	r3, #9
 80092c8:	d839      	bhi.n	800933e <USBD_StdDevReq+0xb2>
 80092ca:	a201      	add	r2, pc, #4	; (adr r2, 80092d0 <USBD_StdDevReq+0x44>)
 80092cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d0:	08009321 	.word	0x08009321
 80092d4:	08009335 	.word	0x08009335
 80092d8:	0800933f 	.word	0x0800933f
 80092dc:	0800932b 	.word	0x0800932b
 80092e0:	0800933f 	.word	0x0800933f
 80092e4:	08009303 	.word	0x08009303
 80092e8:	080092f9 	.word	0x080092f9
 80092ec:	0800933f 	.word	0x0800933f
 80092f0:	08009317 	.word	0x08009317
 80092f4:	0800930d 	.word	0x0800930d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f9dc 	bl	80096b8 <USBD_GetDescriptor>
          break;
 8009300:	e022      	b.n	8009348 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fb3f 	bl	8009988 <USBD_SetAddress>
          break;
 800930a:	e01d      	b.n	8009348 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fb7e 	bl	8009a10 <USBD_SetConfig>
          break;
 8009314:	e018      	b.n	8009348 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fc07 	bl	8009b2c <USBD_GetConfig>
          break;
 800931e:	e013      	b.n	8009348 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fc37 	bl	8009b96 <USBD_GetStatus>
          break;
 8009328:	e00e      	b.n	8009348 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fc65 	bl	8009bfc <USBD_SetFeature>
          break;
 8009332:	e009      	b.n	8009348 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fc74 	bl	8009c24 <USBD_ClrFeature>
          break;
 800933c:	e004      	b.n	8009348 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800933e:	6839      	ldr	r1, [r7, #0]
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 fccc 	bl	8009cde <USBD_CtlError>
          break;
 8009346:	bf00      	nop
      }
      break;
 8009348:	e004      	b.n	8009354 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fcc6 	bl	8009cde <USBD_CtlError>
      break;
 8009352:	bf00      	nop
  }

  return ret;
 8009354:	7bfb      	ldrb	r3, [r7, #15]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop

08009360 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009376:	2b40      	cmp	r3, #64	; 0x40
 8009378:	d005      	beq.n	8009386 <USBD_StdItfReq+0x26>
 800937a:	2b40      	cmp	r3, #64	; 0x40
 800937c:	d82e      	bhi.n	80093dc <USBD_StdItfReq+0x7c>
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <USBD_StdItfReq+0x26>
 8009382:	2b20      	cmp	r3, #32
 8009384:	d12a      	bne.n	80093dc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800938c:	3b01      	subs	r3, #1
 800938e:	2b02      	cmp	r3, #2
 8009390:	d81d      	bhi.n	80093ce <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	889b      	ldrh	r3, [r3, #4]
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b01      	cmp	r3, #1
 800939a:	d813      	bhi.n	80093c4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	4798      	blx	r3
 80093aa:	4603      	mov	r3, r0
 80093ac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	88db      	ldrh	r3, [r3, #6]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d110      	bne.n	80093d8 <USBD_StdItfReq+0x78>
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10d      	bne.n	80093d8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fd56 	bl	8009e6e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80093c2:	e009      	b.n	80093d8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fc89 	bl	8009cde <USBD_CtlError>
          break;
 80093cc:	e004      	b.n	80093d8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fc84 	bl	8009cde <USBD_CtlError>
          break;
 80093d6:	e000      	b.n	80093da <USBD_StdItfReq+0x7a>
          break;
 80093d8:	bf00      	nop
      }
      break;
 80093da:	e004      	b.n	80093e6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fc7d 	bl	8009cde <USBD_CtlError>
      break;
 80093e4:	bf00      	nop
  }

  return USBD_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80093fa:	2300      	movs	r3, #0
 80093fc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	889b      	ldrh	r3, [r3, #4]
 8009402:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800940c:	2b40      	cmp	r3, #64	; 0x40
 800940e:	d007      	beq.n	8009420 <USBD_StdEPReq+0x30>
 8009410:	2b40      	cmp	r3, #64	; 0x40
 8009412:	f200 8146 	bhi.w	80096a2 <USBD_StdEPReq+0x2b2>
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00a      	beq.n	8009430 <USBD_StdEPReq+0x40>
 800941a:	2b20      	cmp	r3, #32
 800941c:	f040 8141 	bne.w	80096a2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	4798      	blx	r3
      break;
 800942e:	e13d      	b.n	80096ac <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009438:	2b20      	cmp	r3, #32
 800943a:	d10a      	bne.n	8009452 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	4798      	blx	r3
 800944a:	4603      	mov	r3, r0
 800944c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800944e:	7bfb      	ldrb	r3, [r7, #15]
 8009450:	e12d      	b.n	80096ae <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	785b      	ldrb	r3, [r3, #1]
 8009456:	2b03      	cmp	r3, #3
 8009458:	d007      	beq.n	800946a <USBD_StdEPReq+0x7a>
 800945a:	2b03      	cmp	r3, #3
 800945c:	f300 811b 	bgt.w	8009696 <USBD_StdEPReq+0x2a6>
 8009460:	2b00      	cmp	r3, #0
 8009462:	d072      	beq.n	800954a <USBD_StdEPReq+0x15a>
 8009464:	2b01      	cmp	r3, #1
 8009466:	d03a      	beq.n	80094de <USBD_StdEPReq+0xee>
 8009468:	e115      	b.n	8009696 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009470:	2b02      	cmp	r3, #2
 8009472:	d002      	beq.n	800947a <USBD_StdEPReq+0x8a>
 8009474:	2b03      	cmp	r3, #3
 8009476:	d015      	beq.n	80094a4 <USBD_StdEPReq+0xb4>
 8009478:	e02b      	b.n	80094d2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00c      	beq.n	800949a <USBD_StdEPReq+0xaa>
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	2b80      	cmp	r3, #128	; 0x80
 8009484:	d009      	beq.n	800949a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009486:	7bbb      	ldrb	r3, [r7, #14]
 8009488:	4619      	mov	r1, r3
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f003 ffda 	bl	800d444 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009490:	2180      	movs	r1, #128	; 0x80
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f003 ffd6 	bl	800d444 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009498:	e020      	b.n	80094dc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800949a:	6839      	ldr	r1, [r7, #0]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 fc1e 	bl	8009cde <USBD_CtlError>
              break;
 80094a2:	e01b      	b.n	80094dc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	885b      	ldrh	r3, [r3, #2]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10e      	bne.n	80094ca <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00b      	beq.n	80094ca <USBD_StdEPReq+0xda>
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
 80094b4:	2b80      	cmp	r3, #128	; 0x80
 80094b6:	d008      	beq.n	80094ca <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	88db      	ldrh	r3, [r3, #6]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d104      	bne.n	80094ca <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80094c0:	7bbb      	ldrb	r3, [r7, #14]
 80094c2:	4619      	mov	r1, r3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f003 ffbd 	bl	800d444 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fccf 	bl	8009e6e <USBD_CtlSendStatus>

              break;
 80094d0:	e004      	b.n	80094dc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fc02 	bl	8009cde <USBD_CtlError>
              break;
 80094da:	bf00      	nop
          }
          break;
 80094dc:	e0e0      	b.n	80096a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d002      	beq.n	80094ee <USBD_StdEPReq+0xfe>
 80094e8:	2b03      	cmp	r3, #3
 80094ea:	d015      	beq.n	8009518 <USBD_StdEPReq+0x128>
 80094ec:	e026      	b.n	800953c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00c      	beq.n	800950e <USBD_StdEPReq+0x11e>
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
 80094f6:	2b80      	cmp	r3, #128	; 0x80
 80094f8:	d009      	beq.n	800950e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80094fa:	7bbb      	ldrb	r3, [r7, #14]
 80094fc:	4619      	mov	r1, r3
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f003 ffa0 	bl	800d444 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009504:	2180      	movs	r1, #128	; 0x80
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f003 ff9c 	bl	800d444 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800950c:	e01c      	b.n	8009548 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fbe4 	bl	8009cde <USBD_CtlError>
              break;
 8009516:	e017      	b.n	8009548 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	885b      	ldrh	r3, [r3, #2]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d112      	bne.n	8009546 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009520:	7bbb      	ldrb	r3, [r7, #14]
 8009522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009526:	2b00      	cmp	r3, #0
 8009528:	d004      	beq.n	8009534 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f003 ffa7 	bl	800d482 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fc9a 	bl	8009e6e <USBD_CtlSendStatus>
              }
              break;
 800953a:	e004      	b.n	8009546 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fbcd 	bl	8009cde <USBD_CtlError>
              break;
 8009544:	e000      	b.n	8009548 <USBD_StdEPReq+0x158>
              break;
 8009546:	bf00      	nop
          }
          break;
 8009548:	e0aa      	b.n	80096a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009550:	2b02      	cmp	r3, #2
 8009552:	d002      	beq.n	800955a <USBD_StdEPReq+0x16a>
 8009554:	2b03      	cmp	r3, #3
 8009556:	d032      	beq.n	80095be <USBD_StdEPReq+0x1ce>
 8009558:	e097      	b.n	800968a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800955a:	7bbb      	ldrb	r3, [r7, #14]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d007      	beq.n	8009570 <USBD_StdEPReq+0x180>
 8009560:	7bbb      	ldrb	r3, [r7, #14]
 8009562:	2b80      	cmp	r3, #128	; 0x80
 8009564:	d004      	beq.n	8009570 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009566:	6839      	ldr	r1, [r7, #0]
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fbb8 	bl	8009cde <USBD_CtlError>
                break;
 800956e:	e091      	b.n	8009694 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009574:	2b00      	cmp	r3, #0
 8009576:	da0b      	bge.n	8009590 <USBD_StdEPReq+0x1a0>
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800957e:	4613      	mov	r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4413      	add	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	3310      	adds	r3, #16
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	4413      	add	r3, r2
 800958c:	3304      	adds	r3, #4
 800958e:	e00b      	b.n	80095a8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009590:	7bbb      	ldrb	r3, [r7, #14]
 8009592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009596:	4613      	mov	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4413      	add	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	4413      	add	r3, r2
 80095a6:	3304      	adds	r3, #4
 80095a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	2200      	movs	r2, #0
 80095ae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2202      	movs	r2, #2
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fbfb 	bl	8009db2 <USBD_CtlSendData>
              break;
 80095bc:	e06a      	b.n	8009694 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80095be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	da11      	bge.n	80095ea <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095c6:	7bbb      	ldrb	r3, [r7, #14]
 80095c8:	f003 020f 	and.w	r2, r3, #15
 80095cc:	6879      	ldr	r1, [r7, #4]
 80095ce:	4613      	mov	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	440b      	add	r3, r1
 80095d8:	3318      	adds	r3, #24
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d117      	bne.n	8009610 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fb7b 	bl	8009cde <USBD_CtlError>
                  break;
 80095e8:	e054      	b.n	8009694 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80095ea:	7bbb      	ldrb	r3, [r7, #14]
 80095ec:	f003 020f 	and.w	r2, r3, #15
 80095f0:	6879      	ldr	r1, [r7, #4]
 80095f2:	4613      	mov	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4413      	add	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	440b      	add	r3, r1
 80095fc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d104      	bne.n	8009610 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fb68 	bl	8009cde <USBD_CtlError>
                  break;
 800960e:	e041      	b.n	8009694 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009614:	2b00      	cmp	r3, #0
 8009616:	da0b      	bge.n	8009630 <USBD_StdEPReq+0x240>
 8009618:	7bbb      	ldrb	r3, [r7, #14]
 800961a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800961e:	4613      	mov	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	3310      	adds	r3, #16
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	4413      	add	r3, r2
 800962c:	3304      	adds	r3, #4
 800962e:	e00b      	b.n	8009648 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009630:	7bbb      	ldrb	r3, [r7, #14]
 8009632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009636:	4613      	mov	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	4413      	add	r3, r2
 8009646:	3304      	adds	r3, #4
 8009648:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800964a:	7bbb      	ldrb	r3, [r7, #14]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <USBD_StdEPReq+0x266>
 8009650:	7bbb      	ldrb	r3, [r7, #14]
 8009652:	2b80      	cmp	r3, #128	; 0x80
 8009654:	d103      	bne.n	800965e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2200      	movs	r2, #0
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	e00e      	b.n	800967c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800965e:	7bbb      	ldrb	r3, [r7, #14]
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f003 ff2c 	bl	800d4c0 <USBD_LL_IsStallEP>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d003      	beq.n	8009676 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2201      	movs	r2, #1
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	e002      	b.n	800967c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	2200      	movs	r2, #0
 800967a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	2202      	movs	r2, #2
 8009680:	4619      	mov	r1, r3
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 fb95 	bl	8009db2 <USBD_CtlSendData>
              break;
 8009688:	e004      	b.n	8009694 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800968a:	6839      	ldr	r1, [r7, #0]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 fb26 	bl	8009cde <USBD_CtlError>
              break;
 8009692:	bf00      	nop
          }
          break;
 8009694:	e004      	b.n	80096a0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fb20 	bl	8009cde <USBD_CtlError>
          break;
 800969e:	bf00      	nop
      }
      break;
 80096a0:	e004      	b.n	80096ac <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 fb1a 	bl	8009cde <USBD_CtlError>
      break;
 80096aa:	bf00      	nop
  }

  return ret;
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
	...

080096b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096c2:	2300      	movs	r3, #0
 80096c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80096c6:	2300      	movs	r3, #0
 80096c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80096ca:	2300      	movs	r3, #0
 80096cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	885b      	ldrh	r3, [r3, #2]
 80096d2:	0a1b      	lsrs	r3, r3, #8
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	3b01      	subs	r3, #1
 80096d8:	2b06      	cmp	r3, #6
 80096da:	f200 8128 	bhi.w	800992e <USBD_GetDescriptor+0x276>
 80096de:	a201      	add	r2, pc, #4	; (adr r2, 80096e4 <USBD_GetDescriptor+0x2c>)
 80096e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e4:	08009701 	.word	0x08009701
 80096e8:	08009719 	.word	0x08009719
 80096ec:	08009759 	.word	0x08009759
 80096f0:	0800992f 	.word	0x0800992f
 80096f4:	0800992f 	.word	0x0800992f
 80096f8:	080098cf 	.word	0x080098cf
 80096fc:	080098fb 	.word	0x080098fb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	7c12      	ldrb	r2, [r2, #16]
 800970c:	f107 0108 	add.w	r1, r7, #8
 8009710:	4610      	mov	r0, r2
 8009712:	4798      	blx	r3
 8009714:	60f8      	str	r0, [r7, #12]
      break;
 8009716:	e112      	b.n	800993e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	7c1b      	ldrb	r3, [r3, #16]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10d      	bne.n	800973c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009728:	f107 0208 	add.w	r2, r7, #8
 800972c:	4610      	mov	r0, r2
 800972e:	4798      	blx	r3
 8009730:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3301      	adds	r3, #1
 8009736:	2202      	movs	r2, #2
 8009738:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800973a:	e100      	b.n	800993e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009744:	f107 0208 	add.w	r2, r7, #8
 8009748:	4610      	mov	r0, r2
 800974a:	4798      	blx	r3
 800974c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3301      	adds	r3, #1
 8009752:	2202      	movs	r2, #2
 8009754:	701a      	strb	r2, [r3, #0]
      break;
 8009756:	e0f2      	b.n	800993e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	885b      	ldrh	r3, [r3, #2]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b05      	cmp	r3, #5
 8009760:	f200 80ac 	bhi.w	80098bc <USBD_GetDescriptor+0x204>
 8009764:	a201      	add	r2, pc, #4	; (adr r2, 800976c <USBD_GetDescriptor+0xb4>)
 8009766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976a:	bf00      	nop
 800976c:	08009785 	.word	0x08009785
 8009770:	080097b9 	.word	0x080097b9
 8009774:	080097ed 	.word	0x080097ed
 8009778:	08009821 	.word	0x08009821
 800977c:	08009855 	.word	0x08009855
 8009780:	08009889 	.word	0x08009889
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00b      	beq.n	80097a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	7c12      	ldrb	r2, [r2, #16]
 800979c:	f107 0108 	add.w	r1, r7, #8
 80097a0:	4610      	mov	r0, r2
 80097a2:	4798      	blx	r3
 80097a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097a6:	e091      	b.n	80098cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fa97 	bl	8009cde <USBD_CtlError>
            err++;
 80097b0:	7afb      	ldrb	r3, [r7, #11]
 80097b2:	3301      	adds	r3, #1
 80097b4:	72fb      	strb	r3, [r7, #11]
          break;
 80097b6:	e089      	b.n	80098cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00b      	beq.n	80097dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	7c12      	ldrb	r2, [r2, #16]
 80097d0:	f107 0108 	add.w	r1, r7, #8
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
 80097d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097da:	e077      	b.n	80098cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa7d 	bl	8009cde <USBD_CtlError>
            err++;
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	3301      	adds	r3, #1
 80097e8:	72fb      	strb	r3, [r7, #11]
          break;
 80097ea:	e06f      	b.n	80098cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00b      	beq.n	8009810 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	7c12      	ldrb	r2, [r2, #16]
 8009804:	f107 0108 	add.w	r1, r7, #8
 8009808:	4610      	mov	r0, r2
 800980a:	4798      	blx	r3
 800980c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800980e:	e05d      	b.n	80098cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fa63 	bl	8009cde <USBD_CtlError>
            err++;
 8009818:	7afb      	ldrb	r3, [r7, #11]
 800981a:	3301      	adds	r3, #1
 800981c:	72fb      	strb	r3, [r7, #11]
          break;
 800981e:	e055      	b.n	80098cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00b      	beq.n	8009844 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	7c12      	ldrb	r2, [r2, #16]
 8009838:	f107 0108 	add.w	r1, r7, #8
 800983c:	4610      	mov	r0, r2
 800983e:	4798      	blx	r3
 8009840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009842:	e043      	b.n	80098cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fa49 	bl	8009cde <USBD_CtlError>
            err++;
 800984c:	7afb      	ldrb	r3, [r7, #11]
 800984e:	3301      	adds	r3, #1
 8009850:	72fb      	strb	r3, [r7, #11]
          break;
 8009852:	e03b      	b.n	80098cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800985a:	695b      	ldr	r3, [r3, #20]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00b      	beq.n	8009878 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	7c12      	ldrb	r2, [r2, #16]
 800986c:	f107 0108 	add.w	r1, r7, #8
 8009870:	4610      	mov	r0, r2
 8009872:	4798      	blx	r3
 8009874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009876:	e029      	b.n	80098cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fa2f 	bl	8009cde <USBD_CtlError>
            err++;
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	3301      	adds	r3, #1
 8009884:	72fb      	strb	r3, [r7, #11]
          break;
 8009886:	e021      	b.n	80098cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00b      	beq.n	80098ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	7c12      	ldrb	r2, [r2, #16]
 80098a0:	f107 0108 	add.w	r1, r7, #8
 80098a4:	4610      	mov	r0, r2
 80098a6:	4798      	blx	r3
 80098a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098aa:	e00f      	b.n	80098cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098ac:	6839      	ldr	r1, [r7, #0]
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 fa15 	bl	8009cde <USBD_CtlError>
            err++;
 80098b4:	7afb      	ldrb	r3, [r7, #11]
 80098b6:	3301      	adds	r3, #1
 80098b8:	72fb      	strb	r3, [r7, #11]
          break;
 80098ba:	e007      	b.n	80098cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fa0d 	bl	8009cde <USBD_CtlError>
          err++;
 80098c4:	7afb      	ldrb	r3, [r7, #11]
 80098c6:	3301      	adds	r3, #1
 80098c8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80098ca:	e038      	b.n	800993e <USBD_GetDescriptor+0x286>
 80098cc:	e037      	b.n	800993e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	7c1b      	ldrb	r3, [r3, #16]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d109      	bne.n	80098ea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098de:	f107 0208 	add.w	r2, r7, #8
 80098e2:	4610      	mov	r0, r2
 80098e4:	4798      	blx	r3
 80098e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098e8:	e029      	b.n	800993e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f9f6 	bl	8009cde <USBD_CtlError>
        err++;
 80098f2:	7afb      	ldrb	r3, [r7, #11]
 80098f4:	3301      	adds	r3, #1
 80098f6:	72fb      	strb	r3, [r7, #11]
      break;
 80098f8:	e021      	b.n	800993e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	7c1b      	ldrb	r3, [r3, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10d      	bne.n	800991e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990a:	f107 0208 	add.w	r2, r7, #8
 800990e:	4610      	mov	r0, r2
 8009910:	4798      	blx	r3
 8009912:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	3301      	adds	r3, #1
 8009918:	2207      	movs	r2, #7
 800991a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800991c:	e00f      	b.n	800993e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f9dc 	bl	8009cde <USBD_CtlError>
        err++;
 8009926:	7afb      	ldrb	r3, [r7, #11]
 8009928:	3301      	adds	r3, #1
 800992a:	72fb      	strb	r3, [r7, #11]
      break;
 800992c:	e007      	b.n	800993e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f9d4 	bl	8009cde <USBD_CtlError>
      err++;
 8009936:	7afb      	ldrb	r3, [r7, #11]
 8009938:	3301      	adds	r3, #1
 800993a:	72fb      	strb	r3, [r7, #11]
      break;
 800993c:	bf00      	nop
  }

  if (err != 0U)
 800993e:	7afb      	ldrb	r3, [r7, #11]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d11c      	bne.n	800997e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009944:	893b      	ldrh	r3, [r7, #8]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d011      	beq.n	800996e <USBD_GetDescriptor+0x2b6>
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	88db      	ldrh	r3, [r3, #6]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00d      	beq.n	800996e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	88da      	ldrh	r2, [r3, #6]
 8009956:	893b      	ldrh	r3, [r7, #8]
 8009958:	4293      	cmp	r3, r2
 800995a:	bf28      	it	cs
 800995c:	4613      	movcs	r3, r2
 800995e:	b29b      	uxth	r3, r3
 8009960:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009962:	893b      	ldrh	r3, [r7, #8]
 8009964:	461a      	mov	r2, r3
 8009966:	68f9      	ldr	r1, [r7, #12]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 fa22 	bl	8009db2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	88db      	ldrh	r3, [r3, #6]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d104      	bne.n	8009980 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fa79 	bl	8009e6e <USBD_CtlSendStatus>
 800997c:	e000      	b.n	8009980 <USBD_GetDescriptor+0x2c8>
    return;
 800997e:	bf00      	nop
    }
  }
}
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop

08009988 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	889b      	ldrh	r3, [r3, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d130      	bne.n	80099fc <USBD_SetAddress+0x74>
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	88db      	ldrh	r3, [r3, #6]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d12c      	bne.n	80099fc <USBD_SetAddress+0x74>
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	885b      	ldrh	r3, [r3, #2]
 80099a6:	2b7f      	cmp	r3, #127	; 0x7f
 80099a8:	d828      	bhi.n	80099fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	885b      	ldrh	r3, [r3, #2]
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099bc:	2b03      	cmp	r3, #3
 80099be:	d104      	bne.n	80099ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f98b 	bl	8009cde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099c8:	e01d      	b.n	8009a06 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	7bfa      	ldrb	r2, [r7, #15]
 80099ce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
 80099d4:	4619      	mov	r1, r3
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f003 fd9e 	bl	800d518 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fa46 	bl	8009e6e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d004      	beq.n	80099f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2202      	movs	r2, #2
 80099ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099f0:	e009      	b.n	8009a06 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099fa:	e004      	b.n	8009a06 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80099fc:	6839      	ldr	r1, [r7, #0]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f96d 	bl	8009cde <USBD_CtlError>
  }
}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
	...

08009a10 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	885b      	ldrh	r3, [r3, #2]
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	4b41      	ldr	r3, [pc, #260]	; (8009b28 <USBD_SetConfig+0x118>)
 8009a22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a24:	4b40      	ldr	r3, [pc, #256]	; (8009b28 <USBD_SetConfig+0x118>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d904      	bls.n	8009a36 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f955 	bl	8009cde <USBD_CtlError>
 8009a34:	e075      	b.n	8009b22 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d002      	beq.n	8009a46 <USBD_SetConfig+0x36>
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	d023      	beq.n	8009a8c <USBD_SetConfig+0x7c>
 8009a44:	e062      	b.n	8009b0c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009a46:	4b38      	ldr	r3, [pc, #224]	; (8009b28 <USBD_SetConfig+0x118>)
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d01a      	beq.n	8009a84 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009a4e:	4b36      	ldr	r3, [pc, #216]	; (8009b28 <USBD_SetConfig+0x118>)
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2203      	movs	r2, #3
 8009a5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a60:	4b31      	ldr	r3, [pc, #196]	; (8009b28 <USBD_SetConfig+0x118>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	4619      	mov	r1, r3
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f7ff f9e7 	bl	8008e3a <USBD_SetClassConfig>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d104      	bne.n	8009a7c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f932 	bl	8009cde <USBD_CtlError>
            return;
 8009a7a:	e052      	b.n	8009b22 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f9f6 	bl	8009e6e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009a82:	e04e      	b.n	8009b22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f9f2 	bl	8009e6e <USBD_CtlSendStatus>
        break;
 8009a8a:	e04a      	b.n	8009b22 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009a8c:	4b26      	ldr	r3, [pc, #152]	; (8009b28 <USBD_SetConfig+0x118>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d112      	bne.n	8009aba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2202      	movs	r2, #2
 8009a98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009a9c:	4b22      	ldr	r3, [pc, #136]	; (8009b28 <USBD_SetConfig+0x118>)
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009aa6:	4b20      	ldr	r3, [pc, #128]	; (8009b28 <USBD_SetConfig+0x118>)
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f7ff f9e3 	bl	8008e78 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f9db 	bl	8009e6e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009ab8:	e033      	b.n	8009b22 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009aba:	4b1b      	ldr	r3, [pc, #108]	; (8009b28 <USBD_SetConfig+0x118>)
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d01d      	beq.n	8009b04 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f7ff f9d1 	bl	8008e78 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009ad6:	4b14      	ldr	r3, [pc, #80]	; (8009b28 <USBD_SetConfig+0x118>)
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	461a      	mov	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ae0:	4b11      	ldr	r3, [pc, #68]	; (8009b28 <USBD_SetConfig+0x118>)
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff f9a7 	bl	8008e3a <USBD_SetClassConfig>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d104      	bne.n	8009afc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f8f2 	bl	8009cde <USBD_CtlError>
            return;
 8009afa:	e012      	b.n	8009b22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f9b6 	bl	8009e6e <USBD_CtlSendStatus>
        break;
 8009b02:	e00e      	b.n	8009b22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f9b2 	bl	8009e6e <USBD_CtlSendStatus>
        break;
 8009b0a:	e00a      	b.n	8009b22 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f8e5 	bl	8009cde <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009b14:	4b04      	ldr	r3, [pc, #16]	; (8009b28 <USBD_SetConfig+0x118>)
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff f9ac 	bl	8008e78 <USBD_ClrClassConfig>
        break;
 8009b20:	bf00      	nop
    }
  }
}
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	200001b2 	.word	0x200001b2

08009b2c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	88db      	ldrh	r3, [r3, #6]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d004      	beq.n	8009b48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f8cc 	bl	8009cde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b46:	e022      	b.n	8009b8e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	dc02      	bgt.n	8009b58 <USBD_GetConfig+0x2c>
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	dc03      	bgt.n	8009b5e <USBD_GetConfig+0x32>
 8009b56:	e015      	b.n	8009b84 <USBD_GetConfig+0x58>
 8009b58:	2b03      	cmp	r3, #3
 8009b5a:	d00b      	beq.n	8009b74 <USBD_GetConfig+0x48>
 8009b5c:	e012      	b.n	8009b84 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3308      	adds	r3, #8
 8009b68:	2201      	movs	r2, #1
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f920 	bl	8009db2 <USBD_CtlSendData>
        break;
 8009b72:	e00c      	b.n	8009b8e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	3304      	adds	r3, #4
 8009b78:	2201      	movs	r2, #1
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f918 	bl	8009db2 <USBD_CtlSendData>
        break;
 8009b82:	e004      	b.n	8009b8e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f8a9 	bl	8009cde <USBD_CtlError>
        break;
 8009b8c:	bf00      	nop
}
 8009b8e:	bf00      	nop
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b082      	sub	sp, #8
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
 8009b9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d81e      	bhi.n	8009bea <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	88db      	ldrh	r3, [r3, #6]
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d004      	beq.n	8009bbe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f891 	bl	8009cde <USBD_CtlError>
        break;
 8009bbc:	e01a      	b.n	8009bf4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d005      	beq.n	8009bda <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	f043 0202 	orr.w	r2, r3, #2
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	330c      	adds	r3, #12
 8009bde:	2202      	movs	r2, #2
 8009be0:	4619      	mov	r1, r3
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f8e5 	bl	8009db2 <USBD_CtlSendData>
      break;
 8009be8:	e004      	b.n	8009bf4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009bea:	6839      	ldr	r1, [r7, #0]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f876 	bl	8009cde <USBD_CtlError>
      break;
 8009bf2:	bf00      	nop
  }
}
 8009bf4:	bf00      	nop
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	885b      	ldrh	r3, [r3, #2]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d106      	bne.n	8009c1c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f929 	bl	8009e6e <USBD_CtlSendStatus>
  }
}
 8009c1c:	bf00      	nop
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c34:	3b01      	subs	r3, #1
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d80b      	bhi.n	8009c52 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	885b      	ldrh	r3, [r3, #2]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d10c      	bne.n	8009c5c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f90f 	bl	8009e6e <USBD_CtlSendStatus>
      }
      break;
 8009c50:	e004      	b.n	8009c5c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f842 	bl	8009cde <USBD_CtlError>
      break;
 8009c5a:	e000      	b.n	8009c5e <USBD_ClrFeature+0x3a>
      break;
 8009c5c:	bf00      	nop
  }
}
 8009c5e:	bf00      	nop
 8009c60:	3708      	adds	r7, #8
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c66:	b480      	push	{r7}
 8009c68:	b083      	sub	sp, #12
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	781a      	ldrb	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	785a      	ldrb	r2, [r3, #1]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	3302      	adds	r3, #2
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	3303      	adds	r3, #3
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	021b      	lsls	r3, r3, #8
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	4413      	add	r3, r2
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	3305      	adds	r3, #5
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	021b      	lsls	r3, r3, #8
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	4413      	add	r3, r2
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	3306      	adds	r3, #6
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	3307      	adds	r3, #7
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	021b      	lsls	r3, r3, #8
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	4413      	add	r3, r2
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	80da      	strh	r2, [r3, #6]

}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bc80      	pop	{r7}
 8009cdc:	4770      	bx	lr

08009cde <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b082      	sub	sp, #8
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009ce8:	2180      	movs	r1, #128	; 0x80
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f003 fbaa 	bl	800d444 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f003 fba6 	bl	800d444 <USBD_LL_StallEP>
}
 8009cf8:	bf00      	nop
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d032      	beq.n	8009d7c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 f834 	bl	8009d84 <USBD_GetLen>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	3301      	adds	r3, #1
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	1c5a      	adds	r2, r3, #1
 8009d2e:	75fa      	strb	r2, [r7, #23]
 8009d30:	461a      	mov	r2, r3
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	4413      	add	r3, r2
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	7812      	ldrb	r2, [r2, #0]
 8009d3a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	1c5a      	adds	r2, r3, #1
 8009d40:	75fa      	strb	r2, [r7, #23]
 8009d42:	461a      	mov	r2, r3
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	4413      	add	r3, r2
 8009d48:	2203      	movs	r2, #3
 8009d4a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009d4c:	e012      	b.n	8009d74 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	1c5a      	adds	r2, r3, #1
 8009d52:	60fa      	str	r2, [r7, #12]
 8009d54:	7dfa      	ldrb	r2, [r7, #23]
 8009d56:	1c51      	adds	r1, r2, #1
 8009d58:	75f9      	strb	r1, [r7, #23]
 8009d5a:	4611      	mov	r1, r2
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	440a      	add	r2, r1
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
 8009d66:	1c5a      	adds	r2, r3, #1
 8009d68:	75fa      	strb	r2, [r7, #23]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	4413      	add	r3, r2
 8009d70:	2200      	movs	r2, #0
 8009d72:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1e8      	bne.n	8009d4e <USBD_GetString+0x4e>
    }
  }
}
 8009d7c:	bf00      	nop
 8009d7e:	3718      	adds	r7, #24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009d90:	e005      	b.n	8009d9e <USBD_GetLen+0x1a>
  {
    len++;
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
 8009d94:	3301      	adds	r3, #1
 8009d96:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1f5      	bne.n	8009d92 <USBD_GetLen+0xe>
  }

  return len;
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bc80      	pop	{r7}
 8009db0:	4770      	bx	lr

08009db2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b084      	sub	sp, #16
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009dc8:	88fa      	ldrh	r2, [r7, #6]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009dce:	88fa      	ldrh	r2, [r7, #6]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009dd4:	88fb      	ldrh	r3, [r7, #6]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	2100      	movs	r1, #0
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f003 fbbb 	bl	800d556 <USBD_LL_Transmit>

  return USBD_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b084      	sub	sp, #16
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	60f8      	str	r0, [r7, #12]
 8009df2:	60b9      	str	r1, [r7, #8]
 8009df4:	4613      	mov	r3, r2
 8009df6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009df8:	88fb      	ldrh	r3, [r7, #6]
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f003 fba9 	bl	800d556 <USBD_LL_Transmit>

  return USBD_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b084      	sub	sp, #16
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	60f8      	str	r0, [r7, #12]
 8009e16:	60b9      	str	r1, [r7, #8]
 8009e18:	4613      	mov	r3, r2
 8009e1a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2203      	movs	r2, #3
 8009e20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009e24:	88fa      	ldrh	r2, [r7, #6]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009e2c:	88fa      	ldrh	r2, [r7, #6]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e34:	88fb      	ldrh	r3, [r7, #6]
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	2100      	movs	r1, #0
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f003 fbae 	bl	800d59c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b084      	sub	sp, #16
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	60f8      	str	r0, [r7, #12]
 8009e52:	60b9      	str	r1, [r7, #8]
 8009e54:	4613      	mov	r3, r2
 8009e56:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e58:	88fb      	ldrh	r3, [r7, #6]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	f003 fb9c 	bl	800d59c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b082      	sub	sp, #8
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2204      	movs	r2, #4
 8009e7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e7e:	2300      	movs	r3, #0
 8009e80:	2200      	movs	r2, #0
 8009e82:	2100      	movs	r1, #0
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f003 fb66 	bl	800d556 <USBD_LL_Transmit>

  return USBD_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2205      	movs	r2, #5
 8009ea0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f003 fb76 	bl	800d59c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
	...

08009ebc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ec2:	f3ef 8305 	mrs	r3, IPSR
 8009ec6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ec8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10f      	bne.n	8009eee <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ece:	f3ef 8310 	mrs	r3, PRIMASK
 8009ed2:	607b      	str	r3, [r7, #4]
  return(result);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d109      	bne.n	8009eee <osKernelInitialize+0x32>
 8009eda:	4b10      	ldr	r3, [pc, #64]	; (8009f1c <osKernelInitialize+0x60>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d109      	bne.n	8009ef6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8009ee6:	603b      	str	r3, [r7, #0]
  return(result);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d003      	beq.n	8009ef6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009eee:	f06f 0305 	mvn.w	r3, #5
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	e00c      	b.n	8009f10 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009ef6:	4b09      	ldr	r3, [pc, #36]	; (8009f1c <osKernelInitialize+0x60>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d105      	bne.n	8009f0a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009efe:	4b07      	ldr	r3, [pc, #28]	; (8009f1c <osKernelInitialize+0x60>)
 8009f00:	2201      	movs	r2, #1
 8009f02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009f04:	2300      	movs	r3, #0
 8009f06:	60fb      	str	r3, [r7, #12]
 8009f08:	e002      	b.n	8009f10 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009f10:	68fb      	ldr	r3, [r7, #12]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bc80      	pop	{r7}
 8009f1a:	4770      	bx	lr
 8009f1c:	200001b4 	.word	0x200001b4

08009f20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f26:	f3ef 8305 	mrs	r3, IPSR
 8009f2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10f      	bne.n	8009f52 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f32:	f3ef 8310 	mrs	r3, PRIMASK
 8009f36:	607b      	str	r3, [r7, #4]
  return(result);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d109      	bne.n	8009f52 <osKernelStart+0x32>
 8009f3e:	4b11      	ldr	r3, [pc, #68]	; (8009f84 <osKernelStart+0x64>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d109      	bne.n	8009f5a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f46:	f3ef 8311 	mrs	r3, BASEPRI
 8009f4a:	603b      	str	r3, [r7, #0]
  return(result);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d003      	beq.n	8009f5a <osKernelStart+0x3a>
    stat = osErrorISR;
 8009f52:	f06f 0305 	mvn.w	r3, #5
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	e00e      	b.n	8009f78 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8009f5a:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <osKernelStart+0x64>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d107      	bne.n	8009f72 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8009f62:	4b08      	ldr	r3, [pc, #32]	; (8009f84 <osKernelStart+0x64>)
 8009f64:	2202      	movs	r2, #2
 8009f66:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009f68:	f001 f9ba 	bl	800b2e0 <vTaskStartScheduler>
      stat = osOK;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	60fb      	str	r3, [r7, #12]
 8009f70:	e002      	b.n	8009f78 <osKernelStart+0x58>
    } else {
      stat = osError;
 8009f72:	f04f 33ff 	mov.w	r3, #4294967295
 8009f76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009f78:	68fb      	ldr	r3, [r7, #12]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	200001b4 	.word	0x200001b4

08009f88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b092      	sub	sp, #72	; 0x48
 8009f8c:	af04      	add	r7, sp, #16
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009f94:	2300      	movs	r3, #0
 8009f96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f98:	f3ef 8305 	mrs	r3, IPSR
 8009f9c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f040 8094 	bne.w	800a0ce <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8009faa:	623b      	str	r3, [r7, #32]
  return(result);
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f040 808d 	bne.w	800a0ce <osThreadNew+0x146>
 8009fb4:	4b48      	ldr	r3, [pc, #288]	; (800a0d8 <osThreadNew+0x150>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d106      	bne.n	8009fca <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009fbc:	f3ef 8311 	mrs	r3, BASEPRI
 8009fc0:	61fb      	str	r3, [r7, #28]
  return(result);
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f040 8082 	bne.w	800a0ce <osThreadNew+0x146>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d07e      	beq.n	800a0ce <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8009fd0:	2380      	movs	r3, #128	; 0x80
 8009fd2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8009fd4:	2318      	movs	r3, #24
 8009fd6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8009fd8:	2300      	movs	r3, #0
 8009fda:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8009fdc:	f107 031b 	add.w	r3, r7, #27
 8009fe0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8009fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d045      	beq.n	800a07a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d002      	beq.n	8009ffc <osThreadNew+0x74>
        name = attr->name;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	699b      	ldr	r3, [r3, #24]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d008      	beq.n	800a022 <osThreadNew+0x9a>
 800a010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a012:	2b38      	cmp	r3, #56	; 0x38
 800a014:	d805      	bhi.n	800a022 <osThreadNew+0x9a>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f003 0301 	and.w	r3, r3, #1
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <osThreadNew+0x9e>
        return (NULL);
 800a022:	2300      	movs	r3, #0
 800a024:	e054      	b.n	800a0d0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	695b      	ldr	r3, [r3, #20]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d003      	beq.n	800a036 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	089b      	lsrs	r3, r3, #2
 800a034:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00e      	beq.n	800a05c <osThreadNew+0xd4>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	2b5b      	cmp	r3, #91	; 0x5b
 800a044:	d90a      	bls.n	800a05c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d006      	beq.n	800a05c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d002      	beq.n	800a05c <osThreadNew+0xd4>
        mem = 1;
 800a056:	2301      	movs	r3, #1
 800a058:	62bb      	str	r3, [r7, #40]	; 0x28
 800a05a:	e010      	b.n	800a07e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10c      	bne.n	800a07e <osThreadNew+0xf6>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d108      	bne.n	800a07e <osThreadNew+0xf6>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d104      	bne.n	800a07e <osThreadNew+0xf6>
          mem = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	62bb      	str	r3, [r7, #40]	; 0x28
 800a078:	e001      	b.n	800a07e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a080:	2b01      	cmp	r3, #1
 800a082:	d110      	bne.n	800a0a6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a08c:	9202      	str	r2, [sp, #8]
 800a08e:	9301      	str	r3, [sp, #4]
 800a090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a098:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f000 fed6 	bl	800ae4c <xTaskCreateStatic>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	e013      	b.n	800a0ce <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800a0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d110      	bne.n	800a0ce <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	f107 0314 	add.w	r3, r7, #20
 800a0b4:	9301      	str	r3, [sp, #4]
 800a0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f000 ff20 	bl	800af04 <xTaskCreate>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d001      	beq.n	800a0ce <osThreadNew+0x146>
          hTask = NULL;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a0ce:	697b      	ldr	r3, [r7, #20]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3738      	adds	r7, #56	; 0x38
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	200001b4 	.word	0x200001b4

0800a0dc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b086      	sub	sp, #24
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0e4:	f3ef 8305 	mrs	r3, IPSR
 800a0e8:	613b      	str	r3, [r7, #16]
  return(result);
 800a0ea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d10f      	bne.n	800a110 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a0f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d109      	bne.n	800a110 <osDelay+0x34>
 800a0fc:	4b0d      	ldr	r3, [pc, #52]	; (800a134 <osDelay+0x58>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b02      	cmp	r3, #2
 800a102:	d109      	bne.n	800a118 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a104:	f3ef 8311 	mrs	r3, BASEPRI
 800a108:	60bb      	str	r3, [r7, #8]
  return(result);
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d003      	beq.n	800a118 <osDelay+0x3c>
    stat = osErrorISR;
 800a110:	f06f 0305 	mvn.w	r3, #5
 800a114:	617b      	str	r3, [r7, #20]
 800a116:	e007      	b.n	800a128 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a118:	2300      	movs	r3, #0
 800a11a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f001 f8a8 	bl	800b278 <vTaskDelay>
    }
  }

  return (stat);
 800a128:	697b      	ldr	r3, [r7, #20]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	200001b4 	.word	0x200001b4

0800a138 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a138:	b580      	push	{r7, lr}
 800a13a:	b08c      	sub	sp, #48	; 0x30
 800a13c:	af02      	add	r7, sp, #8
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a144:	2300      	movs	r3, #0
 800a146:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a148:	f3ef 8305 	mrs	r3, IPSR
 800a14c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a14e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a150:	2b00      	cmp	r3, #0
 800a152:	d16f      	bne.n	800a234 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a154:	f3ef 8310 	mrs	r3, PRIMASK
 800a158:	617b      	str	r3, [r7, #20]
  return(result);
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d169      	bne.n	800a234 <osMessageQueueNew+0xfc>
 800a160:	4b37      	ldr	r3, [pc, #220]	; (800a240 <osMessageQueueNew+0x108>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b02      	cmp	r3, #2
 800a166:	d105      	bne.n	800a174 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a168:	f3ef 8311 	mrs	r3, BASEPRI
 800a16c:	613b      	str	r3, [r7, #16]
  return(result);
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d15f      	bne.n	800a234 <osMessageQueueNew+0xfc>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d05c      	beq.n	800a234 <osMessageQueueNew+0xfc>
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d059      	beq.n	800a234 <osMessageQueueNew+0xfc>
    mem = -1;
 800a180:	f04f 33ff 	mov.w	r3, #4294967295
 800a184:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d029      	beq.n	800a1e0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d012      	beq.n	800a1ba <osMessageQueueNew+0x82>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	2b4f      	cmp	r3, #79	; 0x4f
 800a19a:	d90e      	bls.n	800a1ba <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00a      	beq.n	800a1ba <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	695a      	ldr	r2, [r3, #20]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	68b9      	ldr	r1, [r7, #8]
 800a1ac:	fb01 f303 	mul.w	r3, r1, r3
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d302      	bcc.n	800a1ba <osMessageQueueNew+0x82>
        mem = 1;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	623b      	str	r3, [r7, #32]
 800a1b8:	e014      	b.n	800a1e4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d110      	bne.n	800a1e4 <osMessageQueueNew+0xac>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10c      	bne.n	800a1e4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d108      	bne.n	800a1e4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d104      	bne.n	800a1e4 <osMessageQueueNew+0xac>
          mem = 0;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	623b      	str	r3, [r7, #32]
 800a1de:	e001      	b.n	800a1e4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a1e4:	6a3b      	ldr	r3, [r7, #32]
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d10b      	bne.n	800a202 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	691a      	ldr	r2, [r3, #16]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	9100      	str	r1, [sp, #0]
 800a1f6:	68b9      	ldr	r1, [r7, #8]
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 f96d 	bl	800a4d8 <xQueueGenericCreateStatic>
 800a1fe:	6278      	str	r0, [r7, #36]	; 0x24
 800a200:	e008      	b.n	800a214 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d105      	bne.n	800a214 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a208:	2200      	movs	r2, #0
 800a20a:	68b9      	ldr	r1, [r7, #8]
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f000 f9da 	bl	800a5c6 <xQueueGenericCreate>
 800a212:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00c      	beq.n	800a234 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d003      	beq.n	800a228 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	61fb      	str	r3, [r7, #28]
 800a226:	e001      	b.n	800a22c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a228:	2300      	movs	r3, #0
 800a22a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a22c:	69f9      	ldr	r1, [r7, #28]
 800a22e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a230:	f000 fdb0 	bl	800ad94 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a236:	4618      	mov	r0, r3
 800a238:	3728      	adds	r7, #40	; 0x28
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	200001b4 	.word	0x200001b4

0800a244 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	4a06      	ldr	r2, [pc, #24]	; (800a26c <vApplicationGetIdleTaskMemory+0x28>)
 800a254:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	4a05      	ldr	r2, [pc, #20]	; (800a270 <vApplicationGetIdleTaskMemory+0x2c>)
 800a25a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2280      	movs	r2, #128	; 0x80
 800a260:	601a      	str	r2, [r3, #0]
}
 800a262:	bf00      	nop
 800a264:	3714      	adds	r7, #20
 800a266:	46bd      	mov	sp, r7
 800a268:	bc80      	pop	{r7}
 800a26a:	4770      	bx	lr
 800a26c:	200001b8 	.word	0x200001b8
 800a270:	20000214 	.word	0x20000214

0800a274 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	4a07      	ldr	r2, [pc, #28]	; (800a2a0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a284:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	4a06      	ldr	r2, [pc, #24]	; (800a2a4 <vApplicationGetTimerTaskMemory+0x30>)
 800a28a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a292:	601a      	str	r2, [r3, #0]
}
 800a294:	bf00      	nop
 800a296:	3714      	adds	r7, #20
 800a298:	46bd      	mov	sp, r7
 800a29a:	bc80      	pop	{r7}
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	20000414 	.word	0x20000414
 800a2a4:	20000470 	.word	0x20000470

0800a2a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f103 0208 	add.w	r2, r3, #8
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f103 0208 	add.w	r2, r3, #8
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f103 0208 	add.w	r2, r3, #8
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bc80      	pop	{r7}
 800a2e4:	4770      	bx	lr

0800a2e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b083      	sub	sp, #12
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bc80      	pop	{r7}
 800a2fc:	4770      	bx	lr

0800a2fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2fe:	b480      	push	{r7}
 800a300:	b085      	sub	sp, #20
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	689a      	ldr	r2, [r3, #8]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	601a      	str	r2, [r3, #0]
}
 800a33a:	bf00      	nop
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	bc80      	pop	{r7}
 800a342:	4770      	bx	lr

0800a344 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a35a:	d103      	bne.n	800a364 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	60fb      	str	r3, [r7, #12]
 800a362:	e00c      	b.n	800a37e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	3308      	adds	r3, #8
 800a368:	60fb      	str	r3, [r7, #12]
 800a36a:	e002      	b.n	800a372 <vListInsert+0x2e>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	60fb      	str	r3, [r7, #12]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d2f6      	bcs.n	800a36c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	685a      	ldr	r2, [r3, #4]
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	1c5a      	adds	r2, r3, #1
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	601a      	str	r2, [r3, #0]
}
 800a3aa:	bf00      	nop
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bc80      	pop	{r7}
 800a3b2:	4770      	bx	lr

0800a3b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	6892      	ldr	r2, [r2, #8]
 800a3ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	6852      	ldr	r2, [r2, #4]
 800a3d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d103      	bne.n	800a3e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	689a      	ldr	r2, [r3, #8]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	1e5a      	subs	r2, r3, #1
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	bc80      	pop	{r7}
 800a404:	4770      	bx	lr
	...

0800a408 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10a      	bne.n	800a432 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a42e:	bf00      	nop
 800a430:	e7fe      	b.n	800a430 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a432:	f002 f99b 	bl	800c76c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a43e:	68f9      	ldr	r1, [r7, #12]
 800a440:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a442:	fb01 f303 	mul.w	r3, r1, r3
 800a446:	441a      	add	r2, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a462:	3b01      	subs	r3, #1
 800a464:	68f9      	ldr	r1, [r7, #12]
 800a466:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a468:	fb01 f303 	mul.w	r3, r1, r3
 800a46c:	441a      	add	r2, r3
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	22ff      	movs	r2, #255	; 0xff
 800a476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	22ff      	movs	r2, #255	; 0xff
 800a47e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d114      	bne.n	800a4b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d01a      	beq.n	800a4c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	3310      	adds	r3, #16
 800a494:	4618      	mov	r0, r3
 800a496:	f001 f9ad 	bl	800b7f4 <xTaskRemoveFromEventList>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d012      	beq.n	800a4c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a4a0:	4b0c      	ldr	r3, [pc, #48]	; (800a4d4 <xQueueGenericReset+0xcc>)
 800a4a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a6:	601a      	str	r2, [r3, #0]
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	e009      	b.n	800a4c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3310      	adds	r3, #16
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7ff fef6 	bl	800a2a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	3324      	adds	r3, #36	; 0x24
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7ff fef1 	bl	800a2a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a4c6:	f002 f981 	bl	800c7cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a4ca:	2301      	movs	r3, #1
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	e000ed04 	.word	0xe000ed04

0800a4d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08e      	sub	sp, #56	; 0x38
 800a4dc:	af02      	add	r7, sp, #8
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10a      	bne.n	800a502 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4fe:	bf00      	nop
 800a500:	e7fe      	b.n	800a500 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10a      	bne.n	800a51e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50c:	f383 8811 	msr	BASEPRI, r3
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a51a:	bf00      	nop
 800a51c:	e7fe      	b.n	800a51c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d002      	beq.n	800a52a <xQueueGenericCreateStatic+0x52>
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <xQueueGenericCreateStatic+0x56>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e000      	b.n	800a530 <xQueueGenericCreateStatic+0x58>
 800a52e:	2300      	movs	r3, #0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d10a      	bne.n	800a54a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	623b      	str	r3, [r7, #32]
}
 800a546:	bf00      	nop
 800a548:	e7fe      	b.n	800a548 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d102      	bne.n	800a556 <xQueueGenericCreateStatic+0x7e>
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d101      	bne.n	800a55a <xQueueGenericCreateStatic+0x82>
 800a556:	2301      	movs	r3, #1
 800a558:	e000      	b.n	800a55c <xQueueGenericCreateStatic+0x84>
 800a55a:	2300      	movs	r3, #0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10a      	bne.n	800a576 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	61fb      	str	r3, [r7, #28]
}
 800a572:	bf00      	nop
 800a574:	e7fe      	b.n	800a574 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a576:	2350      	movs	r3, #80	; 0x50
 800a578:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2b50      	cmp	r3, #80	; 0x50
 800a57e:	d00a      	beq.n	800a596 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	61bb      	str	r3, [r7, #24]
}
 800a592:	bf00      	nop
 800a594:	e7fe      	b.n	800a594 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d00d      	beq.n	800a5bc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5a8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	68b9      	ldr	r1, [r7, #8]
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f000 f843 	bl	800a642 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3730      	adds	r7, #48	; 0x30
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b08a      	sub	sp, #40	; 0x28
 800a5ca:	af02      	add	r7, sp, #8
 800a5cc:	60f8      	str	r0, [r7, #12]
 800a5ce:	60b9      	str	r1, [r7, #8]
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10a      	bne.n	800a5f0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5de:	f383 8811 	msr	BASEPRI, r3
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	613b      	str	r3, [r7, #16]
}
 800a5ec:	bf00      	nop
 800a5ee:	e7fe      	b.n	800a5ee <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d102      	bne.n	800a5fc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	61fb      	str	r3, [r7, #28]
 800a5fa:	e004      	b.n	800a606 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	fb02 f303 	mul.w	r3, r2, r3
 800a604:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	3350      	adds	r3, #80	; 0x50
 800a60a:	4618      	mov	r0, r3
 800a60c:	f002 f9ae 	bl	800c96c <pvPortMalloc>
 800a610:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00f      	beq.n	800a638 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	3350      	adds	r3, #80	; 0x50
 800a61c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a626:	79fa      	ldrb	r2, [r7, #7]
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	4613      	mov	r3, r2
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	68b9      	ldr	r1, [r7, #8]
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 f805 	bl	800a642 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a638:	69bb      	ldr	r3, [r7, #24]
	}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3720      	adds	r7, #32
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	60b9      	str	r1, [r7, #8]
 800a64c:	607a      	str	r2, [r7, #4]
 800a64e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d103      	bne.n	800a65e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	69ba      	ldr	r2, [r7, #24]
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	e002      	b.n	800a664 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a670:	2101      	movs	r1, #1
 800a672:	69b8      	ldr	r0, [r7, #24]
 800a674:	f7ff fec8 	bl	800a408 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	78fa      	ldrb	r2, [r7, #3]
 800a67c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a680:	bf00      	nop
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08e      	sub	sp, #56	; 0x38
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
 800a694:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a696:	2300      	movs	r3, #0
 800a698:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10a      	bne.n	800a6ba <xQueueGenericSend+0x32>
	__asm volatile
 800a6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6b6:	bf00      	nop
 800a6b8:	e7fe      	b.n	800a6b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d103      	bne.n	800a6c8 <xQueueGenericSend+0x40>
 800a6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d101      	bne.n	800a6cc <xQueueGenericSend+0x44>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e000      	b.n	800a6ce <xQueueGenericSend+0x46>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d10a      	bne.n	800a6e8 <xQueueGenericSend+0x60>
	__asm volatile
 800a6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d6:	f383 8811 	msr	BASEPRI, r3
 800a6da:	f3bf 8f6f 	isb	sy
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6e4:	bf00      	nop
 800a6e6:	e7fe      	b.n	800a6e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d103      	bne.n	800a6f6 <xQueueGenericSend+0x6e>
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d101      	bne.n	800a6fa <xQueueGenericSend+0x72>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e000      	b.n	800a6fc <xQueueGenericSend+0x74>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d10a      	bne.n	800a716 <xQueueGenericSend+0x8e>
	__asm volatile
 800a700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a704:	f383 8811 	msr	BASEPRI, r3
 800a708:	f3bf 8f6f 	isb	sy
 800a70c:	f3bf 8f4f 	dsb	sy
 800a710:	623b      	str	r3, [r7, #32]
}
 800a712:	bf00      	nop
 800a714:	e7fe      	b.n	800a714 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a716:	f001 fa67 	bl	800bbe8 <xTaskGetSchedulerState>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d102      	bne.n	800a726 <xQueueGenericSend+0x9e>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <xQueueGenericSend+0xa2>
 800a726:	2301      	movs	r3, #1
 800a728:	e000      	b.n	800a72c <xQueueGenericSend+0xa4>
 800a72a:	2300      	movs	r3, #0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10a      	bne.n	800a746 <xQueueGenericSend+0xbe>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	61fb      	str	r3, [r7, #28]
}
 800a742:	bf00      	nop
 800a744:	e7fe      	b.n	800a744 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a746:	f002 f811 	bl	800c76c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a752:	429a      	cmp	r2, r3
 800a754:	d302      	bcc.n	800a75c <xQueueGenericSend+0xd4>
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d129      	bne.n	800a7b0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	68b9      	ldr	r1, [r7, #8]
 800a760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a762:	f000 fa07 	bl	800ab74 <prvCopyDataToQueue>
 800a766:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d010      	beq.n	800a792 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	3324      	adds	r3, #36	; 0x24
 800a774:	4618      	mov	r0, r3
 800a776:	f001 f83d 	bl	800b7f4 <xTaskRemoveFromEventList>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d013      	beq.n	800a7a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a780:	4b3f      	ldr	r3, [pc, #252]	; (800a880 <xQueueGenericSend+0x1f8>)
 800a782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a786:	601a      	str	r2, [r3, #0]
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	e00a      	b.n	800a7a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a794:	2b00      	cmp	r3, #0
 800a796:	d007      	beq.n	800a7a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a798:	4b39      	ldr	r3, [pc, #228]	; (800a880 <xQueueGenericSend+0x1f8>)
 800a79a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a79e:	601a      	str	r2, [r3, #0]
 800a7a0:	f3bf 8f4f 	dsb	sy
 800a7a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a7a8:	f002 f810 	bl	800c7cc <vPortExitCritical>
				return pdPASS;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e063      	b.n	800a878 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d103      	bne.n	800a7be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7b6:	f002 f809 	bl	800c7cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	e05c      	b.n	800a878 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d106      	bne.n	800a7d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7c4:	f107 0314 	add.w	r3, r7, #20
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f001 f877 	bl	800b8bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7d2:	f001 fffb 	bl	800c7cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7d6:	f000 fde9 	bl	800b3ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7da:	f001 ffc7 	bl	800c76c <vPortEnterCritical>
 800a7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7e4:	b25b      	sxtb	r3, r3
 800a7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ea:	d103      	bne.n	800a7f4 <xQueueGenericSend+0x16c>
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7fa:	b25b      	sxtb	r3, r3
 800a7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a800:	d103      	bne.n	800a80a <xQueueGenericSend+0x182>
 800a802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a80a:	f001 ffdf 	bl	800c7cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a80e:	1d3a      	adds	r2, r7, #4
 800a810:	f107 0314 	add.w	r3, r7, #20
 800a814:	4611      	mov	r1, r2
 800a816:	4618      	mov	r0, r3
 800a818:	f001 f866 	bl	800b8e8 <xTaskCheckForTimeOut>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d124      	bne.n	800a86c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a822:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a824:	f000 fa9e 	bl	800ad64 <prvIsQueueFull>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d018      	beq.n	800a860 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a830:	3310      	adds	r3, #16
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	4611      	mov	r1, r2
 800a836:	4618      	mov	r0, r3
 800a838:	f000 ff8c 	bl	800b754 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a83c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a83e:	f000 fa29 	bl	800ac94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a842:	f000 fdc1 	bl	800b3c8 <xTaskResumeAll>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f47f af7c 	bne.w	800a746 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a84e:	4b0c      	ldr	r3, [pc, #48]	; (800a880 <xQueueGenericSend+0x1f8>)
 800a850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	f3bf 8f6f 	isb	sy
 800a85e:	e772      	b.n	800a746 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a862:	f000 fa17 	bl	800ac94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a866:	f000 fdaf 	bl	800b3c8 <xTaskResumeAll>
 800a86a:	e76c      	b.n	800a746 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a86c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a86e:	f000 fa11 	bl	800ac94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a872:	f000 fda9 	bl	800b3c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a876:	2300      	movs	r3, #0
		}
	}
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3738      	adds	r7, #56	; 0x38
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	e000ed04 	.word	0xe000ed04

0800a884 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b08e      	sub	sp, #56	; 0x38
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	607a      	str	r2, [r7, #4]
 800a890:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d10a      	bne.n	800a8b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a0:	f383 8811 	msr	BASEPRI, r3
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8ae:	bf00      	nop
 800a8b0:	e7fe      	b.n	800a8b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d103      	bne.n	800a8c0 <xQueueGenericSendFromISR+0x3c>
 800a8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <xQueueGenericSendFromISR+0x40>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e000      	b.n	800a8c6 <xQueueGenericSendFromISR+0x42>
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10a      	bne.n	800a8e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ce:	f383 8811 	msr	BASEPRI, r3
 800a8d2:	f3bf 8f6f 	isb	sy
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	623b      	str	r3, [r7, #32]
}
 800a8dc:	bf00      	nop
 800a8de:	e7fe      	b.n	800a8de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	2b02      	cmp	r3, #2
 800a8e4:	d103      	bne.n	800a8ee <xQueueGenericSendFromISR+0x6a>
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d101      	bne.n	800a8f2 <xQueueGenericSendFromISR+0x6e>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e000      	b.n	800a8f4 <xQueueGenericSendFromISR+0x70>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10a      	bne.n	800a90e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	61fb      	str	r3, [r7, #28]
}
 800a90a:	bf00      	nop
 800a90c:	e7fe      	b.n	800a90c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a90e:	f001 ffef 	bl	800c8f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a912:	f3ef 8211 	mrs	r2, BASEPRI
 800a916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91a:	f383 8811 	msr	BASEPRI, r3
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f3bf 8f4f 	dsb	sy
 800a926:	61ba      	str	r2, [r7, #24]
 800a928:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a92a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a92c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a936:	429a      	cmp	r2, r3
 800a938:	d302      	bcc.n	800a940 <xQueueGenericSendFromISR+0xbc>
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d12c      	bne.n	800a99a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	68b9      	ldr	r1, [r7, #8]
 800a94e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a950:	f000 f910 	bl	800ab74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a954:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95c:	d112      	bne.n	800a984 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a962:	2b00      	cmp	r3, #0
 800a964:	d016      	beq.n	800a994 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	3324      	adds	r3, #36	; 0x24
 800a96a:	4618      	mov	r0, r3
 800a96c:	f000 ff42 	bl	800b7f4 <xTaskRemoveFromEventList>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00e      	beq.n	800a994 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00b      	beq.n	800a994 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	601a      	str	r2, [r3, #0]
 800a982:	e007      	b.n	800a994 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a984:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a988:	3301      	adds	r3, #1
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	b25a      	sxtb	r2, r3
 800a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a994:	2301      	movs	r3, #1
 800a996:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a998:	e001      	b.n	800a99e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a99a:	2300      	movs	r3, #0
 800a99c:	637b      	str	r3, [r7, #52]	; 0x34
 800a99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a9a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3738      	adds	r7, #56	; 0x38
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b08c      	sub	sp, #48	; 0x30
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10a      	bne.n	800a9e4 <xQueueReceive+0x30>
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	623b      	str	r3, [r7, #32]
}
 800a9e0:	bf00      	nop
 800a9e2:	e7fe      	b.n	800a9e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d103      	bne.n	800a9f2 <xQueueReceive+0x3e>
 800a9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d101      	bne.n	800a9f6 <xQueueReceive+0x42>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e000      	b.n	800a9f8 <xQueueReceive+0x44>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d10a      	bne.n	800aa12 <xQueueReceive+0x5e>
	__asm volatile
 800a9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa00:	f383 8811 	msr	BASEPRI, r3
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	61fb      	str	r3, [r7, #28]
}
 800aa0e:	bf00      	nop
 800aa10:	e7fe      	b.n	800aa10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa12:	f001 f8e9 	bl	800bbe8 <xTaskGetSchedulerState>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d102      	bne.n	800aa22 <xQueueReceive+0x6e>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d101      	bne.n	800aa26 <xQueueReceive+0x72>
 800aa22:	2301      	movs	r3, #1
 800aa24:	e000      	b.n	800aa28 <xQueueReceive+0x74>
 800aa26:	2300      	movs	r3, #0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d10a      	bne.n	800aa42 <xQueueReceive+0x8e>
	__asm volatile
 800aa2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa30:	f383 8811 	msr	BASEPRI, r3
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	61bb      	str	r3, [r7, #24]
}
 800aa3e:	bf00      	nop
 800aa40:	e7fe      	b.n	800aa40 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa42:	f001 fe93 	bl	800c76c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d01f      	beq.n	800aa92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa52:	68b9      	ldr	r1, [r7, #8]
 800aa54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa56:	f000 f8f7 	bl	800ac48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	1e5a      	subs	r2, r3, #1
 800aa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00f      	beq.n	800aa8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6c:	3310      	adds	r3, #16
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f000 fec0 	bl	800b7f4 <xTaskRemoveFromEventList>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d007      	beq.n	800aa8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa7a:	4b3d      	ldr	r3, [pc, #244]	; (800ab70 <xQueueReceive+0x1bc>)
 800aa7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa80:	601a      	str	r2, [r3, #0]
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa8a:	f001 fe9f 	bl	800c7cc <vPortExitCritical>
				return pdPASS;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e069      	b.n	800ab66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d103      	bne.n	800aaa0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa98:	f001 fe98 	bl	800c7cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	e062      	b.n	800ab66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d106      	bne.n	800aab4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aaa6:	f107 0310 	add.w	r3, r7, #16
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 ff06 	bl	800b8bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aab0:	2301      	movs	r3, #1
 800aab2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aab4:	f001 fe8a 	bl	800c7cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aab8:	f000 fc78 	bl	800b3ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aabc:	f001 fe56 	bl	800c76c <vPortEnterCritical>
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aac6:	b25b      	sxtb	r3, r3
 800aac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aacc:	d103      	bne.n	800aad6 <xQueueReceive+0x122>
 800aace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad0:	2200      	movs	r2, #0
 800aad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aadc:	b25b      	sxtb	r3, r3
 800aade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae2:	d103      	bne.n	800aaec <xQueueReceive+0x138>
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaec:	f001 fe6e 	bl	800c7cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aaf0:	1d3a      	adds	r2, r7, #4
 800aaf2:	f107 0310 	add.w	r3, r7, #16
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 fef5 	bl	800b8e8 <xTaskCheckForTimeOut>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d123      	bne.n	800ab4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab06:	f000 f917 	bl	800ad38 <prvIsQueueEmpty>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d017      	beq.n	800ab40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab12:	3324      	adds	r3, #36	; 0x24
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	4611      	mov	r1, r2
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f000 fe1b 	bl	800b754 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab20:	f000 f8b8 	bl	800ac94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab24:	f000 fc50 	bl	800b3c8 <xTaskResumeAll>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d189      	bne.n	800aa42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ab2e:	4b10      	ldr	r3, [pc, #64]	; (800ab70 <xQueueReceive+0x1bc>)
 800ab30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab34:	601a      	str	r2, [r3, #0]
 800ab36:	f3bf 8f4f 	dsb	sy
 800ab3a:	f3bf 8f6f 	isb	sy
 800ab3e:	e780      	b.n	800aa42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab42:	f000 f8a7 	bl	800ac94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab46:	f000 fc3f 	bl	800b3c8 <xTaskResumeAll>
 800ab4a:	e77a      	b.n	800aa42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab4e:	f000 f8a1 	bl	800ac94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab52:	f000 fc39 	bl	800b3c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab58:	f000 f8ee 	bl	800ad38 <prvIsQueueEmpty>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f43f af6f 	beq.w	800aa42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3730      	adds	r7, #48	; 0x30
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	e000ed04 	.word	0xe000ed04

0800ab74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b086      	sub	sp, #24
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab80:	2300      	movs	r3, #0
 800ab82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10d      	bne.n	800abae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d14d      	bne.n	800ac36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f001 f840 	bl	800bc24 <xTaskPriorityDisinherit>
 800aba4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	605a      	str	r2, [r3, #4]
 800abac:	e043      	b.n	800ac36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d119      	bne.n	800abe8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6898      	ldr	r0, [r3, #8]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abbc:	461a      	mov	r2, r3
 800abbe:	68b9      	ldr	r1, [r7, #8]
 800abc0:	f002 fd92 	bl	800d6e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	689a      	ldr	r2, [r3, #8]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abcc:	441a      	add	r2, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	689a      	ldr	r2, [r3, #8]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d32b      	bcc.n	800ac36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	609a      	str	r2, [r3, #8]
 800abe6:	e026      	b.n	800ac36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	68d8      	ldr	r0, [r3, #12]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf0:	461a      	mov	r2, r3
 800abf2:	68b9      	ldr	r1, [r7, #8]
 800abf4:	f002 fd78 	bl	800d6e8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	68da      	ldr	r2, [r3, #12]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac00:	425b      	negs	r3, r3
 800ac02:	441a      	add	r2, r3
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	68da      	ldr	r2, [r3, #12]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d207      	bcs.n	800ac24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	685a      	ldr	r2, [r3, #4]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1c:	425b      	negs	r3, r3
 800ac1e:	441a      	add	r2, r3
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d105      	bne.n	800ac36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	3b01      	subs	r3, #1
 800ac34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	1c5a      	adds	r2, r3, #1
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac3e:	697b      	ldr	r3, [r7, #20]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3718      	adds	r7, #24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d018      	beq.n	800ac8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	68da      	ldr	r2, [r3, #12]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac62:	441a      	add	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	68da      	ldr	r2, [r3, #12]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d303      	bcc.n	800ac7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	68d9      	ldr	r1, [r3, #12]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac84:	461a      	mov	r2, r3
 800ac86:	6838      	ldr	r0, [r7, #0]
 800ac88:	f002 fd2e 	bl	800d6e8 <memcpy>
	}
}
 800ac8c:	bf00      	nop
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac9c:	f001 fd66 	bl	800c76c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aca6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aca8:	e011      	b.n	800acce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d012      	beq.n	800acd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	3324      	adds	r3, #36	; 0x24
 800acb6:	4618      	mov	r0, r3
 800acb8:	f000 fd9c 	bl	800b7f4 <xTaskRemoveFromEventList>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d001      	beq.n	800acc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800acc2:	f000 fe73 	bl	800b9ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
 800acc8:	3b01      	subs	r3, #1
 800acca:	b2db      	uxtb	r3, r3
 800accc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	dce9      	bgt.n	800acaa <prvUnlockQueue+0x16>
 800acd6:	e000      	b.n	800acda <prvUnlockQueue+0x46>
					break;
 800acd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	22ff      	movs	r2, #255	; 0xff
 800acde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ace2:	f001 fd73 	bl	800c7cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ace6:	f001 fd41 	bl	800c76c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acf0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acf2:	e011      	b.n	800ad18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d012      	beq.n	800ad22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3310      	adds	r3, #16
 800ad00:	4618      	mov	r0, r3
 800ad02:	f000 fd77 	bl	800b7f4 <xTaskRemoveFromEventList>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d001      	beq.n	800ad10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad0c:	f000 fe4e 	bl	800b9ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad10:	7bbb      	ldrb	r3, [r7, #14]
 800ad12:	3b01      	subs	r3, #1
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	dce9      	bgt.n	800acf4 <prvUnlockQueue+0x60>
 800ad20:	e000      	b.n	800ad24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	22ff      	movs	r2, #255	; 0xff
 800ad28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ad2c:	f001 fd4e 	bl	800c7cc <vPortExitCritical>
}
 800ad30:	bf00      	nop
 800ad32:	3710      	adds	r7, #16
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad40:	f001 fd14 	bl	800c76c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d102      	bne.n	800ad52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	60fb      	str	r3, [r7, #12]
 800ad50:	e001      	b.n	800ad56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad52:	2300      	movs	r3, #0
 800ad54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad56:	f001 fd39 	bl	800c7cc <vPortExitCritical>

	return xReturn;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3710      	adds	r7, #16
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad6c:	f001 fcfe 	bl	800c76c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d102      	bne.n	800ad82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	60fb      	str	r3, [r7, #12]
 800ad80:	e001      	b.n	800ad86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad82:	2300      	movs	r3, #0
 800ad84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad86:	f001 fd21 	bl	800c7cc <vPortExitCritical>

	return xReturn;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad9e:	2300      	movs	r3, #0
 800ada0:	60fb      	str	r3, [r7, #12]
 800ada2:	e014      	b.n	800adce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ada4:	4a0e      	ldr	r2, [pc, #56]	; (800ade0 <vQueueAddToRegistry+0x4c>)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10b      	bne.n	800adc8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800adb0:	490b      	ldr	r1, [pc, #44]	; (800ade0 <vQueueAddToRegistry+0x4c>)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	683a      	ldr	r2, [r7, #0]
 800adb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800adba:	4a09      	ldr	r2, [pc, #36]	; (800ade0 <vQueueAddToRegistry+0x4c>)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	00db      	lsls	r3, r3, #3
 800adc0:	4413      	add	r3, r2
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800adc6:	e006      	b.n	800add6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	3301      	adds	r3, #1
 800adcc:	60fb      	str	r3, [r7, #12]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2b07      	cmp	r3, #7
 800add2:	d9e7      	bls.n	800ada4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800add4:	bf00      	nop
 800add6:	bf00      	nop
 800add8:	3714      	adds	r7, #20
 800adda:	46bd      	mov	sp, r7
 800addc:	bc80      	pop	{r7}
 800adde:	4770      	bx	lr
 800ade0:	20002658 	.word	0x20002658

0800ade4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800adf4:	f001 fcba 	bl	800c76c <vPortEnterCritical>
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adfe:	b25b      	sxtb	r3, r3
 800ae00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae04:	d103      	bne.n	800ae0e <vQueueWaitForMessageRestricted+0x2a>
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae14:	b25b      	sxtb	r3, r3
 800ae16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae1a:	d103      	bne.n	800ae24 <vQueueWaitForMessageRestricted+0x40>
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae24:	f001 fcd2 	bl	800c7cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d106      	bne.n	800ae3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	3324      	adds	r3, #36	; 0x24
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	68b9      	ldr	r1, [r7, #8]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 fcaf 	bl	800b79c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ae3e:	6978      	ldr	r0, [r7, #20]
 800ae40:	f7ff ff28 	bl	800ac94 <prvUnlockQueue>
	}
 800ae44:	bf00      	nop
 800ae46:	3718      	adds	r7, #24
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b08e      	sub	sp, #56	; 0x38
 800ae50:	af04      	add	r7, sp, #16
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
 800ae58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10a      	bne.n	800ae76 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ae60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	623b      	str	r3, [r7, #32]
}
 800ae72:	bf00      	nop
 800ae74:	e7fe      	b.n	800ae74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10a      	bne.n	800ae92 <xTaskCreateStatic+0x46>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	61fb      	str	r3, [r7, #28]
}
 800ae8e:	bf00      	nop
 800ae90:	e7fe      	b.n	800ae90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae92:	235c      	movs	r3, #92	; 0x5c
 800ae94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	2b5c      	cmp	r3, #92	; 0x5c
 800ae9a:	d00a      	beq.n	800aeb2 <xTaskCreateStatic+0x66>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	61bb      	str	r3, [r7, #24]
}
 800aeae:	bf00      	nop
 800aeb0:	e7fe      	b.n	800aeb0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d01e      	beq.n	800aef6 <xTaskCreateStatic+0xaa>
 800aeb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d01b      	beq.n	800aef6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aec6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeca:	2202      	movs	r2, #2
 800aecc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aed0:	2300      	movs	r3, #0
 800aed2:	9303      	str	r3, [sp, #12]
 800aed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed6:	9302      	str	r3, [sp, #8]
 800aed8:	f107 0314 	add.w	r3, r7, #20
 800aedc:	9301      	str	r3, [sp, #4]
 800aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee0:	9300      	str	r3, [sp, #0]
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	68b9      	ldr	r1, [r7, #8]
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f000 f850 	bl	800af8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aeee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aef0:	f000 f8d4 	bl	800b09c <prvAddNewTaskToReadyList>
 800aef4:	e001      	b.n	800aefa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800aef6:	2300      	movs	r3, #0
 800aef8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aefa:	697b      	ldr	r3, [r7, #20]
	}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3728      	adds	r7, #40	; 0x28
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800af04:	b580      	push	{r7, lr}
 800af06:	b08c      	sub	sp, #48	; 0x30
 800af08:	af04      	add	r7, sp, #16
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	603b      	str	r3, [r7, #0]
 800af10:	4613      	mov	r3, r2
 800af12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af14:	88fb      	ldrh	r3, [r7, #6]
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4618      	mov	r0, r3
 800af1a:	f001 fd27 	bl	800c96c <pvPortMalloc>
 800af1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00e      	beq.n	800af44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800af26:	205c      	movs	r0, #92	; 0x5c
 800af28:	f001 fd20 	bl	800c96c <pvPortMalloc>
 800af2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d003      	beq.n	800af3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	631a      	str	r2, [r3, #48]	; 0x30
 800af3a:	e005      	b.n	800af48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af3c:	6978      	ldr	r0, [r7, #20]
 800af3e:	f001 fdd9 	bl	800caf4 <vPortFree>
 800af42:	e001      	b.n	800af48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af44:	2300      	movs	r3, #0
 800af46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d017      	beq.n	800af7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	2200      	movs	r2, #0
 800af52:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af56:	88fa      	ldrh	r2, [r7, #6]
 800af58:	2300      	movs	r3, #0
 800af5a:	9303      	str	r3, [sp, #12]
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	9302      	str	r3, [sp, #8]
 800af60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af62:	9301      	str	r3, [sp, #4]
 800af64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	68b9      	ldr	r1, [r7, #8]
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f000 f80e 	bl	800af8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af72:	69f8      	ldr	r0, [r7, #28]
 800af74:	f000 f892 	bl	800b09c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af78:	2301      	movs	r3, #1
 800af7a:	61bb      	str	r3, [r7, #24]
 800af7c:	e002      	b.n	800af84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af7e:	f04f 33ff 	mov.w	r3, #4294967295
 800af82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af84:	69bb      	ldr	r3, [r7, #24]
	}
 800af86:	4618      	mov	r0, r3
 800af88:	3720      	adds	r7, #32
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b088      	sub	sp, #32
 800af92:	af00      	add	r7, sp, #0
 800af94:	60f8      	str	r0, [r7, #12]
 800af96:	60b9      	str	r1, [r7, #8]
 800af98:	607a      	str	r2, [r7, #4]
 800af9a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	461a      	mov	r2, r3
 800afa6:	21a5      	movs	r1, #165	; 0xa5
 800afa8:	f002 fbc6 	bl	800d738 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800afac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800afb6:	3b01      	subs	r3, #1
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	4413      	add	r3, r2
 800afbc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	f023 0307 	bic.w	r3, r3, #7
 800afc4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	f003 0307 	and.w	r3, r3, #7
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00a      	beq.n	800afe6 <prvInitialiseNewTask+0x58>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	617b      	str	r3, [r7, #20]
}
 800afe2:	bf00      	nop
 800afe4:	e7fe      	b.n	800afe4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afe6:	2300      	movs	r3, #0
 800afe8:	61fb      	str	r3, [r7, #28]
 800afea:	e012      	b.n	800b012 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	4413      	add	r3, r2
 800aff2:	7819      	ldrb	r1, [r3, #0]
 800aff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	4413      	add	r3, r2
 800affa:	3334      	adds	r3, #52	; 0x34
 800affc:	460a      	mov	r2, r1
 800affe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	4413      	add	r3, r2
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d006      	beq.n	800b01a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	3301      	adds	r3, #1
 800b010:	61fb      	str	r3, [r7, #28]
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	2b0f      	cmp	r3, #15
 800b016:	d9e9      	bls.n	800afec <prvInitialiseNewTask+0x5e>
 800b018:	e000      	b.n	800b01c <prvInitialiseNewTask+0x8e>
		{
			break;
 800b01a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01e:	2200      	movs	r2, #0
 800b020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b026:	2b37      	cmp	r3, #55	; 0x37
 800b028:	d901      	bls.n	800b02e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b02a:	2337      	movs	r3, #55	; 0x37
 800b02c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b032:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b038:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	2200      	movs	r2, #0
 800b03e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b042:	3304      	adds	r3, #4
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff f94e 	bl	800a2e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	3318      	adds	r3, #24
 800b04e:	4618      	mov	r0, r3
 800b050:	f7ff f949 	bl	800a2e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b058:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b062:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b068:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06c:	2200      	movs	r2, #0
 800b06e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b072:	2200      	movs	r2, #0
 800b074:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b078:	683a      	ldr	r2, [r7, #0]
 800b07a:	68f9      	ldr	r1, [r7, #12]
 800b07c:	69b8      	ldr	r0, [r7, #24]
 800b07e:	f001 fa81 	bl	800c584 <pxPortInitialiseStack>
 800b082:	4602      	mov	r2, r0
 800b084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b086:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d002      	beq.n	800b094 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b092:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b094:	bf00      	nop
 800b096:	3720      	adds	r7, #32
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b0a4:	f001 fb62 	bl	800c76c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b0a8:	4b2d      	ldr	r3, [pc, #180]	; (800b160 <prvAddNewTaskToReadyList+0xc4>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	4a2c      	ldr	r2, [pc, #176]	; (800b160 <prvAddNewTaskToReadyList+0xc4>)
 800b0b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b0b2:	4b2c      	ldr	r3, [pc, #176]	; (800b164 <prvAddNewTaskToReadyList+0xc8>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d109      	bne.n	800b0ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b0ba:	4a2a      	ldr	r2, [pc, #168]	; (800b164 <prvAddNewTaskToReadyList+0xc8>)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b0c0:	4b27      	ldr	r3, [pc, #156]	; (800b160 <prvAddNewTaskToReadyList+0xc4>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d110      	bne.n	800b0ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b0c8:	f000 fc94 	bl	800b9f4 <prvInitialiseTaskLists>
 800b0cc:	e00d      	b.n	800b0ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0ce:	4b26      	ldr	r3, [pc, #152]	; (800b168 <prvAddNewTaskToReadyList+0xcc>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d109      	bne.n	800b0ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0d6:	4b23      	ldr	r3, [pc, #140]	; (800b164 <prvAddNewTaskToReadyList+0xc8>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d802      	bhi.n	800b0ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0e4:	4a1f      	ldr	r2, [pc, #124]	; (800b164 <prvAddNewTaskToReadyList+0xc8>)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0ea:	4b20      	ldr	r3, [pc, #128]	; (800b16c <prvAddNewTaskToReadyList+0xd0>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	4a1e      	ldr	r2, [pc, #120]	; (800b16c <prvAddNewTaskToReadyList+0xd0>)
 800b0f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b0f4:	4b1d      	ldr	r3, [pc, #116]	; (800b16c <prvAddNewTaskToReadyList+0xd0>)
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b100:	4b1b      	ldr	r3, [pc, #108]	; (800b170 <prvAddNewTaskToReadyList+0xd4>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	429a      	cmp	r2, r3
 800b106:	d903      	bls.n	800b110 <prvAddNewTaskToReadyList+0x74>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10c:	4a18      	ldr	r2, [pc, #96]	; (800b170 <prvAddNewTaskToReadyList+0xd4>)
 800b10e:	6013      	str	r3, [r2, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b114:	4613      	mov	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4413      	add	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4a15      	ldr	r2, [pc, #84]	; (800b174 <prvAddNewTaskToReadyList+0xd8>)
 800b11e:	441a      	add	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	3304      	adds	r3, #4
 800b124:	4619      	mov	r1, r3
 800b126:	4610      	mov	r0, r2
 800b128:	f7ff f8e9 	bl	800a2fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b12c:	f001 fb4e 	bl	800c7cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b130:	4b0d      	ldr	r3, [pc, #52]	; (800b168 <prvAddNewTaskToReadyList+0xcc>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00e      	beq.n	800b156 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b138:	4b0a      	ldr	r3, [pc, #40]	; (800b164 <prvAddNewTaskToReadyList+0xc8>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b142:	429a      	cmp	r2, r3
 800b144:	d207      	bcs.n	800b156 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b146:	4b0c      	ldr	r3, [pc, #48]	; (800b178 <prvAddNewTaskToReadyList+0xdc>)
 800b148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b14c:	601a      	str	r2, [r3, #0]
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b156:	bf00      	nop
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	20000d44 	.word	0x20000d44
 800b164:	20000870 	.word	0x20000870
 800b168:	20000d50 	.word	0x20000d50
 800b16c:	20000d60 	.word	0x20000d60
 800b170:	20000d4c 	.word	0x20000d4c
 800b174:	20000874 	.word	0x20000874
 800b178:	e000ed04 	.word	0xe000ed04

0800b17c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b08a      	sub	sp, #40	; 0x28
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b186:	2300      	movs	r3, #0
 800b188:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d10a      	bne.n	800b1a6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800b190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	617b      	str	r3, [r7, #20]
}
 800b1a2:	bf00      	nop
 800b1a4:	e7fe      	b.n	800b1a4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10a      	bne.n	800b1c2 <vTaskDelayUntil+0x46>
	__asm volatile
 800b1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	613b      	str	r3, [r7, #16]
}
 800b1be:	bf00      	nop
 800b1c0:	e7fe      	b.n	800b1c0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b1c2:	4b2a      	ldr	r3, [pc, #168]	; (800b26c <vTaskDelayUntil+0xf0>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00a      	beq.n	800b1e0 <vTaskDelayUntil+0x64>
	__asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	60fb      	str	r3, [r7, #12]
}
 800b1dc:	bf00      	nop
 800b1de:	e7fe      	b.n	800b1de <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b1e0:	f000 f8e4 	bl	800b3ac <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b1e4:	4b22      	ldr	r3, [pc, #136]	; (800b270 <vTaskDelayUntil+0xf4>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	6a3a      	ldr	r2, [r7, #32]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d20b      	bcs.n	800b216 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	69fa      	ldr	r2, [r7, #28]
 800b204:	429a      	cmp	r2, r3
 800b206:	d211      	bcs.n	800b22c <vTaskDelayUntil+0xb0>
 800b208:	69fa      	ldr	r2, [r7, #28]
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d90d      	bls.n	800b22c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b210:	2301      	movs	r3, #1
 800b212:	627b      	str	r3, [r7, #36]	; 0x24
 800b214:	e00a      	b.n	800b22c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	69fa      	ldr	r2, [r7, #28]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d303      	bcc.n	800b228 <vTaskDelayUntil+0xac>
 800b220:	69fa      	ldr	r2, [r7, #28]
 800b222:	6a3b      	ldr	r3, [r7, #32]
 800b224:	429a      	cmp	r2, r3
 800b226:	d901      	bls.n	800b22c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b228:	2301      	movs	r3, #1
 800b22a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	69fa      	ldr	r2, [r7, #28]
 800b230:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b234:	2b00      	cmp	r3, #0
 800b236:	d006      	beq.n	800b246 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b238:	69fa      	ldr	r2, [r7, #28]
 800b23a:	6a3b      	ldr	r3, [r7, #32]
 800b23c:	1ad3      	subs	r3, r2, r3
 800b23e:	2100      	movs	r1, #0
 800b240:	4618      	mov	r0, r3
 800b242:	f000 fe39 	bl	800beb8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b246:	f000 f8bf 	bl	800b3c8 <xTaskResumeAll>
 800b24a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d107      	bne.n	800b262 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b252:	4b08      	ldr	r3, [pc, #32]	; (800b274 <vTaskDelayUntil+0xf8>)
 800b254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b258:	601a      	str	r2, [r3, #0]
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b262:	bf00      	nop
 800b264:	3728      	adds	r7, #40	; 0x28
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	20000d6c 	.word	0x20000d6c
 800b270:	20000d48 	.word	0x20000d48
 800b274:	e000ed04 	.word	0xe000ed04

0800b278 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b280:	2300      	movs	r3, #0
 800b282:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d017      	beq.n	800b2ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b28a:	4b13      	ldr	r3, [pc, #76]	; (800b2d8 <vTaskDelay+0x60>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00a      	beq.n	800b2a8 <vTaskDelay+0x30>
	__asm volatile
 800b292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b296:	f383 8811 	msr	BASEPRI, r3
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	60bb      	str	r3, [r7, #8]
}
 800b2a4:	bf00      	nop
 800b2a6:	e7fe      	b.n	800b2a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b2a8:	f000 f880 	bl	800b3ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 fe02 	bl	800beb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b2b4:	f000 f888 	bl	800b3c8 <xTaskResumeAll>
 800b2b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d107      	bne.n	800b2d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b2c0:	4b06      	ldr	r3, [pc, #24]	; (800b2dc <vTaskDelay+0x64>)
 800b2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2c6:	601a      	str	r2, [r3, #0]
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2d0:	bf00      	nop
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	20000d6c 	.word	0x20000d6c
 800b2dc:	e000ed04 	.word	0xe000ed04

0800b2e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b08a      	sub	sp, #40	; 0x28
 800b2e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b2ee:	463a      	mov	r2, r7
 800b2f0:	1d39      	adds	r1, r7, #4
 800b2f2:	f107 0308 	add.w	r3, r7, #8
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fe ffa4 	bl	800a244 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	9202      	str	r2, [sp, #8]
 800b304:	9301      	str	r3, [sp, #4]
 800b306:	2300      	movs	r3, #0
 800b308:	9300      	str	r3, [sp, #0]
 800b30a:	2300      	movs	r3, #0
 800b30c:	460a      	mov	r2, r1
 800b30e:	4921      	ldr	r1, [pc, #132]	; (800b394 <vTaskStartScheduler+0xb4>)
 800b310:	4821      	ldr	r0, [pc, #132]	; (800b398 <vTaskStartScheduler+0xb8>)
 800b312:	f7ff fd9b 	bl	800ae4c <xTaskCreateStatic>
 800b316:	4603      	mov	r3, r0
 800b318:	4a20      	ldr	r2, [pc, #128]	; (800b39c <vTaskStartScheduler+0xbc>)
 800b31a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b31c:	4b1f      	ldr	r3, [pc, #124]	; (800b39c <vTaskStartScheduler+0xbc>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b324:	2301      	movs	r3, #1
 800b326:	617b      	str	r3, [r7, #20]
 800b328:	e001      	b.n	800b32e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b32a:	2300      	movs	r3, #0
 800b32c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	2b01      	cmp	r3, #1
 800b332:	d102      	bne.n	800b33a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b334:	f000 fe14 	bl	800bf60 <xTimerCreateTimerTask>
 800b338:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d116      	bne.n	800b36e <vTaskStartScheduler+0x8e>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	613b      	str	r3, [r7, #16]
}
 800b352:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b354:	4b12      	ldr	r3, [pc, #72]	; (800b3a0 <vTaskStartScheduler+0xc0>)
 800b356:	f04f 32ff 	mov.w	r2, #4294967295
 800b35a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b35c:	4b11      	ldr	r3, [pc, #68]	; (800b3a4 <vTaskStartScheduler+0xc4>)
 800b35e:	2201      	movs	r2, #1
 800b360:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b362:	4b11      	ldr	r3, [pc, #68]	; (800b3a8 <vTaskStartScheduler+0xc8>)
 800b364:	2200      	movs	r2, #0
 800b366:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b368:	f001 f98e 	bl	800c688 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b36c:	e00e      	b.n	800b38c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b374:	d10a      	bne.n	800b38c <vTaskStartScheduler+0xac>
	__asm volatile
 800b376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37a:	f383 8811 	msr	BASEPRI, r3
 800b37e:	f3bf 8f6f 	isb	sy
 800b382:	f3bf 8f4f 	dsb	sy
 800b386:	60fb      	str	r3, [r7, #12]
}
 800b388:	bf00      	nop
 800b38a:	e7fe      	b.n	800b38a <vTaskStartScheduler+0xaa>
}
 800b38c:	bf00      	nop
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	0800d95c 	.word	0x0800d95c
 800b398:	0800b9c5 	.word	0x0800b9c5
 800b39c:	20000d68 	.word	0x20000d68
 800b3a0:	20000d64 	.word	0x20000d64
 800b3a4:	20000d50 	.word	0x20000d50
 800b3a8:	20000d48 	.word	0x20000d48

0800b3ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b3b0:	4b04      	ldr	r3, [pc, #16]	; (800b3c4 <vTaskSuspendAll+0x18>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	4a03      	ldr	r2, [pc, #12]	; (800b3c4 <vTaskSuspendAll+0x18>)
 800b3b8:	6013      	str	r3, [r2, #0]
}
 800b3ba:	bf00      	nop
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bc80      	pop	{r7}
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	20000d6c 	.word	0x20000d6c

0800b3c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3d6:	4b42      	ldr	r3, [pc, #264]	; (800b4e0 <xTaskResumeAll+0x118>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10a      	bne.n	800b3f4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	603b      	str	r3, [r7, #0]
}
 800b3f0:	bf00      	nop
 800b3f2:	e7fe      	b.n	800b3f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b3f4:	f001 f9ba 	bl	800c76c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3f8:	4b39      	ldr	r3, [pc, #228]	; (800b4e0 <xTaskResumeAll+0x118>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	4a38      	ldr	r2, [pc, #224]	; (800b4e0 <xTaskResumeAll+0x118>)
 800b400:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b402:	4b37      	ldr	r3, [pc, #220]	; (800b4e0 <xTaskResumeAll+0x118>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d162      	bne.n	800b4d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b40a:	4b36      	ldr	r3, [pc, #216]	; (800b4e4 <xTaskResumeAll+0x11c>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d05e      	beq.n	800b4d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b412:	e02f      	b.n	800b474 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b414:	4b34      	ldr	r3, [pc, #208]	; (800b4e8 <xTaskResumeAll+0x120>)
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3318      	adds	r3, #24
 800b420:	4618      	mov	r0, r3
 800b422:	f7fe ffc7 	bl	800a3b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	3304      	adds	r3, #4
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7fe ffc2 	bl	800a3b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b434:	4b2d      	ldr	r3, [pc, #180]	; (800b4ec <xTaskResumeAll+0x124>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d903      	bls.n	800b444 <xTaskResumeAll+0x7c>
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b440:	4a2a      	ldr	r2, [pc, #168]	; (800b4ec <xTaskResumeAll+0x124>)
 800b442:	6013      	str	r3, [r2, #0]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b448:	4613      	mov	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	4413      	add	r3, r2
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	4a27      	ldr	r2, [pc, #156]	; (800b4f0 <xTaskResumeAll+0x128>)
 800b452:	441a      	add	r2, r3
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	3304      	adds	r3, #4
 800b458:	4619      	mov	r1, r3
 800b45a:	4610      	mov	r0, r2
 800b45c:	f7fe ff4f 	bl	800a2fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b464:	4b23      	ldr	r3, [pc, #140]	; (800b4f4 <xTaskResumeAll+0x12c>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d302      	bcc.n	800b474 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b46e:	4b22      	ldr	r3, [pc, #136]	; (800b4f8 <xTaskResumeAll+0x130>)
 800b470:	2201      	movs	r2, #1
 800b472:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b474:	4b1c      	ldr	r3, [pc, #112]	; (800b4e8 <xTaskResumeAll+0x120>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1cb      	bne.n	800b414 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b482:	f000 fb8d 	bl	800bba0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b486:	4b1d      	ldr	r3, [pc, #116]	; (800b4fc <xTaskResumeAll+0x134>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d010      	beq.n	800b4b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b492:	f000 f845 	bl	800b520 <xTaskIncrementTick>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d002      	beq.n	800b4a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b49c:	4b16      	ldr	r3, [pc, #88]	; (800b4f8 <xTaskResumeAll+0x130>)
 800b49e:	2201      	movs	r2, #1
 800b4a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	3b01      	subs	r3, #1
 800b4a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d1f1      	bne.n	800b492 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b4ae:	4b13      	ldr	r3, [pc, #76]	; (800b4fc <xTaskResumeAll+0x134>)
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b4b4:	4b10      	ldr	r3, [pc, #64]	; (800b4f8 <xTaskResumeAll+0x130>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d009      	beq.n	800b4d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4c0:	4b0f      	ldr	r3, [pc, #60]	; (800b500 <xTaskResumeAll+0x138>)
 800b4c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4c6:	601a      	str	r2, [r3, #0]
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4d0:	f001 f97c 	bl	800c7cc <vPortExitCritical>

	return xAlreadyYielded;
 800b4d4:	68bb      	ldr	r3, [r7, #8]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	20000d6c 	.word	0x20000d6c
 800b4e4:	20000d44 	.word	0x20000d44
 800b4e8:	20000d04 	.word	0x20000d04
 800b4ec:	20000d4c 	.word	0x20000d4c
 800b4f0:	20000874 	.word	0x20000874
 800b4f4:	20000870 	.word	0x20000870
 800b4f8:	20000d58 	.word	0x20000d58
 800b4fc:	20000d54 	.word	0x20000d54
 800b500:	e000ed04 	.word	0xe000ed04

0800b504 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b50a:	4b04      	ldr	r3, [pc, #16]	; (800b51c <xTaskGetTickCount+0x18>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b510:	687b      	ldr	r3, [r7, #4]
}
 800b512:	4618      	mov	r0, r3
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	bc80      	pop	{r7}
 800b51a:	4770      	bx	lr
 800b51c:	20000d48 	.word	0x20000d48

0800b520 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b526:	2300      	movs	r3, #0
 800b528:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b52a:	4b51      	ldr	r3, [pc, #324]	; (800b670 <xTaskIncrementTick+0x150>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f040 808e 	bne.w	800b650 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b534:	4b4f      	ldr	r3, [pc, #316]	; (800b674 <xTaskIncrementTick+0x154>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	3301      	adds	r3, #1
 800b53a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b53c:	4a4d      	ldr	r2, [pc, #308]	; (800b674 <xTaskIncrementTick+0x154>)
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d120      	bne.n	800b58a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b548:	4b4b      	ldr	r3, [pc, #300]	; (800b678 <xTaskIncrementTick+0x158>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00a      	beq.n	800b568 <xTaskIncrementTick+0x48>
	__asm volatile
 800b552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b556:	f383 8811 	msr	BASEPRI, r3
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	603b      	str	r3, [r7, #0]
}
 800b564:	bf00      	nop
 800b566:	e7fe      	b.n	800b566 <xTaskIncrementTick+0x46>
 800b568:	4b43      	ldr	r3, [pc, #268]	; (800b678 <xTaskIncrementTick+0x158>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	60fb      	str	r3, [r7, #12]
 800b56e:	4b43      	ldr	r3, [pc, #268]	; (800b67c <xTaskIncrementTick+0x15c>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a41      	ldr	r2, [pc, #260]	; (800b678 <xTaskIncrementTick+0x158>)
 800b574:	6013      	str	r3, [r2, #0]
 800b576:	4a41      	ldr	r2, [pc, #260]	; (800b67c <xTaskIncrementTick+0x15c>)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6013      	str	r3, [r2, #0]
 800b57c:	4b40      	ldr	r3, [pc, #256]	; (800b680 <xTaskIncrementTick+0x160>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	3301      	adds	r3, #1
 800b582:	4a3f      	ldr	r2, [pc, #252]	; (800b680 <xTaskIncrementTick+0x160>)
 800b584:	6013      	str	r3, [r2, #0]
 800b586:	f000 fb0b 	bl	800bba0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b58a:	4b3e      	ldr	r3, [pc, #248]	; (800b684 <xTaskIncrementTick+0x164>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	693a      	ldr	r2, [r7, #16]
 800b590:	429a      	cmp	r2, r3
 800b592:	d34e      	bcc.n	800b632 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b594:	4b38      	ldr	r3, [pc, #224]	; (800b678 <xTaskIncrementTick+0x158>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d101      	bne.n	800b5a2 <xTaskIncrementTick+0x82>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e000      	b.n	800b5a4 <xTaskIncrementTick+0x84>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d004      	beq.n	800b5b2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5a8:	4b36      	ldr	r3, [pc, #216]	; (800b684 <xTaskIncrementTick+0x164>)
 800b5aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ae:	601a      	str	r2, [r3, #0]
					break;
 800b5b0:	e03f      	b.n	800b632 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b5b2:	4b31      	ldr	r3, [pc, #196]	; (800b678 <xTaskIncrementTick+0x158>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5c2:	693a      	ldr	r2, [r7, #16]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d203      	bcs.n	800b5d2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5ca:	4a2e      	ldr	r2, [pc, #184]	; (800b684 <xTaskIncrementTick+0x164>)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6013      	str	r3, [r2, #0]
						break;
 800b5d0:	e02f      	b.n	800b632 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	3304      	adds	r3, #4
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fe feec 	bl	800a3b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d004      	beq.n	800b5ee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	3318      	adds	r3, #24
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7fe fee3 	bl	800a3b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f2:	4b25      	ldr	r3, [pc, #148]	; (800b688 <xTaskIncrementTick+0x168>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d903      	bls.n	800b602 <xTaskIncrementTick+0xe2>
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fe:	4a22      	ldr	r2, [pc, #136]	; (800b688 <xTaskIncrementTick+0x168>)
 800b600:	6013      	str	r3, [r2, #0]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b606:	4613      	mov	r3, r2
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	4413      	add	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4a1f      	ldr	r2, [pc, #124]	; (800b68c <xTaskIncrementTick+0x16c>)
 800b610:	441a      	add	r2, r3
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	3304      	adds	r3, #4
 800b616:	4619      	mov	r1, r3
 800b618:	4610      	mov	r0, r2
 800b61a:	f7fe fe70 	bl	800a2fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b622:	4b1b      	ldr	r3, [pc, #108]	; (800b690 <xTaskIncrementTick+0x170>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b628:	429a      	cmp	r2, r3
 800b62a:	d3b3      	bcc.n	800b594 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b62c:	2301      	movs	r3, #1
 800b62e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b630:	e7b0      	b.n	800b594 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b632:	4b17      	ldr	r3, [pc, #92]	; (800b690 <xTaskIncrementTick+0x170>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b638:	4914      	ldr	r1, [pc, #80]	; (800b68c <xTaskIncrementTick+0x16c>)
 800b63a:	4613      	mov	r3, r2
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	4413      	add	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	440b      	add	r3, r1
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d907      	bls.n	800b65a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b64a:	2301      	movs	r3, #1
 800b64c:	617b      	str	r3, [r7, #20]
 800b64e:	e004      	b.n	800b65a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b650:	4b10      	ldr	r3, [pc, #64]	; (800b694 <xTaskIncrementTick+0x174>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	3301      	adds	r3, #1
 800b656:	4a0f      	ldr	r2, [pc, #60]	; (800b694 <xTaskIncrementTick+0x174>)
 800b658:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b65a:	4b0f      	ldr	r3, [pc, #60]	; (800b698 <xTaskIncrementTick+0x178>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d001      	beq.n	800b666 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b662:	2301      	movs	r3, #1
 800b664:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b666:	697b      	ldr	r3, [r7, #20]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3718      	adds	r7, #24
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	20000d6c 	.word	0x20000d6c
 800b674:	20000d48 	.word	0x20000d48
 800b678:	20000cfc 	.word	0x20000cfc
 800b67c:	20000d00 	.word	0x20000d00
 800b680:	20000d5c 	.word	0x20000d5c
 800b684:	20000d64 	.word	0x20000d64
 800b688:	20000d4c 	.word	0x20000d4c
 800b68c:	20000874 	.word	0x20000874
 800b690:	20000870 	.word	0x20000870
 800b694:	20000d54 	.word	0x20000d54
 800b698:	20000d58 	.word	0x20000d58

0800b69c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6a2:	4b27      	ldr	r3, [pc, #156]	; (800b740 <vTaskSwitchContext+0xa4>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d003      	beq.n	800b6b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6aa:	4b26      	ldr	r3, [pc, #152]	; (800b744 <vTaskSwitchContext+0xa8>)
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6b0:	e041      	b.n	800b736 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b6b2:	4b24      	ldr	r3, [pc, #144]	; (800b744 <vTaskSwitchContext+0xa8>)
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b6b8:	4b23      	ldr	r3, [pc, #140]	; (800b748 <vTaskSwitchContext+0xac>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	60fb      	str	r3, [r7, #12]
 800b6be:	e010      	b.n	800b6e2 <vTaskSwitchContext+0x46>
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d10a      	bne.n	800b6dc <vTaskSwitchContext+0x40>
	__asm volatile
 800b6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ca:	f383 8811 	msr	BASEPRI, r3
 800b6ce:	f3bf 8f6f 	isb	sy
 800b6d2:	f3bf 8f4f 	dsb	sy
 800b6d6:	607b      	str	r3, [r7, #4]
}
 800b6d8:	bf00      	nop
 800b6da:	e7fe      	b.n	800b6da <vTaskSwitchContext+0x3e>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	60fb      	str	r3, [r7, #12]
 800b6e2:	491a      	ldr	r1, [pc, #104]	; (800b74c <vTaskSwitchContext+0xb0>)
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4413      	add	r3, r2
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	440b      	add	r3, r1
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d0e4      	beq.n	800b6c0 <vTaskSwitchContext+0x24>
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4413      	add	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4a12      	ldr	r2, [pc, #72]	; (800b74c <vTaskSwitchContext+0xb0>)
 800b702:	4413      	add	r3, r2
 800b704:	60bb      	str	r3, [r7, #8]
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	685a      	ldr	r2, [r3, #4]
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	605a      	str	r2, [r3, #4]
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	3308      	adds	r3, #8
 800b718:	429a      	cmp	r2, r3
 800b71a:	d104      	bne.n	800b726 <vTaskSwitchContext+0x8a>
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	685a      	ldr	r2, [r3, #4]
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	605a      	str	r2, [r3, #4]
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	4a08      	ldr	r2, [pc, #32]	; (800b750 <vTaskSwitchContext+0xb4>)
 800b72e:	6013      	str	r3, [r2, #0]
 800b730:	4a05      	ldr	r2, [pc, #20]	; (800b748 <vTaskSwitchContext+0xac>)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6013      	str	r3, [r2, #0]
}
 800b736:	bf00      	nop
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bc80      	pop	{r7}
 800b73e:	4770      	bx	lr
 800b740:	20000d6c 	.word	0x20000d6c
 800b744:	20000d58 	.word	0x20000d58
 800b748:	20000d4c 	.word	0x20000d4c
 800b74c:	20000874 	.word	0x20000874
 800b750:	20000870 	.word	0x20000870

0800b754 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10a      	bne.n	800b77a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b768:	f383 8811 	msr	BASEPRI, r3
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	60fb      	str	r3, [r7, #12]
}
 800b776:	bf00      	nop
 800b778:	e7fe      	b.n	800b778 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b77a:	4b07      	ldr	r3, [pc, #28]	; (800b798 <vTaskPlaceOnEventList+0x44>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	3318      	adds	r3, #24
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7fe fdde 	bl	800a344 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b788:	2101      	movs	r1, #1
 800b78a:	6838      	ldr	r0, [r7, #0]
 800b78c:	f000 fb94 	bl	800beb8 <prvAddCurrentTaskToDelayedList>
}
 800b790:	bf00      	nop
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	20000870 	.word	0x20000870

0800b79c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b086      	sub	sp, #24
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d10a      	bne.n	800b7c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b2:	f383 8811 	msr	BASEPRI, r3
 800b7b6:	f3bf 8f6f 	isb	sy
 800b7ba:	f3bf 8f4f 	dsb	sy
 800b7be:	617b      	str	r3, [r7, #20]
}
 800b7c0:	bf00      	nop
 800b7c2:	e7fe      	b.n	800b7c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7c4:	4b0a      	ldr	r3, [pc, #40]	; (800b7f0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	3318      	adds	r3, #24
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f7fe fd96 	bl	800a2fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d002      	beq.n	800b7de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b7d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b7de:	6879      	ldr	r1, [r7, #4]
 800b7e0:	68b8      	ldr	r0, [r7, #8]
 800b7e2:	f000 fb69 	bl	800beb8 <prvAddCurrentTaskToDelayedList>
	}
 800b7e6:	bf00      	nop
 800b7e8:	3718      	adds	r7, #24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	20000870 	.word	0x20000870

0800b7f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b086      	sub	sp, #24
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d10a      	bne.n	800b820 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80e:	f383 8811 	msr	BASEPRI, r3
 800b812:	f3bf 8f6f 	isb	sy
 800b816:	f3bf 8f4f 	dsb	sy
 800b81a:	60fb      	str	r3, [r7, #12]
}
 800b81c:	bf00      	nop
 800b81e:	e7fe      	b.n	800b81e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	3318      	adds	r3, #24
 800b824:	4618      	mov	r0, r3
 800b826:	f7fe fdc5 	bl	800a3b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b82a:	4b1e      	ldr	r3, [pc, #120]	; (800b8a4 <xTaskRemoveFromEventList+0xb0>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d11d      	bne.n	800b86e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	3304      	adds	r3, #4
 800b836:	4618      	mov	r0, r3
 800b838:	f7fe fdbc 	bl	800a3b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b840:	4b19      	ldr	r3, [pc, #100]	; (800b8a8 <xTaskRemoveFromEventList+0xb4>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	429a      	cmp	r2, r3
 800b846:	d903      	bls.n	800b850 <xTaskRemoveFromEventList+0x5c>
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	4a16      	ldr	r2, [pc, #88]	; (800b8a8 <xTaskRemoveFromEventList+0xb4>)
 800b84e:	6013      	str	r3, [r2, #0]
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b854:	4613      	mov	r3, r2
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	4413      	add	r3, r2
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	4a13      	ldr	r2, [pc, #76]	; (800b8ac <xTaskRemoveFromEventList+0xb8>)
 800b85e:	441a      	add	r2, r3
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	3304      	adds	r3, #4
 800b864:	4619      	mov	r1, r3
 800b866:	4610      	mov	r0, r2
 800b868:	f7fe fd49 	bl	800a2fe <vListInsertEnd>
 800b86c:	e005      	b.n	800b87a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	3318      	adds	r3, #24
 800b872:	4619      	mov	r1, r3
 800b874:	480e      	ldr	r0, [pc, #56]	; (800b8b0 <xTaskRemoveFromEventList+0xbc>)
 800b876:	f7fe fd42 	bl	800a2fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87e:	4b0d      	ldr	r3, [pc, #52]	; (800b8b4 <xTaskRemoveFromEventList+0xc0>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b884:	429a      	cmp	r2, r3
 800b886:	d905      	bls.n	800b894 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b888:	2301      	movs	r3, #1
 800b88a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b88c:	4b0a      	ldr	r3, [pc, #40]	; (800b8b8 <xTaskRemoveFromEventList+0xc4>)
 800b88e:	2201      	movs	r2, #1
 800b890:	601a      	str	r2, [r3, #0]
 800b892:	e001      	b.n	800b898 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b894:	2300      	movs	r3, #0
 800b896:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b898:	697b      	ldr	r3, [r7, #20]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3718      	adds	r7, #24
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20000d6c 	.word	0x20000d6c
 800b8a8:	20000d4c 	.word	0x20000d4c
 800b8ac:	20000874 	.word	0x20000874
 800b8b0:	20000d04 	.word	0x20000d04
 800b8b4:	20000870 	.word	0x20000870
 800b8b8:	20000d58 	.word	0x20000d58

0800b8bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8c4:	4b06      	ldr	r3, [pc, #24]	; (800b8e0 <vTaskInternalSetTimeOutState+0x24>)
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8cc:	4b05      	ldr	r3, [pc, #20]	; (800b8e4 <vTaskInternalSetTimeOutState+0x28>)
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	605a      	str	r2, [r3, #4]
}
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bc80      	pop	{r7}
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	20000d5c 	.word	0x20000d5c
 800b8e4:	20000d48 	.word	0x20000d48

0800b8e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b088      	sub	sp, #32
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d10a      	bne.n	800b90e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fc:	f383 8811 	msr	BASEPRI, r3
 800b900:	f3bf 8f6f 	isb	sy
 800b904:	f3bf 8f4f 	dsb	sy
 800b908:	613b      	str	r3, [r7, #16]
}
 800b90a:	bf00      	nop
 800b90c:	e7fe      	b.n	800b90c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10a      	bne.n	800b92a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	f383 8811 	msr	BASEPRI, r3
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	60fb      	str	r3, [r7, #12]
}
 800b926:	bf00      	nop
 800b928:	e7fe      	b.n	800b928 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b92a:	f000 ff1f 	bl	800c76c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b92e:	4b1d      	ldr	r3, [pc, #116]	; (800b9a4 <xTaskCheckForTimeOut+0xbc>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	69ba      	ldr	r2, [r7, #24]
 800b93a:	1ad3      	subs	r3, r2, r3
 800b93c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b946:	d102      	bne.n	800b94e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b948:	2300      	movs	r3, #0
 800b94a:	61fb      	str	r3, [r7, #28]
 800b94c:	e023      	b.n	800b996 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	4b15      	ldr	r3, [pc, #84]	; (800b9a8 <xTaskCheckForTimeOut+0xc0>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	429a      	cmp	r2, r3
 800b958:	d007      	beq.n	800b96a <xTaskCheckForTimeOut+0x82>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	69ba      	ldr	r2, [r7, #24]
 800b960:	429a      	cmp	r2, r3
 800b962:	d302      	bcc.n	800b96a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b964:	2301      	movs	r3, #1
 800b966:	61fb      	str	r3, [r7, #28]
 800b968:	e015      	b.n	800b996 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	697a      	ldr	r2, [r7, #20]
 800b970:	429a      	cmp	r2, r3
 800b972:	d20b      	bcs.n	800b98c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	1ad2      	subs	r2, r2, r3
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7ff ff9b 	bl	800b8bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b986:	2300      	movs	r3, #0
 800b988:	61fb      	str	r3, [r7, #28]
 800b98a:	e004      	b.n	800b996 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	2200      	movs	r2, #0
 800b990:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b992:	2301      	movs	r3, #1
 800b994:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b996:	f000 ff19 	bl	800c7cc <vPortExitCritical>

	return xReturn;
 800b99a:	69fb      	ldr	r3, [r7, #28]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3720      	adds	r7, #32
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	20000d48 	.word	0x20000d48
 800b9a8:	20000d5c 	.word	0x20000d5c

0800b9ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9b0:	4b03      	ldr	r3, [pc, #12]	; (800b9c0 <vTaskMissedYield+0x14>)
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	601a      	str	r2, [r3, #0]
}
 800b9b6:	bf00      	nop
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bc80      	pop	{r7}
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	20000d58 	.word	0x20000d58

0800b9c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b9cc:	f000 f852 	bl	800ba74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9d0:	4b06      	ldr	r3, [pc, #24]	; (800b9ec <prvIdleTask+0x28>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d9f9      	bls.n	800b9cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b9d8:	4b05      	ldr	r3, [pc, #20]	; (800b9f0 <prvIdleTask+0x2c>)
 800b9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9de:	601a      	str	r2, [r3, #0]
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b9e8:	e7f0      	b.n	800b9cc <prvIdleTask+0x8>
 800b9ea:	bf00      	nop
 800b9ec:	20000874 	.word	0x20000874
 800b9f0:	e000ed04 	.word	0xe000ed04

0800b9f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	607b      	str	r3, [r7, #4]
 800b9fe:	e00c      	b.n	800ba1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	4613      	mov	r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	4413      	add	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	4a12      	ldr	r2, [pc, #72]	; (800ba54 <prvInitialiseTaskLists+0x60>)
 800ba0c:	4413      	add	r3, r2
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7fe fc4a 	bl	800a2a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	3301      	adds	r3, #1
 800ba18:	607b      	str	r3, [r7, #4]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2b37      	cmp	r3, #55	; 0x37
 800ba1e:	d9ef      	bls.n	800ba00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba20:	480d      	ldr	r0, [pc, #52]	; (800ba58 <prvInitialiseTaskLists+0x64>)
 800ba22:	f7fe fc41 	bl	800a2a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba26:	480d      	ldr	r0, [pc, #52]	; (800ba5c <prvInitialiseTaskLists+0x68>)
 800ba28:	f7fe fc3e 	bl	800a2a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba2c:	480c      	ldr	r0, [pc, #48]	; (800ba60 <prvInitialiseTaskLists+0x6c>)
 800ba2e:	f7fe fc3b 	bl	800a2a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba32:	480c      	ldr	r0, [pc, #48]	; (800ba64 <prvInitialiseTaskLists+0x70>)
 800ba34:	f7fe fc38 	bl	800a2a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba38:	480b      	ldr	r0, [pc, #44]	; (800ba68 <prvInitialiseTaskLists+0x74>)
 800ba3a:	f7fe fc35 	bl	800a2a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba3e:	4b0b      	ldr	r3, [pc, #44]	; (800ba6c <prvInitialiseTaskLists+0x78>)
 800ba40:	4a05      	ldr	r2, [pc, #20]	; (800ba58 <prvInitialiseTaskLists+0x64>)
 800ba42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba44:	4b0a      	ldr	r3, [pc, #40]	; (800ba70 <prvInitialiseTaskLists+0x7c>)
 800ba46:	4a05      	ldr	r2, [pc, #20]	; (800ba5c <prvInitialiseTaskLists+0x68>)
 800ba48:	601a      	str	r2, [r3, #0]
}
 800ba4a:	bf00      	nop
 800ba4c:	3708      	adds	r7, #8
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	20000874 	.word	0x20000874
 800ba58:	20000cd4 	.word	0x20000cd4
 800ba5c:	20000ce8 	.word	0x20000ce8
 800ba60:	20000d04 	.word	0x20000d04
 800ba64:	20000d18 	.word	0x20000d18
 800ba68:	20000d30 	.word	0x20000d30
 800ba6c:	20000cfc 	.word	0x20000cfc
 800ba70:	20000d00 	.word	0x20000d00

0800ba74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba7a:	e019      	b.n	800bab0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba7c:	f000 fe76 	bl	800c76c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ba80:	4b10      	ldr	r3, [pc, #64]	; (800bac4 <prvCheckTasksWaitingTermination+0x50>)
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7fe fc91 	bl	800a3b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba92:	4b0d      	ldr	r3, [pc, #52]	; (800bac8 <prvCheckTasksWaitingTermination+0x54>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	3b01      	subs	r3, #1
 800ba98:	4a0b      	ldr	r2, [pc, #44]	; (800bac8 <prvCheckTasksWaitingTermination+0x54>)
 800ba9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba9c:	4b0b      	ldr	r3, [pc, #44]	; (800bacc <prvCheckTasksWaitingTermination+0x58>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	3b01      	subs	r3, #1
 800baa2:	4a0a      	ldr	r2, [pc, #40]	; (800bacc <prvCheckTasksWaitingTermination+0x58>)
 800baa4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800baa6:	f000 fe91 	bl	800c7cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 f848 	bl	800bb40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bab0:	4b06      	ldr	r3, [pc, #24]	; (800bacc <prvCheckTasksWaitingTermination+0x58>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1e1      	bne.n	800ba7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bab8:	bf00      	nop
 800baba:	bf00      	nop
 800babc:	3708      	adds	r7, #8
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	20000d18 	.word	0x20000d18
 800bac8:	20000d44 	.word	0x20000d44
 800bacc:	20000d2c 	.word	0x20000d2c

0800bad0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800bad8:	2300      	movs	r3, #0
 800bada:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800badc:	e005      	b.n	800baea <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	3301      	adds	r3, #1
 800bae2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	3301      	adds	r3, #1
 800bae8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	2ba5      	cmp	r3, #165	; 0xa5
 800baf0:	d0f5      	beq.n	800bade <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	089b      	lsrs	r3, r3, #2
 800baf6:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	b29b      	uxth	r3, r3
	}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bc80      	pop	{r7}
 800bb04:	4770      	bx	lr
	...

0800bb08 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b086      	sub	sp, #24
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d102      	bne.n	800bb1c <uxTaskGetStackHighWaterMark+0x14>
 800bb16:	4b09      	ldr	r3, [pc, #36]	; (800bb3c <uxTaskGetStackHighWaterMark+0x34>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	e000      	b.n	800bb1e <uxTaskGetStackHighWaterMark+0x16>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb24:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800bb26:	6938      	ldr	r0, [r7, #16]
 800bb28:	f7ff ffd2 	bl	800bad0 <prvTaskCheckFreeStackSpace>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800bb30:	68fb      	ldr	r3, [r7, #12]
	}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3718      	adds	r7, #24
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20000870 	.word	0x20000870

0800bb40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d108      	bne.n	800bb64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 ffcc 	bl	800caf4 <vPortFree>
				vPortFree( pxTCB );
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 ffc9 	bl	800caf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb62:	e018      	b.n	800bb96 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d103      	bne.n	800bb76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 ffc0 	bl	800caf4 <vPortFree>
	}
 800bb74:	e00f      	b.n	800bb96 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d00a      	beq.n	800bb96 <prvDeleteTCB+0x56>
	__asm volatile
 800bb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb84:	f383 8811 	msr	BASEPRI, r3
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	60fb      	str	r3, [r7, #12]
}
 800bb92:	bf00      	nop
 800bb94:	e7fe      	b.n	800bb94 <prvDeleteTCB+0x54>
	}
 800bb96:	bf00      	nop
 800bb98:	3710      	adds	r7, #16
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
	...

0800bba0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bba6:	4b0e      	ldr	r3, [pc, #56]	; (800bbe0 <prvResetNextTaskUnblockTime+0x40>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d101      	bne.n	800bbb4 <prvResetNextTaskUnblockTime+0x14>
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e000      	b.n	800bbb6 <prvResetNextTaskUnblockTime+0x16>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d004      	beq.n	800bbc4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bbba:	4b0a      	ldr	r3, [pc, #40]	; (800bbe4 <prvResetNextTaskUnblockTime+0x44>)
 800bbbc:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bbc2:	e008      	b.n	800bbd6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bbc4:	4b06      	ldr	r3, [pc, #24]	; (800bbe0 <prvResetNextTaskUnblockTime+0x40>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	4a04      	ldr	r2, [pc, #16]	; (800bbe4 <prvResetNextTaskUnblockTime+0x44>)
 800bbd4:	6013      	str	r3, [r2, #0]
}
 800bbd6:	bf00      	nop
 800bbd8:	370c      	adds	r7, #12
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bc80      	pop	{r7}
 800bbde:	4770      	bx	lr
 800bbe0:	20000cfc 	.word	0x20000cfc
 800bbe4:	20000d64 	.word	0x20000d64

0800bbe8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bbee:	4b0b      	ldr	r3, [pc, #44]	; (800bc1c <xTaskGetSchedulerState+0x34>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d102      	bne.n	800bbfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	607b      	str	r3, [r7, #4]
 800bbfa:	e008      	b.n	800bc0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbfc:	4b08      	ldr	r3, [pc, #32]	; (800bc20 <xTaskGetSchedulerState+0x38>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d102      	bne.n	800bc0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc04:	2302      	movs	r3, #2
 800bc06:	607b      	str	r3, [r7, #4]
 800bc08:	e001      	b.n	800bc0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc0e:	687b      	ldr	r3, [r7, #4]
	}
 800bc10:	4618      	mov	r0, r3
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bc80      	pop	{r7}
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	20000d50 	.word	0x20000d50
 800bc20:	20000d6c 	.word	0x20000d6c

0800bc24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b086      	sub	sp, #24
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bc30:	2300      	movs	r3, #0
 800bc32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d056      	beq.n	800bce8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bc3a:	4b2e      	ldr	r3, [pc, #184]	; (800bcf4 <xTaskPriorityDisinherit+0xd0>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	693a      	ldr	r2, [r7, #16]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d00a      	beq.n	800bc5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc48:	f383 8811 	msr	BASEPRI, r3
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	f3bf 8f4f 	dsb	sy
 800bc54:	60fb      	str	r3, [r7, #12]
}
 800bc56:	bf00      	nop
 800bc58:	e7fe      	b.n	800bc58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10a      	bne.n	800bc78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	60bb      	str	r3, [r7, #8]
}
 800bc74:	bf00      	nop
 800bc76:	e7fe      	b.n	800bc76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc7c:	1e5a      	subs	r2, r3, #1
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d02c      	beq.n	800bce8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d128      	bne.n	800bce8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	3304      	adds	r3, #4
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7fe fb8a 	bl	800a3b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb8:	4b0f      	ldr	r3, [pc, #60]	; (800bcf8 <xTaskPriorityDisinherit+0xd4>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d903      	bls.n	800bcc8 <xTaskPriorityDisinherit+0xa4>
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc4:	4a0c      	ldr	r2, [pc, #48]	; (800bcf8 <xTaskPriorityDisinherit+0xd4>)
 800bcc6:	6013      	str	r3, [r2, #0]
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bccc:	4613      	mov	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	4413      	add	r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	4a09      	ldr	r2, [pc, #36]	; (800bcfc <xTaskPriorityDisinherit+0xd8>)
 800bcd6:	441a      	add	r2, r3
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	3304      	adds	r3, #4
 800bcdc:	4619      	mov	r1, r3
 800bcde:	4610      	mov	r0, r2
 800bce0:	f7fe fb0d 	bl	800a2fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bce4:	2301      	movs	r3, #1
 800bce6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bce8:	697b      	ldr	r3, [r7, #20]
	}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3718      	adds	r7, #24
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	20000870 	.word	0x20000870
 800bcf8:	20000d4c 	.word	0x20000d4c
 800bcfc:	20000874 	.word	0x20000874

0800bd00 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800bd0a:	f000 fd2f 	bl	800c76c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800bd0e:	4b1e      	ldr	r3, [pc, #120]	; (800bd88 <ulTaskNotifyTake+0x88>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d113      	bne.n	800bd40 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bd18:	4b1b      	ldr	r3, [pc, #108]	; (800bd88 <ulTaskNotifyTake+0x88>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00b      	beq.n	800bd40 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd28:	2101      	movs	r1, #1
 800bd2a:	6838      	ldr	r0, [r7, #0]
 800bd2c:	f000 f8c4 	bl	800beb8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bd30:	4b16      	ldr	r3, [pc, #88]	; (800bd8c <ulTaskNotifyTake+0x8c>)
 800bd32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd36:	601a      	str	r2, [r3, #0]
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bd40:	f000 fd44 	bl	800c7cc <vPortExitCritical>

		taskENTER_CRITICAL();
 800bd44:	f000 fd12 	bl	800c76c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800bd48:	4b0f      	ldr	r3, [pc, #60]	; (800bd88 <ulTaskNotifyTake+0x88>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd4e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00c      	beq.n	800bd70 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d004      	beq.n	800bd66 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800bd5c:	4b0a      	ldr	r3, [pc, #40]	; (800bd88 <ulTaskNotifyTake+0x88>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2200      	movs	r2, #0
 800bd62:	655a      	str	r2, [r3, #84]	; 0x54
 800bd64:	e004      	b.n	800bd70 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800bd66:	4b08      	ldr	r3, [pc, #32]	; (800bd88 <ulTaskNotifyTake+0x88>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	3a01      	subs	r2, #1
 800bd6e:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd70:	4b05      	ldr	r3, [pc, #20]	; (800bd88 <ulTaskNotifyTake+0x88>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2200      	movs	r2, #0
 800bd76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800bd7a:	f000 fd27 	bl	800c7cc <vPortExitCritical>

		return ulReturn;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
	}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	20000870 	.word	0x20000870
 800bd8c:	e000ed04 	.word	0xe000ed04

0800bd90 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b08a      	sub	sp, #40	; 0x28
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10a      	bne.n	800bdb6 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800bda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	61bb      	str	r3, [r7, #24]
}
 800bdb2:	bf00      	nop
 800bdb4:	e7fe      	b.n	800bdb4 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdb6:	f000 fd9b 	bl	800c8f0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800bdbe:	f3ef 8211 	mrs	r2, BASEPRI
 800bdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc6:	f383 8811 	msr	BASEPRI, r3
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	617a      	str	r2, [r7, #20]
 800bdd4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bdd6:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bdd8:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bddc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bde0:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde4:	2202      	movs	r2, #2
 800bde6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdee:	1c5a      	adds	r2, r3, #1
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf2:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bdf4:	7ffb      	ldrb	r3, [r7, #31]
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d147      	bne.n	800be8a <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d00a      	beq.n	800be18 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 800be02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be06:	f383 8811 	msr	BASEPRI, r3
 800be0a:	f3bf 8f6f 	isb	sy
 800be0e:	f3bf 8f4f 	dsb	sy
 800be12:	60fb      	str	r3, [r7, #12]
}
 800be14:	bf00      	nop
 800be16:	e7fe      	b.n	800be16 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be18:	4b21      	ldr	r3, [pc, #132]	; (800bea0 <vTaskNotifyGiveFromISR+0x110>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d11d      	bne.n	800be5c <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be22:	3304      	adds	r3, #4
 800be24:	4618      	mov	r0, r3
 800be26:	f7fe fac5 	bl	800a3b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be2e:	4b1d      	ldr	r3, [pc, #116]	; (800bea4 <vTaskNotifyGiveFromISR+0x114>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	429a      	cmp	r2, r3
 800be34:	d903      	bls.n	800be3e <vTaskNotifyGiveFromISR+0xae>
 800be36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3a:	4a1a      	ldr	r2, [pc, #104]	; (800bea4 <vTaskNotifyGiveFromISR+0x114>)
 800be3c:	6013      	str	r3, [r2, #0]
 800be3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be42:	4613      	mov	r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	4413      	add	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	4a17      	ldr	r2, [pc, #92]	; (800bea8 <vTaskNotifyGiveFromISR+0x118>)
 800be4c:	441a      	add	r2, r3
 800be4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be50:	3304      	adds	r3, #4
 800be52:	4619      	mov	r1, r3
 800be54:	4610      	mov	r0, r2
 800be56:	f7fe fa52 	bl	800a2fe <vListInsertEnd>
 800be5a:	e005      	b.n	800be68 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800be5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5e:	3318      	adds	r3, #24
 800be60:	4619      	mov	r1, r3
 800be62:	4812      	ldr	r0, [pc, #72]	; (800beac <vTaskNotifyGiveFromISR+0x11c>)
 800be64:	f7fe fa4b 	bl	800a2fe <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be6c:	4b10      	ldr	r3, [pc, #64]	; (800beb0 <vTaskNotifyGiveFromISR+0x120>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be72:	429a      	cmp	r2, r3
 800be74:	d909      	bls.n	800be8a <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d003      	beq.n	800be84 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	2201      	movs	r2, #1
 800be80:	601a      	str	r2, [r3, #0]
 800be82:	e002      	b.n	800be8a <vTaskNotifyGiveFromISR+0xfa>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800be84:	4b0b      	ldr	r3, [pc, #44]	; (800beb4 <vTaskNotifyGiveFromISR+0x124>)
 800be86:	2201      	movs	r2, #1
 800be88:	601a      	str	r2, [r3, #0]
 800be8a:	6a3b      	ldr	r3, [r7, #32]
 800be8c:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	f383 8811 	msr	BASEPRI, r3
}
 800be94:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800be96:	bf00      	nop
 800be98:	3728      	adds	r7, #40	; 0x28
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	20000d6c 	.word	0x20000d6c
 800bea4:	20000d4c 	.word	0x20000d4c
 800bea8:	20000874 	.word	0x20000874
 800beac:	20000d04 	.word	0x20000d04
 800beb0:	20000870 	.word	0x20000870
 800beb4:	20000d58 	.word	0x20000d58

0800beb8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bec2:	4b21      	ldr	r3, [pc, #132]	; (800bf48 <prvAddCurrentTaskToDelayedList+0x90>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bec8:	4b20      	ldr	r3, [pc, #128]	; (800bf4c <prvAddCurrentTaskToDelayedList+0x94>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	3304      	adds	r3, #4
 800bece:	4618      	mov	r0, r3
 800bed0:	f7fe fa70 	bl	800a3b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beda:	d10a      	bne.n	800bef2 <prvAddCurrentTaskToDelayedList+0x3a>
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d007      	beq.n	800bef2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bee2:	4b1a      	ldr	r3, [pc, #104]	; (800bf4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	3304      	adds	r3, #4
 800bee8:	4619      	mov	r1, r3
 800beea:	4819      	ldr	r0, [pc, #100]	; (800bf50 <prvAddCurrentTaskToDelayedList+0x98>)
 800beec:	f7fe fa07 	bl	800a2fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bef0:	e026      	b.n	800bf40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bef2:	68fa      	ldr	r2, [r7, #12]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4413      	add	r3, r2
 800bef8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800befa:	4b14      	ldr	r3, [pc, #80]	; (800bf4c <prvAddCurrentTaskToDelayedList+0x94>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	68ba      	ldr	r2, [r7, #8]
 800bf00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d209      	bcs.n	800bf1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf0a:	4b12      	ldr	r3, [pc, #72]	; (800bf54 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	4b0f      	ldr	r3, [pc, #60]	; (800bf4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	3304      	adds	r3, #4
 800bf14:	4619      	mov	r1, r3
 800bf16:	4610      	mov	r0, r2
 800bf18:	f7fe fa14 	bl	800a344 <vListInsert>
}
 800bf1c:	e010      	b.n	800bf40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf1e:	4b0e      	ldr	r3, [pc, #56]	; (800bf58 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	4b0a      	ldr	r3, [pc, #40]	; (800bf4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	3304      	adds	r3, #4
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4610      	mov	r0, r2
 800bf2c:	f7fe fa0a 	bl	800a344 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf30:	4b0a      	ldr	r3, [pc, #40]	; (800bf5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d202      	bcs.n	800bf40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf3a:	4a08      	ldr	r2, [pc, #32]	; (800bf5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	6013      	str	r3, [r2, #0]
}
 800bf40:	bf00      	nop
 800bf42:	3710      	adds	r7, #16
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	20000d48 	.word	0x20000d48
 800bf4c:	20000870 	.word	0x20000870
 800bf50:	20000d30 	.word	0x20000d30
 800bf54:	20000d00 	.word	0x20000d00
 800bf58:	20000cfc 	.word	0x20000cfc
 800bf5c:	20000d64 	.word	0x20000d64

0800bf60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b08a      	sub	sp, #40	; 0x28
 800bf64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf66:	2300      	movs	r3, #0
 800bf68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf6a:	f000 facb 	bl	800c504 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf6e:	4b1c      	ldr	r3, [pc, #112]	; (800bfe0 <xTimerCreateTimerTask+0x80>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d021      	beq.n	800bfba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf76:	2300      	movs	r3, #0
 800bf78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf7e:	1d3a      	adds	r2, r7, #4
 800bf80:	f107 0108 	add.w	r1, r7, #8
 800bf84:	f107 030c 	add.w	r3, r7, #12
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7fe f973 	bl	800a274 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bf8e:	6879      	ldr	r1, [r7, #4]
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	9202      	str	r2, [sp, #8]
 800bf96:	9301      	str	r3, [sp, #4]
 800bf98:	2302      	movs	r3, #2
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	460a      	mov	r2, r1
 800bfa0:	4910      	ldr	r1, [pc, #64]	; (800bfe4 <xTimerCreateTimerTask+0x84>)
 800bfa2:	4811      	ldr	r0, [pc, #68]	; (800bfe8 <xTimerCreateTimerTask+0x88>)
 800bfa4:	f7fe ff52 	bl	800ae4c <xTaskCreateStatic>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	4a10      	ldr	r2, [pc, #64]	; (800bfec <xTimerCreateTimerTask+0x8c>)
 800bfac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bfae:	4b0f      	ldr	r3, [pc, #60]	; (800bfec <xTimerCreateTimerTask+0x8c>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d001      	beq.n	800bfba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d10a      	bne.n	800bfd6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc4:	f383 8811 	msr	BASEPRI, r3
 800bfc8:	f3bf 8f6f 	isb	sy
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	613b      	str	r3, [r7, #16]
}
 800bfd2:	bf00      	nop
 800bfd4:	e7fe      	b.n	800bfd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bfd6:	697b      	ldr	r3, [r7, #20]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3718      	adds	r7, #24
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	20000da0 	.word	0x20000da0
 800bfe4:	0800d964 	.word	0x0800d964
 800bfe8:	0800c10d 	.word	0x0800c10d
 800bfec:	20000da4 	.word	0x20000da4

0800bff0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b08a      	sub	sp, #40	; 0x28
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	607a      	str	r2, [r7, #4]
 800bffc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bffe:	2300      	movs	r3, #0
 800c000:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10a      	bne.n	800c01e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00c:	f383 8811 	msr	BASEPRI, r3
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	f3bf 8f4f 	dsb	sy
 800c018:	623b      	str	r3, [r7, #32]
}
 800c01a:	bf00      	nop
 800c01c:	e7fe      	b.n	800c01c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c01e:	4b1a      	ldr	r3, [pc, #104]	; (800c088 <xTimerGenericCommand+0x98>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d02a      	beq.n	800c07c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	2b05      	cmp	r3, #5
 800c036:	dc18      	bgt.n	800c06a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c038:	f7ff fdd6 	bl	800bbe8 <xTaskGetSchedulerState>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b02      	cmp	r3, #2
 800c040:	d109      	bne.n	800c056 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c042:	4b11      	ldr	r3, [pc, #68]	; (800c088 <xTimerGenericCommand+0x98>)
 800c044:	6818      	ldr	r0, [r3, #0]
 800c046:	f107 0110 	add.w	r1, r7, #16
 800c04a:	2300      	movs	r3, #0
 800c04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c04e:	f7fe fb1b 	bl	800a688 <xQueueGenericSend>
 800c052:	6278      	str	r0, [r7, #36]	; 0x24
 800c054:	e012      	b.n	800c07c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c056:	4b0c      	ldr	r3, [pc, #48]	; (800c088 <xTimerGenericCommand+0x98>)
 800c058:	6818      	ldr	r0, [r3, #0]
 800c05a:	f107 0110 	add.w	r1, r7, #16
 800c05e:	2300      	movs	r3, #0
 800c060:	2200      	movs	r2, #0
 800c062:	f7fe fb11 	bl	800a688 <xQueueGenericSend>
 800c066:	6278      	str	r0, [r7, #36]	; 0x24
 800c068:	e008      	b.n	800c07c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c06a:	4b07      	ldr	r3, [pc, #28]	; (800c088 <xTimerGenericCommand+0x98>)
 800c06c:	6818      	ldr	r0, [r3, #0]
 800c06e:	f107 0110 	add.w	r1, r7, #16
 800c072:	2300      	movs	r3, #0
 800c074:	683a      	ldr	r2, [r7, #0]
 800c076:	f7fe fc05 	bl	800a884 <xQueueGenericSendFromISR>
 800c07a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3728      	adds	r7, #40	; 0x28
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	20000da0 	.word	0x20000da0

0800c08c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b088      	sub	sp, #32
 800c090:	af02      	add	r7, sp, #8
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c096:	4b1c      	ldr	r3, [pc, #112]	; (800c108 <prvProcessExpiredTimer+0x7c>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	3304      	adds	r3, #4
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fe f985 	bl	800a3b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	69db      	ldr	r3, [r3, #28]
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d122      	bne.n	800c0f8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	699a      	ldr	r2, [r3, #24]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	18d1      	adds	r1, r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	683a      	ldr	r2, [r7, #0]
 800c0be:	6978      	ldr	r0, [r7, #20]
 800c0c0:	f000 f8c8 	bl	800c254 <prvInsertTimerInActiveList>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d016      	beq.n	800c0f8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	2100      	movs	r1, #0
 800c0d4:	6978      	ldr	r0, [r7, #20]
 800c0d6:	f7ff ff8b 	bl	800bff0 <xTimerGenericCommand>
 800c0da:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d10a      	bne.n	800c0f8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e6:	f383 8811 	msr	BASEPRI, r3
 800c0ea:	f3bf 8f6f 	isb	sy
 800c0ee:	f3bf 8f4f 	dsb	sy
 800c0f2:	60fb      	str	r3, [r7, #12]
}
 800c0f4:	bf00      	nop
 800c0f6:	e7fe      	b.n	800c0f6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fc:	6978      	ldr	r0, [r7, #20]
 800c0fe:	4798      	blx	r3
}
 800c100:	bf00      	nop
 800c102:	3718      	adds	r7, #24
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	20000d98 	.word	0x20000d98

0800c10c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c114:	f107 0308 	add.w	r3, r7, #8
 800c118:	4618      	mov	r0, r3
 800c11a:	f000 f857 	bl	800c1cc <prvGetNextExpireTime>
 800c11e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	4619      	mov	r1, r3
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f000 f803 	bl	800c130 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c12a:	f000 f8d5 	bl	800c2d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c12e:	e7f1      	b.n	800c114 <prvTimerTask+0x8>

0800c130 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c13a:	f7ff f937 	bl	800b3ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c13e:	f107 0308 	add.w	r3, r7, #8
 800c142:	4618      	mov	r0, r3
 800c144:	f000 f866 	bl	800c214 <prvSampleTimeNow>
 800c148:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d130      	bne.n	800c1b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d10a      	bne.n	800c16c <prvProcessTimerOrBlockTask+0x3c>
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d806      	bhi.n	800c16c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c15e:	f7ff f933 	bl	800b3c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c162:	68f9      	ldr	r1, [r7, #12]
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f7ff ff91 	bl	800c08c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c16a:	e024      	b.n	800c1b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d008      	beq.n	800c184 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c172:	4b13      	ldr	r3, [pc, #76]	; (800c1c0 <prvProcessTimerOrBlockTask+0x90>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	bf0c      	ite	eq
 800c17c:	2301      	moveq	r3, #1
 800c17e:	2300      	movne	r3, #0
 800c180:	b2db      	uxtb	r3, r3
 800c182:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c184:	4b0f      	ldr	r3, [pc, #60]	; (800c1c4 <prvProcessTimerOrBlockTask+0x94>)
 800c186:	6818      	ldr	r0, [r3, #0]
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	1ad3      	subs	r3, r2, r3
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	4619      	mov	r1, r3
 800c192:	f7fe fe27 	bl	800ade4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c196:	f7ff f917 	bl	800b3c8 <xTaskResumeAll>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d10a      	bne.n	800c1b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c1a0:	4b09      	ldr	r3, [pc, #36]	; (800c1c8 <prvProcessTimerOrBlockTask+0x98>)
 800c1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1a6:	601a      	str	r2, [r3, #0]
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	f3bf 8f6f 	isb	sy
}
 800c1b0:	e001      	b.n	800c1b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c1b2:	f7ff f909 	bl	800b3c8 <xTaskResumeAll>
}
 800c1b6:	bf00      	nop
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	20000d9c 	.word	0x20000d9c
 800c1c4:	20000da0 	.word	0x20000da0
 800c1c8:	e000ed04 	.word	0xe000ed04

0800c1cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b085      	sub	sp, #20
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c1d4:	4b0e      	ldr	r3, [pc, #56]	; (800c210 <prvGetNextExpireTime+0x44>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	bf0c      	ite	eq
 800c1de:	2301      	moveq	r3, #1
 800c1e0:	2300      	movne	r3, #0
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d105      	bne.n	800c1fe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1f2:	4b07      	ldr	r3, [pc, #28]	; (800c210 <prvGetNextExpireTime+0x44>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	60fb      	str	r3, [r7, #12]
 800c1fc:	e001      	b.n	800c202 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c1fe:	2300      	movs	r3, #0
 800c200:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c202:	68fb      	ldr	r3, [r7, #12]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3714      	adds	r7, #20
 800c208:	46bd      	mov	sp, r7
 800c20a:	bc80      	pop	{r7}
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	20000d98 	.word	0x20000d98

0800c214 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c21c:	f7ff f972 	bl	800b504 <xTaskGetTickCount>
 800c220:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c222:	4b0b      	ldr	r3, [pc, #44]	; (800c250 <prvSampleTimeNow+0x3c>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d205      	bcs.n	800c238 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c22c:	f000 f908 	bl	800c440 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	e002      	b.n	800c23e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c23e:	4a04      	ldr	r2, [pc, #16]	; (800c250 <prvSampleTimeNow+0x3c>)
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c244:	68fb      	ldr	r3, [r7, #12]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	20000da8 	.word	0x20000da8

0800c254 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b086      	sub	sp, #24
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
 800c260:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c262:	2300      	movs	r3, #0
 800c264:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	68fa      	ldr	r2, [r7, #12]
 800c270:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c272:	68ba      	ldr	r2, [r7, #8]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	429a      	cmp	r2, r3
 800c278:	d812      	bhi.n	800c2a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	1ad2      	subs	r2, r2, r3
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	699b      	ldr	r3, [r3, #24]
 800c284:	429a      	cmp	r2, r3
 800c286:	d302      	bcc.n	800c28e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c288:	2301      	movs	r3, #1
 800c28a:	617b      	str	r3, [r7, #20]
 800c28c:	e01b      	b.n	800c2c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c28e:	4b10      	ldr	r3, [pc, #64]	; (800c2d0 <prvInsertTimerInActiveList+0x7c>)
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	3304      	adds	r3, #4
 800c296:	4619      	mov	r1, r3
 800c298:	4610      	mov	r0, r2
 800c29a:	f7fe f853 	bl	800a344 <vListInsert>
 800c29e:	e012      	b.n	800c2c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d206      	bcs.n	800c2b6 <prvInsertTimerInActiveList+0x62>
 800c2a8:	68ba      	ldr	r2, [r7, #8]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d302      	bcc.n	800c2b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	617b      	str	r3, [r7, #20]
 800c2b4:	e007      	b.n	800c2c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2b6:	4b07      	ldr	r3, [pc, #28]	; (800c2d4 <prvInsertTimerInActiveList+0x80>)
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	3304      	adds	r3, #4
 800c2be:	4619      	mov	r1, r3
 800c2c0:	4610      	mov	r0, r2
 800c2c2:	f7fe f83f 	bl	800a344 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c2c6:	697b      	ldr	r3, [r7, #20]
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3718      	adds	r7, #24
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	20000d9c 	.word	0x20000d9c
 800c2d4:	20000d98 	.word	0x20000d98

0800c2d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b08e      	sub	sp, #56	; 0x38
 800c2dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2de:	e09d      	b.n	800c41c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	da18      	bge.n	800c318 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c2e6:	1d3b      	adds	r3, r7, #4
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d10a      	bne.n	800c308 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f6:	f383 8811 	msr	BASEPRI, r3
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	61fb      	str	r3, [r7, #28]
}
 800c304:	bf00      	nop
 800c306:	e7fe      	b.n	800c306 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c30e:	6850      	ldr	r0, [r2, #4]
 800c310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c312:	6892      	ldr	r2, [r2, #8]
 800c314:	4611      	mov	r1, r2
 800c316:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	db7d      	blt.n	800c41a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c324:	695b      	ldr	r3, [r3, #20]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d004      	beq.n	800c334 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32c:	3304      	adds	r3, #4
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fe f840 	bl	800a3b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c334:	463b      	mov	r3, r7
 800c336:	4618      	mov	r0, r3
 800c338:	f7ff ff6c 	bl	800c214 <prvSampleTimeNow>
 800c33c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2b09      	cmp	r3, #9
 800c342:	d86b      	bhi.n	800c41c <prvProcessReceivedCommands+0x144>
 800c344:	a201      	add	r2, pc, #4	; (adr r2, 800c34c <prvProcessReceivedCommands+0x74>)
 800c346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34a:	bf00      	nop
 800c34c:	0800c375 	.word	0x0800c375
 800c350:	0800c375 	.word	0x0800c375
 800c354:	0800c375 	.word	0x0800c375
 800c358:	0800c41d 	.word	0x0800c41d
 800c35c:	0800c3d1 	.word	0x0800c3d1
 800c360:	0800c409 	.word	0x0800c409
 800c364:	0800c375 	.word	0x0800c375
 800c368:	0800c375 	.word	0x0800c375
 800c36c:	0800c41d 	.word	0x0800c41d
 800c370:	0800c3d1 	.word	0x0800c3d1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c374:	68ba      	ldr	r2, [r7, #8]
 800c376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c378:	699b      	ldr	r3, [r3, #24]
 800c37a:	18d1      	adds	r1, r2, r3
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c382:	f7ff ff67 	bl	800c254 <prvInsertTimerInActiveList>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d047      	beq.n	800c41c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c392:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c396:	69db      	ldr	r3, [r3, #28]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d13f      	bne.n	800c41c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a0:	699b      	ldr	r3, [r3, #24]
 800c3a2:	441a      	add	r2, r3
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	9300      	str	r3, [sp, #0]
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3ae:	f7ff fe1f 	bl	800bff0 <xTimerGenericCommand>
 800c3b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c3b4:	6a3b      	ldr	r3, [r7, #32]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d130      	bne.n	800c41c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800c3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3be:	f383 8811 	msr	BASEPRI, r3
 800c3c2:	f3bf 8f6f 	isb	sy
 800c3c6:	f3bf 8f4f 	dsb	sy
 800c3ca:	61bb      	str	r3, [r7, #24]
}
 800c3cc:	bf00      	nop
 800c3ce:	e7fe      	b.n	800c3ce <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d8:	699b      	ldr	r3, [r3, #24]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d10a      	bne.n	800c3f4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800c3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	617b      	str	r3, [r7, #20]
}
 800c3f0:	bf00      	nop
 800c3f2:	e7fe      	b.n	800c3f2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f6:	699a      	ldr	r2, [r3, #24]
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fa:	18d1      	adds	r1, r2, r3
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c402:	f7ff ff27 	bl	800c254 <prvInsertTimerInActiveList>
					break;
 800c406:	e009      	b.n	800c41c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d104      	bne.n	800c41c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800c412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c414:	f000 fb6e 	bl	800caf4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c418:	e000      	b.n	800c41c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c41a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c41c:	4b07      	ldr	r3, [pc, #28]	; (800c43c <prvProcessReceivedCommands+0x164>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	1d39      	adds	r1, r7, #4
 800c422:	2200      	movs	r2, #0
 800c424:	4618      	mov	r0, r3
 800c426:	f7fe fac5 	bl	800a9b4 <xQueueReceive>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f47f af57 	bne.w	800c2e0 <prvProcessReceivedCommands+0x8>
	}
}
 800c432:	bf00      	nop
 800c434:	bf00      	nop
 800c436:	3730      	adds	r7, #48	; 0x30
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	20000da0 	.word	0x20000da0

0800c440 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b088      	sub	sp, #32
 800c444:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c446:	e045      	b.n	800c4d4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c448:	4b2c      	ldr	r3, [pc, #176]	; (800c4fc <prvSwitchTimerLists+0xbc>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c452:	4b2a      	ldr	r3, [pc, #168]	; (800c4fc <prvSwitchTimerLists+0xbc>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	68db      	ldr	r3, [r3, #12]
 800c45a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	3304      	adds	r3, #4
 800c460:	4618      	mov	r0, r3
 800c462:	f7fd ffa7 	bl	800a3b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c46a:	68f8      	ldr	r0, [r7, #12]
 800c46c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	69db      	ldr	r3, [r3, #28]
 800c472:	2b01      	cmp	r3, #1
 800c474:	d12e      	bne.n	800c4d4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	699b      	ldr	r3, [r3, #24]
 800c47a:	693a      	ldr	r2, [r7, #16]
 800c47c:	4413      	add	r3, r2
 800c47e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c480:	68ba      	ldr	r2, [r7, #8]
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	429a      	cmp	r2, r3
 800c486:	d90e      	bls.n	800c4a6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	68ba      	ldr	r2, [r7, #8]
 800c48c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c494:	4b19      	ldr	r3, [pc, #100]	; (800c4fc <prvSwitchTimerLists+0xbc>)
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	3304      	adds	r3, #4
 800c49c:	4619      	mov	r1, r3
 800c49e:	4610      	mov	r0, r2
 800c4a0:	f7fd ff50 	bl	800a344 <vListInsert>
 800c4a4:	e016      	b.n	800c4d4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	693a      	ldr	r2, [r7, #16]
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	68f8      	ldr	r0, [r7, #12]
 800c4b2:	f7ff fd9d 	bl	800bff0 <xTimerGenericCommand>
 800c4b6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10a      	bne.n	800c4d4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800c4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c2:	f383 8811 	msr	BASEPRI, r3
 800c4c6:	f3bf 8f6f 	isb	sy
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	603b      	str	r3, [r7, #0]
}
 800c4d0:	bf00      	nop
 800c4d2:	e7fe      	b.n	800c4d2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4d4:	4b09      	ldr	r3, [pc, #36]	; (800c4fc <prvSwitchTimerLists+0xbc>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d1b4      	bne.n	800c448 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c4de:	4b07      	ldr	r3, [pc, #28]	; (800c4fc <prvSwitchTimerLists+0xbc>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c4e4:	4b06      	ldr	r3, [pc, #24]	; (800c500 <prvSwitchTimerLists+0xc0>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a04      	ldr	r2, [pc, #16]	; (800c4fc <prvSwitchTimerLists+0xbc>)
 800c4ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c4ec:	4a04      	ldr	r2, [pc, #16]	; (800c500 <prvSwitchTimerLists+0xc0>)
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	6013      	str	r3, [r2, #0]
}
 800c4f2:	bf00      	nop
 800c4f4:	3718      	adds	r7, #24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	20000d98 	.word	0x20000d98
 800c500:	20000d9c 	.word	0x20000d9c

0800c504 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c50a:	f000 f92f 	bl	800c76c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c50e:	4b15      	ldr	r3, [pc, #84]	; (800c564 <prvCheckForValidListAndQueue+0x60>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d120      	bne.n	800c558 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c516:	4814      	ldr	r0, [pc, #80]	; (800c568 <prvCheckForValidListAndQueue+0x64>)
 800c518:	f7fd fec6 	bl	800a2a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c51c:	4813      	ldr	r0, [pc, #76]	; (800c56c <prvCheckForValidListAndQueue+0x68>)
 800c51e:	f7fd fec3 	bl	800a2a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c522:	4b13      	ldr	r3, [pc, #76]	; (800c570 <prvCheckForValidListAndQueue+0x6c>)
 800c524:	4a10      	ldr	r2, [pc, #64]	; (800c568 <prvCheckForValidListAndQueue+0x64>)
 800c526:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c528:	4b12      	ldr	r3, [pc, #72]	; (800c574 <prvCheckForValidListAndQueue+0x70>)
 800c52a:	4a10      	ldr	r2, [pc, #64]	; (800c56c <prvCheckForValidListAndQueue+0x68>)
 800c52c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c52e:	2300      	movs	r3, #0
 800c530:	9300      	str	r3, [sp, #0]
 800c532:	4b11      	ldr	r3, [pc, #68]	; (800c578 <prvCheckForValidListAndQueue+0x74>)
 800c534:	4a11      	ldr	r2, [pc, #68]	; (800c57c <prvCheckForValidListAndQueue+0x78>)
 800c536:	2110      	movs	r1, #16
 800c538:	200a      	movs	r0, #10
 800c53a:	f7fd ffcd 	bl	800a4d8 <xQueueGenericCreateStatic>
 800c53e:	4603      	mov	r3, r0
 800c540:	4a08      	ldr	r2, [pc, #32]	; (800c564 <prvCheckForValidListAndQueue+0x60>)
 800c542:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c544:	4b07      	ldr	r3, [pc, #28]	; (800c564 <prvCheckForValidListAndQueue+0x60>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d005      	beq.n	800c558 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c54c:	4b05      	ldr	r3, [pc, #20]	; (800c564 <prvCheckForValidListAndQueue+0x60>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	490b      	ldr	r1, [pc, #44]	; (800c580 <prvCheckForValidListAndQueue+0x7c>)
 800c552:	4618      	mov	r0, r3
 800c554:	f7fe fc1e 	bl	800ad94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c558:	f000 f938 	bl	800c7cc <vPortExitCritical>
}
 800c55c:	bf00      	nop
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	20000da0 	.word	0x20000da0
 800c568:	20000d70 	.word	0x20000d70
 800c56c:	20000d84 	.word	0x20000d84
 800c570:	20000d98 	.word	0x20000d98
 800c574:	20000d9c 	.word	0x20000d9c
 800c578:	20000e4c 	.word	0x20000e4c
 800c57c:	20000dac 	.word	0x20000dac
 800c580:	0800d96c 	.word	0x0800d96c

0800c584 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	3b04      	subs	r3, #4
 800c594:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c59c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	3b04      	subs	r3, #4
 800c5a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	f023 0201 	bic.w	r2, r3, #1
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	3b04      	subs	r3, #4
 800c5b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c5b4:	4a08      	ldr	r2, [pc, #32]	; (800c5d8 <pxPortInitialiseStack+0x54>)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	3b14      	subs	r3, #20
 800c5be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	3b20      	subs	r3, #32
 800c5ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3714      	adds	r7, #20
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bc80      	pop	{r7}
 800c5d6:	4770      	bx	lr
 800c5d8:	0800c5dd 	.word	0x0800c5dd

0800c5dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b085      	sub	sp, #20
 800c5e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c5e6:	4b12      	ldr	r3, [pc, #72]	; (800c630 <prvTaskExitError+0x54>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ee:	d00a      	beq.n	800c606 <prvTaskExitError+0x2a>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	60fb      	str	r3, [r7, #12]
}
 800c602:	bf00      	nop
 800c604:	e7fe      	b.n	800c604 <prvTaskExitError+0x28>
	__asm volatile
 800c606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60a:	f383 8811 	msr	BASEPRI, r3
 800c60e:	f3bf 8f6f 	isb	sy
 800c612:	f3bf 8f4f 	dsb	sy
 800c616:	60bb      	str	r3, [r7, #8]
}
 800c618:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c61a:	bf00      	nop
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d0fc      	beq.n	800c61c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c622:	bf00      	nop
 800c624:	bf00      	nop
 800c626:	3714      	adds	r7, #20
 800c628:	46bd      	mov	sp, r7
 800c62a:	bc80      	pop	{r7}
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop
 800c630:	2000012c 	.word	0x2000012c
	...

0800c640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c640:	4b07      	ldr	r3, [pc, #28]	; (800c660 <pxCurrentTCBConst2>)
 800c642:	6819      	ldr	r1, [r3, #0]
 800c644:	6808      	ldr	r0, [r1, #0]
 800c646:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c64a:	f380 8809 	msr	PSP, r0
 800c64e:	f3bf 8f6f 	isb	sy
 800c652:	f04f 0000 	mov.w	r0, #0
 800c656:	f380 8811 	msr	BASEPRI, r0
 800c65a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c65e:	4770      	bx	lr

0800c660 <pxCurrentTCBConst2>:
 800c660:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c664:	bf00      	nop
 800c666:	bf00      	nop

0800c668 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c668:	4806      	ldr	r0, [pc, #24]	; (800c684 <prvPortStartFirstTask+0x1c>)
 800c66a:	6800      	ldr	r0, [r0, #0]
 800c66c:	6800      	ldr	r0, [r0, #0]
 800c66e:	f380 8808 	msr	MSP, r0
 800c672:	b662      	cpsie	i
 800c674:	b661      	cpsie	f
 800c676:	f3bf 8f4f 	dsb	sy
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	df00      	svc	0
 800c680:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c682:	bf00      	nop
 800c684:	e000ed08 	.word	0xe000ed08

0800c688 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c68e:	4b32      	ldr	r3, [pc, #200]	; (800c758 <xPortStartScheduler+0xd0>)
 800c690:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	b2db      	uxtb	r3, r3
 800c698:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	22ff      	movs	r2, #255	; 0xff
 800c69e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c6a8:	78fb      	ldrb	r3, [r7, #3]
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c6b0:	b2da      	uxtb	r2, r3
 800c6b2:	4b2a      	ldr	r3, [pc, #168]	; (800c75c <xPortStartScheduler+0xd4>)
 800c6b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c6b6:	4b2a      	ldr	r3, [pc, #168]	; (800c760 <xPortStartScheduler+0xd8>)
 800c6b8:	2207      	movs	r2, #7
 800c6ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6bc:	e009      	b.n	800c6d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c6be:	4b28      	ldr	r3, [pc, #160]	; (800c760 <xPortStartScheduler+0xd8>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	3b01      	subs	r3, #1
 800c6c4:	4a26      	ldr	r2, [pc, #152]	; (800c760 <xPortStartScheduler+0xd8>)
 800c6c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c6c8:	78fb      	ldrb	r3, [r7, #3]
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	005b      	lsls	r3, r3, #1
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6d2:	78fb      	ldrb	r3, [r7, #3]
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6da:	2b80      	cmp	r3, #128	; 0x80
 800c6dc:	d0ef      	beq.n	800c6be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c6de:	4b20      	ldr	r3, [pc, #128]	; (800c760 <xPortStartScheduler+0xd8>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f1c3 0307 	rsb	r3, r3, #7
 800c6e6:	2b04      	cmp	r3, #4
 800c6e8:	d00a      	beq.n	800c700 <xPortStartScheduler+0x78>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ee:	f383 8811 	msr	BASEPRI, r3
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	60bb      	str	r3, [r7, #8]
}
 800c6fc:	bf00      	nop
 800c6fe:	e7fe      	b.n	800c6fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c700:	4b17      	ldr	r3, [pc, #92]	; (800c760 <xPortStartScheduler+0xd8>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	021b      	lsls	r3, r3, #8
 800c706:	4a16      	ldr	r2, [pc, #88]	; (800c760 <xPortStartScheduler+0xd8>)
 800c708:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c70a:	4b15      	ldr	r3, [pc, #84]	; (800c760 <xPortStartScheduler+0xd8>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c712:	4a13      	ldr	r2, [pc, #76]	; (800c760 <xPortStartScheduler+0xd8>)
 800c714:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	b2da      	uxtb	r2, r3
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c71e:	4b11      	ldr	r3, [pc, #68]	; (800c764 <xPortStartScheduler+0xdc>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	4a10      	ldr	r2, [pc, #64]	; (800c764 <xPortStartScheduler+0xdc>)
 800c724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c728:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c72a:	4b0e      	ldr	r3, [pc, #56]	; (800c764 <xPortStartScheduler+0xdc>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a0d      	ldr	r2, [pc, #52]	; (800c764 <xPortStartScheduler+0xdc>)
 800c730:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c734:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c736:	f000 f8b9 	bl	800c8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c73a:	4b0b      	ldr	r3, [pc, #44]	; (800c768 <xPortStartScheduler+0xe0>)
 800c73c:	2200      	movs	r2, #0
 800c73e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c740:	f7ff ff92 	bl	800c668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c744:	f7fe ffaa 	bl	800b69c <vTaskSwitchContext>
	prvTaskExitError();
 800c748:	f7ff ff48 	bl	800c5dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	e000e400 	.word	0xe000e400
 800c75c:	20000e9c 	.word	0x20000e9c
 800c760:	20000ea0 	.word	0x20000ea0
 800c764:	e000ed20 	.word	0xe000ed20
 800c768:	2000012c 	.word	0x2000012c

0800c76c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
	__asm volatile
 800c772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c776:	f383 8811 	msr	BASEPRI, r3
 800c77a:	f3bf 8f6f 	isb	sy
 800c77e:	f3bf 8f4f 	dsb	sy
 800c782:	607b      	str	r3, [r7, #4]
}
 800c784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c786:	4b0f      	ldr	r3, [pc, #60]	; (800c7c4 <vPortEnterCritical+0x58>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	3301      	adds	r3, #1
 800c78c:	4a0d      	ldr	r2, [pc, #52]	; (800c7c4 <vPortEnterCritical+0x58>)
 800c78e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c790:	4b0c      	ldr	r3, [pc, #48]	; (800c7c4 <vPortEnterCritical+0x58>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2b01      	cmp	r3, #1
 800c796:	d10f      	bne.n	800c7b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c798:	4b0b      	ldr	r3, [pc, #44]	; (800c7c8 <vPortEnterCritical+0x5c>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00a      	beq.n	800c7b8 <vPortEnterCritical+0x4c>
	__asm volatile
 800c7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a6:	f383 8811 	msr	BASEPRI, r3
 800c7aa:	f3bf 8f6f 	isb	sy
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	603b      	str	r3, [r7, #0]
}
 800c7b4:	bf00      	nop
 800c7b6:	e7fe      	b.n	800c7b6 <vPortEnterCritical+0x4a>
	}
}
 800c7b8:	bf00      	nop
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bc80      	pop	{r7}
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	2000012c 	.word	0x2000012c
 800c7c8:	e000ed04 	.word	0xe000ed04

0800c7cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c7d2:	4b11      	ldr	r3, [pc, #68]	; (800c818 <vPortExitCritical+0x4c>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d10a      	bne.n	800c7f0 <vPortExitCritical+0x24>
	__asm volatile
 800c7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7de:	f383 8811 	msr	BASEPRI, r3
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	607b      	str	r3, [r7, #4]
}
 800c7ec:	bf00      	nop
 800c7ee:	e7fe      	b.n	800c7ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c7f0:	4b09      	ldr	r3, [pc, #36]	; (800c818 <vPortExitCritical+0x4c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	4a08      	ldr	r2, [pc, #32]	; (800c818 <vPortExitCritical+0x4c>)
 800c7f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c7fa:	4b07      	ldr	r3, [pc, #28]	; (800c818 <vPortExitCritical+0x4c>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d105      	bne.n	800c80e <vPortExitCritical+0x42>
 800c802:	2300      	movs	r3, #0
 800c804:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	f383 8811 	msr	BASEPRI, r3
}
 800c80c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c80e:	bf00      	nop
 800c810:	370c      	adds	r7, #12
 800c812:	46bd      	mov	sp, r7
 800c814:	bc80      	pop	{r7}
 800c816:	4770      	bx	lr
 800c818:	2000012c 	.word	0x2000012c
 800c81c:	00000000 	.word	0x00000000

0800c820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c820:	f3ef 8009 	mrs	r0, PSP
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	4b0d      	ldr	r3, [pc, #52]	; (800c860 <pxCurrentTCBConst>)
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c830:	6010      	str	r0, [r2, #0]
 800c832:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c836:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c83a:	f380 8811 	msr	BASEPRI, r0
 800c83e:	f7fe ff2d 	bl	800b69c <vTaskSwitchContext>
 800c842:	f04f 0000 	mov.w	r0, #0
 800c846:	f380 8811 	msr	BASEPRI, r0
 800c84a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c84e:	6819      	ldr	r1, [r3, #0]
 800c850:	6808      	ldr	r0, [r1, #0]
 800c852:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c856:	f380 8809 	msr	PSP, r0
 800c85a:	f3bf 8f6f 	isb	sy
 800c85e:	4770      	bx	lr

0800c860 <pxCurrentTCBConst>:
 800c860:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c864:	bf00      	nop
 800c866:	bf00      	nop

0800c868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	607b      	str	r3, [r7, #4]
}
 800c880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c882:	f7fe fe4d 	bl	800b520 <xTaskIncrementTick>
 800c886:	4603      	mov	r3, r0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d003      	beq.n	800c894 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c88c:	4b06      	ldr	r3, [pc, #24]	; (800c8a8 <SysTick_Handler+0x40>)
 800c88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c892:	601a      	str	r2, [r3, #0]
 800c894:	2300      	movs	r3, #0
 800c896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	f383 8811 	msr	BASEPRI, r3
}
 800c89e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c8a0:	bf00      	nop
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	e000ed04 	.word	0xe000ed04

0800c8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c8b0:	4b0a      	ldr	r3, [pc, #40]	; (800c8dc <vPortSetupTimerInterrupt+0x30>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c8b6:	4b0a      	ldr	r3, [pc, #40]	; (800c8e0 <vPortSetupTimerInterrupt+0x34>)
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c8bc:	4b09      	ldr	r3, [pc, #36]	; (800c8e4 <vPortSetupTimerInterrupt+0x38>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a09      	ldr	r2, [pc, #36]	; (800c8e8 <vPortSetupTimerInterrupt+0x3c>)
 800c8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8c6:	099b      	lsrs	r3, r3, #6
 800c8c8:	4a08      	ldr	r2, [pc, #32]	; (800c8ec <vPortSetupTimerInterrupt+0x40>)
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c8ce:	4b03      	ldr	r3, [pc, #12]	; (800c8dc <vPortSetupTimerInterrupt+0x30>)
 800c8d0:	2207      	movs	r2, #7
 800c8d2:	601a      	str	r2, [r3, #0]
}
 800c8d4:	bf00      	nop
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bc80      	pop	{r7}
 800c8da:	4770      	bx	lr
 800c8dc:	e000e010 	.word	0xe000e010
 800c8e0:	e000e018 	.word	0xe000e018
 800c8e4:	20000010 	.word	0x20000010
 800c8e8:	10624dd3 	.word	0x10624dd3
 800c8ec:	e000e014 	.word	0xe000e014

0800c8f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b085      	sub	sp, #20
 800c8f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c8f6:	f3ef 8305 	mrs	r3, IPSR
 800c8fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2b0f      	cmp	r3, #15
 800c900:	d914      	bls.n	800c92c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c902:	4a16      	ldr	r2, [pc, #88]	; (800c95c <vPortValidateInterruptPriority+0x6c>)
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	4413      	add	r3, r2
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c90c:	4b14      	ldr	r3, [pc, #80]	; (800c960 <vPortValidateInterruptPriority+0x70>)
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	7afa      	ldrb	r2, [r7, #11]
 800c912:	429a      	cmp	r2, r3
 800c914:	d20a      	bcs.n	800c92c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	607b      	str	r3, [r7, #4]
}
 800c928:	bf00      	nop
 800c92a:	e7fe      	b.n	800c92a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c92c:	4b0d      	ldr	r3, [pc, #52]	; (800c964 <vPortValidateInterruptPriority+0x74>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c934:	4b0c      	ldr	r3, [pc, #48]	; (800c968 <vPortValidateInterruptPriority+0x78>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d90a      	bls.n	800c952 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	603b      	str	r3, [r7, #0]
}
 800c94e:	bf00      	nop
 800c950:	e7fe      	b.n	800c950 <vPortValidateInterruptPriority+0x60>
	}
 800c952:	bf00      	nop
 800c954:	3714      	adds	r7, #20
 800c956:	46bd      	mov	sp, r7
 800c958:	bc80      	pop	{r7}
 800c95a:	4770      	bx	lr
 800c95c:	e000e3f0 	.word	0xe000e3f0
 800c960:	20000e9c 	.word	0x20000e9c
 800c964:	e000ed0c 	.word	0xe000ed0c
 800c968:	20000ea0 	.word	0x20000ea0

0800c96c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b08a      	sub	sp, #40	; 0x28
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c974:	2300      	movs	r3, #0
 800c976:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c978:	f7fe fd18 	bl	800b3ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c97c:	4b58      	ldr	r3, [pc, #352]	; (800cae0 <pvPortMalloc+0x174>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d101      	bne.n	800c988 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c984:	f000 f910 	bl	800cba8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c988:	4b56      	ldr	r3, [pc, #344]	; (800cae4 <pvPortMalloc+0x178>)
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	4013      	ands	r3, r2
 800c990:	2b00      	cmp	r3, #0
 800c992:	f040 808e 	bne.w	800cab2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d01d      	beq.n	800c9d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c99c:	2208      	movs	r2, #8
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f003 0307 	and.w	r3, r3, #7
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d014      	beq.n	800c9d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f023 0307 	bic.w	r3, r3, #7
 800c9b4:	3308      	adds	r3, #8
 800c9b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f003 0307 	and.w	r3, r3, #7
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00a      	beq.n	800c9d8 <pvPortMalloc+0x6c>
	__asm volatile
 800c9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	617b      	str	r3, [r7, #20]
}
 800c9d4:	bf00      	nop
 800c9d6:	e7fe      	b.n	800c9d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d069      	beq.n	800cab2 <pvPortMalloc+0x146>
 800c9de:	4b42      	ldr	r3, [pc, #264]	; (800cae8 <pvPortMalloc+0x17c>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d864      	bhi.n	800cab2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c9e8:	4b40      	ldr	r3, [pc, #256]	; (800caec <pvPortMalloc+0x180>)
 800c9ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c9ec:	4b3f      	ldr	r3, [pc, #252]	; (800caec <pvPortMalloc+0x180>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9f2:	e004      	b.n	800c9fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d903      	bls.n	800ca10 <pvPortMalloc+0xa4>
 800ca08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1f1      	bne.n	800c9f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca10:	4b33      	ldr	r3, [pc, #204]	; (800cae0 <pvPortMalloc+0x174>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d04b      	beq.n	800cab2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca1a:	6a3b      	ldr	r3, [r7, #32]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2208      	movs	r2, #8
 800ca20:	4413      	add	r3, r2
 800ca22:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	6a3b      	ldr	r3, [r7, #32]
 800ca2a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2e:	685a      	ldr	r2, [r3, #4]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	1ad2      	subs	r2, r2, r3
 800ca34:	2308      	movs	r3, #8
 800ca36:	005b      	lsls	r3, r3, #1
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d91f      	bls.n	800ca7c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4413      	add	r3, r2
 800ca42:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca44:	69bb      	ldr	r3, [r7, #24]
 800ca46:	f003 0307 	and.w	r3, r3, #7
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d00a      	beq.n	800ca64 <pvPortMalloc+0xf8>
	__asm volatile
 800ca4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	613b      	str	r3, [r7, #16]
}
 800ca60:	bf00      	nop
 800ca62:	e7fe      	b.n	800ca62 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca66:	685a      	ldr	r2, [r3, #4]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	1ad2      	subs	r2, r2, r3
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca76:	69b8      	ldr	r0, [r7, #24]
 800ca78:	f000 f8f8 	bl	800cc6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca7c:	4b1a      	ldr	r3, [pc, #104]	; (800cae8 <pvPortMalloc+0x17c>)
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	4a18      	ldr	r2, [pc, #96]	; (800cae8 <pvPortMalloc+0x17c>)
 800ca88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca8a:	4b17      	ldr	r3, [pc, #92]	; (800cae8 <pvPortMalloc+0x17c>)
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	4b18      	ldr	r3, [pc, #96]	; (800caf0 <pvPortMalloc+0x184>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d203      	bcs.n	800ca9e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca96:	4b14      	ldr	r3, [pc, #80]	; (800cae8 <pvPortMalloc+0x17c>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4a15      	ldr	r2, [pc, #84]	; (800caf0 <pvPortMalloc+0x184>)
 800ca9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa0:	685a      	ldr	r2, [r3, #4]
 800caa2:	4b10      	ldr	r3, [pc, #64]	; (800cae4 <pvPortMalloc+0x178>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	431a      	orrs	r2, r3
 800caa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800caac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caae:	2200      	movs	r2, #0
 800cab0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cab2:	f7fe fc89 	bl	800b3c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cab6:	69fb      	ldr	r3, [r7, #28]
 800cab8:	f003 0307 	and.w	r3, r3, #7
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d00a      	beq.n	800cad6 <pvPortMalloc+0x16a>
	__asm volatile
 800cac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac4:	f383 8811 	msr	BASEPRI, r3
 800cac8:	f3bf 8f6f 	isb	sy
 800cacc:	f3bf 8f4f 	dsb	sy
 800cad0:	60fb      	str	r3, [r7, #12]
}
 800cad2:	bf00      	nop
 800cad4:	e7fe      	b.n	800cad4 <pvPortMalloc+0x168>
	return pvReturn;
 800cad6:	69fb      	ldr	r3, [r7, #28]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3728      	adds	r7, #40	; 0x28
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	20002248 	.word	0x20002248
 800cae4:	20002254 	.word	0x20002254
 800cae8:	2000224c 	.word	0x2000224c
 800caec:	20002240 	.word	0x20002240
 800caf0:	20002250 	.word	0x20002250

0800caf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b086      	sub	sp, #24
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d048      	beq.n	800cb98 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb06:	2308      	movs	r3, #8
 800cb08:	425b      	negs	r3, r3
 800cb0a:	697a      	ldr	r2, [r7, #20]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	685a      	ldr	r2, [r3, #4]
 800cb18:	4b21      	ldr	r3, [pc, #132]	; (800cba0 <vPortFree+0xac>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4013      	ands	r3, r2
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d10a      	bne.n	800cb38 <vPortFree+0x44>
	__asm volatile
 800cb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb26:	f383 8811 	msr	BASEPRI, r3
 800cb2a:	f3bf 8f6f 	isb	sy
 800cb2e:	f3bf 8f4f 	dsb	sy
 800cb32:	60fb      	str	r3, [r7, #12]
}
 800cb34:	bf00      	nop
 800cb36:	e7fe      	b.n	800cb36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00a      	beq.n	800cb56 <vPortFree+0x62>
	__asm volatile
 800cb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb44:	f383 8811 	msr	BASEPRI, r3
 800cb48:	f3bf 8f6f 	isb	sy
 800cb4c:	f3bf 8f4f 	dsb	sy
 800cb50:	60bb      	str	r3, [r7, #8]
}
 800cb52:	bf00      	nop
 800cb54:	e7fe      	b.n	800cb54 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	685a      	ldr	r2, [r3, #4]
 800cb5a:	4b11      	ldr	r3, [pc, #68]	; (800cba0 <vPortFree+0xac>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4013      	ands	r3, r2
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d019      	beq.n	800cb98 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d115      	bne.n	800cb98 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	685a      	ldr	r2, [r3, #4]
 800cb70:	4b0b      	ldr	r3, [pc, #44]	; (800cba0 <vPortFree+0xac>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	43db      	mvns	r3, r3
 800cb76:	401a      	ands	r2, r3
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb7c:	f7fe fc16 	bl	800b3ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	685a      	ldr	r2, [r3, #4]
 800cb84:	4b07      	ldr	r3, [pc, #28]	; (800cba4 <vPortFree+0xb0>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4413      	add	r3, r2
 800cb8a:	4a06      	ldr	r2, [pc, #24]	; (800cba4 <vPortFree+0xb0>)
 800cb8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb8e:	6938      	ldr	r0, [r7, #16]
 800cb90:	f000 f86c 	bl	800cc6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cb94:	f7fe fc18 	bl	800b3c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb98:	bf00      	nop
 800cb9a:	3718      	adds	r7, #24
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	20002254 	.word	0x20002254
 800cba4:	2000224c 	.word	0x2000224c

0800cba8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b085      	sub	sp, #20
 800cbac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cbae:	f241 339c 	movw	r3, #5020	; 0x139c
 800cbb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cbb4:	4b27      	ldr	r3, [pc, #156]	; (800cc54 <prvHeapInit+0xac>)
 800cbb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f003 0307 	and.w	r3, r3, #7
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00c      	beq.n	800cbdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	3307      	adds	r3, #7
 800cbc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f023 0307 	bic.w	r3, r3, #7
 800cbce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cbd0:	68ba      	ldr	r2, [r7, #8]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	1ad3      	subs	r3, r2, r3
 800cbd6:	4a1f      	ldr	r2, [pc, #124]	; (800cc54 <prvHeapInit+0xac>)
 800cbd8:	4413      	add	r3, r2
 800cbda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cbe0:	4a1d      	ldr	r2, [pc, #116]	; (800cc58 <prvHeapInit+0xb0>)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cbe6:	4b1c      	ldr	r3, [pc, #112]	; (800cc58 <prvHeapInit+0xb0>)
 800cbe8:	2200      	movs	r2, #0
 800cbea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	68ba      	ldr	r2, [r7, #8]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cbf4:	2208      	movs	r2, #8
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	1a9b      	subs	r3, r3, r2
 800cbfa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f023 0307 	bic.w	r3, r3, #7
 800cc02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	4a15      	ldr	r2, [pc, #84]	; (800cc5c <prvHeapInit+0xb4>)
 800cc08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc0a:	4b14      	ldr	r3, [pc, #80]	; (800cc5c <prvHeapInit+0xb4>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc12:	4b12      	ldr	r3, [pc, #72]	; (800cc5c <prvHeapInit+0xb4>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2200      	movs	r2, #0
 800cc18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	68fa      	ldr	r2, [r7, #12]
 800cc22:	1ad2      	subs	r2, r2, r3
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc28:	4b0c      	ldr	r3, [pc, #48]	; (800cc5c <prvHeapInit+0xb4>)
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	4a0a      	ldr	r2, [pc, #40]	; (800cc60 <prvHeapInit+0xb8>)
 800cc36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	4a09      	ldr	r2, [pc, #36]	; (800cc64 <prvHeapInit+0xbc>)
 800cc3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc40:	4b09      	ldr	r3, [pc, #36]	; (800cc68 <prvHeapInit+0xc0>)
 800cc42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cc46:	601a      	str	r2, [r3, #0]
}
 800cc48:	bf00      	nop
 800cc4a:	3714      	adds	r7, #20
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bc80      	pop	{r7}
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop
 800cc54:	20000ea4 	.word	0x20000ea4
 800cc58:	20002240 	.word	0x20002240
 800cc5c:	20002248 	.word	0x20002248
 800cc60:	20002250 	.word	0x20002250
 800cc64:	2000224c 	.word	0x2000224c
 800cc68:	20002254 	.word	0x20002254

0800cc6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b085      	sub	sp, #20
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc74:	4b27      	ldr	r3, [pc, #156]	; (800cd14 <prvInsertBlockIntoFreeList+0xa8>)
 800cc76:	60fb      	str	r3, [r7, #12]
 800cc78:	e002      	b.n	800cc80 <prvInsertBlockIntoFreeList+0x14>
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	60fb      	str	r3, [r7, #12]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d8f7      	bhi.n	800cc7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	68ba      	ldr	r2, [r7, #8]
 800cc94:	4413      	add	r3, r2
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d108      	bne.n	800ccae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	685a      	ldr	r2, [r3, #4]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	441a      	add	r2, r3
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	68ba      	ldr	r2, [r7, #8]
 800ccb8:	441a      	add	r2, r3
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d118      	bne.n	800ccf4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	4b14      	ldr	r3, [pc, #80]	; (800cd18 <prvInsertBlockIntoFreeList+0xac>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d00d      	beq.n	800ccea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	685a      	ldr	r2, [r3, #4]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	441a      	add	r2, r3
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	681a      	ldr	r2, [r3, #0]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	601a      	str	r2, [r3, #0]
 800cce8:	e008      	b.n	800ccfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ccea:	4b0b      	ldr	r3, [pc, #44]	; (800cd18 <prvInsertBlockIntoFreeList+0xac>)
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	e003      	b.n	800ccfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ccfc:	68fa      	ldr	r2, [r7, #12]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d002      	beq.n	800cd0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd0a:	bf00      	nop
 800cd0c:	3714      	adds	r7, #20
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bc80      	pop	{r7}
 800cd12:	4770      	bx	lr
 800cd14:	20002240 	.word	0x20002240
 800cd18:	20002248 	.word	0x20002248

0800cd1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cd20:	2200      	movs	r2, #0
 800cd22:	4912      	ldr	r1, [pc, #72]	; (800cd6c <MX_USB_DEVICE_Init+0x50>)
 800cd24:	4812      	ldr	r0, [pc, #72]	; (800cd70 <MX_USB_DEVICE_Init+0x54>)
 800cd26:	f7fc f82e 	bl	8008d86 <USBD_Init>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d001      	beq.n	800cd34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cd30:	f7f3 fd36 	bl	80007a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cd34:	490f      	ldr	r1, [pc, #60]	; (800cd74 <MX_USB_DEVICE_Init+0x58>)
 800cd36:	480e      	ldr	r0, [pc, #56]	; (800cd70 <MX_USB_DEVICE_Init+0x54>)
 800cd38:	f7fc f850 	bl	8008ddc <USBD_RegisterClass>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d001      	beq.n	800cd46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cd42:	f7f3 fd2d 	bl	80007a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cd46:	490c      	ldr	r1, [pc, #48]	; (800cd78 <MX_USB_DEVICE_Init+0x5c>)
 800cd48:	4809      	ldr	r0, [pc, #36]	; (800cd70 <MX_USB_DEVICE_Init+0x54>)
 800cd4a:	f7fb ff81 	bl	8008c50 <USBD_CDC_RegisterInterface>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d001      	beq.n	800cd58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cd54:	f7f3 fd24 	bl	80007a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cd58:	4805      	ldr	r0, [pc, #20]	; (800cd70 <MX_USB_DEVICE_Init+0x54>)
 800cd5a:	f7fc f858 	bl	8008e0e <USBD_Start>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d001      	beq.n	800cd68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cd64:	f7f3 fd1c 	bl	80007a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cd68:	bf00      	nop
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	20000140 	.word	0x20000140
 800cd70:	20002698 	.word	0x20002698
 800cd74:	20000028 	.word	0x20000028
 800cd78:	20000130 	.word	0x20000130

0800cd7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cd80:	2200      	movs	r2, #0
 800cd82:	4905      	ldr	r1, [pc, #20]	; (800cd98 <CDC_Init_FS+0x1c>)
 800cd84:	4805      	ldr	r0, [pc, #20]	; (800cd9c <CDC_Init_FS+0x20>)
 800cd86:	f7fb ff79 	bl	8008c7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cd8a:	4905      	ldr	r1, [pc, #20]	; (800cda0 <CDC_Init_FS+0x24>)
 800cd8c:	4803      	ldr	r0, [pc, #12]	; (800cd9c <CDC_Init_FS+0x20>)
 800cd8e:	f7fb ff8e 	bl	8008cae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cd92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	20002d44 	.word	0x20002d44
 800cd9c:	20002698 	.word	0x20002698
 800cda0:	2000295c 	.word	0x2000295c

0800cda4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cda4:	b480      	push	{r7}
 800cda6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cda8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bc80      	pop	{r7}
 800cdb0:	4770      	bx	lr
	...

0800cdb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	4603      	mov	r3, r0
 800cdbc:	6039      	str	r1, [r7, #0]
 800cdbe:	71fb      	strb	r3, [r7, #7]
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cdc4:	79fb      	ldrb	r3, [r7, #7]
 800cdc6:	2b23      	cmp	r3, #35	; 0x23
 800cdc8:	d84a      	bhi.n	800ce60 <CDC_Control_FS+0xac>
 800cdca:	a201      	add	r2, pc, #4	; (adr r2, 800cdd0 <CDC_Control_FS+0x1c>)
 800cdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd0:	0800ce61 	.word	0x0800ce61
 800cdd4:	0800ce61 	.word	0x0800ce61
 800cdd8:	0800ce61 	.word	0x0800ce61
 800cddc:	0800ce61 	.word	0x0800ce61
 800cde0:	0800ce61 	.word	0x0800ce61
 800cde4:	0800ce61 	.word	0x0800ce61
 800cde8:	0800ce61 	.word	0x0800ce61
 800cdec:	0800ce61 	.word	0x0800ce61
 800cdf0:	0800ce61 	.word	0x0800ce61
 800cdf4:	0800ce61 	.word	0x0800ce61
 800cdf8:	0800ce61 	.word	0x0800ce61
 800cdfc:	0800ce61 	.word	0x0800ce61
 800ce00:	0800ce61 	.word	0x0800ce61
 800ce04:	0800ce61 	.word	0x0800ce61
 800ce08:	0800ce61 	.word	0x0800ce61
 800ce0c:	0800ce61 	.word	0x0800ce61
 800ce10:	0800ce61 	.word	0x0800ce61
 800ce14:	0800ce61 	.word	0x0800ce61
 800ce18:	0800ce61 	.word	0x0800ce61
 800ce1c:	0800ce61 	.word	0x0800ce61
 800ce20:	0800ce61 	.word	0x0800ce61
 800ce24:	0800ce61 	.word	0x0800ce61
 800ce28:	0800ce61 	.word	0x0800ce61
 800ce2c:	0800ce61 	.word	0x0800ce61
 800ce30:	0800ce61 	.word	0x0800ce61
 800ce34:	0800ce61 	.word	0x0800ce61
 800ce38:	0800ce61 	.word	0x0800ce61
 800ce3c:	0800ce61 	.word	0x0800ce61
 800ce40:	0800ce61 	.word	0x0800ce61
 800ce44:	0800ce61 	.word	0x0800ce61
 800ce48:	0800ce61 	.word	0x0800ce61
 800ce4c:	0800ce61 	.word	0x0800ce61
 800ce50:	0800ce61 	.word	0x0800ce61
 800ce54:	0800ce61 	.word	0x0800ce61
 800ce58:	0800ce61 	.word	0x0800ce61
 800ce5c:	0800ce61 	.word	0x0800ce61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ce60:	bf00      	nop
  }

  return (USBD_OK);
 800ce62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	370c      	adds	r7, #12
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bc80      	pop	{r7}
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop

0800ce70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	BaseType_t xHigherPriorityTaskWoken;
	/* We have not woken a task at the start of the ISR. */
	xHigherPriorityTaskWoken = pdFALSE;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < (*Len); i++)
 800ce7e:	2300      	movs	r3, #0
 800ce80:	60fb      	str	r3, [r7, #12]
 800ce82:	e00c      	b.n	800ce9e <CDC_Receive_FS+0x2e>
	{
		xQueueSendToBackFromISR(qUSB_rcvQueue, &Buf[i], &xHigherPriorityTaskWoken );
 800ce84:	4b14      	ldr	r3, [pc, #80]	; (800ced8 <CDC_Receive_FS+0x68>)
 800ce86:	6818      	ldr	r0, [r3, #0]
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	18d1      	adds	r1, r2, r3
 800ce8e:	f107 0208 	add.w	r2, r7, #8
 800ce92:	2300      	movs	r3, #0
 800ce94:	f7fd fcf6 	bl	800a884 <xQueueGenericSendFromISR>
	for (uint32_t i = 0; i < (*Len); i++)
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	60fb      	str	r3, [r7, #12]
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	68fa      	ldr	r2, [r7, #12]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d3ed      	bcc.n	800ce84 <CDC_Receive_FS+0x14>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cea8:	6879      	ldr	r1, [r7, #4]
 800ceaa:	480c      	ldr	r0, [pc, #48]	; (800cedc <CDC_Receive_FS+0x6c>)
 800ceac:	f7fb feff 	bl	8008cae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ceb0:	480a      	ldr	r0, [pc, #40]	; (800cedc <CDC_Receive_FS+0x6c>)
 800ceb2:	f7fb ff3e 	bl	8008d32 <USBD_CDC_ReceivePacket>
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d007      	beq.n	800cecc <CDC_Receive_FS+0x5c>
 800cebc:	4b08      	ldr	r3, [pc, #32]	; (800cee0 <CDC_Receive_FS+0x70>)
 800cebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cec2:	601a      	str	r2, [r3, #0]
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	f3bf 8f6f 	isb	sy
  return (USBD_OK);
 800cecc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	2000248c 	.word	0x2000248c
 800cedc:	20002698 	.word	0x20002698
 800cee0:	e000ed04 	.word	0xe000ed04

0800cee4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	460b      	mov	r3, r1
 800ceee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cef0:	2300      	movs	r3, #0
 800cef2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cef4:	4b0d      	ldr	r3, [pc, #52]	; (800cf2c <CDC_Transmit_FS+0x48>)
 800cef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cefa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d001      	beq.n	800cf0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cf06:	2301      	movs	r3, #1
 800cf08:	e00b      	b.n	800cf22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cf0a:	887b      	ldrh	r3, [r7, #2]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	6879      	ldr	r1, [r7, #4]
 800cf10:	4806      	ldr	r0, [pc, #24]	; (800cf2c <CDC_Transmit_FS+0x48>)
 800cf12:	f7fb feb3 	bl	8008c7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cf16:	4805      	ldr	r0, [pc, #20]	; (800cf2c <CDC_Transmit_FS+0x48>)
 800cf18:	f7fb fedc 	bl	8008cd4 <USBD_CDC_TransmitPacket>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cf20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	20002698 	.word	0x20002698

0800cf30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b083      	sub	sp, #12
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	4603      	mov	r3, r0
 800cf38:	6039      	str	r1, [r7, #0]
 800cf3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	2212      	movs	r2, #18
 800cf40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cf42:	4b03      	ldr	r3, [pc, #12]	; (800cf50 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bc80      	pop	{r7}
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop
 800cf50:	2000015c 	.word	0x2000015c

0800cf54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	6039      	str	r1, [r7, #0]
 800cf5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	2204      	movs	r2, #4
 800cf64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cf66:	4b03      	ldr	r3, [pc, #12]	; (800cf74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bc80      	pop	{r7}
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop
 800cf74:	20000170 	.word	0x20000170

0800cf78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	4603      	mov	r3, r0
 800cf80:	6039      	str	r1, [r7, #0]
 800cf82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf84:	79fb      	ldrb	r3, [r7, #7]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d105      	bne.n	800cf96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf8a:	683a      	ldr	r2, [r7, #0]
 800cf8c:	4907      	ldr	r1, [pc, #28]	; (800cfac <USBD_FS_ProductStrDescriptor+0x34>)
 800cf8e:	4808      	ldr	r0, [pc, #32]	; (800cfb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cf90:	f7fc feb6 	bl	8009d00 <USBD_GetString>
 800cf94:	e004      	b.n	800cfa0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf96:	683a      	ldr	r2, [r7, #0]
 800cf98:	4904      	ldr	r1, [pc, #16]	; (800cfac <USBD_FS_ProductStrDescriptor+0x34>)
 800cf9a:	4805      	ldr	r0, [pc, #20]	; (800cfb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cf9c:	f7fc feb0 	bl	8009d00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cfa0:	4b02      	ldr	r3, [pc, #8]	; (800cfac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	2000312c 	.word	0x2000312c
 800cfb0:	0800d974 	.word	0x0800d974

0800cfb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	4603      	mov	r3, r0
 800cfbc:	6039      	str	r1, [r7, #0]
 800cfbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cfc0:	683a      	ldr	r2, [r7, #0]
 800cfc2:	4904      	ldr	r1, [pc, #16]	; (800cfd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cfc4:	4804      	ldr	r0, [pc, #16]	; (800cfd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cfc6:	f7fc fe9b 	bl	8009d00 <USBD_GetString>
  return USBD_StrDesc;
 800cfca:	4b02      	ldr	r3, [pc, #8]	; (800cfd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3708      	adds	r7, #8
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	2000312c 	.word	0x2000312c
 800cfd8:	0800d980 	.word	0x0800d980

0800cfdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	6039      	str	r1, [r7, #0]
 800cfe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	221a      	movs	r2, #26
 800cfec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cfee:	f000 f843 	bl	800d078 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cff2:	4b02      	ldr	r3, [pc, #8]	; (800cffc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	20000174 	.word	0x20000174

0800d000 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	4603      	mov	r3, r0
 800d008:	6039      	str	r1, [r7, #0]
 800d00a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d00c:	79fb      	ldrb	r3, [r7, #7]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d105      	bne.n	800d01e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d012:	683a      	ldr	r2, [r7, #0]
 800d014:	4907      	ldr	r1, [pc, #28]	; (800d034 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d016:	4808      	ldr	r0, [pc, #32]	; (800d038 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d018:	f7fc fe72 	bl	8009d00 <USBD_GetString>
 800d01c:	e004      	b.n	800d028 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	4904      	ldr	r1, [pc, #16]	; (800d034 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d022:	4805      	ldr	r0, [pc, #20]	; (800d038 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d024:	f7fc fe6c 	bl	8009d00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d028:	4b02      	ldr	r3, [pc, #8]	; (800d034 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	2000312c 	.word	0x2000312c
 800d038:	0800d994 	.word	0x0800d994

0800d03c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	4603      	mov	r3, r0
 800d044:	6039      	str	r1, [r7, #0]
 800d046:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d048:	79fb      	ldrb	r3, [r7, #7]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d105      	bne.n	800d05a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d04e:	683a      	ldr	r2, [r7, #0]
 800d050:	4907      	ldr	r1, [pc, #28]	; (800d070 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d052:	4808      	ldr	r0, [pc, #32]	; (800d074 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d054:	f7fc fe54 	bl	8009d00 <USBD_GetString>
 800d058:	e004      	b.n	800d064 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d05a:	683a      	ldr	r2, [r7, #0]
 800d05c:	4904      	ldr	r1, [pc, #16]	; (800d070 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d05e:	4805      	ldr	r0, [pc, #20]	; (800d074 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d060:	f7fc fe4e 	bl	8009d00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d064:	4b02      	ldr	r3, [pc, #8]	; (800d070 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d066:	4618      	mov	r0, r3
 800d068:	3708      	adds	r7, #8
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	2000312c 	.word	0x2000312c
 800d074:	0800d9a0 	.word	0x0800d9a0

0800d078 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d07e:	4b0f      	ldr	r3, [pc, #60]	; (800d0bc <Get_SerialNum+0x44>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d084:	4b0e      	ldr	r3, [pc, #56]	; (800d0c0 <Get_SerialNum+0x48>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d08a:	4b0e      	ldr	r3, [pc, #56]	; (800d0c4 <Get_SerialNum+0x4c>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d090:	68fa      	ldr	r2, [r7, #12]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4413      	add	r3, r2
 800d096:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d009      	beq.n	800d0b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d09e:	2208      	movs	r2, #8
 800d0a0:	4909      	ldr	r1, [pc, #36]	; (800d0c8 <Get_SerialNum+0x50>)
 800d0a2:	68f8      	ldr	r0, [r7, #12]
 800d0a4:	f000 f814 	bl	800d0d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d0a8:	2204      	movs	r2, #4
 800d0aa:	4908      	ldr	r1, [pc, #32]	; (800d0cc <Get_SerialNum+0x54>)
 800d0ac:	68b8      	ldr	r0, [r7, #8]
 800d0ae:	f000 f80f 	bl	800d0d0 <IntToUnicode>
  }
}
 800d0b2:	bf00      	nop
 800d0b4:	3710      	adds	r7, #16
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	1ffff7e8 	.word	0x1ffff7e8
 800d0c0:	1ffff7ec 	.word	0x1ffff7ec
 800d0c4:	1ffff7f0 	.word	0x1ffff7f0
 800d0c8:	20000176 	.word	0x20000176
 800d0cc:	20000186 	.word	0x20000186

0800d0d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b087      	sub	sp, #28
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	60f8      	str	r0, [r7, #12]
 800d0d8:	60b9      	str	r1, [r7, #8]
 800d0da:	4613      	mov	r3, r2
 800d0dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	75fb      	strb	r3, [r7, #23]
 800d0e6:	e027      	b.n	800d138 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	0f1b      	lsrs	r3, r3, #28
 800d0ec:	2b09      	cmp	r3, #9
 800d0ee:	d80b      	bhi.n	800d108 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	0f1b      	lsrs	r3, r3, #28
 800d0f4:	b2da      	uxtb	r2, r3
 800d0f6:	7dfb      	ldrb	r3, [r7, #23]
 800d0f8:	005b      	lsls	r3, r3, #1
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	440b      	add	r3, r1
 800d100:	3230      	adds	r2, #48	; 0x30
 800d102:	b2d2      	uxtb	r2, r2
 800d104:	701a      	strb	r2, [r3, #0]
 800d106:	e00a      	b.n	800d11e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	0f1b      	lsrs	r3, r3, #28
 800d10c:	b2da      	uxtb	r2, r3
 800d10e:	7dfb      	ldrb	r3, [r7, #23]
 800d110:	005b      	lsls	r3, r3, #1
 800d112:	4619      	mov	r1, r3
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	440b      	add	r3, r1
 800d118:	3237      	adds	r2, #55	; 0x37
 800d11a:	b2d2      	uxtb	r2, r2
 800d11c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	011b      	lsls	r3, r3, #4
 800d122:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d124:	7dfb      	ldrb	r3, [r7, #23]
 800d126:	005b      	lsls	r3, r3, #1
 800d128:	3301      	adds	r3, #1
 800d12a:	68ba      	ldr	r2, [r7, #8]
 800d12c:	4413      	add	r3, r2
 800d12e:	2200      	movs	r2, #0
 800d130:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d132:	7dfb      	ldrb	r3, [r7, #23]
 800d134:	3301      	adds	r3, #1
 800d136:	75fb      	strb	r3, [r7, #23]
 800d138:	7dfa      	ldrb	r2, [r7, #23]
 800d13a:	79fb      	ldrb	r3, [r7, #7]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d3d3      	bcc.n	800d0e8 <IntToUnicode+0x18>
  }
}
 800d140:	bf00      	nop
 800d142:	bf00      	nop
 800d144:	371c      	adds	r7, #28
 800d146:	46bd      	mov	sp, r7
 800d148:	bc80      	pop	{r7}
 800d14a:	4770      	bx	lr

0800d14c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a0d      	ldr	r2, [pc, #52]	; (800d190 <HAL_PCD_MspInit+0x44>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d113      	bne.n	800d186 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d15e:	4b0d      	ldr	r3, [pc, #52]	; (800d194 <HAL_PCD_MspInit+0x48>)
 800d160:	69db      	ldr	r3, [r3, #28]
 800d162:	4a0c      	ldr	r2, [pc, #48]	; (800d194 <HAL_PCD_MspInit+0x48>)
 800d164:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d168:	61d3      	str	r3, [r2, #28]
 800d16a:	4b0a      	ldr	r3, [pc, #40]	; (800d194 <HAL_PCD_MspInit+0x48>)
 800d16c:	69db      	ldr	r3, [r3, #28]
 800d16e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d172:	60fb      	str	r3, [r7, #12]
 800d174:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800d176:	2200      	movs	r2, #0
 800d178:	2105      	movs	r1, #5
 800d17a:	2014      	movs	r0, #20
 800d17c:	f7f5 fb05 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d180:	2014      	movs	r0, #20
 800d182:	f7f5 fb1e 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d186:	bf00      	nop
 800d188:	3710      	adds	r7, #16
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	40005c00 	.word	0x40005c00
 800d194:	40021000 	.word	0x40021000

0800d198 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	4610      	mov	r0, r2
 800d1b0:	f7fb fe75 	bl	8008e9e <USBD_LL_SetupStage>
}
 800d1b4:	bf00      	nop
 800d1b6:	3708      	adds	r7, #8
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d1ce:	78fa      	ldrb	r2, [r7, #3]
 800d1d0:	6879      	ldr	r1, [r7, #4]
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	4413      	add	r3, r2
 800d1d8:	00db      	lsls	r3, r3, #3
 800d1da:	440b      	add	r3, r1
 800d1dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	78fb      	ldrb	r3, [r7, #3]
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	f7fb fea7 	bl	8008f38 <USBD_LL_DataOutStage>
}
 800d1ea:	bf00      	nop
 800d1ec:	3708      	adds	r7, #8
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b082      	sub	sp, #8
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d204:	78fa      	ldrb	r2, [r7, #3]
 800d206:	6879      	ldr	r1, [r7, #4]
 800d208:	4613      	mov	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	4413      	add	r3, r2
 800d20e:	00db      	lsls	r3, r3, #3
 800d210:	440b      	add	r3, r1
 800d212:	333c      	adds	r3, #60	; 0x3c
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	78fb      	ldrb	r3, [r7, #3]
 800d218:	4619      	mov	r1, r3
 800d21a:	f7fb fefe 	bl	800901a <USBD_LL_DataInStage>
}
 800d21e:	bf00      	nop
 800d220:	3708      	adds	r7, #8
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b082      	sub	sp, #8
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d234:	4618      	mov	r0, r3
 800d236:	f7fc f80e 	bl	8009256 <USBD_LL_SOF>
}
 800d23a:	bf00      	nop
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d242:	b580      	push	{r7, lr}
 800d244:	b084      	sub	sp, #16
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d24a:	2301      	movs	r3, #1
 800d24c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	689b      	ldr	r3, [r3, #8]
 800d252:	2b02      	cmp	r3, #2
 800d254:	d001      	beq.n	800d25a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d256:	f7f3 faa3 	bl	80007a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d260:	7bfa      	ldrb	r2, [r7, #15]
 800d262:	4611      	mov	r1, r2
 800d264:	4618      	mov	r0, r3
 800d266:	f7fb ffbe 	bl	80091e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d270:	4618      	mov	r0, r3
 800d272:	f7fb ff77 	bl	8009164 <USBD_LL_Reset>
}
 800d276:	bf00      	nop
 800d278:	3710      	adds	r7, #16
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
	...

0800d280 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fb ffb8 	bl	8009204 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	699b      	ldr	r3, [r3, #24]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d005      	beq.n	800d2a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d29c:	4b04      	ldr	r3, [pc, #16]	; (800d2b0 <HAL_PCD_SuspendCallback+0x30>)
 800d29e:	691b      	ldr	r3, [r3, #16]
 800d2a0:	4a03      	ldr	r2, [pc, #12]	; (800d2b0 <HAL_PCD_SuspendCallback+0x30>)
 800d2a2:	f043 0306 	orr.w	r3, r3, #6
 800d2a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d2a8:	bf00      	nop
 800d2aa:	3708      	adds	r7, #8
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	e000ed00 	.word	0xe000ed00

0800d2b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fb ffb2 	bl	800922c <USBD_LL_Resume>
}
 800d2c8:	bf00      	nop
 800d2ca:	3708      	adds	r7, #8
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d2d8:	4a28      	ldr	r2, [pc, #160]	; (800d37c <USBD_LL_Init+0xac>)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	4a26      	ldr	r2, [pc, #152]	; (800d37c <USBD_LL_Init+0xac>)
 800d2e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d2e8:	4b24      	ldr	r3, [pc, #144]	; (800d37c <USBD_LL_Init+0xac>)
 800d2ea:	4a25      	ldr	r2, [pc, #148]	; (800d380 <USBD_LL_Init+0xb0>)
 800d2ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d2ee:	4b23      	ldr	r3, [pc, #140]	; (800d37c <USBD_LL_Init+0xac>)
 800d2f0:	2208      	movs	r2, #8
 800d2f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d2f4:	4b21      	ldr	r3, [pc, #132]	; (800d37c <USBD_LL_Init+0xac>)
 800d2f6:	2202      	movs	r2, #2
 800d2f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d2fa:	4b20      	ldr	r3, [pc, #128]	; (800d37c <USBD_LL_Init+0xac>)
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d300:	4b1e      	ldr	r3, [pc, #120]	; (800d37c <USBD_LL_Init+0xac>)
 800d302:	2200      	movs	r2, #0
 800d304:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d306:	4b1d      	ldr	r3, [pc, #116]	; (800d37c <USBD_LL_Init+0xac>)
 800d308:	2200      	movs	r2, #0
 800d30a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d30c:	481b      	ldr	r0, [pc, #108]	; (800d37c <USBD_LL_Init+0xac>)
 800d30e:	f7f5 fd05 	bl	8002d1c <HAL_PCD_Init>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d001      	beq.n	800d31c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d318:	f7f3 fa42 	bl	80007a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d322:	2318      	movs	r3, #24
 800d324:	2200      	movs	r2, #0
 800d326:	2100      	movs	r1, #0
 800d328:	f7f7 f97b 	bl	8004622 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d332:	2358      	movs	r3, #88	; 0x58
 800d334:	2200      	movs	r2, #0
 800d336:	2180      	movs	r1, #128	; 0x80
 800d338:	f7f7 f973 	bl	8004622 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d342:	23c0      	movs	r3, #192	; 0xc0
 800d344:	2200      	movs	r2, #0
 800d346:	2181      	movs	r1, #129	; 0x81
 800d348:	f7f7 f96b 	bl	8004622 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d352:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d356:	2200      	movs	r2, #0
 800d358:	2101      	movs	r1, #1
 800d35a:	f7f7 f962 	bl	8004622 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d364:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d368:	2200      	movs	r2, #0
 800d36a:	2182      	movs	r1, #130	; 0x82
 800d36c:	f7f7 f959 	bl	8004622 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	2000332c 	.word	0x2000332c
 800d380:	40005c00 	.word	0x40005c00

0800d384 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d38c:	2300      	movs	r3, #0
 800d38e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d390:	2300      	movs	r3, #0
 800d392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7f5 fdc9 	bl	8002f32 <HAL_PCD_Start>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3a4:	7bfb      	ldrb	r3, [r7, #15]
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f000 f94e 	bl	800d648 <USBD_Get_USB_Status>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b084      	sub	sp, #16
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
 800d3c2:	4608      	mov	r0, r1
 800d3c4:	4611      	mov	r1, r2
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	70fb      	strb	r3, [r7, #3]
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	70bb      	strb	r3, [r7, #2]
 800d3d0:	4613      	mov	r3, r2
 800d3d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d3e2:	78bb      	ldrb	r3, [r7, #2]
 800d3e4:	883a      	ldrh	r2, [r7, #0]
 800d3e6:	78f9      	ldrb	r1, [r7, #3]
 800d3e8:	f7f5 ff43 	bl	8003272 <HAL_PCD_EP_Open>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3f0:	7bfb      	ldrb	r3, [r7, #15]
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f000 f928 	bl	800d648 <USBD_Get_USB_Status>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3710      	adds	r7, #16
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}

0800d406 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d406:	b580      	push	{r7, lr}
 800d408:	b084      	sub	sp, #16
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	6078      	str	r0, [r7, #4]
 800d40e:	460b      	mov	r3, r1
 800d410:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d412:	2300      	movs	r3, #0
 800d414:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d416:	2300      	movs	r3, #0
 800d418:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d420:	78fa      	ldrb	r2, [r7, #3]
 800d422:	4611      	mov	r1, r2
 800d424:	4618      	mov	r0, r3
 800d426:	f7f5 ff8a 	bl	800333e <HAL_PCD_EP_Close>
 800d42a:	4603      	mov	r3, r0
 800d42c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d42e:	7bfb      	ldrb	r3, [r7, #15]
 800d430:	4618      	mov	r0, r3
 800d432:	f000 f909 	bl	800d648 <USBD_Get_USB_Status>
 800d436:	4603      	mov	r3, r0
 800d438:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d43a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	460b      	mov	r3, r1
 800d44e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d450:	2300      	movs	r3, #0
 800d452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d454:	2300      	movs	r3, #0
 800d456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d45e:	78fa      	ldrb	r2, [r7, #3]
 800d460:	4611      	mov	r1, r2
 800d462:	4618      	mov	r0, r3
 800d464:	f7f6 f84a 	bl	80034fc <HAL_PCD_EP_SetStall>
 800d468:	4603      	mov	r3, r0
 800d46a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d46c:	7bfb      	ldrb	r3, [r7, #15]
 800d46e:	4618      	mov	r0, r3
 800d470:	f000 f8ea 	bl	800d648 <USBD_Get_USB_Status>
 800d474:	4603      	mov	r3, r0
 800d476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d478:	7bbb      	ldrb	r3, [r7, #14]
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3710      	adds	r7, #16
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}

0800d482 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d482:	b580      	push	{r7, lr}
 800d484:	b084      	sub	sp, #16
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
 800d48a:	460b      	mov	r3, r1
 800d48c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d48e:	2300      	movs	r3, #0
 800d490:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d49c:	78fa      	ldrb	r2, [r7, #3]
 800d49e:	4611      	mov	r1, r2
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7f6 f88b 	bl	80035bc <HAL_PCD_EP_ClrStall>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4aa:	7bfb      	ldrb	r3, [r7, #15]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f000 f8cb 	bl	800d648 <USBD_Get_USB_Status>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3710      	adds	r7, #16
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b085      	sub	sp, #20
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d4d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d4d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	da0c      	bge.n	800d4f6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d4dc:	78fb      	ldrb	r3, [r7, #3]
 800d4de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4e2:	68f9      	ldr	r1, [r7, #12]
 800d4e4:	1c5a      	adds	r2, r3, #1
 800d4e6:	4613      	mov	r3, r2
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	4413      	add	r3, r2
 800d4ec:	00db      	lsls	r3, r3, #3
 800d4ee:	440b      	add	r3, r1
 800d4f0:	3302      	adds	r3, #2
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	e00b      	b.n	800d50e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d4f6:	78fb      	ldrb	r3, [r7, #3]
 800d4f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4fc:	68f9      	ldr	r1, [r7, #12]
 800d4fe:	4613      	mov	r3, r2
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	4413      	add	r3, r2
 800d504:	00db      	lsls	r3, r3, #3
 800d506:	440b      	add	r3, r1
 800d508:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d50c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3714      	adds	r7, #20
 800d512:	46bd      	mov	sp, r7
 800d514:	bc80      	pop	{r7}
 800d516:	4770      	bx	lr

0800d518 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	460b      	mov	r3, r1
 800d522:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d524:	2300      	movs	r3, #0
 800d526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d528:	2300      	movs	r3, #0
 800d52a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d532:	78fa      	ldrb	r2, [r7, #3]
 800d534:	4611      	mov	r1, r2
 800d536:	4618      	mov	r0, r3
 800d538:	f7f5 fe76 	bl	8003228 <HAL_PCD_SetAddress>
 800d53c:	4603      	mov	r3, r0
 800d53e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d540:	7bfb      	ldrb	r3, [r7, #15]
 800d542:	4618      	mov	r0, r3
 800d544:	f000 f880 	bl	800d648 <USBD_Get_USB_Status>
 800d548:	4603      	mov	r3, r0
 800d54a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d54c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3710      	adds	r7, #16
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}

0800d556 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d556:	b580      	push	{r7, lr}
 800d558:	b086      	sub	sp, #24
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	60f8      	str	r0, [r7, #12]
 800d55e:	607a      	str	r2, [r7, #4]
 800d560:	461a      	mov	r2, r3
 800d562:	460b      	mov	r3, r1
 800d564:	72fb      	strb	r3, [r7, #11]
 800d566:	4613      	mov	r3, r2
 800d568:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d56a:	2300      	movs	r3, #0
 800d56c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d56e:	2300      	movs	r3, #0
 800d570:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d578:	893b      	ldrh	r3, [r7, #8]
 800d57a:	7af9      	ldrb	r1, [r7, #11]
 800d57c:	687a      	ldr	r2, [r7, #4]
 800d57e:	f7f5 ff7a 	bl	8003476 <HAL_PCD_EP_Transmit>
 800d582:	4603      	mov	r3, r0
 800d584:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d586:	7dfb      	ldrb	r3, [r7, #23]
 800d588:	4618      	mov	r0, r3
 800d58a:	f000 f85d 	bl	800d648 <USBD_Get_USB_Status>
 800d58e:	4603      	mov	r3, r0
 800d590:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d592:	7dbb      	ldrb	r3, [r7, #22]
}
 800d594:	4618      	mov	r0, r3
 800d596:	3718      	adds	r7, #24
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b086      	sub	sp, #24
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	607a      	str	r2, [r7, #4]
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	460b      	mov	r3, r1
 800d5aa:	72fb      	strb	r3, [r7, #11]
 800d5ac:	4613      	mov	r3, r2
 800d5ae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d5be:	893b      	ldrh	r3, [r7, #8]
 800d5c0:	7af9      	ldrb	r1, [r7, #11]
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	f7f5 ff03 	bl	80033ce <HAL_PCD_EP_Receive>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5cc:	7dfb      	ldrb	r3, [r7, #23]
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f000 f83a 	bl	800d648 <USBD_Get_USB_Status>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d5d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3718      	adds	r7, #24
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b082      	sub	sp, #8
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5f4:	78fa      	ldrb	r2, [r7, #3]
 800d5f6:	4611      	mov	r1, r2
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7f5 ff25 	bl	8003448 <HAL_PCD_EP_GetRxCount>
 800d5fe:	4603      	mov	r3, r0
}
 800d600:	4618      	mov	r0, r3
 800d602:	3708      	adds	r7, #8
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d608:	b480      	push	{r7}
 800d60a:	b083      	sub	sp, #12
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d610:	4b02      	ldr	r3, [pc, #8]	; (800d61c <USBD_static_malloc+0x14>)
}
 800d612:	4618      	mov	r0, r3
 800d614:	370c      	adds	r7, #12
 800d616:	46bd      	mov	sp, r7
 800d618:	bc80      	pop	{r7}
 800d61a:	4770      	bx	lr
 800d61c:	20002258 	.word	0x20002258

0800d620 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d620:	b480      	push	{r7}
 800d622:	b083      	sub	sp, #12
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]

}
 800d628:	bf00      	nop
 800d62a:	370c      	adds	r7, #12
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bc80      	pop	{r7}
 800d630:	4770      	bx	lr

0800d632 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d632:	b480      	push	{r7}
 800d634:	b083      	sub	sp, #12
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
 800d63a:	460b      	mov	r3, r1
 800d63c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d63e:	bf00      	nop
 800d640:	370c      	adds	r7, #12
 800d642:	46bd      	mov	sp, r7
 800d644:	bc80      	pop	{r7}
 800d646:	4770      	bx	lr

0800d648 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d648:	b480      	push	{r7}
 800d64a:	b085      	sub	sp, #20
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	4603      	mov	r3, r0
 800d650:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d652:	2300      	movs	r3, #0
 800d654:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d656:	79fb      	ldrb	r3, [r7, #7]
 800d658:	2b03      	cmp	r3, #3
 800d65a:	d817      	bhi.n	800d68c <USBD_Get_USB_Status+0x44>
 800d65c:	a201      	add	r2, pc, #4	; (adr r2, 800d664 <USBD_Get_USB_Status+0x1c>)
 800d65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d662:	bf00      	nop
 800d664:	0800d675 	.word	0x0800d675
 800d668:	0800d67b 	.word	0x0800d67b
 800d66c:	0800d681 	.word	0x0800d681
 800d670:	0800d687 	.word	0x0800d687
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d674:	2300      	movs	r3, #0
 800d676:	73fb      	strb	r3, [r7, #15]
    break;
 800d678:	e00b      	b.n	800d692 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d67a:	2302      	movs	r3, #2
 800d67c:	73fb      	strb	r3, [r7, #15]
    break;
 800d67e:	e008      	b.n	800d692 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d680:	2301      	movs	r3, #1
 800d682:	73fb      	strb	r3, [r7, #15]
    break;
 800d684:	e005      	b.n	800d692 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d686:	2302      	movs	r3, #2
 800d688:	73fb      	strb	r3, [r7, #15]
    break;
 800d68a:	e002      	b.n	800d692 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d68c:	2302      	movs	r3, #2
 800d68e:	73fb      	strb	r3, [r7, #15]
    break;
 800d690:	bf00      	nop
  }
  return usb_status;
 800d692:	7bfb      	ldrb	r3, [r7, #15]
}
 800d694:	4618      	mov	r0, r3
 800d696:	3714      	adds	r7, #20
 800d698:	46bd      	mov	sp, r7
 800d69a:	bc80      	pop	{r7}
 800d69c:	4770      	bx	lr
 800d69e:	bf00      	nop

0800d6a0 <__libc_init_array>:
 800d6a0:	b570      	push	{r4, r5, r6, lr}
 800d6a2:	2600      	movs	r6, #0
 800d6a4:	4d0c      	ldr	r5, [pc, #48]	; (800d6d8 <__libc_init_array+0x38>)
 800d6a6:	4c0d      	ldr	r4, [pc, #52]	; (800d6dc <__libc_init_array+0x3c>)
 800d6a8:	1b64      	subs	r4, r4, r5
 800d6aa:	10a4      	asrs	r4, r4, #2
 800d6ac:	42a6      	cmp	r6, r4
 800d6ae:	d109      	bne.n	800d6c4 <__libc_init_array+0x24>
 800d6b0:	f000 f862 	bl	800d778 <_init>
 800d6b4:	2600      	movs	r6, #0
 800d6b6:	4d0a      	ldr	r5, [pc, #40]	; (800d6e0 <__libc_init_array+0x40>)
 800d6b8:	4c0a      	ldr	r4, [pc, #40]	; (800d6e4 <__libc_init_array+0x44>)
 800d6ba:	1b64      	subs	r4, r4, r5
 800d6bc:	10a4      	asrs	r4, r4, #2
 800d6be:	42a6      	cmp	r6, r4
 800d6c0:	d105      	bne.n	800d6ce <__libc_init_array+0x2e>
 800d6c2:	bd70      	pop	{r4, r5, r6, pc}
 800d6c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6c8:	4798      	blx	r3
 800d6ca:	3601      	adds	r6, #1
 800d6cc:	e7ee      	b.n	800d6ac <__libc_init_array+0xc>
 800d6ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6d2:	4798      	blx	r3
 800d6d4:	3601      	adds	r6, #1
 800d6d6:	e7f2      	b.n	800d6be <__libc_init_array+0x1e>
 800d6d8:	0800ded4 	.word	0x0800ded4
 800d6dc:	0800ded4 	.word	0x0800ded4
 800d6e0:	0800ded4 	.word	0x0800ded4
 800d6e4:	0800ded8 	.word	0x0800ded8

0800d6e8 <memcpy>:
 800d6e8:	440a      	add	r2, r1
 800d6ea:	4291      	cmp	r1, r2
 800d6ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800d6f0:	d100      	bne.n	800d6f4 <memcpy+0xc>
 800d6f2:	4770      	bx	lr
 800d6f4:	b510      	push	{r4, lr}
 800d6f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6fa:	4291      	cmp	r1, r2
 800d6fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d700:	d1f9      	bne.n	800d6f6 <memcpy+0xe>
 800d702:	bd10      	pop	{r4, pc}

0800d704 <memmove>:
 800d704:	4288      	cmp	r0, r1
 800d706:	b510      	push	{r4, lr}
 800d708:	eb01 0402 	add.w	r4, r1, r2
 800d70c:	d902      	bls.n	800d714 <memmove+0x10>
 800d70e:	4284      	cmp	r4, r0
 800d710:	4623      	mov	r3, r4
 800d712:	d807      	bhi.n	800d724 <memmove+0x20>
 800d714:	1e43      	subs	r3, r0, #1
 800d716:	42a1      	cmp	r1, r4
 800d718:	d008      	beq.n	800d72c <memmove+0x28>
 800d71a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d71e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d722:	e7f8      	b.n	800d716 <memmove+0x12>
 800d724:	4601      	mov	r1, r0
 800d726:	4402      	add	r2, r0
 800d728:	428a      	cmp	r2, r1
 800d72a:	d100      	bne.n	800d72e <memmove+0x2a>
 800d72c:	bd10      	pop	{r4, pc}
 800d72e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d736:	e7f7      	b.n	800d728 <memmove+0x24>

0800d738 <memset>:
 800d738:	4603      	mov	r3, r0
 800d73a:	4402      	add	r2, r0
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d100      	bne.n	800d742 <memset+0xa>
 800d740:	4770      	bx	lr
 800d742:	f803 1b01 	strb.w	r1, [r3], #1
 800d746:	e7f9      	b.n	800d73c <memset+0x4>

0800d748 <strstr>:
 800d748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d74a:	780c      	ldrb	r4, [r1, #0]
 800d74c:	b164      	cbz	r4, 800d768 <strstr+0x20>
 800d74e:	4603      	mov	r3, r0
 800d750:	781a      	ldrb	r2, [r3, #0]
 800d752:	4618      	mov	r0, r3
 800d754:	1c5e      	adds	r6, r3, #1
 800d756:	b90a      	cbnz	r2, 800d75c <strstr+0x14>
 800d758:	4610      	mov	r0, r2
 800d75a:	e005      	b.n	800d768 <strstr+0x20>
 800d75c:	4294      	cmp	r4, r2
 800d75e:	d108      	bne.n	800d772 <strstr+0x2a>
 800d760:	460d      	mov	r5, r1
 800d762:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800d766:	b902      	cbnz	r2, 800d76a <strstr+0x22>
 800d768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d76a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800d76e:	4297      	cmp	r7, r2
 800d770:	d0f7      	beq.n	800d762 <strstr+0x1a>
 800d772:	4633      	mov	r3, r6
 800d774:	e7ec      	b.n	800d750 <strstr+0x8>
	...

0800d778 <_init>:
 800d778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d77a:	bf00      	nop
 800d77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d77e:	bc08      	pop	{r3}
 800d780:	469e      	mov	lr, r3
 800d782:	4770      	bx	lr

0800d784 <_fini>:
 800d784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d786:	bf00      	nop
 800d788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d78a:	bc08      	pop	{r3}
 800d78c:	469e      	mov	lr, r3
 800d78e:	4770      	bx	lr
